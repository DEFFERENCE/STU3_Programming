
STU3_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd5c  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000580  0800df34  0800df34  0000ef34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e4b4  0800e4b4  0001025c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e4b4  0800e4b4  0000f4b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e4bc  0800e4bc  0001025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e4bc  0800e4bc  0000f4bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e4c0  0800e4c0  0000f4c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000025c  20000000  0800e4c4  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018b4  20000260  0800e720  00010260  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001b14  0800e720  00010b14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001025c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027449  00000000  00000000  0001028c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047af  00000000  00000000  000376d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bb0  00000000  00000000  0003be88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001581  00000000  00000000  0003da38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000054e4  00000000  00000000  0003efb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000261e4  00000000  00000000  0004449d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a59d  00000000  00000000  0006a681  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00184c1e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007bc0  00000000  00000000  00184c64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0018c824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000260 	.word	0x20000260
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800df1c 	.word	0x0800df1c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000264 	.word	0x20000264
 8000214:	0800df1c 	.word	0x0800df1c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295
 8000b78:	f000 b988 	b.w	8000e8c <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9d08      	ldr	r5, [sp, #32]
 8000b9a:	468e      	mov	lr, r1
 8000b9c:	4604      	mov	r4, r0
 8000b9e:	4688      	mov	r8, r1
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d14a      	bne.n	8000c3a <__udivmoddi4+0xa6>
 8000ba4:	428a      	cmp	r2, r1
 8000ba6:	4617      	mov	r7, r2
 8000ba8:	d962      	bls.n	8000c70 <__udivmoddi4+0xdc>
 8000baa:	fab2 f682 	clz	r6, r2
 8000bae:	b14e      	cbz	r6, 8000bc4 <__udivmoddi4+0x30>
 8000bb0:	f1c6 0320 	rsb	r3, r6, #32
 8000bb4:	fa01 f806 	lsl.w	r8, r1, r6
 8000bb8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bbc:	40b7      	lsls	r7, r6
 8000bbe:	ea43 0808 	orr.w	r8, r3, r8
 8000bc2:	40b4      	lsls	r4, r6
 8000bc4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bc8:	fa1f fc87 	uxth.w	ip, r7
 8000bcc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000bd0:	0c23      	lsrs	r3, r4, #16
 8000bd2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000bd6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bda:	fb01 f20c 	mul.w	r2, r1, ip
 8000bde:	429a      	cmp	r2, r3
 8000be0:	d909      	bls.n	8000bf6 <__udivmoddi4+0x62>
 8000be2:	18fb      	adds	r3, r7, r3
 8000be4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000be8:	f080 80ea 	bcs.w	8000dc0 <__udivmoddi4+0x22c>
 8000bec:	429a      	cmp	r2, r3
 8000bee:	f240 80e7 	bls.w	8000dc0 <__udivmoddi4+0x22c>
 8000bf2:	3902      	subs	r1, #2
 8000bf4:	443b      	add	r3, r7
 8000bf6:	1a9a      	subs	r2, r3, r2
 8000bf8:	b2a3      	uxth	r3, r4
 8000bfa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bfe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c06:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c0a:	459c      	cmp	ip, r3
 8000c0c:	d909      	bls.n	8000c22 <__udivmoddi4+0x8e>
 8000c0e:	18fb      	adds	r3, r7, r3
 8000c10:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c14:	f080 80d6 	bcs.w	8000dc4 <__udivmoddi4+0x230>
 8000c18:	459c      	cmp	ip, r3
 8000c1a:	f240 80d3 	bls.w	8000dc4 <__udivmoddi4+0x230>
 8000c1e:	443b      	add	r3, r7
 8000c20:	3802      	subs	r0, #2
 8000c22:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c26:	eba3 030c 	sub.w	r3, r3, ip
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	b11d      	cbz	r5, 8000c36 <__udivmoddi4+0xa2>
 8000c2e:	40f3      	lsrs	r3, r6
 8000c30:	2200      	movs	r2, #0
 8000c32:	e9c5 3200 	strd	r3, r2, [r5]
 8000c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3a:	428b      	cmp	r3, r1
 8000c3c:	d905      	bls.n	8000c4a <__udivmoddi4+0xb6>
 8000c3e:	b10d      	cbz	r5, 8000c44 <__udivmoddi4+0xb0>
 8000c40:	e9c5 0100 	strd	r0, r1, [r5]
 8000c44:	2100      	movs	r1, #0
 8000c46:	4608      	mov	r0, r1
 8000c48:	e7f5      	b.n	8000c36 <__udivmoddi4+0xa2>
 8000c4a:	fab3 f183 	clz	r1, r3
 8000c4e:	2900      	cmp	r1, #0
 8000c50:	d146      	bne.n	8000ce0 <__udivmoddi4+0x14c>
 8000c52:	4573      	cmp	r3, lr
 8000c54:	d302      	bcc.n	8000c5c <__udivmoddi4+0xc8>
 8000c56:	4282      	cmp	r2, r0
 8000c58:	f200 8105 	bhi.w	8000e66 <__udivmoddi4+0x2d2>
 8000c5c:	1a84      	subs	r4, r0, r2
 8000c5e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c62:	2001      	movs	r0, #1
 8000c64:	4690      	mov	r8, r2
 8000c66:	2d00      	cmp	r5, #0
 8000c68:	d0e5      	beq.n	8000c36 <__udivmoddi4+0xa2>
 8000c6a:	e9c5 4800 	strd	r4, r8, [r5]
 8000c6e:	e7e2      	b.n	8000c36 <__udivmoddi4+0xa2>
 8000c70:	2a00      	cmp	r2, #0
 8000c72:	f000 8090 	beq.w	8000d96 <__udivmoddi4+0x202>
 8000c76:	fab2 f682 	clz	r6, r2
 8000c7a:	2e00      	cmp	r6, #0
 8000c7c:	f040 80a4 	bne.w	8000dc8 <__udivmoddi4+0x234>
 8000c80:	1a8a      	subs	r2, r1, r2
 8000c82:	0c03      	lsrs	r3, r0, #16
 8000c84:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c88:	b280      	uxth	r0, r0
 8000c8a:	b2bc      	uxth	r4, r7
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c92:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c9a:	fb04 f20c 	mul.w	r2, r4, ip
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	d907      	bls.n	8000cb2 <__udivmoddi4+0x11e>
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000ca8:	d202      	bcs.n	8000cb0 <__udivmoddi4+0x11c>
 8000caa:	429a      	cmp	r2, r3
 8000cac:	f200 80e0 	bhi.w	8000e70 <__udivmoddi4+0x2dc>
 8000cb0:	46c4      	mov	ip, r8
 8000cb2:	1a9b      	subs	r3, r3, r2
 8000cb4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cb8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000cbc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000cc0:	fb02 f404 	mul.w	r4, r2, r4
 8000cc4:	429c      	cmp	r4, r3
 8000cc6:	d907      	bls.n	8000cd8 <__udivmoddi4+0x144>
 8000cc8:	18fb      	adds	r3, r7, r3
 8000cca:	f102 30ff 	add.w	r0, r2, #4294967295
 8000cce:	d202      	bcs.n	8000cd6 <__udivmoddi4+0x142>
 8000cd0:	429c      	cmp	r4, r3
 8000cd2:	f200 80ca 	bhi.w	8000e6a <__udivmoddi4+0x2d6>
 8000cd6:	4602      	mov	r2, r0
 8000cd8:	1b1b      	subs	r3, r3, r4
 8000cda:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000cde:	e7a5      	b.n	8000c2c <__udivmoddi4+0x98>
 8000ce0:	f1c1 0620 	rsb	r6, r1, #32
 8000ce4:	408b      	lsls	r3, r1
 8000ce6:	fa22 f706 	lsr.w	r7, r2, r6
 8000cea:	431f      	orrs	r7, r3
 8000cec:	fa0e f401 	lsl.w	r4, lr, r1
 8000cf0:	fa20 f306 	lsr.w	r3, r0, r6
 8000cf4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000cf8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000cfc:	4323      	orrs	r3, r4
 8000cfe:	fa00 f801 	lsl.w	r8, r0, r1
 8000d02:	fa1f fc87 	uxth.w	ip, r7
 8000d06:	fbbe f0f9 	udiv	r0, lr, r9
 8000d0a:	0c1c      	lsrs	r4, r3, #16
 8000d0c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d10:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d14:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d1e:	d909      	bls.n	8000d34 <__udivmoddi4+0x1a0>
 8000d20:	193c      	adds	r4, r7, r4
 8000d22:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d26:	f080 809c 	bcs.w	8000e62 <__udivmoddi4+0x2ce>
 8000d2a:	45a6      	cmp	lr, r4
 8000d2c:	f240 8099 	bls.w	8000e62 <__udivmoddi4+0x2ce>
 8000d30:	3802      	subs	r0, #2
 8000d32:	443c      	add	r4, r7
 8000d34:	eba4 040e 	sub.w	r4, r4, lr
 8000d38:	fa1f fe83 	uxth.w	lr, r3
 8000d3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d40:	fb09 4413 	mls	r4, r9, r3, r4
 8000d44:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d48:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d4c:	45a4      	cmp	ip, r4
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x1ce>
 8000d50:	193c      	adds	r4, r7, r4
 8000d52:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d56:	f080 8082 	bcs.w	8000e5e <__udivmoddi4+0x2ca>
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	d97f      	bls.n	8000e5e <__udivmoddi4+0x2ca>
 8000d5e:	3b02      	subs	r3, #2
 8000d60:	443c      	add	r4, r7
 8000d62:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d66:	eba4 040c 	sub.w	r4, r4, ip
 8000d6a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d6e:	4564      	cmp	r4, ip
 8000d70:	4673      	mov	r3, lr
 8000d72:	46e1      	mov	r9, ip
 8000d74:	d362      	bcc.n	8000e3c <__udivmoddi4+0x2a8>
 8000d76:	d05f      	beq.n	8000e38 <__udivmoddi4+0x2a4>
 8000d78:	b15d      	cbz	r5, 8000d92 <__udivmoddi4+0x1fe>
 8000d7a:	ebb8 0203 	subs.w	r2, r8, r3
 8000d7e:	eb64 0409 	sbc.w	r4, r4, r9
 8000d82:	fa04 f606 	lsl.w	r6, r4, r6
 8000d86:	fa22 f301 	lsr.w	r3, r2, r1
 8000d8a:	431e      	orrs	r6, r3
 8000d8c:	40cc      	lsrs	r4, r1
 8000d8e:	e9c5 6400 	strd	r6, r4, [r5]
 8000d92:	2100      	movs	r1, #0
 8000d94:	e74f      	b.n	8000c36 <__udivmoddi4+0xa2>
 8000d96:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d9a:	0c01      	lsrs	r1, r0, #16
 8000d9c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000da0:	b280      	uxth	r0, r0
 8000da2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000da6:	463b      	mov	r3, r7
 8000da8:	4638      	mov	r0, r7
 8000daa:	463c      	mov	r4, r7
 8000dac:	46b8      	mov	r8, r7
 8000dae:	46be      	mov	lr, r7
 8000db0:	2620      	movs	r6, #32
 8000db2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000db6:	eba2 0208 	sub.w	r2, r2, r8
 8000dba:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000dbe:	e766      	b.n	8000c8e <__udivmoddi4+0xfa>
 8000dc0:	4601      	mov	r1, r0
 8000dc2:	e718      	b.n	8000bf6 <__udivmoddi4+0x62>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	e72c      	b.n	8000c22 <__udivmoddi4+0x8e>
 8000dc8:	f1c6 0220 	rsb	r2, r6, #32
 8000dcc:	fa2e f302 	lsr.w	r3, lr, r2
 8000dd0:	40b7      	lsls	r7, r6
 8000dd2:	40b1      	lsls	r1, r6
 8000dd4:	fa20 f202 	lsr.w	r2, r0, r2
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	430a      	orrs	r2, r1
 8000dde:	fbb3 f8fe 	udiv	r8, r3, lr
 8000de2:	b2bc      	uxth	r4, r7
 8000de4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000de8:	0c11      	lsrs	r1, r2, #16
 8000dea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dee:	fb08 f904 	mul.w	r9, r8, r4
 8000df2:	40b0      	lsls	r0, r6
 8000df4:	4589      	cmp	r9, r1
 8000df6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000dfa:	b280      	uxth	r0, r0
 8000dfc:	d93e      	bls.n	8000e7c <__udivmoddi4+0x2e8>
 8000dfe:	1879      	adds	r1, r7, r1
 8000e00:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e04:	d201      	bcs.n	8000e0a <__udivmoddi4+0x276>
 8000e06:	4589      	cmp	r9, r1
 8000e08:	d81f      	bhi.n	8000e4a <__udivmoddi4+0x2b6>
 8000e0a:	eba1 0109 	sub.w	r1, r1, r9
 8000e0e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e12:	fb09 f804 	mul.w	r8, r9, r4
 8000e16:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e1a:	b292      	uxth	r2, r2
 8000e1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e20:	4542      	cmp	r2, r8
 8000e22:	d229      	bcs.n	8000e78 <__udivmoddi4+0x2e4>
 8000e24:	18ba      	adds	r2, r7, r2
 8000e26:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e2a:	d2c4      	bcs.n	8000db6 <__udivmoddi4+0x222>
 8000e2c:	4542      	cmp	r2, r8
 8000e2e:	d2c2      	bcs.n	8000db6 <__udivmoddi4+0x222>
 8000e30:	f1a9 0102 	sub.w	r1, r9, #2
 8000e34:	443a      	add	r2, r7
 8000e36:	e7be      	b.n	8000db6 <__udivmoddi4+0x222>
 8000e38:	45f0      	cmp	r8, lr
 8000e3a:	d29d      	bcs.n	8000d78 <__udivmoddi4+0x1e4>
 8000e3c:	ebbe 0302 	subs.w	r3, lr, r2
 8000e40:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e44:	3801      	subs	r0, #1
 8000e46:	46e1      	mov	r9, ip
 8000e48:	e796      	b.n	8000d78 <__udivmoddi4+0x1e4>
 8000e4a:	eba7 0909 	sub.w	r9, r7, r9
 8000e4e:	4449      	add	r1, r9
 8000e50:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e54:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e58:	fb09 f804 	mul.w	r8, r9, r4
 8000e5c:	e7db      	b.n	8000e16 <__udivmoddi4+0x282>
 8000e5e:	4673      	mov	r3, lr
 8000e60:	e77f      	b.n	8000d62 <__udivmoddi4+0x1ce>
 8000e62:	4650      	mov	r0, sl
 8000e64:	e766      	b.n	8000d34 <__udivmoddi4+0x1a0>
 8000e66:	4608      	mov	r0, r1
 8000e68:	e6fd      	b.n	8000c66 <__udivmoddi4+0xd2>
 8000e6a:	443b      	add	r3, r7
 8000e6c:	3a02      	subs	r2, #2
 8000e6e:	e733      	b.n	8000cd8 <__udivmoddi4+0x144>
 8000e70:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e74:	443b      	add	r3, r7
 8000e76:	e71c      	b.n	8000cb2 <__udivmoddi4+0x11e>
 8000e78:	4649      	mov	r1, r9
 8000e7a:	e79c      	b.n	8000db6 <__udivmoddi4+0x222>
 8000e7c:	eba1 0109 	sub.w	r1, r1, r9
 8000e80:	46c4      	mov	ip, r8
 8000e82:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e86:	fb09 f804 	mul.w	r8, r9, r4
 8000e8a:	e7c4      	b.n	8000e16 <__udivmoddi4+0x282>

08000e8c <__aeabi_idiv0>:
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop

08000e90 <Encoder_Init>:
#define Count_PER_REV 12000.0f
#define TWO_PI 6.283185f
#define PI 3.14286f
#define Lead 11.0f

void Encoder_Init(Encoder *enc, TIM_HandleTypeDef *htim) {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
    enc->htim = htim;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	683a      	ldr	r2, [r7, #0]
 8000e9e:	601a      	str	r2, [r3, #0]
    HAL_TIM_Encoder_Start(htim, TIM_CHANNEL_ALL);
 8000ea0:	213c      	movs	r1, #60	@ 0x3c
 8000ea2:	6838      	ldr	r0, [r7, #0]
 8000ea4:	f007 fc2c 	bl	8008700 <HAL_TIM_Encoder_Start>

    enc->lastRawPosition = __HAL_TIM_GET_COUNTER(htim);
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eae:	461a      	mov	r2, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	605a      	str	r2, [r3, #4]
    enc->position = 0;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	f04f 0200 	mov.w	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
    enc->velocity = 0;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f04f 0200 	mov.w	r2, #0
 8000ec2:	60da      	str	r2, [r3, #12]
    enc->acceleration = 0;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f04f 0200 	mov.w	r2, #0
 8000eca:	611a      	str	r2, [r3, #16]
    enc->lastPosition = 0;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f04f 0200 	mov.w	r2, #0
 8000ed2:	619a      	str	r2, [r3, #24]
    enc->lastVelocity = 0;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f04f 0200 	mov.w	r2, #0
 8000eda:	61da      	str	r2, [r3, #28]
}
 8000edc:	bf00      	nop
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <Encoder_Update>:

void Encoder_Update(Encoder *enc, float dt) {
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	ed87 0a00 	vstr	s0, [r7]
    int32_t rawPosition = __HAL_TIM_GET_COUNTER(enc->htim);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ef8:	60bb      	str	r3, [r7, #8]
    int32_t deltaRaw = rawPosition - enc->lastRawPosition;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	68ba      	ldr	r2, [r7, #8]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	60fb      	str	r3, [r7, #12]

    // Handle 16-bit counter wrap-around
    if (deltaRaw > 30000) {
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	f247 5230 	movw	r2, #30000	@ 0x7530
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	dd05      	ble.n	8000f1a <Encoder_Update+0x36>
        deltaRaw -= 60000;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	f5a3 436a 	sub.w	r3, r3, #59904	@ 0xea00
 8000f14:	3b60      	subs	r3, #96	@ 0x60
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	e008      	b.n	8000f2c <Encoder_Update+0x48>
    } else if (deltaRaw < -30000) {
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	4a48      	ldr	r2, [pc, #288]	@ (8001040 <Encoder_Update+0x15c>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	da04      	bge.n	8000f2c <Encoder_Update+0x48>
        deltaRaw += 60000;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	f503 436a 	add.w	r3, r3, #59904	@ 0xea00
 8000f28:	3360      	adds	r3, #96	@ 0x60
 8000f2a:	60fb      	str	r3, [r7, #12]
    }

    enc->position += ((float)deltaRaw * TWO_PI) / Count_PER_REV;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	ed93 7a02 	vldr	s14, [r3, #8]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	ee07 3a90 	vmov	s15, r3
 8000f38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f3c:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8001044 <Encoder_Update+0x160>
 8000f40:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000f44:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 8001048 <Encoder_Update+0x164>
 8000f48:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000f4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	edc3 7a02 	vstr	s15, [r3, #8]
    enc->velocity = (enc->position - enc->lastPosition) / dt;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	ed93 7a02 	vldr	s14, [r3, #8]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	edd3 7a06 	vldr	s15, [r3, #24]
 8000f62:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000f66:	ed97 7a00 	vldr	s14, [r7]
 8000f6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	edc3 7a03 	vstr	s15, [r3, #12]
    enc->acceleration = (enc->velocity - enc->lastVelocity) / dt;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	ed93 7a03 	vldr	s14, [r3, #12]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	edd3 7a07 	vldr	s15, [r3, #28]
 8000f80:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000f84:	ed97 7a00 	vldr	s14, [r7]
 8000f88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	edc3 7a04 	vstr	s15, [r3, #16]
    enc->position_degree = enc->position * (180.0f / PI);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	edd3 7a02 	vldr	s15, [r3, #8]
 8000f98:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 800104c <Encoder_Update+0x168>
 8000f9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	edc3 7a05 	vstr	s15, [r3, #20]

    enc->lastRawPosition = rawPosition;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	68ba      	ldr	r2, [r7, #8]
 8000faa:	605a      	str	r2, [r3, #4]
    enc->lastPosition = enc->position;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	689a      	ldr	r2, [r3, #8]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	619a      	str	r2, [r3, #24]
    enc->lastVelocity = enc->velocity;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	68da      	ldr	r2, [r3, #12]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	61da      	str	r2, [r3, #28]

    enc->position_mm += ((float)deltaRaw / Count_PER_REV) * Lead;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	ed93 7a08 	vldr	s14, [r3, #32]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	ee07 3a90 	vmov	s15, r3
 8000fc8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000fcc:	ed9f 6a1e 	vldr	s12, [pc, #120]	@ 8001048 <Encoder_Update+0x164>
 8000fd0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000fd4:	eef2 6a06 	vmov.f32	s13, #38	@ 0x41300000  11.0
 8000fd8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000fdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	edc3 7a08 	vstr	s15, [r3, #32]
    enc->velocity_mm = (enc->position_mm - enc->lastPosition_mm) / dt;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	ed93 7a08 	vldr	s14, [r3, #32]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8000ff2:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000ff6:	ed97 7a00 	vldr	s14, [r7]
 8000ffa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    enc->acceleration_mm = (enc->velocity_mm - enc->lastVelocity_mm) / dt;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001010:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001014:	ed97 7a00 	vldr	s14, [r7]
 8001018:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

    enc->lastPosition_mm = enc->position_mm;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6a1a      	ldr	r2, [r3, #32]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	62da      	str	r2, [r3, #44]	@ 0x2c
    enc->lastVelocity_mm = enc->velocity_mm;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001032:	bf00      	nop
 8001034:	3714      	adds	r7, #20
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	ffff8ad0 	.word	0xffff8ad0
 8001044:	40c90fda 	.word	0x40c90fda
 8001048:	463b8000 	.word	0x463b8000
 800104c:	42651738 	.word	0x42651738

08001050 <Encoder_GetPosition>:

void Encoder_setLimit(Encoder *enc, float limit) {
		enc->position = limit;
}

float Encoder_GetPosition(Encoder *enc) {
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
    return enc->position;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	ee07 3a90 	vmov	s15, r3
}
 8001060:	eeb0 0a67 	vmov.f32	s0, s15
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr

0800106e <Encoder_GetVelocity>:

float Encoder_GetVelocity(Encoder *enc) {
 800106e:	b480      	push	{r7}
 8001070:	b083      	sub	sp, #12
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
    return enc->velocity;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	ee07 3a90 	vmov	s15, r3
}
 800107e:	eeb0 0a67 	vmov.f32	s0, s15
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <Encoder_GetAcceleration>:

float Encoder_GetAcceleration(Encoder *enc) {
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
    return enc->acceleration;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	691b      	ldr	r3, [r3, #16]
 8001098:	ee07 3a90 	vmov	s15, r3
}
 800109c:	eeb0 0a67 	vmov.f32	s0, s15
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <Encoder_GetPosition_mm>:

float Encoder_GetDegree(Encoder *enc) {
	return enc->position_degree;
}

float Encoder_GetPosition_mm(Encoder *enc) {
 80010aa:	b480      	push	{r7}
 80010ac:	b083      	sub	sp, #12
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
    return enc->position_mm;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6a1b      	ldr	r3, [r3, #32]
 80010b6:	ee07 3a90 	vmov	s15, r3
}
 80010ba:	eeb0 0a67 	vmov.f32	s0, s15
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <Encoder_GetVelocity_mm>:

float Encoder_GetVelocity_mm(Encoder *enc) {
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
    return enc->velocity_mm;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010d4:	ee07 3a90 	vmov	s15, r3
}
 80010d8:	eeb0 0a67 	vmov.f32	s0, s15
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <Kalman_Init>:
#include "Kalman_Filter.h"

void Kalman_Init(KalmanFilter *kf) {
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b084      	sub	sp, #16
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
    arm_mat_init_f32(&kf->A, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->A_data);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3370      	adds	r3, #112	@ 0x70
 80010f4:	2204      	movs	r2, #4
 80010f6:	2104      	movs	r1, #4
 80010f8:	f00b fcbf 	bl	800ca7a <arm_mat_init_f32>
    arm_mat_init_f32(&kf->B, KALMAN_STATE_DIM, KALMAN_MEAS_DIM, kf->B_data);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f103 0008 	add.w	r0, r3, #8
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	33b0      	adds	r3, #176	@ 0xb0
 8001106:	2204      	movs	r2, #4
 8001108:	2104      	movs	r1, #4
 800110a:	f00b fcb6 	bl	800ca7a <arm_mat_init_f32>
    arm_mat_init_f32(&kf->H, KALMAN_MEAS_DIM, KALMAN_STATE_DIM, kf->H_data);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	f103 0010 	add.w	r0, r3, #16
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	33f0      	adds	r3, #240	@ 0xf0
 8001118:	2204      	movs	r2, #4
 800111a:	2104      	movs	r1, #4
 800111c:	f00b fcad 	bl	800ca7a <arm_mat_init_f32>
    arm_mat_init_f32(&kf->Q, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->Q_data);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f103 0018 	add.w	r0, r3, #24
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800112c:	2204      	movs	r2, #4
 800112e:	2104      	movs	r1, #4
 8001130:	f00b fca3 	bl	800ca7a <arm_mat_init_f32>
    arm_mat_init_f32(&kf->R, KALMAN_MEAS_DIM, KALMAN_MEAS_DIM, kf->R_data);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f103 0020 	add.w	r0, r3, #32
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8001140:	2204      	movs	r2, #4
 8001142:	2104      	movs	r1, #4
 8001144:	f00b fc99 	bl	800ca7a <arm_mat_init_f32>
    arm_mat_init_f32(&kf->P, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->P_data);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 8001154:	2204      	movs	r2, #4
 8001156:	2104      	movs	r1, #4
 8001158:	f00b fc8f 	bl	800ca7a <arm_mat_init_f32>
    arm_mat_init_f32(&kf->K, KALMAN_STATE_DIM, KALMAN_MEAS_DIM, kf->K_data);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8001168:	2204      	movs	r2, #4
 800116a:	2104      	movs	r1, #4
 800116c:	f00b fc85 	bl	800ca7a <arm_mat_init_f32>
    arm_mat_init_f32(&kf->Input, KALMAN_STATE_DIM, 1, kf->Input_data);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800117c:	2201      	movs	r2, #1
 800117e:	2104      	movs	r1, #4
 8001180:	f00b fc7b 	bl	800ca7a <arm_mat_init_f32>

    arm_mat_init_f32(&kf->x, KALMAN_STATE_DIM, 1, kf->x_data);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8001190:	2201      	movs	r2, #1
 8001192:	2104      	movs	r1, #4
 8001194:	f00b fc71 	bl	800ca7a <arm_mat_init_f32>
    arm_mat_init_f32(&kf->u, KALMAN_MEAS_DIM, 1, kf->u_data);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 80011a4:	2201      	movs	r2, #1
 80011a6:	2104      	movs	r1, #4
 80011a8:	f00b fc67 	bl	800ca7a <arm_mat_init_f32>
    arm_mat_init_f32(&kf->z, KALMAN_MEAS_DIM, 1, kf->z_data);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f103 0050 	add.w	r0, r3, #80	@ 0x50
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80011b8:	2201      	movs	r2, #1
 80011ba:	2104      	movs	r1, #4
 80011bc:	f00b fc5d 	bl	800ca7a <arm_mat_init_f32>

    arm_mat_init_f32(&kf->temp1, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->temp1_data);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80011cc:	2204      	movs	r2, #4
 80011ce:	2104      	movs	r1, #4
 80011d0:	f00b fc53 	bl	800ca7a <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp2, KALMAN_STATE_DIM, KALMAN_MEAS_DIM, kf->temp2_data);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 80011e0:	2204      	movs	r2, #4
 80011e2:	2104      	movs	r1, #4
 80011e4:	f00b fc49 	bl	800ca7a <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp3, KALMAN_MEAS_DIM, KALMAN_MEAS_DIM, kf->temp3_data);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 80011f4:	2204      	movs	r2, #4
 80011f6:	2104      	movs	r1, #4
 80011f8:	f00b fc3f 	bl	800ca7a <arm_mat_init_f32>

    // Clear state
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 80011fc:	2300      	movs	r3, #0
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	e00b      	b.n	800121a <Kalman_Init+0x134>
        kf->x_data[i] = 0.0f;
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	338c      	adds	r3, #140	@ 0x8c
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	4413      	add	r3, r2
 800120c:	3304      	adds	r3, #4
 800120e:	f04f 0200 	mov.w	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	3301      	adds	r3, #1
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	2b03      	cmp	r3, #3
 800121e:	ddf0      	ble.n	8001202 <Kalman_Init+0x11c>
    }
}
 8001220:	bf00      	nop
 8001222:	bf00      	nop
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <Kalman_SetProcessNoise>:

void Kalman_SetProcessNoise(KalmanFilter *kf, float value) {
 800122a:	b480      	push	{r7}
 800122c:	b085      	sub	sp, #20
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
 8001232:	ed87 0a00 	vstr	s0, [r7]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8001236:	2300      	movs	r3, #0
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	e01c      	b.n	8001276 <Kalman_SetProcessNoise+0x4c>
        for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 800123c:	2300      	movs	r3, #0
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	e013      	b.n	800126a <Kalman_SetProcessNoise+0x40>
            kf->Q_data[i * KALMAN_STATE_DIM + j] = (i == j) ? value : 0.0f;
 8001242:	68fa      	ldr	r2, [r7, #12]
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	429a      	cmp	r2, r3
 8001248:	d101      	bne.n	800124e <Kalman_SetProcessNoise+0x24>
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	e001      	b.n	8001252 <Kalman_SetProcessNoise+0x28>
 800124e:	f04f 0300 	mov.w	r3, #0
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	0091      	lsls	r1, r2, #2
 8001256:	68ba      	ldr	r2, [r7, #8]
 8001258:	440a      	add	r2, r1
 800125a:	6879      	ldr	r1, [r7, #4]
 800125c:	324c      	adds	r2, #76	@ 0x4c
 800125e:	0092      	lsls	r2, r2, #2
 8001260:	440a      	add	r2, r1
 8001262:	6013      	str	r3, [r2, #0]
        for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	3301      	adds	r3, #1
 8001268:	60bb      	str	r3, [r7, #8]
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	2b03      	cmp	r3, #3
 800126e:	dde8      	ble.n	8001242 <Kalman_SetProcessNoise+0x18>
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	3301      	adds	r3, #1
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	2b03      	cmp	r3, #3
 800127a:	dddf      	ble.n	800123c <Kalman_SetProcessNoise+0x12>
        }
    }
}
 800127c:	bf00      	nop
 800127e:	bf00      	nop
 8001280:	3714      	adds	r7, #20
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <Kalman_SetMeasurementNoise>:

void Kalman_SetMeasurementNoise(KalmanFilter *kf, float value) {
 800128a:	b480      	push	{r7}
 800128c:	b085      	sub	sp, #20
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
 8001292:	ed87 0a00 	vstr	s0, [r7]
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	e01c      	b.n	80012d6 <Kalman_SetMeasurementNoise+0x4c>
        for (int j = 0; j < KALMAN_MEAS_DIM; j++) {
 800129c:	2300      	movs	r3, #0
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	e013      	b.n	80012ca <Kalman_SetMeasurementNoise+0x40>
            kf->R_data[i * KALMAN_MEAS_DIM + j] = (i == j) ? value : 0.0f;
 80012a2:	68fa      	ldr	r2, [r7, #12]
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d101      	bne.n	80012ae <Kalman_SetMeasurementNoise+0x24>
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	e001      	b.n	80012b2 <Kalman_SetMeasurementNoise+0x28>
 80012ae:	f04f 0300 	mov.w	r3, #0
 80012b2:	68fa      	ldr	r2, [r7, #12]
 80012b4:	0091      	lsls	r1, r2, #2
 80012b6:	68ba      	ldr	r2, [r7, #8]
 80012b8:	440a      	add	r2, r1
 80012ba:	6879      	ldr	r1, [r7, #4]
 80012bc:	325c      	adds	r2, #92	@ 0x5c
 80012be:	0092      	lsls	r2, r2, #2
 80012c0:	440a      	add	r2, r1
 80012c2:	6013      	str	r3, [r2, #0]
        for (int j = 0; j < KALMAN_MEAS_DIM; j++) {
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	3301      	adds	r3, #1
 80012c8:	60bb      	str	r3, [r7, #8]
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	2b03      	cmp	r3, #3
 80012ce:	dde8      	ble.n	80012a2 <Kalman_SetMeasurementNoise+0x18>
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	3301      	adds	r3, #1
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	2b03      	cmp	r3, #3
 80012da:	dddf      	ble.n	800129c <Kalman_SetMeasurementNoise+0x12>
        }
    }
}
 80012dc:	bf00      	nop
 80012de:	bf00      	nop
 80012e0:	3714      	adds	r7, #20
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <Kalman_SetInput>:

void Kalman_SetInput(KalmanFilter *kf, float value)
{
 80012ea:	b480      	push	{r7}
 80012ec:	b083      	sub	sp, #12
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
 80012f2:	ed87 0a00 	vstr	s0, [r7]
	kf->Input_data[0] = value;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	683a      	ldr	r2, [r7, #0]
 80012fa:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr

0800130a <Kalman_Predict>:
void Kalman_Predict(KalmanFilter *kf) {
 800130a:	b580      	push	{r7, lr}
 800130c:	b082      	sub	sp, #8
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
	// x = A * x + B * u
	arm_mat_mult_f32(&kf->A, &kf->x, &kf->temp1);   // temp1 = A * x
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	3358      	adds	r3, #88	@ 0x58
 800131e:	461a      	mov	r2, r3
 8001320:	f00b ff3a 	bl	800d198 <arm_mat_mult_f32>
	arm_mat_mult_f32(&kf->B, &kf->Input, &kf->temp2);   // temp2 = B * u
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f103 0008 	add.w	r0, r3, #8
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3360      	adds	r3, #96	@ 0x60
 8001334:	461a      	mov	r2, r3
 8001336:	f00b ff2f 	bl	800d198 <arm_mat_mult_f32>
	arm_mat_add_f32(&kf->temp1, &kf->temp2, &kf->x); // x = temp1 + temp2
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	3340      	adds	r3, #64	@ 0x40
 800134a:	461a      	mov	r2, r3
 800134c:	f00b fb5a 	bl	800ca04 <arm_mat_add_f32>

    // P = A * P * A' + Q
    arm_mat_mult_f32(&kf->A, &kf->P, &kf->temp1);
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3358      	adds	r3, #88	@ 0x58
 800135c:	461a      	mov	r2, r3
 800135e:	f00b ff1b 	bl	800d198 <arm_mat_mult_f32>
    arm_mat_trans_f32(&kf->A, &kf->temp2);  // reuse temp2
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3360      	adds	r3, #96	@ 0x60
 8001368:	4619      	mov	r1, r3
 800136a:	4610      	mov	r0, r2
 800136c:	f00b ffc9 	bl	800d302 <arm_mat_trans_f32>
    arm_mat_mult_f32(&kf->temp1, &kf->temp2, &kf->P);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3328      	adds	r3, #40	@ 0x28
 8001380:	461a      	mov	r2, r3
 8001382:	f00b ff09 	bl	800d198 <arm_mat_mult_f32>
    arm_mat_add_f32(&kf->P, &kf->Q, &kf->P);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f103 0118 	add.w	r1, r3, #24
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	3328      	adds	r3, #40	@ 0x28
 8001396:	461a      	mov	r2, r3
 8001398:	f00b fb34 	bl	800ca04 <arm_mat_add_f32>
}
 800139c:	bf00      	nop
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <Kalman_Update>:

void Kalman_Update(KalmanFilter *kf, float32_t *measurement) {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b088      	sub	sp, #32
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 80013ae:	2300      	movs	r3, #0
 80013b0:	61fb      	str	r3, [r7, #28]
 80013b2:	e00e      	b.n	80013d2 <Kalman_Update+0x2e>
        kf->z_data[i] = measurement[i];
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	683a      	ldr	r2, [r7, #0]
 80013ba:	4413      	add	r3, r2
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	6879      	ldr	r1, [r7, #4]
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	3394      	adds	r3, #148	@ 0x94
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	440b      	add	r3, r1
 80013c8:	3304      	adds	r3, #4
 80013ca:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	3301      	adds	r3, #1
 80013d0:	61fb      	str	r3, [r7, #28]
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	2b03      	cmp	r3, #3
 80013d6:	dded      	ble.n	80013b4 <Kalman_Update+0x10>
    }

    // K = P * H' * (H * P * H' + R)^-1
    arm_mat_trans_f32(&kf->H, &kf->temp2);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f103 0210 	add.w	r2, r3, #16
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	3360      	adds	r3, #96	@ 0x60
 80013e2:	4619      	mov	r1, r3
 80013e4:	4610      	mov	r0, r2
 80013e6:	f00b ff8c 	bl	800d302 <arm_mat_trans_f32>
    arm_mat_mult_f32(&kf->P, &kf->temp2, &kf->temp1);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	3358      	adds	r3, #88	@ 0x58
 80013fa:	461a      	mov	r2, r3
 80013fc:	f00b fecc 	bl	800d198 <arm_mat_mult_f32>
    arm_mat_mult_f32(&kf->H, &kf->temp1, &kf->temp3);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f103 0010 	add.w	r0, r3, #16
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3368      	adds	r3, #104	@ 0x68
 8001410:	461a      	mov	r2, r3
 8001412:	f00b fec1 	bl	800d198 <arm_mat_mult_f32>
    arm_mat_add_f32(&kf->temp3, &kf->R, &kf->temp3);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f103 0120 	add.w	r1, r3, #32
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	3368      	adds	r3, #104	@ 0x68
 8001426:	461a      	mov	r2, r3
 8001428:	f00b faec 	bl	800ca04 <arm_mat_add_f32>
    arm_mat_inverse_f32(&kf->temp3, &kf->temp3);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	3368      	adds	r3, #104	@ 0x68
 8001436:	4619      	mov	r1, r3
 8001438:	4610      	mov	r0, r2
 800143a:	f00b fb36 	bl	800caaa <arm_mat_inverse_f32>
    arm_mat_mult_f32(&kf->temp1, &kf->temp3, &kf->K);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	3330      	adds	r3, #48	@ 0x30
 800144e:	461a      	mov	r2, r3
 8001450:	f00b fea2 	bl	800d198 <arm_mat_mult_f32>

    // x = x + K * (z - H * x)
    arm_mat_mult_f32(&kf->H, &kf->x, &kf->u);         // reuse u for Hx
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f103 0010 	add.w	r0, r3, #16
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3348      	adds	r3, #72	@ 0x48
 8001464:	461a      	mov	r2, r3
 8001466:	f00b fe97 	bl	800d198 <arm_mat_mult_f32>
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 800146a:	2300      	movs	r3, #0
 800146c:	61bb      	str	r3, [r7, #24]
 800146e:	e01c      	b.n	80014aa <Kalman_Update+0x106>
        kf->u_data[i] = kf->z_data[i] - kf->u_data[i]; // z - Hx
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	3394      	adds	r3, #148	@ 0x94
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	4413      	add	r3, r2
 800147a:	3304      	adds	r3, #4
 800147c:	ed93 7a00 	vldr	s14, [r3]
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	3390      	adds	r3, #144	@ 0x90
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	4413      	add	r3, r2
 800148a:	3304      	adds	r3, #4
 800148c:	edd3 7a00 	vldr	s15, [r3]
 8001490:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	3390      	adds	r3, #144	@ 0x90
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	4413      	add	r3, r2
 800149e:	3304      	adds	r3, #4
 80014a0:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	3301      	adds	r3, #1
 80014a8:	61bb      	str	r3, [r7, #24]
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	2b03      	cmp	r3, #3
 80014ae:	dddf      	ble.n	8001470 <Kalman_Update+0xcc>
    }
    arm_mat_mult_f32(&kf->K, &kf->u, &kf->u);         // reuse u for K*(z-Hx)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3348      	adds	r3, #72	@ 0x48
 80014c0:	461a      	mov	r2, r3
 80014c2:	f00b fe69 	bl	800d198 <arm_mat_mult_f32>
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 80014c6:	2300      	movs	r3, #0
 80014c8:	617b      	str	r3, [r7, #20]
 80014ca:	e01c      	b.n	8001506 <Kalman_Update+0x162>
        kf->x_data[i] += kf->u_data[i];
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	338c      	adds	r3, #140	@ 0x8c
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	4413      	add	r3, r2
 80014d6:	3304      	adds	r3, #4
 80014d8:	ed93 7a00 	vldr	s14, [r3]
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	3390      	adds	r3, #144	@ 0x90
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	3304      	adds	r3, #4
 80014e8:	edd3 7a00 	vldr	s15, [r3]
 80014ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	338c      	adds	r3, #140	@ 0x8c
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4413      	add	r3, r2
 80014fa:	3304      	adds	r3, #4
 80014fc:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	3301      	adds	r3, #1
 8001504:	617b      	str	r3, [r7, #20]
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	2b03      	cmp	r3, #3
 800150a:	dddf      	ble.n	80014cc <Kalman_Update+0x128>
    }

    // P = (I - K * H) * P
    for (int i = 0; i < KALMAN_STATE_DIM * KALMAN_STATE_DIM; i++) {
 800150c:	2300      	movs	r3, #0
 800150e:	613b      	str	r3, [r7, #16]
 8001510:	e00b      	b.n	800152a <Kalman_Update+0x186>
        kf->temp1_data[i] = 0.0f;
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	3398      	adds	r3, #152	@ 0x98
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	4413      	add	r3, r2
 800151c:	3304      	adds	r3, #4
 800151e:	f04f 0200 	mov.w	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KALMAN_STATE_DIM * KALMAN_STATE_DIM; i++) {
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	3301      	adds	r3, #1
 8001528:	613b      	str	r3, [r7, #16]
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	2b0f      	cmp	r3, #15
 800152e:	ddf0      	ble.n	8001512 <Kalman_Update+0x16e>
    }
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8001530:	2300      	movs	r3, #0
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	e00e      	b.n	8001554 <Kalman_Update+0x1b0>
        kf->temp1_data[i * KALMAN_STATE_DIM + i] = 1.0f;
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	4613      	mov	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4413      	add	r3, r2
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	3398      	adds	r3, #152	@ 0x98
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	4413      	add	r3, r2
 8001546:	3304      	adds	r3, #4
 8001548:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800154c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	3301      	adds	r3, #1
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2b03      	cmp	r3, #3
 8001558:	dded      	ble.n	8001536 <Kalman_Update+0x192>
    }
    arm_mat_mult_f32(&kf->K, &kf->H, &kf->temp2);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f103 0110 	add.w	r1, r3, #16
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	3360      	adds	r3, #96	@ 0x60
 800156a:	461a      	mov	r2, r3
 800156c:	f00b fe14 	bl	800d198 <arm_mat_mult_f32>
    arm_mat_sub_f32(&kf->temp1, &kf->temp2, &kf->temp1);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3358      	adds	r3, #88	@ 0x58
 8001580:	461a      	mov	r2, r3
 8001582:	f00b fe83 	bl	800d28c <arm_mat_sub_f32>
    arm_mat_mult_f32(&kf->temp1, &kf->P, &kf->P);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	3328      	adds	r3, #40	@ 0x28
 8001596:	461a      	mov	r2, r3
 8001598:	f00b fdfe 	bl	800d198 <arm_mat_mult_f32>
}
 800159c:	bf00      	nop
 800159e:	3720      	adds	r7, #32
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 80015ac:	4b04      	ldr	r3, [pc, #16]	@ (80015c0 <modbus_1t5_Timeout+0x1c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2201      	movs	r2, #1
 80015b2:	751a      	strb	r2, [r3, #20]
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	2000027c 	.word	0x2000027c

080015c4 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 80015cc:	4b04      	ldr	r3, [pc, #16]	@ (80015e0 <modbus_3t5_Timeout+0x1c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2201      	movs	r2, #1
 80015d2:	755a      	strb	r2, [r3, #21]
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	2000027c 	.word	0x2000027c

080015e4 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 80015ee:	4b15      	ldr	r3, [pc, #84]	@ (8001644 <modbus_UART_Recived+0x60>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2201      	movs	r2, #1
 80015f4:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 80015f6:	4b13      	ldr	r3, [pc, #76]	@ (8001644 <modbus_UART_Recived+0x60>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	@ 0x3a2
 80015fe:	1c59      	adds	r1, r3, #1
 8001600:	b289      	uxth	r1, r1
 8001602:	f8a2 13a2 	strh.w	r1, [r2, #930]	@ 0x3a2
 8001606:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800160a:	d210      	bcs.n	800162e <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 800160c:	4b0d      	ldr	r3, [pc, #52]	@ (8001644 <modbus_UART_Recived+0x60>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	68d8      	ldr	r0, [r3, #12]
 8001612:	4b0c      	ldr	r3, [pc, #48]	@ (8001644 <modbus_UART_Recived+0x60>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	4b0b      	ldr	r3, [pc, #44]	@ (8001644 <modbus_UART_Recived+0x60>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800161e:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001622:	4413      	add	r3, r2
 8001624:	3302      	adds	r3, #2
 8001626:	2201      	movs	r2, #1
 8001628:	4619      	mov	r1, r3
 800162a:	f008 fe79 	bl	800a320 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 800162e:	4b05      	ldr	r3, [pc, #20]	@ (8001644 <modbus_UART_Recived+0x60>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	691b      	ldr	r3, [r3, #16]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2200      	movs	r2, #0
 8001638:	625a      	str	r2, [r3, #36]	@ 0x24

}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	2000027c 	.word	0x2000027c

08001648 <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8001652:	4a24      	ldr	r2, [pc, #144]	@ (80016e4 <Modbus_init+0x9c>)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8001658:	4b22      	ldr	r3, [pc, #136]	@ (80016e4 <Modbus_init+0x9c>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	683a      	ldr	r2, [r7, #0]
 800165e:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 8001660:	4b20      	ldr	r3, [pc, #128]	@ (80016e4 <Modbus_init+0x9c>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	691b      	ldr	r3, [r3, #16]
 8001666:	4a20      	ldr	r2, [pc, #128]	@ (80016e8 <Modbus_init+0xa0>)
 8001668:	2114      	movs	r1, #20
 800166a:	4618      	mov	r0, r3
 800166c:	f007 fd4e 	bl	800910c <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001670:	4b1c      	ldr	r3, [pc, #112]	@ (80016e4 <Modbus_init+0x9c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	4a1d      	ldr	r2, [pc, #116]	@ (80016ec <Modbus_init+0xa4>)
 8001678:	210e      	movs	r1, #14
 800167a:	4618      	mov	r0, r3
 800167c:	f007 fd46 	bl	800910c <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 8001680:	4b18      	ldr	r3, [pc, #96]	@ (80016e4 <Modbus_init+0x9c>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	4a1a      	ldr	r2, [pc, #104]	@ (80016f0 <Modbus_init+0xa8>)
 8001688:	2103      	movs	r1, #3
 800168a:	4618      	mov	r0, r3
 800168c:	f008 fd8e 	bl	800a1ac <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001690:	4b14      	ldr	r3, [pc, #80]	@ (80016e4 <Modbus_init+0x9c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	68d8      	ldr	r0, [r3, #12]
 8001696:	4b13      	ldr	r3, [pc, #76]	@ (80016e4 <Modbus_init+0x9c>)
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	4b12      	ldr	r3, [pc, #72]	@ (80016e4 <Modbus_init+0x9c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80016a2:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80016a6:	4413      	add	r3, r2
 80016a8:	3302      	adds	r3, #2
 80016aa:	2201      	movs	r2, #1
 80016ac:	4619      	mov	r1, r3
 80016ae:	f008 fe37 	bl	800a320 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 80016b2:	4b0c      	ldr	r3, [pc, #48]	@ (80016e4 <Modbus_init+0x9c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	691b      	ldr	r3, [r3, #16]
 80016b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d10c      	bne.n	80016dc <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 80016c2:	4b08      	ldr	r3, [pc, #32]	@ (80016e4 <Modbus_init+0x9c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f006 fc09 	bl	8007ee0 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 80016ce:	4b05      	ldr	r3, [pc, #20]	@ (80016e4 <Modbus_init+0x9c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	691b      	ldr	r3, [r3, #16]
 80016d4:	2100      	movs	r1, #0
 80016d6:	4618      	mov	r0, r3
 80016d8:	f006 fed0 	bl	800847c <HAL_TIM_OnePulse_Start_IT>
    	}

}
 80016dc:	bf00      	nop
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	2000027c 	.word	0x2000027c
 80016e8:	080015a5 	.word	0x080015a5
 80016ec:	080015c5 	.word	0x080015c5
 80016f0:	080015e5 	.word	0x080015e5

080016f4 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	460b      	mov	r3, r1
 80016fe:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001700:	23ff      	movs	r3, #255	@ 0xff
 8001702:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001704:	23ff      	movs	r3, #255	@ 0xff
 8001706:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8001708:	e013      	b.n	8001732 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	1c5a      	adds	r2, r3, #1
 800170e:	607a      	str	r2, [r7, #4]
 8001710:	781a      	ldrb	r2, [r3, #0]
 8001712:	7bbb      	ldrb	r3, [r7, #14]
 8001714:	4053      	eors	r3, r2
 8001716:	b2db      	uxtb	r3, r3
 8001718:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800171a:	4a10      	ldr	r2, [pc, #64]	@ (800175c <CRC16+0x68>)
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	4413      	add	r3, r2
 8001720:	781a      	ldrb	r2, [r3, #0]
 8001722:	7bfb      	ldrb	r3, [r7, #15]
 8001724:	4053      	eors	r3, r2
 8001726:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8001728:	4a0d      	ldr	r2, [pc, #52]	@ (8001760 <CRC16+0x6c>)
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	4413      	add	r3, r2
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001732:	883b      	ldrh	r3, [r7, #0]
 8001734:	1e5a      	subs	r2, r3, #1
 8001736:	803a      	strh	r2, [r7, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d1e6      	bne.n	800170a <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 800173c:	7bfb      	ldrb	r3, [r7, #15]
 800173e:	b21b      	sxth	r3, r3
 8001740:	021b      	lsls	r3, r3, #8
 8001742:	b21a      	sxth	r2, r3
 8001744:	7bbb      	ldrb	r3, [r7, #14]
 8001746:	b21b      	sxth	r3, r3
 8001748:	4313      	orrs	r3, r2
 800174a:	b21b      	sxth	r3, r3
 800174c:	b29b      	uxth	r3, r3
}
 800174e:	4618      	mov	r0, r3
 8001750:	3714      	adds	r7, #20
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	20000100 	.word	0x20000100
 8001760:	20000000 	.word	0x20000000

08001764 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 800176a:	4b80      	ldr	r3, [pc, #512]	@ (800196c <Modbus_Protocal_Worker+0x208>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	7e1b      	ldrb	r3, [r3, #24]
 8001770:	3b01      	subs	r3, #1
 8001772:	2b03      	cmp	r3, #3
 8001774:	d80a      	bhi.n	800178c <Modbus_Protocal_Worker+0x28>
 8001776:	a201      	add	r2, pc, #4	@ (adr r2, 800177c <Modbus_Protocal_Worker+0x18>)
 8001778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800177c:	08001797 	.word	0x08001797
 8001780:	08001935 	.word	0x08001935
 8001784:	08001821 	.word	0x08001821
 8001788:	08001847 	.word	0x08001847
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 800178c:	4b77      	ldr	r3, [pc, #476]	@ (800196c <Modbus_Protocal_Worker+0x208>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2201      	movs	r2, #1
 8001792:	761a      	strb	r2, [r3, #24]
		break;
 8001794:	e0e6      	b.n	8001964 <Modbus_Protocal_Worker+0x200>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 8001796:	4b75      	ldr	r3, [pc, #468]	@ (800196c <Modbus_Protocal_Worker+0x208>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d002      	beq.n	80017a8 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 80017a2:	f000 f9d5 	bl	8001b50 <Modbus_Emission>
 80017a6:	e01c      	b.n	80017e2 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 80017a8:	4b70      	ldr	r3, [pc, #448]	@ (800196c <Modbus_Protocal_Worker+0x208>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	7d9b      	ldrb	r3, [r3, #22]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d017      	beq.n	80017e2 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 80017b2:	4b6e      	ldr	r3, [pc, #440]	@ (800196c <Modbus_Protocal_Worker+0x208>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2200      	movs	r2, #0
 80017b8:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 80017ba:	4b6c      	ldr	r3, [pc, #432]	@ (800196c <Modbus_Protocal_Worker+0x208>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2200      	movs	r2, #0
 80017c0:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 80017c2:	4b6a      	ldr	r3, [pc, #424]	@ (800196c <Modbus_Protocal_Worker+0x208>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	691b      	ldr	r3, [r3, #16]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	4b67      	ldr	r3, [pc, #412]	@ (800196c <Modbus_Protocal_Worker+0x208>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	691b      	ldr	r3, [r3, #16]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f042 0201 	orr.w	r2, r2, #1
 80017d8:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 80017da:	4b64      	ldr	r3, [pc, #400]	@ (800196c <Modbus_Protocal_Worker+0x208>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2203      	movs	r2, #3
 80017e0:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 80017e2:	4b62      	ldr	r3, [pc, #392]	@ (800196c <Modbus_Protocal_Worker+0x208>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017ec:	2b20      	cmp	r3, #32
 80017ee:	f040 80b2 	bne.w	8001956 <Modbus_Protocal_Worker+0x1f2>
		{
			hModbus->modbusUartStructure.RxTail =0;
 80017f2:	4b5e      	ldr	r3, [pc, #376]	@ (800196c <Modbus_Protocal_Worker+0x208>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80017fc:	4b5b      	ldr	r3, [pc, #364]	@ (800196c <Modbus_Protocal_Worker+0x208>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	68d8      	ldr	r0, [r3, #12]
 8001802:	4b5a      	ldr	r3, [pc, #360]	@ (800196c <Modbus_Protocal_Worker+0x208>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	4b59      	ldr	r3, [pc, #356]	@ (800196c <Modbus_Protocal_Worker+0x208>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800180e:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001812:	4413      	add	r3, r2
 8001814:	3302      	adds	r3, #2
 8001816:	2201      	movs	r2, #1
 8001818:	4619      	mov	r1, r3
 800181a:	f008 fd81 	bl	800a320 <HAL_UART_Receive_IT>
		}
		break;
 800181e:	e09a      	b.n	8001956 <Modbus_Protocal_Worker+0x1f2>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8001820:	4b52      	ldr	r3, [pc, #328]	@ (800196c <Modbus_Protocal_Worker+0x208>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	7d1b      	ldrb	r3, [r3, #20]
 8001826:	2b00      	cmp	r3, #0
 8001828:	f000 8097 	beq.w	800195a <Modbus_Protocal_Worker+0x1f6>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 800182c:	4b4f      	ldr	r3, [pc, #316]	@ (800196c <Modbus_Protocal_Worker+0x208>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2200      	movs	r2, #0
 8001832:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001834:	4b4d      	ldr	r3, [pc, #308]	@ (800196c <Modbus_Protocal_Worker+0x208>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	22fe      	movs	r2, #254	@ 0xfe
 800183a:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 800183c:	4b4b      	ldr	r3, [pc, #300]	@ (800196c <Modbus_Protocal_Worker+0x208>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2204      	movs	r2, #4
 8001842:	761a      	strb	r2, [r3, #24]
		}
		break;
 8001844:	e089      	b.n	800195a <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 8001846:	4b49      	ldr	r3, [pc, #292]	@ (800196c <Modbus_Protocal_Worker+0x208>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	7d9b      	ldrb	r3, [r3, #22]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d009      	beq.n	8001864 <Modbus_Protocal_Worker+0x100>
		{

			if(!hModbus->RecvStatus)
 8001850:	4b46      	ldr	r3, [pc, #280]	@ (800196c <Modbus_Protocal_Worker+0x208>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d103      	bne.n	8001864 <Modbus_Protocal_Worker+0x100>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800185c:	4b43      	ldr	r3, [pc, #268]	@ (800196c <Modbus_Protocal_Worker+0x208>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	22ff      	movs	r2, #255	@ 0xff
 8001862:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8001864:	4b41      	ldr	r3, [pc, #260]	@ (800196c <Modbus_Protocal_Worker+0x208>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f993 3017 	ldrsb.w	r3, [r3, #23]
 800186c:	f113 0f02 	cmn.w	r3, #2
 8001870:	d150      	bne.n	8001914 <Modbus_Protocal_Worker+0x1b0>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8001872:	4b3e      	ldr	r3, [pc, #248]	@ (800196c <Modbus_Protocal_Worker+0x208>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2200      	movs	r2, #0
 8001878:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 800187a:	4b3c      	ldr	r3, [pc, #240]	@ (800196c <Modbus_Protocal_Worker+0x208>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f203 2272 	addw	r2, r3, #626	@ 0x272
 8001882:	4b3a      	ldr	r3, [pc, #232]	@ (800196c <Modbus_Protocal_Worker+0x208>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800188a:	3b02      	subs	r3, #2
 800188c:	4619      	mov	r1, r3
 800188e:	4610      	mov	r0, r2
 8001890:	f7ff ff30 	bl	80016f4 <CRC16>
 8001894:	4603      	mov	r3, r0
 8001896:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001898:	793a      	ldrb	r2, [r7, #4]
 800189a:	4b34      	ldr	r3, [pc, #208]	@ (800196c <Modbus_Protocal_Worker+0x208>)
 800189c:	6819      	ldr	r1, [r3, #0]
 800189e:	4b33      	ldr	r3, [pc, #204]	@ (800196c <Modbus_Protocal_Worker+0x208>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80018a6:	3b02      	subs	r3, #2
 80018a8:	440b      	add	r3, r1
 80018aa:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d10c      	bne.n	80018cc <Modbus_Protocal_Worker+0x168>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80018b2:	797a      	ldrb	r2, [r7, #5]
 80018b4:	4b2d      	ldr	r3, [pc, #180]	@ (800196c <Modbus_Protocal_Worker+0x208>)
 80018b6:	6819      	ldr	r1, [r3, #0]
 80018b8:	4b2c      	ldr	r3, [pc, #176]	@ (800196c <Modbus_Protocal_Worker+0x208>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80018c0:	3b01      	subs	r3, #1
 80018c2:	440b      	add	r3, r1
 80018c4:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d004      	beq.n	80018d6 <Modbus_Protocal_Worker+0x172>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80018cc:	4b27      	ldr	r3, [pc, #156]	@ (800196c <Modbus_Protocal_Worker+0x208>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	22ff      	movs	r2, #255	@ 0xff
 80018d2:	75da      	strb	r2, [r3, #23]
				break;
 80018d4:	e046      	b.n	8001964 <Modbus_Protocal_Worker+0x200>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 80018d6:	4b25      	ldr	r3, [pc, #148]	@ (800196c <Modbus_Protocal_Worker+0x208>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 80018de:	4b23      	ldr	r3, [pc, #140]	@ (800196c <Modbus_Protocal_Worker+0x208>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d113      	bne.n	8001910 <Modbus_Protocal_Worker+0x1ac>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 80018e8:	4b20      	ldr	r3, [pc, #128]	@ (800196c <Modbus_Protocal_Worker+0x208>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 80018f0:	4b1e      	ldr	r3, [pc, #120]	@ (800196c <Modbus_Protocal_Worker+0x208>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 80018f8:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 80018fa:	4b1c      	ldr	r3, [pc, #112]	@ (800196c <Modbus_Protocal_Worker+0x208>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001902:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8001904:	461a      	mov	r2, r3
 8001906:	f00b fd6f 	bl	800d3e8 <memcpy>

			//execute command
			Modbus_frame_response();
 800190a:	f000 f909 	bl	8001b20 <Modbus_frame_response>
 800190e:	e001      	b.n	8001914 <Modbus_Protocal_Worker+0x1b0>
				break;
 8001910:	bf00      	nop
					}
		break;


	}
}
 8001912:	e027      	b.n	8001964 <Modbus_Protocal_Worker+0x200>
		if(hModbus->Flag_T35TimeOut)
 8001914:	4b15      	ldr	r3, [pc, #84]	@ (800196c <Modbus_Protocal_Worker+0x208>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	7d5b      	ldrb	r3, [r3, #21]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d01f      	beq.n	800195e <Modbus_Protocal_Worker+0x1fa>
			hModbus->Mstatus = Modbus_state_Idle;
 800191e:	4b13      	ldr	r3, [pc, #76]	@ (800196c <Modbus_Protocal_Worker+0x208>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2201      	movs	r2, #1
 8001924:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8001926:	4b11      	ldr	r3, [pc, #68]	@ (800196c <Modbus_Protocal_Worker+0x208>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	4618      	mov	r0, r3
 800192e:	f008 fdc3 	bl	800a4b8 <HAL_UART_AbortReceive>
		break;
 8001932:	e014      	b.n	800195e <Modbus_Protocal_Worker+0x1fa>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001934:	4b0d      	ldr	r3, [pc, #52]	@ (800196c <Modbus_Protocal_Worker+0x208>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800193e:	2b20      	cmp	r3, #32
 8001940:	d10f      	bne.n	8001962 <Modbus_Protocal_Worker+0x1fe>
			hModbus->TxCount=0;
 8001942:	4b0a      	ldr	r3, [pc, #40]	@ (800196c <Modbus_Protocal_Worker+0x208>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2200      	movs	r2, #0
 8001948:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 800194c:	4b07      	ldr	r3, [pc, #28]	@ (800196c <Modbus_Protocal_Worker+0x208>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2201      	movs	r2, #1
 8001952:	761a      	strb	r2, [r3, #24]
		break;
 8001954:	e005      	b.n	8001962 <Modbus_Protocal_Worker+0x1fe>
		break;
 8001956:	bf00      	nop
 8001958:	e004      	b.n	8001964 <Modbus_Protocal_Worker+0x200>
		break;
 800195a:	bf00      	nop
 800195c:	e002      	b.n	8001964 <Modbus_Protocal_Worker+0x200>
		break;
 800195e:	bf00      	nop
 8001960:	e000      	b.n	8001964 <Modbus_Protocal_Worker+0x200>
		break;
 8001962:	bf00      	nop
}
 8001964:	bf00      	nop
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	2000027c 	.word	0x2000027c

08001970 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8001976:	4b1d      	ldr	r3, [pc, #116]	@ (80019ec <modbusWrite1Register+0x7c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	7e9b      	ldrb	r3, [r3, #26]
 800197c:	021b      	lsls	r3, r3, #8
 800197e:	b29b      	uxth	r3, r3
 8001980:	4a1a      	ldr	r2, [pc, #104]	@ (80019ec <modbusWrite1Register+0x7c>)
 8001982:	6812      	ldr	r2, [r2, #0]
 8001984:	7ed2      	ldrb	r2, [r2, #27]
 8001986:	4413      	add	r3, r2
 8001988:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 800198a:	88fa      	ldrh	r2, [r7, #6]
 800198c:	4b17      	ldr	r3, [pc, #92]	@ (80019ec <modbusWrite1Register+0x7c>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	429a      	cmp	r2, r3
 8001994:	d903      	bls.n	800199e <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001996:	2002      	movs	r0, #2
 8001998:	f000 f8a0 	bl	8001adc <ModbusErrorReply>
			 return;
 800199c:	e023      	b.n	80019e6 <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 800199e:	4b13      	ldr	r3, [pc, #76]	@ (80019ec <modbusWrite1Register+0x7c>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	4b12      	ldr	r3, [pc, #72]	@ (80019ec <modbusWrite1Register+0x7c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	6859      	ldr	r1, [r3, #4]
 80019a8:	88fb      	ldrh	r3, [r7, #6]
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	440b      	add	r3, r1
 80019ae:	7f12      	ldrb	r2, [r2, #28]
 80019b0:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80019b2:	4b0e      	ldr	r3, [pc, #56]	@ (80019ec <modbusWrite1Register+0x7c>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	4b0d      	ldr	r3, [pc, #52]	@ (80019ec <modbusWrite1Register+0x7c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	6859      	ldr	r1, [r3, #4]
 80019bc:	88fb      	ldrh	r3, [r7, #6]
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	440b      	add	r3, r1
 80019c2:	7f52      	ldrb	r2, [r2, #29]
 80019c4:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 80019c6:	4b09      	ldr	r3, [pc, #36]	@ (80019ec <modbusWrite1Register+0x7c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f203 1045 	addw	r0, r3, #325	@ 0x145
			hModbus->Rxframe,
 80019ce:	4b07      	ldr	r3, [pc, #28]	@ (80019ec <modbusWrite1Register+0x7c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 80019d4:	2208      	movs	r2, #8
 80019d6:	4619      	mov	r1, r3
 80019d8:	f00b fd06 	bl	800d3e8 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 80019dc:	4b03      	ldr	r3, [pc, #12]	@ (80019ec <modbusWrite1Register+0x7c>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2205      	movs	r2, #5
 80019e2:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271



}
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	2000027c 	.word	0x2000027c

080019f0 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 80019f0:	b590      	push	{r4, r7, lr}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 80019f6:	4b38      	ldr	r3, [pc, #224]	@ (8001ad8 <modbusRead1Register+0xe8>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	7f1b      	ldrb	r3, [r3, #28]
 80019fc:	021b      	lsls	r3, r3, #8
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	4a35      	ldr	r2, [pc, #212]	@ (8001ad8 <modbusRead1Register+0xe8>)
 8001a02:	6812      	ldr	r2, [r2, #0]
 8001a04:	7f52      	ldrb	r2, [r2, #29]
 8001a06:	4413      	add	r3, r2
 8001a08:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001a0a:	4b33      	ldr	r3, [pc, #204]	@ (8001ad8 <modbusRead1Register+0xe8>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	7e9b      	ldrb	r3, [r3, #26]
 8001a10:	021b      	lsls	r3, r3, #8
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	4a30      	ldr	r2, [pc, #192]	@ (8001ad8 <modbusRead1Register+0xe8>)
 8001a16:	6812      	ldr	r2, [r2, #0]
 8001a18:	7ed2      	ldrb	r2, [r2, #27]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8001a1e:	88fb      	ldrh	r3, [r7, #6]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d002      	beq.n	8001a2a <modbusRead1Register+0x3a>
 8001a24:	88fb      	ldrh	r3, [r7, #6]
 8001a26:	2b7d      	cmp	r3, #125	@ 0x7d
 8001a28:	d903      	bls.n	8001a32 <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8001a2a:	2003      	movs	r0, #3
 8001a2c:	f000 f856 	bl	8001adc <ModbusErrorReply>
		 return;
 8001a30:	e04e      	b.n	8001ad0 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8001a32:	88ba      	ldrh	r2, [r7, #4]
 8001a34:	4b28      	ldr	r3, [pc, #160]	@ (8001ad8 <modbusRead1Register+0xe8>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d808      	bhi.n	8001a50 <modbusRead1Register+0x60>
 8001a3e:	88ba      	ldrh	r2, [r7, #4]
 8001a40:	88fb      	ldrh	r3, [r7, #6]
 8001a42:	4413      	add	r3, r2
 8001a44:	461a      	mov	r2, r3
 8001a46:	4b24      	ldr	r3, [pc, #144]	@ (8001ad8 <modbusRead1Register+0xe8>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d903      	bls.n	8001a58 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001a50:	2002      	movs	r0, #2
 8001a52:	f000 f843 	bl	8001adc <ModbusErrorReply>
		 return;
 8001a56:	e03b      	b.n	8001ad0 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001a58:	4b1f      	ldr	r3, [pc, #124]	@ (8001ad8 <modbusRead1Register+0xe8>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2203      	movs	r2, #3
 8001a5e:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8001a62:	88fb      	ldrh	r3, [r7, #6]
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	4b1c      	ldr	r3, [pc, #112]	@ (8001ad8 <modbusRead1Register+0xe8>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	0052      	lsls	r2, r2, #1
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8001a72:	2400      	movs	r4, #0
 8001a74:	e020      	b.n	8001ab8 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8001a76:	4b18      	ldr	r3, [pc, #96]	@ (8001ad8 <modbusRead1Register+0xe8>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	685a      	ldr	r2, [r3, #4]
 8001a7c:	88bb      	ldrh	r3, [r7, #4]
 8001a7e:	4423      	add	r3, r4
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	18d1      	adds	r1, r2, r3
 8001a84:	4b14      	ldr	r3, [pc, #80]	@ (8001ad8 <modbusRead1Register+0xe8>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	1c63      	adds	r3, r4, #1
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	7849      	ldrb	r1, [r1, #1]
 8001a8e:	4413      	add	r3, r2
 8001a90:	460a      	mov	r2, r1
 8001a92:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8001a96:	4b10      	ldr	r3, [pc, #64]	@ (8001ad8 <modbusRead1Register+0xe8>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	685a      	ldr	r2, [r3, #4]
 8001a9c:	88bb      	ldrh	r3, [r7, #4]
 8001a9e:	4423      	add	r3, r4
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	18d1      	adds	r1, r2, r3
 8001aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad8 <modbusRead1Register+0xe8>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	0063      	lsls	r3, r4, #1
 8001aaa:	3303      	adds	r3, #3
 8001aac:	7809      	ldrb	r1, [r1, #0]
 8001aae:	4413      	add	r3, r2
 8001ab0:	460a      	mov	r2, r1
 8001ab2:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	for(i=0; i<numberOfDataToRead;i++)
 8001ab6:	3401      	adds	r4, #1
 8001ab8:	88fb      	ldrh	r3, [r7, #6]
 8001aba:	429c      	cmp	r4, r3
 8001abc:	dbdb      	blt.n	8001a76 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8001abe:	88fb      	ldrh	r3, [r7, #6]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	b2da      	uxtb	r2, r3
 8001ac4:	4b04      	ldr	r3, [pc, #16]	@ (8001ad8 <modbusRead1Register+0xe8>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	0052      	lsls	r2, r2, #1
 8001aca:	b2d2      	uxtb	r2, r2
 8001acc:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271

}
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd90      	pop	{r4, r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	2000027c 	.word	0x2000027c

08001adc <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8001ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8001b1c <ModbusErrorReply+0x40>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	7e5a      	ldrb	r2, [r3, #25]
 8001aec:	4b0b      	ldr	r3, [pc, #44]	@ (8001b1c <ModbusErrorReply+0x40>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001af4:	b2d2      	uxtb	r2, r2
 8001af6:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->Txframe[1] = Errorcode;
 8001afa:	4b08      	ldr	r3, [pc, #32]	@ (8001b1c <ModbusErrorReply+0x40>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	79fa      	ldrb	r2, [r7, #7]
 8001b00:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
	hModbus->TxCount = 2;
 8001b04:	4b05      	ldr	r3, [pc, #20]	@ (8001b1c <ModbusErrorReply+0x40>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2202      	movs	r2, #2
 8001b0a:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	2000027c 	.word	0x2000027c

08001b20 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001b24:	4b09      	ldr	r3, [pc, #36]	@ (8001b4c <Modbus_frame_response+0x2c>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	7e5b      	ldrb	r3, [r3, #25]
 8001b2a:	2b03      	cmp	r3, #3
 8001b2c:	d004      	beq.n	8001b38 <Modbus_frame_response+0x18>
 8001b2e:	2b06      	cmp	r3, #6
 8001b30:	d105      	bne.n	8001b3e <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8001b32:	f7ff ff1d 	bl	8001970 <modbusWrite1Register>
		break;
 8001b36:	e006      	b.n	8001b46 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001b38:	f7ff ff5a 	bl	80019f0 <modbusRead1Register>
		break;
 8001b3c:	e003      	b.n	8001b46 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8001b3e:	2001      	movs	r0, #1
 8001b40:	f7ff ffcc 	bl	8001adc <ModbusErrorReply>
		break;
 8001b44:	bf00      	nop

	}
}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	2000027c 	.word	0x2000027c

08001b50 <Modbus_Emission>:

void Modbus_Emission()
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001b56:	4b3c      	ldr	r3, [pc, #240]	@ (8001c48 <Modbus_Emission+0xf8>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b60:	2b20      	cmp	r3, #32
 8001b62:	d15d      	bne.n	8001c20 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001b64:	4b38      	ldr	r3, [pc, #224]	@ (8001c48 <Modbus_Emission+0xf8>)
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	4b37      	ldr	r3, [pc, #220]	@ (8001c48 <Modbus_Emission+0xf8>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	7812      	ldrb	r2, [r2, #0]
 8001b6e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8001b72:	4b35      	ldr	r3, [pc, #212]	@ (8001c48 <Modbus_Emission+0xf8>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 8001b7a:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8001b7c:	4b32      	ldr	r3, [pc, #200]	@ (8001c48 <Modbus_Emission+0xf8>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f203 1145 	addw	r1, r3, #325	@ 0x145
				hModbus->TxCount
 8001b84:	4b30      	ldr	r3, [pc, #192]	@ (8001c48 <Modbus_Emission+0xf8>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
		memcpy
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	f00b fc2b 	bl	800d3e8 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8001b92:	4b2d      	ldr	r3, [pc, #180]	@ (8001c48 <Modbus_Emission+0xf8>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	4b2a      	ldr	r3, [pc, #168]	@ (8001c48 <Modbus_Emission+0xf8>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	3203      	adds	r2, #3
 8001ba2:	b292      	uxth	r2, r2
 8001ba4:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001ba8:	4b27      	ldr	r3, [pc, #156]	@ (8001c48 <Modbus_Emission+0xf8>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8001bb0:	4b25      	ldr	r3, [pc, #148]	@ (8001c48 <Modbus_Emission+0xf8>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001bb8:	3b02      	subs	r3, #2
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4610      	mov	r0, r2
 8001bbe:	f7ff fd99 	bl	80016f4 <CRC16>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8001bc6:	4b20      	ldr	r3, [pc, #128]	@ (8001c48 <Modbus_Emission+0xf8>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	4b1f      	ldr	r3, [pc, #124]	@ (8001c48 <Modbus_Emission+0xf8>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001bd2:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8001bd4:	7939      	ldrb	r1, [r7, #4]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	460a      	mov	r2, r1
 8001bda:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8001bde:	4b1a      	ldr	r3, [pc, #104]	@ (8001c48 <Modbus_Emission+0xf8>)
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	4b19      	ldr	r3, [pc, #100]	@ (8001c48 <Modbus_Emission+0xf8>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001bea:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8001bec:	7979      	ldrb	r1, [r7, #5]
 8001bee:	4413      	add	r3, r2
 8001bf0:	460a      	mov	r2, r1
 8001bf2:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001bf6:	4b14      	ldr	r3, [pc, #80]	@ (8001c48 <Modbus_Emission+0xf8>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c00:	2b20      	cmp	r3, #32
 8001c02:	d10d      	bne.n	8001c20 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001c04:	4b10      	ldr	r3, [pc, #64]	@ (8001c48 <Modbus_Emission+0xf8>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8001c0a:	4b0f      	ldr	r3, [pc, #60]	@ (8001c48 <Modbus_Emission+0xf8>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8001c12:	4b0d      	ldr	r3, [pc, #52]	@ (8001c48 <Modbus_Emission+0xf8>)
 8001c14:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8001c16:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	f008 fbcc 	bl	800a3b8 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001c20:	4b09      	ldr	r3, [pc, #36]	@ (8001c48 <Modbus_Emission+0xf8>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2200      	movs	r2, #0
 8001c26:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001c28:	4b07      	ldr	r3, [pc, #28]	@ (8001c48 <Modbus_Emission+0xf8>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 8001c30:	4b05      	ldr	r3, [pc, #20]	@ (8001c48 <Modbus_Emission+0xf8>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2200      	movs	r2, #0
 8001c36:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 8001c38:	4b03      	ldr	r3, [pc, #12]	@ (8001c48 <Modbus_Emission+0xf8>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2202      	movs	r2, #2
 8001c3e:	761a      	strb	r2, [r3, #24]
}
 8001c40:	bf00      	nop
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	2000027c 	.word	0x2000027c

08001c4c <create_prismatic_motor>:

float v_pris_dis[2] = {0, 0};
float v_pris_ref[3] = {0, 0, 0};

PrismaticMotor create_prismatic_motor(double J, double B, double Eff, double Ke,
		double Kt, double R, double L) {
 8001c4c:	b4b0      	push	{r4, r5, r7}
 8001c4e:	b09f      	sub	sp, #124	@ 0x7c
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001c54:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
 8001c58:	ed87 1b0a 	vstr	d1, [r7, #40]	@ 0x28
 8001c5c:	ed87 2b08 	vstr	d2, [r7, #32]
 8001c60:	ed87 3b06 	vstr	d3, [r7, #24]
 8001c64:	ed87 4b04 	vstr	d4, [r7, #16]
 8001c68:	ed87 5b02 	vstr	d5, [r7, #8]
 8001c6c:	ed87 6b00 	vstr	d6, [r7]
	PrismaticMotor motor = { J, B, Eff, Ke, Kt, R, L };
 8001c70:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001c74:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8001c78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001c7c:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 8001c80:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c84:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 8001c88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c8c:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8001c90:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001c94:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 8001c98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c9c:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
 8001ca0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ca4:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
	return motor;
 8001ca8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001caa:	461d      	mov	r5, r3
 8001cac:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8001cb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cbc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cc0:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001cc4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001cc6:	377c      	adds	r7, #124	@ 0x7c
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bcb0      	pop	{r4, r5, r7}
 8001ccc:	4770      	bx	lr

08001cce <create_motor>:
#include "revolute.h"

float v_rev_dis[2] = {0, 0};
float v_rev_ref[3] = {0, 0, 0};

RevoluteMotor create_motor(double J, double B, double Eff, double Ke, double Kt, double R, double L) {
 8001cce:	b4b0      	push	{r4, r5, r7}
 8001cd0:	b09f      	sub	sp, #124	@ 0x7c
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001cd6:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
 8001cda:	ed87 1b0a 	vstr	d1, [r7, #40]	@ 0x28
 8001cde:	ed87 2b08 	vstr	d2, [r7, #32]
 8001ce2:	ed87 3b06 	vstr	d3, [r7, #24]
 8001ce6:	ed87 4b04 	vstr	d4, [r7, #16]
 8001cea:	ed87 5b02 	vstr	d5, [r7, #8]
 8001cee:	ed87 6b00 	vstr	d6, [r7]
    RevoluteMotor motor = { J, B, Eff, Ke, Kt, R, L };
 8001cf2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001cf6:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8001cfa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001cfe:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 8001d02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d06:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 8001d0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d0e:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8001d12:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d16:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 8001d1a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d1e:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
 8001d22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d26:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
    return motor;
 8001d2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d2c:	461d      	mov	r5, r3
 8001d2e:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8001d32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d3e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d42:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001d46:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001d48:	377c      	adds	r7, #124	@ 0x7c
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bcb0      	pop	{r4, r5, r7}
 8001d4e:	4770      	bx	lr

08001d50 <InitTrajectorySegment>:
#include "Trajectory.h"
#include <math.h>

void InitTrajectorySegment(TrajectorySegment *seg, float start, float end, float v_max, float a_max, float t_start) {
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b08c      	sub	sp, #48	@ 0x30
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6178      	str	r0, [r7, #20]
 8001d58:	ed87 0a04 	vstr	s0, [r7, #16]
 8001d5c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001d60:	ed87 1a02 	vstr	s2, [r7, #8]
 8001d64:	edc7 1a01 	vstr	s3, [r7, #4]
 8001d68:	ed87 2a00 	vstr	s4, [r7]
    float D = end - start;
 8001d6c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d70:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d78:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float dir = (D >= 0) ? 1.0f : -1.0f;
 8001d7c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001d80:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d88:	db02      	blt.n	8001d90 <InitTrajectorySegment+0x40>
 8001d8a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001d8e:	e000      	b.n	8001d92 <InitTrajectorySegment+0x42>
 8001d90:	4b49      	ldr	r3, [pc, #292]	@ (8001eb8 <InitTrajectorySegment+0x168>)
 8001d92:	627b      	str	r3, [r7, #36]	@ 0x24
    D = fabsf(D);
 8001d94:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001d98:	eef0 7ae7 	vabs.f32	s15, s15
 8001d9c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

    float t_accel = v_max / a_max;
 8001da0:	edd7 6a02 	vldr	s13, [r7, #8]
 8001da4:	ed97 7a01 	vldr	s14, [r7, #4]
 8001da8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dac:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float d_accel = 0.5f * a_max * t_accel * t_accel;
 8001db0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001db4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001db8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001dbc:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001dc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dc4:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001dc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dcc:	edc7 7a08 	vstr	s15, [r7, #32]

    if (2 * d_accel > D) {
 8001dd0:	edd7 7a08 	vldr	s15, [r7, #32]
 8001dd4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001dd8:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001ddc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de4:	d524      	bpl.n	8001e30 <InitTrajectorySegment+0xe0>
        // Triangular profile
        t_accel = sqrtf(D / a_max);
 8001de6:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001dea:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dee:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001df2:	eeb0 0a66 	vmov.f32	s0, s13
 8001df6:	f00b fb05 	bl	800d404 <sqrtf>
 8001dfa:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
        seg->t_const = 0;
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	f04f 0200 	mov.w	r2, #0
 8001e04:	615a      	str	r2, [r3, #20]
        seg->t_total = 2 * t_accel;
 8001e06:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001e0a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	edc3 7a07 	vstr	s15, [r3, #28]
        seg->v_max = a_max * t_accel * dir;
 8001e14:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e18:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001e1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e20:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001e24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	edc3 7a02 	vstr	s15, [r3, #8]
 8001e2e:	e027      	b.n	8001e80 <InitTrajectorySegment+0x130>
    } else {
        // Trapezoidal profile
        float d_const = D - 2 * d_accel;
 8001e30:	edd7 7a08 	vldr	s15, [r7, #32]
 8001e34:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e38:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001e3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e40:	edc7 7a07 	vstr	s15, [r7, #28]
        seg->t_const = d_const / v_max;
 8001e44:	edd7 6a07 	vldr	s13, [r7, #28]
 8001e48:	ed97 7a02 	vldr	s14, [r7, #8]
 8001e4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	edc3 7a05 	vstr	s15, [r3, #20]
        seg->t_total = 2 * t_accel + seg->t_const;
 8001e56:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001e5a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	edd3 7a05 	vldr	s15, [r3, #20]
 8001e64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	edc3 7a07 	vstr	s15, [r3, #28]
        seg->v_max = v_max * dir;
 8001e6e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001e72:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    seg->start_pos = start;
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	601a      	str	r2, [r3, #0]
    seg->end_pos = end;
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	605a      	str	r2, [r3, #4]
//    seg->v_max = v_max * dir;
    seg->a_max = a_max * dir;
 8001e8c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e90:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001e94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	edc3 7a03 	vstr	s15, [r3, #12]
    seg->t_accel = t_accel;
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ea2:	611a      	str	r2, [r3, #16]
    seg->t_decel = t_accel;
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ea8:	619a      	str	r2, [r3, #24]
    seg->t_start = t_start;
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	683a      	ldr	r2, [r7, #0]
 8001eae:	621a      	str	r2, [r3, #32]
}
 8001eb0:	bf00      	nop
 8001eb2:	3730      	adds	r7, #48	@ 0x30
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	bf800000 	.word	0xbf800000

08001ebc <GetTrajectoryPosition>:

float GetTrajectoryPosition(const TrajectorySegment *seg, float t_global) {
 8001ebc:	b480      	push	{r7}
 8001ebe:	b08f      	sub	sp, #60	@ 0x3c
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	ed87 0a00 	vstr	s0, [r7]
    float t = t_global - seg->t_start;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	edd3 7a08 	vldr	s15, [r3, #32]
 8001ece:	ed97 7a00 	vldr	s14, [r7]
 8001ed2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ed6:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    if (t < 0) return seg->start_pos;
 8001eda:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001ede:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee6:	d503      	bpl.n	8001ef0 <GetTrajectoryPosition+0x34>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	edd3 7a00 	vldr	s15, [r3]
 8001eee:	e0b4      	b.n	800205a <GetTrajectoryPosition+0x19e>
    if (t >= seg->t_total) return seg->end_pos;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	edd3 7a07 	vldr	s15, [r3, #28]
 8001ef6:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001efa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f02:	db03      	blt.n	8001f0c <GetTrajectoryPosition+0x50>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f0a:	e0a6      	b.n	800205a <GetTrajectoryPosition+0x19e>

    float a = seg->a_max;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	633b      	str	r3, [r7, #48]	@ 0x30
    float v = seg->v_max;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float p0 = seg->start_pos;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (t < seg->t_accel) {
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	edd3 7a04 	vldr	s15, [r3, #16]
 8001f24:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001f28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f30:	d512      	bpl.n	8001f58 <GetTrajectoryPosition+0x9c>
        return p0 + 0.5f * a * t * t;
 8001f32:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001f36:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001f3a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f3e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001f42:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f46:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001f4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f4e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001f52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f56:	e080      	b.n	800205a <GetTrajectoryPosition+0x19e>
    } else if (t < seg->t_accel + seg->t_const) {
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	ed93 7a04 	vldr	s14, [r3, #16]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	edd3 7a05 	vldr	s15, [r3, #20]
 8001f64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f68:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001f6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f74:	d525      	bpl.n	8001fc2 <GetTrajectoryPosition+0x106>
        float t1 = seg->t_accel;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	613b      	str	r3, [r7, #16]
        float p1 = p0 + 0.5f * a * t1 * t1;
 8001f7c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001f80:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001f84:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f88:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f90:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f98:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001f9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fa0:	edc7 7a03 	vstr	s15, [r7, #12]
        return p1 + v * (t - t1);
 8001fa4:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001fa8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001fac:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fb0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001fb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fb8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fc0:	e04b      	b.n	800205a <GetTrajectoryPosition+0x19e>
    } else {
        float t1 = seg->t_accel;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	627b      	str	r3, [r7, #36]	@ 0x24
        float t2 = seg->t_const;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	695b      	ldr	r3, [r3, #20]
 8001fcc:	623b      	str	r3, [r7, #32]
        float p1 = p0 + 0.5f * a * t1 * t1;
 8001fce:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001fd2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001fd6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001fda:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001fde:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fe2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fea:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001fee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ff2:	edc7 7a07 	vstr	s15, [r7, #28]
        float p2 = p1 + v * t2;
 8001ff6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001ffa:	edd7 7a08 	vldr	s15, [r7, #32]
 8001ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002002:	ed97 7a07 	vldr	s14, [r7, #28]
 8002006:	ee77 7a27 	vadd.f32	s15, s14, s15
 800200a:	edc7 7a06 	vstr	s15, [r7, #24]
        float td = t - t1 - t2;
 800200e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8002012:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002016:	ee37 7a67 	vsub.f32	s14, s14, s15
 800201a:	edd7 7a08 	vldr	s15, [r7, #32]
 800201e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002022:	edc7 7a05 	vstr	s15, [r7, #20]
        return p2 + v * td - 0.5f * a * td * td;
 8002026:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800202a:	edd7 7a05 	vldr	s15, [r7, #20]
 800202e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002032:	edd7 7a06 	vldr	s15, [r7, #24]
 8002036:	ee37 7a27 	vadd.f32	s14, s14, s15
 800203a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800203e:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8002042:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002046:	edd7 7a05 	vldr	s15, [r7, #20]
 800204a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800204e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002052:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002056:	ee77 7a67 	vsub.f32	s15, s14, s15
    }
}
 800205a:	eeb0 0a67 	vmov.f32	s0, s15
 800205e:	373c      	adds	r7, #60	@ 0x3c
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <GetTrajectoryVelocity>:

float GetTrajectoryVelocity(const TrajectorySegment *seg, float t_global) {
 8002068:	b480      	push	{r7}
 800206a:	b087      	sub	sp, #28
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	ed87 0a00 	vstr	s0, [r7]
    float t = t_global - seg->t_start;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	edd3 7a08 	vldr	s15, [r3, #32]
 800207a:	ed97 7a00 	vldr	s14, [r7]
 800207e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002082:	edc7 7a05 	vstr	s15, [r7, #20]
    if (t < 0) return 0;
 8002086:	edd7 7a05 	vldr	s15, [r7, #20]
 800208a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800208e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002092:	d502      	bpl.n	800209a <GetTrajectoryVelocity+0x32>
 8002094:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 8002144 <GetTrajectoryVelocity+0xdc>
 8002098:	e04d      	b.n	8002136 <GetTrajectoryVelocity+0xce>
    if (t >= seg->t_total) return 0;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	edd3 7a07 	vldr	s15, [r3, #28]
 80020a0:	ed97 7a05 	vldr	s14, [r7, #20]
 80020a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ac:	db02      	blt.n	80020b4 <GetTrajectoryVelocity+0x4c>
 80020ae:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8002144 <GetTrajectoryVelocity+0xdc>
 80020b2:	e040      	b.n	8002136 <GetTrajectoryVelocity+0xce>

    float a = seg->a_max;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	613b      	str	r3, [r7, #16]
    float v = seg->v_max;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	60fb      	str	r3, [r7, #12]

    if (t < seg->t_accel) {
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	edd3 7a04 	vldr	s15, [r3, #16]
 80020c6:	ed97 7a05 	vldr	s14, [r7, #20]
 80020ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020d2:	d506      	bpl.n	80020e2 <GetTrajectoryVelocity+0x7a>
        return a * t;
 80020d4:	ed97 7a04 	vldr	s14, [r7, #16]
 80020d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80020dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020e0:	e029      	b.n	8002136 <GetTrajectoryVelocity+0xce>
    } else if (t < seg->t_accel + seg->t_const) {
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	ed93 7a04 	vldr	s14, [r3, #16]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	edd3 7a05 	vldr	s15, [r3, #20]
 80020ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020f2:	ed97 7a05 	vldr	s14, [r7, #20]
 80020f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020fe:	d502      	bpl.n	8002106 <GetTrajectoryVelocity+0x9e>
        return v;
 8002100:	edd7 7a03 	vldr	s15, [r7, #12]
 8002104:	e017      	b.n	8002136 <GetTrajectoryVelocity+0xce>
    } else {
        float td = t - seg->t_accel - seg->t_const;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	edd3 7a04 	vldr	s15, [r3, #16]
 800210c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002110:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	edd3 7a05 	vldr	s15, [r3, #20]
 800211a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800211e:	edc7 7a02 	vstr	s15, [r7, #8]
        return v - a * td;
 8002122:	ed97 7a04 	vldr	s14, [r7, #16]
 8002126:	edd7 7a02 	vldr	s15, [r7, #8]
 800212a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800212e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002132:	ee77 7a67 	vsub.f32	s15, s14, s15
    }
}
 8002136:	eeb0 0a67 	vmov.f32	s0, s15
 800213a:	371c      	adds	r7, #28
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	00000000 	.word	0x00000000

08002148 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b08c      	sub	sp, #48	@ 0x30
 800214c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800214e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	605a      	str	r2, [r3, #4]
 8002158:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800215a:	1d3b      	adds	r3, r7, #4
 800215c:	2220      	movs	r2, #32
 800215e:	2100      	movs	r1, #0
 8002160:	4618      	mov	r0, r3
 8002162:	f00b f90f 	bl	800d384 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002166:	4b32      	ldr	r3, [pc, #200]	@ (8002230 <MX_ADC1_Init+0xe8>)
 8002168:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800216c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800216e:	4b30      	ldr	r3, [pc, #192]	@ (8002230 <MX_ADC1_Init+0xe8>)
 8002170:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002174:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002176:	4b2e      	ldr	r3, [pc, #184]	@ (8002230 <MX_ADC1_Init+0xe8>)
 8002178:	2200      	movs	r2, #0
 800217a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800217c:	4b2c      	ldr	r3, [pc, #176]	@ (8002230 <MX_ADC1_Init+0xe8>)
 800217e:	2200      	movs	r2, #0
 8002180:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8002182:	4b2b      	ldr	r3, [pc, #172]	@ (8002230 <MX_ADC1_Init+0xe8>)
 8002184:	2200      	movs	r2, #0
 8002186:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002188:	4b29      	ldr	r3, [pc, #164]	@ (8002230 <MX_ADC1_Init+0xe8>)
 800218a:	2200      	movs	r2, #0
 800218c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800218e:	4b28      	ldr	r3, [pc, #160]	@ (8002230 <MX_ADC1_Init+0xe8>)
 8002190:	2204      	movs	r2, #4
 8002192:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002194:	4b26      	ldr	r3, [pc, #152]	@ (8002230 <MX_ADC1_Init+0xe8>)
 8002196:	2200      	movs	r2, #0
 8002198:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800219a:	4b25      	ldr	r3, [pc, #148]	@ (8002230 <MX_ADC1_Init+0xe8>)
 800219c:	2200      	movs	r2, #0
 800219e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80021a0:	4b23      	ldr	r3, [pc, #140]	@ (8002230 <MX_ADC1_Init+0xe8>)
 80021a2:	2201      	movs	r2, #1
 80021a4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80021a6:	4b22      	ldr	r3, [pc, #136]	@ (8002230 <MX_ADC1_Init+0xe8>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80021ae:	4b20      	ldr	r3, [pc, #128]	@ (8002230 <MX_ADC1_Init+0xe8>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80021b4:	4b1e      	ldr	r3, [pc, #120]	@ (8002230 <MX_ADC1_Init+0xe8>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80021ba:	4b1d      	ldr	r3, [pc, #116]	@ (8002230 <MX_ADC1_Init+0xe8>)
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80021c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002230 <MX_ADC1_Init+0xe8>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80021c8:	4b19      	ldr	r3, [pc, #100]	@ (8002230 <MX_ADC1_Init+0xe8>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80021d0:	4817      	ldr	r0, [pc, #92]	@ (8002230 <MX_ADC1_Init+0xe8>)
 80021d2:	f002 fe23 	bl	8004e1c <HAL_ADC_Init>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80021dc:	f001 fc88 	bl	8003af0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80021e0:	2300      	movs	r3, #0
 80021e2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80021e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021e8:	4619      	mov	r1, r3
 80021ea:	4811      	ldr	r0, [pc, #68]	@ (8002230 <MX_ADC1_Init+0xe8>)
 80021ec:	f003 fdc0 	bl	8005d70 <HAL_ADCEx_MultiModeConfigChannel>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80021f6:	f001 fc7b 	bl	8003af0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80021fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002234 <MX_ADC1_Init+0xec>)
 80021fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80021fe:	2306      	movs	r3, #6
 8002200:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002202:	2300      	movs	r3, #0
 8002204:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002206:	237f      	movs	r3, #127	@ 0x7f
 8002208:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800220a:	2304      	movs	r3, #4
 800220c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800220e:	2300      	movs	r3, #0
 8002210:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002212:	1d3b      	adds	r3, r7, #4
 8002214:	4619      	mov	r1, r3
 8002216:	4806      	ldr	r0, [pc, #24]	@ (8002230 <MX_ADC1_Init+0xe8>)
 8002218:	f003 f8ae 	bl	8005378 <HAL_ADC_ConfigChannel>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8002222:	f001 fc65 	bl	8003af0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002226:	bf00      	nop
 8002228:	3730      	adds	r7, #48	@ 0x30
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	20000280 	.word	0x20000280
 8002234:	04300002 	.word	0x04300002

08002238 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b088      	sub	sp, #32
 800223c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800223e:	463b      	mov	r3, r7
 8002240:	2220      	movs	r2, #32
 8002242:	2100      	movs	r1, #0
 8002244:	4618      	mov	r0, r3
 8002246:	f00b f89d 	bl	800d384 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800224a:	4b2b      	ldr	r3, [pc, #172]	@ (80022f8 <MX_ADC2_Init+0xc0>)
 800224c:	4a2b      	ldr	r2, [pc, #172]	@ (80022fc <MX_ADC2_Init+0xc4>)
 800224e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002250:	4b29      	ldr	r3, [pc, #164]	@ (80022f8 <MX_ADC2_Init+0xc0>)
 8002252:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002256:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002258:	4b27      	ldr	r3, [pc, #156]	@ (80022f8 <MX_ADC2_Init+0xc0>)
 800225a:	2200      	movs	r2, #0
 800225c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800225e:	4b26      	ldr	r3, [pc, #152]	@ (80022f8 <MX_ADC2_Init+0xc0>)
 8002260:	2200      	movs	r2, #0
 8002262:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8002264:	4b24      	ldr	r3, [pc, #144]	@ (80022f8 <MX_ADC2_Init+0xc0>)
 8002266:	2200      	movs	r2, #0
 8002268:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800226a:	4b23      	ldr	r3, [pc, #140]	@ (80022f8 <MX_ADC2_Init+0xc0>)
 800226c:	2200      	movs	r2, #0
 800226e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002270:	4b21      	ldr	r3, [pc, #132]	@ (80022f8 <MX_ADC2_Init+0xc0>)
 8002272:	2204      	movs	r2, #4
 8002274:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8002276:	4b20      	ldr	r3, [pc, #128]	@ (80022f8 <MX_ADC2_Init+0xc0>)
 8002278:	2200      	movs	r2, #0
 800227a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800227c:	4b1e      	ldr	r3, [pc, #120]	@ (80022f8 <MX_ADC2_Init+0xc0>)
 800227e:	2200      	movs	r2, #0
 8002280:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8002282:	4b1d      	ldr	r3, [pc, #116]	@ (80022f8 <MX_ADC2_Init+0xc0>)
 8002284:	2201      	movs	r2, #1
 8002286:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002288:	4b1b      	ldr	r3, [pc, #108]	@ (80022f8 <MX_ADC2_Init+0xc0>)
 800228a:	2200      	movs	r2, #0
 800228c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002290:	4b19      	ldr	r3, [pc, #100]	@ (80022f8 <MX_ADC2_Init+0xc0>)
 8002292:	2200      	movs	r2, #0
 8002294:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002296:	4b18      	ldr	r3, [pc, #96]	@ (80022f8 <MX_ADC2_Init+0xc0>)
 8002298:	2200      	movs	r2, #0
 800229a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800229c:	4b16      	ldr	r3, [pc, #88]	@ (80022f8 <MX_ADC2_Init+0xc0>)
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80022a4:	4b14      	ldr	r3, [pc, #80]	@ (80022f8 <MX_ADC2_Init+0xc0>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80022aa:	4b13      	ldr	r3, [pc, #76]	@ (80022f8 <MX_ADC2_Init+0xc0>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80022b2:	4811      	ldr	r0, [pc, #68]	@ (80022f8 <MX_ADC2_Init+0xc0>)
 80022b4:	f002 fdb2 	bl	8004e1c <HAL_ADC_Init>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80022be:	f001 fc17 	bl	8003af0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80022c2:	4b0f      	ldr	r3, [pc, #60]	@ (8002300 <MX_ADC2_Init+0xc8>)
 80022c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80022c6:	2306      	movs	r3, #6
 80022c8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80022ca:	2300      	movs	r3, #0
 80022cc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80022ce:	237f      	movs	r3, #127	@ 0x7f
 80022d0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80022d2:	2304      	movs	r3, #4
 80022d4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80022d6:	2300      	movs	r3, #0
 80022d8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80022da:	463b      	mov	r3, r7
 80022dc:	4619      	mov	r1, r3
 80022de:	4806      	ldr	r0, [pc, #24]	@ (80022f8 <MX_ADC2_Init+0xc0>)
 80022e0:	f003 f84a 	bl	8005378 <HAL_ADC_ConfigChannel>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80022ea:	f001 fc01 	bl	8003af0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80022ee:	bf00      	nop
 80022f0:	3720      	adds	r7, #32
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	200002ec 	.word	0x200002ec
 80022fc:	50000100 	.word	0x50000100
 8002300:	08600004 	.word	0x08600004

08002304 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b0a0      	sub	sp, #128	@ 0x80
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800230c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	605a      	str	r2, [r3, #4]
 8002316:	609a      	str	r2, [r3, #8]
 8002318:	60da      	str	r2, [r3, #12]
 800231a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800231c:	f107 0318 	add.w	r3, r7, #24
 8002320:	2254      	movs	r2, #84	@ 0x54
 8002322:	2100      	movs	r1, #0
 8002324:	4618      	mov	r0, r3
 8002326:	f00b f82d 	bl	800d384 <memset>
  if(adcHandle->Instance==ADC1)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002332:	d13e      	bne.n	80023b2 <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002334:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002338:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800233a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800233e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002340:	f107 0318 	add.w	r3, r7, #24
 8002344:	4618      	mov	r0, r3
 8002346:	f005 f9fd 	bl	8007744 <HAL_RCCEx_PeriphCLKConfig>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002350:	f001 fbce 	bl	8003af0 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002354:	4b3a      	ldr	r3, [pc, #232]	@ (8002440 <HAL_ADC_MspInit+0x13c>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	3301      	adds	r3, #1
 800235a:	4a39      	ldr	r2, [pc, #228]	@ (8002440 <HAL_ADC_MspInit+0x13c>)
 800235c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800235e:	4b38      	ldr	r3, [pc, #224]	@ (8002440 <HAL_ADC_MspInit+0x13c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d10b      	bne.n	800237e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002366:	4b37      	ldr	r3, [pc, #220]	@ (8002444 <HAL_ADC_MspInit+0x140>)
 8002368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800236a:	4a36      	ldr	r2, [pc, #216]	@ (8002444 <HAL_ADC_MspInit+0x140>)
 800236c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002370:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002372:	4b34      	ldr	r3, [pc, #208]	@ (8002444 <HAL_ADC_MspInit+0x140>)
 8002374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002376:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800237a:	617b      	str	r3, [r7, #20]
 800237c:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800237e:	4b31      	ldr	r3, [pc, #196]	@ (8002444 <HAL_ADC_MspInit+0x140>)
 8002380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002382:	4a30      	ldr	r2, [pc, #192]	@ (8002444 <HAL_ADC_MspInit+0x140>)
 8002384:	f043 0301 	orr.w	r3, r3, #1
 8002388:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800238a:	4b2e      	ldr	r3, [pc, #184]	@ (8002444 <HAL_ADC_MspInit+0x140>)
 800238c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	613b      	str	r3, [r7, #16]
 8002394:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = Current_Sensor_Pin|Current_SensorA1_Pin;
 8002396:	2303      	movs	r3, #3
 8002398:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800239a:	2303      	movs	r3, #3
 800239c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239e:	2300      	movs	r3, #0
 80023a0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80023a6:	4619      	mov	r1, r3
 80023a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023ac:	f004 fa36 	bl	800681c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80023b0:	e042      	b.n	8002438 <HAL_ADC_MspInit+0x134>
  else if(adcHandle->Instance==ADC2)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a24      	ldr	r2, [pc, #144]	@ (8002448 <HAL_ADC_MspInit+0x144>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d13d      	bne.n	8002438 <HAL_ADC_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80023bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80023c0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80023c2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80023c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023c8:	f107 0318 	add.w	r3, r7, #24
 80023cc:	4618      	mov	r0, r3
 80023ce:	f005 f9b9 	bl	8007744 <HAL_RCCEx_PeriphCLKConfig>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <HAL_ADC_MspInit+0xd8>
      Error_Handler();
 80023d8:	f001 fb8a 	bl	8003af0 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80023dc:	4b18      	ldr	r3, [pc, #96]	@ (8002440 <HAL_ADC_MspInit+0x13c>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	3301      	adds	r3, #1
 80023e2:	4a17      	ldr	r2, [pc, #92]	@ (8002440 <HAL_ADC_MspInit+0x13c>)
 80023e4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80023e6:	4b16      	ldr	r3, [pc, #88]	@ (8002440 <HAL_ADC_MspInit+0x13c>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d10b      	bne.n	8002406 <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80023ee:	4b15      	ldr	r3, [pc, #84]	@ (8002444 <HAL_ADC_MspInit+0x140>)
 80023f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023f2:	4a14      	ldr	r2, [pc, #80]	@ (8002444 <HAL_ADC_MspInit+0x140>)
 80023f4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80023f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023fa:	4b12      	ldr	r3, [pc, #72]	@ (8002444 <HAL_ADC_MspInit+0x140>)
 80023fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002406:	4b0f      	ldr	r3, [pc, #60]	@ (8002444 <HAL_ADC_MspInit+0x140>)
 8002408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800240a:	4a0e      	ldr	r2, [pc, #56]	@ (8002444 <HAL_ADC_MspInit+0x140>)
 800240c:	f043 0301 	orr.w	r3, r3, #1
 8002410:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002412:	4b0c      	ldr	r3, [pc, #48]	@ (8002444 <HAL_ADC_MspInit+0x140>)
 8002414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	60bb      	str	r3, [r7, #8]
 800241c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Current_SensorA1_Pin;
 800241e:	2302      	movs	r3, #2
 8002420:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002422:	2303      	movs	r3, #3
 8002424:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002426:	2300      	movs	r3, #0
 8002428:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(Current_SensorA1_GPIO_Port, &GPIO_InitStruct);
 800242a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800242e:	4619      	mov	r1, r3
 8002430:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002434:	f004 f9f2 	bl	800681c <HAL_GPIO_Init>
}
 8002438:	bf00      	nop
 800243a:	3780      	adds	r7, #128	@ 0x80
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	20000358 	.word	0x20000358
 8002444:	40021000 	.word	0x40021000
 8002448:	50000100 	.word	0x50000100

0800244c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002452:	4b12      	ldr	r3, [pc, #72]	@ (800249c <MX_DMA_Init+0x50>)
 8002454:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002456:	4a11      	ldr	r2, [pc, #68]	@ (800249c <MX_DMA_Init+0x50>)
 8002458:	f043 0304 	orr.w	r3, r3, #4
 800245c:	6493      	str	r3, [r2, #72]	@ 0x48
 800245e:	4b0f      	ldr	r3, [pc, #60]	@ (800249c <MX_DMA_Init+0x50>)
 8002460:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002462:	f003 0304 	and.w	r3, r3, #4
 8002466:	607b      	str	r3, [r7, #4]
 8002468:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800246a:	4b0c      	ldr	r3, [pc, #48]	@ (800249c <MX_DMA_Init+0x50>)
 800246c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800246e:	4a0b      	ldr	r2, [pc, #44]	@ (800249c <MX_DMA_Init+0x50>)
 8002470:	f043 0301 	orr.w	r3, r3, #1
 8002474:	6493      	str	r3, [r2, #72]	@ 0x48
 8002476:	4b09      	ldr	r3, [pc, #36]	@ (800249c <MX_DMA_Init+0x50>)
 8002478:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	603b      	str	r3, [r7, #0]
 8002480:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002482:	2200      	movs	r2, #0
 8002484:	2100      	movs	r1, #0
 8002486:	200b      	movs	r0, #11
 8002488:	f003 fe55 	bl	8006136 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800248c:	200b      	movs	r0, #11
 800248e:	f003 fe6c 	bl	800616a <HAL_NVIC_EnableIRQ>

}
 8002492:	bf00      	nop
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	40021000 	.word	0x40021000

080024a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b08a      	sub	sp, #40	@ 0x28
 80024a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a6:	f107 0314 	add.w	r3, r7, #20
 80024aa:	2200      	movs	r2, #0
 80024ac:	601a      	str	r2, [r3, #0]
 80024ae:	605a      	str	r2, [r3, #4]
 80024b0:	609a      	str	r2, [r3, #8]
 80024b2:	60da      	str	r2, [r3, #12]
 80024b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024b6:	4b4d      	ldr	r3, [pc, #308]	@ (80025ec <MX_GPIO_Init+0x14c>)
 80024b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ba:	4a4c      	ldr	r2, [pc, #304]	@ (80025ec <MX_GPIO_Init+0x14c>)
 80024bc:	f043 0304 	orr.w	r3, r3, #4
 80024c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024c2:	4b4a      	ldr	r3, [pc, #296]	@ (80025ec <MX_GPIO_Init+0x14c>)
 80024c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024c6:	f003 0304 	and.w	r3, r3, #4
 80024ca:	613b      	str	r3, [r7, #16]
 80024cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80024ce:	4b47      	ldr	r3, [pc, #284]	@ (80025ec <MX_GPIO_Init+0x14c>)
 80024d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024d2:	4a46      	ldr	r2, [pc, #280]	@ (80025ec <MX_GPIO_Init+0x14c>)
 80024d4:	f043 0320 	orr.w	r3, r3, #32
 80024d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024da:	4b44      	ldr	r3, [pc, #272]	@ (80025ec <MX_GPIO_Init+0x14c>)
 80024dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024de:	f003 0320 	and.w	r3, r3, #32
 80024e2:	60fb      	str	r3, [r7, #12]
 80024e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024e6:	4b41      	ldr	r3, [pc, #260]	@ (80025ec <MX_GPIO_Init+0x14c>)
 80024e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ea:	4a40      	ldr	r2, [pc, #256]	@ (80025ec <MX_GPIO_Init+0x14c>)
 80024ec:	f043 0301 	orr.w	r3, r3, #1
 80024f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024f2:	4b3e      	ldr	r3, [pc, #248]	@ (80025ec <MX_GPIO_Init+0x14c>)
 80024f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	60bb      	str	r3, [r7, #8]
 80024fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024fe:	4b3b      	ldr	r3, [pc, #236]	@ (80025ec <MX_GPIO_Init+0x14c>)
 8002500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002502:	4a3a      	ldr	r2, [pc, #232]	@ (80025ec <MX_GPIO_Init+0x14c>)
 8002504:	f043 0302 	orr.w	r3, r3, #2
 8002508:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800250a:	4b38      	ldr	r3, [pc, #224]	@ (80025ec <MX_GPIO_Init+0x14c>)
 800250c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	607b      	str	r3, [r7, #4]
 8002514:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_MD20A_24V_GPIO_Port, DIR_MD20A_24V_Pin, GPIO_PIN_RESET);
 8002516:	2200      	movs	r2, #0
 8002518:	2102      	movs	r1, #2
 800251a:	4835      	ldr	r0, [pc, #212]	@ (80025f0 <MX_GPIO_Init+0x150>)
 800251c:	f004 fb00 	bl	8006b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_MD20A_18V_GPIO_Port, DIR_MD20A_18V_Pin, GPIO_PIN_RESET);
 8002520:	2200      	movs	r2, #0
 8002522:	2140      	movs	r1, #64	@ 0x40
 8002524:	4833      	ldr	r0, [pc, #204]	@ (80025f4 <MX_GPIO_Init+0x154>)
 8002526:	f004 fafb 	bl	8006b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PS2_Attention_GPIO_Port, PS2_Attention_Pin, GPIO_PIN_SET);
 800252a:	2201      	movs	r2, #1
 800252c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002530:	4830      	ldr	r0, [pc, #192]	@ (80025f4 <MX_GPIO_Init+0x154>)
 8002532:	f004 faf5 	bl	8006b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DIR_MD20A_24V_Pin */
  GPIO_InitStruct.Pin = DIR_MD20A_24V_Pin;
 8002536:	2302      	movs	r3, #2
 8002538:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800253a:	2301      	movs	r3, #1
 800253c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253e:	2300      	movs	r3, #0
 8002540:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002542:	2300      	movs	r3, #0
 8002544:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_MD20A_24V_GPIO_Port, &GPIO_InitStruct);
 8002546:	f107 0314 	add.w	r3, r7, #20
 800254a:	4619      	mov	r1, r3
 800254c:	4828      	ldr	r0, [pc, #160]	@ (80025f0 <MX_GPIO_Init+0x150>)
 800254e:	f004 f965 	bl	800681c <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit_Switch_pen_2_Pin Limit_Switch_Prismatic1_Pin Limit_Switch_Prismatic2_Pin Limit_Switch_pen_1_Pin */
  GPIO_InitStruct.Pin = Limit_Switch_pen_2_Pin|Limit_Switch_Prismatic1_Pin|Limit_Switch_Prismatic2_Pin|Limit_Switch_pen_1_Pin;
 8002552:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8002556:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002558:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800255c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255e:	2300      	movs	r3, #0
 8002560:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002562:	f107 0314 	add.w	r3, r7, #20
 8002566:	4619      	mov	r1, r3
 8002568:	4821      	ldr	r0, [pc, #132]	@ (80025f0 <MX_GPIO_Init+0x150>)
 800256a:	f004 f957 	bl	800681c <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_MD20A_18V_Pin PS2_Attention_Pin */
  GPIO_InitStruct.Pin = DIR_MD20A_18V_Pin|PS2_Attention_Pin;
 800256e:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 8002572:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002574:	2301      	movs	r3, #1
 8002576:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002578:	2300      	movs	r3, #0
 800257a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257c:	2300      	movs	r3, #0
 800257e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002580:	f107 0314 	add.w	r3, r7, #20
 8002584:	4619      	mov	r1, r3
 8002586:	481b      	ldr	r0, [pc, #108]	@ (80025f4 <MX_GPIO_Init+0x154>)
 8002588:	f004 f948 	bl	800681c <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_Pin */
  GPIO_InitStruct.Pin = Emergency_Pin;
 800258c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002590:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002592:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002596:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002598:	2300      	movs	r3, #0
 800259a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_GPIO_Port, &GPIO_InitStruct);
 800259c:	f107 0314 	add.w	r3, r7, #20
 80025a0:	4619      	mov	r1, r3
 80025a2:	4814      	ldr	r0, [pc, #80]	@ (80025f4 <MX_GPIO_Init+0x154>)
 80025a4:	f004 f93a 	bl	800681c <HAL_GPIO_Init>

  /*Configure GPIO pin : Proximity_sensor_Pin */
  GPIO_InitStruct.Pin = Proximity_sensor_Pin;
 80025a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80025ae:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80025b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b4:	2300      	movs	r3, #0
 80025b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Proximity_sensor_GPIO_Port, &GPIO_InitStruct);
 80025b8:	f107 0314 	add.w	r3, r7, #20
 80025bc:	4619      	mov	r1, r3
 80025be:	480d      	ldr	r0, [pc, #52]	@ (80025f4 <MX_GPIO_Init+0x154>)
 80025c0:	f004 f92c 	bl	800681c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80025c4:	2200      	movs	r2, #0
 80025c6:	2100      	movs	r1, #0
 80025c8:	2017      	movs	r0, #23
 80025ca:	f003 fdb4 	bl	8006136 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80025ce:	2017      	movs	r0, #23
 80025d0:	f003 fdcb 	bl	800616a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80025d4:	2200      	movs	r2, #0
 80025d6:	2100      	movs	r1, #0
 80025d8:	2028      	movs	r0, #40	@ 0x28
 80025da:	f003 fdac 	bl	8006136 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80025de:	2028      	movs	r0, #40	@ 0x28
 80025e0:	f003 fdc3 	bl	800616a <HAL_NVIC_EnableIRQ>

}
 80025e4:	bf00      	nop
 80025e6:	3728      	adds	r7, #40	@ 0x28
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	40021000 	.word	0x40021000
 80025f0:	48000400 	.word	0x48000400
 80025f4:	48000800 	.word	0x48000800

080025f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025f8:	b5b0      	push	{r4, r5, r7, lr}
 80025fa:	b096      	sub	sp, #88	@ 0x58
 80025fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025fe:	f002 f990 	bl	8004922 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002602:	f000 fe19 	bl	8003238 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002606:	f7ff ff4b 	bl	80024a0 <MX_GPIO_Init>
  MX_DMA_Init();
 800260a:	f7ff ff1f 	bl	800244c <MX_DMA_Init>
  MX_TIM3_Init();
 800260e:	f001 fc71 	bl	8003ef4 <MX_TIM3_Init>
  MX_ADC1_Init();
 8002612:	f7ff fd99 	bl	8002148 <MX_ADC1_Init>
  MX_TIM1_Init();
 8002616:	f001 fbcb 	bl	8003db0 <MX_TIM1_Init>
  MX_TIM2_Init();
 800261a:	f001 fc1d 	bl	8003e58 <MX_TIM2_Init>
  MX_TIM4_Init();
 800261e:	f001 fcbf 	bl	8003fa0 <MX_TIM4_Init>
  MX_TIM20_Init();
 8002622:	f001 fe43 	bl	80042ac <MX_TIM20_Init>
  MX_TIM8_Init();
 8002626:	f001 fd11 	bl	800404c <MX_TIM8_Init>
  MX_TIM16_Init();
 800262a:	f001 fdbf 	bl	80041ac <MX_TIM16_Init>
  MX_USART2_UART_Init();
 800262e:	f002 f875 	bl	800471c <MX_USART2_UART_Init>
  MX_ADC2_Init();
 8002632:	f7ff fe01 	bl	8002238 <MX_ADC2_Init>
  MX_SPI1_Init();
 8002636:	f001 fa61 	bl	8003afc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim20);
 800263a:	48a0      	ldr	r0, [pc, #640]	@ (80028bc <main+0x2c4>)
 800263c:	f005 fbe0 	bl	8007e00 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim8);
 8002640:	489f      	ldr	r0, [pc, #636]	@ (80028c0 <main+0x2c8>)
 8002642:	f005 fbdd 	bl	8007e00 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8002646:	210c      	movs	r1, #12
 8002648:	489d      	ldr	r0, [pc, #628]	@ (80028c0 <main+0x2c8>)
 800264a:	f005 fd9d 	bl	8008188 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim20, TIM_CHANNEL_1);
 800264e:	2100      	movs	r1, #0
 8002650:	489a      	ldr	r0, [pc, #616]	@ (80028bc <main+0x2c4>)
 8002652:	f005 fd99 	bl	8008188 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim20, TIM_CHANNEL_3);
 8002656:	2108      	movs	r1, #8
 8002658:	4898      	ldr	r0, [pc, #608]	@ (80028bc <main+0x2c4>)
 800265a:	f005 fd95 	bl	8008188 <HAL_TIM_PWM_Start>
	Encoder_Init(&encoder1, &htim4);
 800265e:	4999      	ldr	r1, [pc, #612]	@ (80028c4 <main+0x2cc>)
 8002660:	4899      	ldr	r0, [pc, #612]	@ (80028c8 <main+0x2d0>)
 8002662:	f7fe fc15 	bl	8000e90 <Encoder_Init>
	Encoder_Init(&encoder2, &htim3);
 8002666:	4999      	ldr	r1, [pc, #612]	@ (80028cc <main+0x2d4>)
 8002668:	4899      	ldr	r0, [pc, #612]	@ (80028d0 <main+0x2d8>)
 800266a:	f7fe fc11 	bl	8000e90 <Encoder_Init>
	HAL_ADC_Start(&hadc1);
 800266e:	4899      	ldr	r0, [pc, #612]	@ (80028d4 <main+0x2dc>)
 8002670:	f002 fd90 	bl	8005194 <HAL_ADC_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 8002674:	4898      	ldr	r0, [pc, #608]	@ (80028d8 <main+0x2e0>)
 8002676:	f005 fc33 	bl	8007ee0 <HAL_TIM_Base_Start_IT>

	int lastTick = 0;
 800267a:	2300      	movs	r3, #0
 800267c:	657b      	str	r3, [r7, #84]	@ 0x54

	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800267e:	213c      	movs	r1, #60	@ 0x3c
 8002680:	4892      	ldr	r0, [pc, #584]	@ (80028cc <main+0x2d4>)
 8002682:	f006 f83d 	bl	8008700 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8002686:	213c      	movs	r1, #60	@ 0x3c
 8002688:	488e      	ldr	r0, [pc, #568]	@ (80028c4 <main+0x2cc>)
 800268a:	f006 f839 	bl	8008700 <HAL_TIM_Encoder_Start>

	hmodbus.huart = &huart2;
 800268e:	4b93      	ldr	r3, [pc, #588]	@ (80028dc <main+0x2e4>)
 8002690:	4a93      	ldr	r2, [pc, #588]	@ (80028e0 <main+0x2e8>)
 8002692:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim16;
 8002694:	4b91      	ldr	r3, [pc, #580]	@ (80028dc <main+0x2e4>)
 8002696:	4a93      	ldr	r2, [pc, #588]	@ (80028e4 <main+0x2ec>)
 8002698:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x15;
 800269a:	4b90      	ldr	r3, [pc, #576]	@ (80028dc <main+0x2e4>)
 800269c:	2215      	movs	r2, #21
 800269e:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize = 200;
 80026a0:	4b8e      	ldr	r3, [pc, #568]	@ (80028dc <main+0x2e4>)
 80026a2:	22c8      	movs	r2, #200	@ 0xc8
 80026a4:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, registerFrame);
 80026a6:	4990      	ldr	r1, [pc, #576]	@ (80028e8 <main+0x2f0>)
 80026a8:	488c      	ldr	r0, [pc, #560]	@ (80028dc <main+0x2e4>)
 80026aa:	f7fe ffcd 	bl	8001648 <Modbus_init>

	Kalman_Init(&kf_pris);
 80026ae:	488f      	ldr	r0, [pc, #572]	@ (80028ec <main+0x2f4>)
 80026b0:	f7fe fd19 	bl	80010e6 <Kalman_Init>

	kf_pris.A_data[0] = 1;
 80026b4:	4b8d      	ldr	r3, [pc, #564]	@ (80028ec <main+0x2f4>)
 80026b6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80026ba:	671a      	str	r2, [r3, #112]	@ 0x70
	kf_pris.A_data[1] = 0.0008395;
 80026bc:	4b8b      	ldr	r3, [pc, #556]	@ (80028ec <main+0x2f4>)
 80026be:	4a8c      	ldr	r2, [pc, #560]	@ (80028f0 <main+0x2f8>)
 80026c0:	675a      	str	r2, [r3, #116]	@ 0x74
	kf_pris.A_data[2] = -4.198e-07;
 80026c2:	4b8a      	ldr	r3, [pc, #552]	@ (80028ec <main+0x2f4>)
 80026c4:	4a8b      	ldr	r2, [pc, #556]	@ (80028f4 <main+0x2fc>)
 80026c6:	679a      	str	r2, [r3, #120]	@ 0x78
	kf_pris.A_data[3] = 1.282e-05;
 80026c8:	4b88      	ldr	r3, [pc, #544]	@ (80028ec <main+0x2f4>)
 80026ca:	4a8b      	ldr	r2, [pc, #556]	@ (80028f8 <main+0x300>)
 80026cc:	67da      	str	r2, [r3, #124]	@ 0x7c
	kf_pris.A_data[4] = 0;
 80026ce:	4b87      	ldr	r3, [pc, #540]	@ (80028ec <main+0x2f4>)
 80026d0:	f04f 0200 	mov.w	r2, #0
 80026d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	kf_pris.A_data[5] = 0.6791;
 80026d8:	4b84      	ldr	r3, [pc, #528]	@ (80028ec <main+0x2f4>)
 80026da:	4a88      	ldr	r2, [pc, #544]	@ (80028fc <main+0x304>)
 80026dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	kf_pris.A_data[6] = -0.0008395;
 80026e0:	4b82      	ldr	r3, [pc, #520]	@ (80028ec <main+0x2f4>)
 80026e2:	4a87      	ldr	r2, [pc, #540]	@ (8002900 <main+0x308>)
 80026e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	kf_pris.A_data[7] = 0.02564;
 80026e8:	4b80      	ldr	r3, [pc, #512]	@ (80028ec <main+0x2f4>)
 80026ea:	4a86      	ldr	r2, [pc, #536]	@ (8002904 <main+0x30c>)
 80026ec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	kf_pris.A_data[8] = 0;
 80026f0:	4b7e      	ldr	r3, [pc, #504]	@ (80028ec <main+0x2f4>)
 80026f2:	f04f 0200 	mov.w	r2, #0
 80026f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	kf_pris.A_data[9] = 0;
 80026fa:	4b7c      	ldr	r3, [pc, #496]	@ (80028ec <main+0x2f4>)
 80026fc:	f04f 0200 	mov.w	r2, #0
 8002700:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	kf_pris.A_data[10] = 1;
 8002704:	4b79      	ldr	r3, [pc, #484]	@ (80028ec <main+0x2f4>)
 8002706:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800270a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	kf_pris.A_data[11] = 0;
 800270e:	4b77      	ldr	r3, [pc, #476]	@ (80028ec <main+0x2f4>)
 8002710:	f04f 0200 	mov.w	r2, #0
 8002714:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	kf_pris.A_data[12] = 0;
 8002718:	4b74      	ldr	r3, [pc, #464]	@ (80028ec <main+0x2f4>)
 800271a:	f04f 0200 	mov.w	r2, #0
 800271e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	kf_pris.A_data[13] = -0.04203;
 8002722:	4b72      	ldr	r3, [pc, #456]	@ (80028ec <main+0x2f4>)
 8002724:	4a78      	ldr	r2, [pc, #480]	@ (8002908 <main+0x310>)
 8002726:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	kf_pris.A_data[14] = 2.101e-05;
 800272a:	4b70      	ldr	r3, [pc, #448]	@ (80028ec <main+0x2f4>)
 800272c:	4a77      	ldr	r2, [pc, #476]	@ (800290c <main+0x314>)
 800272e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	kf_pris.A_data[15] = -0.09565;
 8002732:	4b6e      	ldr	r3, [pc, #440]	@ (80028ec <main+0x2f4>)
 8002734:	4a76      	ldr	r2, [pc, #472]	@ (8002910 <main+0x318>)
 8002736:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

	kf_pris.B_data[0] = 4.006e-06;
 800273a:	4b6c      	ldr	r3, [pc, #432]	@ (80028ec <main+0x2f4>)
 800273c:	4a75      	ldr	r2, [pc, #468]	@ (8002914 <main+0x31c>)
 800273e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	kf_pris.B_data[1] = 0.008011;
 8002742:	4b6a      	ldr	r3, [pc, #424]	@ (80028ec <main+0x2f4>)
 8002744:	4a74      	ldr	r2, [pc, #464]	@ (8002918 <main+0x320>)
 8002746:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	kf_pris.B_data[2] = 0;
 800274a:	4b68      	ldr	r3, [pc, #416]	@ (80028ec <main+0x2f4>)
 800274c:	f04f 0200 	mov.w	r2, #0
 8002750:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	kf_pris.B_data[3] = 0.2826;
 8002754:	4b65      	ldr	r3, [pc, #404]	@ (80028ec <main+0x2f4>)
 8002756:	4a71      	ldr	r2, [pc, #452]	@ (800291c <main+0x324>)
 8002758:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc

	// Identity H
	for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 800275c:	2300      	movs	r3, #0
 800275e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002760:	e01d      	b.n	800279e <main+0x1a6>
	    for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 8002762:	2300      	movs	r3, #0
 8002764:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002766:	e014      	b.n	8002792 <main+0x19a>
	        kf_pris.H_data[i * KALMAN_STATE_DIM + j] = (i == j) ? 1.0f : 0.0f;
 8002768:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800276a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800276c:	429a      	cmp	r2, r3
 800276e:	d102      	bne.n	8002776 <main+0x17e>
 8002770:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002774:	e001      	b.n	800277a <main+0x182>
 8002776:	f04f 0200 	mov.w	r2, #0
 800277a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800277c:	0099      	lsls	r1, r3, #2
 800277e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002780:	440b      	add	r3, r1
 8002782:	495a      	ldr	r1, [pc, #360]	@ (80028ec <main+0x2f4>)
 8002784:	333c      	adds	r3, #60	@ 0x3c
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	440b      	add	r3, r1
 800278a:	601a      	str	r2, [r3, #0]
	    for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 800278c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800278e:	3301      	adds	r3, #1
 8002790:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002792:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002794:	2b03      	cmp	r3, #3
 8002796:	dde7      	ble.n	8002768 <main+0x170>
	for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 8002798:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800279a:	3301      	adds	r3, #1
 800279c:	653b      	str	r3, [r7, #80]	@ 0x50
 800279e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027a0:	2b03      	cmp	r3, #3
 80027a2:	ddde      	ble.n	8002762 <main+0x16a>
	    }
	}

	// Prismatic
	kf_pris.x_data[0] = 0;
 80027a4:	4b51      	ldr	r3, [pc, #324]	@ (80028ec <main+0x2f4>)
 80027a6:	f04f 0200 	mov.w	r2, #0
 80027aa:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
	kf_pris.x_data[1] = 0;
 80027ae:	4b4f      	ldr	r3, [pc, #316]	@ (80028ec <main+0x2f4>)
 80027b0:	f04f 0200 	mov.w	r2, #0
 80027b4:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
	kf_pris.x_data[2] = 0;
 80027b8:	4b4c      	ldr	r3, [pc, #304]	@ (80028ec <main+0x2f4>)
 80027ba:	f04f 0200 	mov.w	r2, #0
 80027be:	f8c3 223c 	str.w	r2, [r3, #572]	@ 0x23c
	kf_pris.x_data[3] = 0;
 80027c2:	4b4a      	ldr	r3, [pc, #296]	@ (80028ec <main+0x2f4>)
 80027c4:	f04f 0200 	mov.w	r2, #0
 80027c8:	f8c3 2240 	str.w	r2, [r3, #576]	@ 0x240

	Kalman_SetMeasurementNoise(&kf_pris, 0.01f);
 80027cc:	ed9f 0a54 	vldr	s0, [pc, #336]	@ 8002920 <main+0x328>
 80027d0:	4846      	ldr	r0, [pc, #280]	@ (80028ec <main+0x2f4>)
 80027d2:	f7fe fd5a 	bl	800128a <Kalman_SetMeasurementNoise>
	Kalman_SetProcessNoise(&kf_pris, 0.9f);
 80027d6:	ed9f 0a53 	vldr	s0, [pc, #332]	@ 8002924 <main+0x32c>
 80027da:	4844      	ldr	r0, [pc, #272]	@ (80028ec <main+0x2f4>)
 80027dc:	f7fe fd25 	bl	800122a <Kalman_SetProcessNoise>

	Kalman_Init(&kf_rev);
 80027e0:	4851      	ldr	r0, [pc, #324]	@ (8002928 <main+0x330>)
 80027e2:	f7fe fc80 	bl	80010e6 <Kalman_Init>

	kf_rev.A_data[0] = 1;
 80027e6:	4b50      	ldr	r3, [pc, #320]	@ (8002928 <main+0x330>)
 80027e8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80027ec:	671a      	str	r2, [r3, #112]	@ 0x70
	kf_rev.A_data[1] = 0.0009998;
 80027ee:	4b4e      	ldr	r3, [pc, #312]	@ (8002928 <main+0x330>)
 80027f0:	4a4e      	ldr	r2, [pc, #312]	@ (800292c <main+0x334>)
 80027f2:	675a      	str	r2, [r3, #116]	@ 0x74
	kf_rev.A_data[2] = -2.659e-06;
 80027f4:	4b4c      	ldr	r3, [pc, #304]	@ (8002928 <main+0x330>)
 80027f6:	4a4e      	ldr	r2, [pc, #312]	@ (8002930 <main+0x338>)
 80027f8:	679a      	str	r2, [r3, #120]	@ 0x78
	kf_rev.A_data[3] = 8.108e-08;
 80027fa:	4b4b      	ldr	r3, [pc, #300]	@ (8002928 <main+0x330>)
 80027fc:	4a4d      	ldr	r2, [pc, #308]	@ (8002934 <main+0x33c>)
 80027fe:	67da      	str	r2, [r3, #124]	@ 0x7c
	kf_rev.A_data[4] = 0;
 8002800:	4b49      	ldr	r3, [pc, #292]	@ (8002928 <main+0x330>)
 8002802:	f04f 0200 	mov.w	r2, #0
 8002806:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	kf_rev.A_data[5] = 0.9996;
 800280a:	4b47      	ldr	r3, [pc, #284]	@ (8002928 <main+0x330>)
 800280c:	4a4a      	ldr	r2, [pc, #296]	@ (8002938 <main+0x340>)
 800280e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	kf_rev.A_data[6] = -0.005318;
 8002812:	4b45      	ldr	r3, [pc, #276]	@ (8002928 <main+0x330>)
 8002814:	4a49      	ldr	r2, [pc, #292]	@ (800293c <main+0x344>)
 8002816:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	kf_rev.A_data[7] = 0.0001622;
 800281a:	4b43      	ldr	r3, [pc, #268]	@ (8002928 <main+0x330>)
 800281c:	4a48      	ldr	r2, [pc, #288]	@ (8002940 <main+0x348>)
 800281e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	kf_rev.A_data[8] = 0;
 8002822:	4b41      	ldr	r3, [pc, #260]	@ (8002928 <main+0x330>)
 8002824:	f04f 0200 	mov.w	r2, #0
 8002828:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	kf_rev.A_data[9] = 0;
 800282c:	4b3e      	ldr	r3, [pc, #248]	@ (8002928 <main+0x330>)
 800282e:	f04f 0200 	mov.w	r2, #0
 8002832:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	kf_rev.A_data[10] = 1;
 8002836:	4b3c      	ldr	r3, [pc, #240]	@ (8002928 <main+0x330>)
 8002838:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800283c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	kf_rev.A_data[11] = 0;
 8002840:	4b39      	ldr	r3, [pc, #228]	@ (8002928 <main+0x330>)
 8002842:	f04f 0200 	mov.w	r2, #0
 8002846:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	kf_rev.A_data[12] = 0;
 800284a:	4b37      	ldr	r3, [pc, #220]	@ (8002928 <main+0x330>)
 800284c:	f04f 0200 	mov.w	r2, #0
 8002850:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	kf_rev.A_data[13] = -2.746;
 8002854:	4b34      	ldr	r3, [pc, #208]	@ (8002928 <main+0x330>)
 8002856:	4a3b      	ldr	r2, [pc, #236]	@ (8002944 <main+0x34c>)
 8002858:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	kf_rev.A_data[14] = 0.007303;
 800285c:	4b32      	ldr	r3, [pc, #200]	@ (8002928 <main+0x330>)
 800285e:	4a3a      	ldr	r2, [pc, #232]	@ (8002948 <main+0x350>)
 8002860:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	kf_rev.A_data[15] = 0.1354;
 8002864:	4b30      	ldr	r3, [pc, #192]	@ (8002928 <main+0x330>)
 8002866:	4a39      	ldr	r2, [pc, #228]	@ (800294c <main+0x354>)
 8002868:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

	kf_rev.B_data[0] = 1.203e-07;
 800286c:	4b2e      	ldr	r3, [pc, #184]	@ (8002928 <main+0x330>)
 800286e:	4a38      	ldr	r2, [pc, #224]	@ (8002950 <main+0x358>)
 8002870:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	kf_rev.B_data[1] = 0.0002406;
 8002874:	4b2c      	ldr	r3, [pc, #176]	@ (8002928 <main+0x330>)
 8002876:	4a37      	ldr	r2, [pc, #220]	@ (8002954 <main+0x35c>)
 8002878:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	kf_rev.B_data[2] = 0;
 800287c:	4b2a      	ldr	r3, [pc, #168]	@ (8002928 <main+0x330>)
 800287e:	f04f 0200 	mov.w	r2, #0
 8002882:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	kf_rev.B_data[3] = 1.685;
 8002886:	4b28      	ldr	r3, [pc, #160]	@ (8002928 <main+0x330>)
 8002888:	4a33      	ldr	r2, [pc, #204]	@ (8002958 <main+0x360>)
 800288a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc

	// Identity H
	for (int i = 0; i < 2; i++) {
 800288e:	2300      	movs	r3, #0
 8002890:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002892:	e077      	b.n	8002984 <main+0x38c>
	    for (int j = 0; j < 4; j++) {
 8002894:	2300      	movs	r3, #0
 8002896:	647b      	str	r3, [r7, #68]	@ 0x44
 8002898:	e06e      	b.n	8002978 <main+0x380>
	        if (i == j) {
 800289a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800289c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800289e:	429a      	cmp	r2, r3
 80028a0:	d15c      	bne.n	800295c <main+0x364>
	            kf_rev.H_data[i * 4 + j] = 1.0f;
 80028a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80028a4:	009a      	lsls	r2, r3, #2
 80028a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028a8:	4413      	add	r3, r2
 80028aa:	4a1f      	ldr	r2, [pc, #124]	@ (8002928 <main+0x330>)
 80028ac:	333c      	adds	r3, #60	@ 0x3c
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	4413      	add	r3, r2
 80028b2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80028b6:	601a      	str	r2, [r3, #0]
 80028b8:	e05b      	b.n	8002972 <main+0x37a>
 80028ba:	bf00      	nop
 80028bc:	200017e0 	.word	0x200017e0
 80028c0:	20001648 	.word	0x20001648
 80028c4:	2000157c 	.word	0x2000157c
 80028c8:	2000035c 	.word	0x2000035c
 80028cc:	200014b0 	.word	0x200014b0
 80028d0:	20000390 	.word	0x20000390
 80028d4:	20000280 	.word	0x20000280
 80028d8:	200013e4 	.word	0x200013e4
 80028dc:	20000450 	.word	0x20000450
 80028e0:	200018ac 	.word	0x200018ac
 80028e4:	20001714 	.word	0x20001714
 80028e8:	20000928 	.word	0x20000928
 80028ec:	20000bcc 	.word	0x20000bcc
 80028f0:	3a5c11e4 	.word	0x3a5c11e4
 80028f4:	b4e160df 	.word	0xb4e160df
 80028f8:	3757157b 	.word	0x3757157b
 80028fc:	3f2dd97f 	.word	0x3f2dd97f
 8002900:	ba5c11e4 	.word	0xba5c11e4
 8002904:	3cd20afa 	.word	0x3cd20afa
 8002908:	bd2c27a6 	.word	0xbd2c27a6
 800290c:	37b03ea2 	.word	0x37b03ea2
 8002910:	bdc3e426 	.word	0xbdc3e426
 8002914:	36866b47 	.word	0x36866b47
 8002918:	3c034092 	.word	0x3c034092
 800291c:	3e90b0f2 	.word	0x3e90b0f2
 8002920:	3c23d70a 	.word	0x3c23d70a
 8002924:	3f666666 	.word	0x3f666666
 8002928:	20000ef0 	.word	0x20000ef0
 800292c:	3a830bb9 	.word	0x3a830bb9
 8002930:	b6327146 	.word	0xb6327146
 8002934:	33ae1e34 	.word	0x33ae1e34
 8002938:	3f7fe5c9 	.word	0x3f7fe5c9
 800293c:	bbae429e 	.word	0xbbae429e
 8002940:	392a143b 	.word	0x392a143b
 8002944:	c02fbe77 	.word	0xc02fbe77
 8002948:	3bef4e01 	.word	0x3bef4e01
 800294c:	3e0aa64c 	.word	0x3e0aa64c
 8002950:	34012bd0 	.word	0x34012bd0
 8002954:	397c4992 	.word	0x397c4992
 8002958:	3fd7ae14 	.word	0x3fd7ae14
	        } else {
	            kf_rev.H_data[i * 4 + j] = 0.0f;
 800295c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800295e:	009a      	lsls	r2, r3, #2
 8002960:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002962:	4413      	add	r3, r2
 8002964:	4ac0      	ldr	r2, [pc, #768]	@ (8002c68 <main+0x670>)
 8002966:	333c      	adds	r3, #60	@ 0x3c
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4413      	add	r3, r2
 800296c:	f04f 0200 	mov.w	r2, #0
 8002970:	601a      	str	r2, [r3, #0]
	    for (int j = 0; j < 4; j++) {
 8002972:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002974:	3301      	adds	r3, #1
 8002976:	647b      	str	r3, [r7, #68]	@ 0x44
 8002978:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800297a:	2b03      	cmp	r3, #3
 800297c:	dd8d      	ble.n	800289a <main+0x2a2>
	for (int i = 0; i < 2; i++) {
 800297e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002980:	3301      	adds	r3, #1
 8002982:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002984:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002986:	2b01      	cmp	r3, #1
 8002988:	dd84      	ble.n	8002894 <main+0x29c>
	        }
	    }
	}

	// Revolute
	kf_rev.x_data[0] = 0;
 800298a:	4bb7      	ldr	r3, [pc, #732]	@ (8002c68 <main+0x670>)
 800298c:	f04f 0200 	mov.w	r2, #0
 8002990:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
	kf_rev.x_data[1] = 0;
 8002994:	4bb4      	ldr	r3, [pc, #720]	@ (8002c68 <main+0x670>)
 8002996:	f04f 0200 	mov.w	r2, #0
 800299a:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
	kf_rev.x_data[2] = 0;
 800299e:	4bb2      	ldr	r3, [pc, #712]	@ (8002c68 <main+0x670>)
 80029a0:	f04f 0200 	mov.w	r2, #0
 80029a4:	f8c3 223c 	str.w	r2, [r3, #572]	@ 0x23c
	kf_rev.x_data[3] = 0;
 80029a8:	4baf      	ldr	r3, [pc, #700]	@ (8002c68 <main+0x670>)
 80029aa:	f04f 0200 	mov.w	r2, #0
 80029ae:	f8c3 2240 	str.w	r2, [r3, #576]	@ 0x240

	Kalman_SetMeasurementNoise(&kf_rev, 0.08f);
 80029b2:	ed9f 0aae 	vldr	s0, [pc, #696]	@ 8002c6c <main+0x674>
 80029b6:	48ac      	ldr	r0, [pc, #688]	@ (8002c68 <main+0x670>)
 80029b8:	f7fe fc67 	bl	800128a <Kalman_SetMeasurementNoise>
	Kalman_SetProcessNoise(&kf_rev, 0.12f);
 80029bc:	ed9f 0aac 	vldr	s0, [pc, #688]	@ 8002c70 <main+0x678>
 80029c0:	48a9      	ldr	r0, [pc, #676]	@ (8002c68 <main+0x670>)
 80029c2:	f7fe fc32 	bl	800122a <Kalman_SetProcessNoise>

	Pris_motor = create_prismatic_motor(2.29e-04, 4.82e-04, 8.75e-01, 1.77e-01, 1.77e-01, 3.8719, 0.0016);
 80029c6:	4cab      	ldr	r4, [pc, #684]	@ (8002c74 <main+0x67c>)
 80029c8:	463b      	mov	r3, r7
 80029ca:	ed9f 6b8d 	vldr	d6, [pc, #564]	@ 8002c00 <main+0x608>
 80029ce:	ed9f 5b8e 	vldr	d5, [pc, #568]	@ 8002c08 <main+0x610>
 80029d2:	ed9f 4b8f 	vldr	d4, [pc, #572]	@ 8002c10 <main+0x618>
 80029d6:	ed9f 3b8e 	vldr	d3, [pc, #568]	@ 8002c10 <main+0x618>
 80029da:	ed9f 2b8f 	vldr	d2, [pc, #572]	@ 8002c18 <main+0x620>
 80029de:	ed9f 1b90 	vldr	d1, [pc, #576]	@ 8002c20 <main+0x628>
 80029e2:	ed9f 0b91 	vldr	d0, [pc, #580]	@ 8002c28 <main+0x630>
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7ff f930 	bl	8001c4c <create_prismatic_motor>
 80029ec:	4625      	mov	r5, r4
 80029ee:	463c      	mov	r4, r7
 80029f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a00:	e885 0003 	stmia.w	r5, {r0, r1}
	Rev_motor = create_motor(1.88E-01, 6.91E-03, 7.36E-01, 1.63E+00, 1.63E+00 * 7.36E-01, 5.13E-01, 3.37E-04);
 8002a04:	4c9c      	ldr	r4, [pc, #624]	@ (8002c78 <main+0x680>)
 8002a06:	463b      	mov	r3, r7
 8002a08:	ed9f 6b89 	vldr	d6, [pc, #548]	@ 8002c30 <main+0x638>
 8002a0c:	ed9f 5b8a 	vldr	d5, [pc, #552]	@ 8002c38 <main+0x640>
 8002a10:	ed9f 4b8b 	vldr	d4, [pc, #556]	@ 8002c40 <main+0x648>
 8002a14:	ed9f 3b8c 	vldr	d3, [pc, #560]	@ 8002c48 <main+0x650>
 8002a18:	ed9f 2b8d 	vldr	d2, [pc, #564]	@ 8002c50 <main+0x658>
 8002a1c:	ed9f 1b8e 	vldr	d1, [pc, #568]	@ 8002c58 <main+0x660>
 8002a20:	ed9f 0b8f 	vldr	d0, [pc, #572]	@ 8002c60 <main+0x668>
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff f952 	bl	8001cce <create_motor>
 8002a2a:	4625      	mov	r5, r4
 8002a2c:	463c      	mov	r4, r7
 8002a2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a3a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a3e:	e885 0003 	stmia.w	r5, {r0, r1}

	// Prismatic Position
	Pris_posi_PID.Kp = 0.3;
 8002a42:	4b8e      	ldr	r3, [pc, #568]	@ (8002c7c <main+0x684>)
 8002a44:	4a8e      	ldr	r2, [pc, #568]	@ (8002c80 <main+0x688>)
 8002a46:	619a      	str	r2, [r3, #24]
	Pris_posi_PID.Ki = 0.01;
 8002a48:	4b8c      	ldr	r3, [pc, #560]	@ (8002c7c <main+0x684>)
 8002a4a:	4a8e      	ldr	r2, [pc, #568]	@ (8002c84 <main+0x68c>)
 8002a4c:	61da      	str	r2, [r3, #28]
	Pris_posi_PID.Kd = 0.3;
 8002a4e:	4b8b      	ldr	r3, [pc, #556]	@ (8002c7c <main+0x684>)
 8002a50:	4a8b      	ldr	r2, [pc, #556]	@ (8002c80 <main+0x688>)
 8002a52:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Pris_posi_PID, 0);
 8002a54:	2100      	movs	r1, #0
 8002a56:	4889      	ldr	r0, [pc, #548]	@ (8002c7c <main+0x684>)
 8002a58:	f009 ff9e 	bl	800c998 <arm_pid_init_f32>

	// Prismatic Velocity
	Pris_velo_PID.Kp = 0.08;
 8002a5c:	4b8a      	ldr	r3, [pc, #552]	@ (8002c88 <main+0x690>)
 8002a5e:	4a8b      	ldr	r2, [pc, #556]	@ (8002c8c <main+0x694>)
 8002a60:	619a      	str	r2, [r3, #24]
	Pris_velo_PID.Ki = 0.01;
 8002a62:	4b89      	ldr	r3, [pc, #548]	@ (8002c88 <main+0x690>)
 8002a64:	4a87      	ldr	r2, [pc, #540]	@ (8002c84 <main+0x68c>)
 8002a66:	61da      	str	r2, [r3, #28]
	Pris_velo_PID.Kd = 0;
 8002a68:	4b87      	ldr	r3, [pc, #540]	@ (8002c88 <main+0x690>)
 8002a6a:	f04f 0200 	mov.w	r2, #0
 8002a6e:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Pris_velo_PID, 0);
 8002a70:	2100      	movs	r1, #0
 8002a72:	4885      	ldr	r0, [pc, #532]	@ (8002c88 <main+0x690>)
 8002a74:	f009 ff90 	bl	800c998 <arm_pid_init_f32>

	// Revolute Position
	Rev_posi_PID.Kp = 2.5;
 8002a78:	4b85      	ldr	r3, [pc, #532]	@ (8002c90 <main+0x698>)
 8002a7a:	4a86      	ldr	r2, [pc, #536]	@ (8002c94 <main+0x69c>)
 8002a7c:	619a      	str	r2, [r3, #24]
	Rev_posi_PID.Ki = 0.1;
 8002a7e:	4b84      	ldr	r3, [pc, #528]	@ (8002c90 <main+0x698>)
 8002a80:	4a85      	ldr	r2, [pc, #532]	@ (8002c98 <main+0x6a0>)
 8002a82:	61da      	str	r2, [r3, #28]
	Rev_posi_PID.Kd = 0.8;
 8002a84:	4b82      	ldr	r3, [pc, #520]	@ (8002c90 <main+0x698>)
 8002a86:	4a85      	ldr	r2, [pc, #532]	@ (8002c9c <main+0x6a4>)
 8002a88:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Rev_posi_PID, 0);
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	4880      	ldr	r0, [pc, #512]	@ (8002c90 <main+0x698>)
 8002a8e:	f009 ff83 	bl	800c998 <arm_pid_init_f32>

	// Revolute Velocity
	Rev_velo_PID.Kp = 2.0;
 8002a92:	4b83      	ldr	r3, [pc, #524]	@ (8002ca0 <main+0x6a8>)
 8002a94:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002a98:	619a      	str	r2, [r3, #24]
	Rev_velo_PID.Ki = 0.1;
 8002a9a:	4b81      	ldr	r3, [pc, #516]	@ (8002ca0 <main+0x6a8>)
 8002a9c:	4a7e      	ldr	r2, [pc, #504]	@ (8002c98 <main+0x6a0>)
 8002a9e:	61da      	str	r2, [r3, #28]
	Rev_velo_PID.Kd = 0;
 8002aa0:	4b7f      	ldr	r3, [pc, #508]	@ (8002ca0 <main+0x6a8>)
 8002aa2:	f04f 0200 	mov.w	r2, #0
 8002aa6:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Rev_velo_PID, 0);
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	487d      	ldr	r0, [pc, #500]	@ (8002ca0 <main+0x6a8>)
 8002aac:	f009 ff74 	bl	800c998 <arm_pid_init_f32>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_ADC_Start(&hadc1);
 8002ab0:	487c      	ldr	r0, [pc, #496]	@ (8002ca4 <main+0x6ac>)
 8002ab2:	f002 fb6f 	bl	8005194 <HAL_ADC_Start>
		HAL_ADC_Start(&hadc2);
 8002ab6:	487c      	ldr	r0, [pc, #496]	@ (8002ca8 <main+0x6b0>)
 8002ab8:	f002 fb6c 	bl	8005194 <HAL_ADC_Start>
		adc_1 = HAL_ADC_GetValue(&hadc1);
 8002abc:	4879      	ldr	r0, [pc, #484]	@ (8002ca4 <main+0x6ac>)
 8002abe:	f002 fc4d 	bl	800535c <HAL_ADC_GetValue>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	4b79      	ldr	r3, [pc, #484]	@ (8002cac <main+0x6b4>)
 8002ac8:	801a      	strh	r2, [r3, #0]
		adc_2 = HAL_ADC_GetValue(&hadc2);
 8002aca:	4877      	ldr	r0, [pc, #476]	@ (8002ca8 <main+0x6b0>)
 8002acc:	f002 fc46 	bl	800535c <HAL_ADC_GetValue>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	4b76      	ldr	r3, [pc, #472]	@ (8002cb0 <main+0x6b8>)
 8002ad6:	801a      	strh	r2, [r3, #0]
		QEIReadRaw3 = __HAL_TIM_GET_COUNTER(&htim3);
 8002ad8:	4b76      	ldr	r3, [pc, #472]	@ (8002cb4 <main+0x6bc>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ade:	4a76      	ldr	r2, [pc, #472]	@ (8002cb8 <main+0x6c0>)
 8002ae0:	6013      	str	r3, [r2, #0]
		QEIReadRaw4 = __HAL_TIM_GET_COUNTER(&htim4);
 8002ae2:	4b76      	ldr	r3, [pc, #472]	@ (8002cbc <main+0x6c4>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae8:	4a75      	ldr	r2, [pc, #468]	@ (8002cc0 <main+0x6c8>)
 8002aea:	6013      	str	r3, [r2, #0]

		Modbus_Protocal_Worker();
 8002aec:	f7fe fe3a 	bl	8001764 <Modbus_Protocal_Worker>

		uint32_t currentTick = HAL_GetTick();
 8002af0:	f001 ff7c 	bl	80049ec <HAL_GetTick>
 8002af4:	6438      	str	r0, [r7, #64]	@ 0x40
		float dt = (currentTick - lastTick) / 1000.0f;
 8002af6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002af8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	ee07 3a90 	vmov	s15, r3
 8002b00:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b04:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8002cc4 <main+0x6cc>
 8002b08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b0c:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		if (dt >= 0.001f) {
 8002b10:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002b14:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8002cc8 <main+0x6d0>
 8002b18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b20:	f2c0 825b 	blt.w	8002fda <main+0x9e2>
			Encoder_Update(&encoder1, dt);
 8002b24:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 8002b28:	4868      	ldr	r0, [pc, #416]	@ (8002ccc <main+0x6d4>)
 8002b2a:	f7fe f9db 	bl	8000ee4 <Encoder_Update>
			Encoder_Update(&encoder2, dt);
 8002b2e:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 8002b32:	4867      	ldr	r0, [pc, #412]	@ (8002cd0 <main+0x6d8>)
 8002b34:	f7fe f9d6 	bl	8000ee4 <Encoder_Update>
			lastTick = currentTick;
 8002b38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b3a:	657b      	str	r3, [r7, #84]	@ 0x54

			p1 = Encoder_GetPosition_mm(&encoder1);
 8002b3c:	4863      	ldr	r0, [pc, #396]	@ (8002ccc <main+0x6d4>)
 8002b3e:	f7fe fab4 	bl	80010aa <Encoder_GetPosition_mm>
 8002b42:	eef0 7a40 	vmov.f32	s15, s0
 8002b46:	4b63      	ldr	r3, [pc, #396]	@ (8002cd4 <main+0x6dc>)
 8002b48:	edc3 7a00 	vstr	s15, [r3]
			v1 = Encoder_GetVelocity(&encoder1);
 8002b4c:	485f      	ldr	r0, [pc, #380]	@ (8002ccc <main+0x6d4>)
 8002b4e:	f7fe fa8e 	bl	800106e <Encoder_GetVelocity>
 8002b52:	eef0 7a40 	vmov.f32	s15, s0
 8002b56:	4b60      	ldr	r3, [pc, #384]	@ (8002cd8 <main+0x6e0>)
 8002b58:	edc3 7a00 	vstr	s15, [r3]
			a1 = Encoder_GetAcceleration(&encoder1);
 8002b5c:	485b      	ldr	r0, [pc, #364]	@ (8002ccc <main+0x6d4>)
 8002b5e:	f7fe fa95 	bl	800108c <Encoder_GetAcceleration>
 8002b62:	eef0 7a40 	vmov.f32	s15, s0
 8002b66:	4b5d      	ldr	r3, [pc, #372]	@ (8002cdc <main+0x6e4>)
 8002b68:	edc3 7a00 	vstr	s15, [r3]

			p2 = Encoder_GetPosition(&encoder2);
 8002b6c:	4858      	ldr	r0, [pc, #352]	@ (8002cd0 <main+0x6d8>)
 8002b6e:	f7fe fa6f 	bl	8001050 <Encoder_GetPosition>
 8002b72:	eef0 7a40 	vmov.f32	s15, s0
 8002b76:	4b5a      	ldr	r3, [pc, #360]	@ (8002ce0 <main+0x6e8>)
 8002b78:	edc3 7a00 	vstr	s15, [r3]
			v2 = Encoder_GetVelocity(&encoder2);
 8002b7c:	4854      	ldr	r0, [pc, #336]	@ (8002cd0 <main+0x6d8>)
 8002b7e:	f7fe fa76 	bl	800106e <Encoder_GetVelocity>
 8002b82:	eef0 7a40 	vmov.f32	s15, s0
 8002b86:	4b57      	ldr	r3, [pc, #348]	@ (8002ce4 <main+0x6ec>)
 8002b88:	edc3 7a00 	vstr	s15, [r3]
			a2 = Encoder_GetAcceleration(&encoder2);
 8002b8c:	4850      	ldr	r0, [pc, #320]	@ (8002cd0 <main+0x6d8>)
 8002b8e:	f7fe fa7d 	bl	800108c <Encoder_GetAcceleration>
 8002b92:	eef0 7a40 	vmov.f32	s15, s0
 8002b96:	4b54      	ldr	r3, [pc, #336]	@ (8002ce8 <main+0x6f0>)
 8002b98:	edc3 7a00 	vstr	s15, [r3]

			Measurement_Pris[0] = Encoder_GetPosition_mm(&encoder1);
 8002b9c:	484b      	ldr	r0, [pc, #300]	@ (8002ccc <main+0x6d4>)
 8002b9e:	f7fe fa84 	bl	80010aa <Encoder_GetPosition_mm>
 8002ba2:	eef0 7a40 	vmov.f32	s15, s0
 8002ba6:	4b51      	ldr	r3, [pc, #324]	@ (8002cec <main+0x6f4>)
 8002ba8:	edc3 7a00 	vstr	s15, [r3]
			Measurement_Pris[1] = Encoder_GetVelocity_mm(&encoder1);
 8002bac:	4847      	ldr	r0, [pc, #284]	@ (8002ccc <main+0x6d4>)
 8002bae:	f7fe fa8b 	bl	80010c8 <Encoder_GetVelocity_mm>
 8002bb2:	eef0 7a40 	vmov.f32	s15, s0
 8002bb6:	4b4d      	ldr	r3, [pc, #308]	@ (8002cec <main+0x6f4>)
 8002bb8:	edc3 7a01 	vstr	s15, [r3, #4]
			Measurement_Pris[2] = 0;
 8002bbc:	4b4b      	ldr	r3, [pc, #300]	@ (8002cec <main+0x6f4>)
 8002bbe:	f04f 0200 	mov.w	r2, #0
 8002bc2:	609a      	str	r2, [r3, #8]
			Measurement_Pris[3] = 0;
 8002bc4:	4b49      	ldr	r3, [pc, #292]	@ (8002cec <main+0x6f4>)
 8002bc6:	f04f 0200 	mov.w	r2, #0
 8002bca:	60da      	str	r2, [r3, #12]
			Kalman_SetInput(&kf_pris, V_pris_velo_PID);
 8002bcc:	4b48      	ldr	r3, [pc, #288]	@ (8002cf0 <main+0x6f8>)
 8002bce:	edd3 7a00 	vldr	s15, [r3]
 8002bd2:	eeb0 0a67 	vmov.f32	s0, s15
 8002bd6:	4847      	ldr	r0, [pc, #284]	@ (8002cf4 <main+0x6fc>)
 8002bd8:	f7fe fb87 	bl	80012ea <Kalman_SetInput>
			Kalman_Predict(&kf_pris);
 8002bdc:	4845      	ldr	r0, [pc, #276]	@ (8002cf4 <main+0x6fc>)
 8002bde:	f7fe fb94 	bl	800130a <Kalman_Predict>
			Kalman_Update(&kf_pris, Measurement_Pris);
 8002be2:	4942      	ldr	r1, [pc, #264]	@ (8002cec <main+0x6f4>)
 8002be4:	4843      	ldr	r0, [pc, #268]	@ (8002cf4 <main+0x6fc>)
 8002be6:	f7fe fbdd 	bl	80013a4 <Kalman_Update>

			Measurement_Rev[0] = Encoder_GetPosition(&encoder2) / (100/30);
 8002bea:	4839      	ldr	r0, [pc, #228]	@ (8002cd0 <main+0x6d8>)
 8002bec:	f7fe fa30 	bl	8001050 <Encoder_GetPosition>
 8002bf0:	eeb0 7a40 	vmov.f32	s14, s0
 8002bf4:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8002bf8:	e07e      	b.n	8002cf8 <main+0x700>
 8002bfa:	bf00      	nop
 8002bfc:	f3af 8000 	nop.w
 8002c00:	eb1c432d 	.word	0xeb1c432d
 8002c04:	3f5a36e2 	.word	0x3f5a36e2
 8002c08:	b50b0f28 	.word	0xb50b0f28
 8002c0c:	400ef9a6 	.word	0x400ef9a6
 8002c10:	9db22d0e 	.word	0x9db22d0e
 8002c14:	3fc6a7ef 	.word	0x3fc6a7ef
 8002c18:	00000000 	.word	0x00000000
 8002c1c:	3fec0000 	.word	0x3fec0000
 8002c20:	3c968944 	.word	0x3c968944
 8002c24:	3f3f969e 	.word	0x3f3f969e
 8002c28:	05857aff 	.word	0x05857aff
 8002c2c:	3f2e03f7 	.word	0x3f2e03f7
 8002c30:	fa8f7db7 	.word	0xfa8f7db7
 8002c34:	3f3615eb 	.word	0x3f3615eb
 8002c38:	f9db22d1 	.word	0xf9db22d1
 8002c3c:	3fe06a7e 	.word	0x3fe06a7e
 8002c40:	a7daa4fc 	.word	0xa7daa4fc
 8002c44:	3ff331e3 	.word	0x3ff331e3
 8002c48:	e147ae14 	.word	0xe147ae14
 8002c4c:	3ffa147a 	.word	0x3ffa147a
 8002c50:	df3b645a 	.word	0xdf3b645a
 8002c54:	3fe78d4f 	.word	0x3fe78d4f
 8002c58:	003eea21 	.word	0x003eea21
 8002c5c:	3f7c4da9 	.word	0x3f7c4da9
 8002c60:	4dd2f1aa 	.word	0x4dd2f1aa
 8002c64:	3fc81062 	.word	0x3fc81062
 8002c68:	20000ef0 	.word	0x20000ef0
 8002c6c:	3da3d70a 	.word	0x3da3d70a
 8002c70:	3df5c28f 	.word	0x3df5c28f
 8002c74:	20001218 	.word	0x20001218
 8002c78:	20001250 	.word	0x20001250
 8002c7c:	20000ac8 	.word	0x20000ac8
 8002c80:	3e99999a 	.word	0x3e99999a
 8002c84:	3c23d70a 	.word	0x3c23d70a
 8002c88:	20000b08 	.word	0x20000b08
 8002c8c:	3da3d70a 	.word	0x3da3d70a
 8002c90:	20000b48 	.word	0x20000b48
 8002c94:	40200000 	.word	0x40200000
 8002c98:	3dcccccd 	.word	0x3dcccccd
 8002c9c:	3f4ccccd 	.word	0x3f4ccccd
 8002ca0:	20000b84 	.word	0x20000b84
 8002ca4:	20000280 	.word	0x20000280
 8002ca8:	200002ec 	.word	0x200002ec
 8002cac:	2000044c 	.word	0x2000044c
 8002cb0:	2000044e 	.word	0x2000044e
 8002cb4:	200014b0 	.word	0x200014b0
 8002cb8:	200003c4 	.word	0x200003c4
 8002cbc:	2000157c 	.word	0x2000157c
 8002cc0:	200003c8 	.word	0x200003c8
 8002cc4:	447a0000 	.word	0x447a0000
 8002cc8:	3a83126f 	.word	0x3a83126f
 8002ccc:	2000035c 	.word	0x2000035c
 8002cd0:	20000390 	.word	0x20000390
 8002cd4:	20000430 	.word	0x20000430
 8002cd8:	20000434 	.word	0x20000434
 8002cdc:	20000438 	.word	0x20000438
 8002ce0:	2000043c 	.word	0x2000043c
 8002ce4:	20000440 	.word	0x20000440
 8002ce8:	20000444 	.word	0x20000444
 8002cec:	20001288 	.word	0x20001288
 8002cf0:	20000b34 	.word	0x20000b34
 8002cf4:	20000bcc 	.word	0x20000bcc
 8002cf8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cfc:	4b96      	ldr	r3, [pc, #600]	@ (8002f58 <main+0x960>)
 8002cfe:	edc3 7a00 	vstr	s15, [r3]
			Measurement_Rev[1] = Encoder_GetVelocity(&encoder2) / (100/30);
 8002d02:	4896      	ldr	r0, [pc, #600]	@ (8002f5c <main+0x964>)
 8002d04:	f7fe f9b3 	bl	800106e <Encoder_GetVelocity>
 8002d08:	eeb0 7a40 	vmov.f32	s14, s0
 8002d0c:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8002d10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d14:	4b90      	ldr	r3, [pc, #576]	@ (8002f58 <main+0x960>)
 8002d16:	edc3 7a01 	vstr	s15, [r3, #4]
			Measurement_Rev[2] = 0;
 8002d1a:	4b8f      	ldr	r3, [pc, #572]	@ (8002f58 <main+0x960>)
 8002d1c:	f04f 0200 	mov.w	r2, #0
 8002d20:	609a      	str	r2, [r3, #8]
			Measurement_Rev[3] = 0;
 8002d22:	4b8d      	ldr	r3, [pc, #564]	@ (8002f58 <main+0x960>)
 8002d24:	f04f 0200 	mov.w	r2, #0
 8002d28:	60da      	str	r2, [r3, #12]
			Kalman_SetInput(&kf_rev, V_rev_velo_PID);
 8002d2a:	4b8d      	ldr	r3, [pc, #564]	@ (8002f60 <main+0x968>)
 8002d2c:	edd3 7a00 	vldr	s15, [r3]
 8002d30:	eeb0 0a67 	vmov.f32	s0, s15
 8002d34:	488b      	ldr	r0, [pc, #556]	@ (8002f64 <main+0x96c>)
 8002d36:	f7fe fad8 	bl	80012ea <Kalman_SetInput>
			Kalman_Predict(&kf_rev);
 8002d3a:	488a      	ldr	r0, [pc, #552]	@ (8002f64 <main+0x96c>)
 8002d3c:	f7fe fae5 	bl	800130a <Kalman_Predict>
			Kalman_Update(&kf_rev, Measurement_Rev);
 8002d40:	4985      	ldr	r1, [pc, #532]	@ (8002f58 <main+0x960>)
 8002d42:	4888      	ldr	r0, [pc, #544]	@ (8002f64 <main+0x96c>)
 8002d44:	f7fe fb2e 	bl	80013a4 <Kalman_Update>

			Revolute_dis();
 8002d48:	f000 fd6a 	bl	8003820 <Revolute_dis>
			count_Tim2 += 1;
 8002d4c:	4b86      	ldr	r3, [pc, #536]	@ (8002f68 <main+0x970>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	3301      	adds	r3, #1
 8002d52:	4a85      	ldr	r2, [pc, #532]	@ (8002f68 <main+0x970>)
 8002d54:	6013      	str	r3, [r2, #0]
			// Velocity Control Prismatic
			velocity_pris = Encoder_GetVelocity_mm(&encoder1);
 8002d56:	4885      	ldr	r0, [pc, #532]	@ (8002f6c <main+0x974>)
 8002d58:	f7fe f9b6 	bl	80010c8 <Encoder_GetVelocity_mm>
 8002d5c:	eef0 7a40 	vmov.f32	s15, s0
 8002d60:	4b83      	ldr	r3, [pc, #524]	@ (8002f70 <main+0x978>)
 8002d62:	edc3 7a00 	vstr	s15, [r3]
//			setvelocity_pris = GetTrajectoryVelocity(&Prismatic[current_segment], t_global) + V_pris_posi_PID;
			setvelocity_pris = vel_pris + V_pris_posi_PID;
 8002d66:	4b83      	ldr	r3, [pc, #524]	@ (8002f74 <main+0x97c>)
 8002d68:	ed93 7a00 	vldr	s14, [r3]
 8002d6c:	4b82      	ldr	r3, [pc, #520]	@ (8002f78 <main+0x980>)
 8002d6e:	edd3 7a00 	vldr	s15, [r3]
 8002d72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d76:	4b81      	ldr	r3, [pc, #516]	@ (8002f7c <main+0x984>)
 8002d78:	edc3 7a00 	vstr	s15, [r3]
			delta_velo_pris = setvelocity_pris - velocity_pris;
 8002d7c:	4b7f      	ldr	r3, [pc, #508]	@ (8002f7c <main+0x984>)
 8002d7e:	ed93 7a00 	vldr	s14, [r3]
 8002d82:	4b7b      	ldr	r3, [pc, #492]	@ (8002f70 <main+0x978>)
 8002d84:	edd3 7a00 	vldr	s15, [r3]
 8002d88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d8c:	4b7c      	ldr	r3, [pc, #496]	@ (8002f80 <main+0x988>)
 8002d8e:	edc3 7a00 	vstr	s15, [r3]
//			delta_velo_pris = setvelocity_pris - kf_pris.x_data[1];
			V_pris_velo_PID = Prismatic_velocity_control(delta_velo_pris);
 8002d92:	4b7b      	ldr	r3, [pc, #492]	@ (8002f80 <main+0x988>)
 8002d94:	edd3 7a00 	vldr	s15, [r3]
 8002d98:	eeb0 0a67 	vmov.f32	s0, s15
 8002d9c:	f000 fb5e 	bl	800345c <Prismatic_velocity_control>
 8002da0:	eef0 7a40 	vmov.f32	s15, s0
 8002da4:	4b77      	ldr	r3, [pc, #476]	@ (8002f84 <main+0x98c>)
 8002da6:	edc3 7a00 	vstr	s15, [r3]

			// Velocity Control revolute
			velocity_rev = Encoder_GetVelocity(&encoder2) / (100.0 / 30.0);
 8002daa:	486c      	ldr	r0, [pc, #432]	@ (8002f5c <main+0x964>)
 8002dac:	f7fe f95f 	bl	800106e <Encoder_GetVelocity>
 8002db0:	ee10 3a10 	vmov	r3, s0
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7fd fb93 	bl	80004e0 <__aeabi_f2d>
 8002dba:	a361      	add	r3, pc, #388	@ (adr r3, 8002f40 <main+0x948>)
 8002dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc0:	f7fd fd10 	bl	80007e4 <__aeabi_ddiv>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	4610      	mov	r0, r2
 8002dca:	4619      	mov	r1, r3
 8002dcc:	f7fd fe7a 	bl	8000ac4 <__aeabi_d2f>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	4a6d      	ldr	r2, [pc, #436]	@ (8002f88 <main+0x990>)
 8002dd4:	6013      	str	r3, [r2, #0]
//			setvelocity_rev = GetTrajectoryVelocity(&Revolute[current_segment], t_global) + V_rev_posi_PID;
			setvelocity_rev = vel_rev + V_rev_posi_PID;
 8002dd6:	4b6d      	ldr	r3, [pc, #436]	@ (8002f8c <main+0x994>)
 8002dd8:	ed93 7a00 	vldr	s14, [r3]
 8002ddc:	4b6c      	ldr	r3, [pc, #432]	@ (8002f90 <main+0x998>)
 8002dde:	edd3 7a00 	vldr	s15, [r3]
 8002de2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002de6:	4b6b      	ldr	r3, [pc, #428]	@ (8002f94 <main+0x99c>)
 8002de8:	edc3 7a00 	vstr	s15, [r3]
//			delta_velo_rev = setvelocity_rev - velocity_rev;
			delta_velo_rev = setvelocity_rev - kf_rev.x_data[1];
 8002dec:	4b69      	ldr	r3, [pc, #420]	@ (8002f94 <main+0x99c>)
 8002dee:	ed93 7a00 	vldr	s14, [r3]
 8002df2:	4b5c      	ldr	r3, [pc, #368]	@ (8002f64 <main+0x96c>)
 8002df4:	edd3 7a8e 	vldr	s15, [r3, #568]	@ 0x238
 8002df8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dfc:	4b66      	ldr	r3, [pc, #408]	@ (8002f98 <main+0x9a0>)
 8002dfe:	edc3 7a00 	vstr	s15, [r3]
			V_rev_velo_PID = Revolute_velocity_control(delta_velo_rev);
 8002e02:	4b65      	ldr	r3, [pc, #404]	@ (8002f98 <main+0x9a0>)
 8002e04:	edd3 7a00 	vldr	s15, [r3]
 8002e08:	eeb0 0a67 	vmov.f32	s0, s15
 8002e0c:	f000 fc4c 	bl	80036a8 <Revolute_velocity_control>
 8002e10:	eef0 7a40 	vmov.f32	s15, s0
 8002e14:	4b52      	ldr	r3, [pc, #328]	@ (8002f60 <main+0x968>)
 8002e16:	edc3 7a00 	vstr	s15, [r3]
			if (count_Tim2 >= 10) {
 8002e1a:	4b53      	ldr	r3, [pc, #332]	@ (8002f68 <main+0x970>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2b09      	cmp	r3, #9
 8002e20:	f340 80db 	ble.w	8002fda <main+0x9e2>
				// Position Control Prismatic
				position_pris = Encoder_GetPosition_mm(&encoder1);
 8002e24:	4851      	ldr	r0, [pc, #324]	@ (8002f6c <main+0x974>)
 8002e26:	f7fe f940 	bl	80010aa <Encoder_GetPosition_mm>
 8002e2a:	eef0 7a40 	vmov.f32	s15, s0
 8002e2e:	4b5b      	ldr	r3, [pc, #364]	@ (8002f9c <main+0x9a4>)
 8002e30:	edc3 7a00 	vstr	s15, [r3]
//				setposition_pris = GetTrajectoryPosition(&Prismatic[current_segment], t_global);
				setposition_pris = pos_pris;
 8002e34:	4b5a      	ldr	r3, [pc, #360]	@ (8002fa0 <main+0x9a8>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a5a      	ldr	r2, [pc, #360]	@ (8002fa4 <main+0x9ac>)
 8002e3a:	6013      	str	r3, [r2, #0]
				delta_posi_pris = setposition_pris - position_pris;
 8002e3c:	4b59      	ldr	r3, [pc, #356]	@ (8002fa4 <main+0x9ac>)
 8002e3e:	ed93 7a00 	vldr	s14, [r3]
 8002e42:	4b56      	ldr	r3, [pc, #344]	@ (8002f9c <main+0x9a4>)
 8002e44:	edd3 7a00 	vldr	s15, [r3]
 8002e48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e4c:	4b56      	ldr	r3, [pc, #344]	@ (8002fa8 <main+0x9b0>)
 8002e4e:	edc3 7a00 	vstr	s15, [r3]
				if (delta_posi_pris <= 0.1 && delta_posi_pris >= -0.1) {
 8002e52:	4b55      	ldr	r3, [pc, #340]	@ (8002fa8 <main+0x9b0>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7fd fb42 	bl	80004e0 <__aeabi_f2d>
 8002e5c:	a33a      	add	r3, pc, #232	@ (adr r3, 8002f48 <main+0x950>)
 8002e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e62:	f7fd fe11 	bl	8000a88 <__aeabi_dcmple>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d015      	beq.n	8002e98 <main+0x8a0>
 8002e6c:	4b4e      	ldr	r3, [pc, #312]	@ (8002fa8 <main+0x9b0>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7fd fb35 	bl	80004e0 <__aeabi_f2d>
 8002e76:	a336      	add	r3, pc, #216	@ (adr r3, 8002f50 <main+0x958>)
 8002e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e7c:	f7fd fe0e 	bl	8000a9c <__aeabi_dcmpge>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d008      	beq.n	8002e98 <main+0x8a0>
					V_pris_posi_PID = 0;
 8002e86:	4b3c      	ldr	r3, [pc, #240]	@ (8002f78 <main+0x980>)
 8002e88:	f04f 0200 	mov.w	r2, #0
 8002e8c:	601a      	str	r2, [r3, #0]
					V_pris_velo_PID = 0;
 8002e8e:	4b3d      	ldr	r3, [pc, #244]	@ (8002f84 <main+0x98c>)
 8002e90:	f04f 0200 	mov.w	r2, #0
 8002e94:	601a      	str	r2, [r3, #0]
 8002e96:	e00b      	b.n	8002eb0 <main+0x8b8>
				} else {
					V_pris_posi_PID = Prismatic_position_control(delta_posi_pris);
 8002e98:	4b43      	ldr	r3, [pc, #268]	@ (8002fa8 <main+0x9b0>)
 8002e9a:	edd3 7a00 	vldr	s15, [r3]
 8002e9e:	eeb0 0a67 	vmov.f32	s0, s15
 8002ea2:	f000 fa63 	bl	800336c <Prismatic_position_control>
 8002ea6:	eef0 7a40 	vmov.f32	s15, s0
 8002eaa:	4b33      	ldr	r3, [pc, #204]	@ (8002f78 <main+0x980>)
 8002eac:	edc3 7a00 	vstr	s15, [r3]
				}
//				V_pris_posi_PID = Prismatic_position_control(delta_posi_pris);

				// Position Control Revolute
				position_rev = Encoder_GetPosition(&encoder2) / (100.0 / 30.0);
 8002eb0:	482a      	ldr	r0, [pc, #168]	@ (8002f5c <main+0x964>)
 8002eb2:	f7fe f8cd 	bl	8001050 <Encoder_GetPosition>
 8002eb6:	ee10 3a10 	vmov	r3, s0
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7fd fb10 	bl	80004e0 <__aeabi_f2d>
 8002ec0:	a31f      	add	r3, pc, #124	@ (adr r3, 8002f40 <main+0x948>)
 8002ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec6:	f7fd fc8d 	bl	80007e4 <__aeabi_ddiv>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	460b      	mov	r3, r1
 8002ece:	4610      	mov	r0, r2
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	f7fd fdf7 	bl	8000ac4 <__aeabi_d2f>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	4a34      	ldr	r2, [pc, #208]	@ (8002fac <main+0x9b4>)
 8002eda:	6013      	str	r3, [r2, #0]
//				setposition_rev = GetTrajectoryPosition(&Revolute[current_segment], t_global) + Rev_backlash.backlash_offset;
				setposition_rev = pos_rev;
 8002edc:	4b34      	ldr	r3, [pc, #208]	@ (8002fb0 <main+0x9b8>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a34      	ldr	r2, [pc, #208]	@ (8002fb4 <main+0x9bc>)
 8002ee2:	6013      	str	r3, [r2, #0]
//				Backlash_Update(&Rev_backlash, pos_rev, p2, v2);
				delta_posi_rev = setposition_rev - position_rev;
 8002ee4:	4b33      	ldr	r3, [pc, #204]	@ (8002fb4 <main+0x9bc>)
 8002ee6:	ed93 7a00 	vldr	s14, [r3]
 8002eea:	4b30      	ldr	r3, [pc, #192]	@ (8002fac <main+0x9b4>)
 8002eec:	edd3 7a00 	vldr	s15, [r3]
 8002ef0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ef4:	4b30      	ldr	r3, [pc, #192]	@ (8002fb8 <main+0x9c0>)
 8002ef6:	edc3 7a00 	vstr	s15, [r3]
				if (delta_posi_rev <= 0.1 && delta_posi_rev >= -0.1) {
 8002efa:	4b2f      	ldr	r3, [pc, #188]	@ (8002fb8 <main+0x9c0>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fd faee 	bl	80004e0 <__aeabi_f2d>
 8002f04:	a310      	add	r3, pc, #64	@ (adr r3, 8002f48 <main+0x950>)
 8002f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f0a:	f7fd fdbd 	bl	8000a88 <__aeabi_dcmple>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d053      	beq.n	8002fbc <main+0x9c4>
 8002f14:	4b28      	ldr	r3, [pc, #160]	@ (8002fb8 <main+0x9c0>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7fd fae1 	bl	80004e0 <__aeabi_f2d>
 8002f1e:	a30c      	add	r3, pc, #48	@ (adr r3, 8002f50 <main+0x958>)
 8002f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f24:	f7fd fdba 	bl	8000a9c <__aeabi_dcmpge>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d046      	beq.n	8002fbc <main+0x9c4>
					V_rev_posi_PID = 0;
 8002f2e:	4b18      	ldr	r3, [pc, #96]	@ (8002f90 <main+0x998>)
 8002f30:	f04f 0200 	mov.w	r2, #0
 8002f34:	601a      	str	r2, [r3, #0]
					V_rev_velo_PID = 0;
 8002f36:	4b0a      	ldr	r3, [pc, #40]	@ (8002f60 <main+0x968>)
 8002f38:	f04f 0200 	mov.w	r2, #0
 8002f3c:	601a      	str	r2, [r3, #0]
 8002f3e:	e049      	b.n	8002fd4 <main+0x9dc>
 8002f40:	aaaaaaab 	.word	0xaaaaaaab
 8002f44:	400aaaaa 	.word	0x400aaaaa
 8002f48:	9999999a 	.word	0x9999999a
 8002f4c:	3fb99999 	.word	0x3fb99999
 8002f50:	9999999a 	.word	0x9999999a
 8002f54:	bfb99999 	.word	0xbfb99999
 8002f58:	20001298 	.word	0x20001298
 8002f5c:	20000390 	.word	0x20000390
 8002f60:	20000bb0 	.word	0x20000bb0
 8002f64:	20000ef0 	.word	0x20000ef0
 8002f68:	20000ac4 	.word	0x20000ac4
 8002f6c:	2000035c 	.word	0x2000035c
 8002f70:	20000b2c 	.word	0x20000b2c
 8002f74:	200003d0 	.word	0x200003d0
 8002f78:	20000af4 	.word	0x20000af4
 8002f7c:	20000b30 	.word	0x20000b30
 8002f80:	20000b44 	.word	0x20000b44
 8002f84:	20000b34 	.word	0x20000b34
 8002f88:	20000ba8 	.word	0x20000ba8
 8002f8c:	200003d8 	.word	0x200003d8
 8002f90:	20000b74 	.word	0x20000b74
 8002f94:	20000bac 	.word	0x20000bac
 8002f98:	20000bc0 	.word	0x20000bc0
 8002f9c:	20000aec 	.word	0x20000aec
 8002fa0:	200003cc 	.word	0x200003cc
 8002fa4:	20000af0 	.word	0x20000af0
 8002fa8:	20000b04 	.word	0x20000b04
 8002fac:	20000b6c 	.word	0x20000b6c
 8002fb0:	200003d4 	.word	0x200003d4
 8002fb4:	20000b70 	.word	0x20000b70
 8002fb8:	20000b80 	.word	0x20000b80
				} else {
					V_rev_posi_PID = Revolute_position_control(delta_posi_rev);
 8002fbc:	4b83      	ldr	r3, [pc, #524]	@ (80031cc <main+0xbd4>)
 8002fbe:	edd3 7a00 	vldr	s15, [r3]
 8002fc2:	eeb0 0a67 	vmov.f32	s0, s15
 8002fc6:	f000 faf7 	bl	80035b8 <Revolute_position_control>
 8002fca:	eef0 7a40 	vmov.f32	s15, s0
 8002fce:	4b80      	ldr	r3, [pc, #512]	@ (80031d0 <main+0xbd8>)
 8002fd0:	edc3 7a00 	vstr	s15, [r3]
				}

				count_Tim2 = 0;
 8002fd4:	4b7f      	ldr	r3, [pc, #508]	@ (80031d4 <main+0xbdc>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	601a      	str	r2, [r3, #0]
			}
		}

		t_global = HAL_GetTick() / 1000.0f;
 8002fda:	f001 fd07 	bl	80049ec <HAL_GetTick>
 8002fde:	ee07 0a90 	vmov	s15, r0
 8002fe2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002fe6:	eddf 6a7c 	vldr	s13, [pc, #496]	@ 80031d8 <main+0xbe0>
 8002fea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002fee:	4b7b      	ldr	r3, [pc, #492]	@ (80031dc <main+0xbe4>)
 8002ff0:	edc3 7a00 	vstr	s15, [r3]
		updateTrajectoryIfNeeded(t_global);
 8002ff4:	4b79      	ldr	r3, [pc, #484]	@ (80031dc <main+0xbe4>)
 8002ff6:	edd3 7a00 	vldr	s15, [r3]
 8002ffa:	eeb0 0a67 	vmov.f32	s0, s15
 8002ffe:	f000 fcf9 	bl	80039f4 <updateTrajectoryIfNeeded>

		pos_pris = GetTrajectoryPosition(&currentPrismatic, t_global);
 8003002:	4b76      	ldr	r3, [pc, #472]	@ (80031dc <main+0xbe4>)
 8003004:	edd3 7a00 	vldr	s15, [r3]
 8003008:	eeb0 0a67 	vmov.f32	s0, s15
 800300c:	4874      	ldr	r0, [pc, #464]	@ (80031e0 <main+0xbe8>)
 800300e:	f7fe ff55 	bl	8001ebc <GetTrajectoryPosition>
 8003012:	eef0 7a40 	vmov.f32	s15, s0
 8003016:	4b73      	ldr	r3, [pc, #460]	@ (80031e4 <main+0xbec>)
 8003018:	edc3 7a00 	vstr	s15, [r3]
		vel_pris = GetTrajectoryVelocity(&currentPrismatic, t_global);
 800301c:	4b6f      	ldr	r3, [pc, #444]	@ (80031dc <main+0xbe4>)
 800301e:	edd3 7a00 	vldr	s15, [r3]
 8003022:	eeb0 0a67 	vmov.f32	s0, s15
 8003026:	486e      	ldr	r0, [pc, #440]	@ (80031e0 <main+0xbe8>)
 8003028:	f7ff f81e 	bl	8002068 <GetTrajectoryVelocity>
 800302c:	eef0 7a40 	vmov.f32	s15, s0
 8003030:	4b6d      	ldr	r3, [pc, #436]	@ (80031e8 <main+0xbf0>)
 8003032:	edc3 7a00 	vstr	s15, [r3]
		pos_rev = GetTrajectoryPosition(&currentRevolute, t_global);
 8003036:	4b69      	ldr	r3, [pc, #420]	@ (80031dc <main+0xbe4>)
 8003038:	edd3 7a00 	vldr	s15, [r3]
 800303c:	eeb0 0a67 	vmov.f32	s0, s15
 8003040:	486a      	ldr	r0, [pc, #424]	@ (80031ec <main+0xbf4>)
 8003042:	f7fe ff3b 	bl	8001ebc <GetTrajectoryPosition>
 8003046:	eef0 7a40 	vmov.f32	s15, s0
 800304a:	4b69      	ldr	r3, [pc, #420]	@ (80031f0 <main+0xbf8>)
 800304c:	edc3 7a00 	vstr	s15, [r3]
		vel_rev = GetTrajectoryVelocity(&currentRevolute, t_global);
 8003050:	4b62      	ldr	r3, [pc, #392]	@ (80031dc <main+0xbe4>)
 8003052:	edd3 7a00 	vldr	s15, [r3]
 8003056:	eeb0 0a67 	vmov.f32	s0, s15
 800305a:	4864      	ldr	r0, [pc, #400]	@ (80031ec <main+0xbf4>)
 800305c:	f7ff f804 	bl	8002068 <GetTrajectoryVelocity>
 8003060:	eef0 7a40 	vmov.f32	s15, s0
 8003064:	4b63      	ldr	r3, [pc, #396]	@ (80031f4 <main+0xbfc>)
 8003066:	edc3 7a00 	vstr	s15, [r3]

		if (current_index >= 46 - 1) {
 800306a:	4b63      	ldr	r3, [pc, #396]	@ (80031f8 <main+0xc00>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2b2c      	cmp	r3, #44	@ 0x2c
 8003070:	dd0f      	ble.n	8003092 <main+0xa9a>
		    pos_pris = currentPrismatic.end_pos;
 8003072:	4b5b      	ldr	r3, [pc, #364]	@ (80031e0 <main+0xbe8>)
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	4a5b      	ldr	r2, [pc, #364]	@ (80031e4 <main+0xbec>)
 8003078:	6013      	str	r3, [r2, #0]
		    vel_pris = 0;
 800307a:	4b5b      	ldr	r3, [pc, #364]	@ (80031e8 <main+0xbf0>)
 800307c:	f04f 0200 	mov.w	r2, #0
 8003080:	601a      	str	r2, [r3, #0]
		    pos_rev = currentRevolute.end_pos;
 8003082:	4b5a      	ldr	r3, [pc, #360]	@ (80031ec <main+0xbf4>)
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	4a5a      	ldr	r2, [pc, #360]	@ (80031f0 <main+0xbf8>)
 8003088:	6013      	str	r3, [r2, #0]
		    vel_rev = 0;
 800308a:	4b5a      	ldr	r3, [pc, #360]	@ (80031f4 <main+0xbfc>)
 800308c:	f04f 0200 	mov.w	r2, #0
 8003090:	601a      	str	r2, [r3, #0]
		}

		if (V_pris_velo_PID < 0) {
 8003092:	4b5a      	ldr	r3, [pc, #360]	@ (80031fc <main+0xc04>)
 8003094:	edd3 7a00 	vldr	s15, [r3]
 8003098:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800309c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030a0:	d50b      	bpl.n	80030ba <main+0xac2>
			DIR_24V = 0;
 80030a2:	4b57      	ldr	r3, [pc, #348]	@ (8003200 <main+0xc08>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]
			V_absoulte_pris = fabsf(V_pris_velo_PID);
 80030a8:	4b54      	ldr	r3, [pc, #336]	@ (80031fc <main+0xc04>)
 80030aa:	edd3 7a00 	vldr	s15, [r3]
 80030ae:	eef0 7ae7 	vabs.f32	s15, s15
 80030b2:	4b54      	ldr	r3, [pc, #336]	@ (8003204 <main+0xc0c>)
 80030b4:	edc3 7a00 	vstr	s15, [r3]
 80030b8:	e00e      	b.n	80030d8 <main+0xae0>
		} else if (V_pris_velo_PID > 0) {
 80030ba:	4b50      	ldr	r3, [pc, #320]	@ (80031fc <main+0xc04>)
 80030bc:	edd3 7a00 	vldr	s15, [r3]
 80030c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80030c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030c8:	dd06      	ble.n	80030d8 <main+0xae0>
			DIR_24V = 1;
 80030ca:	4b4d      	ldr	r3, [pc, #308]	@ (8003200 <main+0xc08>)
 80030cc:	2201      	movs	r2, #1
 80030ce:	601a      	str	r2, [r3, #0]
			V_absoulte_pris = V_pris_velo_PID;
 80030d0:	4b4a      	ldr	r3, [pc, #296]	@ (80031fc <main+0xc04>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a4b      	ldr	r2, [pc, #300]	@ (8003204 <main+0xc0c>)
 80030d6:	6013      	str	r3, [r2, #0]
		}
		pwm_pris_velo = voltage_to_pwm(V_absoulte_pris);
 80030d8:	4b4a      	ldr	r3, [pc, #296]	@ (8003204 <main+0xc0c>)
 80030da:	edd3 7a00 	vldr	s15, [r3]
 80030de:	eeb0 0a67 	vmov.f32	s0, s15
 80030e2:	f000 fb7f 	bl	80037e4 <voltage_to_pwm>
 80030e6:	eef0 7a40 	vmov.f32	s15, s0
 80030ea:	4b47      	ldr	r3, [pc, #284]	@ (8003208 <main+0xc10>)
 80030ec:	edc3 7a00 	vstr	s15, [r3]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, DIR_24V);
 80030f0:	4b43      	ldr	r3, [pc, #268]	@ (8003200 <main+0xc08>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	461a      	mov	r2, r3
 80030f8:	2102      	movs	r1, #2
 80030fa:	4844      	ldr	r0, [pc, #272]	@ (800320c <main+0xc14>)
 80030fc:	f003 fd10 	bl	8006b20 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim20,TIM_CHANNEL_1,pwm_pris_velo);
 8003100:	4b41      	ldr	r3, [pc, #260]	@ (8003208 <main+0xc10>)
 8003102:	edd3 7a00 	vldr	s15, [r3]
 8003106:	4b42      	ldr	r3, [pc, #264]	@ (8003210 <main+0xc18>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800310e:	ee17 2a90 	vmov	r2, s15
 8003112:	635a      	str	r2, [r3, #52]	@ 0x34

		if (V_rev_velo_PID < 0) {
 8003114:	4b3f      	ldr	r3, [pc, #252]	@ (8003214 <main+0xc1c>)
 8003116:	edd3 7a00 	vldr	s15, [r3]
 800311a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800311e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003122:	d50b      	bpl.n	800313c <main+0xb44>
			DIR_18V = 0;
 8003124:	4b3c      	ldr	r3, [pc, #240]	@ (8003218 <main+0xc20>)
 8003126:	2200      	movs	r2, #0
 8003128:	601a      	str	r2, [r3, #0]
			V_absolute_rev = fabsf(V_rev_velo_PID);
 800312a:	4b3a      	ldr	r3, [pc, #232]	@ (8003214 <main+0xc1c>)
 800312c:	edd3 7a00 	vldr	s15, [r3]
 8003130:	eef0 7ae7 	vabs.f32	s15, s15
 8003134:	4b39      	ldr	r3, [pc, #228]	@ (800321c <main+0xc24>)
 8003136:	edc3 7a00 	vstr	s15, [r3]
 800313a:	e00e      	b.n	800315a <main+0xb62>
		} else if (V_rev_velo_PID > 0) {
 800313c:	4b35      	ldr	r3, [pc, #212]	@ (8003214 <main+0xc1c>)
 800313e:	edd3 7a00 	vldr	s15, [r3]
 8003142:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800314a:	dd06      	ble.n	800315a <main+0xb62>
			DIR_18V = 1;
 800314c:	4b32      	ldr	r3, [pc, #200]	@ (8003218 <main+0xc20>)
 800314e:	2201      	movs	r2, #1
 8003150:	601a      	str	r2, [r3, #0]
			V_absolute_rev = V_rev_velo_PID;
 8003152:	4b30      	ldr	r3, [pc, #192]	@ (8003214 <main+0xc1c>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a31      	ldr	r2, [pc, #196]	@ (800321c <main+0xc24>)
 8003158:	6013      	str	r3, [r2, #0]
		}
		V_plant = V_absolute_rev + voltage_dis_rev;
 800315a:	4b30      	ldr	r3, [pc, #192]	@ (800321c <main+0xc24>)
 800315c:	ed93 7a00 	vldr	s14, [r3]
 8003160:	4b2f      	ldr	r3, [pc, #188]	@ (8003220 <main+0xc28>)
 8003162:	edd3 7a00 	vldr	s15, [r3]
 8003166:	ee77 7a27 	vadd.f32	s15, s14, s15
 800316a:	4b2e      	ldr	r3, [pc, #184]	@ (8003224 <main+0xc2c>)
 800316c:	edc3 7a00 	vstr	s15, [r3]
		if (V_plant > 18) {
 8003170:	4b2c      	ldr	r3, [pc, #176]	@ (8003224 <main+0xc2c>)
 8003172:	edd3 7a00 	vldr	s15, [r3]
 8003176:	eeb3 7a02 	vmov.f32	s14, #50	@ 0x41900000  18.0
 800317a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800317e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003182:	dd02      	ble.n	800318a <main+0xb92>
			V_plant = 18;
 8003184:	4b27      	ldr	r3, [pc, #156]	@ (8003224 <main+0xc2c>)
 8003186:	4a28      	ldr	r2, [pc, #160]	@ (8003228 <main+0xc30>)
 8003188:	601a      	str	r2, [r3, #0]
		}
		pwm_rev_velo = (V_plant / 18) * 65535;
 800318a:	4b26      	ldr	r3, [pc, #152]	@ (8003224 <main+0xc2c>)
 800318c:	ed93 7a00 	vldr	s14, [r3]
 8003190:	eef3 6a02 	vmov.f32	s13, #50	@ 0x41900000  18.0
 8003194:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003198:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 800322c <main+0xc34>
 800319c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031a0:	4b23      	ldr	r3, [pc, #140]	@ (8003230 <main+0xc38>)
 80031a2:	edc3 7a00 	vstr	s15, [r3]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, DIR_18V);
 80031a6:	4b1c      	ldr	r3, [pc, #112]	@ (8003218 <main+0xc20>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	461a      	mov	r2, r3
 80031ae:	2140      	movs	r1, #64	@ 0x40
 80031b0:	4820      	ldr	r0, [pc, #128]	@ (8003234 <main+0xc3c>)
 80031b2:	f003 fcb5 	bl	8006b20 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim20,TIM_CHANNEL_3,pwm_rev_velo);
 80031b6:	4b1e      	ldr	r3, [pc, #120]	@ (8003230 <main+0xc38>)
 80031b8:	edd3 7a00 	vldr	s15, [r3]
 80031bc:	4b14      	ldr	r3, [pc, #80]	@ (8003210 <main+0xc18>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031c4:	ee17 2a90 	vmov	r2, s15
 80031c8:	63da      	str	r2, [r3, #60]	@ 0x3c
	while (1) {
 80031ca:	e471      	b.n	8002ab0 <main+0x4b8>
 80031cc:	20000b80 	.word	0x20000b80
 80031d0:	20000b74 	.word	0x20000b74
 80031d4:	20000ac4 	.word	0x20000ac4
 80031d8:	447a0000 	.word	0x447a0000
 80031dc:	200003dc 	.word	0x200003dc
 80031e0:	200003e0 	.word	0x200003e0
 80031e4:	200003cc 	.word	0x200003cc
 80031e8:	200003d0 	.word	0x200003d0
 80031ec:	20000404 	.word	0x20000404
 80031f0:	200003d4 	.word	0x200003d4
 80031f4:	200003d8 	.word	0x200003d8
 80031f8:	20000428 	.word	0x20000428
 80031fc:	20000b34 	.word	0x20000b34
 8003200:	20000abc 	.word	0x20000abc
 8003204:	20000af8 	.word	0x20000af8
 8003208:	20000b38 	.word	0x20000b38
 800320c:	48000400 	.word	0x48000400
 8003210:	200017e0 	.word	0x200017e0
 8003214:	20000bb0 	.word	0x20000bb0
 8003218:	20000ab8 	.word	0x20000ab8
 800321c:	20000bc4 	.word	0x20000bc4
 8003220:	20000ac0 	.word	0x20000ac0
 8003224:	20000bc8 	.word	0x20000bc8
 8003228:	41900000 	.word	0x41900000
 800322c:	477fff00 	.word	0x477fff00
 8003230:	20000bb4 	.word	0x20000bb4
 8003234:	48000800 	.word	0x48000800

08003238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b094      	sub	sp, #80	@ 0x50
 800323c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800323e:	f107 0318 	add.w	r3, r7, #24
 8003242:	2238      	movs	r2, #56	@ 0x38
 8003244:	2100      	movs	r1, #0
 8003246:	4618      	mov	r0, r3
 8003248:	f00a f89c 	bl	800d384 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800324c:	1d3b      	adds	r3, r7, #4
 800324e:	2200      	movs	r2, #0
 8003250:	601a      	str	r2, [r3, #0]
 8003252:	605a      	str	r2, [r3, #4]
 8003254:	609a      	str	r2, [r3, #8]
 8003256:	60da      	str	r2, [r3, #12]
 8003258:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800325a:	2000      	movs	r0, #0
 800325c:	f003 fc90 	bl	8006b80 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003260:	2302      	movs	r3, #2
 8003262:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003264:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003268:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800326a:	2340      	movs	r3, #64	@ 0x40
 800326c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800326e:	2302      	movs	r3, #2
 8003270:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003272:	2302      	movs	r3, #2
 8003274:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8003276:	2304      	movs	r3, #4
 8003278:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800327a:	2355      	movs	r3, #85	@ 0x55
 800327c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800327e:	2302      	movs	r3, #2
 8003280:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003282:	2302      	movs	r3, #2
 8003284:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003286:	2302      	movs	r3, #2
 8003288:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800328a:	f107 0318 	add.w	r3, r7, #24
 800328e:	4618      	mov	r0, r3
 8003290:	f003 fd2a 	bl	8006ce8 <HAL_RCC_OscConfig>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800329a:	f000 fc29 	bl	8003af0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800329e:	230f      	movs	r3, #15
 80032a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80032a2:	2303      	movs	r3, #3
 80032a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80032a6:	2300      	movs	r3, #0
 80032a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80032aa:	2300      	movs	r3, #0
 80032ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80032ae:	2300      	movs	r3, #0
 80032b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80032b2:	1d3b      	adds	r3, r7, #4
 80032b4:	2104      	movs	r1, #4
 80032b6:	4618      	mov	r0, r3
 80032b8:	f004 f828 	bl	800730c <HAL_RCC_ClockConfig>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80032c2:	f000 fc15 	bl	8003af0 <Error_Handler>
  }
}
 80032c6:	bf00      	nop
 80032c8:	3750      	adds	r7, #80	@ 0x50
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
	...

080032d0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	4603      	mov	r3, r0
 80032d8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_9) {
 80032da:	88fb      	ldrh	r3, [r7, #6]
 80032dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032e0:	d103      	bne.n	80032ea <HAL_GPIO_EXTI_Callback+0x1a>
		State = 9;
 80032e2:	4b1c      	ldr	r3, [pc, #112]	@ (8003354 <HAL_GPIO_EXTI_Callback+0x84>)
 80032e4:	2209      	movs	r2, #9
 80032e6:	601a      	str	r2, [r3, #0]
	} else if (GPIO_Pin == GPIO_PIN_14) {
		State = 14;
	} else if (GPIO_Pin == GPIO_PIN_15) {
		State = 15;
	}
}
 80032e8:	e02e      	b.n	8003348 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_10) {
 80032ea:	88fb      	ldrh	r3, [r7, #6]
 80032ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032f0:	d103      	bne.n	80032fa <HAL_GPIO_EXTI_Callback+0x2a>
		State = 10;
 80032f2:	4b18      	ldr	r3, [pc, #96]	@ (8003354 <HAL_GPIO_EXTI_Callback+0x84>)
 80032f4:	220a      	movs	r2, #10
 80032f6:	601a      	str	r2, [r3, #0]
}
 80032f8:	e026      	b.n	8003348 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_11) {
 80032fa:	88fb      	ldrh	r3, [r7, #6]
 80032fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003300:	d103      	bne.n	800330a <HAL_GPIO_EXTI_Callback+0x3a>
		State = 11;
 8003302:	4b14      	ldr	r3, [pc, #80]	@ (8003354 <HAL_GPIO_EXTI_Callback+0x84>)
 8003304:	220b      	movs	r2, #11
 8003306:	601a      	str	r2, [r3, #0]
}
 8003308:	e01e      	b.n	8003348 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_12) {
 800330a:	88fb      	ldrh	r3, [r7, #6]
 800330c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003310:	d103      	bne.n	800331a <HAL_GPIO_EXTI_Callback+0x4a>
		State = 12;
 8003312:	4b10      	ldr	r3, [pc, #64]	@ (8003354 <HAL_GPIO_EXTI_Callback+0x84>)
 8003314:	220c      	movs	r2, #12
 8003316:	601a      	str	r2, [r3, #0]
}
 8003318:	e016      	b.n	8003348 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_13) {
 800331a:	88fb      	ldrh	r3, [r7, #6]
 800331c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003320:	d103      	bne.n	800332a <HAL_GPIO_EXTI_Callback+0x5a>
		State = 13;
 8003322:	4b0c      	ldr	r3, [pc, #48]	@ (8003354 <HAL_GPIO_EXTI_Callback+0x84>)
 8003324:	220d      	movs	r2, #13
 8003326:	601a      	str	r2, [r3, #0]
}
 8003328:	e00e      	b.n	8003348 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_14) {
 800332a:	88fb      	ldrh	r3, [r7, #6]
 800332c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003330:	d103      	bne.n	800333a <HAL_GPIO_EXTI_Callback+0x6a>
		State = 14;
 8003332:	4b08      	ldr	r3, [pc, #32]	@ (8003354 <HAL_GPIO_EXTI_Callback+0x84>)
 8003334:	220e      	movs	r2, #14
 8003336:	601a      	str	r2, [r3, #0]
}
 8003338:	e006      	b.n	8003348 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_15) {
 800333a:	88fb      	ldrh	r3, [r7, #6]
 800333c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003340:	d102      	bne.n	8003348 <HAL_GPIO_EXTI_Callback+0x78>
		State = 15;
 8003342:	4b04      	ldr	r3, [pc, #16]	@ (8003354 <HAL_GPIO_EXTI_Callback+0x84>)
 8003344:	220f      	movs	r2, #15
 8003346:	601a      	str	r2, [r3, #0]
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr
 8003354:	20000448 	.word	0x20000448

08003358 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
//	if (htim == &htim2) {
//		PS2_ReadData();
//	}
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <Prismatic_position_control>:

float Prismatic_position_control(float delta_posi) {
 800336c:	b480      	push	{r7}
 800336e:	b087      	sub	sp, #28
 8003370:	af00      	add	r7, sp, #0
 8003372:	ed87 0a01 	vstr	s0, [r7, #4]
	int anti_windup;
	error_posi_pris[0] = delta_posi;
 8003376:	4a36      	ldr	r2, [pc, #216]	@ (8003450 <Prismatic_position_control+0xe4>)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6013      	str	r3, [r2, #0]
//	Pris_posi_PID.Kp = 1;
//	Pris_posi_PID.Kd = 1;

	if (error_posi_pris[0] < 0 && error_posi_pris[1] > 0) {
 800337c:	4b34      	ldr	r3, [pc, #208]	@ (8003450 <Prismatic_position_control+0xe4>)
 800337e:	edd3 7a00 	vldr	s15, [r3]
 8003382:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800338a:	d50a      	bpl.n	80033a2 <Prismatic_position_control+0x36>
 800338c:	4b30      	ldr	r3, [pc, #192]	@ (8003450 <Prismatic_position_control+0xe4>)
 800338e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003392:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800339a:	dd02      	ble.n	80033a2 <Prismatic_position_control+0x36>
		anti_windup = 0;
 800339c:	2300      	movs	r3, #0
 800339e:	617b      	str	r3, [r7, #20]
 80033a0:	e014      	b.n	80033cc <Prismatic_position_control+0x60>
	} else if (error_posi_pris[0] > 0 && error_posi_pris[1] < 0) {
 80033a2:	4b2b      	ldr	r3, [pc, #172]	@ (8003450 <Prismatic_position_control+0xe4>)
 80033a4:	edd3 7a00 	vldr	s15, [r3]
 80033a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033b0:	dd0a      	ble.n	80033c8 <Prismatic_position_control+0x5c>
 80033b2:	4b27      	ldr	r3, [pc, #156]	@ (8003450 <Prismatic_position_control+0xe4>)
 80033b4:	edd3 7a01 	vldr	s15, [r3, #4]
 80033b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033c0:	d502      	bpl.n	80033c8 <Prismatic_position_control+0x5c>
		anti_windup = 0;
 80033c2:	2300      	movs	r3, #0
 80033c4:	617b      	str	r3, [r7, #20]
 80033c6:	e001      	b.n	80033cc <Prismatic_position_control+0x60>
	} else {
		anti_windup = 1;
 80033c8:	2301      	movs	r3, #1
 80033ca:	617b      	str	r3, [r7, #20]
 80033cc:	4b21      	ldr	r3, [pc, #132]	@ (8003454 <Prismatic_position_control+0xe8>)
 80033ce:	613b      	str	r3, [r7, #16]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	60fb      	str	r3, [r7, #12]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	ed93 7a00 	vldr	s14, [r3]
 80033da:	edd7 7a03 	vldr	s15, [r7, #12]
 80033de:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	edd3 6a01 	vldr	s13, [r3, #4]
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	edd3 7a03 	vldr	s15, [r3, #12]
 80033ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80033f2:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	edd3 6a02 	vldr	s13, [r3, #8]
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	edd3 7a04 	vldr	s15, [r3, #16]
 8003402:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003406:	ee37 7a27 	vadd.f32	s14, s14, s15
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8003410:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003414:	edc7 7a02 	vstr	s15, [r7, #8]

    /* Update state */
    S->state[1] = S->state[0];
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	68da      	ldr	r2, [r3, #12]
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	68ba      	ldr	r2, [r7, #8]
 800342a:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 800342c:	68bb      	ldr	r3, [r7, #8]
//		Pris_posi_PID.Ki = 0;
//	} else {
//		Pris_posi_PID.Ki = 1;
//	}

	V_pris_posi_PID = arm_pid_f32(&Pris_posi_PID, delta_posi);
 800342e:	4a0a      	ldr	r2, [pc, #40]	@ (8003458 <Prismatic_position_control+0xec>)
 8003430:	6013      	str	r3, [r2, #0]

//	if (V_pris_posi_PID > 24) {
//		V_pris_posi_PID = 24;
//	}

	error_posi_pris[1] = error_posi_pris[0];
 8003432:	4b07      	ldr	r3, [pc, #28]	@ (8003450 <Prismatic_position_control+0xe4>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a06      	ldr	r2, [pc, #24]	@ (8003450 <Prismatic_position_control+0xe4>)
 8003438:	6053      	str	r3, [r2, #4]
	return V_pris_posi_PID;
 800343a:	4b07      	ldr	r3, [pc, #28]	@ (8003458 <Prismatic_position_control+0xec>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	ee07 3a90 	vmov	s15, r3
}
 8003442:	eeb0 0a67 	vmov.f32	s0, s15
 8003446:	371c      	adds	r7, #28
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr
 8003450:	20000afc 	.word	0x20000afc
 8003454:	20000ac8 	.word	0x20000ac8
 8003458:	20000af4 	.word	0x20000af4

0800345c <Prismatic_velocity_control>:

float Prismatic_velocity_control(float delta_velo) {
 800345c:	b480      	push	{r7}
 800345e:	b087      	sub	sp, #28
 8003460:	af00      	add	r7, sp, #0
 8003462:	ed87 0a01 	vstr	s0, [r7, #4]
	int anti_windup;
	error_velo_pris[0] =  delta_velo;
 8003466:	4a4e      	ldr	r2, [pc, #312]	@ (80035a0 <Prismatic_velocity_control+0x144>)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6013      	str	r3, [r2, #0]
//	Pris_velo_PID.Kp = 0.01;

	if (error_velo_pris[0] < 0 && error_velo_pris[1] > 0) {
 800346c:	4b4c      	ldr	r3, [pc, #304]	@ (80035a0 <Prismatic_velocity_control+0x144>)
 800346e:	edd3 7a00 	vldr	s15, [r3]
 8003472:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800347a:	d50a      	bpl.n	8003492 <Prismatic_velocity_control+0x36>
 800347c:	4b48      	ldr	r3, [pc, #288]	@ (80035a0 <Prismatic_velocity_control+0x144>)
 800347e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003482:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800348a:	dd02      	ble.n	8003492 <Prismatic_velocity_control+0x36>
		anti_windup = 0;
 800348c:	2300      	movs	r3, #0
 800348e:	617b      	str	r3, [r7, #20]
 8003490:	e014      	b.n	80034bc <Prismatic_velocity_control+0x60>
	} else if (error_velo_pris[0] > 0 && error_velo_pris[1] < 0) {
 8003492:	4b43      	ldr	r3, [pc, #268]	@ (80035a0 <Prismatic_velocity_control+0x144>)
 8003494:	edd3 7a00 	vldr	s15, [r3]
 8003498:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800349c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034a0:	dd0a      	ble.n	80034b8 <Prismatic_velocity_control+0x5c>
 80034a2:	4b3f      	ldr	r3, [pc, #252]	@ (80035a0 <Prismatic_velocity_control+0x144>)
 80034a4:	edd3 7a01 	vldr	s15, [r3, #4]
 80034a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034b0:	d502      	bpl.n	80034b8 <Prismatic_velocity_control+0x5c>
		anti_windup = 0;
 80034b2:	2300      	movs	r3, #0
 80034b4:	617b      	str	r3, [r7, #20]
 80034b6:	e001      	b.n	80034bc <Prismatic_velocity_control+0x60>
	} else {
		anti_windup = 1;
 80034b8:	2301      	movs	r3, #1
 80034ba:	617b      	str	r3, [r7, #20]
	}

	if (V_pris_velo_PID >= 24 && anti_windup == 0) {
 80034bc:	4b39      	ldr	r3, [pc, #228]	@ (80035a4 <Prismatic_velocity_control+0x148>)
 80034be:	edd3 7a00 	vldr	s15, [r3]
 80034c2:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 80034c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034ce:	db07      	blt.n	80034e0 <Prismatic_velocity_control+0x84>
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d104      	bne.n	80034e0 <Prismatic_velocity_control+0x84>
		Pris_velo_PID.Ki = 0;
 80034d6:	4b34      	ldr	r3, [pc, #208]	@ (80035a8 <Prismatic_velocity_control+0x14c>)
 80034d8:	f04f 0200 	mov.w	r2, #0
 80034dc:	61da      	str	r2, [r3, #28]
 80034de:	e002      	b.n	80034e6 <Prismatic_velocity_control+0x8a>
	} else {
		Pris_velo_PID.Ki = 0.001;
 80034e0:	4b31      	ldr	r3, [pc, #196]	@ (80035a8 <Prismatic_velocity_control+0x14c>)
 80034e2:	4a32      	ldr	r2, [pc, #200]	@ (80035ac <Prismatic_velocity_control+0x150>)
 80034e4:	61da      	str	r2, [r3, #28]
 80034e6:	4b30      	ldr	r3, [pc, #192]	@ (80035a8 <Prismatic_velocity_control+0x14c>)
 80034e8:	613b      	str	r3, [r7, #16]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	60fb      	str	r3, [r7, #12]
    out = (S->A0 * in) +
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	ed93 7a00 	vldr	s14, [r3]
 80034f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80034f8:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	edd3 6a01 	vldr	s13, [r3, #4]
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	edd3 7a03 	vldr	s15, [r3, #12]
 8003508:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 800350c:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	edd3 6a02 	vldr	s13, [r3, #8]
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	edd3 7a04 	vldr	s15, [r3, #16]
 800351c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003520:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 800352a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800352e:	edc7 7a02 	vstr	s15, [r7, #8]
    S->state[1] = S->state[0];
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	68da      	ldr	r2, [r3, #12]
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	68ba      	ldr	r2, [r7, #8]
 8003544:	615a      	str	r2, [r3, #20]
    return (out);
 8003546:	68bb      	ldr	r3, [r7, #8]
	}

	V_pris_velo_PID = arm_pid_f32(&Pris_velo_PID, delta_velo);
 8003548:	4a16      	ldr	r2, [pc, #88]	@ (80035a4 <Prismatic_velocity_control+0x148>)
 800354a:	6013      	str	r3, [r2, #0]

	if (V_pris_velo_PID > 24) {
 800354c:	4b15      	ldr	r3, [pc, #84]	@ (80035a4 <Prismatic_velocity_control+0x148>)
 800354e:	edd3 7a00 	vldr	s15, [r3]
 8003552:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 8003556:	eef4 7ac7 	vcmpe.f32	s15, s14
 800355a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800355e:	dd03      	ble.n	8003568 <Prismatic_velocity_control+0x10c>
		V_pris_velo_PID = 24;
 8003560:	4b10      	ldr	r3, [pc, #64]	@ (80035a4 <Prismatic_velocity_control+0x148>)
 8003562:	4a13      	ldr	r2, [pc, #76]	@ (80035b0 <Prismatic_velocity_control+0x154>)
 8003564:	601a      	str	r2, [r3, #0]
 8003566:	e00c      	b.n	8003582 <Prismatic_velocity_control+0x126>
	} else if (V_pris_velo_PID < -24) {
 8003568:	4b0e      	ldr	r3, [pc, #56]	@ (80035a4 <Prismatic_velocity_control+0x148>)
 800356a:	edd3 7a00 	vldr	s15, [r3]
 800356e:	eebb 7a08 	vmov.f32	s14, #184	@ 0xc1c00000 -24.0
 8003572:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800357a:	d502      	bpl.n	8003582 <Prismatic_velocity_control+0x126>
		V_pris_velo_PID = -24;
 800357c:	4b09      	ldr	r3, [pc, #36]	@ (80035a4 <Prismatic_velocity_control+0x148>)
 800357e:	4a0d      	ldr	r2, [pc, #52]	@ (80035b4 <Prismatic_velocity_control+0x158>)
 8003580:	601a      	str	r2, [r3, #0]
	}

	error_velo_pris[1] = error_velo_pris[0];
 8003582:	4b07      	ldr	r3, [pc, #28]	@ (80035a0 <Prismatic_velocity_control+0x144>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a06      	ldr	r2, [pc, #24]	@ (80035a0 <Prismatic_velocity_control+0x144>)
 8003588:	6053      	str	r3, [r2, #4]
	return V_pris_velo_PID;
 800358a:	4b06      	ldr	r3, [pc, #24]	@ (80035a4 <Prismatic_velocity_control+0x148>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	ee07 3a90 	vmov	s15, r3
}
 8003592:	eeb0 0a67 	vmov.f32	s0, s15
 8003596:	371c      	adds	r7, #28
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	20000b3c 	.word	0x20000b3c
 80035a4:	20000b34 	.word	0x20000b34
 80035a8:	20000b08 	.word	0x20000b08
 80035ac:	3a83126f 	.word	0x3a83126f
 80035b0:	41c00000 	.word	0x41c00000
 80035b4:	c1c00000 	.word	0xc1c00000

080035b8 <Revolute_position_control>:

float Revolute_position_control(float delta_posi) {
 80035b8:	b480      	push	{r7}
 80035ba:	b087      	sub	sp, #28
 80035bc:	af00      	add	r7, sp, #0
 80035be:	ed87 0a01 	vstr	s0, [r7, #4]
	int anti_windup;
	error_posi_rev[0] = delta_posi;
 80035c2:	4a36      	ldr	r2, [pc, #216]	@ (800369c <Revolute_position_control+0xe4>)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6013      	str	r3, [r2, #0]
//	Rev_posi_PID.Kp = 1;
//	Rev_posi_PID.Kd = 1;

	if (error_posi_rev[0] < 0 && error_posi_rev[1] > 0) {
 80035c8:	4b34      	ldr	r3, [pc, #208]	@ (800369c <Revolute_position_control+0xe4>)
 80035ca:	edd3 7a00 	vldr	s15, [r3]
 80035ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035d6:	d50a      	bpl.n	80035ee <Revolute_position_control+0x36>
 80035d8:	4b30      	ldr	r3, [pc, #192]	@ (800369c <Revolute_position_control+0xe4>)
 80035da:	edd3 7a01 	vldr	s15, [r3, #4]
 80035de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035e6:	dd02      	ble.n	80035ee <Revolute_position_control+0x36>
		anti_windup = 0;
 80035e8:	2300      	movs	r3, #0
 80035ea:	617b      	str	r3, [r7, #20]
 80035ec:	e014      	b.n	8003618 <Revolute_position_control+0x60>
	} else if (error_posi_rev[0] > 0 && error_posi_rev[1] < 0) {
 80035ee:	4b2b      	ldr	r3, [pc, #172]	@ (800369c <Revolute_position_control+0xe4>)
 80035f0:	edd3 7a00 	vldr	s15, [r3]
 80035f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035fc:	dd0a      	ble.n	8003614 <Revolute_position_control+0x5c>
 80035fe:	4b27      	ldr	r3, [pc, #156]	@ (800369c <Revolute_position_control+0xe4>)
 8003600:	edd3 7a01 	vldr	s15, [r3, #4]
 8003604:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800360c:	d502      	bpl.n	8003614 <Revolute_position_control+0x5c>
		anti_windup = 0;
 800360e:	2300      	movs	r3, #0
 8003610:	617b      	str	r3, [r7, #20]
 8003612:	e001      	b.n	8003618 <Revolute_position_control+0x60>
	} else {
		anti_windup = 1;
 8003614:	2301      	movs	r3, #1
 8003616:	617b      	str	r3, [r7, #20]
 8003618:	4b21      	ldr	r3, [pc, #132]	@ (80036a0 <Revolute_position_control+0xe8>)
 800361a:	613b      	str	r3, [r7, #16]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	60fb      	str	r3, [r7, #12]
    out = (S->A0 * in) +
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	ed93 7a00 	vldr	s14, [r3]
 8003626:	edd7 7a03 	vldr	s15, [r7, #12]
 800362a:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	edd3 6a01 	vldr	s13, [r3, #4]
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	edd3 7a03 	vldr	s15, [r3, #12]
 800363a:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 800363e:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	edd3 6a02 	vldr	s13, [r3, #8]
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	edd3 7a04 	vldr	s15, [r3, #16]
 800364e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003652:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 800365c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003660:	edc7 7a02 	vstr	s15, [r7, #8]
    S->state[1] = S->state[0];
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	68da      	ldr	r2, [r3, #12]
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	68ba      	ldr	r2, [r7, #8]
 8003676:	615a      	str	r2, [r3, #20]
    return (out);
 8003678:	68bb      	ldr	r3, [r7, #8]
//		Rev_posi_PID.Ki = 0;
//	} else {
//		Rev_posi_PID.Ki = 1;
//	}

	V_rev_posi_PID = arm_pid_f32(&Rev_posi_PID, delta_posi);
 800367a:	4a0a      	ldr	r2, [pc, #40]	@ (80036a4 <Revolute_position_control+0xec>)
 800367c:	6013      	str	r3, [r2, #0]

//	if (V_rev_posi_PID > 24) {
//		V_rev_posi_PID = 24;
//	}

	error_posi_rev[1] = error_posi_rev[0];
 800367e:	4b07      	ldr	r3, [pc, #28]	@ (800369c <Revolute_position_control+0xe4>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a06      	ldr	r2, [pc, #24]	@ (800369c <Revolute_position_control+0xe4>)
 8003684:	6053      	str	r3, [r2, #4]
	return V_rev_posi_PID;
 8003686:	4b07      	ldr	r3, [pc, #28]	@ (80036a4 <Revolute_position_control+0xec>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	ee07 3a90 	vmov	s15, r3
}
 800368e:	eeb0 0a67 	vmov.f32	s0, s15
 8003692:	371c      	adds	r7, #28
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr
 800369c:	20000b78 	.word	0x20000b78
 80036a0:	20000b48 	.word	0x20000b48
 80036a4:	20000b74 	.word	0x20000b74

080036a8 <Revolute_velocity_control>:

float Revolute_velocity_control(float delta_velo) {
 80036a8:	b480      	push	{r7}
 80036aa:	b087      	sub	sp, #28
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	ed87 0a01 	vstr	s0, [r7, #4]
	int anti_windup;
	error_velo_rev[0] =  delta_velo;
 80036b2:	4a47      	ldr	r2, [pc, #284]	@ (80037d0 <Revolute_velocity_control+0x128>)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6013      	str	r3, [r2, #0]
//	Rev_velo_PID.Kp = 0.01;

	if (error_velo_rev[0] < 0 && error_velo_rev[1] > 0) {
 80036b8:	4b45      	ldr	r3, [pc, #276]	@ (80037d0 <Revolute_velocity_control+0x128>)
 80036ba:	edd3 7a00 	vldr	s15, [r3]
 80036be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036c6:	d50a      	bpl.n	80036de <Revolute_velocity_control+0x36>
 80036c8:	4b41      	ldr	r3, [pc, #260]	@ (80037d0 <Revolute_velocity_control+0x128>)
 80036ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80036ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036d6:	dd02      	ble.n	80036de <Revolute_velocity_control+0x36>
		anti_windup = 0;
 80036d8:	2300      	movs	r3, #0
 80036da:	617b      	str	r3, [r7, #20]
 80036dc:	e014      	b.n	8003708 <Revolute_velocity_control+0x60>
	} else if (error_velo_rev[0] > 0 && error_velo_rev[1] < 0) {
 80036de:	4b3c      	ldr	r3, [pc, #240]	@ (80037d0 <Revolute_velocity_control+0x128>)
 80036e0:	edd3 7a00 	vldr	s15, [r3]
 80036e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ec:	dd0a      	ble.n	8003704 <Revolute_velocity_control+0x5c>
 80036ee:	4b38      	ldr	r3, [pc, #224]	@ (80037d0 <Revolute_velocity_control+0x128>)
 80036f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80036f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036fc:	d502      	bpl.n	8003704 <Revolute_velocity_control+0x5c>
		anti_windup = 0;
 80036fe:	2300      	movs	r3, #0
 8003700:	617b      	str	r3, [r7, #20]
 8003702:	e001      	b.n	8003708 <Revolute_velocity_control+0x60>
	} else {
		anti_windup = 1;
 8003704:	2301      	movs	r3, #1
 8003706:	617b      	str	r3, [r7, #20]
	}

	if (V_rev_velo_PID >= 18 && anti_windup == 0) {
 8003708:	4b32      	ldr	r3, [pc, #200]	@ (80037d4 <Revolute_velocity_control+0x12c>)
 800370a:	edd3 7a00 	vldr	s15, [r3]
 800370e:	eeb3 7a02 	vmov.f32	s14, #50	@ 0x41900000  18.0
 8003712:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800371a:	db07      	blt.n	800372c <Revolute_velocity_control+0x84>
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d104      	bne.n	800372c <Revolute_velocity_control+0x84>
		Rev_velo_PID.Ki = 0;
 8003722:	4b2d      	ldr	r3, [pc, #180]	@ (80037d8 <Revolute_velocity_control+0x130>)
 8003724:	f04f 0200 	mov.w	r2, #0
 8003728:	61da      	str	r2, [r3, #28]
 800372a:	e002      	b.n	8003732 <Revolute_velocity_control+0x8a>
	} else {
		Rev_velo_PID.Ki = 0.001;
 800372c:	4b2a      	ldr	r3, [pc, #168]	@ (80037d8 <Revolute_velocity_control+0x130>)
 800372e:	4a2b      	ldr	r2, [pc, #172]	@ (80037dc <Revolute_velocity_control+0x134>)
 8003730:	61da      	str	r2, [r3, #28]
	}

	if (V_rev_velo_PID > 18) {
 8003732:	4b28      	ldr	r3, [pc, #160]	@ (80037d4 <Revolute_velocity_control+0x12c>)
 8003734:	edd3 7a00 	vldr	s15, [r3]
 8003738:	eeb3 7a02 	vmov.f32	s14, #50	@ 0x41900000  18.0
 800373c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003744:	dd02      	ble.n	800374c <Revolute_velocity_control+0xa4>
		V_rev_velo_PID = 18;
 8003746:	4b23      	ldr	r3, [pc, #140]	@ (80037d4 <Revolute_velocity_control+0x12c>)
 8003748:	4a25      	ldr	r2, [pc, #148]	@ (80037e0 <Revolute_velocity_control+0x138>)
 800374a:	601a      	str	r2, [r3, #0]
 800374c:	4b22      	ldr	r3, [pc, #136]	@ (80037d8 <Revolute_velocity_control+0x130>)
 800374e:	613b      	str	r3, [r7, #16]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	60fb      	str	r3, [r7, #12]
    out = (S->A0 * in) +
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	ed93 7a00 	vldr	s14, [r3]
 800375a:	edd7 7a03 	vldr	s15, [r7, #12]
 800375e:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	edd3 6a01 	vldr	s13, [r3, #4]
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	edd3 7a03 	vldr	s15, [r3, #12]
 800376e:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8003772:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	edd3 6a02 	vldr	s13, [r3, #8]
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	edd3 7a04 	vldr	s15, [r3, #16]
 8003782:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003786:	ee37 7a27 	vadd.f32	s14, s14, s15
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8003790:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003794:	edc7 7a02 	vstr	s15, [r7, #8]
    S->state[1] = S->state[0];
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	68da      	ldr	r2, [r3, #12]
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	615a      	str	r2, [r3, #20]
    return (out);
 80037ac:	68bb      	ldr	r3, [r7, #8]
	}

	V_rev_velo_PID = arm_pid_f32(&Rev_velo_PID, delta_velo);
 80037ae:	4a09      	ldr	r2, [pc, #36]	@ (80037d4 <Revolute_velocity_control+0x12c>)
 80037b0:	6013      	str	r3, [r2, #0]
	error_velo_rev[1] = error_velo_rev[0];
 80037b2:	4b07      	ldr	r3, [pc, #28]	@ (80037d0 <Revolute_velocity_control+0x128>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a06      	ldr	r2, [pc, #24]	@ (80037d0 <Revolute_velocity_control+0x128>)
 80037b8:	6053      	str	r3, [r2, #4]
	return V_rev_velo_PID;
 80037ba:	4b06      	ldr	r3, [pc, #24]	@ (80037d4 <Revolute_velocity_control+0x12c>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	ee07 3a90 	vmov	s15, r3
}
 80037c2:	eeb0 0a67 	vmov.f32	s0, s15
 80037c6:	371c      	adds	r7, #28
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr
 80037d0:	20000bb8 	.word	0x20000bb8
 80037d4:	20000bb0 	.word	0x20000bb0
 80037d8:	20000b84 	.word	0x20000b84
 80037dc:	3a83126f 	.word	0x3a83126f
 80037e0:	41900000 	.word	0x41900000

080037e4 <voltage_to_pwm>:

float voltage_to_pwm(float voltage) {
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	ed87 0a01 	vstr	s0, [r7, #4]
	float pwm = (voltage * 65535) / 24;
 80037ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80037f2:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800381c <voltage_to_pwm+0x38>
 80037f6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80037fa:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 80037fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003802:	edc7 7a03 	vstr	s15, [r7, #12]
	return pwm;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	ee07 3a90 	vmov	s15, r3
}
 800380c:	eeb0 0a67 	vmov.f32	s0, s15
 8003810:	3714      	adds	r7, #20
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	477fff00 	.word	0x477fff00

08003820 <Revolute_dis>:
//	float load = 0.01 / (2.0 * (22.0/7.0) * 4.0 * motor.Kt_Pri);
//	voltage_dis = (disturbance_feedforward_pri(&motor, load)) * (0.3*9.81) * gain_disturbance; // อย่าลืมคูณ sin(theta)
//	return voltage_dis;
//}

float Revolute_dis() {
 8003820:	b5b0      	push	{r4, r5, r7, lr}
 8003822:	af00      	add	r7, sp, #0
	load = (8.2 * 9.81 * 0.45 * sinf(Encoder_GetPosition(&encoder2) / (100.0/30.0))) +
 8003824:	486c      	ldr	r0, [pc, #432]	@ (80039d8 <Revolute_dis+0x1b8>)
 8003826:	f7fd fc13 	bl	8001050 <Encoder_GetPosition>
 800382a:	ee10 3a10 	vmov	r3, s0
 800382e:	4618      	mov	r0, r3
 8003830:	f7fc fe56 	bl	80004e0 <__aeabi_f2d>
 8003834:	a35e      	add	r3, pc, #376	@ (adr r3, 80039b0 <Revolute_dis+0x190>)
 8003836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800383a:	f7fc ffd3 	bl	80007e4 <__aeabi_ddiv>
 800383e:	4602      	mov	r2, r0
 8003840:	460b      	mov	r3, r1
 8003842:	4610      	mov	r0, r2
 8003844:	4619      	mov	r1, r3
 8003846:	f7fd f93d 	bl	8000ac4 <__aeabi_d2f>
 800384a:	4603      	mov	r3, r0
 800384c:	ee00 3a10 	vmov	s0, r3
 8003850:	f009 fdf6 	bl	800d440 <sinf>
 8003854:	ee10 3a10 	vmov	r3, s0
 8003858:	4618      	mov	r0, r3
 800385a:	f7fc fe41 	bl	80004e0 <__aeabi_f2d>
 800385e:	a356      	add	r3, pc, #344	@ (adr r3, 80039b8 <Revolute_dis+0x198>)
 8003860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003864:	f7fc fe94 	bl	8000590 <__aeabi_dmul>
 8003868:	4602      	mov	r2, r0
 800386a:	460b      	mov	r3, r1
 800386c:	4614      	mov	r4, r2
 800386e:	461d      	mov	r5, r3
			(0.3 * 9.81 * sinf(Encoder_GetPosition(&encoder2) / (100.0/30.0)) * 0.4);
 8003870:	4859      	ldr	r0, [pc, #356]	@ (80039d8 <Revolute_dis+0x1b8>)
 8003872:	f7fd fbed 	bl	8001050 <Encoder_GetPosition>
 8003876:	ee10 3a10 	vmov	r3, s0
 800387a:	4618      	mov	r0, r3
 800387c:	f7fc fe30 	bl	80004e0 <__aeabi_f2d>
 8003880:	a34b      	add	r3, pc, #300	@ (adr r3, 80039b0 <Revolute_dis+0x190>)
 8003882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003886:	f7fc ffad 	bl	80007e4 <__aeabi_ddiv>
 800388a:	4602      	mov	r2, r0
 800388c:	460b      	mov	r3, r1
 800388e:	4610      	mov	r0, r2
 8003890:	4619      	mov	r1, r3
 8003892:	f7fd f917 	bl	8000ac4 <__aeabi_d2f>
 8003896:	4603      	mov	r3, r0
 8003898:	ee00 3a10 	vmov	s0, r3
 800389c:	f009 fdd0 	bl	800d440 <sinf>
 80038a0:	ee10 3a10 	vmov	r3, s0
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7fc fe1b 	bl	80004e0 <__aeabi_f2d>
 80038aa:	a345      	add	r3, pc, #276	@ (adr r3, 80039c0 <Revolute_dis+0x1a0>)
 80038ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b0:	f7fc fe6e 	bl	8000590 <__aeabi_dmul>
 80038b4:	4602      	mov	r2, r0
 80038b6:	460b      	mov	r3, r1
 80038b8:	4610      	mov	r0, r2
 80038ba:	4619      	mov	r1, r3
 80038bc:	a342      	add	r3, pc, #264	@ (adr r3, 80039c8 <Revolute_dis+0x1a8>)
 80038be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c2:	f7fc fe65 	bl	8000590 <__aeabi_dmul>
 80038c6:	4602      	mov	r2, r0
 80038c8:	460b      	mov	r3, r1
	load = (8.2 * 9.81 * 0.45 * sinf(Encoder_GetPosition(&encoder2) / (100.0/30.0))) +
 80038ca:	4620      	mov	r0, r4
 80038cc:	4629      	mov	r1, r5
 80038ce:	f7fc fca9 	bl	8000224 <__adddf3>
 80038d2:	4602      	mov	r2, r0
 80038d4:	460b      	mov	r3, r1
 80038d6:	4610      	mov	r0, r2
 80038d8:	4619      	mov	r1, r3
 80038da:	f7fd f8f3 	bl	8000ac4 <__aeabi_d2f>
 80038de:	4603      	mov	r3, r0
 80038e0:	4a3e      	ldr	r2, [pc, #248]	@ (80039dc <Revolute_dis+0x1bc>)
 80038e2:	6013      	str	r3, [r2, #0]
	sine = sinf(Encoder_GetPosition(&encoder2) / (100.0/30.0));
 80038e4:	483c      	ldr	r0, [pc, #240]	@ (80039d8 <Revolute_dis+0x1b8>)
 80038e6:	f7fd fbb3 	bl	8001050 <Encoder_GetPosition>
 80038ea:	ee10 3a10 	vmov	r3, s0
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7fc fdf6 	bl	80004e0 <__aeabi_f2d>
 80038f4:	a32e      	add	r3, pc, #184	@ (adr r3, 80039b0 <Revolute_dis+0x190>)
 80038f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038fa:	f7fc ff73 	bl	80007e4 <__aeabi_ddiv>
 80038fe:	4602      	mov	r2, r0
 8003900:	460b      	mov	r3, r1
 8003902:	4610      	mov	r0, r2
 8003904:	4619      	mov	r1, r3
 8003906:	f7fd f8dd 	bl	8000ac4 <__aeabi_d2f>
 800390a:	4603      	mov	r3, r0
 800390c:	ee00 3a10 	vmov	s0, r3
 8003910:	f009 fd96 	bl	800d440 <sinf>
 8003914:	eef0 7a40 	vmov.f32	s15, s0
 8003918:	4b31      	ldr	r3, [pc, #196]	@ (80039e0 <Revolute_dis+0x1c0>)
 800391a:	edc3 7a00 	vstr	s15, [r3]
	encoder = Encoder_GetPosition(&encoder2) / (100.0/30.0);
 800391e:	482e      	ldr	r0, [pc, #184]	@ (80039d8 <Revolute_dis+0x1b8>)
 8003920:	f7fd fb96 	bl	8001050 <Encoder_GetPosition>
 8003924:	ee10 3a10 	vmov	r3, s0
 8003928:	4618      	mov	r0, r3
 800392a:	f7fc fdd9 	bl	80004e0 <__aeabi_f2d>
 800392e:	a320      	add	r3, pc, #128	@ (adr r3, 80039b0 <Revolute_dis+0x190>)
 8003930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003934:	f7fc ff56 	bl	80007e4 <__aeabi_ddiv>
 8003938:	4602      	mov	r2, r0
 800393a:	460b      	mov	r3, r1
 800393c:	4610      	mov	r0, r2
 800393e:	4619      	mov	r1, r3
 8003940:	f7fd f8c0 	bl	8000ac4 <__aeabi_d2f>
 8003944:	4603      	mov	r3, r0
 8003946:	4a27      	ldr	r2, [pc, #156]	@ (80039e4 <Revolute_dis+0x1c4>)
 8003948:	6013      	str	r3, [r2, #0]
//	load = (8.2 * 9.81 * 0.45 * cosf(1.57)) + (0.3 * 9.81 * cosf(1.57) * 0.4);
//	voltage_dis_rev = (disturbance_feedforward(&Rev_motor, load)) * gain_disturbance_rev;
	voltage_dis_rev = (Rev_motor.R_Rev / Rev_motor.Ke_Rev) * kf_rev.x_data[2] * 1.0 / 3.3;
 800394a:	4b27      	ldr	r3, [pc, #156]	@ (80039e8 <Revolute_dis+0x1c8>)
 800394c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8003950:	4b25      	ldr	r3, [pc, #148]	@ (80039e8 <Revolute_dis+0x1c8>)
 8003952:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003956:	f7fc ff45 	bl	80007e4 <__aeabi_ddiv>
 800395a:	4602      	mov	r2, r0
 800395c:	460b      	mov	r3, r1
 800395e:	4614      	mov	r4, r2
 8003960:	461d      	mov	r5, r3
 8003962:	4b22      	ldr	r3, [pc, #136]	@ (80039ec <Revolute_dis+0x1cc>)
 8003964:	f8d3 323c 	ldr.w	r3, [r3, #572]	@ 0x23c
 8003968:	4618      	mov	r0, r3
 800396a:	f7fc fdb9 	bl	80004e0 <__aeabi_f2d>
 800396e:	4602      	mov	r2, r0
 8003970:	460b      	mov	r3, r1
 8003972:	4620      	mov	r0, r4
 8003974:	4629      	mov	r1, r5
 8003976:	f7fc fe0b 	bl	8000590 <__aeabi_dmul>
 800397a:	4602      	mov	r2, r0
 800397c:	460b      	mov	r3, r1
 800397e:	4610      	mov	r0, r2
 8003980:	4619      	mov	r1, r3
 8003982:	a313      	add	r3, pc, #76	@ (adr r3, 80039d0 <Revolute_dis+0x1b0>)
 8003984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003988:	f7fc ff2c 	bl	80007e4 <__aeabi_ddiv>
 800398c:	4602      	mov	r2, r0
 800398e:	460b      	mov	r3, r1
 8003990:	4610      	mov	r0, r2
 8003992:	4619      	mov	r1, r3
 8003994:	f7fd f896 	bl	8000ac4 <__aeabi_d2f>
 8003998:	4603      	mov	r3, r0
 800399a:	4a15      	ldr	r2, [pc, #84]	@ (80039f0 <Revolute_dis+0x1d0>)
 800399c:	6013      	str	r3, [r2, #0]
	return voltage_dis_rev;
 800399e:	4b14      	ldr	r3, [pc, #80]	@ (80039f0 <Revolute_dis+0x1d0>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	ee07 3a90 	vmov	s15, r3
}
 80039a6:	eeb0 0a67 	vmov.f32	s0, s15
 80039aa:	bdb0      	pop	{r4, r5, r7, pc}
 80039ac:	f3af 8000 	nop.w
 80039b0:	aaaaaaab 	.word	0xaaaaaaab
 80039b4:	400aaaaa 	.word	0x400aaaaa
 80039b8:	8e219652 	.word	0x8e219652
 80039bc:	40421975 	.word	0x40421975
 80039c0:	95810625 	.word	0x95810625
 80039c4:	40078b43 	.word	0x40078b43
 80039c8:	9999999a 	.word	0x9999999a
 80039cc:	3fd99999 	.word	0x3fd99999
 80039d0:	66666666 	.word	0x66666666
 80039d4:	400a6666 	.word	0x400a6666
 80039d8:	20000390 	.word	0x20000390
 80039dc:	200012a8 	.word	0x200012a8
 80039e0:	200012ac 	.word	0x200012ac
 80039e4:	200012b0 	.word	0x200012b0
 80039e8:	20001250 	.word	0x20001250
 80039ec:	20000ef0 	.word	0x20000ef0
 80039f0:	20000ac0 	.word	0x20000ac0

080039f4 <updateTrajectoryIfNeeded>:

void updateTrajectoryIfNeeded(float t_global) {
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	ed87 0a01 	vstr	s0, [r7, #4]
    if (current_index >= 46 - 1) return;
 80039fe:	4b33      	ldr	r3, [pc, #204]	@ (8003acc <updateTrajectoryIfNeeded+0xd8>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2b2c      	cmp	r3, #44	@ 0x2c
 8003a04:	dc5e      	bgt.n	8003ac4 <updateTrajectoryIfNeeded+0xd0>

    if (t_global >= next_start_time) {
 8003a06:	4b32      	ldr	r3, [pc, #200]	@ (8003ad0 <updateTrajectoryIfNeeded+0xdc>)
 8003a08:	edd3 7a00 	vldr	s15, [r3]
 8003a0c:	ed97 7a01 	vldr	s14, [r7, #4]
 8003a10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a18:	db55      	blt.n	8003ac6 <updateTrajectoryIfNeeded+0xd2>
        float start_pris = smooth_path_polar[current_index][0];
 8003a1a:	4b2c      	ldr	r3, [pc, #176]	@ (8003acc <updateTrajectoryIfNeeded+0xd8>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a2d      	ldr	r2, [pc, #180]	@ (8003ad4 <updateTrajectoryIfNeeded+0xe0>)
 8003a20:	00db      	lsls	r3, r3, #3
 8003a22:	4413      	add	r3, r2
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	617b      	str	r3, [r7, #20]
        float end_pris = smooth_path_polar[current_index + 1][0];
 8003a28:	4b28      	ldr	r3, [pc, #160]	@ (8003acc <updateTrajectoryIfNeeded+0xd8>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	4a29      	ldr	r2, [pc, #164]	@ (8003ad4 <updateTrajectoryIfNeeded+0xe0>)
 8003a30:	00db      	lsls	r3, r3, #3
 8003a32:	4413      	add	r3, r2
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	613b      	str	r3, [r7, #16]

        float start_rev = smooth_path_polar[current_index][1];
 8003a38:	4b24      	ldr	r3, [pc, #144]	@ (8003acc <updateTrajectoryIfNeeded+0xd8>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a25      	ldr	r2, [pc, #148]	@ (8003ad4 <updateTrajectoryIfNeeded+0xe0>)
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	4413      	add	r3, r2
 8003a42:	3304      	adds	r3, #4
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	60fb      	str	r3, [r7, #12]
        float end_rev = smooth_path_polar[current_index + 1][1];
 8003a48:	4b20      	ldr	r3, [pc, #128]	@ (8003acc <updateTrajectoryIfNeeded+0xd8>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	4a21      	ldr	r2, [pc, #132]	@ (8003ad4 <updateTrajectoryIfNeeded+0xe0>)
 8003a50:	00db      	lsls	r3, r3, #3
 8003a52:	4413      	add	r3, r2
 8003a54:	3304      	adds	r3, #4
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	60bb      	str	r3, [r7, #8]

        InitTrajectorySegment(&currentPrismatic, start_pris, end_pris, v_max_pris, a_max_pris, t_global);
 8003a5a:	ed97 2a01 	vldr	s4, [r7, #4]
 8003a5e:	eddf 1a1e 	vldr	s3, [pc, #120]	@ 8003ad8 <updateTrajectoryIfNeeded+0xe4>
 8003a62:	ed9f 1a1e 	vldr	s2, [pc, #120]	@ 8003adc <updateTrajectoryIfNeeded+0xe8>
 8003a66:	edd7 0a04 	vldr	s1, [r7, #16]
 8003a6a:	ed97 0a05 	vldr	s0, [r7, #20]
 8003a6e:	481c      	ldr	r0, [pc, #112]	@ (8003ae0 <updateTrajectoryIfNeeded+0xec>)
 8003a70:	f7fe f96e 	bl	8001d50 <InitTrajectorySegment>
        InitTrajectorySegment(&currentRevolute,  start_rev,  end_rev,  v_max_rev,  a_max_rev,  t_global);
 8003a74:	ed97 2a01 	vldr	s4, [r7, #4]
 8003a78:	eddf 1a1a 	vldr	s3, [pc, #104]	@ 8003ae4 <updateTrajectoryIfNeeded+0xf0>
 8003a7c:	ed9f 1a1a 	vldr	s2, [pc, #104]	@ 8003ae8 <updateTrajectoryIfNeeded+0xf4>
 8003a80:	edd7 0a02 	vldr	s1, [r7, #8]
 8003a84:	ed97 0a03 	vldr	s0, [r7, #12]
 8003a88:	4818      	ldr	r0, [pc, #96]	@ (8003aec <updateTrajectoryIfNeeded+0xf8>)
 8003a8a:	f7fe f961 	bl	8001d50 <InitTrajectorySegment>
        next_start_time = t_global + fmaxf(currentPrismatic.t_total, currentRevolute.t_total);
 8003a8e:	4b14      	ldr	r3, [pc, #80]	@ (8003ae0 <updateTrajectoryIfNeeded+0xec>)
 8003a90:	edd3 7a07 	vldr	s15, [r3, #28]
 8003a94:	4b15      	ldr	r3, [pc, #84]	@ (8003aec <updateTrajectoryIfNeeded+0xf8>)
 8003a96:	ed93 7a07 	vldr	s14, [r3, #28]
 8003a9a:	eef0 0a47 	vmov.f32	s1, s14
 8003a9e:	eeb0 0a67 	vmov.f32	s0, s15
 8003aa2:	f009 fd13 	bl	800d4cc <fmaxf>
 8003aa6:	eeb0 7a40 	vmov.f32	s14, s0
 8003aaa:	edd7 7a01 	vldr	s15, [r7, #4]
 8003aae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ab2:	4b07      	ldr	r3, [pc, #28]	@ (8003ad0 <updateTrajectoryIfNeeded+0xdc>)
 8003ab4:	edc3 7a00 	vstr	s15, [r3]

        current_index++;
 8003ab8:	4b04      	ldr	r3, [pc, #16]	@ (8003acc <updateTrajectoryIfNeeded+0xd8>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	3301      	adds	r3, #1
 8003abe:	4a03      	ldr	r2, [pc, #12]	@ (8003acc <updateTrajectoryIfNeeded+0xd8>)
 8003ac0:	6013      	str	r3, [r2, #0]
 8003ac2:	e000      	b.n	8003ac6 <updateTrajectoryIfNeeded+0xd2>
    if (current_index >= 46 - 1) return;
 8003ac4:	bf00      	nop
    }
}
 8003ac6:	3718      	adds	r7, #24
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	20000428 	.word	0x20000428
 8003ad0:	2000042c 	.word	0x2000042c
 8003ad4:	0800df34 	.word	0x0800df34
 8003ad8:	437a0000 	.word	0x437a0000
 8003adc:	43fa0000 	.word	0x43fa0000
 8003ae0:	200003e0 	.word	0x200003e0
 8003ae4:	3d4ccccd 	.word	0x3d4ccccd
 8003ae8:	3e99999a 	.word	0x3e99999a
 8003aec:	20000404 	.word	0x20000404

08003af0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003af0:	b480      	push	{r7}
 8003af2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003af4:	b672      	cpsid	i
}
 8003af6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003af8:	bf00      	nop
 8003afa:	e7fd      	b.n	8003af8 <Error_Handler+0x8>

08003afc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003b00:	4b1b      	ldr	r3, [pc, #108]	@ (8003b70 <MX_SPI1_Init+0x74>)
 8003b02:	4a1c      	ldr	r2, [pc, #112]	@ (8003b74 <MX_SPI1_Init+0x78>)
 8003b04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003b06:	4b1a      	ldr	r3, [pc, #104]	@ (8003b70 <MX_SPI1_Init+0x74>)
 8003b08:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003b0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003b0e:	4b18      	ldr	r3, [pc, #96]	@ (8003b70 <MX_SPI1_Init+0x74>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003b14:	4b16      	ldr	r3, [pc, #88]	@ (8003b70 <MX_SPI1_Init+0x74>)
 8003b16:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003b1a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003b1c:	4b14      	ldr	r3, [pc, #80]	@ (8003b70 <MX_SPI1_Init+0x74>)
 8003b1e:	2202      	movs	r2, #2
 8003b20:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003b22:	4b13      	ldr	r3, [pc, #76]	@ (8003b70 <MX_SPI1_Init+0x74>)
 8003b24:	2201      	movs	r2, #1
 8003b26:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003b28:	4b11      	ldr	r3, [pc, #68]	@ (8003b70 <MX_SPI1_Init+0x74>)
 8003b2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b2e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003b30:	4b0f      	ldr	r3, [pc, #60]	@ (8003b70 <MX_SPI1_Init+0x74>)
 8003b32:	2238      	movs	r2, #56	@ 0x38
 8003b34:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8003b36:	4b0e      	ldr	r3, [pc, #56]	@ (8003b70 <MX_SPI1_Init+0x74>)
 8003b38:	2280      	movs	r2, #128	@ 0x80
 8003b3a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8003b70 <MX_SPI1_Init+0x74>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b42:	4b0b      	ldr	r3, [pc, #44]	@ (8003b70 <MX_SPI1_Init+0x74>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003b48:	4b09      	ldr	r3, [pc, #36]	@ (8003b70 <MX_SPI1_Init+0x74>)
 8003b4a:	2207      	movs	r2, #7
 8003b4c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003b4e:	4b08      	ldr	r3, [pc, #32]	@ (8003b70 <MX_SPI1_Init+0x74>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003b54:	4b06      	ldr	r3, [pc, #24]	@ (8003b70 <MX_SPI1_Init+0x74>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003b5a:	4805      	ldr	r0, [pc, #20]	@ (8003b70 <MX_SPI1_Init+0x74>)
 8003b5c:	f004 f840 	bl	8007be0 <HAL_SPI_Init>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003b66:	f7ff ffc3 	bl	8003af0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003b6a:	bf00      	nop
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	200012b4 	.word	0x200012b4
 8003b74:	40013000 	.word	0x40013000

08003b78 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b08a      	sub	sp, #40	@ 0x28
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b80:	f107 0314 	add.w	r3, r7, #20
 8003b84:	2200      	movs	r2, #0
 8003b86:	601a      	str	r2, [r3, #0]
 8003b88:	605a      	str	r2, [r3, #4]
 8003b8a:	609a      	str	r2, [r3, #8]
 8003b8c:	60da      	str	r2, [r3, #12]
 8003b8e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a25      	ldr	r2, [pc, #148]	@ (8003c2c <HAL_SPI_MspInit+0xb4>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d144      	bne.n	8003c24 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003b9a:	4b25      	ldr	r3, [pc, #148]	@ (8003c30 <HAL_SPI_MspInit+0xb8>)
 8003b9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b9e:	4a24      	ldr	r2, [pc, #144]	@ (8003c30 <HAL_SPI_MspInit+0xb8>)
 8003ba0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003ba4:	6613      	str	r3, [r2, #96]	@ 0x60
 8003ba6:	4b22      	ldr	r3, [pc, #136]	@ (8003c30 <HAL_SPI_MspInit+0xb8>)
 8003ba8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003baa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bae:	613b      	str	r3, [r7, #16]
 8003bb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bb2:	4b1f      	ldr	r3, [pc, #124]	@ (8003c30 <HAL_SPI_MspInit+0xb8>)
 8003bb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bb6:	4a1e      	ldr	r2, [pc, #120]	@ (8003c30 <HAL_SPI_MspInit+0xb8>)
 8003bb8:	f043 0301 	orr.w	r3, r3, #1
 8003bbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003bbe:	4b1c      	ldr	r3, [pc, #112]	@ (8003c30 <HAL_SPI_MspInit+0xb8>)
 8003bc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	60fb      	str	r3, [r7, #12]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bca:	4b19      	ldr	r3, [pc, #100]	@ (8003c30 <HAL_SPI_MspInit+0xb8>)
 8003bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bce:	4a18      	ldr	r2, [pc, #96]	@ (8003c30 <HAL_SPI_MspInit+0xb8>)
 8003bd0:	f043 0302 	orr.w	r3, r3, #2
 8003bd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003bd6:	4b16      	ldr	r3, [pc, #88]	@ (8003c30 <HAL_SPI_MspInit+0xb8>)
 8003bd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	60bb      	str	r3, [r7, #8]
 8003be0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003be2:	2320      	movs	r3, #32
 8003be4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003be6:	2302      	movs	r3, #2
 8003be8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bea:	2300      	movs	r3, #0
 8003bec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003bf2:	2305      	movs	r3, #5
 8003bf4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bf6:	f107 0314 	add.w	r3, r7, #20
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003c00:	f002 fe0c 	bl	800681c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003c04:	2330      	movs	r3, #48	@ 0x30
 8003c06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c08:	2302      	movs	r3, #2
 8003c0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c10:	2300      	movs	r3, #0
 8003c12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003c14:	2305      	movs	r3, #5
 8003c16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c18:	f107 0314 	add.w	r3, r7, #20
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	4805      	ldr	r0, [pc, #20]	@ (8003c34 <HAL_SPI_MspInit+0xbc>)
 8003c20:	f002 fdfc 	bl	800681c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003c24:	bf00      	nop
 8003c26:	3728      	adds	r7, #40	@ 0x28
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	40013000 	.word	0x40013000
 8003c30:	40021000 	.word	0x40021000
 8003c34:	48000400 	.word	0x48000400

08003c38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c3e:	4b0f      	ldr	r3, [pc, #60]	@ (8003c7c <HAL_MspInit+0x44>)
 8003c40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c42:	4a0e      	ldr	r2, [pc, #56]	@ (8003c7c <HAL_MspInit+0x44>)
 8003c44:	f043 0301 	orr.w	r3, r3, #1
 8003c48:	6613      	str	r3, [r2, #96]	@ 0x60
 8003c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8003c7c <HAL_MspInit+0x44>)
 8003c4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	607b      	str	r3, [r7, #4]
 8003c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c56:	4b09      	ldr	r3, [pc, #36]	@ (8003c7c <HAL_MspInit+0x44>)
 8003c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c5a:	4a08      	ldr	r2, [pc, #32]	@ (8003c7c <HAL_MspInit+0x44>)
 8003c5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c60:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c62:	4b06      	ldr	r3, [pc, #24]	@ (8003c7c <HAL_MspInit+0x44>)
 8003c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c6a:	603b      	str	r3, [r7, #0]
 8003c6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003c6e:	f003 f82b 	bl	8006cc8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c72:	bf00      	nop
 8003c74:	3708      	adds	r7, #8
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	40021000 	.word	0x40021000

08003c80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c80:	b480      	push	{r7}
 8003c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003c84:	bf00      	nop
 8003c86:	e7fd      	b.n	8003c84 <NMI_Handler+0x4>

08003c88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c8c:	bf00      	nop
 8003c8e:	e7fd      	b.n	8003c8c <HardFault_Handler+0x4>

08003c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c90:	b480      	push	{r7}
 8003c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c94:	bf00      	nop
 8003c96:	e7fd      	b.n	8003c94 <MemManage_Handler+0x4>

08003c98 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c9c:	bf00      	nop
 8003c9e:	e7fd      	b.n	8003c9c <BusFault_Handler+0x4>

08003ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ca4:	bf00      	nop
 8003ca6:	e7fd      	b.n	8003ca4 <UsageFault_Handler+0x4>

08003ca8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003cac:	bf00      	nop
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr

08003cb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003cba:	bf00      	nop
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003cc8:	bf00      	nop
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr

08003cd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003cd6:	f000 fe77 	bl	80049c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003cda:	bf00      	nop
 8003cdc:	bd80      	pop	{r7, pc}
	...

08003ce0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003ce4:	4802      	ldr	r0, [pc, #8]	@ (8003cf0 <DMA1_Channel1_IRQHandler+0x10>)
 8003ce6:	f002 fc3e 	bl	8006566 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003cea:	bf00      	nop
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	20001978 	.word	0x20001978

08003cf4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_pen_1_Pin);
 8003cf8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003cfc:	f002 ff28 	bl	8006b50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003d00:	bf00      	nop
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003d08:	4802      	ldr	r0, [pc, #8]	@ (8003d14 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8003d0a:	f004 fd87 	bl	800881c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8003d0e:	bf00      	nop
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	20001318 	.word	0x20001318

08003d18 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003d1c:	4803      	ldr	r0, [pc, #12]	@ (8003d2c <TIM1_UP_TIM16_IRQHandler+0x14>)
 8003d1e:	f004 fd7d 	bl	800881c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8003d22:	4803      	ldr	r0, [pc, #12]	@ (8003d30 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8003d24:	f004 fd7a 	bl	800881c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003d28:	bf00      	nop
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	20001318 	.word	0x20001318
 8003d30:	20001714 	.word	0x20001714

08003d34 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003d38:	4802      	ldr	r0, [pc, #8]	@ (8003d44 <TIM2_IRQHandler+0x10>)
 8003d3a:	f004 fd6f 	bl	800881c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003d3e:	bf00      	nop
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	200013e4 	.word	0x200013e4

08003d48 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003d4c:	4802      	ldr	r0, [pc, #8]	@ (8003d58 <USART2_IRQHandler+0x10>)
 8003d4e:	f006 fc69 	bl	800a624 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003d52:	bf00      	nop
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	200018ac 	.word	0x200018ac

08003d5c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_pen_2_Pin);
 8003d60:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003d64:	f002 fef4 	bl	8006b50 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Emergency_Pin);
 8003d68:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003d6c:	f002 fef0 	bl	8006b50 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Proximity_sensor_Pin);
 8003d70:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003d74:	f002 feec 	bl	8006b50 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_Prismatic1_Pin);
 8003d78:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003d7c:	f002 fee8 	bl	8006b50 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_Prismatic2_Pin);
 8003d80:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003d84:	f002 fee4 	bl	8006b50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003d88:	bf00      	nop
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003d90:	4b06      	ldr	r3, [pc, #24]	@ (8003dac <SystemInit+0x20>)
 8003d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d96:	4a05      	ldr	r2, [pc, #20]	@ (8003dac <SystemInit+0x20>)
 8003d98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003d9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003da0:	bf00      	nop
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	e000ed00 	.word	0xe000ed00

08003db0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim20;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b088      	sub	sp, #32
 8003db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003db6:	f107 0310 	add.w	r3, r7, #16
 8003dba:	2200      	movs	r2, #0
 8003dbc:	601a      	str	r2, [r3, #0]
 8003dbe:	605a      	str	r2, [r3, #4]
 8003dc0:	609a      	str	r2, [r3, #8]
 8003dc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003dc4:	1d3b      	adds	r3, r7, #4
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	601a      	str	r2, [r3, #0]
 8003dca:	605a      	str	r2, [r3, #4]
 8003dcc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003dce:	4b20      	ldr	r3, [pc, #128]	@ (8003e50 <MX_TIM1_Init+0xa0>)
 8003dd0:	4a20      	ldr	r2, [pc, #128]	@ (8003e54 <MX_TIM1_Init+0xa4>)
 8003dd2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003dd4:	4b1e      	ldr	r3, [pc, #120]	@ (8003e50 <MX_TIM1_Init+0xa0>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dda:	4b1d      	ldr	r3, [pc, #116]	@ (8003e50 <MX_TIM1_Init+0xa0>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000;
 8003de0:	4b1b      	ldr	r3, [pc, #108]	@ (8003e50 <MX_TIM1_Init+0xa0>)
 8003de2:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8003de6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003de8:	4b19      	ldr	r3, [pc, #100]	@ (8003e50 <MX_TIM1_Init+0xa0>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003dee:	4b18      	ldr	r3, [pc, #96]	@ (8003e50 <MX_TIM1_Init+0xa0>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003df4:	4b16      	ldr	r3, [pc, #88]	@ (8003e50 <MX_TIM1_Init+0xa0>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003dfa:	4815      	ldr	r0, [pc, #84]	@ (8003e50 <MX_TIM1_Init+0xa0>)
 8003dfc:	f003 ff9c 	bl	8007d38 <HAL_TIM_Base_Init>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d001      	beq.n	8003e0a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8003e06:	f7ff fe73 	bl	8003af0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e0a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e0e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003e10:	f107 0310 	add.w	r3, r7, #16
 8003e14:	4619      	mov	r1, r3
 8003e16:	480e      	ldr	r0, [pc, #56]	@ (8003e50 <MX_TIM1_Init+0xa0>)
 8003e18:	f005 f808 	bl	8008e2c <HAL_TIM_ConfigClockSource>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8003e22:	f7ff fe65 	bl	8003af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e26:	2300      	movs	r3, #0
 8003e28:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003e32:	1d3b      	adds	r3, r7, #4
 8003e34:	4619      	mov	r1, r3
 8003e36:	4806      	ldr	r0, [pc, #24]	@ (8003e50 <MX_TIM1_Init+0xa0>)
 8003e38:	f005 ffde 	bl	8009df8 <HAL_TIMEx_MasterConfigSynchronization>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003e42:	f7ff fe55 	bl	8003af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003e46:	bf00      	nop
 8003e48:	3720      	adds	r7, #32
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	20001318 	.word	0x20001318
 8003e54:	40012c00 	.word	0x40012c00

08003e58 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b088      	sub	sp, #32
 8003e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e5e:	f107 0310 	add.w	r3, r7, #16
 8003e62:	2200      	movs	r2, #0
 8003e64:	601a      	str	r2, [r3, #0]
 8003e66:	605a      	str	r2, [r3, #4]
 8003e68:	609a      	str	r2, [r3, #8]
 8003e6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e6c:	1d3b      	adds	r3, r7, #4
 8003e6e:	2200      	movs	r2, #0
 8003e70:	601a      	str	r2, [r3, #0]
 8003e72:	605a      	str	r2, [r3, #4]
 8003e74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003e76:	4b1e      	ldr	r3, [pc, #120]	@ (8003ef0 <MX_TIM2_Init+0x98>)
 8003e78:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003e7c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8003e7e:	4b1c      	ldr	r3, [pc, #112]	@ (8003ef0 <MX_TIM2_Init+0x98>)
 8003e80:	22a9      	movs	r2, #169	@ 0xa9
 8003e82:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e84:	4b1a      	ldr	r3, [pc, #104]	@ (8003ef0 <MX_TIM2_Init+0x98>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8003e8a:	4b19      	ldr	r3, [pc, #100]	@ (8003ef0 <MX_TIM2_Init+0x98>)
 8003e8c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003e90:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e92:	4b17      	ldr	r3, [pc, #92]	@ (8003ef0 <MX_TIM2_Init+0x98>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e98:	4b15      	ldr	r3, [pc, #84]	@ (8003ef0 <MX_TIM2_Init+0x98>)
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003e9e:	4814      	ldr	r0, [pc, #80]	@ (8003ef0 <MX_TIM2_Init+0x98>)
 8003ea0:	f003 ff4a 	bl	8007d38 <HAL_TIM_Base_Init>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003eaa:	f7ff fe21 	bl	8003af0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003eae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003eb2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003eb4:	f107 0310 	add.w	r3, r7, #16
 8003eb8:	4619      	mov	r1, r3
 8003eba:	480d      	ldr	r0, [pc, #52]	@ (8003ef0 <MX_TIM2_Init+0x98>)
 8003ebc:	f004 ffb6 	bl	8008e2c <HAL_TIM_ConfigClockSource>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d001      	beq.n	8003eca <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003ec6:	f7ff fe13 	bl	8003af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003ed2:	1d3b      	adds	r3, r7, #4
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	4806      	ldr	r0, [pc, #24]	@ (8003ef0 <MX_TIM2_Init+0x98>)
 8003ed8:	f005 ff8e 	bl	8009df8 <HAL_TIMEx_MasterConfigSynchronization>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003ee2:	f7ff fe05 	bl	8003af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003ee6:	bf00      	nop
 8003ee8:	3720      	adds	r7, #32
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	200013e4 	.word	0x200013e4

08003ef4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b08c      	sub	sp, #48	@ 0x30
 8003ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003efa:	f107 030c 	add.w	r3, r7, #12
 8003efe:	2224      	movs	r2, #36	@ 0x24
 8003f00:	2100      	movs	r1, #0
 8003f02:	4618      	mov	r0, r3
 8003f04:	f009 fa3e 	bl	800d384 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f08:	463b      	mov	r3, r7
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	601a      	str	r2, [r3, #0]
 8003f0e:	605a      	str	r2, [r3, #4]
 8003f10:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003f12:	4b21      	ldr	r3, [pc, #132]	@ (8003f98 <MX_TIM3_Init+0xa4>)
 8003f14:	4a21      	ldr	r2, [pc, #132]	@ (8003f9c <MX_TIM3_Init+0xa8>)
 8003f16:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003f18:	4b1f      	ldr	r3, [pc, #124]	@ (8003f98 <MX_TIM3_Init+0xa4>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f1e:	4b1e      	ldr	r3, [pc, #120]	@ (8003f98 <MX_TIM3_Init+0xa4>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 8003f24:	4b1c      	ldr	r3, [pc, #112]	@ (8003f98 <MX_TIM3_Init+0xa4>)
 8003f26:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8003f2a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f2c:	4b1a      	ldr	r3, [pc, #104]	@ (8003f98 <MX_TIM3_Init+0xa4>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f32:	4b19      	ldr	r3, [pc, #100]	@ (8003f98 <MX_TIM3_Init+0xa4>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003f40:	2301      	movs	r3, #1
 8003f42:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003f44:	2300      	movs	r3, #0
 8003f46:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003f50:	2301      	movs	r3, #1
 8003f52:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003f54:	2300      	movs	r3, #0
 8003f56:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003f5c:	f107 030c 	add.w	r3, r7, #12
 8003f60:	4619      	mov	r1, r3
 8003f62:	480d      	ldr	r0, [pc, #52]	@ (8003f98 <MX_TIM3_Init+0xa4>)
 8003f64:	f004 fb18 	bl	8008598 <HAL_TIM_Encoder_Init>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8003f6e:	f7ff fdbf 	bl	8003af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f72:	2300      	movs	r3, #0
 8003f74:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f76:	2300      	movs	r3, #0
 8003f78:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003f7a:	463b      	mov	r3, r7
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	4806      	ldr	r0, [pc, #24]	@ (8003f98 <MX_TIM3_Init+0xa4>)
 8003f80:	f005 ff3a 	bl	8009df8 <HAL_TIMEx_MasterConfigSynchronization>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8003f8a:	f7ff fdb1 	bl	8003af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003f8e:	bf00      	nop
 8003f90:	3730      	adds	r7, #48	@ 0x30
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	200014b0 	.word	0x200014b0
 8003f9c:	40000400 	.word	0x40000400

08003fa0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b08c      	sub	sp, #48	@ 0x30
 8003fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003fa6:	f107 030c 	add.w	r3, r7, #12
 8003faa:	2224      	movs	r2, #36	@ 0x24
 8003fac:	2100      	movs	r1, #0
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f009 f9e8 	bl	800d384 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fb4:	463b      	mov	r3, r7
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	601a      	str	r2, [r3, #0]
 8003fba:	605a      	str	r2, [r3, #4]
 8003fbc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003fbe:	4b21      	ldr	r3, [pc, #132]	@ (8004044 <MX_TIM4_Init+0xa4>)
 8003fc0:	4a21      	ldr	r2, [pc, #132]	@ (8004048 <MX_TIM4_Init+0xa8>)
 8003fc2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003fc4:	4b1f      	ldr	r3, [pc, #124]	@ (8004044 <MX_TIM4_Init+0xa4>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fca:	4b1e      	ldr	r3, [pc, #120]	@ (8004044 <MX_TIM4_Init+0xa4>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 59999;
 8003fd0:	4b1c      	ldr	r3, [pc, #112]	@ (8004044 <MX_TIM4_Init+0xa4>)
 8003fd2:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8003fd6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fd8:	4b1a      	ldr	r3, [pc, #104]	@ (8004044 <MX_TIM4_Init+0xa4>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fde:	4b19      	ldr	r3, [pc, #100]	@ (8004044 <MX_TIM4_Init+0xa4>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003fec:	2301      	movs	r3, #1
 8003fee:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004000:	2300      	movs	r3, #0
 8004002:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8004004:	2300      	movs	r3, #0
 8004006:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8004008:	f107 030c 	add.w	r3, r7, #12
 800400c:	4619      	mov	r1, r3
 800400e:	480d      	ldr	r0, [pc, #52]	@ (8004044 <MX_TIM4_Init+0xa4>)
 8004010:	f004 fac2 	bl	8008598 <HAL_TIM_Encoder_Init>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800401a:	f7ff fd69 	bl	8003af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800401e:	2300      	movs	r3, #0
 8004020:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004022:	2300      	movs	r3, #0
 8004024:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004026:	463b      	mov	r3, r7
 8004028:	4619      	mov	r1, r3
 800402a:	4806      	ldr	r0, [pc, #24]	@ (8004044 <MX_TIM4_Init+0xa4>)
 800402c:	f005 fee4 	bl	8009df8 <HAL_TIMEx_MasterConfigSynchronization>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d001      	beq.n	800403a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8004036:	f7ff fd5b 	bl	8003af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800403a:	bf00      	nop
 800403c:	3730      	adds	r7, #48	@ 0x30
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	2000157c 	.word	0x2000157c
 8004048:	40000800 	.word	0x40000800

0800404c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b09c      	sub	sp, #112	@ 0x70
 8004050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004052:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8004056:	2200      	movs	r2, #0
 8004058:	601a      	str	r2, [r3, #0]
 800405a:	605a      	str	r2, [r3, #4]
 800405c:	609a      	str	r2, [r3, #8]
 800405e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004060:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004064:	2200      	movs	r2, #0
 8004066:	601a      	str	r2, [r3, #0]
 8004068:	605a      	str	r2, [r3, #4]
 800406a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800406c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004070:	2200      	movs	r2, #0
 8004072:	601a      	str	r2, [r3, #0]
 8004074:	605a      	str	r2, [r3, #4]
 8004076:	609a      	str	r2, [r3, #8]
 8004078:	60da      	str	r2, [r3, #12]
 800407a:	611a      	str	r2, [r3, #16]
 800407c:	615a      	str	r2, [r3, #20]
 800407e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004080:	1d3b      	adds	r3, r7, #4
 8004082:	2234      	movs	r2, #52	@ 0x34
 8004084:	2100      	movs	r1, #0
 8004086:	4618      	mov	r0, r3
 8004088:	f009 f97c 	bl	800d384 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800408c:	4b45      	ldr	r3, [pc, #276]	@ (80041a4 <MX_TIM8_Init+0x158>)
 800408e:	4a46      	ldr	r2, [pc, #280]	@ (80041a8 <MX_TIM8_Init+0x15c>)
 8004090:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 169;
 8004092:	4b44      	ldr	r3, [pc, #272]	@ (80041a4 <MX_TIM8_Init+0x158>)
 8004094:	22a9      	movs	r2, #169	@ 0xa9
 8004096:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004098:	4b42      	ldr	r3, [pc, #264]	@ (80041a4 <MX_TIM8_Init+0x158>)
 800409a:	2200      	movs	r2, #0
 800409c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19999;
 800409e:	4b41      	ldr	r3, [pc, #260]	@ (80041a4 <MX_TIM8_Init+0x158>)
 80040a0:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80040a4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040a6:	4b3f      	ldr	r3, [pc, #252]	@ (80041a4 <MX_TIM8_Init+0x158>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80040ac:	4b3d      	ldr	r3, [pc, #244]	@ (80041a4 <MX_TIM8_Init+0x158>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040b2:	4b3c      	ldr	r3, [pc, #240]	@ (80041a4 <MX_TIM8_Init+0x158>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80040b8:	483a      	ldr	r0, [pc, #232]	@ (80041a4 <MX_TIM8_Init+0x158>)
 80040ba:	f003 fe3d 	bl	8007d38 <HAL_TIM_Base_Init>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d001      	beq.n	80040c8 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 80040c4:	f7ff fd14 	bl	8003af0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80040c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80040cc:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80040ce:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80040d2:	4619      	mov	r1, r3
 80040d4:	4833      	ldr	r0, [pc, #204]	@ (80041a4 <MX_TIM8_Init+0x158>)
 80040d6:	f004 fea9 	bl	8008e2c <HAL_TIM_ConfigClockSource>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d001      	beq.n	80040e4 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80040e0:	f7ff fd06 	bl	8003af0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80040e4:	482f      	ldr	r0, [pc, #188]	@ (80041a4 <MX_TIM8_Init+0x158>)
 80040e6:	f003 ffe1 	bl	80080ac <HAL_TIM_PWM_Init>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d001      	beq.n	80040f4 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80040f0:	f7ff fcfe 	bl	8003af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040f4:	2300      	movs	r3, #0
 80040f6:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80040f8:	2300      	movs	r3, #0
 80040fa:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040fc:	2300      	movs	r3, #0
 80040fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004100:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004104:	4619      	mov	r1, r3
 8004106:	4827      	ldr	r0, [pc, #156]	@ (80041a4 <MX_TIM8_Init+0x158>)
 8004108:	f005 fe76 	bl	8009df8 <HAL_TIMEx_MasterConfigSynchronization>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8004112:	f7ff fced 	bl	8003af0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004116:	2360      	movs	r3, #96	@ 0x60
 8004118:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800411a:	2300      	movs	r3, #0
 800411c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800411e:	2300      	movs	r3, #0
 8004120:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004122:	2300      	movs	r3, #0
 8004124:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004126:	2300      	movs	r3, #0
 8004128:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800412a:	2300      	movs	r3, #0
 800412c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800412e:	2300      	movs	r3, #0
 8004130:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004132:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004136:	220c      	movs	r2, #12
 8004138:	4619      	mov	r1, r3
 800413a:	481a      	ldr	r0, [pc, #104]	@ (80041a4 <MX_TIM8_Init+0x158>)
 800413c:	f004 fd62 	bl	8008c04 <HAL_TIM_PWM_ConfigChannel>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8004146:	f7ff fcd3 	bl	8003af0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800414a:	2300      	movs	r3, #0
 800414c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800414e:	2300      	movs	r3, #0
 8004150:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004152:	2300      	movs	r3, #0
 8004154:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004156:	2300      	movs	r3, #0
 8004158:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800415a:	2300      	movs	r3, #0
 800415c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800415e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004162:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004164:	2300      	movs	r3, #0
 8004166:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8004168:	2300      	movs	r3, #0
 800416a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800416c:	2300      	movs	r3, #0
 800416e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004170:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004174:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004176:	2300      	movs	r3, #0
 8004178:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800417a:	2300      	movs	r3, #0
 800417c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800417e:	2300      	movs	r3, #0
 8004180:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8004182:	1d3b      	adds	r3, r7, #4
 8004184:	4619      	mov	r1, r3
 8004186:	4807      	ldr	r0, [pc, #28]	@ (80041a4 <MX_TIM8_Init+0x158>)
 8004188:	f005 fecc 	bl	8009f24 <HAL_TIMEx_ConfigBreakDeadTime>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d001      	beq.n	8004196 <MX_TIM8_Init+0x14a>
  {
    Error_Handler();
 8004192:	f7ff fcad 	bl	8003af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8004196:	4803      	ldr	r0, [pc, #12]	@ (80041a4 <MX_TIM8_Init+0x158>)
 8004198:	f000 fa44 	bl	8004624 <HAL_TIM_MspPostInit>

}
 800419c:	bf00      	nop
 800419e:	3770      	adds	r7, #112	@ 0x70
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	20001648 	.word	0x20001648
 80041a8:	40013400 	.word	0x40013400

080041ac <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b094      	sub	sp, #80	@ 0x50
 80041b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80041b2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80041b6:	2200      	movs	r2, #0
 80041b8:	601a      	str	r2, [r3, #0]
 80041ba:	605a      	str	r2, [r3, #4]
 80041bc:	609a      	str	r2, [r3, #8]
 80041be:	60da      	str	r2, [r3, #12]
 80041c0:	611a      	str	r2, [r3, #16]
 80041c2:	615a      	str	r2, [r3, #20]
 80041c4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80041c6:	463b      	mov	r3, r7
 80041c8:	2234      	movs	r2, #52	@ 0x34
 80041ca:	2100      	movs	r1, #0
 80041cc:	4618      	mov	r0, r3
 80041ce:	f009 f8d9 	bl	800d384 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80041d2:	4b34      	ldr	r3, [pc, #208]	@ (80042a4 <MX_TIM16_Init+0xf8>)
 80041d4:	4a34      	ldr	r2, [pc, #208]	@ (80042a8 <MX_TIM16_Init+0xfc>)
 80041d6:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 80041d8:	4b32      	ldr	r3, [pc, #200]	@ (80042a4 <MX_TIM16_Init+0xf8>)
 80041da:	22a9      	movs	r2, #169	@ 0xa9
 80041dc:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041de:	4b31      	ldr	r3, [pc, #196]	@ (80042a4 <MX_TIM16_Init+0xf8>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2005;
 80041e4:	4b2f      	ldr	r3, [pc, #188]	@ (80042a4 <MX_TIM16_Init+0xf8>)
 80041e6:	f240 72d5 	movw	r2, #2005	@ 0x7d5
 80041ea:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041ec:	4b2d      	ldr	r3, [pc, #180]	@ (80042a4 <MX_TIM16_Init+0xf8>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80041f2:	4b2c      	ldr	r3, [pc, #176]	@ (80042a4 <MX_TIM16_Init+0xf8>)
 80041f4:	2200      	movs	r2, #0
 80041f6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041f8:	4b2a      	ldr	r3, [pc, #168]	@ (80042a4 <MX_TIM16_Init+0xf8>)
 80041fa:	2200      	movs	r2, #0
 80041fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80041fe:	4829      	ldr	r0, [pc, #164]	@ (80042a4 <MX_TIM16_Init+0xf8>)
 8004200:	f003 fd9a 	bl	8007d38 <HAL_TIM_Base_Init>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d001      	beq.n	800420e <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 800420a:	f7ff fc71 	bl	8003af0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 800420e:	4825      	ldr	r0, [pc, #148]	@ (80042a4 <MX_TIM16_Init+0xf8>)
 8004210:	f003 fede 	bl	8007fd0 <HAL_TIM_OC_Init>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d001      	beq.n	800421e <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 800421a:	f7ff fc69 	bl	8003af0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 800421e:	2108      	movs	r1, #8
 8004220:	4820      	ldr	r0, [pc, #128]	@ (80042a4 <MX_TIM16_Init+0xf8>)
 8004222:	f004 f8c3 	bl	80083ac <HAL_TIM_OnePulse_Init>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d001      	beq.n	8004230 <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 800422c:	f7ff fc60 	bl	8003af0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8004230:	2310      	movs	r3, #16
 8004232:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 1433;
 8004234:	f240 5399 	movw	r3, #1433	@ 0x599
 8004238:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800423a:	2300      	movs	r3, #0
 800423c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800423e:	2300      	movs	r3, #0
 8004240:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004242:	2300      	movs	r3, #0
 8004244:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004246:	2300      	movs	r3, #0
 8004248:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800424a:	2300      	movs	r3, #0
 800424c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800424e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004252:	2200      	movs	r2, #0
 8004254:	4619      	mov	r1, r3
 8004256:	4813      	ldr	r0, [pc, #76]	@ (80042a4 <MX_TIM16_Init+0xf8>)
 8004258:	f004 fc5a 	bl	8008b10 <HAL_TIM_OC_ConfigChannel>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <MX_TIM16_Init+0xba>
  {
    Error_Handler();
 8004262:	f7ff fc45 	bl	8003af0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004266:	2300      	movs	r3, #0
 8004268:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800426a:	2300      	movs	r3, #0
 800426c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800426e:	2300      	movs	r3, #0
 8004270:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004272:	2300      	movs	r3, #0
 8004274:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004276:	2300      	movs	r3, #0
 8004278:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800427a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800427e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004280:	2300      	movs	r3, #0
 8004282:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004284:	2300      	movs	r3, #0
 8004286:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8004288:	463b      	mov	r3, r7
 800428a:	4619      	mov	r1, r3
 800428c:	4805      	ldr	r0, [pc, #20]	@ (80042a4 <MX_TIM16_Init+0xf8>)
 800428e:	f005 fe49 	bl	8009f24 <HAL_TIMEx_ConfigBreakDeadTime>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d001      	beq.n	800429c <MX_TIM16_Init+0xf0>
  {
    Error_Handler();
 8004298:	f7ff fc2a 	bl	8003af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800429c:	bf00      	nop
 800429e:	3750      	adds	r7, #80	@ 0x50
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	20001714 	.word	0x20001714
 80042a8:	40014400 	.word	0x40014400

080042ac <MX_TIM20_Init>:
/* TIM20 init function */
void MX_TIM20_Init(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b09c      	sub	sp, #112	@ 0x70
 80042b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80042b2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80042b6:	2200      	movs	r2, #0
 80042b8:	601a      	str	r2, [r3, #0]
 80042ba:	605a      	str	r2, [r3, #4]
 80042bc:	609a      	str	r2, [r3, #8]
 80042be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042c0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80042c4:	2200      	movs	r2, #0
 80042c6:	601a      	str	r2, [r3, #0]
 80042c8:	605a      	str	r2, [r3, #4]
 80042ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80042cc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80042d0:	2200      	movs	r2, #0
 80042d2:	601a      	str	r2, [r3, #0]
 80042d4:	605a      	str	r2, [r3, #4]
 80042d6:	609a      	str	r2, [r3, #8]
 80042d8:	60da      	str	r2, [r3, #12]
 80042da:	611a      	str	r2, [r3, #16]
 80042dc:	615a      	str	r2, [r3, #20]
 80042de:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80042e0:	1d3b      	adds	r3, r7, #4
 80042e2:	2234      	movs	r2, #52	@ 0x34
 80042e4:	2100      	movs	r1, #0
 80042e6:	4618      	mov	r0, r3
 80042e8:	f009 f84c 	bl	800d384 <memset>

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 80042ec:	4b4b      	ldr	r3, [pc, #300]	@ (800441c <MX_TIM20_Init+0x170>)
 80042ee:	4a4c      	ldr	r2, [pc, #304]	@ (8004420 <MX_TIM20_Init+0x174>)
 80042f0:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 80042f2:	4b4a      	ldr	r3, [pc, #296]	@ (800441c <MX_TIM20_Init+0x170>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042f8:	4b48      	ldr	r3, [pc, #288]	@ (800441c <MX_TIM20_Init+0x170>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 80042fe:	4b47      	ldr	r3, [pc, #284]	@ (800441c <MX_TIM20_Init+0x170>)
 8004300:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004304:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004306:	4b45      	ldr	r3, [pc, #276]	@ (800441c <MX_TIM20_Init+0x170>)
 8004308:	2200      	movs	r2, #0
 800430a:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 800430c:	4b43      	ldr	r3, [pc, #268]	@ (800441c <MX_TIM20_Init+0x170>)
 800430e:	2200      	movs	r2, #0
 8004310:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004312:	4b42      	ldr	r3, [pc, #264]	@ (800441c <MX_TIM20_Init+0x170>)
 8004314:	2200      	movs	r2, #0
 8004316:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 8004318:	4840      	ldr	r0, [pc, #256]	@ (800441c <MX_TIM20_Init+0x170>)
 800431a:	f003 fd0d 	bl	8007d38 <HAL_TIM_Base_Init>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d001      	beq.n	8004328 <MX_TIM20_Init+0x7c>
  {
    Error_Handler();
 8004324:	f7ff fbe4 	bl	8003af0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004328:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800432c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 800432e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8004332:	4619      	mov	r1, r3
 8004334:	4839      	ldr	r0, [pc, #228]	@ (800441c <MX_TIM20_Init+0x170>)
 8004336:	f004 fd79 	bl	8008e2c <HAL_TIM_ConfigClockSource>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d001      	beq.n	8004344 <MX_TIM20_Init+0x98>
  {
    Error_Handler();
 8004340:	f7ff fbd6 	bl	8003af0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 8004344:	4835      	ldr	r0, [pc, #212]	@ (800441c <MX_TIM20_Init+0x170>)
 8004346:	f003 feb1 	bl	80080ac <HAL_TIM_PWM_Init>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d001      	beq.n	8004354 <MX_TIM20_Init+0xa8>
  {
    Error_Handler();
 8004350:	f7ff fbce 	bl	8003af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004354:	2300      	movs	r3, #0
 8004356:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004358:	2300      	movs	r3, #0
 800435a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800435c:	2300      	movs	r3, #0
 800435e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8004360:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004364:	4619      	mov	r1, r3
 8004366:	482d      	ldr	r0, [pc, #180]	@ (800441c <MX_TIM20_Init+0x170>)
 8004368:	f005 fd46 	bl	8009df8 <HAL_TIMEx_MasterConfigSynchronization>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d001      	beq.n	8004376 <MX_TIM20_Init+0xca>
  {
    Error_Handler();
 8004372:	f7ff fbbd 	bl	8003af0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004376:	2360      	movs	r3, #96	@ 0x60
 8004378:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800437a:	2300      	movs	r3, #0
 800437c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800437e:	2300      	movs	r3, #0
 8004380:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004382:	2300      	movs	r3, #0
 8004384:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004386:	2300      	movs	r3, #0
 8004388:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800438a:	2300      	movs	r3, #0
 800438c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800438e:	2300      	movs	r3, #0
 8004390:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004392:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004396:	2200      	movs	r2, #0
 8004398:	4619      	mov	r1, r3
 800439a:	4820      	ldr	r0, [pc, #128]	@ (800441c <MX_TIM20_Init+0x170>)
 800439c:	f004 fc32 	bl	8008c04 <HAL_TIM_PWM_ConfigChannel>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d001      	beq.n	80043aa <MX_TIM20_Init+0xfe>
  {
    Error_Handler();
 80043a6:	f7ff fba3 	bl	8003af0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80043aa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80043ae:	2208      	movs	r2, #8
 80043b0:	4619      	mov	r1, r3
 80043b2:	481a      	ldr	r0, [pc, #104]	@ (800441c <MX_TIM20_Init+0x170>)
 80043b4:	f004 fc26 	bl	8008c04 <HAL_TIM_PWM_ConfigChannel>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <MX_TIM20_Init+0x116>
  {
    Error_Handler();
 80043be:	f7ff fb97 	bl	8003af0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80043c2:	2300      	movs	r3, #0
 80043c4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80043c6:	2300      	movs	r3, #0
 80043c8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80043ca:	2300      	movs	r3, #0
 80043cc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80043ce:	2300      	movs	r3, #0
 80043d0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80043d2:	2300      	movs	r3, #0
 80043d4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80043d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80043da:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80043dc:	2300      	movs	r3, #0
 80043de:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80043e0:	2300      	movs	r3, #0
 80043e2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80043e4:	2300      	movs	r3, #0
 80043e6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80043e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80043ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80043ee:	2300      	movs	r3, #0
 80043f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80043f2:	2300      	movs	r3, #0
 80043f4:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80043f6:	2300      	movs	r3, #0
 80043f8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 80043fa:	1d3b      	adds	r3, r7, #4
 80043fc:	4619      	mov	r1, r3
 80043fe:	4807      	ldr	r0, [pc, #28]	@ (800441c <MX_TIM20_Init+0x170>)
 8004400:	f005 fd90 	bl	8009f24 <HAL_TIMEx_ConfigBreakDeadTime>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d001      	beq.n	800440e <MX_TIM20_Init+0x162>
  {
    Error_Handler();
 800440a:	f7ff fb71 	bl	8003af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */
  HAL_TIM_MspPostInit(&htim20);
 800440e:	4803      	ldr	r0, [pc, #12]	@ (800441c <MX_TIM20_Init+0x170>)
 8004410:	f000 f908 	bl	8004624 <HAL_TIM_MspPostInit>

}
 8004414:	bf00      	nop
 8004416:	3770      	adds	r7, #112	@ 0x70
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	200017e0 	.word	0x200017e0
 8004420:	40015000 	.word	0x40015000

08004424 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b088      	sub	sp, #32
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a3d      	ldr	r2, [pc, #244]	@ (8004528 <HAL_TIM_Base_MspInit+0x104>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d11c      	bne.n	8004470 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004436:	4b3d      	ldr	r3, [pc, #244]	@ (800452c <HAL_TIM_Base_MspInit+0x108>)
 8004438:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800443a:	4a3c      	ldr	r2, [pc, #240]	@ (800452c <HAL_TIM_Base_MspInit+0x108>)
 800443c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004440:	6613      	str	r3, [r2, #96]	@ 0x60
 8004442:	4b3a      	ldr	r3, [pc, #232]	@ (800452c <HAL_TIM_Base_MspInit+0x108>)
 8004444:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004446:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800444a:	61fb      	str	r3, [r7, #28]
 800444c:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800444e:	2200      	movs	r2, #0
 8004450:	2100      	movs	r1, #0
 8004452:	2018      	movs	r0, #24
 8004454:	f001 fe6f 	bl	8006136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8004458:	2018      	movs	r0, #24
 800445a:	f001 fe86 	bl	800616a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800445e:	2200      	movs	r2, #0
 8004460:	2100      	movs	r1, #0
 8004462:	2019      	movs	r0, #25
 8004464:	f001 fe67 	bl	8006136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004468:	2019      	movs	r0, #25
 800446a:	f001 fe7e 	bl	800616a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM20_CLK_ENABLE();
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }
}
 800446e:	e056      	b.n	800451e <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM2)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004478:	d114      	bne.n	80044a4 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800447a:	4b2c      	ldr	r3, [pc, #176]	@ (800452c <HAL_TIM_Base_MspInit+0x108>)
 800447c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800447e:	4a2b      	ldr	r2, [pc, #172]	@ (800452c <HAL_TIM_Base_MspInit+0x108>)
 8004480:	f043 0301 	orr.w	r3, r3, #1
 8004484:	6593      	str	r3, [r2, #88]	@ 0x58
 8004486:	4b29      	ldr	r3, [pc, #164]	@ (800452c <HAL_TIM_Base_MspInit+0x108>)
 8004488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	61bb      	str	r3, [r7, #24]
 8004490:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004492:	2200      	movs	r2, #0
 8004494:	2100      	movs	r1, #0
 8004496:	201c      	movs	r0, #28
 8004498:	f001 fe4d 	bl	8006136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800449c:	201c      	movs	r0, #28
 800449e:	f001 fe64 	bl	800616a <HAL_NVIC_EnableIRQ>
}
 80044a2:	e03c      	b.n	800451e <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM8)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a21      	ldr	r2, [pc, #132]	@ (8004530 <HAL_TIM_Base_MspInit+0x10c>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d10c      	bne.n	80044c8 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80044ae:	4b1f      	ldr	r3, [pc, #124]	@ (800452c <HAL_TIM_Base_MspInit+0x108>)
 80044b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044b2:	4a1e      	ldr	r2, [pc, #120]	@ (800452c <HAL_TIM_Base_MspInit+0x108>)
 80044b4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80044b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80044ba:	4b1c      	ldr	r3, [pc, #112]	@ (800452c <HAL_TIM_Base_MspInit+0x108>)
 80044bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044c2:	617b      	str	r3, [r7, #20]
 80044c4:	697b      	ldr	r3, [r7, #20]
}
 80044c6:	e02a      	b.n	800451e <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM16)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a19      	ldr	r2, [pc, #100]	@ (8004534 <HAL_TIM_Base_MspInit+0x110>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d114      	bne.n	80044fc <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80044d2:	4b16      	ldr	r3, [pc, #88]	@ (800452c <HAL_TIM_Base_MspInit+0x108>)
 80044d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044d6:	4a15      	ldr	r2, [pc, #84]	@ (800452c <HAL_TIM_Base_MspInit+0x108>)
 80044d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80044de:	4b13      	ldr	r3, [pc, #76]	@ (800452c <HAL_TIM_Base_MspInit+0x108>)
 80044e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044e6:	613b      	str	r3, [r7, #16]
 80044e8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80044ea:	2200      	movs	r2, #0
 80044ec:	2100      	movs	r1, #0
 80044ee:	2019      	movs	r0, #25
 80044f0:	f001 fe21 	bl	8006136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80044f4:	2019      	movs	r0, #25
 80044f6:	f001 fe38 	bl	800616a <HAL_NVIC_EnableIRQ>
}
 80044fa:	e010      	b.n	800451e <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM20)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a0d      	ldr	r2, [pc, #52]	@ (8004538 <HAL_TIM_Base_MspInit+0x114>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d10b      	bne.n	800451e <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8004506:	4b09      	ldr	r3, [pc, #36]	@ (800452c <HAL_TIM_Base_MspInit+0x108>)
 8004508:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800450a:	4a08      	ldr	r2, [pc, #32]	@ (800452c <HAL_TIM_Base_MspInit+0x108>)
 800450c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004510:	6613      	str	r3, [r2, #96]	@ 0x60
 8004512:	4b06      	ldr	r3, [pc, #24]	@ (800452c <HAL_TIM_Base_MspInit+0x108>)
 8004514:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004516:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800451a:	60fb      	str	r3, [r7, #12]
 800451c:	68fb      	ldr	r3, [r7, #12]
}
 800451e:	bf00      	nop
 8004520:	3720      	adds	r7, #32
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	40012c00 	.word	0x40012c00
 800452c:	40021000 	.word	0x40021000
 8004530:	40013400 	.word	0x40013400
 8004534:	40014400 	.word	0x40014400
 8004538:	40015000 	.word	0x40015000

0800453c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b08c      	sub	sp, #48	@ 0x30
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004544:	f107 031c 	add.w	r3, r7, #28
 8004548:	2200      	movs	r2, #0
 800454a:	601a      	str	r2, [r3, #0]
 800454c:	605a      	str	r2, [r3, #4]
 800454e:	609a      	str	r2, [r3, #8]
 8004550:	60da      	str	r2, [r3, #12]
 8004552:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a2f      	ldr	r2, [pc, #188]	@ (8004618 <HAL_TIM_Encoder_MspInit+0xdc>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d129      	bne.n	80045b2 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800455e:	4b2f      	ldr	r3, [pc, #188]	@ (800461c <HAL_TIM_Encoder_MspInit+0xe0>)
 8004560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004562:	4a2e      	ldr	r2, [pc, #184]	@ (800461c <HAL_TIM_Encoder_MspInit+0xe0>)
 8004564:	f043 0302 	orr.w	r3, r3, #2
 8004568:	6593      	str	r3, [r2, #88]	@ 0x58
 800456a:	4b2c      	ldr	r3, [pc, #176]	@ (800461c <HAL_TIM_Encoder_MspInit+0xe0>)
 800456c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	61bb      	str	r3, [r7, #24]
 8004574:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004576:	4b29      	ldr	r3, [pc, #164]	@ (800461c <HAL_TIM_Encoder_MspInit+0xe0>)
 8004578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800457a:	4a28      	ldr	r2, [pc, #160]	@ (800461c <HAL_TIM_Encoder_MspInit+0xe0>)
 800457c:	f043 0301 	orr.w	r3, r3, #1
 8004580:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004582:	4b26      	ldr	r3, [pc, #152]	@ (800461c <HAL_TIM_Encoder_MspInit+0xe0>)
 8004584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004586:	f003 0301 	and.w	r3, r3, #1
 800458a:	617b      	str	r3, [r7, #20]
 800458c:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Encoder_1_Pin|Encoder_1A7_Pin;
 800458e:	23c0      	movs	r3, #192	@ 0xc0
 8004590:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004592:	2302      	movs	r3, #2
 8004594:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004596:	2300      	movs	r3, #0
 8004598:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800459a:	2300      	movs	r3, #0
 800459c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800459e:	2302      	movs	r3, #2
 80045a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045a2:	f107 031c 	add.w	r3, r7, #28
 80045a6:	4619      	mov	r1, r3
 80045a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80045ac:	f002 f936 	bl	800681c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80045b0:	e02e      	b.n	8004610 <HAL_TIM_Encoder_MspInit+0xd4>
  else if(tim_encoderHandle->Instance==TIM4)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a1a      	ldr	r2, [pc, #104]	@ (8004620 <HAL_TIM_Encoder_MspInit+0xe4>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d129      	bne.n	8004610 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80045bc:	4b17      	ldr	r3, [pc, #92]	@ (800461c <HAL_TIM_Encoder_MspInit+0xe0>)
 80045be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045c0:	4a16      	ldr	r2, [pc, #88]	@ (800461c <HAL_TIM_Encoder_MspInit+0xe0>)
 80045c2:	f043 0304 	orr.w	r3, r3, #4
 80045c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80045c8:	4b14      	ldr	r3, [pc, #80]	@ (800461c <HAL_TIM_Encoder_MspInit+0xe0>)
 80045ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045cc:	f003 0304 	and.w	r3, r3, #4
 80045d0:	613b      	str	r3, [r7, #16]
 80045d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045d4:	4b11      	ldr	r3, [pc, #68]	@ (800461c <HAL_TIM_Encoder_MspInit+0xe0>)
 80045d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045d8:	4a10      	ldr	r2, [pc, #64]	@ (800461c <HAL_TIM_Encoder_MspInit+0xe0>)
 80045da:	f043 0301 	orr.w	r3, r3, #1
 80045de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80045e0:	4b0e      	ldr	r3, [pc, #56]	@ (800461c <HAL_TIM_Encoder_MspInit+0xe0>)
 80045e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	60fb      	str	r3, [r7, #12]
 80045ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder_2_Pin|Encoder_2A12_Pin;
 80045ec:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80045f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045f2:	2302      	movs	r3, #2
 80045f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045f6:	2300      	movs	r3, #0
 80045f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045fa:	2300      	movs	r3, #0
 80045fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80045fe:	230a      	movs	r3, #10
 8004600:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004602:	f107 031c 	add.w	r3, r7, #28
 8004606:	4619      	mov	r1, r3
 8004608:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800460c:	f002 f906 	bl	800681c <HAL_GPIO_Init>
}
 8004610:	bf00      	nop
 8004612:	3730      	adds	r7, #48	@ 0x30
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	40000400 	.word	0x40000400
 800461c:	40021000 	.word	0x40021000
 8004620:	40000800 	.word	0x40000800

08004624 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b08a      	sub	sp, #40	@ 0x28
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800462c:	f107 0314 	add.w	r3, r7, #20
 8004630:	2200      	movs	r2, #0
 8004632:	601a      	str	r2, [r3, #0]
 8004634:	605a      	str	r2, [r3, #4]
 8004636:	609a      	str	r2, [r3, #8]
 8004638:	60da      	str	r2, [r3, #12]
 800463a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a31      	ldr	r2, [pc, #196]	@ (8004708 <HAL_TIM_MspPostInit+0xe4>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d11d      	bne.n	8004682 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004646:	4b31      	ldr	r3, [pc, #196]	@ (800470c <HAL_TIM_MspPostInit+0xe8>)
 8004648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800464a:	4a30      	ldr	r2, [pc, #192]	@ (800470c <HAL_TIM_MspPostInit+0xe8>)
 800464c:	f043 0304 	orr.w	r3, r3, #4
 8004650:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004652:	4b2e      	ldr	r3, [pc, #184]	@ (800470c <HAL_TIM_MspPostInit+0xe8>)
 8004654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004656:	f003 0304 	and.w	r3, r3, #4
 800465a:	613b      	str	r3, [r7, #16]
 800465c:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = PWM_Servo_Pin;
 800465e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004662:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004664:	2302      	movs	r3, #2
 8004666:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004668:	2300      	movs	r3, #0
 800466a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800466c:	2300      	movs	r3, #0
 800466e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8004670:	2304      	movs	r3, #4
 8004672:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_Servo_GPIO_Port, &GPIO_InitStruct);
 8004674:	f107 0314 	add.w	r3, r7, #20
 8004678:	4619      	mov	r1, r3
 800467a:	4825      	ldr	r0, [pc, #148]	@ (8004710 <HAL_TIM_MspPostInit+0xec>)
 800467c:	f002 f8ce 	bl	800681c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM20_MspPostInit 1 */

  /* USER CODE END TIM20_MspPostInit 1 */
  }

}
 8004680:	e03d      	b.n	80046fe <HAL_TIM_MspPostInit+0xda>
  else if(timHandle->Instance==TIM20)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a23      	ldr	r2, [pc, #140]	@ (8004714 <HAL_TIM_MspPostInit+0xf0>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d138      	bne.n	80046fe <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800468c:	4b1f      	ldr	r3, [pc, #124]	@ (800470c <HAL_TIM_MspPostInit+0xe8>)
 800468e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004690:	4a1e      	ldr	r2, [pc, #120]	@ (800470c <HAL_TIM_MspPostInit+0xe8>)
 8004692:	f043 0302 	orr.w	r3, r3, #2
 8004696:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004698:	4b1c      	ldr	r3, [pc, #112]	@ (800470c <HAL_TIM_MspPostInit+0xe8>)
 800469a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800469c:	f003 0302 	and.w	r3, r3, #2
 80046a0:	60fb      	str	r3, [r7, #12]
 80046a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80046a4:	4b19      	ldr	r3, [pc, #100]	@ (800470c <HAL_TIM_MspPostInit+0xe8>)
 80046a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046a8:	4a18      	ldr	r2, [pc, #96]	@ (800470c <HAL_TIM_MspPostInit+0xe8>)
 80046aa:	f043 0304 	orr.w	r3, r3, #4
 80046ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80046b0:	4b16      	ldr	r3, [pc, #88]	@ (800470c <HAL_TIM_MspPostInit+0xe8>)
 80046b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046b4:	f003 0304 	and.w	r3, r3, #4
 80046b8:	60bb      	str	r3, [r7, #8]
 80046ba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_MD20A_24V_Pin;
 80046bc:	2304      	movs	r3, #4
 80046be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046c0:	2302      	movs	r3, #2
 80046c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046c4:	2300      	movs	r3, #0
 80046c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046c8:	2300      	movs	r3, #0
 80046ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 80046cc:	2303      	movs	r3, #3
 80046ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MD20A_24V_GPIO_Port, &GPIO_InitStruct);
 80046d0:	f107 0314 	add.w	r3, r7, #20
 80046d4:	4619      	mov	r1, r3
 80046d6:	4810      	ldr	r0, [pc, #64]	@ (8004718 <HAL_TIM_MspPostInit+0xf4>)
 80046d8:	f002 f8a0 	bl	800681c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_MD20A_18V_Pin;
 80046dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80046e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046e2:	2302      	movs	r3, #2
 80046e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046e6:	2300      	movs	r3, #0
 80046e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046ea:	2300      	movs	r3, #0
 80046ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM20;
 80046ee:	2306      	movs	r3, #6
 80046f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MD20A_18V_GPIO_Port, &GPIO_InitStruct);
 80046f2:	f107 0314 	add.w	r3, r7, #20
 80046f6:	4619      	mov	r1, r3
 80046f8:	4805      	ldr	r0, [pc, #20]	@ (8004710 <HAL_TIM_MspPostInit+0xec>)
 80046fa:	f002 f88f 	bl	800681c <HAL_GPIO_Init>
}
 80046fe:	bf00      	nop
 8004700:	3728      	adds	r7, #40	@ 0x28
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	40013400 	.word	0x40013400
 800470c:	40021000 	.word	0x40021000
 8004710:	48000800 	.word	0x48000800
 8004714:	40015000 	.word	0x40015000
 8004718:	48000400 	.word	0x48000400

0800471c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004720:	4b23      	ldr	r3, [pc, #140]	@ (80047b0 <MX_USART2_UART_Init+0x94>)
 8004722:	4a24      	ldr	r2, [pc, #144]	@ (80047b4 <MX_USART2_UART_Init+0x98>)
 8004724:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8004726:	4b22      	ldr	r3, [pc, #136]	@ (80047b0 <MX_USART2_UART_Init+0x94>)
 8004728:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 800472c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800472e:	4b20      	ldr	r3, [pc, #128]	@ (80047b0 <MX_USART2_UART_Init+0x94>)
 8004730:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004734:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004736:	4b1e      	ldr	r3, [pc, #120]	@ (80047b0 <MX_USART2_UART_Init+0x94>)
 8004738:	2200      	movs	r2, #0
 800473a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 800473c:	4b1c      	ldr	r3, [pc, #112]	@ (80047b0 <MX_USART2_UART_Init+0x94>)
 800473e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004742:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004744:	4b1a      	ldr	r3, [pc, #104]	@ (80047b0 <MX_USART2_UART_Init+0x94>)
 8004746:	220c      	movs	r2, #12
 8004748:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800474a:	4b19      	ldr	r3, [pc, #100]	@ (80047b0 <MX_USART2_UART_Init+0x94>)
 800474c:	2200      	movs	r2, #0
 800474e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004750:	4b17      	ldr	r3, [pc, #92]	@ (80047b0 <MX_USART2_UART_Init+0x94>)
 8004752:	2200      	movs	r2, #0
 8004754:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004756:	4b16      	ldr	r3, [pc, #88]	@ (80047b0 <MX_USART2_UART_Init+0x94>)
 8004758:	2200      	movs	r2, #0
 800475a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800475c:	4b14      	ldr	r3, [pc, #80]	@ (80047b0 <MX_USART2_UART_Init+0x94>)
 800475e:	2200      	movs	r2, #0
 8004760:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004762:	4b13      	ldr	r3, [pc, #76]	@ (80047b0 <MX_USART2_UART_Init+0x94>)
 8004764:	2200      	movs	r2, #0
 8004766:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004768:	4811      	ldr	r0, [pc, #68]	@ (80047b0 <MX_USART2_UART_Init+0x94>)
 800476a:	f005 fcbf 	bl	800a0ec <HAL_UART_Init>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d001      	beq.n	8004778 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8004774:	f7ff f9bc 	bl	8003af0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004778:	2100      	movs	r1, #0
 800477a:	480d      	ldr	r0, [pc, #52]	@ (80047b0 <MX_USART2_UART_Init+0x94>)
 800477c:	f008 f841 	bl	800c802 <HAL_UARTEx_SetTxFifoThreshold>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d001      	beq.n	800478a <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8004786:	f7ff f9b3 	bl	8003af0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800478a:	2100      	movs	r1, #0
 800478c:	4808      	ldr	r0, [pc, #32]	@ (80047b0 <MX_USART2_UART_Init+0x94>)
 800478e:	f008 f876 	bl	800c87e <HAL_UARTEx_SetRxFifoThreshold>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d001      	beq.n	800479c <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8004798:	f7ff f9aa 	bl	8003af0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800479c:	4804      	ldr	r0, [pc, #16]	@ (80047b0 <MX_USART2_UART_Init+0x94>)
 800479e:	f007 fff7 	bl	800c790 <HAL_UARTEx_DisableFifoMode>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d001      	beq.n	80047ac <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 80047a8:	f7ff f9a2 	bl	8003af0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80047ac:	bf00      	nop
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	200018ac 	.word	0x200018ac
 80047b4:	40004400 	.word	0x40004400

080047b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b09e      	sub	sp, #120	@ 0x78
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047c0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80047c4:	2200      	movs	r2, #0
 80047c6:	601a      	str	r2, [r3, #0]
 80047c8:	605a      	str	r2, [r3, #4]
 80047ca:	609a      	str	r2, [r3, #8]
 80047cc:	60da      	str	r2, [r3, #12]
 80047ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80047d0:	f107 0310 	add.w	r3, r7, #16
 80047d4:	2254      	movs	r2, #84	@ 0x54
 80047d6:	2100      	movs	r1, #0
 80047d8:	4618      	mov	r0, r3
 80047da:	f008 fdd3 	bl	800d384 <memset>
  if(uartHandle->Instance==USART2)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a37      	ldr	r2, [pc, #220]	@ (80048c0 <HAL_UART_MspInit+0x108>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d167      	bne.n	80048b8 <HAL_UART_MspInit+0x100>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80047e8:	2302      	movs	r3, #2
 80047ea:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80047ec:	2300      	movs	r3, #0
 80047ee:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80047f0:	f107 0310 	add.w	r3, r7, #16
 80047f4:	4618      	mov	r0, r3
 80047f6:	f002 ffa5 	bl	8007744 <HAL_RCCEx_PeriphCLKConfig>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d001      	beq.n	8004804 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004800:	f7ff f976 	bl	8003af0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004804:	4b2f      	ldr	r3, [pc, #188]	@ (80048c4 <HAL_UART_MspInit+0x10c>)
 8004806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004808:	4a2e      	ldr	r2, [pc, #184]	@ (80048c4 <HAL_UART_MspInit+0x10c>)
 800480a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800480e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004810:	4b2c      	ldr	r3, [pc, #176]	@ (80048c4 <HAL_UART_MspInit+0x10c>)
 8004812:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004814:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004818:	60fb      	str	r3, [r7, #12]
 800481a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800481c:	4b29      	ldr	r3, [pc, #164]	@ (80048c4 <HAL_UART_MspInit+0x10c>)
 800481e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004820:	4a28      	ldr	r2, [pc, #160]	@ (80048c4 <HAL_UART_MspInit+0x10c>)
 8004822:	f043 0301 	orr.w	r3, r3, #1
 8004826:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004828:	4b26      	ldr	r3, [pc, #152]	@ (80048c4 <HAL_UART_MspInit+0x10c>)
 800482a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800482c:	f003 0301 	and.w	r3, r3, #1
 8004830:	60bb      	str	r3, [r7, #8]
 8004832:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004834:	230c      	movs	r3, #12
 8004836:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004838:	2302      	movs	r3, #2
 800483a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800483c:	2300      	movs	r3, #0
 800483e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004840:	2300      	movs	r3, #0
 8004842:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004844:	2307      	movs	r3, #7
 8004846:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004848:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800484c:	4619      	mov	r1, r3
 800484e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004852:	f001 ffe3 	bl	800681c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 8004856:	4b1c      	ldr	r3, [pc, #112]	@ (80048c8 <HAL_UART_MspInit+0x110>)
 8004858:	4a1c      	ldr	r2, [pc, #112]	@ (80048cc <HAL_UART_MspInit+0x114>)
 800485a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800485c:	4b1a      	ldr	r3, [pc, #104]	@ (80048c8 <HAL_UART_MspInit+0x110>)
 800485e:	221b      	movs	r2, #27
 8004860:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004862:	4b19      	ldr	r3, [pc, #100]	@ (80048c8 <HAL_UART_MspInit+0x110>)
 8004864:	2210      	movs	r2, #16
 8004866:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004868:	4b17      	ldr	r3, [pc, #92]	@ (80048c8 <HAL_UART_MspInit+0x110>)
 800486a:	2200      	movs	r2, #0
 800486c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800486e:	4b16      	ldr	r3, [pc, #88]	@ (80048c8 <HAL_UART_MspInit+0x110>)
 8004870:	2280      	movs	r2, #128	@ 0x80
 8004872:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004874:	4b14      	ldr	r3, [pc, #80]	@ (80048c8 <HAL_UART_MspInit+0x110>)
 8004876:	2200      	movs	r2, #0
 8004878:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800487a:	4b13      	ldr	r3, [pc, #76]	@ (80048c8 <HAL_UART_MspInit+0x110>)
 800487c:	2200      	movs	r2, #0
 800487e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004880:	4b11      	ldr	r3, [pc, #68]	@ (80048c8 <HAL_UART_MspInit+0x110>)
 8004882:	2200      	movs	r2, #0
 8004884:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004886:	4b10      	ldr	r3, [pc, #64]	@ (80048c8 <HAL_UART_MspInit+0x110>)
 8004888:	2200      	movs	r2, #0
 800488a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800488c:	480e      	ldr	r0, [pc, #56]	@ (80048c8 <HAL_UART_MspInit+0x110>)
 800488e:	f001 fc87 	bl	80061a0 <HAL_DMA_Init>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d001      	beq.n	800489c <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8004898:	f7ff f92a 	bl	8003af0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4a0a      	ldr	r2, [pc, #40]	@ (80048c8 <HAL_UART_MspInit+0x110>)
 80048a0:	67da      	str	r2, [r3, #124]	@ 0x7c
 80048a2:	4a09      	ldr	r2, [pc, #36]	@ (80048c8 <HAL_UART_MspInit+0x110>)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80048a8:	2200      	movs	r2, #0
 80048aa:	2100      	movs	r1, #0
 80048ac:	2026      	movs	r0, #38	@ 0x26
 80048ae:	f001 fc42 	bl	8006136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80048b2:	2026      	movs	r0, #38	@ 0x26
 80048b4:	f001 fc59 	bl	800616a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80048b8:	bf00      	nop
 80048ba:	3778      	adds	r7, #120	@ 0x78
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	40004400 	.word	0x40004400
 80048c4:	40021000 	.word	0x40021000
 80048c8:	20001978 	.word	0x20001978
 80048cc:	40020008 	.word	0x40020008

080048d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80048d0:	480d      	ldr	r0, [pc, #52]	@ (8004908 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80048d2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80048d4:	f7ff fa5a 	bl	8003d8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80048d8:	480c      	ldr	r0, [pc, #48]	@ (800490c <LoopForever+0x6>)
  ldr r1, =_edata
 80048da:	490d      	ldr	r1, [pc, #52]	@ (8004910 <LoopForever+0xa>)
  ldr r2, =_sidata
 80048dc:	4a0d      	ldr	r2, [pc, #52]	@ (8004914 <LoopForever+0xe>)
  movs r3, #0
 80048de:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80048e0:	e002      	b.n	80048e8 <LoopCopyDataInit>

080048e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80048e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80048e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80048e6:	3304      	adds	r3, #4

080048e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80048e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80048ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80048ec:	d3f9      	bcc.n	80048e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80048ee:	4a0a      	ldr	r2, [pc, #40]	@ (8004918 <LoopForever+0x12>)
  ldr r4, =_ebss
 80048f0:	4c0a      	ldr	r4, [pc, #40]	@ (800491c <LoopForever+0x16>)
  movs r3, #0
 80048f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80048f4:	e001      	b.n	80048fa <LoopFillZerobss>

080048f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80048f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80048f8:	3204      	adds	r2, #4

080048fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80048fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80048fc:	d3fb      	bcc.n	80048f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80048fe:	f008 fd4f 	bl	800d3a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004902:	f7fd fe79 	bl	80025f8 <main>

08004906 <LoopForever>:

LoopForever:
    b LoopForever
 8004906:	e7fe      	b.n	8004906 <LoopForever>
  ldr   r0, =_estack
 8004908:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800490c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004910:	2000025c 	.word	0x2000025c
  ldr r2, =_sidata
 8004914:	0800e4c4 	.word	0x0800e4c4
  ldr r2, =_sbss
 8004918:	20000260 	.word	0x20000260
  ldr r4, =_ebss
 800491c:	20001b14 	.word	0x20001b14

08004920 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004920:	e7fe      	b.n	8004920 <ADC1_2_IRQHandler>

08004922 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004922:	b580      	push	{r7, lr}
 8004924:	b082      	sub	sp, #8
 8004926:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004928:	2300      	movs	r3, #0
 800492a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800492c:	2003      	movs	r0, #3
 800492e:	f001 fbf7 	bl	8006120 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004932:	2000      	movs	r0, #0
 8004934:	f000 f80e 	bl	8004954 <HAL_InitTick>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d002      	beq.n	8004944 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	71fb      	strb	r3, [r7, #7]
 8004942:	e001      	b.n	8004948 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004944:	f7ff f978 	bl	8003c38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004948:	79fb      	ldrb	r3, [r7, #7]

}
 800494a:	4618      	mov	r0, r3
 800494c:	3708      	adds	r7, #8
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
	...

08004954 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800495c:	2300      	movs	r3, #0
 800495e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004960:	4b16      	ldr	r3, [pc, #88]	@ (80049bc <HAL_InitTick+0x68>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d022      	beq.n	80049ae <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004968:	4b15      	ldr	r3, [pc, #84]	@ (80049c0 <HAL_InitTick+0x6c>)
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	4b13      	ldr	r3, [pc, #76]	@ (80049bc <HAL_InitTick+0x68>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004974:	fbb1 f3f3 	udiv	r3, r1, r3
 8004978:	fbb2 f3f3 	udiv	r3, r2, r3
 800497c:	4618      	mov	r0, r3
 800497e:	f001 fc02 	bl	8006186 <HAL_SYSTICK_Config>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d10f      	bne.n	80049a8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2b0f      	cmp	r3, #15
 800498c:	d809      	bhi.n	80049a2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800498e:	2200      	movs	r2, #0
 8004990:	6879      	ldr	r1, [r7, #4]
 8004992:	f04f 30ff 	mov.w	r0, #4294967295
 8004996:	f001 fbce 	bl	8006136 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800499a:	4a0a      	ldr	r2, [pc, #40]	@ (80049c4 <HAL_InitTick+0x70>)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6013      	str	r3, [r2, #0]
 80049a0:	e007      	b.n	80049b2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	73fb      	strb	r3, [r7, #15]
 80049a6:	e004      	b.n	80049b2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	73fb      	strb	r3, [r7, #15]
 80049ac:	e001      	b.n	80049b2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80049b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3710      	adds	r7, #16
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	20000208 	.word	0x20000208
 80049c0:	20000200 	.word	0x20000200
 80049c4:	20000204 	.word	0x20000204

080049c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80049c8:	b480      	push	{r7}
 80049ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80049cc:	4b05      	ldr	r3, [pc, #20]	@ (80049e4 <HAL_IncTick+0x1c>)
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	4b05      	ldr	r3, [pc, #20]	@ (80049e8 <HAL_IncTick+0x20>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4413      	add	r3, r2
 80049d6:	4a03      	ldr	r2, [pc, #12]	@ (80049e4 <HAL_IncTick+0x1c>)
 80049d8:	6013      	str	r3, [r2, #0]
}
 80049da:	bf00      	nop
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr
 80049e4:	200019d8 	.word	0x200019d8
 80049e8:	20000208 	.word	0x20000208

080049ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80049ec:	b480      	push	{r7}
 80049ee:	af00      	add	r7, sp, #0
  return uwTick;
 80049f0:	4b03      	ldr	r3, [pc, #12]	@ (8004a00 <HAL_GetTick+0x14>)
 80049f2:	681b      	ldr	r3, [r3, #0]
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	200019d8 	.word	0x200019d8

08004a04 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	431a      	orrs	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	609a      	str	r2, [r3, #8]
}
 8004a1e:	bf00      	nop
 8004a20:	370c      	adds	r7, #12
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr

08004a2a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004a2a:	b480      	push	{r7}
 8004a2c:	b083      	sub	sp, #12
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
 8004a32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	431a      	orrs	r2, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	609a      	str	r2, [r3, #8]
}
 8004a44:	bf00      	nop
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b087      	sub	sp, #28
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	607a      	str	r2, [r7, #4]
 8004a78:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	3360      	adds	r3, #96	@ 0x60
 8004a7e:	461a      	mov	r2, r3
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	4413      	add	r3, r2
 8004a86:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	4b08      	ldr	r3, [pc, #32]	@ (8004ab0 <LL_ADC_SetOffset+0x44>)
 8004a8e:	4013      	ands	r3, r2
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8004a96:	683a      	ldr	r2, [r7, #0]
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004aa4:	bf00      	nop
 8004aa6:	371c      	adds	r7, #28
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr
 8004ab0:	03fff000 	.word	0x03fff000

08004ab4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	3360      	adds	r3, #96	@ 0x60
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	4413      	add	r3, r2
 8004aca:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3714      	adds	r7, #20
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b087      	sub	sp, #28
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	3360      	adds	r3, #96	@ 0x60
 8004af0:	461a      	mov	r2, r3
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	4413      	add	r3, r2
 8004af8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	431a      	orrs	r2, r3
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004b0a:	bf00      	nop
 8004b0c:	371c      	adds	r7, #28
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr

08004b16 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b087      	sub	sp, #28
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	60f8      	str	r0, [r7, #12]
 8004b1e:	60b9      	str	r1, [r7, #8]
 8004b20:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	3360      	adds	r3, #96	@ 0x60
 8004b26:	461a      	mov	r2, r3
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	4413      	add	r3, r2
 8004b2e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	431a      	orrs	r2, r3
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004b40:	bf00      	nop
 8004b42:	371c      	adds	r7, #28
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b087      	sub	sp, #28
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	3360      	adds	r3, #96	@ 0x60
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	4413      	add	r3, r2
 8004b64:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	431a      	orrs	r2, r3
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8004b76:	bf00      	nop
 8004b78:	371c      	adds	r7, #28
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr

08004b82 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004b82:	b480      	push	{r7}
 8004b84:	b083      	sub	sp, #12
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
 8004b8a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	695b      	ldr	r3, [r3, #20]
 8004b90:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	431a      	orrs	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	615a      	str	r2, [r3, #20]
}
 8004b9c:	bf00      	nop
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b087      	sub	sp, #28
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	3330      	adds	r3, #48	@ 0x30
 8004bb8:	461a      	mov	r2, r3
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	0a1b      	lsrs	r3, r3, #8
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	f003 030c 	and.w	r3, r3, #12
 8004bc4:	4413      	add	r3, r2
 8004bc6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	f003 031f 	and.w	r3, r3, #31
 8004bd2:	211f      	movs	r1, #31
 8004bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8004bd8:	43db      	mvns	r3, r3
 8004bda:	401a      	ands	r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	0e9b      	lsrs	r3, r3, #26
 8004be0:	f003 011f 	and.w	r1, r3, #31
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	f003 031f 	and.w	r3, r3, #31
 8004bea:	fa01 f303 	lsl.w	r3, r1, r3
 8004bee:	431a      	orrs	r2, r3
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004bf4:	bf00      	nop
 8004bf6:	371c      	adds	r7, #28
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b087      	sub	sp, #28
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	3314      	adds	r3, #20
 8004c10:	461a      	mov	r2, r3
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	0e5b      	lsrs	r3, r3, #25
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	f003 0304 	and.w	r3, r3, #4
 8004c1c:	4413      	add	r3, r2
 8004c1e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	0d1b      	lsrs	r3, r3, #20
 8004c28:	f003 031f 	and.w	r3, r3, #31
 8004c2c:	2107      	movs	r1, #7
 8004c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c32:	43db      	mvns	r3, r3
 8004c34:	401a      	ands	r2, r3
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	0d1b      	lsrs	r3, r3, #20
 8004c3a:	f003 031f 	and.w	r3, r3, #31
 8004c3e:	6879      	ldr	r1, [r7, #4]
 8004c40:	fa01 f303 	lsl.w	r3, r1, r3
 8004c44:	431a      	orrs	r2, r3
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004c4a:	bf00      	nop
 8004c4c:	371c      	adds	r7, #28
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
	...

08004c58 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c70:	43db      	mvns	r3, r3
 8004c72:	401a      	ands	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f003 0318 	and.w	r3, r3, #24
 8004c7a:	4908      	ldr	r1, [pc, #32]	@ (8004c9c <LL_ADC_SetChannelSingleDiff+0x44>)
 8004c7c:	40d9      	lsrs	r1, r3
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	400b      	ands	r3, r1
 8004c82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c86:	431a      	orrs	r2, r3
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004c8e:	bf00      	nop
 8004c90:	3714      	adds	r7, #20
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	0007ffff 	.word	0x0007ffff

08004ca0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f003 031f 	and.w	r3, r3, #31
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004ccc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	6093      	str	r3, [r2, #8]
}
 8004cd4:	bf00      	nop
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004cf0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004cf4:	d101      	bne.n	8004cfa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e000      	b.n	8004cfc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004d18:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004d1c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004d24:	bf00      	nop
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d44:	d101      	bne.n	8004d4a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004d46:	2301      	movs	r3, #1
 8004d48:	e000      	b.n	8004d4c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004d68:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004d6c:	f043 0201 	orr.w	r2, r3, #1
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004d74:	bf00      	nop
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	f003 0301 	and.w	r3, r3, #1
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d101      	bne.n	8004d98 <LL_ADC_IsEnabled+0x18>
 8004d94:	2301      	movs	r3, #1
 8004d96:	e000      	b.n	8004d9a <LL_ADC_IsEnabled+0x1a>
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	370c      	adds	r7, #12
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr

08004da6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004da6:	b480      	push	{r7}
 8004da8:	b083      	sub	sp, #12
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004db6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004dba:	f043 0204 	orr.w	r2, r3, #4
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004dc2:	bf00      	nop
 8004dc4:	370c      	adds	r7, #12
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr

08004dce <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004dce:	b480      	push	{r7}
 8004dd0:	b083      	sub	sp, #12
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f003 0304 	and.w	r3, r3, #4
 8004dde:	2b04      	cmp	r3, #4
 8004de0:	d101      	bne.n	8004de6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004de2:	2301      	movs	r3, #1
 8004de4:	e000      	b.n	8004de8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	f003 0308 	and.w	r3, r3, #8
 8004e04:	2b08      	cmp	r3, #8
 8004e06:	d101      	bne.n	8004e0c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e000      	b.n	8004e0e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	370c      	adds	r7, #12
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
	...

08004e1c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004e1c:	b590      	push	{r4, r7, lr}
 8004e1e:	b089      	sub	sp, #36	@ 0x24
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e24:	2300      	movs	r3, #0
 8004e26:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d101      	bne.n	8004e36 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e1a9      	b.n	800518a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d109      	bne.n	8004e58 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f7fd fa5d 	bl	8002304 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f7ff ff3f 	bl	8004ce0 <LL_ADC_IsDeepPowerDownEnabled>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d004      	beq.n	8004e72 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f7ff ff25 	bl	8004cbc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7ff ff5a 	bl	8004d30 <LL_ADC_IsInternalRegulatorEnabled>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d115      	bne.n	8004eae <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4618      	mov	r0, r3
 8004e88:	f7ff ff3e 	bl	8004d08 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004e8c:	4b9c      	ldr	r3, [pc, #624]	@ (8005100 <HAL_ADC_Init+0x2e4>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	099b      	lsrs	r3, r3, #6
 8004e92:	4a9c      	ldr	r2, [pc, #624]	@ (8005104 <HAL_ADC_Init+0x2e8>)
 8004e94:	fba2 2303 	umull	r2, r3, r2, r3
 8004e98:	099b      	lsrs	r3, r3, #6
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	005b      	lsls	r3, r3, #1
 8004e9e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004ea0:	e002      	b.n	8004ea8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1f9      	bne.n	8004ea2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7ff ff3c 	bl	8004d30 <LL_ADC_IsInternalRegulatorEnabled>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d10d      	bne.n	8004eda <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ec2:	f043 0210 	orr.w	r2, r3, #16
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ece:	f043 0201 	orr.w	r2, r3, #1
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7ff ff75 	bl	8004dce <LL_ADC_REG_IsConversionOngoing>
 8004ee4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eea:	f003 0310 	and.w	r3, r3, #16
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	f040 8142 	bne.w	8005178 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	f040 813e 	bne.w	8005178 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f00:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004f04:	f043 0202 	orr.w	r2, r3, #2
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4618      	mov	r0, r3
 8004f12:	f7ff ff35 	bl	8004d80 <LL_ADC_IsEnabled>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d141      	bne.n	8004fa0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f24:	d004      	beq.n	8004f30 <HAL_ADC_Init+0x114>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a77      	ldr	r2, [pc, #476]	@ (8005108 <HAL_ADC_Init+0x2ec>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d10f      	bne.n	8004f50 <HAL_ADC_Init+0x134>
 8004f30:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004f34:	f7ff ff24 	bl	8004d80 <LL_ADC_IsEnabled>
 8004f38:	4604      	mov	r4, r0
 8004f3a:	4873      	ldr	r0, [pc, #460]	@ (8005108 <HAL_ADC_Init+0x2ec>)
 8004f3c:	f7ff ff20 	bl	8004d80 <LL_ADC_IsEnabled>
 8004f40:	4603      	mov	r3, r0
 8004f42:	4323      	orrs	r3, r4
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	bf0c      	ite	eq
 8004f48:	2301      	moveq	r3, #1
 8004f4a:	2300      	movne	r3, #0
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	e012      	b.n	8004f76 <HAL_ADC_Init+0x15a>
 8004f50:	486e      	ldr	r0, [pc, #440]	@ (800510c <HAL_ADC_Init+0x2f0>)
 8004f52:	f7ff ff15 	bl	8004d80 <LL_ADC_IsEnabled>
 8004f56:	4604      	mov	r4, r0
 8004f58:	486d      	ldr	r0, [pc, #436]	@ (8005110 <HAL_ADC_Init+0x2f4>)
 8004f5a:	f7ff ff11 	bl	8004d80 <LL_ADC_IsEnabled>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	431c      	orrs	r4, r3
 8004f62:	486c      	ldr	r0, [pc, #432]	@ (8005114 <HAL_ADC_Init+0x2f8>)
 8004f64:	f7ff ff0c 	bl	8004d80 <LL_ADC_IsEnabled>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	4323      	orrs	r3, r4
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	bf0c      	ite	eq
 8004f70:	2301      	moveq	r3, #1
 8004f72:	2300      	movne	r3, #0
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d012      	beq.n	8004fa0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f82:	d004      	beq.n	8004f8e <HAL_ADC_Init+0x172>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a5f      	ldr	r2, [pc, #380]	@ (8005108 <HAL_ADC_Init+0x2ec>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d101      	bne.n	8004f92 <HAL_ADC_Init+0x176>
 8004f8e:	4a62      	ldr	r2, [pc, #392]	@ (8005118 <HAL_ADC_Init+0x2fc>)
 8004f90:	e000      	b.n	8004f94 <HAL_ADC_Init+0x178>
 8004f92:	4a62      	ldr	r2, [pc, #392]	@ (800511c <HAL_ADC_Init+0x300>)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	4619      	mov	r1, r3
 8004f9a:	4610      	mov	r0, r2
 8004f9c:	f7ff fd32 	bl	8004a04 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	7f5b      	ldrb	r3, [r3, #29]
 8004fa4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004faa:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004fb0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004fb6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004fbe:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d106      	bne.n	8004fdc <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	045b      	lsls	r3, r3, #17
 8004fd6:	69ba      	ldr	r2, [r7, #24]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d009      	beq.n	8004ff8 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fe8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ff0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004ff2:	69ba      	ldr	r2, [r7, #24]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68da      	ldr	r2, [r3, #12]
 8004ffe:	4b48      	ldr	r3, [pc, #288]	@ (8005120 <HAL_ADC_Init+0x304>)
 8005000:	4013      	ands	r3, r2
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	6812      	ldr	r2, [r2, #0]
 8005006:	69b9      	ldr	r1, [r7, #24]
 8005008:	430b      	orrs	r3, r1
 800500a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	430a      	orrs	r2, r1
 8005020:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4618      	mov	r0, r3
 8005028:	f7ff fee4 	bl	8004df4 <LL_ADC_INJ_IsConversionOngoing>
 800502c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d17f      	bne.n	8005134 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d17c      	bne.n	8005134 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800503e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005046:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005048:	4313      	orrs	r3, r2
 800504a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005056:	f023 0302 	bic.w	r3, r3, #2
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	6812      	ldr	r2, [r2, #0]
 800505e:	69b9      	ldr	r1, [r7, #24]
 8005060:	430b      	orrs	r3, r1
 8005062:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	691b      	ldr	r3, [r3, #16]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d017      	beq.n	800509c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	691a      	ldr	r2, [r3, #16]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800507a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005084:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005088:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	6911      	ldr	r1, [r2, #16]
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	6812      	ldr	r2, [r2, #0]
 8005094:	430b      	orrs	r3, r1
 8005096:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800509a:	e013      	b.n	80050c4 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	691a      	ldr	r2, [r3, #16]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80050aa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	6812      	ldr	r2, [r2, #0]
 80050b8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80050bc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80050c0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d12a      	bne.n	8005124 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80050d8:	f023 0304 	bic.w	r3, r3, #4
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80050e4:	4311      	orrs	r1, r2
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80050ea:	4311      	orrs	r1, r2
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80050f0:	430a      	orrs	r2, r1
 80050f2:	431a      	orrs	r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f042 0201 	orr.w	r2, r2, #1
 80050fc:	611a      	str	r2, [r3, #16]
 80050fe:	e019      	b.n	8005134 <HAL_ADC_Init+0x318>
 8005100:	20000200 	.word	0x20000200
 8005104:	053e2d63 	.word	0x053e2d63
 8005108:	50000100 	.word	0x50000100
 800510c:	50000400 	.word	0x50000400
 8005110:	50000500 	.word	0x50000500
 8005114:	50000600 	.word	0x50000600
 8005118:	50000300 	.word	0x50000300
 800511c:	50000700 	.word	0x50000700
 8005120:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	691a      	ldr	r2, [r3, #16]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f022 0201 	bic.w	r2, r2, #1
 8005132:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	695b      	ldr	r3, [r3, #20]
 8005138:	2b01      	cmp	r3, #1
 800513a:	d10c      	bne.n	8005156 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005142:	f023 010f 	bic.w	r1, r3, #15
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a1b      	ldr	r3, [r3, #32]
 800514a:	1e5a      	subs	r2, r3, #1
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	430a      	orrs	r2, r1
 8005152:	631a      	str	r2, [r3, #48]	@ 0x30
 8005154:	e007      	b.n	8005166 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f022 020f 	bic.w	r2, r2, #15
 8005164:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800516a:	f023 0303 	bic.w	r3, r3, #3
 800516e:	f043 0201 	orr.w	r2, r3, #1
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005176:	e007      	b.n	8005188 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800517c:	f043 0210 	orr.w	r2, r3, #16
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005188:	7ffb      	ldrb	r3, [r7, #31]
}
 800518a:	4618      	mov	r0, r3
 800518c:	3724      	adds	r7, #36	@ 0x24
 800518e:	46bd      	mov	sp, r7
 8005190:	bd90      	pop	{r4, r7, pc}
 8005192:	bf00      	nop

08005194 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b086      	sub	sp, #24
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80051a4:	d004      	beq.n	80051b0 <HAL_ADC_Start+0x1c>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a67      	ldr	r2, [pc, #412]	@ (8005348 <HAL_ADC_Start+0x1b4>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d101      	bne.n	80051b4 <HAL_ADC_Start+0x20>
 80051b0:	4b66      	ldr	r3, [pc, #408]	@ (800534c <HAL_ADC_Start+0x1b8>)
 80051b2:	e000      	b.n	80051b6 <HAL_ADC_Start+0x22>
 80051b4:	4b66      	ldr	r3, [pc, #408]	@ (8005350 <HAL_ADC_Start+0x1bc>)
 80051b6:	4618      	mov	r0, r3
 80051b8:	f7ff fd72 	bl	8004ca0 <LL_ADC_GetMultimode>
 80051bc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4618      	mov	r0, r3
 80051c4:	f7ff fe03 	bl	8004dce <LL_ADC_REG_IsConversionOngoing>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	f040 80b4 	bne.w	8005338 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d101      	bne.n	80051de <HAL_ADC_Start+0x4a>
 80051da:	2302      	movs	r3, #2
 80051dc:	e0af      	b.n	800533e <HAL_ADC_Start+0x1aa>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2201      	movs	r2, #1
 80051e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 fd06 	bl	8005bf8 <ADC_Enable>
 80051ec:	4603      	mov	r3, r0
 80051ee:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80051f0:	7dfb      	ldrb	r3, [r7, #23]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	f040 809b 	bne.w	800532e <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051fc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005200:	f023 0301 	bic.w	r3, r3, #1
 8005204:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a4d      	ldr	r2, [pc, #308]	@ (8005348 <HAL_ADC_Start+0x1b4>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d009      	beq.n	800522a <HAL_ADC_Start+0x96>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a4e      	ldr	r2, [pc, #312]	@ (8005354 <HAL_ADC_Start+0x1c0>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d002      	beq.n	8005226 <HAL_ADC_Start+0x92>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	e003      	b.n	800522e <HAL_ADC_Start+0x9a>
 8005226:	4b4c      	ldr	r3, [pc, #304]	@ (8005358 <HAL_ADC_Start+0x1c4>)
 8005228:	e001      	b.n	800522e <HAL_ADC_Start+0x9a>
 800522a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	6812      	ldr	r2, [r2, #0]
 8005232:	4293      	cmp	r3, r2
 8005234:	d002      	beq.n	800523c <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d105      	bne.n	8005248 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005240:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800524c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005250:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005254:	d106      	bne.n	8005264 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800525a:	f023 0206 	bic.w	r2, r3, #6
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	661a      	str	r2, [r3, #96]	@ 0x60
 8005262:	e002      	b.n	800526a <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	221c      	movs	r2, #28
 8005270:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a32      	ldr	r2, [pc, #200]	@ (8005348 <HAL_ADC_Start+0x1b4>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d009      	beq.n	8005298 <HAL_ADC_Start+0x104>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a32      	ldr	r2, [pc, #200]	@ (8005354 <HAL_ADC_Start+0x1c0>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d002      	beq.n	8005294 <HAL_ADC_Start+0x100>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	e003      	b.n	800529c <HAL_ADC_Start+0x108>
 8005294:	4b30      	ldr	r3, [pc, #192]	@ (8005358 <HAL_ADC_Start+0x1c4>)
 8005296:	e001      	b.n	800529c <HAL_ADC_Start+0x108>
 8005298:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	6812      	ldr	r2, [r2, #0]
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d008      	beq.n	80052b6 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d005      	beq.n	80052b6 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	2b05      	cmp	r3, #5
 80052ae:	d002      	beq.n	80052b6 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	2b09      	cmp	r3, #9
 80052b4:	d114      	bne.n	80052e0 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d007      	beq.n	80052d4 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052c8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80052cc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4618      	mov	r0, r3
 80052da:	f7ff fd64 	bl	8004da6 <LL_ADC_REG_StartConversion>
 80052de:	e02d      	b.n	800533c <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052e4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a15      	ldr	r2, [pc, #84]	@ (8005348 <HAL_ADC_Start+0x1b4>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d009      	beq.n	800530a <HAL_ADC_Start+0x176>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a16      	ldr	r2, [pc, #88]	@ (8005354 <HAL_ADC_Start+0x1c0>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d002      	beq.n	8005306 <HAL_ADC_Start+0x172>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	e003      	b.n	800530e <HAL_ADC_Start+0x17a>
 8005306:	4b14      	ldr	r3, [pc, #80]	@ (8005358 <HAL_ADC_Start+0x1c4>)
 8005308:	e001      	b.n	800530e <HAL_ADC_Start+0x17a>
 800530a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800530e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005318:	2b00      	cmp	r3, #0
 800531a:	d00f      	beq.n	800533c <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005320:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005324:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800532c:	e006      	b.n	800533c <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8005336:	e001      	b.n	800533c <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005338:	2302      	movs	r3, #2
 800533a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800533c:	7dfb      	ldrb	r3, [r7, #23]
}
 800533e:	4618      	mov	r0, r3
 8005340:	3718      	adds	r7, #24
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	50000100 	.word	0x50000100
 800534c:	50000300 	.word	0x50000300
 8005350:	50000700 	.word	0x50000700
 8005354:	50000500 	.word	0x50000500
 8005358:	50000400 	.word	0x50000400

0800535c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800536a:	4618      	mov	r0, r3
 800536c:	370c      	adds	r7, #12
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
	...

08005378 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b0b6      	sub	sp, #216	@ 0xd8
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005382:	2300      	movs	r3, #0
 8005384:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005388:	2300      	movs	r3, #0
 800538a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005392:	2b01      	cmp	r3, #1
 8005394:	d102      	bne.n	800539c <HAL_ADC_ConfigChannel+0x24>
 8005396:	2302      	movs	r3, #2
 8005398:	f000 bc13 	b.w	8005bc2 <HAL_ADC_ConfigChannel+0x84a>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4618      	mov	r0, r3
 80053aa:	f7ff fd10 	bl	8004dce <LL_ADC_REG_IsConversionOngoing>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f040 83f3 	bne.w	8005b9c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6818      	ldr	r0, [r3, #0]
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	6859      	ldr	r1, [r3, #4]
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	461a      	mov	r2, r3
 80053c4:	f7ff fbf0 	bl	8004ba8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4618      	mov	r0, r3
 80053ce:	f7ff fcfe 	bl	8004dce <LL_ADC_REG_IsConversionOngoing>
 80053d2:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4618      	mov	r0, r3
 80053dc:	f7ff fd0a 	bl	8004df4 <LL_ADC_INJ_IsConversionOngoing>
 80053e0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80053e4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	f040 81d9 	bne.w	80057a0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80053ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	f040 81d4 	bne.w	80057a0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005400:	d10f      	bne.n	8005422 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6818      	ldr	r0, [r3, #0]
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2200      	movs	r2, #0
 800540c:	4619      	mov	r1, r3
 800540e:	f7ff fbf7 	bl	8004c00 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800541a:	4618      	mov	r0, r3
 800541c:	f7ff fbb1 	bl	8004b82 <LL_ADC_SetSamplingTimeCommonConfig>
 8005420:	e00e      	b.n	8005440 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6818      	ldr	r0, [r3, #0]
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	6819      	ldr	r1, [r3, #0]
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	461a      	mov	r2, r3
 8005430:	f7ff fbe6 	bl	8004c00 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2100      	movs	r1, #0
 800543a:	4618      	mov	r0, r3
 800543c:	f7ff fba1 	bl	8004b82 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	695a      	ldr	r2, [r3, #20]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	08db      	lsrs	r3, r3, #3
 800544c:	f003 0303 	and.w	r3, r3, #3
 8005450:	005b      	lsls	r3, r3, #1
 8005452:	fa02 f303 	lsl.w	r3, r2, r3
 8005456:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	2b04      	cmp	r3, #4
 8005460:	d022      	beq.n	80054a8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6818      	ldr	r0, [r3, #0]
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	6919      	ldr	r1, [r3, #16]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005472:	f7ff fafb 	bl	8004a6c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6818      	ldr	r0, [r3, #0]
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	6919      	ldr	r1, [r3, #16]
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	461a      	mov	r2, r3
 8005484:	f7ff fb47 	bl	8004b16 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6818      	ldr	r0, [r3, #0]
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005494:	2b01      	cmp	r3, #1
 8005496:	d102      	bne.n	800549e <HAL_ADC_ConfigChannel+0x126>
 8005498:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800549c:	e000      	b.n	80054a0 <HAL_ADC_ConfigChannel+0x128>
 800549e:	2300      	movs	r3, #0
 80054a0:	461a      	mov	r2, r3
 80054a2:	f7ff fb53 	bl	8004b4c <LL_ADC_SetOffsetSaturation>
 80054a6:	e17b      	b.n	80057a0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2100      	movs	r1, #0
 80054ae:	4618      	mov	r0, r3
 80054b0:	f7ff fb00 	bl	8004ab4 <LL_ADC_GetOffsetChannel>
 80054b4:	4603      	mov	r3, r0
 80054b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d10a      	bne.n	80054d4 <HAL_ADC_ConfigChannel+0x15c>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2100      	movs	r1, #0
 80054c4:	4618      	mov	r0, r3
 80054c6:	f7ff faf5 	bl	8004ab4 <LL_ADC_GetOffsetChannel>
 80054ca:	4603      	mov	r3, r0
 80054cc:	0e9b      	lsrs	r3, r3, #26
 80054ce:	f003 021f 	and.w	r2, r3, #31
 80054d2:	e01e      	b.n	8005512 <HAL_ADC_ConfigChannel+0x19a>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2100      	movs	r1, #0
 80054da:	4618      	mov	r0, r3
 80054dc:	f7ff faea 	bl	8004ab4 <LL_ADC_GetOffsetChannel>
 80054e0:	4603      	mov	r3, r0
 80054e2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054e6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80054ea:	fa93 f3a3 	rbit	r3, r3
 80054ee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80054f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80054f6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80054fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d101      	bne.n	8005506 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8005502:	2320      	movs	r3, #32
 8005504:	e004      	b.n	8005510 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8005506:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800550a:	fab3 f383 	clz	r3, r3
 800550e:	b2db      	uxtb	r3, r3
 8005510:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800551a:	2b00      	cmp	r3, #0
 800551c:	d105      	bne.n	800552a <HAL_ADC_ConfigChannel+0x1b2>
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	0e9b      	lsrs	r3, r3, #26
 8005524:	f003 031f 	and.w	r3, r3, #31
 8005528:	e018      	b.n	800555c <HAL_ADC_ConfigChannel+0x1e4>
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005532:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005536:	fa93 f3a3 	rbit	r3, r3
 800553a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800553e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005542:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8005546:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800554a:	2b00      	cmp	r3, #0
 800554c:	d101      	bne.n	8005552 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800554e:	2320      	movs	r3, #32
 8005550:	e004      	b.n	800555c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8005552:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005556:	fab3 f383 	clz	r3, r3
 800555a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800555c:	429a      	cmp	r2, r3
 800555e:	d106      	bne.n	800556e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2200      	movs	r2, #0
 8005566:	2100      	movs	r1, #0
 8005568:	4618      	mov	r0, r3
 800556a:	f7ff fab9 	bl	8004ae0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2101      	movs	r1, #1
 8005574:	4618      	mov	r0, r3
 8005576:	f7ff fa9d 	bl	8004ab4 <LL_ADC_GetOffsetChannel>
 800557a:	4603      	mov	r3, r0
 800557c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005580:	2b00      	cmp	r3, #0
 8005582:	d10a      	bne.n	800559a <HAL_ADC_ConfigChannel+0x222>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2101      	movs	r1, #1
 800558a:	4618      	mov	r0, r3
 800558c:	f7ff fa92 	bl	8004ab4 <LL_ADC_GetOffsetChannel>
 8005590:	4603      	mov	r3, r0
 8005592:	0e9b      	lsrs	r3, r3, #26
 8005594:	f003 021f 	and.w	r2, r3, #31
 8005598:	e01e      	b.n	80055d8 <HAL_ADC_ConfigChannel+0x260>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2101      	movs	r1, #1
 80055a0:	4618      	mov	r0, r3
 80055a2:	f7ff fa87 	bl	8004ab4 <LL_ADC_GetOffsetChannel>
 80055a6:	4603      	mov	r3, r0
 80055a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80055b0:	fa93 f3a3 	rbit	r3, r3
 80055b4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80055b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80055bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80055c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d101      	bne.n	80055cc <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80055c8:	2320      	movs	r3, #32
 80055ca:	e004      	b.n	80055d6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80055cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80055d0:	fab3 f383 	clz	r3, r3
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d105      	bne.n	80055f0 <HAL_ADC_ConfigChannel+0x278>
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	0e9b      	lsrs	r3, r3, #26
 80055ea:	f003 031f 	and.w	r3, r3, #31
 80055ee:	e018      	b.n	8005622 <HAL_ADC_ConfigChannel+0x2aa>
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80055fc:	fa93 f3a3 	rbit	r3, r3
 8005600:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8005604:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005608:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800560c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005610:	2b00      	cmp	r3, #0
 8005612:	d101      	bne.n	8005618 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8005614:	2320      	movs	r3, #32
 8005616:	e004      	b.n	8005622 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8005618:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800561c:	fab3 f383 	clz	r3, r3
 8005620:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005622:	429a      	cmp	r2, r3
 8005624:	d106      	bne.n	8005634 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2200      	movs	r2, #0
 800562c:	2101      	movs	r1, #1
 800562e:	4618      	mov	r0, r3
 8005630:	f7ff fa56 	bl	8004ae0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2102      	movs	r1, #2
 800563a:	4618      	mov	r0, r3
 800563c:	f7ff fa3a 	bl	8004ab4 <LL_ADC_GetOffsetChannel>
 8005640:	4603      	mov	r3, r0
 8005642:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005646:	2b00      	cmp	r3, #0
 8005648:	d10a      	bne.n	8005660 <HAL_ADC_ConfigChannel+0x2e8>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2102      	movs	r1, #2
 8005650:	4618      	mov	r0, r3
 8005652:	f7ff fa2f 	bl	8004ab4 <LL_ADC_GetOffsetChannel>
 8005656:	4603      	mov	r3, r0
 8005658:	0e9b      	lsrs	r3, r3, #26
 800565a:	f003 021f 	and.w	r2, r3, #31
 800565e:	e01e      	b.n	800569e <HAL_ADC_ConfigChannel+0x326>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2102      	movs	r1, #2
 8005666:	4618      	mov	r0, r3
 8005668:	f7ff fa24 	bl	8004ab4 <LL_ADC_GetOffsetChannel>
 800566c:	4603      	mov	r3, r0
 800566e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005672:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005676:	fa93 f3a3 	rbit	r3, r3
 800567a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800567e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005682:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8005686:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800568a:	2b00      	cmp	r3, #0
 800568c:	d101      	bne.n	8005692 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800568e:	2320      	movs	r3, #32
 8005690:	e004      	b.n	800569c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8005692:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005696:	fab3 f383 	clz	r3, r3
 800569a:	b2db      	uxtb	r3, r3
 800569c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d105      	bne.n	80056b6 <HAL_ADC_ConfigChannel+0x33e>
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	0e9b      	lsrs	r3, r3, #26
 80056b0:	f003 031f 	and.w	r3, r3, #31
 80056b4:	e016      	b.n	80056e4 <HAL_ADC_ConfigChannel+0x36c>
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056be:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80056c2:	fa93 f3a3 	rbit	r3, r3
 80056c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80056c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80056ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80056ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d101      	bne.n	80056da <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80056d6:	2320      	movs	r3, #32
 80056d8:	e004      	b.n	80056e4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80056da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80056de:	fab3 f383 	clz	r3, r3
 80056e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d106      	bne.n	80056f6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2200      	movs	r2, #0
 80056ee:	2102      	movs	r1, #2
 80056f0:	4618      	mov	r0, r3
 80056f2:	f7ff f9f5 	bl	8004ae0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2103      	movs	r1, #3
 80056fc:	4618      	mov	r0, r3
 80056fe:	f7ff f9d9 	bl	8004ab4 <LL_ADC_GetOffsetChannel>
 8005702:	4603      	mov	r3, r0
 8005704:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005708:	2b00      	cmp	r3, #0
 800570a:	d10a      	bne.n	8005722 <HAL_ADC_ConfigChannel+0x3aa>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2103      	movs	r1, #3
 8005712:	4618      	mov	r0, r3
 8005714:	f7ff f9ce 	bl	8004ab4 <LL_ADC_GetOffsetChannel>
 8005718:	4603      	mov	r3, r0
 800571a:	0e9b      	lsrs	r3, r3, #26
 800571c:	f003 021f 	and.w	r2, r3, #31
 8005720:	e017      	b.n	8005752 <HAL_ADC_ConfigChannel+0x3da>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2103      	movs	r1, #3
 8005728:	4618      	mov	r0, r3
 800572a:	f7ff f9c3 	bl	8004ab4 <LL_ADC_GetOffsetChannel>
 800572e:	4603      	mov	r3, r0
 8005730:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005732:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005734:	fa93 f3a3 	rbit	r3, r3
 8005738:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800573a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800573c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800573e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005740:	2b00      	cmp	r3, #0
 8005742:	d101      	bne.n	8005748 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8005744:	2320      	movs	r3, #32
 8005746:	e003      	b.n	8005750 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8005748:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800574a:	fab3 f383 	clz	r3, r3
 800574e:	b2db      	uxtb	r3, r3
 8005750:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800575a:	2b00      	cmp	r3, #0
 800575c:	d105      	bne.n	800576a <HAL_ADC_ConfigChannel+0x3f2>
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	0e9b      	lsrs	r3, r3, #26
 8005764:	f003 031f 	and.w	r3, r3, #31
 8005768:	e011      	b.n	800578e <HAL_ADC_ConfigChannel+0x416>
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005770:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005772:	fa93 f3a3 	rbit	r3, r3
 8005776:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8005778:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800577a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800577c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800577e:	2b00      	cmp	r3, #0
 8005780:	d101      	bne.n	8005786 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8005782:	2320      	movs	r3, #32
 8005784:	e003      	b.n	800578e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8005786:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005788:	fab3 f383 	clz	r3, r3
 800578c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800578e:	429a      	cmp	r2, r3
 8005790:	d106      	bne.n	80057a0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2200      	movs	r2, #0
 8005798:	2103      	movs	r1, #3
 800579a:	4618      	mov	r0, r3
 800579c:	f7ff f9a0 	bl	8004ae0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4618      	mov	r0, r3
 80057a6:	f7ff faeb 	bl	8004d80 <LL_ADC_IsEnabled>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f040 813d 	bne.w	8005a2c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6818      	ldr	r0, [r3, #0]
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	6819      	ldr	r1, [r3, #0]
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	461a      	mov	r2, r3
 80057c0:	f7ff fa4a 	bl	8004c58 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	4aa2      	ldr	r2, [pc, #648]	@ (8005a54 <HAL_ADC_ConfigChannel+0x6dc>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	f040 812e 	bne.w	8005a2c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d10b      	bne.n	80057f8 <HAL_ADC_ConfigChannel+0x480>
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	0e9b      	lsrs	r3, r3, #26
 80057e6:	3301      	adds	r3, #1
 80057e8:	f003 031f 	and.w	r3, r3, #31
 80057ec:	2b09      	cmp	r3, #9
 80057ee:	bf94      	ite	ls
 80057f0:	2301      	movls	r3, #1
 80057f2:	2300      	movhi	r3, #0
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	e019      	b.n	800582c <HAL_ADC_ConfigChannel+0x4b4>
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005800:	fa93 f3a3 	rbit	r3, r3
 8005804:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8005806:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005808:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800580a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800580c:	2b00      	cmp	r3, #0
 800580e:	d101      	bne.n	8005814 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8005810:	2320      	movs	r3, #32
 8005812:	e003      	b.n	800581c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8005814:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005816:	fab3 f383 	clz	r3, r3
 800581a:	b2db      	uxtb	r3, r3
 800581c:	3301      	adds	r3, #1
 800581e:	f003 031f 	and.w	r3, r3, #31
 8005822:	2b09      	cmp	r3, #9
 8005824:	bf94      	ite	ls
 8005826:	2301      	movls	r3, #1
 8005828:	2300      	movhi	r3, #0
 800582a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800582c:	2b00      	cmp	r3, #0
 800582e:	d079      	beq.n	8005924 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005838:	2b00      	cmp	r3, #0
 800583a:	d107      	bne.n	800584c <HAL_ADC_ConfigChannel+0x4d4>
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	0e9b      	lsrs	r3, r3, #26
 8005842:	3301      	adds	r3, #1
 8005844:	069b      	lsls	r3, r3, #26
 8005846:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800584a:	e015      	b.n	8005878 <HAL_ADC_ConfigChannel+0x500>
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005852:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005854:	fa93 f3a3 	rbit	r3, r3
 8005858:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800585a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800585c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800585e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005860:	2b00      	cmp	r3, #0
 8005862:	d101      	bne.n	8005868 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8005864:	2320      	movs	r3, #32
 8005866:	e003      	b.n	8005870 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8005868:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800586a:	fab3 f383 	clz	r3, r3
 800586e:	b2db      	uxtb	r3, r3
 8005870:	3301      	adds	r3, #1
 8005872:	069b      	lsls	r3, r3, #26
 8005874:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005880:	2b00      	cmp	r3, #0
 8005882:	d109      	bne.n	8005898 <HAL_ADC_ConfigChannel+0x520>
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	0e9b      	lsrs	r3, r3, #26
 800588a:	3301      	adds	r3, #1
 800588c:	f003 031f 	and.w	r3, r3, #31
 8005890:	2101      	movs	r1, #1
 8005892:	fa01 f303 	lsl.w	r3, r1, r3
 8005896:	e017      	b.n	80058c8 <HAL_ADC_ConfigChannel+0x550>
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800589e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058a0:	fa93 f3a3 	rbit	r3, r3
 80058a4:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80058a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80058aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d101      	bne.n	80058b4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80058b0:	2320      	movs	r3, #32
 80058b2:	e003      	b.n	80058bc <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80058b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80058b6:	fab3 f383 	clz	r3, r3
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	3301      	adds	r3, #1
 80058be:	f003 031f 	and.w	r3, r3, #31
 80058c2:	2101      	movs	r1, #1
 80058c4:	fa01 f303 	lsl.w	r3, r1, r3
 80058c8:	ea42 0103 	orr.w	r1, r2, r3
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d10a      	bne.n	80058ee <HAL_ADC_ConfigChannel+0x576>
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	0e9b      	lsrs	r3, r3, #26
 80058de:	3301      	adds	r3, #1
 80058e0:	f003 021f 	and.w	r2, r3, #31
 80058e4:	4613      	mov	r3, r2
 80058e6:	005b      	lsls	r3, r3, #1
 80058e8:	4413      	add	r3, r2
 80058ea:	051b      	lsls	r3, r3, #20
 80058ec:	e018      	b.n	8005920 <HAL_ADC_ConfigChannel+0x5a8>
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058f6:	fa93 f3a3 	rbit	r3, r3
 80058fa:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80058fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8005900:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005902:	2b00      	cmp	r3, #0
 8005904:	d101      	bne.n	800590a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8005906:	2320      	movs	r3, #32
 8005908:	e003      	b.n	8005912 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800590a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800590c:	fab3 f383 	clz	r3, r3
 8005910:	b2db      	uxtb	r3, r3
 8005912:	3301      	adds	r3, #1
 8005914:	f003 021f 	and.w	r2, r3, #31
 8005918:	4613      	mov	r3, r2
 800591a:	005b      	lsls	r3, r3, #1
 800591c:	4413      	add	r3, r2
 800591e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005920:	430b      	orrs	r3, r1
 8005922:	e07e      	b.n	8005a22 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800592c:	2b00      	cmp	r3, #0
 800592e:	d107      	bne.n	8005940 <HAL_ADC_ConfigChannel+0x5c8>
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	0e9b      	lsrs	r3, r3, #26
 8005936:	3301      	adds	r3, #1
 8005938:	069b      	lsls	r3, r3, #26
 800593a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800593e:	e015      	b.n	800596c <HAL_ADC_ConfigChannel+0x5f4>
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005948:	fa93 f3a3 	rbit	r3, r3
 800594c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800594e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005950:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8005952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005954:	2b00      	cmp	r3, #0
 8005956:	d101      	bne.n	800595c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8005958:	2320      	movs	r3, #32
 800595a:	e003      	b.n	8005964 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800595c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800595e:	fab3 f383 	clz	r3, r3
 8005962:	b2db      	uxtb	r3, r3
 8005964:	3301      	adds	r3, #1
 8005966:	069b      	lsls	r3, r3, #26
 8005968:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005974:	2b00      	cmp	r3, #0
 8005976:	d109      	bne.n	800598c <HAL_ADC_ConfigChannel+0x614>
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	0e9b      	lsrs	r3, r3, #26
 800597e:	3301      	adds	r3, #1
 8005980:	f003 031f 	and.w	r3, r3, #31
 8005984:	2101      	movs	r1, #1
 8005986:	fa01 f303 	lsl.w	r3, r1, r3
 800598a:	e017      	b.n	80059bc <HAL_ADC_ConfigChannel+0x644>
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005992:	6a3b      	ldr	r3, [r7, #32]
 8005994:	fa93 f3a3 	rbit	r3, r3
 8005998:	61fb      	str	r3, [r7, #28]
  return result;
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800599e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d101      	bne.n	80059a8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80059a4:	2320      	movs	r3, #32
 80059a6:	e003      	b.n	80059b0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80059a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059aa:	fab3 f383 	clz	r3, r3
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	3301      	adds	r3, #1
 80059b2:	f003 031f 	and.w	r3, r3, #31
 80059b6:	2101      	movs	r1, #1
 80059b8:	fa01 f303 	lsl.w	r3, r1, r3
 80059bc:	ea42 0103 	orr.w	r1, r2, r3
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d10d      	bne.n	80059e8 <HAL_ADC_ConfigChannel+0x670>
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	0e9b      	lsrs	r3, r3, #26
 80059d2:	3301      	adds	r3, #1
 80059d4:	f003 021f 	and.w	r2, r3, #31
 80059d8:	4613      	mov	r3, r2
 80059da:	005b      	lsls	r3, r3, #1
 80059dc:	4413      	add	r3, r2
 80059de:	3b1e      	subs	r3, #30
 80059e0:	051b      	lsls	r3, r3, #20
 80059e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80059e6:	e01b      	b.n	8005a20 <HAL_ADC_ConfigChannel+0x6a8>
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	fa93 f3a3 	rbit	r3, r3
 80059f4:	613b      	str	r3, [r7, #16]
  return result;
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d101      	bne.n	8005a04 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8005a00:	2320      	movs	r3, #32
 8005a02:	e003      	b.n	8005a0c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	fab3 f383 	clz	r3, r3
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	f003 021f 	and.w	r2, r3, #31
 8005a12:	4613      	mov	r3, r2
 8005a14:	005b      	lsls	r3, r3, #1
 8005a16:	4413      	add	r3, r2
 8005a18:	3b1e      	subs	r3, #30
 8005a1a:	051b      	lsls	r3, r3, #20
 8005a1c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005a20:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8005a22:	683a      	ldr	r2, [r7, #0]
 8005a24:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005a26:	4619      	mov	r1, r3
 8005a28:	f7ff f8ea 	bl	8004c00 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	4b09      	ldr	r3, [pc, #36]	@ (8005a58 <HAL_ADC_ConfigChannel+0x6e0>)
 8005a32:	4013      	ands	r3, r2
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f000 80be 	beq.w	8005bb6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005a42:	d004      	beq.n	8005a4e <HAL_ADC_ConfigChannel+0x6d6>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a04      	ldr	r2, [pc, #16]	@ (8005a5c <HAL_ADC_ConfigChannel+0x6e4>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d10a      	bne.n	8005a64 <HAL_ADC_ConfigChannel+0x6ec>
 8005a4e:	4b04      	ldr	r3, [pc, #16]	@ (8005a60 <HAL_ADC_ConfigChannel+0x6e8>)
 8005a50:	e009      	b.n	8005a66 <HAL_ADC_ConfigChannel+0x6ee>
 8005a52:	bf00      	nop
 8005a54:	407f0000 	.word	0x407f0000
 8005a58:	80080000 	.word	0x80080000
 8005a5c:	50000100 	.word	0x50000100
 8005a60:	50000300 	.word	0x50000300
 8005a64:	4b59      	ldr	r3, [pc, #356]	@ (8005bcc <HAL_ADC_ConfigChannel+0x854>)
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7fe fff2 	bl	8004a50 <LL_ADC_GetCommonPathInternalCh>
 8005a6c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a56      	ldr	r2, [pc, #344]	@ (8005bd0 <HAL_ADC_ConfigChannel+0x858>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d004      	beq.n	8005a84 <HAL_ADC_ConfigChannel+0x70c>
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a55      	ldr	r2, [pc, #340]	@ (8005bd4 <HAL_ADC_ConfigChannel+0x85c>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d13a      	bne.n	8005afa <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005a84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005a88:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d134      	bne.n	8005afa <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005a98:	d005      	beq.n	8005aa6 <HAL_ADC_ConfigChannel+0x72e>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a4e      	ldr	r2, [pc, #312]	@ (8005bd8 <HAL_ADC_ConfigChannel+0x860>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	f040 8085 	bne.w	8005bb0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005aae:	d004      	beq.n	8005aba <HAL_ADC_ConfigChannel+0x742>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a49      	ldr	r2, [pc, #292]	@ (8005bdc <HAL_ADC_ConfigChannel+0x864>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d101      	bne.n	8005abe <HAL_ADC_ConfigChannel+0x746>
 8005aba:	4a49      	ldr	r2, [pc, #292]	@ (8005be0 <HAL_ADC_ConfigChannel+0x868>)
 8005abc:	e000      	b.n	8005ac0 <HAL_ADC_ConfigChannel+0x748>
 8005abe:	4a43      	ldr	r2, [pc, #268]	@ (8005bcc <HAL_ADC_ConfigChannel+0x854>)
 8005ac0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005ac4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005ac8:	4619      	mov	r1, r3
 8005aca:	4610      	mov	r0, r2
 8005acc:	f7fe ffad 	bl	8004a2a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005ad0:	4b44      	ldr	r3, [pc, #272]	@ (8005be4 <HAL_ADC_ConfigChannel+0x86c>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	099b      	lsrs	r3, r3, #6
 8005ad6:	4a44      	ldr	r2, [pc, #272]	@ (8005be8 <HAL_ADC_ConfigChannel+0x870>)
 8005ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8005adc:	099b      	lsrs	r3, r3, #6
 8005ade:	1c5a      	adds	r2, r3, #1
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	005b      	lsls	r3, r3, #1
 8005ae4:	4413      	add	r3, r2
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005aea:	e002      	b.n	8005af2 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	3b01      	subs	r3, #1
 8005af0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d1f9      	bne.n	8005aec <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005af8:	e05a      	b.n	8005bb0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a3b      	ldr	r2, [pc, #236]	@ (8005bec <HAL_ADC_ConfigChannel+0x874>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d125      	bne.n	8005b50 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005b04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005b08:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d11f      	bne.n	8005b50 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a31      	ldr	r2, [pc, #196]	@ (8005bdc <HAL_ADC_ConfigChannel+0x864>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d104      	bne.n	8005b24 <HAL_ADC_ConfigChannel+0x7ac>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a34      	ldr	r2, [pc, #208]	@ (8005bf0 <HAL_ADC_ConfigChannel+0x878>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d047      	beq.n	8005bb4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b2c:	d004      	beq.n	8005b38 <HAL_ADC_ConfigChannel+0x7c0>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a2a      	ldr	r2, [pc, #168]	@ (8005bdc <HAL_ADC_ConfigChannel+0x864>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d101      	bne.n	8005b3c <HAL_ADC_ConfigChannel+0x7c4>
 8005b38:	4a29      	ldr	r2, [pc, #164]	@ (8005be0 <HAL_ADC_ConfigChannel+0x868>)
 8005b3a:	e000      	b.n	8005b3e <HAL_ADC_ConfigChannel+0x7c6>
 8005b3c:	4a23      	ldr	r2, [pc, #140]	@ (8005bcc <HAL_ADC_ConfigChannel+0x854>)
 8005b3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005b42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005b46:	4619      	mov	r1, r3
 8005b48:	4610      	mov	r0, r2
 8005b4a:	f7fe ff6e 	bl	8004a2a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005b4e:	e031      	b.n	8005bb4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a27      	ldr	r2, [pc, #156]	@ (8005bf4 <HAL_ADC_ConfigChannel+0x87c>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d12d      	bne.n	8005bb6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005b5a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005b5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d127      	bne.n	8005bb6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a1c      	ldr	r2, [pc, #112]	@ (8005bdc <HAL_ADC_ConfigChannel+0x864>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d022      	beq.n	8005bb6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b78:	d004      	beq.n	8005b84 <HAL_ADC_ConfigChannel+0x80c>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a17      	ldr	r2, [pc, #92]	@ (8005bdc <HAL_ADC_ConfigChannel+0x864>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d101      	bne.n	8005b88 <HAL_ADC_ConfigChannel+0x810>
 8005b84:	4a16      	ldr	r2, [pc, #88]	@ (8005be0 <HAL_ADC_ConfigChannel+0x868>)
 8005b86:	e000      	b.n	8005b8a <HAL_ADC_ConfigChannel+0x812>
 8005b88:	4a10      	ldr	r2, [pc, #64]	@ (8005bcc <HAL_ADC_ConfigChannel+0x854>)
 8005b8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005b8e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005b92:	4619      	mov	r1, r3
 8005b94:	4610      	mov	r0, r2
 8005b96:	f7fe ff48 	bl	8004a2a <LL_ADC_SetCommonPathInternalCh>
 8005b9a:	e00c      	b.n	8005bb6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ba0:	f043 0220 	orr.w	r2, r3, #32
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8005bae:	e002      	b.n	8005bb6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005bb0:	bf00      	nop
 8005bb2:	e000      	b.n	8005bb6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005bb4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005bbe:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	37d8      	adds	r7, #216	@ 0xd8
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	50000700 	.word	0x50000700
 8005bd0:	c3210000 	.word	0xc3210000
 8005bd4:	90c00010 	.word	0x90c00010
 8005bd8:	50000600 	.word	0x50000600
 8005bdc:	50000100 	.word	0x50000100
 8005be0:	50000300 	.word	0x50000300
 8005be4:	20000200 	.word	0x20000200
 8005be8:	053e2d63 	.word	0x053e2d63
 8005bec:	c7520000 	.word	0xc7520000
 8005bf0:	50000500 	.word	0x50000500
 8005bf4:	cb840000 	.word	0xcb840000

08005bf8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005c00:	2300      	movs	r3, #0
 8005c02:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f7ff f8b9 	bl	8004d80 <LL_ADC_IsEnabled>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d176      	bne.n	8005d02 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	689a      	ldr	r2, [r3, #8]
 8005c1a:	4b3c      	ldr	r3, [pc, #240]	@ (8005d0c <ADC_Enable+0x114>)
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00d      	beq.n	8005c3e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c26:	f043 0210 	orr.w	r2, r3, #16
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c32:	f043 0201 	orr.w	r2, r3, #1
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e062      	b.n	8005d04 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4618      	mov	r0, r3
 8005c44:	f7ff f888 	bl	8004d58 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c50:	d004      	beq.n	8005c5c <ADC_Enable+0x64>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a2e      	ldr	r2, [pc, #184]	@ (8005d10 <ADC_Enable+0x118>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d101      	bne.n	8005c60 <ADC_Enable+0x68>
 8005c5c:	4b2d      	ldr	r3, [pc, #180]	@ (8005d14 <ADC_Enable+0x11c>)
 8005c5e:	e000      	b.n	8005c62 <ADC_Enable+0x6a>
 8005c60:	4b2d      	ldr	r3, [pc, #180]	@ (8005d18 <ADC_Enable+0x120>)
 8005c62:	4618      	mov	r0, r3
 8005c64:	f7fe fef4 	bl	8004a50 <LL_ADC_GetCommonPathInternalCh>
 8005c68:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005c6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d013      	beq.n	8005c9a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005c72:	4b2a      	ldr	r3, [pc, #168]	@ (8005d1c <ADC_Enable+0x124>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	099b      	lsrs	r3, r3, #6
 8005c78:	4a29      	ldr	r2, [pc, #164]	@ (8005d20 <ADC_Enable+0x128>)
 8005c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c7e:	099b      	lsrs	r3, r3, #6
 8005c80:	1c5a      	adds	r2, r3, #1
 8005c82:	4613      	mov	r3, r2
 8005c84:	005b      	lsls	r3, r3, #1
 8005c86:	4413      	add	r3, r2
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005c8c:	e002      	b.n	8005c94 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	3b01      	subs	r3, #1
 8005c92:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1f9      	bne.n	8005c8e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005c9a:	f7fe fea7 	bl	80049ec <HAL_GetTick>
 8005c9e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005ca0:	e028      	b.n	8005cf4 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f7ff f86a 	bl	8004d80 <LL_ADC_IsEnabled>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d104      	bne.n	8005cbc <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f7ff f84e 	bl	8004d58 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005cbc:	f7fe fe96 	bl	80049ec <HAL_GetTick>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d914      	bls.n	8005cf4 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 0301 	and.w	r3, r3, #1
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d00d      	beq.n	8005cf4 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cdc:	f043 0210 	orr.w	r2, r3, #16
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ce8:	f043 0201 	orr.w	r2, r3, #1
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e007      	b.n	8005d04 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 0301 	and.w	r3, r3, #1
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d1cf      	bne.n	8005ca2 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005d02:	2300      	movs	r3, #0
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3710      	adds	r7, #16
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}
 8005d0c:	8000003f 	.word	0x8000003f
 8005d10:	50000100 	.word	0x50000100
 8005d14:	50000300 	.word	0x50000300
 8005d18:	50000700 	.word	0x50000700
 8005d1c:	20000200 	.word	0x20000200
 8005d20:	053e2d63 	.word	0x053e2d63

08005d24 <LL_ADC_IsEnabled>:
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f003 0301 	and.w	r3, r3, #1
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d101      	bne.n	8005d3c <LL_ADC_IsEnabled+0x18>
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e000      	b.n	8005d3e <LL_ADC_IsEnabled+0x1a>
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	370c      	adds	r7, #12
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr

08005d4a <LL_ADC_REG_IsConversionOngoing>:
{
 8005d4a:	b480      	push	{r7}
 8005d4c:	b083      	sub	sp, #12
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	f003 0304 	and.w	r3, r3, #4
 8005d5a:	2b04      	cmp	r3, #4
 8005d5c:	d101      	bne.n	8005d62 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e000      	b.n	8005d64 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005d62:	2300      	movs	r3, #0
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005d70:	b590      	push	{r4, r7, lr}
 8005d72:	b0a1      	sub	sp, #132	@ 0x84
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d101      	bne.n	8005d8e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005d8a:	2302      	movs	r3, #2
 8005d8c:	e0e7      	b.n	8005f5e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005d96:	2300      	movs	r3, #0
 8005d98:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005da6:	d102      	bne.n	8005dae <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005da8:	4b6f      	ldr	r3, [pc, #444]	@ (8005f68 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005daa:	60bb      	str	r3, [r7, #8]
 8005dac:	e009      	b.n	8005dc2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a6e      	ldr	r2, [pc, #440]	@ (8005f6c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d102      	bne.n	8005dbe <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005db8:	4b6d      	ldr	r3, [pc, #436]	@ (8005f70 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005dba:	60bb      	str	r3, [r7, #8]
 8005dbc:	e001      	b.n	8005dc2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d10b      	bne.n	8005de0 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dcc:	f043 0220 	orr.w	r2, r3, #32
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e0be      	b.n	8005f5e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	4618      	mov	r0, r3
 8005de4:	f7ff ffb1 	bl	8005d4a <LL_ADC_REG_IsConversionOngoing>
 8005de8:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4618      	mov	r0, r3
 8005df0:	f7ff ffab 	bl	8005d4a <LL_ADC_REG_IsConversionOngoing>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	f040 80a0 	bne.w	8005f3c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005dfc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	f040 809c 	bne.w	8005f3c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e0c:	d004      	beq.n	8005e18 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a55      	ldr	r2, [pc, #340]	@ (8005f68 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d101      	bne.n	8005e1c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005e18:	4b56      	ldr	r3, [pc, #344]	@ (8005f74 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8005e1a:	e000      	b.n	8005e1e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005e1c:	4b56      	ldr	r3, [pc, #344]	@ (8005f78 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8005e1e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d04b      	beq.n	8005ec0 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005e28:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	6859      	ldr	r1, [r3, #4]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005e3a:	035b      	lsls	r3, r3, #13
 8005e3c:	430b      	orrs	r3, r1
 8005e3e:	431a      	orrs	r2, r3
 8005e40:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e42:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e4c:	d004      	beq.n	8005e58 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a45      	ldr	r2, [pc, #276]	@ (8005f68 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d10f      	bne.n	8005e78 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8005e58:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005e5c:	f7ff ff62 	bl	8005d24 <LL_ADC_IsEnabled>
 8005e60:	4604      	mov	r4, r0
 8005e62:	4841      	ldr	r0, [pc, #260]	@ (8005f68 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005e64:	f7ff ff5e 	bl	8005d24 <LL_ADC_IsEnabled>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	4323      	orrs	r3, r4
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	bf0c      	ite	eq
 8005e70:	2301      	moveq	r3, #1
 8005e72:	2300      	movne	r3, #0
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	e012      	b.n	8005e9e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8005e78:	483c      	ldr	r0, [pc, #240]	@ (8005f6c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005e7a:	f7ff ff53 	bl	8005d24 <LL_ADC_IsEnabled>
 8005e7e:	4604      	mov	r4, r0
 8005e80:	483b      	ldr	r0, [pc, #236]	@ (8005f70 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005e82:	f7ff ff4f 	bl	8005d24 <LL_ADC_IsEnabled>
 8005e86:	4603      	mov	r3, r0
 8005e88:	431c      	orrs	r4, r3
 8005e8a:	483c      	ldr	r0, [pc, #240]	@ (8005f7c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005e8c:	f7ff ff4a 	bl	8005d24 <LL_ADC_IsEnabled>
 8005e90:	4603      	mov	r3, r0
 8005e92:	4323      	orrs	r3, r4
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	bf0c      	ite	eq
 8005e98:	2301      	moveq	r3, #1
 8005e9a:	2300      	movne	r3, #0
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d056      	beq.n	8005f50 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005ea2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005eaa:	f023 030f 	bic.w	r3, r3, #15
 8005eae:	683a      	ldr	r2, [r7, #0]
 8005eb0:	6811      	ldr	r1, [r2, #0]
 8005eb2:	683a      	ldr	r2, [r7, #0]
 8005eb4:	6892      	ldr	r2, [r2, #8]
 8005eb6:	430a      	orrs	r2, r1
 8005eb8:	431a      	orrs	r2, r3
 8005eba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ebc:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005ebe:	e047      	b.n	8005f50 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005ec0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005ec8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005eca:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ed4:	d004      	beq.n	8005ee0 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a23      	ldr	r2, [pc, #140]	@ (8005f68 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d10f      	bne.n	8005f00 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8005ee0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005ee4:	f7ff ff1e 	bl	8005d24 <LL_ADC_IsEnabled>
 8005ee8:	4604      	mov	r4, r0
 8005eea:	481f      	ldr	r0, [pc, #124]	@ (8005f68 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005eec:	f7ff ff1a 	bl	8005d24 <LL_ADC_IsEnabled>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	4323      	orrs	r3, r4
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	bf0c      	ite	eq
 8005ef8:	2301      	moveq	r3, #1
 8005efa:	2300      	movne	r3, #0
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	e012      	b.n	8005f26 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8005f00:	481a      	ldr	r0, [pc, #104]	@ (8005f6c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005f02:	f7ff ff0f 	bl	8005d24 <LL_ADC_IsEnabled>
 8005f06:	4604      	mov	r4, r0
 8005f08:	4819      	ldr	r0, [pc, #100]	@ (8005f70 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005f0a:	f7ff ff0b 	bl	8005d24 <LL_ADC_IsEnabled>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	431c      	orrs	r4, r3
 8005f12:	481a      	ldr	r0, [pc, #104]	@ (8005f7c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005f14:	f7ff ff06 	bl	8005d24 <LL_ADC_IsEnabled>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	4323      	orrs	r3, r4
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	bf0c      	ite	eq
 8005f20:	2301      	moveq	r3, #1
 8005f22:	2300      	movne	r3, #0
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d012      	beq.n	8005f50 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005f2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005f32:	f023 030f 	bic.w	r3, r3, #15
 8005f36:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005f38:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005f3a:	e009      	b.n	8005f50 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f40:	f043 0220 	orr.w	r2, r3, #32
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8005f4e:	e000      	b.n	8005f52 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005f50:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005f5a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3784      	adds	r7, #132	@ 0x84
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd90      	pop	{r4, r7, pc}
 8005f66:	bf00      	nop
 8005f68:	50000100 	.word	0x50000100
 8005f6c:	50000400 	.word	0x50000400
 8005f70:	50000500 	.word	0x50000500
 8005f74:	50000300 	.word	0x50000300
 8005f78:	50000700 	.word	0x50000700
 8005f7c:	50000600 	.word	0x50000600

08005f80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f003 0307 	and.w	r3, r3, #7
 8005f8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f90:	4b0c      	ldr	r3, [pc, #48]	@ (8005fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f96:	68ba      	ldr	r2, [r7, #8]
 8005f98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005fa8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005fac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005fb2:	4a04      	ldr	r2, [pc, #16]	@ (8005fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	60d3      	str	r3, [r2, #12]
}
 8005fb8:	bf00      	nop
 8005fba:	3714      	adds	r7, #20
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr
 8005fc4:	e000ed00 	.word	0xe000ed00

08005fc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005fcc:	4b04      	ldr	r3, [pc, #16]	@ (8005fe0 <__NVIC_GetPriorityGrouping+0x18>)
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	0a1b      	lsrs	r3, r3, #8
 8005fd2:	f003 0307 	and.w	r3, r3, #7
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr
 8005fe0:	e000ed00 	.word	0xe000ed00

08005fe4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	4603      	mov	r3, r0
 8005fec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	db0b      	blt.n	800600e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ff6:	79fb      	ldrb	r3, [r7, #7]
 8005ff8:	f003 021f 	and.w	r2, r3, #31
 8005ffc:	4907      	ldr	r1, [pc, #28]	@ (800601c <__NVIC_EnableIRQ+0x38>)
 8005ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006002:	095b      	lsrs	r3, r3, #5
 8006004:	2001      	movs	r0, #1
 8006006:	fa00 f202 	lsl.w	r2, r0, r2
 800600a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800600e:	bf00      	nop
 8006010:	370c      	adds	r7, #12
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	e000e100 	.word	0xe000e100

08006020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	4603      	mov	r3, r0
 8006028:	6039      	str	r1, [r7, #0]
 800602a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800602c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006030:	2b00      	cmp	r3, #0
 8006032:	db0a      	blt.n	800604a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	b2da      	uxtb	r2, r3
 8006038:	490c      	ldr	r1, [pc, #48]	@ (800606c <__NVIC_SetPriority+0x4c>)
 800603a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800603e:	0112      	lsls	r2, r2, #4
 8006040:	b2d2      	uxtb	r2, r2
 8006042:	440b      	add	r3, r1
 8006044:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006048:	e00a      	b.n	8006060 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	b2da      	uxtb	r2, r3
 800604e:	4908      	ldr	r1, [pc, #32]	@ (8006070 <__NVIC_SetPriority+0x50>)
 8006050:	79fb      	ldrb	r3, [r7, #7]
 8006052:	f003 030f 	and.w	r3, r3, #15
 8006056:	3b04      	subs	r3, #4
 8006058:	0112      	lsls	r2, r2, #4
 800605a:	b2d2      	uxtb	r2, r2
 800605c:	440b      	add	r3, r1
 800605e:	761a      	strb	r2, [r3, #24]
}
 8006060:	bf00      	nop
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr
 800606c:	e000e100 	.word	0xe000e100
 8006070:	e000ed00 	.word	0xe000ed00

08006074 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006074:	b480      	push	{r7}
 8006076:	b089      	sub	sp, #36	@ 0x24
 8006078:	af00      	add	r7, sp, #0
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	60b9      	str	r1, [r7, #8]
 800607e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f003 0307 	and.w	r3, r3, #7
 8006086:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	f1c3 0307 	rsb	r3, r3, #7
 800608e:	2b04      	cmp	r3, #4
 8006090:	bf28      	it	cs
 8006092:	2304      	movcs	r3, #4
 8006094:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	3304      	adds	r3, #4
 800609a:	2b06      	cmp	r3, #6
 800609c:	d902      	bls.n	80060a4 <NVIC_EncodePriority+0x30>
 800609e:	69fb      	ldr	r3, [r7, #28]
 80060a0:	3b03      	subs	r3, #3
 80060a2:	e000      	b.n	80060a6 <NVIC_EncodePriority+0x32>
 80060a4:	2300      	movs	r3, #0
 80060a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80060a8:	f04f 32ff 	mov.w	r2, #4294967295
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	fa02 f303 	lsl.w	r3, r2, r3
 80060b2:	43da      	mvns	r2, r3
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	401a      	ands	r2, r3
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80060bc:	f04f 31ff 	mov.w	r1, #4294967295
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	fa01 f303 	lsl.w	r3, r1, r3
 80060c6:	43d9      	mvns	r1, r3
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80060cc:	4313      	orrs	r3, r2
         );
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3724      	adds	r7, #36	@ 0x24
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
	...

080060dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	3b01      	subs	r3, #1
 80060e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80060ec:	d301      	bcc.n	80060f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80060ee:	2301      	movs	r3, #1
 80060f0:	e00f      	b.n	8006112 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80060f2:	4a0a      	ldr	r2, [pc, #40]	@ (800611c <SysTick_Config+0x40>)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	3b01      	subs	r3, #1
 80060f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80060fa:	210f      	movs	r1, #15
 80060fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006100:	f7ff ff8e 	bl	8006020 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006104:	4b05      	ldr	r3, [pc, #20]	@ (800611c <SysTick_Config+0x40>)
 8006106:	2200      	movs	r2, #0
 8006108:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800610a:	4b04      	ldr	r3, [pc, #16]	@ (800611c <SysTick_Config+0x40>)
 800610c:	2207      	movs	r2, #7
 800610e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	3708      	adds	r7, #8
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	e000e010 	.word	0xe000e010

08006120 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b082      	sub	sp, #8
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f7ff ff29 	bl	8005f80 <__NVIC_SetPriorityGrouping>
}
 800612e:	bf00      	nop
 8006130:	3708      	adds	r7, #8
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}

08006136 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006136:	b580      	push	{r7, lr}
 8006138:	b086      	sub	sp, #24
 800613a:	af00      	add	r7, sp, #0
 800613c:	4603      	mov	r3, r0
 800613e:	60b9      	str	r1, [r7, #8]
 8006140:	607a      	str	r2, [r7, #4]
 8006142:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006144:	f7ff ff40 	bl	8005fc8 <__NVIC_GetPriorityGrouping>
 8006148:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	68b9      	ldr	r1, [r7, #8]
 800614e:	6978      	ldr	r0, [r7, #20]
 8006150:	f7ff ff90 	bl	8006074 <NVIC_EncodePriority>
 8006154:	4602      	mov	r2, r0
 8006156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800615a:	4611      	mov	r1, r2
 800615c:	4618      	mov	r0, r3
 800615e:	f7ff ff5f 	bl	8006020 <__NVIC_SetPriority>
}
 8006162:	bf00      	nop
 8006164:	3718      	adds	r7, #24
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}

0800616a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800616a:	b580      	push	{r7, lr}
 800616c:	b082      	sub	sp, #8
 800616e:	af00      	add	r7, sp, #0
 8006170:	4603      	mov	r3, r0
 8006172:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006178:	4618      	mov	r0, r3
 800617a:	f7ff ff33 	bl	8005fe4 <__NVIC_EnableIRQ>
}
 800617e:	bf00      	nop
 8006180:	3708      	adds	r7, #8
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}

08006186 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006186:	b580      	push	{r7, lr}
 8006188:	b082      	sub	sp, #8
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f7ff ffa4 	bl	80060dc <SysTick_Config>
 8006194:	4603      	mov	r3, r0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3708      	adds	r7, #8
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
	...

080061a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d101      	bne.n	80061b2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	e08d      	b.n	80062ce <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	461a      	mov	r2, r3
 80061b8:	4b47      	ldr	r3, [pc, #284]	@ (80062d8 <HAL_DMA_Init+0x138>)
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d80f      	bhi.n	80061de <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	461a      	mov	r2, r3
 80061c4:	4b45      	ldr	r3, [pc, #276]	@ (80062dc <HAL_DMA_Init+0x13c>)
 80061c6:	4413      	add	r3, r2
 80061c8:	4a45      	ldr	r2, [pc, #276]	@ (80062e0 <HAL_DMA_Init+0x140>)
 80061ca:	fba2 2303 	umull	r2, r3, r2, r3
 80061ce:	091b      	lsrs	r3, r3, #4
 80061d0:	009a      	lsls	r2, r3, #2
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a42      	ldr	r2, [pc, #264]	@ (80062e4 <HAL_DMA_Init+0x144>)
 80061da:	641a      	str	r2, [r3, #64]	@ 0x40
 80061dc:	e00e      	b.n	80061fc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	461a      	mov	r2, r3
 80061e4:	4b40      	ldr	r3, [pc, #256]	@ (80062e8 <HAL_DMA_Init+0x148>)
 80061e6:	4413      	add	r3, r2
 80061e8:	4a3d      	ldr	r2, [pc, #244]	@ (80062e0 <HAL_DMA_Init+0x140>)
 80061ea:	fba2 2303 	umull	r2, r3, r2, r3
 80061ee:	091b      	lsrs	r3, r3, #4
 80061f0:	009a      	lsls	r2, r3, #2
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a3c      	ldr	r2, [pc, #240]	@ (80062ec <HAL_DMA_Init+0x14c>)
 80061fa:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2202      	movs	r2, #2
 8006200:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006212:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006216:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006220:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800622c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	699b      	ldr	r3, [r3, #24]
 8006232:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006238:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a1b      	ldr	r3, [r3, #32]
 800623e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	4313      	orrs	r3, r2
 8006244:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 fa82 	bl	8006758 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800625c:	d102      	bne.n	8006264 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	685a      	ldr	r2, [r3, #4]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800626c:	b2d2      	uxtb	r2, r2
 800626e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006278:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d010      	beq.n	80062a4 <HAL_DMA_Init+0x104>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	2b04      	cmp	r3, #4
 8006288:	d80c      	bhi.n	80062a4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 faa2 	bl	80067d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006294:	2200      	movs	r2, #0
 8006296:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80062a0:	605a      	str	r2, [r3, #4]
 80062a2:	e008      	b.n	80062b6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3710      	adds	r7, #16
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	40020407 	.word	0x40020407
 80062dc:	bffdfff8 	.word	0xbffdfff8
 80062e0:	cccccccd 	.word	0xcccccccd
 80062e4:	40020000 	.word	0x40020000
 80062e8:	bffdfbf8 	.word	0xbffdfbf8
 80062ec:	40020400 	.word	0x40020400

080062f0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b086      	sub	sp, #24
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	607a      	str	r2, [r7, #4]
 80062fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062fe:	2300      	movs	r3, #0
 8006300:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006308:	2b01      	cmp	r3, #1
 800630a:	d101      	bne.n	8006310 <HAL_DMA_Start_IT+0x20>
 800630c:	2302      	movs	r3, #2
 800630e:	e066      	b.n	80063de <HAL_DMA_Start_IT+0xee>
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800631e:	b2db      	uxtb	r3, r3
 8006320:	2b01      	cmp	r3, #1
 8006322:	d155      	bne.n	80063d0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2202      	movs	r2, #2
 8006328:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2200      	movs	r2, #0
 8006330:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f022 0201 	bic.w	r2, r2, #1
 8006340:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	68b9      	ldr	r1, [r7, #8]
 8006348:	68f8      	ldr	r0, [r7, #12]
 800634a:	f000 f9c7 	bl	80066dc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006352:	2b00      	cmp	r3, #0
 8006354:	d008      	beq.n	8006368 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f042 020e 	orr.w	r2, r2, #14
 8006364:	601a      	str	r2, [r3, #0]
 8006366:	e00f      	b.n	8006388 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f022 0204 	bic.w	r2, r2, #4
 8006376:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f042 020a 	orr.w	r2, r2, #10
 8006386:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006392:	2b00      	cmp	r3, #0
 8006394:	d007      	beq.n	80063a6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80063a4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d007      	beq.n	80063be <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80063bc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f042 0201 	orr.w	r2, r2, #1
 80063cc:	601a      	str	r2, [r3, #0]
 80063ce:	e005      	b.n	80063dc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80063d8:	2302      	movs	r3, #2
 80063da:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80063dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3718      	adds	r7, #24
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}

080063e6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80063e6:	b480      	push	{r7}
 80063e8:	b085      	sub	sp, #20
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063ee:	2300      	movs	r3, #0
 80063f0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d005      	beq.n	800640a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2204      	movs	r2, #4
 8006402:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	73fb      	strb	r3, [r7, #15]
 8006408:	e037      	b.n	800647a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f022 020e 	bic.w	r2, r2, #14
 8006418:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006424:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006428:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f022 0201 	bic.w	r2, r2, #1
 8006438:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800643e:	f003 021f 	and.w	r2, r3, #31
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006446:	2101      	movs	r1, #1
 8006448:	fa01 f202 	lsl.w	r2, r1, r2
 800644c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006456:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800645c:	2b00      	cmp	r3, #0
 800645e:	d00c      	beq.n	800647a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800646a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800646e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006478:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2201      	movs	r2, #1
 800647e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800648a:	7bfb      	ldrb	r3, [r7, #15]
}
 800648c:	4618      	mov	r0, r3
 800648e:	3714      	adds	r7, #20
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064a0:	2300      	movs	r3, #0
 80064a2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	d00d      	beq.n	80064cc <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2204      	movs	r2, #4
 80064b4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2201      	movs	r2, #1
 80064ba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	73fb      	strb	r3, [r7, #15]
 80064ca:	e047      	b.n	800655c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f022 020e 	bic.w	r2, r2, #14
 80064da:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f022 0201 	bic.w	r2, r2, #1
 80064ea:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064f6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80064fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006500:	f003 021f 	and.w	r2, r3, #31
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006508:	2101      	movs	r1, #1
 800650a:	fa01 f202 	lsl.w	r2, r1, r2
 800650e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006518:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800651e:	2b00      	cmp	r3, #0
 8006520:	d00c      	beq.n	800653c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800652c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006530:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800653a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006550:	2b00      	cmp	r3, #0
 8006552:	d003      	beq.n	800655c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	4798      	blx	r3
    }
  }
  return status;
 800655c:	7bfb      	ldrb	r3, [r7, #15]
}
 800655e:	4618      	mov	r0, r3
 8006560:	3710      	adds	r7, #16
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}

08006566 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006566:	b580      	push	{r7, lr}
 8006568:	b084      	sub	sp, #16
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006582:	f003 031f 	and.w	r3, r3, #31
 8006586:	2204      	movs	r2, #4
 8006588:	409a      	lsls	r2, r3
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	4013      	ands	r3, r2
 800658e:	2b00      	cmp	r3, #0
 8006590:	d026      	beq.n	80065e0 <HAL_DMA_IRQHandler+0x7a>
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	f003 0304 	and.w	r3, r3, #4
 8006598:	2b00      	cmp	r3, #0
 800659a:	d021      	beq.n	80065e0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 0320 	and.w	r3, r3, #32
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d107      	bne.n	80065ba <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f022 0204 	bic.w	r2, r2, #4
 80065b8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065be:	f003 021f 	and.w	r2, r3, #31
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065c6:	2104      	movs	r1, #4
 80065c8:	fa01 f202 	lsl.w	r2, r1, r2
 80065cc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d071      	beq.n	80066ba <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80065de:	e06c      	b.n	80066ba <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065e4:	f003 031f 	and.w	r3, r3, #31
 80065e8:	2202      	movs	r2, #2
 80065ea:	409a      	lsls	r2, r3
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	4013      	ands	r3, r2
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d02e      	beq.n	8006652 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	f003 0302 	and.w	r3, r3, #2
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d029      	beq.n	8006652 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 0320 	and.w	r3, r3, #32
 8006608:	2b00      	cmp	r3, #0
 800660a:	d10b      	bne.n	8006624 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f022 020a 	bic.w	r2, r2, #10
 800661a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006628:	f003 021f 	and.w	r2, r3, #31
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006630:	2102      	movs	r1, #2
 8006632:	fa01 f202 	lsl.w	r2, r1, r2
 8006636:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006644:	2b00      	cmp	r3, #0
 8006646:	d038      	beq.n	80066ba <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006650:	e033      	b.n	80066ba <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006656:	f003 031f 	and.w	r3, r3, #31
 800665a:	2208      	movs	r2, #8
 800665c:	409a      	lsls	r2, r3
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	4013      	ands	r3, r2
 8006662:	2b00      	cmp	r3, #0
 8006664:	d02a      	beq.n	80066bc <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	f003 0308 	and.w	r3, r3, #8
 800666c:	2b00      	cmp	r3, #0
 800666e:	d025      	beq.n	80066bc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f022 020e 	bic.w	r2, r2, #14
 800667e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006684:	f003 021f 	and.w	r2, r3, #31
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800668c:	2101      	movs	r1, #1
 800668e:	fa01 f202 	lsl.w	r2, r1, r2
 8006692:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2201      	movs	r2, #1
 800669e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d004      	beq.n	80066bc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80066ba:	bf00      	nop
 80066bc:	bf00      	nop
}
 80066be:	3710      	adds	r7, #16
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	370c      	adds	r7, #12
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr

080066dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80066dc:	b480      	push	{r7}
 80066de:	b085      	sub	sp, #20
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	60b9      	str	r1, [r7, #8]
 80066e6:	607a      	str	r2, [r7, #4]
 80066e8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80066f2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d004      	beq.n	8006706 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006704:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800670a:	f003 021f 	and.w	r2, r3, #31
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006712:	2101      	movs	r1, #1
 8006714:	fa01 f202 	lsl.w	r2, r1, r2
 8006718:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	683a      	ldr	r2, [r7, #0]
 8006720:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	2b10      	cmp	r3, #16
 8006728:	d108      	bne.n	800673c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	68ba      	ldr	r2, [r7, #8]
 8006738:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800673a:	e007      	b.n	800674c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	68ba      	ldr	r2, [r7, #8]
 8006742:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	60da      	str	r2, [r3, #12]
}
 800674c:	bf00      	nop
 800674e:	3714      	adds	r7, #20
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006758:	b480      	push	{r7}
 800675a:	b087      	sub	sp, #28
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	461a      	mov	r2, r3
 8006766:	4b16      	ldr	r3, [pc, #88]	@ (80067c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006768:	429a      	cmp	r2, r3
 800676a:	d802      	bhi.n	8006772 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800676c:	4b15      	ldr	r3, [pc, #84]	@ (80067c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800676e:	617b      	str	r3, [r7, #20]
 8006770:	e001      	b.n	8006776 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8006772:	4b15      	ldr	r3, [pc, #84]	@ (80067c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006774:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	b2db      	uxtb	r3, r3
 8006780:	3b08      	subs	r3, #8
 8006782:	4a12      	ldr	r2, [pc, #72]	@ (80067cc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006784:	fba2 2303 	umull	r2, r3, r2, r3
 8006788:	091b      	lsrs	r3, r3, #4
 800678a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006790:	089b      	lsrs	r3, r3, #2
 8006792:	009a      	lsls	r2, r3, #2
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	4413      	add	r3, r2
 8006798:	461a      	mov	r2, r3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4a0b      	ldr	r2, [pc, #44]	@ (80067d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80067a2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f003 031f 	and.w	r3, r3, #31
 80067aa:	2201      	movs	r2, #1
 80067ac:	409a      	lsls	r2, r3
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80067b2:	bf00      	nop
 80067b4:	371c      	adds	r7, #28
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr
 80067be:	bf00      	nop
 80067c0:	40020407 	.word	0x40020407
 80067c4:	40020800 	.word	0x40020800
 80067c8:	40020820 	.word	0x40020820
 80067cc:	cccccccd 	.word	0xcccccccd
 80067d0:	40020880 	.word	0x40020880

080067d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b085      	sub	sp, #20
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80067e4:	68fa      	ldr	r2, [r7, #12]
 80067e6:	4b0b      	ldr	r3, [pc, #44]	@ (8006814 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80067e8:	4413      	add	r3, r2
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	461a      	mov	r2, r3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4a08      	ldr	r2, [pc, #32]	@ (8006818 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80067f6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	3b01      	subs	r3, #1
 80067fc:	f003 031f 	and.w	r3, r3, #31
 8006800:	2201      	movs	r2, #1
 8006802:	409a      	lsls	r2, r3
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006808:	bf00      	nop
 800680a:	3714      	adds	r7, #20
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr
 8006814:	1000823f 	.word	0x1000823f
 8006818:	40020940 	.word	0x40020940

0800681c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800681c:	b480      	push	{r7}
 800681e:	b087      	sub	sp, #28
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006826:	2300      	movs	r3, #0
 8006828:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800682a:	e15a      	b.n	8006ae2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	2101      	movs	r1, #1
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	fa01 f303 	lsl.w	r3, r1, r3
 8006838:	4013      	ands	r3, r2
 800683a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2b00      	cmp	r3, #0
 8006840:	f000 814c 	beq.w	8006adc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	f003 0303 	and.w	r3, r3, #3
 800684c:	2b01      	cmp	r3, #1
 800684e:	d005      	beq.n	800685c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006858:	2b02      	cmp	r3, #2
 800685a:	d130      	bne.n	80068be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	005b      	lsls	r3, r3, #1
 8006866:	2203      	movs	r2, #3
 8006868:	fa02 f303 	lsl.w	r3, r2, r3
 800686c:	43db      	mvns	r3, r3
 800686e:	693a      	ldr	r2, [r7, #16]
 8006870:	4013      	ands	r3, r2
 8006872:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	68da      	ldr	r2, [r3, #12]
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	005b      	lsls	r3, r3, #1
 800687c:	fa02 f303 	lsl.w	r3, r2, r3
 8006880:	693a      	ldr	r2, [r7, #16]
 8006882:	4313      	orrs	r3, r2
 8006884:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	693a      	ldr	r2, [r7, #16]
 800688a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006892:	2201      	movs	r2, #1
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	fa02 f303 	lsl.w	r3, r2, r3
 800689a:	43db      	mvns	r3, r3
 800689c:	693a      	ldr	r2, [r7, #16]
 800689e:	4013      	ands	r3, r2
 80068a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	091b      	lsrs	r3, r3, #4
 80068a8:	f003 0201 	and.w	r2, r3, #1
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	fa02 f303 	lsl.w	r3, r2, r3
 80068b2:	693a      	ldr	r2, [r7, #16]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	693a      	ldr	r2, [r7, #16]
 80068bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	f003 0303 	and.w	r3, r3, #3
 80068c6:	2b03      	cmp	r3, #3
 80068c8:	d017      	beq.n	80068fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	005b      	lsls	r3, r3, #1
 80068d4:	2203      	movs	r2, #3
 80068d6:	fa02 f303 	lsl.w	r3, r2, r3
 80068da:	43db      	mvns	r3, r3
 80068dc:	693a      	ldr	r2, [r7, #16]
 80068de:	4013      	ands	r3, r2
 80068e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	689a      	ldr	r2, [r3, #8]
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	005b      	lsls	r3, r3, #1
 80068ea:	fa02 f303 	lsl.w	r3, r2, r3
 80068ee:	693a      	ldr	r2, [r7, #16]
 80068f0:	4313      	orrs	r3, r2
 80068f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	693a      	ldr	r2, [r7, #16]
 80068f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	f003 0303 	and.w	r3, r3, #3
 8006902:	2b02      	cmp	r3, #2
 8006904:	d123      	bne.n	800694e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	08da      	lsrs	r2, r3, #3
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	3208      	adds	r2, #8
 800690e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006912:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	f003 0307 	and.w	r3, r3, #7
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	220f      	movs	r2, #15
 800691e:	fa02 f303 	lsl.w	r3, r2, r3
 8006922:	43db      	mvns	r3, r3
 8006924:	693a      	ldr	r2, [r7, #16]
 8006926:	4013      	ands	r3, r2
 8006928:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	691a      	ldr	r2, [r3, #16]
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	f003 0307 	and.w	r3, r3, #7
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	fa02 f303 	lsl.w	r3, r2, r3
 800693a:	693a      	ldr	r2, [r7, #16]
 800693c:	4313      	orrs	r3, r2
 800693e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	08da      	lsrs	r2, r3, #3
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	3208      	adds	r2, #8
 8006948:	6939      	ldr	r1, [r7, #16]
 800694a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	005b      	lsls	r3, r3, #1
 8006958:	2203      	movs	r2, #3
 800695a:	fa02 f303 	lsl.w	r3, r2, r3
 800695e:	43db      	mvns	r3, r3
 8006960:	693a      	ldr	r2, [r7, #16]
 8006962:	4013      	ands	r3, r2
 8006964:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	f003 0203 	and.w	r2, r3, #3
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	005b      	lsls	r3, r3, #1
 8006972:	fa02 f303 	lsl.w	r3, r2, r3
 8006976:	693a      	ldr	r2, [r7, #16]
 8006978:	4313      	orrs	r3, r2
 800697a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	693a      	ldr	r2, [r7, #16]
 8006980:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800698a:	2b00      	cmp	r3, #0
 800698c:	f000 80a6 	beq.w	8006adc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006990:	4b5b      	ldr	r3, [pc, #364]	@ (8006b00 <HAL_GPIO_Init+0x2e4>)
 8006992:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006994:	4a5a      	ldr	r2, [pc, #360]	@ (8006b00 <HAL_GPIO_Init+0x2e4>)
 8006996:	f043 0301 	orr.w	r3, r3, #1
 800699a:	6613      	str	r3, [r2, #96]	@ 0x60
 800699c:	4b58      	ldr	r3, [pc, #352]	@ (8006b00 <HAL_GPIO_Init+0x2e4>)
 800699e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069a0:	f003 0301 	and.w	r3, r3, #1
 80069a4:	60bb      	str	r3, [r7, #8]
 80069a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80069a8:	4a56      	ldr	r2, [pc, #344]	@ (8006b04 <HAL_GPIO_Init+0x2e8>)
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	089b      	lsrs	r3, r3, #2
 80069ae:	3302      	adds	r3, #2
 80069b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	f003 0303 	and.w	r3, r3, #3
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	220f      	movs	r2, #15
 80069c0:	fa02 f303 	lsl.w	r3, r2, r3
 80069c4:	43db      	mvns	r3, r3
 80069c6:	693a      	ldr	r2, [r7, #16]
 80069c8:	4013      	ands	r3, r2
 80069ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80069d2:	d01f      	beq.n	8006a14 <HAL_GPIO_Init+0x1f8>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4a4c      	ldr	r2, [pc, #304]	@ (8006b08 <HAL_GPIO_Init+0x2ec>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d019      	beq.n	8006a10 <HAL_GPIO_Init+0x1f4>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a4b      	ldr	r2, [pc, #300]	@ (8006b0c <HAL_GPIO_Init+0x2f0>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d013      	beq.n	8006a0c <HAL_GPIO_Init+0x1f0>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a4a      	ldr	r2, [pc, #296]	@ (8006b10 <HAL_GPIO_Init+0x2f4>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d00d      	beq.n	8006a08 <HAL_GPIO_Init+0x1ec>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a49      	ldr	r2, [pc, #292]	@ (8006b14 <HAL_GPIO_Init+0x2f8>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d007      	beq.n	8006a04 <HAL_GPIO_Init+0x1e8>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a48      	ldr	r2, [pc, #288]	@ (8006b18 <HAL_GPIO_Init+0x2fc>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d101      	bne.n	8006a00 <HAL_GPIO_Init+0x1e4>
 80069fc:	2305      	movs	r3, #5
 80069fe:	e00a      	b.n	8006a16 <HAL_GPIO_Init+0x1fa>
 8006a00:	2306      	movs	r3, #6
 8006a02:	e008      	b.n	8006a16 <HAL_GPIO_Init+0x1fa>
 8006a04:	2304      	movs	r3, #4
 8006a06:	e006      	b.n	8006a16 <HAL_GPIO_Init+0x1fa>
 8006a08:	2303      	movs	r3, #3
 8006a0a:	e004      	b.n	8006a16 <HAL_GPIO_Init+0x1fa>
 8006a0c:	2302      	movs	r3, #2
 8006a0e:	e002      	b.n	8006a16 <HAL_GPIO_Init+0x1fa>
 8006a10:	2301      	movs	r3, #1
 8006a12:	e000      	b.n	8006a16 <HAL_GPIO_Init+0x1fa>
 8006a14:	2300      	movs	r3, #0
 8006a16:	697a      	ldr	r2, [r7, #20]
 8006a18:	f002 0203 	and.w	r2, r2, #3
 8006a1c:	0092      	lsls	r2, r2, #2
 8006a1e:	4093      	lsls	r3, r2
 8006a20:	693a      	ldr	r2, [r7, #16]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006a26:	4937      	ldr	r1, [pc, #220]	@ (8006b04 <HAL_GPIO_Init+0x2e8>)
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	089b      	lsrs	r3, r3, #2
 8006a2c:	3302      	adds	r3, #2
 8006a2e:	693a      	ldr	r2, [r7, #16]
 8006a30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006a34:	4b39      	ldr	r3, [pc, #228]	@ (8006b1c <HAL_GPIO_Init+0x300>)
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	43db      	mvns	r3, r3
 8006a3e:	693a      	ldr	r2, [r7, #16]
 8006a40:	4013      	ands	r3, r2
 8006a42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d003      	beq.n	8006a58 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006a50:	693a      	ldr	r2, [r7, #16]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006a58:	4a30      	ldr	r2, [pc, #192]	@ (8006b1c <HAL_GPIO_Init+0x300>)
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006a5e:	4b2f      	ldr	r3, [pc, #188]	@ (8006b1c <HAL_GPIO_Init+0x300>)
 8006a60:	68db      	ldr	r3, [r3, #12]
 8006a62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	43db      	mvns	r3, r3
 8006a68:	693a      	ldr	r2, [r7, #16]
 8006a6a:	4013      	ands	r3, r2
 8006a6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d003      	beq.n	8006a82 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006a7a:	693a      	ldr	r2, [r7, #16]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006a82:	4a26      	ldr	r2, [pc, #152]	@ (8006b1c <HAL_GPIO_Init+0x300>)
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006a88:	4b24      	ldr	r3, [pc, #144]	@ (8006b1c <HAL_GPIO_Init+0x300>)
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	43db      	mvns	r3, r3
 8006a92:	693a      	ldr	r2, [r7, #16]
 8006a94:	4013      	ands	r3, r2
 8006a96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d003      	beq.n	8006aac <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006aa4:	693a      	ldr	r2, [r7, #16]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006aac:	4a1b      	ldr	r2, [pc, #108]	@ (8006b1c <HAL_GPIO_Init+0x300>)
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006ab2:	4b1a      	ldr	r3, [pc, #104]	@ (8006b1c <HAL_GPIO_Init+0x300>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	43db      	mvns	r3, r3
 8006abc:	693a      	ldr	r2, [r7, #16]
 8006abe:	4013      	ands	r3, r2
 8006ac0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d003      	beq.n	8006ad6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006ace:	693a      	ldr	r2, [r7, #16]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006ad6:	4a11      	ldr	r2, [pc, #68]	@ (8006b1c <HAL_GPIO_Init+0x300>)
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	3301      	adds	r3, #1
 8006ae0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	f47f ae9d 	bne.w	800682c <HAL_GPIO_Init+0x10>
  }
}
 8006af2:	bf00      	nop
 8006af4:	bf00      	nop
 8006af6:	371c      	adds	r7, #28
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr
 8006b00:	40021000 	.word	0x40021000
 8006b04:	40010000 	.word	0x40010000
 8006b08:	48000400 	.word	0x48000400
 8006b0c:	48000800 	.word	0x48000800
 8006b10:	48000c00 	.word	0x48000c00
 8006b14:	48001000 	.word	0x48001000
 8006b18:	48001400 	.word	0x48001400
 8006b1c:	40010400 	.word	0x40010400

08006b20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	460b      	mov	r3, r1
 8006b2a:	807b      	strh	r3, [r7, #2]
 8006b2c:	4613      	mov	r3, r2
 8006b2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006b30:	787b      	ldrb	r3, [r7, #1]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d003      	beq.n	8006b3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006b36:	887a      	ldrh	r2, [r7, #2]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006b3c:	e002      	b.n	8006b44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006b3e:	887a      	ldrh	r2, [r7, #2]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006b44:	bf00      	nop
 8006b46:	370c      	adds	r7, #12
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr

08006b50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b082      	sub	sp, #8
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	4603      	mov	r3, r0
 8006b58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006b5a:	4b08      	ldr	r3, [pc, #32]	@ (8006b7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006b5c:	695a      	ldr	r2, [r3, #20]
 8006b5e:	88fb      	ldrh	r3, [r7, #6]
 8006b60:	4013      	ands	r3, r2
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d006      	beq.n	8006b74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006b66:	4a05      	ldr	r2, [pc, #20]	@ (8006b7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006b68:	88fb      	ldrh	r3, [r7, #6]
 8006b6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006b6c:	88fb      	ldrh	r3, [r7, #6]
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7fc fbae 	bl	80032d0 <HAL_GPIO_EXTI_Callback>
  }
}
 8006b74:	bf00      	nop
 8006b76:	3708      	adds	r7, #8
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	40010400 	.word	0x40010400

08006b80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b085      	sub	sp, #20
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d141      	bne.n	8006c12 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006b8e:	4b4b      	ldr	r3, [pc, #300]	@ (8006cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006b96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b9a:	d131      	bne.n	8006c00 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006b9c:	4b47      	ldr	r3, [pc, #284]	@ (8006cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ba2:	4a46      	ldr	r2, [pc, #280]	@ (8006cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ba4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ba8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006bac:	4b43      	ldr	r3, [pc, #268]	@ (8006cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006bb4:	4a41      	ldr	r2, [pc, #260]	@ (8006cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bb6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006bba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006bbc:	4b40      	ldr	r3, [pc, #256]	@ (8006cc0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2232      	movs	r2, #50	@ 0x32
 8006bc2:	fb02 f303 	mul.w	r3, r2, r3
 8006bc6:	4a3f      	ldr	r2, [pc, #252]	@ (8006cc4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8006bcc:	0c9b      	lsrs	r3, r3, #18
 8006bce:	3301      	adds	r3, #1
 8006bd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006bd2:	e002      	b.n	8006bda <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	3b01      	subs	r3, #1
 8006bd8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006bda:	4b38      	ldr	r3, [pc, #224]	@ (8006cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bdc:	695b      	ldr	r3, [r3, #20]
 8006bde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006be2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006be6:	d102      	bne.n	8006bee <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d1f2      	bne.n	8006bd4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006bee:	4b33      	ldr	r3, [pc, #204]	@ (8006cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bf0:	695b      	ldr	r3, [r3, #20]
 8006bf2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bf6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bfa:	d158      	bne.n	8006cae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006bfc:	2303      	movs	r3, #3
 8006bfe:	e057      	b.n	8006cb0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006c00:	4b2e      	ldr	r3, [pc, #184]	@ (8006cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c06:	4a2d      	ldr	r2, [pc, #180]	@ (8006cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c0c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006c10:	e04d      	b.n	8006cae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c18:	d141      	bne.n	8006c9e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006c1a:	4b28      	ldr	r3, [pc, #160]	@ (8006cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006c22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c26:	d131      	bne.n	8006c8c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006c28:	4b24      	ldr	r3, [pc, #144]	@ (8006cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c2e:	4a23      	ldr	r2, [pc, #140]	@ (8006cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c34:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006c38:	4b20      	ldr	r3, [pc, #128]	@ (8006cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006c40:	4a1e      	ldr	r2, [pc, #120]	@ (8006cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006c46:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006c48:	4b1d      	ldr	r3, [pc, #116]	@ (8006cc0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	2232      	movs	r2, #50	@ 0x32
 8006c4e:	fb02 f303 	mul.w	r3, r2, r3
 8006c52:	4a1c      	ldr	r2, [pc, #112]	@ (8006cc4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006c54:	fba2 2303 	umull	r2, r3, r2, r3
 8006c58:	0c9b      	lsrs	r3, r3, #18
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006c5e:	e002      	b.n	8006c66 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	3b01      	subs	r3, #1
 8006c64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006c66:	4b15      	ldr	r3, [pc, #84]	@ (8006cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c68:	695b      	ldr	r3, [r3, #20]
 8006c6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c72:	d102      	bne.n	8006c7a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d1f2      	bne.n	8006c60 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006c7a:	4b10      	ldr	r3, [pc, #64]	@ (8006cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c7c:	695b      	ldr	r3, [r3, #20]
 8006c7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c86:	d112      	bne.n	8006cae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006c88:	2303      	movs	r3, #3
 8006c8a:	e011      	b.n	8006cb0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8006cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c92:	4a0a      	ldr	r2, [pc, #40]	@ (8006cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c98:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006c9c:	e007      	b.n	8006cae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006c9e:	4b07      	ldr	r3, [pc, #28]	@ (8006cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006ca6:	4a05      	ldr	r2, [pc, #20]	@ (8006cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ca8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006cac:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006cae:	2300      	movs	r3, #0
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3714      	adds	r7, #20
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr
 8006cbc:	40007000 	.word	0x40007000
 8006cc0:	20000200 	.word	0x20000200
 8006cc4:	431bde83 	.word	0x431bde83

08006cc8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006ccc:	4b05      	ldr	r3, [pc, #20]	@ (8006ce4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	4a04      	ldr	r2, [pc, #16]	@ (8006ce4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006cd2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006cd6:	6093      	str	r3, [r2, #8]
}
 8006cd8:	bf00      	nop
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	40007000 	.word	0x40007000

08006ce8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b088      	sub	sp, #32
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d101      	bne.n	8006cfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e2fe      	b.n	80072f8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 0301 	and.w	r3, r3, #1
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d075      	beq.n	8006df2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d06:	4b97      	ldr	r3, [pc, #604]	@ (8006f64 <HAL_RCC_OscConfig+0x27c>)
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	f003 030c 	and.w	r3, r3, #12
 8006d0e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006d10:	4b94      	ldr	r3, [pc, #592]	@ (8006f64 <HAL_RCC_OscConfig+0x27c>)
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	f003 0303 	and.w	r3, r3, #3
 8006d18:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	2b0c      	cmp	r3, #12
 8006d1e:	d102      	bne.n	8006d26 <HAL_RCC_OscConfig+0x3e>
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	2b03      	cmp	r3, #3
 8006d24:	d002      	beq.n	8006d2c <HAL_RCC_OscConfig+0x44>
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	2b08      	cmp	r3, #8
 8006d2a:	d10b      	bne.n	8006d44 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d2c:	4b8d      	ldr	r3, [pc, #564]	@ (8006f64 <HAL_RCC_OscConfig+0x27c>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d05b      	beq.n	8006df0 <HAL_RCC_OscConfig+0x108>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d157      	bne.n	8006df0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	e2d9      	b.n	80072f8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d4c:	d106      	bne.n	8006d5c <HAL_RCC_OscConfig+0x74>
 8006d4e:	4b85      	ldr	r3, [pc, #532]	@ (8006f64 <HAL_RCC_OscConfig+0x27c>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a84      	ldr	r2, [pc, #528]	@ (8006f64 <HAL_RCC_OscConfig+0x27c>)
 8006d54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d58:	6013      	str	r3, [r2, #0]
 8006d5a:	e01d      	b.n	8006d98 <HAL_RCC_OscConfig+0xb0>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006d64:	d10c      	bne.n	8006d80 <HAL_RCC_OscConfig+0x98>
 8006d66:	4b7f      	ldr	r3, [pc, #508]	@ (8006f64 <HAL_RCC_OscConfig+0x27c>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a7e      	ldr	r2, [pc, #504]	@ (8006f64 <HAL_RCC_OscConfig+0x27c>)
 8006d6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006d70:	6013      	str	r3, [r2, #0]
 8006d72:	4b7c      	ldr	r3, [pc, #496]	@ (8006f64 <HAL_RCC_OscConfig+0x27c>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a7b      	ldr	r2, [pc, #492]	@ (8006f64 <HAL_RCC_OscConfig+0x27c>)
 8006d78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d7c:	6013      	str	r3, [r2, #0]
 8006d7e:	e00b      	b.n	8006d98 <HAL_RCC_OscConfig+0xb0>
 8006d80:	4b78      	ldr	r3, [pc, #480]	@ (8006f64 <HAL_RCC_OscConfig+0x27c>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a77      	ldr	r2, [pc, #476]	@ (8006f64 <HAL_RCC_OscConfig+0x27c>)
 8006d86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d8a:	6013      	str	r3, [r2, #0]
 8006d8c:	4b75      	ldr	r3, [pc, #468]	@ (8006f64 <HAL_RCC_OscConfig+0x27c>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a74      	ldr	r2, [pc, #464]	@ (8006f64 <HAL_RCC_OscConfig+0x27c>)
 8006d92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006d96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d013      	beq.n	8006dc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006da0:	f7fd fe24 	bl	80049ec <HAL_GetTick>
 8006da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006da6:	e008      	b.n	8006dba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006da8:	f7fd fe20 	bl	80049ec <HAL_GetTick>
 8006dac:	4602      	mov	r2, r0
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	1ad3      	subs	r3, r2, r3
 8006db2:	2b64      	cmp	r3, #100	@ 0x64
 8006db4:	d901      	bls.n	8006dba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006db6:	2303      	movs	r3, #3
 8006db8:	e29e      	b.n	80072f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006dba:	4b6a      	ldr	r3, [pc, #424]	@ (8006f64 <HAL_RCC_OscConfig+0x27c>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d0f0      	beq.n	8006da8 <HAL_RCC_OscConfig+0xc0>
 8006dc6:	e014      	b.n	8006df2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dc8:	f7fd fe10 	bl	80049ec <HAL_GetTick>
 8006dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006dce:	e008      	b.n	8006de2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006dd0:	f7fd fe0c 	bl	80049ec <HAL_GetTick>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	1ad3      	subs	r3, r2, r3
 8006dda:	2b64      	cmp	r3, #100	@ 0x64
 8006ddc:	d901      	bls.n	8006de2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006dde:	2303      	movs	r3, #3
 8006de0:	e28a      	b.n	80072f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006de2:	4b60      	ldr	r3, [pc, #384]	@ (8006f64 <HAL_RCC_OscConfig+0x27c>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d1f0      	bne.n	8006dd0 <HAL_RCC_OscConfig+0xe8>
 8006dee:	e000      	b.n	8006df2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006df0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f003 0302 	and.w	r3, r3, #2
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d075      	beq.n	8006eea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006dfe:	4b59      	ldr	r3, [pc, #356]	@ (8006f64 <HAL_RCC_OscConfig+0x27c>)
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	f003 030c 	and.w	r3, r3, #12
 8006e06:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006e08:	4b56      	ldr	r3, [pc, #344]	@ (8006f64 <HAL_RCC_OscConfig+0x27c>)
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	f003 0303 	and.w	r3, r3, #3
 8006e10:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006e12:	69bb      	ldr	r3, [r7, #24]
 8006e14:	2b0c      	cmp	r3, #12
 8006e16:	d102      	bne.n	8006e1e <HAL_RCC_OscConfig+0x136>
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	2b02      	cmp	r3, #2
 8006e1c:	d002      	beq.n	8006e24 <HAL_RCC_OscConfig+0x13c>
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	2b04      	cmp	r3, #4
 8006e22:	d11f      	bne.n	8006e64 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e24:	4b4f      	ldr	r3, [pc, #316]	@ (8006f64 <HAL_RCC_OscConfig+0x27c>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d005      	beq.n	8006e3c <HAL_RCC_OscConfig+0x154>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d101      	bne.n	8006e3c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	e25d      	b.n	80072f8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e3c:	4b49      	ldr	r3, [pc, #292]	@ (8006f64 <HAL_RCC_OscConfig+0x27c>)
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	691b      	ldr	r3, [r3, #16]
 8006e48:	061b      	lsls	r3, r3, #24
 8006e4a:	4946      	ldr	r1, [pc, #280]	@ (8006f64 <HAL_RCC_OscConfig+0x27c>)
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006e50:	4b45      	ldr	r3, [pc, #276]	@ (8006f68 <HAL_RCC_OscConfig+0x280>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4618      	mov	r0, r3
 8006e56:	f7fd fd7d 	bl	8004954 <HAL_InitTick>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d043      	beq.n	8006ee8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006e60:	2301      	movs	r3, #1
 8006e62:	e249      	b.n	80072f8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d023      	beq.n	8006eb4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e6c:	4b3d      	ldr	r3, [pc, #244]	@ (8006f64 <HAL_RCC_OscConfig+0x27c>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a3c      	ldr	r2, [pc, #240]	@ (8006f64 <HAL_RCC_OscConfig+0x27c>)
 8006e72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e78:	f7fd fdb8 	bl	80049ec <HAL_GetTick>
 8006e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e7e:	e008      	b.n	8006e92 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e80:	f7fd fdb4 	bl	80049ec <HAL_GetTick>
 8006e84:	4602      	mov	r2, r0
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	1ad3      	subs	r3, r2, r3
 8006e8a:	2b02      	cmp	r3, #2
 8006e8c:	d901      	bls.n	8006e92 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006e8e:	2303      	movs	r3, #3
 8006e90:	e232      	b.n	80072f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e92:	4b34      	ldr	r3, [pc, #208]	@ (8006f64 <HAL_RCC_OscConfig+0x27c>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d0f0      	beq.n	8006e80 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e9e:	4b31      	ldr	r3, [pc, #196]	@ (8006f64 <HAL_RCC_OscConfig+0x27c>)
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	691b      	ldr	r3, [r3, #16]
 8006eaa:	061b      	lsls	r3, r3, #24
 8006eac:	492d      	ldr	r1, [pc, #180]	@ (8006f64 <HAL_RCC_OscConfig+0x27c>)
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	604b      	str	r3, [r1, #4]
 8006eb2:	e01a      	b.n	8006eea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006eb4:	4b2b      	ldr	r3, [pc, #172]	@ (8006f64 <HAL_RCC_OscConfig+0x27c>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a2a      	ldr	r2, [pc, #168]	@ (8006f64 <HAL_RCC_OscConfig+0x27c>)
 8006eba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ebe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ec0:	f7fd fd94 	bl	80049ec <HAL_GetTick>
 8006ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006ec6:	e008      	b.n	8006eda <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ec8:	f7fd fd90 	bl	80049ec <HAL_GetTick>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	1ad3      	subs	r3, r2, r3
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d901      	bls.n	8006eda <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006ed6:	2303      	movs	r3, #3
 8006ed8:	e20e      	b.n	80072f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006eda:	4b22      	ldr	r3, [pc, #136]	@ (8006f64 <HAL_RCC_OscConfig+0x27c>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d1f0      	bne.n	8006ec8 <HAL_RCC_OscConfig+0x1e0>
 8006ee6:	e000      	b.n	8006eea <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ee8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f003 0308 	and.w	r3, r3, #8
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d041      	beq.n	8006f7a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	695b      	ldr	r3, [r3, #20]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d01c      	beq.n	8006f38 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006efe:	4b19      	ldr	r3, [pc, #100]	@ (8006f64 <HAL_RCC_OscConfig+0x27c>)
 8006f00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f04:	4a17      	ldr	r2, [pc, #92]	@ (8006f64 <HAL_RCC_OscConfig+0x27c>)
 8006f06:	f043 0301 	orr.w	r3, r3, #1
 8006f0a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f0e:	f7fd fd6d 	bl	80049ec <HAL_GetTick>
 8006f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006f14:	e008      	b.n	8006f28 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f16:	f7fd fd69 	bl	80049ec <HAL_GetTick>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	1ad3      	subs	r3, r2, r3
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	d901      	bls.n	8006f28 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006f24:	2303      	movs	r3, #3
 8006f26:	e1e7      	b.n	80072f8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006f28:	4b0e      	ldr	r3, [pc, #56]	@ (8006f64 <HAL_RCC_OscConfig+0x27c>)
 8006f2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f2e:	f003 0302 	and.w	r3, r3, #2
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d0ef      	beq.n	8006f16 <HAL_RCC_OscConfig+0x22e>
 8006f36:	e020      	b.n	8006f7a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f38:	4b0a      	ldr	r3, [pc, #40]	@ (8006f64 <HAL_RCC_OscConfig+0x27c>)
 8006f3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f3e:	4a09      	ldr	r2, [pc, #36]	@ (8006f64 <HAL_RCC_OscConfig+0x27c>)
 8006f40:	f023 0301 	bic.w	r3, r3, #1
 8006f44:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f48:	f7fd fd50 	bl	80049ec <HAL_GetTick>
 8006f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006f4e:	e00d      	b.n	8006f6c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f50:	f7fd fd4c 	bl	80049ec <HAL_GetTick>
 8006f54:	4602      	mov	r2, r0
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	1ad3      	subs	r3, r2, r3
 8006f5a:	2b02      	cmp	r3, #2
 8006f5c:	d906      	bls.n	8006f6c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006f5e:	2303      	movs	r3, #3
 8006f60:	e1ca      	b.n	80072f8 <HAL_RCC_OscConfig+0x610>
 8006f62:	bf00      	nop
 8006f64:	40021000 	.word	0x40021000
 8006f68:	20000204 	.word	0x20000204
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006f6c:	4b8c      	ldr	r3, [pc, #560]	@ (80071a0 <HAL_RCC_OscConfig+0x4b8>)
 8006f6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f72:	f003 0302 	and.w	r3, r3, #2
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d1ea      	bne.n	8006f50 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 0304 	and.w	r3, r3, #4
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	f000 80a6 	beq.w	80070d4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006f8c:	4b84      	ldr	r3, [pc, #528]	@ (80071a0 <HAL_RCC_OscConfig+0x4b8>)
 8006f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d101      	bne.n	8006f9c <HAL_RCC_OscConfig+0x2b4>
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e000      	b.n	8006f9e <HAL_RCC_OscConfig+0x2b6>
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d00d      	beq.n	8006fbe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006fa2:	4b7f      	ldr	r3, [pc, #508]	@ (80071a0 <HAL_RCC_OscConfig+0x4b8>)
 8006fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fa6:	4a7e      	ldr	r2, [pc, #504]	@ (80071a0 <HAL_RCC_OscConfig+0x4b8>)
 8006fa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006fac:	6593      	str	r3, [r2, #88]	@ 0x58
 8006fae:	4b7c      	ldr	r3, [pc, #496]	@ (80071a0 <HAL_RCC_OscConfig+0x4b8>)
 8006fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fb6:	60fb      	str	r3, [r7, #12]
 8006fb8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006fbe:	4b79      	ldr	r3, [pc, #484]	@ (80071a4 <HAL_RCC_OscConfig+0x4bc>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d118      	bne.n	8006ffc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006fca:	4b76      	ldr	r3, [pc, #472]	@ (80071a4 <HAL_RCC_OscConfig+0x4bc>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a75      	ldr	r2, [pc, #468]	@ (80071a4 <HAL_RCC_OscConfig+0x4bc>)
 8006fd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006fd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006fd6:	f7fd fd09 	bl	80049ec <HAL_GetTick>
 8006fda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006fdc:	e008      	b.n	8006ff0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fde:	f7fd fd05 	bl	80049ec <HAL_GetTick>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	1ad3      	subs	r3, r2, r3
 8006fe8:	2b02      	cmp	r3, #2
 8006fea:	d901      	bls.n	8006ff0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006fec:	2303      	movs	r3, #3
 8006fee:	e183      	b.n	80072f8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ff0:	4b6c      	ldr	r3, [pc, #432]	@ (80071a4 <HAL_RCC_OscConfig+0x4bc>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d0f0      	beq.n	8006fde <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	2b01      	cmp	r3, #1
 8007002:	d108      	bne.n	8007016 <HAL_RCC_OscConfig+0x32e>
 8007004:	4b66      	ldr	r3, [pc, #408]	@ (80071a0 <HAL_RCC_OscConfig+0x4b8>)
 8007006:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800700a:	4a65      	ldr	r2, [pc, #404]	@ (80071a0 <HAL_RCC_OscConfig+0x4b8>)
 800700c:	f043 0301 	orr.w	r3, r3, #1
 8007010:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007014:	e024      	b.n	8007060 <HAL_RCC_OscConfig+0x378>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	2b05      	cmp	r3, #5
 800701c:	d110      	bne.n	8007040 <HAL_RCC_OscConfig+0x358>
 800701e:	4b60      	ldr	r3, [pc, #384]	@ (80071a0 <HAL_RCC_OscConfig+0x4b8>)
 8007020:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007024:	4a5e      	ldr	r2, [pc, #376]	@ (80071a0 <HAL_RCC_OscConfig+0x4b8>)
 8007026:	f043 0304 	orr.w	r3, r3, #4
 800702a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800702e:	4b5c      	ldr	r3, [pc, #368]	@ (80071a0 <HAL_RCC_OscConfig+0x4b8>)
 8007030:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007034:	4a5a      	ldr	r2, [pc, #360]	@ (80071a0 <HAL_RCC_OscConfig+0x4b8>)
 8007036:	f043 0301 	orr.w	r3, r3, #1
 800703a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800703e:	e00f      	b.n	8007060 <HAL_RCC_OscConfig+0x378>
 8007040:	4b57      	ldr	r3, [pc, #348]	@ (80071a0 <HAL_RCC_OscConfig+0x4b8>)
 8007042:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007046:	4a56      	ldr	r2, [pc, #344]	@ (80071a0 <HAL_RCC_OscConfig+0x4b8>)
 8007048:	f023 0301 	bic.w	r3, r3, #1
 800704c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007050:	4b53      	ldr	r3, [pc, #332]	@ (80071a0 <HAL_RCC_OscConfig+0x4b8>)
 8007052:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007056:	4a52      	ldr	r2, [pc, #328]	@ (80071a0 <HAL_RCC_OscConfig+0x4b8>)
 8007058:	f023 0304 	bic.w	r3, r3, #4
 800705c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d016      	beq.n	8007096 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007068:	f7fd fcc0 	bl	80049ec <HAL_GetTick>
 800706c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800706e:	e00a      	b.n	8007086 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007070:	f7fd fcbc 	bl	80049ec <HAL_GetTick>
 8007074:	4602      	mov	r2, r0
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	1ad3      	subs	r3, r2, r3
 800707a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800707e:	4293      	cmp	r3, r2
 8007080:	d901      	bls.n	8007086 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007082:	2303      	movs	r3, #3
 8007084:	e138      	b.n	80072f8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007086:	4b46      	ldr	r3, [pc, #280]	@ (80071a0 <HAL_RCC_OscConfig+0x4b8>)
 8007088:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800708c:	f003 0302 	and.w	r3, r3, #2
 8007090:	2b00      	cmp	r3, #0
 8007092:	d0ed      	beq.n	8007070 <HAL_RCC_OscConfig+0x388>
 8007094:	e015      	b.n	80070c2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007096:	f7fd fca9 	bl	80049ec <HAL_GetTick>
 800709a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800709c:	e00a      	b.n	80070b4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800709e:	f7fd fca5 	bl	80049ec <HAL_GetTick>
 80070a2:	4602      	mov	r2, r0
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	1ad3      	subs	r3, r2, r3
 80070a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d901      	bls.n	80070b4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80070b0:	2303      	movs	r3, #3
 80070b2:	e121      	b.n	80072f8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80070b4:	4b3a      	ldr	r3, [pc, #232]	@ (80071a0 <HAL_RCC_OscConfig+0x4b8>)
 80070b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070ba:	f003 0302 	and.w	r3, r3, #2
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d1ed      	bne.n	800709e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80070c2:	7ffb      	ldrb	r3, [r7, #31]
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d105      	bne.n	80070d4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070c8:	4b35      	ldr	r3, [pc, #212]	@ (80071a0 <HAL_RCC_OscConfig+0x4b8>)
 80070ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070cc:	4a34      	ldr	r2, [pc, #208]	@ (80071a0 <HAL_RCC_OscConfig+0x4b8>)
 80070ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80070d2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f003 0320 	and.w	r3, r3, #32
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d03c      	beq.n	800715a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	699b      	ldr	r3, [r3, #24]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d01c      	beq.n	8007122 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80070e8:	4b2d      	ldr	r3, [pc, #180]	@ (80071a0 <HAL_RCC_OscConfig+0x4b8>)
 80070ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80070ee:	4a2c      	ldr	r2, [pc, #176]	@ (80071a0 <HAL_RCC_OscConfig+0x4b8>)
 80070f0:	f043 0301 	orr.w	r3, r3, #1
 80070f4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070f8:	f7fd fc78 	bl	80049ec <HAL_GetTick>
 80070fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80070fe:	e008      	b.n	8007112 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007100:	f7fd fc74 	bl	80049ec <HAL_GetTick>
 8007104:	4602      	mov	r2, r0
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	1ad3      	subs	r3, r2, r3
 800710a:	2b02      	cmp	r3, #2
 800710c:	d901      	bls.n	8007112 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800710e:	2303      	movs	r3, #3
 8007110:	e0f2      	b.n	80072f8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007112:	4b23      	ldr	r3, [pc, #140]	@ (80071a0 <HAL_RCC_OscConfig+0x4b8>)
 8007114:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007118:	f003 0302 	and.w	r3, r3, #2
 800711c:	2b00      	cmp	r3, #0
 800711e:	d0ef      	beq.n	8007100 <HAL_RCC_OscConfig+0x418>
 8007120:	e01b      	b.n	800715a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007122:	4b1f      	ldr	r3, [pc, #124]	@ (80071a0 <HAL_RCC_OscConfig+0x4b8>)
 8007124:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007128:	4a1d      	ldr	r2, [pc, #116]	@ (80071a0 <HAL_RCC_OscConfig+0x4b8>)
 800712a:	f023 0301 	bic.w	r3, r3, #1
 800712e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007132:	f7fd fc5b 	bl	80049ec <HAL_GetTick>
 8007136:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007138:	e008      	b.n	800714c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800713a:	f7fd fc57 	bl	80049ec <HAL_GetTick>
 800713e:	4602      	mov	r2, r0
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	1ad3      	subs	r3, r2, r3
 8007144:	2b02      	cmp	r3, #2
 8007146:	d901      	bls.n	800714c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007148:	2303      	movs	r3, #3
 800714a:	e0d5      	b.n	80072f8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800714c:	4b14      	ldr	r3, [pc, #80]	@ (80071a0 <HAL_RCC_OscConfig+0x4b8>)
 800714e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007152:	f003 0302 	and.w	r3, r3, #2
 8007156:	2b00      	cmp	r3, #0
 8007158:	d1ef      	bne.n	800713a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	69db      	ldr	r3, [r3, #28]
 800715e:	2b00      	cmp	r3, #0
 8007160:	f000 80c9 	beq.w	80072f6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007164:	4b0e      	ldr	r3, [pc, #56]	@ (80071a0 <HAL_RCC_OscConfig+0x4b8>)
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	f003 030c 	and.w	r3, r3, #12
 800716c:	2b0c      	cmp	r3, #12
 800716e:	f000 8083 	beq.w	8007278 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	69db      	ldr	r3, [r3, #28]
 8007176:	2b02      	cmp	r3, #2
 8007178:	d15e      	bne.n	8007238 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800717a:	4b09      	ldr	r3, [pc, #36]	@ (80071a0 <HAL_RCC_OscConfig+0x4b8>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a08      	ldr	r2, [pc, #32]	@ (80071a0 <HAL_RCC_OscConfig+0x4b8>)
 8007180:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007184:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007186:	f7fd fc31 	bl	80049ec <HAL_GetTick>
 800718a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800718c:	e00c      	b.n	80071a8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800718e:	f7fd fc2d 	bl	80049ec <HAL_GetTick>
 8007192:	4602      	mov	r2, r0
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	1ad3      	subs	r3, r2, r3
 8007198:	2b02      	cmp	r3, #2
 800719a:	d905      	bls.n	80071a8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800719c:	2303      	movs	r3, #3
 800719e:	e0ab      	b.n	80072f8 <HAL_RCC_OscConfig+0x610>
 80071a0:	40021000 	.word	0x40021000
 80071a4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80071a8:	4b55      	ldr	r3, [pc, #340]	@ (8007300 <HAL_RCC_OscConfig+0x618>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d1ec      	bne.n	800718e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80071b4:	4b52      	ldr	r3, [pc, #328]	@ (8007300 <HAL_RCC_OscConfig+0x618>)
 80071b6:	68da      	ldr	r2, [r3, #12]
 80071b8:	4b52      	ldr	r3, [pc, #328]	@ (8007304 <HAL_RCC_OscConfig+0x61c>)
 80071ba:	4013      	ands	r3, r2
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	6a11      	ldr	r1, [r2, #32]
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80071c4:	3a01      	subs	r2, #1
 80071c6:	0112      	lsls	r2, r2, #4
 80071c8:	4311      	orrs	r1, r2
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80071ce:	0212      	lsls	r2, r2, #8
 80071d0:	4311      	orrs	r1, r2
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80071d6:	0852      	lsrs	r2, r2, #1
 80071d8:	3a01      	subs	r2, #1
 80071da:	0552      	lsls	r2, r2, #21
 80071dc:	4311      	orrs	r1, r2
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80071e2:	0852      	lsrs	r2, r2, #1
 80071e4:	3a01      	subs	r2, #1
 80071e6:	0652      	lsls	r2, r2, #25
 80071e8:	4311      	orrs	r1, r2
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80071ee:	06d2      	lsls	r2, r2, #27
 80071f0:	430a      	orrs	r2, r1
 80071f2:	4943      	ldr	r1, [pc, #268]	@ (8007300 <HAL_RCC_OscConfig+0x618>)
 80071f4:	4313      	orrs	r3, r2
 80071f6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80071f8:	4b41      	ldr	r3, [pc, #260]	@ (8007300 <HAL_RCC_OscConfig+0x618>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a40      	ldr	r2, [pc, #256]	@ (8007300 <HAL_RCC_OscConfig+0x618>)
 80071fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007202:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007204:	4b3e      	ldr	r3, [pc, #248]	@ (8007300 <HAL_RCC_OscConfig+0x618>)
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	4a3d      	ldr	r2, [pc, #244]	@ (8007300 <HAL_RCC_OscConfig+0x618>)
 800720a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800720e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007210:	f7fd fbec 	bl	80049ec <HAL_GetTick>
 8007214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007216:	e008      	b.n	800722a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007218:	f7fd fbe8 	bl	80049ec <HAL_GetTick>
 800721c:	4602      	mov	r2, r0
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	1ad3      	subs	r3, r2, r3
 8007222:	2b02      	cmp	r3, #2
 8007224:	d901      	bls.n	800722a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007226:	2303      	movs	r3, #3
 8007228:	e066      	b.n	80072f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800722a:	4b35      	ldr	r3, [pc, #212]	@ (8007300 <HAL_RCC_OscConfig+0x618>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007232:	2b00      	cmp	r3, #0
 8007234:	d0f0      	beq.n	8007218 <HAL_RCC_OscConfig+0x530>
 8007236:	e05e      	b.n	80072f6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007238:	4b31      	ldr	r3, [pc, #196]	@ (8007300 <HAL_RCC_OscConfig+0x618>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a30      	ldr	r2, [pc, #192]	@ (8007300 <HAL_RCC_OscConfig+0x618>)
 800723e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007242:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007244:	f7fd fbd2 	bl	80049ec <HAL_GetTick>
 8007248:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800724a:	e008      	b.n	800725e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800724c:	f7fd fbce 	bl	80049ec <HAL_GetTick>
 8007250:	4602      	mov	r2, r0
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	1ad3      	subs	r3, r2, r3
 8007256:	2b02      	cmp	r3, #2
 8007258:	d901      	bls.n	800725e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800725a:	2303      	movs	r3, #3
 800725c:	e04c      	b.n	80072f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800725e:	4b28      	ldr	r3, [pc, #160]	@ (8007300 <HAL_RCC_OscConfig+0x618>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007266:	2b00      	cmp	r3, #0
 8007268:	d1f0      	bne.n	800724c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800726a:	4b25      	ldr	r3, [pc, #148]	@ (8007300 <HAL_RCC_OscConfig+0x618>)
 800726c:	68da      	ldr	r2, [r3, #12]
 800726e:	4924      	ldr	r1, [pc, #144]	@ (8007300 <HAL_RCC_OscConfig+0x618>)
 8007270:	4b25      	ldr	r3, [pc, #148]	@ (8007308 <HAL_RCC_OscConfig+0x620>)
 8007272:	4013      	ands	r3, r2
 8007274:	60cb      	str	r3, [r1, #12]
 8007276:	e03e      	b.n	80072f6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	69db      	ldr	r3, [r3, #28]
 800727c:	2b01      	cmp	r3, #1
 800727e:	d101      	bne.n	8007284 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	e039      	b.n	80072f8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007284:	4b1e      	ldr	r3, [pc, #120]	@ (8007300 <HAL_RCC_OscConfig+0x618>)
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	f003 0203 	and.w	r2, r3, #3
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6a1b      	ldr	r3, [r3, #32]
 8007294:	429a      	cmp	r2, r3
 8007296:	d12c      	bne.n	80072f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072a2:	3b01      	subs	r3, #1
 80072a4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d123      	bne.n	80072f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072b4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d11b      	bne.n	80072f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072c4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d113      	bne.n	80072f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072d4:	085b      	lsrs	r3, r3, #1
 80072d6:	3b01      	subs	r3, #1
 80072d8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80072da:	429a      	cmp	r2, r3
 80072dc:	d109      	bne.n	80072f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072e8:	085b      	lsrs	r3, r3, #1
 80072ea:	3b01      	subs	r3, #1
 80072ec:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d001      	beq.n	80072f6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	e000      	b.n	80072f8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80072f6:	2300      	movs	r3, #0
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3720      	adds	r7, #32
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}
 8007300:	40021000 	.word	0x40021000
 8007304:	019f800c 	.word	0x019f800c
 8007308:	feeefffc 	.word	0xfeeefffc

0800730c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b086      	sub	sp, #24
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007316:	2300      	movs	r3, #0
 8007318:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d101      	bne.n	8007324 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	e11e      	b.n	8007562 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007324:	4b91      	ldr	r3, [pc, #580]	@ (800756c <HAL_RCC_ClockConfig+0x260>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f003 030f 	and.w	r3, r3, #15
 800732c:	683a      	ldr	r2, [r7, #0]
 800732e:	429a      	cmp	r2, r3
 8007330:	d910      	bls.n	8007354 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007332:	4b8e      	ldr	r3, [pc, #568]	@ (800756c <HAL_RCC_ClockConfig+0x260>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f023 020f 	bic.w	r2, r3, #15
 800733a:	498c      	ldr	r1, [pc, #560]	@ (800756c <HAL_RCC_ClockConfig+0x260>)
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	4313      	orrs	r3, r2
 8007340:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007342:	4b8a      	ldr	r3, [pc, #552]	@ (800756c <HAL_RCC_ClockConfig+0x260>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f003 030f 	and.w	r3, r3, #15
 800734a:	683a      	ldr	r2, [r7, #0]
 800734c:	429a      	cmp	r2, r3
 800734e:	d001      	beq.n	8007354 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007350:	2301      	movs	r3, #1
 8007352:	e106      	b.n	8007562 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 0301 	and.w	r3, r3, #1
 800735c:	2b00      	cmp	r3, #0
 800735e:	d073      	beq.n	8007448 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	2b03      	cmp	r3, #3
 8007366:	d129      	bne.n	80073bc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007368:	4b81      	ldr	r3, [pc, #516]	@ (8007570 <HAL_RCC_ClockConfig+0x264>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007370:	2b00      	cmp	r3, #0
 8007372:	d101      	bne.n	8007378 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	e0f4      	b.n	8007562 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007378:	f000 f99e 	bl	80076b8 <RCC_GetSysClockFreqFromPLLSource>
 800737c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	4a7c      	ldr	r2, [pc, #496]	@ (8007574 <HAL_RCC_ClockConfig+0x268>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d93f      	bls.n	8007406 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007386:	4b7a      	ldr	r3, [pc, #488]	@ (8007570 <HAL_RCC_ClockConfig+0x264>)
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800738e:	2b00      	cmp	r3, #0
 8007390:	d009      	beq.n	80073a6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800739a:	2b00      	cmp	r3, #0
 800739c:	d033      	beq.n	8007406 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d12f      	bne.n	8007406 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80073a6:	4b72      	ldr	r3, [pc, #456]	@ (8007570 <HAL_RCC_ClockConfig+0x264>)
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80073ae:	4a70      	ldr	r2, [pc, #448]	@ (8007570 <HAL_RCC_ClockConfig+0x264>)
 80073b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073b4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80073b6:	2380      	movs	r3, #128	@ 0x80
 80073b8:	617b      	str	r3, [r7, #20]
 80073ba:	e024      	b.n	8007406 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	2b02      	cmp	r3, #2
 80073c2:	d107      	bne.n	80073d4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80073c4:	4b6a      	ldr	r3, [pc, #424]	@ (8007570 <HAL_RCC_ClockConfig+0x264>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d109      	bne.n	80073e4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	e0c6      	b.n	8007562 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80073d4:	4b66      	ldr	r3, [pc, #408]	@ (8007570 <HAL_RCC_ClockConfig+0x264>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d101      	bne.n	80073e4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80073e0:	2301      	movs	r3, #1
 80073e2:	e0be      	b.n	8007562 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80073e4:	f000 f8ce 	bl	8007584 <HAL_RCC_GetSysClockFreq>
 80073e8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	4a61      	ldr	r2, [pc, #388]	@ (8007574 <HAL_RCC_ClockConfig+0x268>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d909      	bls.n	8007406 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80073f2:	4b5f      	ldr	r3, [pc, #380]	@ (8007570 <HAL_RCC_ClockConfig+0x264>)
 80073f4:	689b      	ldr	r3, [r3, #8]
 80073f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80073fa:	4a5d      	ldr	r2, [pc, #372]	@ (8007570 <HAL_RCC_ClockConfig+0x264>)
 80073fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007400:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007402:	2380      	movs	r3, #128	@ 0x80
 8007404:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007406:	4b5a      	ldr	r3, [pc, #360]	@ (8007570 <HAL_RCC_ClockConfig+0x264>)
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	f023 0203 	bic.w	r2, r3, #3
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	4957      	ldr	r1, [pc, #348]	@ (8007570 <HAL_RCC_ClockConfig+0x264>)
 8007414:	4313      	orrs	r3, r2
 8007416:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007418:	f7fd fae8 	bl	80049ec <HAL_GetTick>
 800741c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800741e:	e00a      	b.n	8007436 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007420:	f7fd fae4 	bl	80049ec <HAL_GetTick>
 8007424:	4602      	mov	r2, r0
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	1ad3      	subs	r3, r2, r3
 800742a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800742e:	4293      	cmp	r3, r2
 8007430:	d901      	bls.n	8007436 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007432:	2303      	movs	r3, #3
 8007434:	e095      	b.n	8007562 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007436:	4b4e      	ldr	r3, [pc, #312]	@ (8007570 <HAL_RCC_ClockConfig+0x264>)
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	f003 020c 	and.w	r2, r3, #12
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	429a      	cmp	r2, r3
 8007446:	d1eb      	bne.n	8007420 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f003 0302 	and.w	r3, r3, #2
 8007450:	2b00      	cmp	r3, #0
 8007452:	d023      	beq.n	800749c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f003 0304 	and.w	r3, r3, #4
 800745c:	2b00      	cmp	r3, #0
 800745e:	d005      	beq.n	800746c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007460:	4b43      	ldr	r3, [pc, #268]	@ (8007570 <HAL_RCC_ClockConfig+0x264>)
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	4a42      	ldr	r2, [pc, #264]	@ (8007570 <HAL_RCC_ClockConfig+0x264>)
 8007466:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800746a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f003 0308 	and.w	r3, r3, #8
 8007474:	2b00      	cmp	r3, #0
 8007476:	d007      	beq.n	8007488 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007478:	4b3d      	ldr	r3, [pc, #244]	@ (8007570 <HAL_RCC_ClockConfig+0x264>)
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007480:	4a3b      	ldr	r2, [pc, #236]	@ (8007570 <HAL_RCC_ClockConfig+0x264>)
 8007482:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007486:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007488:	4b39      	ldr	r3, [pc, #228]	@ (8007570 <HAL_RCC_ClockConfig+0x264>)
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	4936      	ldr	r1, [pc, #216]	@ (8007570 <HAL_RCC_ClockConfig+0x264>)
 8007496:	4313      	orrs	r3, r2
 8007498:	608b      	str	r3, [r1, #8]
 800749a:	e008      	b.n	80074ae <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	2b80      	cmp	r3, #128	@ 0x80
 80074a0:	d105      	bne.n	80074ae <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80074a2:	4b33      	ldr	r3, [pc, #204]	@ (8007570 <HAL_RCC_ClockConfig+0x264>)
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	4a32      	ldr	r2, [pc, #200]	@ (8007570 <HAL_RCC_ClockConfig+0x264>)
 80074a8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80074ac:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80074ae:	4b2f      	ldr	r3, [pc, #188]	@ (800756c <HAL_RCC_ClockConfig+0x260>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f003 030f 	and.w	r3, r3, #15
 80074b6:	683a      	ldr	r2, [r7, #0]
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d21d      	bcs.n	80074f8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074bc:	4b2b      	ldr	r3, [pc, #172]	@ (800756c <HAL_RCC_ClockConfig+0x260>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f023 020f 	bic.w	r2, r3, #15
 80074c4:	4929      	ldr	r1, [pc, #164]	@ (800756c <HAL_RCC_ClockConfig+0x260>)
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	4313      	orrs	r3, r2
 80074ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80074cc:	f7fd fa8e 	bl	80049ec <HAL_GetTick>
 80074d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80074d2:	e00a      	b.n	80074ea <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80074d4:	f7fd fa8a 	bl	80049ec <HAL_GetTick>
 80074d8:	4602      	mov	r2, r0
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	1ad3      	subs	r3, r2, r3
 80074de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d901      	bls.n	80074ea <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80074e6:	2303      	movs	r3, #3
 80074e8:	e03b      	b.n	8007562 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80074ea:	4b20      	ldr	r3, [pc, #128]	@ (800756c <HAL_RCC_ClockConfig+0x260>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f003 030f 	and.w	r3, r3, #15
 80074f2:	683a      	ldr	r2, [r7, #0]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d1ed      	bne.n	80074d4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f003 0304 	and.w	r3, r3, #4
 8007500:	2b00      	cmp	r3, #0
 8007502:	d008      	beq.n	8007516 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007504:	4b1a      	ldr	r3, [pc, #104]	@ (8007570 <HAL_RCC_ClockConfig+0x264>)
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	4917      	ldr	r1, [pc, #92]	@ (8007570 <HAL_RCC_ClockConfig+0x264>)
 8007512:	4313      	orrs	r3, r2
 8007514:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f003 0308 	and.w	r3, r3, #8
 800751e:	2b00      	cmp	r3, #0
 8007520:	d009      	beq.n	8007536 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007522:	4b13      	ldr	r3, [pc, #76]	@ (8007570 <HAL_RCC_ClockConfig+0x264>)
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	691b      	ldr	r3, [r3, #16]
 800752e:	00db      	lsls	r3, r3, #3
 8007530:	490f      	ldr	r1, [pc, #60]	@ (8007570 <HAL_RCC_ClockConfig+0x264>)
 8007532:	4313      	orrs	r3, r2
 8007534:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007536:	f000 f825 	bl	8007584 <HAL_RCC_GetSysClockFreq>
 800753a:	4602      	mov	r2, r0
 800753c:	4b0c      	ldr	r3, [pc, #48]	@ (8007570 <HAL_RCC_ClockConfig+0x264>)
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	091b      	lsrs	r3, r3, #4
 8007542:	f003 030f 	and.w	r3, r3, #15
 8007546:	490c      	ldr	r1, [pc, #48]	@ (8007578 <HAL_RCC_ClockConfig+0x26c>)
 8007548:	5ccb      	ldrb	r3, [r1, r3]
 800754a:	f003 031f 	and.w	r3, r3, #31
 800754e:	fa22 f303 	lsr.w	r3, r2, r3
 8007552:	4a0a      	ldr	r2, [pc, #40]	@ (800757c <HAL_RCC_ClockConfig+0x270>)
 8007554:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007556:	4b0a      	ldr	r3, [pc, #40]	@ (8007580 <HAL_RCC_ClockConfig+0x274>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4618      	mov	r0, r3
 800755c:	f7fd f9fa 	bl	8004954 <HAL_InitTick>
 8007560:	4603      	mov	r3, r0
}
 8007562:	4618      	mov	r0, r3
 8007564:	3718      	adds	r7, #24
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	40022000 	.word	0x40022000
 8007570:	40021000 	.word	0x40021000
 8007574:	04c4b400 	.word	0x04c4b400
 8007578:	0800e0a4 	.word	0x0800e0a4
 800757c:	20000200 	.word	0x20000200
 8007580:	20000204 	.word	0x20000204

08007584 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007584:	b480      	push	{r7}
 8007586:	b087      	sub	sp, #28
 8007588:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800758a:	4b2c      	ldr	r3, [pc, #176]	@ (800763c <HAL_RCC_GetSysClockFreq+0xb8>)
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	f003 030c 	and.w	r3, r3, #12
 8007592:	2b04      	cmp	r3, #4
 8007594:	d102      	bne.n	800759c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007596:	4b2a      	ldr	r3, [pc, #168]	@ (8007640 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007598:	613b      	str	r3, [r7, #16]
 800759a:	e047      	b.n	800762c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800759c:	4b27      	ldr	r3, [pc, #156]	@ (800763c <HAL_RCC_GetSysClockFreq+0xb8>)
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	f003 030c 	and.w	r3, r3, #12
 80075a4:	2b08      	cmp	r3, #8
 80075a6:	d102      	bne.n	80075ae <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80075a8:	4b26      	ldr	r3, [pc, #152]	@ (8007644 <HAL_RCC_GetSysClockFreq+0xc0>)
 80075aa:	613b      	str	r3, [r7, #16]
 80075ac:	e03e      	b.n	800762c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80075ae:	4b23      	ldr	r3, [pc, #140]	@ (800763c <HAL_RCC_GetSysClockFreq+0xb8>)
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	f003 030c 	and.w	r3, r3, #12
 80075b6:	2b0c      	cmp	r3, #12
 80075b8:	d136      	bne.n	8007628 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80075ba:	4b20      	ldr	r3, [pc, #128]	@ (800763c <HAL_RCC_GetSysClockFreq+0xb8>)
 80075bc:	68db      	ldr	r3, [r3, #12]
 80075be:	f003 0303 	and.w	r3, r3, #3
 80075c2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80075c4:	4b1d      	ldr	r3, [pc, #116]	@ (800763c <HAL_RCC_GetSysClockFreq+0xb8>)
 80075c6:	68db      	ldr	r3, [r3, #12]
 80075c8:	091b      	lsrs	r3, r3, #4
 80075ca:	f003 030f 	and.w	r3, r3, #15
 80075ce:	3301      	adds	r3, #1
 80075d0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2b03      	cmp	r3, #3
 80075d6:	d10c      	bne.n	80075f2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80075d8:	4a1a      	ldr	r2, [pc, #104]	@ (8007644 <HAL_RCC_GetSysClockFreq+0xc0>)
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80075e0:	4a16      	ldr	r2, [pc, #88]	@ (800763c <HAL_RCC_GetSysClockFreq+0xb8>)
 80075e2:	68d2      	ldr	r2, [r2, #12]
 80075e4:	0a12      	lsrs	r2, r2, #8
 80075e6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80075ea:	fb02 f303 	mul.w	r3, r2, r3
 80075ee:	617b      	str	r3, [r7, #20]
      break;
 80075f0:	e00c      	b.n	800760c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80075f2:	4a13      	ldr	r2, [pc, #76]	@ (8007640 <HAL_RCC_GetSysClockFreq+0xbc>)
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80075fa:	4a10      	ldr	r2, [pc, #64]	@ (800763c <HAL_RCC_GetSysClockFreq+0xb8>)
 80075fc:	68d2      	ldr	r2, [r2, #12]
 80075fe:	0a12      	lsrs	r2, r2, #8
 8007600:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007604:	fb02 f303 	mul.w	r3, r2, r3
 8007608:	617b      	str	r3, [r7, #20]
      break;
 800760a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800760c:	4b0b      	ldr	r3, [pc, #44]	@ (800763c <HAL_RCC_GetSysClockFreq+0xb8>)
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	0e5b      	lsrs	r3, r3, #25
 8007612:	f003 0303 	and.w	r3, r3, #3
 8007616:	3301      	adds	r3, #1
 8007618:	005b      	lsls	r3, r3, #1
 800761a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800761c:	697a      	ldr	r2, [r7, #20]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	fbb2 f3f3 	udiv	r3, r2, r3
 8007624:	613b      	str	r3, [r7, #16]
 8007626:	e001      	b.n	800762c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007628:	2300      	movs	r3, #0
 800762a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800762c:	693b      	ldr	r3, [r7, #16]
}
 800762e:	4618      	mov	r0, r3
 8007630:	371c      	adds	r7, #28
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr
 800763a:	bf00      	nop
 800763c:	40021000 	.word	0x40021000
 8007640:	00f42400 	.word	0x00f42400
 8007644:	016e3600 	.word	0x016e3600

08007648 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007648:	b480      	push	{r7}
 800764a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800764c:	4b03      	ldr	r3, [pc, #12]	@ (800765c <HAL_RCC_GetHCLKFreq+0x14>)
 800764e:	681b      	ldr	r3, [r3, #0]
}
 8007650:	4618      	mov	r0, r3
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr
 800765a:	bf00      	nop
 800765c:	20000200 	.word	0x20000200

08007660 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007664:	f7ff fff0 	bl	8007648 <HAL_RCC_GetHCLKFreq>
 8007668:	4602      	mov	r2, r0
 800766a:	4b06      	ldr	r3, [pc, #24]	@ (8007684 <HAL_RCC_GetPCLK1Freq+0x24>)
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	0a1b      	lsrs	r3, r3, #8
 8007670:	f003 0307 	and.w	r3, r3, #7
 8007674:	4904      	ldr	r1, [pc, #16]	@ (8007688 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007676:	5ccb      	ldrb	r3, [r1, r3]
 8007678:	f003 031f 	and.w	r3, r3, #31
 800767c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007680:	4618      	mov	r0, r3
 8007682:	bd80      	pop	{r7, pc}
 8007684:	40021000 	.word	0x40021000
 8007688:	0800e0b4 	.word	0x0800e0b4

0800768c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007690:	f7ff ffda 	bl	8007648 <HAL_RCC_GetHCLKFreq>
 8007694:	4602      	mov	r2, r0
 8007696:	4b06      	ldr	r3, [pc, #24]	@ (80076b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	0adb      	lsrs	r3, r3, #11
 800769c:	f003 0307 	and.w	r3, r3, #7
 80076a0:	4904      	ldr	r1, [pc, #16]	@ (80076b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80076a2:	5ccb      	ldrb	r3, [r1, r3]
 80076a4:	f003 031f 	and.w	r3, r3, #31
 80076a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	bd80      	pop	{r7, pc}
 80076b0:	40021000 	.word	0x40021000
 80076b4:	0800e0b4 	.word	0x0800e0b4

080076b8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b087      	sub	sp, #28
 80076bc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80076be:	4b1e      	ldr	r3, [pc, #120]	@ (8007738 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80076c0:	68db      	ldr	r3, [r3, #12]
 80076c2:	f003 0303 	and.w	r3, r3, #3
 80076c6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80076c8:	4b1b      	ldr	r3, [pc, #108]	@ (8007738 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80076ca:	68db      	ldr	r3, [r3, #12]
 80076cc:	091b      	lsrs	r3, r3, #4
 80076ce:	f003 030f 	and.w	r3, r3, #15
 80076d2:	3301      	adds	r3, #1
 80076d4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	2b03      	cmp	r3, #3
 80076da:	d10c      	bne.n	80076f6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80076dc:	4a17      	ldr	r2, [pc, #92]	@ (800773c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80076e4:	4a14      	ldr	r2, [pc, #80]	@ (8007738 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80076e6:	68d2      	ldr	r2, [r2, #12]
 80076e8:	0a12      	lsrs	r2, r2, #8
 80076ea:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80076ee:	fb02 f303 	mul.w	r3, r2, r3
 80076f2:	617b      	str	r3, [r7, #20]
    break;
 80076f4:	e00c      	b.n	8007710 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80076f6:	4a12      	ldr	r2, [pc, #72]	@ (8007740 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80076fe:	4a0e      	ldr	r2, [pc, #56]	@ (8007738 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007700:	68d2      	ldr	r2, [r2, #12]
 8007702:	0a12      	lsrs	r2, r2, #8
 8007704:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007708:	fb02 f303 	mul.w	r3, r2, r3
 800770c:	617b      	str	r3, [r7, #20]
    break;
 800770e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007710:	4b09      	ldr	r3, [pc, #36]	@ (8007738 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	0e5b      	lsrs	r3, r3, #25
 8007716:	f003 0303 	and.w	r3, r3, #3
 800771a:	3301      	adds	r3, #1
 800771c:	005b      	lsls	r3, r3, #1
 800771e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007720:	697a      	ldr	r2, [r7, #20]
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	fbb2 f3f3 	udiv	r3, r2, r3
 8007728:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800772a:	687b      	ldr	r3, [r7, #4]
}
 800772c:	4618      	mov	r0, r3
 800772e:	371c      	adds	r7, #28
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr
 8007738:	40021000 	.word	0x40021000
 800773c:	016e3600 	.word	0x016e3600
 8007740:	00f42400 	.word	0x00f42400

08007744 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b086      	sub	sp, #24
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800774c:	2300      	movs	r3, #0
 800774e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007750:	2300      	movs	r3, #0
 8007752:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800775c:	2b00      	cmp	r3, #0
 800775e:	f000 8098 	beq.w	8007892 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007762:	2300      	movs	r3, #0
 8007764:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007766:	4b43      	ldr	r3, [pc, #268]	@ (8007874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800776a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800776e:	2b00      	cmp	r3, #0
 8007770:	d10d      	bne.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007772:	4b40      	ldr	r3, [pc, #256]	@ (8007874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007776:	4a3f      	ldr	r2, [pc, #252]	@ (8007874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007778:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800777c:	6593      	str	r3, [r2, #88]	@ 0x58
 800777e:	4b3d      	ldr	r3, [pc, #244]	@ (8007874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007782:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007786:	60bb      	str	r3, [r7, #8]
 8007788:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800778a:	2301      	movs	r3, #1
 800778c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800778e:	4b3a      	ldr	r3, [pc, #232]	@ (8007878 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a39      	ldr	r2, [pc, #228]	@ (8007878 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007794:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007798:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800779a:	f7fd f927 	bl	80049ec <HAL_GetTick>
 800779e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80077a0:	e009      	b.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077a2:	f7fd f923 	bl	80049ec <HAL_GetTick>
 80077a6:	4602      	mov	r2, r0
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	1ad3      	subs	r3, r2, r3
 80077ac:	2b02      	cmp	r3, #2
 80077ae:	d902      	bls.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80077b0:	2303      	movs	r3, #3
 80077b2:	74fb      	strb	r3, [r7, #19]
        break;
 80077b4:	e005      	b.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80077b6:	4b30      	ldr	r3, [pc, #192]	@ (8007878 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d0ef      	beq.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80077c2:	7cfb      	ldrb	r3, [r7, #19]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d159      	bne.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80077c8:	4b2a      	ldr	r3, [pc, #168]	@ (8007874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80077ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077d2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d01e      	beq.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077de:	697a      	ldr	r2, [r7, #20]
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d019      	beq.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80077e4:	4b23      	ldr	r3, [pc, #140]	@ (8007874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80077e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80077ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80077f0:	4b20      	ldr	r3, [pc, #128]	@ (8007874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80077f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077f6:	4a1f      	ldr	r2, [pc, #124]	@ (8007874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80077f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80077fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007800:	4b1c      	ldr	r3, [pc, #112]	@ (8007874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007802:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007806:	4a1b      	ldr	r2, [pc, #108]	@ (8007874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007808:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800780c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007810:	4a18      	ldr	r2, [pc, #96]	@ (8007874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	f003 0301 	and.w	r3, r3, #1
 800781e:	2b00      	cmp	r3, #0
 8007820:	d016      	beq.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007822:	f7fd f8e3 	bl	80049ec <HAL_GetTick>
 8007826:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007828:	e00b      	b.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800782a:	f7fd f8df 	bl	80049ec <HAL_GetTick>
 800782e:	4602      	mov	r2, r0
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	1ad3      	subs	r3, r2, r3
 8007834:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007838:	4293      	cmp	r3, r2
 800783a:	d902      	bls.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800783c:	2303      	movs	r3, #3
 800783e:	74fb      	strb	r3, [r7, #19]
            break;
 8007840:	e006      	b.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007842:	4b0c      	ldr	r3, [pc, #48]	@ (8007874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007844:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007848:	f003 0302 	and.w	r3, r3, #2
 800784c:	2b00      	cmp	r3, #0
 800784e:	d0ec      	beq.n	800782a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007850:	7cfb      	ldrb	r3, [r7, #19]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d10b      	bne.n	800786e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007856:	4b07      	ldr	r3, [pc, #28]	@ (8007874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007858:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800785c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007864:	4903      	ldr	r1, [pc, #12]	@ (8007874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007866:	4313      	orrs	r3, r2
 8007868:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800786c:	e008      	b.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800786e:	7cfb      	ldrb	r3, [r7, #19]
 8007870:	74bb      	strb	r3, [r7, #18]
 8007872:	e005      	b.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007874:	40021000 	.word	0x40021000
 8007878:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800787c:	7cfb      	ldrb	r3, [r7, #19]
 800787e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007880:	7c7b      	ldrb	r3, [r7, #17]
 8007882:	2b01      	cmp	r3, #1
 8007884:	d105      	bne.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007886:	4ba7      	ldr	r3, [pc, #668]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800788a:	4aa6      	ldr	r2, [pc, #664]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800788c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007890:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f003 0301 	and.w	r3, r3, #1
 800789a:	2b00      	cmp	r3, #0
 800789c:	d00a      	beq.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800789e:	4ba1      	ldr	r3, [pc, #644]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078a4:	f023 0203 	bic.w	r2, r3, #3
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	499d      	ldr	r1, [pc, #628]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078ae:	4313      	orrs	r3, r2
 80078b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f003 0302 	and.w	r3, r3, #2
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d00a      	beq.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80078c0:	4b98      	ldr	r3, [pc, #608]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078c6:	f023 020c 	bic.w	r2, r3, #12
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	4995      	ldr	r1, [pc, #596]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078d0:	4313      	orrs	r3, r2
 80078d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f003 0304 	and.w	r3, r3, #4
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d00a      	beq.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80078e2:	4b90      	ldr	r3, [pc, #576]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078e8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	68db      	ldr	r3, [r3, #12]
 80078f0:	498c      	ldr	r1, [pc, #560]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078f2:	4313      	orrs	r3, r2
 80078f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f003 0308 	and.w	r3, r3, #8
 8007900:	2b00      	cmp	r3, #0
 8007902:	d00a      	beq.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007904:	4b87      	ldr	r3, [pc, #540]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800790a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	691b      	ldr	r3, [r3, #16]
 8007912:	4984      	ldr	r1, [pc, #528]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007914:	4313      	orrs	r3, r2
 8007916:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f003 0310 	and.w	r3, r3, #16
 8007922:	2b00      	cmp	r3, #0
 8007924:	d00a      	beq.n	800793c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007926:	4b7f      	ldr	r3, [pc, #508]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007928:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800792c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	695b      	ldr	r3, [r3, #20]
 8007934:	497b      	ldr	r1, [pc, #492]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007936:	4313      	orrs	r3, r2
 8007938:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f003 0320 	and.w	r3, r3, #32
 8007944:	2b00      	cmp	r3, #0
 8007946:	d00a      	beq.n	800795e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007948:	4b76      	ldr	r3, [pc, #472]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800794a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800794e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	699b      	ldr	r3, [r3, #24]
 8007956:	4973      	ldr	r1, [pc, #460]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007958:	4313      	orrs	r3, r2
 800795a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007966:	2b00      	cmp	r3, #0
 8007968:	d00a      	beq.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800796a:	4b6e      	ldr	r3, [pc, #440]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800796c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007970:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	69db      	ldr	r3, [r3, #28]
 8007978:	496a      	ldr	r1, [pc, #424]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800797a:	4313      	orrs	r3, r2
 800797c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007988:	2b00      	cmp	r3, #0
 800798a:	d00a      	beq.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800798c:	4b65      	ldr	r3, [pc, #404]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800798e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007992:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6a1b      	ldr	r3, [r3, #32]
 800799a:	4962      	ldr	r1, [pc, #392]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800799c:	4313      	orrs	r3, r2
 800799e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d00a      	beq.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80079ae:	4b5d      	ldr	r3, [pc, #372]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079b4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079bc:	4959      	ldr	r1, [pc, #356]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079be:	4313      	orrs	r3, r2
 80079c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d00a      	beq.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80079d0:	4b54      	ldr	r3, [pc, #336]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80079d6:	f023 0203 	bic.w	r2, r3, #3
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079de:	4951      	ldr	r1, [pc, #324]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079e0:	4313      	orrs	r3, r2
 80079e2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d00a      	beq.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80079f2:	4b4c      	ldr	r3, [pc, #304]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079f8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a00:	4948      	ldr	r1, [pc, #288]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a02:	4313      	orrs	r3, r2
 8007a04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d015      	beq.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007a14:	4b43      	ldr	r3, [pc, #268]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a1a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a22:	4940      	ldr	r1, [pc, #256]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a24:	4313      	orrs	r3, r2
 8007a26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a32:	d105      	bne.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007a34:	4b3b      	ldr	r3, [pc, #236]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a36:	68db      	ldr	r3, [r3, #12]
 8007a38:	4a3a      	ldr	r2, [pc, #232]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007a3e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d015      	beq.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007a4c:	4b35      	ldr	r3, [pc, #212]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a52:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a5a:	4932      	ldr	r1, [pc, #200]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a66:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a6a:	d105      	bne.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007a6c:	4b2d      	ldr	r3, [pc, #180]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a6e:	68db      	ldr	r3, [r3, #12]
 8007a70:	4a2c      	ldr	r2, [pc, #176]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007a76:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d015      	beq.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007a84:	4b27      	ldr	r3, [pc, #156]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a8a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a92:	4924      	ldr	r1, [pc, #144]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a94:	4313      	orrs	r3, r2
 8007a96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007aa2:	d105      	bne.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007aa4:	4b1f      	ldr	r3, [pc, #124]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007aa6:	68db      	ldr	r3, [r3, #12]
 8007aa8:	4a1e      	ldr	r2, [pc, #120]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007aaa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007aae:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d015      	beq.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007abc:	4b19      	ldr	r3, [pc, #100]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ac2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007aca:	4916      	ldr	r1, [pc, #88]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007acc:	4313      	orrs	r3, r2
 8007ace:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ad6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ada:	d105      	bne.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007adc:	4b11      	ldr	r3, [pc, #68]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ade:	68db      	ldr	r3, [r3, #12]
 8007ae0:	4a10      	ldr	r2, [pc, #64]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ae2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007ae6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d019      	beq.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007af4:	4b0b      	ldr	r3, [pc, #44]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007afa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b02:	4908      	ldr	r1, [pc, #32]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b04:	4313      	orrs	r3, r2
 8007b06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b12:	d109      	bne.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b14:	4b03      	ldr	r3, [pc, #12]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b16:	68db      	ldr	r3, [r3, #12]
 8007b18:	4a02      	ldr	r2, [pc, #8]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b1e:	60d3      	str	r3, [r2, #12]
 8007b20:	e002      	b.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007b22:	bf00      	nop
 8007b24:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d015      	beq.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007b34:	4b29      	ldr	r3, [pc, #164]	@ (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b3a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b42:	4926      	ldr	r1, [pc, #152]	@ (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007b44:	4313      	orrs	r3, r2
 8007b46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b52:	d105      	bne.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007b54:	4b21      	ldr	r3, [pc, #132]	@ (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007b56:	68db      	ldr	r3, [r3, #12]
 8007b58:	4a20      	ldr	r2, [pc, #128]	@ (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007b5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b5e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d015      	beq.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007b6c:	4b1b      	ldr	r3, [pc, #108]	@ (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b72:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b7a:	4918      	ldr	r1, [pc, #96]	@ (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b8a:	d105      	bne.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007b8c:	4b13      	ldr	r3, [pc, #76]	@ (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007b8e:	68db      	ldr	r3, [r3, #12]
 8007b90:	4a12      	ldr	r2, [pc, #72]	@ (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007b92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b96:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d015      	beq.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007ba4:	4b0d      	ldr	r3, [pc, #52]	@ (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007ba6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007baa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bb2:	490a      	ldr	r1, [pc, #40]	@ (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bbe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007bc2:	d105      	bne.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007bc4:	4b05      	ldr	r3, [pc, #20]	@ (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	4a04      	ldr	r2, [pc, #16]	@ (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007bca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007bce:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007bd0:	7cbb      	ldrb	r3, [r7, #18]
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3718      	adds	r7, #24
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	bf00      	nop
 8007bdc:	40021000 	.word	0x40021000

08007be0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b084      	sub	sp, #16
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d101      	bne.n	8007bf2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e09d      	b.n	8007d2e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d108      	bne.n	8007c0c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007c02:	d009      	beq.n	8007c18 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	61da      	str	r2, [r3, #28]
 8007c0a:	e005      	b.n	8007c18 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d106      	bne.n	8007c38 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f7fb ffa0 	bl	8003b78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2202      	movs	r2, #2
 8007c3c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	681a      	ldr	r2, [r3, #0]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c4e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	68db      	ldr	r3, [r3, #12]
 8007c54:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007c58:	d902      	bls.n	8007c60 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	60fb      	str	r3, [r7, #12]
 8007c5e:	e002      	b.n	8007c66 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007c60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007c64:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	68db      	ldr	r3, [r3, #12]
 8007c6a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007c6e:	d007      	beq.n	8007c80 <HAL_SPI_Init+0xa0>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	68db      	ldr	r3, [r3, #12]
 8007c74:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007c78:	d002      	beq.n	8007c80 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	689b      	ldr	r3, [r3, #8]
 8007c8c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007c90:	431a      	orrs	r2, r3
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	691b      	ldr	r3, [r3, #16]
 8007c96:	f003 0302 	and.w	r3, r3, #2
 8007c9a:	431a      	orrs	r2, r3
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	695b      	ldr	r3, [r3, #20]
 8007ca0:	f003 0301 	and.w	r3, r3, #1
 8007ca4:	431a      	orrs	r2, r3
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	699b      	ldr	r3, [r3, #24]
 8007caa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007cae:	431a      	orrs	r2, r3
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	69db      	ldr	r3, [r3, #28]
 8007cb4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007cb8:	431a      	orrs	r2, r3
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6a1b      	ldr	r3, [r3, #32]
 8007cbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cc2:	ea42 0103 	orr.w	r1, r2, r3
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cca:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	430a      	orrs	r2, r1
 8007cd4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	699b      	ldr	r3, [r3, #24]
 8007cda:	0c1b      	lsrs	r3, r3, #16
 8007cdc:	f003 0204 	and.w	r2, r3, #4
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ce4:	f003 0310 	and.w	r3, r3, #16
 8007ce8:	431a      	orrs	r2, r3
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cee:	f003 0308 	and.w	r3, r3, #8
 8007cf2:	431a      	orrs	r2, r3
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	68db      	ldr	r3, [r3, #12]
 8007cf8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007cfc:	ea42 0103 	orr.w	r1, r2, r3
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	430a      	orrs	r2, r1
 8007d0c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	69da      	ldr	r2, [r3, #28]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007d1c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2200      	movs	r2, #0
 8007d22:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2201      	movs	r2, #1
 8007d28:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007d2c:	2300      	movs	r3, #0
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3710      	adds	r7, #16
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
	...

08007d38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b082      	sub	sp, #8
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d101      	bne.n	8007d4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d46:	2301      	movs	r3, #1
 8007d48:	e054      	b.n	8007df4 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d111      	bne.n	8007d7a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f001 ffd4 	bl	8009d0c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d102      	bne.n	8007d72 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	4a23      	ldr	r2, [pc, #140]	@ (8007dfc <HAL_TIM_Base_Init+0xc4>)
 8007d70:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2202      	movs	r2, #2
 8007d7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	3304      	adds	r3, #4
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	4610      	mov	r0, r2
 8007d8e:	f001 fb1d 	bl	80093cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2201      	movs	r2, #1
 8007d96:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2201      	movs	r2, #1
 8007da6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2201      	movs	r2, #1
 8007dae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2201      	movs	r2, #1
 8007db6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2201      	movs	r2, #1
 8007dce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2201      	movs	r2, #1
 8007dd6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2201      	movs	r2, #1
 8007dde:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2201      	movs	r2, #1
 8007de6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2201      	movs	r2, #1
 8007dee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007df2:	2300      	movs	r3, #0
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3708      	adds	r7, #8
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}
 8007dfc:	08004425 	.word	0x08004425

08007e00 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b085      	sub	sp, #20
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d001      	beq.n	8007e18 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007e14:	2301      	movs	r3, #1
 8007e16:	e04c      	b.n	8007eb2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2202      	movs	r2, #2
 8007e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a26      	ldr	r2, [pc, #152]	@ (8007ec0 <HAL_TIM_Base_Start+0xc0>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d022      	beq.n	8007e70 <HAL_TIM_Base_Start+0x70>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e32:	d01d      	beq.n	8007e70 <HAL_TIM_Base_Start+0x70>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a22      	ldr	r2, [pc, #136]	@ (8007ec4 <HAL_TIM_Base_Start+0xc4>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d018      	beq.n	8007e70 <HAL_TIM_Base_Start+0x70>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a21      	ldr	r2, [pc, #132]	@ (8007ec8 <HAL_TIM_Base_Start+0xc8>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d013      	beq.n	8007e70 <HAL_TIM_Base_Start+0x70>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a1f      	ldr	r2, [pc, #124]	@ (8007ecc <HAL_TIM_Base_Start+0xcc>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d00e      	beq.n	8007e70 <HAL_TIM_Base_Start+0x70>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a1e      	ldr	r2, [pc, #120]	@ (8007ed0 <HAL_TIM_Base_Start+0xd0>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d009      	beq.n	8007e70 <HAL_TIM_Base_Start+0x70>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a1c      	ldr	r2, [pc, #112]	@ (8007ed4 <HAL_TIM_Base_Start+0xd4>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d004      	beq.n	8007e70 <HAL_TIM_Base_Start+0x70>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a1b      	ldr	r2, [pc, #108]	@ (8007ed8 <HAL_TIM_Base_Start+0xd8>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d115      	bne.n	8007e9c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	689a      	ldr	r2, [r3, #8]
 8007e76:	4b19      	ldr	r3, [pc, #100]	@ (8007edc <HAL_TIM_Base_Start+0xdc>)
 8007e78:	4013      	ands	r3, r2
 8007e7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2b06      	cmp	r3, #6
 8007e80:	d015      	beq.n	8007eae <HAL_TIM_Base_Start+0xae>
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e88:	d011      	beq.n	8007eae <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f042 0201 	orr.w	r2, r2, #1
 8007e98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e9a:	e008      	b.n	8007eae <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f042 0201 	orr.w	r2, r2, #1
 8007eaa:	601a      	str	r2, [r3, #0]
 8007eac:	e000      	b.n	8007eb0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007eae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007eb0:	2300      	movs	r3, #0
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3714      	adds	r7, #20
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr
 8007ebe:	bf00      	nop
 8007ec0:	40012c00 	.word	0x40012c00
 8007ec4:	40000400 	.word	0x40000400
 8007ec8:	40000800 	.word	0x40000800
 8007ecc:	40000c00 	.word	0x40000c00
 8007ed0:	40013400 	.word	0x40013400
 8007ed4:	40014000 	.word	0x40014000
 8007ed8:	40015000 	.word	0x40015000
 8007edc:	00010007 	.word	0x00010007

08007ee0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b085      	sub	sp, #20
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007eee:	b2db      	uxtb	r3, r3
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d001      	beq.n	8007ef8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	e054      	b.n	8007fa2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2202      	movs	r2, #2
 8007efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	68da      	ldr	r2, [r3, #12]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f042 0201 	orr.w	r2, r2, #1
 8007f0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a26      	ldr	r2, [pc, #152]	@ (8007fb0 <HAL_TIM_Base_Start_IT+0xd0>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d022      	beq.n	8007f60 <HAL_TIM_Base_Start_IT+0x80>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f22:	d01d      	beq.n	8007f60 <HAL_TIM_Base_Start_IT+0x80>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a22      	ldr	r2, [pc, #136]	@ (8007fb4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d018      	beq.n	8007f60 <HAL_TIM_Base_Start_IT+0x80>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a21      	ldr	r2, [pc, #132]	@ (8007fb8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d013      	beq.n	8007f60 <HAL_TIM_Base_Start_IT+0x80>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a1f      	ldr	r2, [pc, #124]	@ (8007fbc <HAL_TIM_Base_Start_IT+0xdc>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d00e      	beq.n	8007f60 <HAL_TIM_Base_Start_IT+0x80>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a1e      	ldr	r2, [pc, #120]	@ (8007fc0 <HAL_TIM_Base_Start_IT+0xe0>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d009      	beq.n	8007f60 <HAL_TIM_Base_Start_IT+0x80>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a1c      	ldr	r2, [pc, #112]	@ (8007fc4 <HAL_TIM_Base_Start_IT+0xe4>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d004      	beq.n	8007f60 <HAL_TIM_Base_Start_IT+0x80>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a1b      	ldr	r2, [pc, #108]	@ (8007fc8 <HAL_TIM_Base_Start_IT+0xe8>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d115      	bne.n	8007f8c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	689a      	ldr	r2, [r3, #8]
 8007f66:	4b19      	ldr	r3, [pc, #100]	@ (8007fcc <HAL_TIM_Base_Start_IT+0xec>)
 8007f68:	4013      	ands	r3, r2
 8007f6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2b06      	cmp	r3, #6
 8007f70:	d015      	beq.n	8007f9e <HAL_TIM_Base_Start_IT+0xbe>
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f78:	d011      	beq.n	8007f9e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f042 0201 	orr.w	r2, r2, #1
 8007f88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f8a:	e008      	b.n	8007f9e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	681a      	ldr	r2, [r3, #0]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f042 0201 	orr.w	r2, r2, #1
 8007f9a:	601a      	str	r2, [r3, #0]
 8007f9c:	e000      	b.n	8007fa0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f9e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007fa0:	2300      	movs	r3, #0
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3714      	adds	r7, #20
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr
 8007fae:	bf00      	nop
 8007fb0:	40012c00 	.word	0x40012c00
 8007fb4:	40000400 	.word	0x40000400
 8007fb8:	40000800 	.word	0x40000800
 8007fbc:	40000c00 	.word	0x40000c00
 8007fc0:	40013400 	.word	0x40013400
 8007fc4:	40014000 	.word	0x40014000
 8007fc8:	40015000 	.word	0x40015000
 8007fcc:	00010007 	.word	0x00010007

08007fd0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d101      	bne.n	8007fe2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	e054      	b.n	800808c <HAL_TIM_OC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007fe8:	b2db      	uxtb	r3, r3
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d111      	bne.n	8008012 <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f001 fe88 	bl	8009d0c <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008000:	2b00      	cmp	r3, #0
 8008002:	d102      	bne.n	800800a <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	4a23      	ldr	r2, [pc, #140]	@ (8008094 <HAL_TIM_OC_Init+0xc4>)
 8008008:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2202      	movs	r2, #2
 8008016:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	3304      	adds	r3, #4
 8008022:	4619      	mov	r1, r3
 8008024:	4610      	mov	r0, r2
 8008026:	f001 f9d1 	bl	80093cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2201      	movs	r2, #1
 800802e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2201      	movs	r2, #1
 8008036:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2201      	movs	r2, #1
 800803e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2201      	movs	r2, #1
 8008046:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2201      	movs	r2, #1
 800804e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2201      	movs	r2, #1
 8008056:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2201      	movs	r2, #1
 800805e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2201      	movs	r2, #1
 8008066:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2201      	movs	r2, #1
 800806e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2201      	movs	r2, #1
 8008076:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2201      	movs	r2, #1
 800807e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2201      	movs	r2, #1
 8008086:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800808a:	2300      	movs	r3, #0
}
 800808c:	4618      	mov	r0, r3
 800808e:	3708      	adds	r7, #8
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}
 8008094:	08008099 	.word	0x08008099

08008098 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8008098:	b480      	push	{r7}
 800809a:	b083      	sub	sp, #12
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80080a0:	bf00      	nop
 80080a2:	370c      	adds	r7, #12
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr

080080ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b082      	sub	sp, #8
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d101      	bne.n	80080be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80080ba:	2301      	movs	r3, #1
 80080bc:	e054      	b.n	8008168 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d111      	bne.n	80080ee <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2200      	movs	r2, #0
 80080ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f001 fe1a 	bl	8009d0c <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d102      	bne.n	80080e6 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	4a23      	ldr	r2, [pc, #140]	@ (8008170 <HAL_TIM_PWM_Init+0xc4>)
 80080e4:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2202      	movs	r2, #2
 80080f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	3304      	adds	r3, #4
 80080fe:	4619      	mov	r1, r3
 8008100:	4610      	mov	r0, r2
 8008102:	f001 f963 	bl	80093cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2201      	movs	r2, #1
 800810a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2201      	movs	r2, #1
 8008112:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2201      	movs	r2, #1
 800811a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2201      	movs	r2, #1
 8008122:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2201      	movs	r2, #1
 800812a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2201      	movs	r2, #1
 8008132:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2201      	movs	r2, #1
 800813a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2201      	movs	r2, #1
 8008142:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2201      	movs	r2, #1
 800814a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2201      	movs	r2, #1
 8008152:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2201      	movs	r2, #1
 800815a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2201      	movs	r2, #1
 8008162:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008166:	2300      	movs	r3, #0
}
 8008168:	4618      	mov	r0, r3
 800816a:	3708      	adds	r7, #8
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}
 8008170:	08008175 	.word	0x08008175

08008174 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008174:	b480      	push	{r7}
 8008176:	b083      	sub	sp, #12
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800817c:	bf00      	nop
 800817e:	370c      	adds	r7, #12
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr

08008188 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b084      	sub	sp, #16
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d109      	bne.n	80081ac <HAL_TIM_PWM_Start+0x24>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800819e:	b2db      	uxtb	r3, r3
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	bf14      	ite	ne
 80081a4:	2301      	movne	r3, #1
 80081a6:	2300      	moveq	r3, #0
 80081a8:	b2db      	uxtb	r3, r3
 80081aa:	e03c      	b.n	8008226 <HAL_TIM_PWM_Start+0x9e>
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	2b04      	cmp	r3, #4
 80081b0:	d109      	bne.n	80081c6 <HAL_TIM_PWM_Start+0x3e>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80081b8:	b2db      	uxtb	r3, r3
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	bf14      	ite	ne
 80081be:	2301      	movne	r3, #1
 80081c0:	2300      	moveq	r3, #0
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	e02f      	b.n	8008226 <HAL_TIM_PWM_Start+0x9e>
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	2b08      	cmp	r3, #8
 80081ca:	d109      	bne.n	80081e0 <HAL_TIM_PWM_Start+0x58>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	bf14      	ite	ne
 80081d8:	2301      	movne	r3, #1
 80081da:	2300      	moveq	r3, #0
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	e022      	b.n	8008226 <HAL_TIM_PWM_Start+0x9e>
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	2b0c      	cmp	r3, #12
 80081e4:	d109      	bne.n	80081fa <HAL_TIM_PWM_Start+0x72>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	2b01      	cmp	r3, #1
 80081f0:	bf14      	ite	ne
 80081f2:	2301      	movne	r3, #1
 80081f4:	2300      	moveq	r3, #0
 80081f6:	b2db      	uxtb	r3, r3
 80081f8:	e015      	b.n	8008226 <HAL_TIM_PWM_Start+0x9e>
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	2b10      	cmp	r3, #16
 80081fe:	d109      	bne.n	8008214 <HAL_TIM_PWM_Start+0x8c>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008206:	b2db      	uxtb	r3, r3
 8008208:	2b01      	cmp	r3, #1
 800820a:	bf14      	ite	ne
 800820c:	2301      	movne	r3, #1
 800820e:	2300      	moveq	r3, #0
 8008210:	b2db      	uxtb	r3, r3
 8008212:	e008      	b.n	8008226 <HAL_TIM_PWM_Start+0x9e>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800821a:	b2db      	uxtb	r3, r3
 800821c:	2b01      	cmp	r3, #1
 800821e:	bf14      	ite	ne
 8008220:	2301      	movne	r3, #1
 8008222:	2300      	moveq	r3, #0
 8008224:	b2db      	uxtb	r3, r3
 8008226:	2b00      	cmp	r3, #0
 8008228:	d001      	beq.n	800822e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800822a:	2301      	movs	r3, #1
 800822c:	e0a6      	b.n	800837c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d104      	bne.n	800823e <HAL_TIM_PWM_Start+0xb6>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2202      	movs	r2, #2
 8008238:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800823c:	e023      	b.n	8008286 <HAL_TIM_PWM_Start+0xfe>
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	2b04      	cmp	r3, #4
 8008242:	d104      	bne.n	800824e <HAL_TIM_PWM_Start+0xc6>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2202      	movs	r2, #2
 8008248:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800824c:	e01b      	b.n	8008286 <HAL_TIM_PWM_Start+0xfe>
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	2b08      	cmp	r3, #8
 8008252:	d104      	bne.n	800825e <HAL_TIM_PWM_Start+0xd6>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2202      	movs	r2, #2
 8008258:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800825c:	e013      	b.n	8008286 <HAL_TIM_PWM_Start+0xfe>
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	2b0c      	cmp	r3, #12
 8008262:	d104      	bne.n	800826e <HAL_TIM_PWM_Start+0xe6>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2202      	movs	r2, #2
 8008268:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800826c:	e00b      	b.n	8008286 <HAL_TIM_PWM_Start+0xfe>
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	2b10      	cmp	r3, #16
 8008272:	d104      	bne.n	800827e <HAL_TIM_PWM_Start+0xf6>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2202      	movs	r2, #2
 8008278:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800827c:	e003      	b.n	8008286 <HAL_TIM_PWM_Start+0xfe>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2202      	movs	r2, #2
 8008282:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	2201      	movs	r2, #1
 800828c:	6839      	ldr	r1, [r7, #0]
 800828e:	4618      	mov	r0, r3
 8008290:	f001 fd16 	bl	8009cc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a3a      	ldr	r2, [pc, #232]	@ (8008384 <HAL_TIM_PWM_Start+0x1fc>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d018      	beq.n	80082d0 <HAL_TIM_PWM_Start+0x148>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a39      	ldr	r2, [pc, #228]	@ (8008388 <HAL_TIM_PWM_Start+0x200>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d013      	beq.n	80082d0 <HAL_TIM_PWM_Start+0x148>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a37      	ldr	r2, [pc, #220]	@ (800838c <HAL_TIM_PWM_Start+0x204>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d00e      	beq.n	80082d0 <HAL_TIM_PWM_Start+0x148>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a36      	ldr	r2, [pc, #216]	@ (8008390 <HAL_TIM_PWM_Start+0x208>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d009      	beq.n	80082d0 <HAL_TIM_PWM_Start+0x148>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a34      	ldr	r2, [pc, #208]	@ (8008394 <HAL_TIM_PWM_Start+0x20c>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d004      	beq.n	80082d0 <HAL_TIM_PWM_Start+0x148>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a33      	ldr	r2, [pc, #204]	@ (8008398 <HAL_TIM_PWM_Start+0x210>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d101      	bne.n	80082d4 <HAL_TIM_PWM_Start+0x14c>
 80082d0:	2301      	movs	r3, #1
 80082d2:	e000      	b.n	80082d6 <HAL_TIM_PWM_Start+0x14e>
 80082d4:	2300      	movs	r3, #0
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d007      	beq.n	80082ea <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80082e8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a25      	ldr	r2, [pc, #148]	@ (8008384 <HAL_TIM_PWM_Start+0x1fc>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d022      	beq.n	800833a <HAL_TIM_PWM_Start+0x1b2>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082fc:	d01d      	beq.n	800833a <HAL_TIM_PWM_Start+0x1b2>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a26      	ldr	r2, [pc, #152]	@ (800839c <HAL_TIM_PWM_Start+0x214>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d018      	beq.n	800833a <HAL_TIM_PWM_Start+0x1b2>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a24      	ldr	r2, [pc, #144]	@ (80083a0 <HAL_TIM_PWM_Start+0x218>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d013      	beq.n	800833a <HAL_TIM_PWM_Start+0x1b2>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a23      	ldr	r2, [pc, #140]	@ (80083a4 <HAL_TIM_PWM_Start+0x21c>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d00e      	beq.n	800833a <HAL_TIM_PWM_Start+0x1b2>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a19      	ldr	r2, [pc, #100]	@ (8008388 <HAL_TIM_PWM_Start+0x200>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d009      	beq.n	800833a <HAL_TIM_PWM_Start+0x1b2>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a18      	ldr	r2, [pc, #96]	@ (800838c <HAL_TIM_PWM_Start+0x204>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d004      	beq.n	800833a <HAL_TIM_PWM_Start+0x1b2>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a18      	ldr	r2, [pc, #96]	@ (8008398 <HAL_TIM_PWM_Start+0x210>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d115      	bne.n	8008366 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	689a      	ldr	r2, [r3, #8]
 8008340:	4b19      	ldr	r3, [pc, #100]	@ (80083a8 <HAL_TIM_PWM_Start+0x220>)
 8008342:	4013      	ands	r3, r2
 8008344:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2b06      	cmp	r3, #6
 800834a:	d015      	beq.n	8008378 <HAL_TIM_PWM_Start+0x1f0>
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008352:	d011      	beq.n	8008378 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	681a      	ldr	r2, [r3, #0]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f042 0201 	orr.w	r2, r2, #1
 8008362:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008364:	e008      	b.n	8008378 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f042 0201 	orr.w	r2, r2, #1
 8008374:	601a      	str	r2, [r3, #0]
 8008376:	e000      	b.n	800837a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008378:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800837a:	2300      	movs	r3, #0
}
 800837c:	4618      	mov	r0, r3
 800837e:	3710      	adds	r7, #16
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}
 8008384:	40012c00 	.word	0x40012c00
 8008388:	40013400 	.word	0x40013400
 800838c:	40014000 	.word	0x40014000
 8008390:	40014400 	.word	0x40014400
 8008394:	40014800 	.word	0x40014800
 8008398:	40015000 	.word	0x40015000
 800839c:	40000400 	.word	0x40000400
 80083a0:	40000800 	.word	0x40000800
 80083a4:	40000c00 	.word	0x40000c00
 80083a8:	00010007 	.word	0x00010007

080083ac <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b082      	sub	sp, #8
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d101      	bne.n	80083c0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80083bc:	2301      	movs	r3, #1
 80083be:	e04c      	b.n	800845a <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80083c6:	b2db      	uxtb	r3, r3
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d111      	bne.n	80083f0 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2200      	movs	r2, #0
 80083d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f001 fc99 	bl	8009d0c <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d102      	bne.n	80083e8 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	4a1f      	ldr	r2, [pc, #124]	@ (8008464 <HAL_TIM_OnePulse_Init+0xb8>)
 80083e6:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2202      	movs	r2, #2
 80083f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	3304      	adds	r3, #4
 8008400:	4619      	mov	r1, r3
 8008402:	4610      	mov	r0, r2
 8008404:	f000 ffe2 	bl	80093cc <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	681a      	ldr	r2, [r3, #0]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f022 0208 	bic.w	r2, r2, #8
 8008416:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	6819      	ldr	r1, [r3, #0]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	683a      	ldr	r2, [r7, #0]
 8008424:	430a      	orrs	r2, r1
 8008426:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2201      	movs	r2, #1
 800842c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2201      	movs	r2, #1
 8008434:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2201      	movs	r2, #1
 800843c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2201      	movs	r2, #1
 8008444:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2201      	movs	r2, #1
 800844c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2201      	movs	r2, #1
 8008454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008458:	2300      	movs	r3, #0
}
 800845a:	4618      	mov	r0, r3
 800845c:	3708      	adds	r7, #8
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
 8008462:	bf00      	nop
 8008464:	08008469 	.word	0x08008469

08008468 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8008468:	b480      	push	{r7}
 800846a:	b083      	sub	sp, #12
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8008470:	bf00      	nop
 8008472:	370c      	adds	r7, #12
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr

0800847c <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b084      	sub	sp, #16
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800848c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008494:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800849c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80084a4:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80084a6:	7bfb      	ldrb	r3, [r7, #15]
 80084a8:	2b01      	cmp	r3, #1
 80084aa:	d108      	bne.n	80084be <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80084ac:	7bbb      	ldrb	r3, [r7, #14]
 80084ae:	2b01      	cmp	r3, #1
 80084b0:	d105      	bne.n	80084be <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80084b2:	7b7b      	ldrb	r3, [r7, #13]
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	d102      	bne.n	80084be <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80084b8:	7b3b      	ldrb	r3, [r7, #12]
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	d001      	beq.n	80084c2 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 80084be:	2301      	movs	r3, #1
 80084c0:	e059      	b.n	8008576 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2202      	movs	r2, #2
 80084c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2202      	movs	r2, #2
 80084ce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2202      	movs	r2, #2
 80084d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2202      	movs	r2, #2
 80084de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	68da      	ldr	r2, [r3, #12]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f042 0202 	orr.w	r2, r2, #2
 80084f0:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	68da      	ldr	r2, [r3, #12]
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f042 0204 	orr.w	r2, r2, #4
 8008500:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	2201      	movs	r2, #1
 8008508:	2100      	movs	r1, #0
 800850a:	4618      	mov	r0, r3
 800850c:	f001 fbd8 	bl	8009cc0 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	2201      	movs	r2, #1
 8008516:	2104      	movs	r1, #4
 8008518:	4618      	mov	r0, r3
 800851a:	f001 fbd1 	bl	8009cc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4a17      	ldr	r2, [pc, #92]	@ (8008580 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d018      	beq.n	800855a <HAL_TIM_OnePulse_Start_IT+0xde>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a15      	ldr	r2, [pc, #84]	@ (8008584 <HAL_TIM_OnePulse_Start_IT+0x108>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d013      	beq.n	800855a <HAL_TIM_OnePulse_Start_IT+0xde>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a14      	ldr	r2, [pc, #80]	@ (8008588 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d00e      	beq.n	800855a <HAL_TIM_OnePulse_Start_IT+0xde>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a12      	ldr	r2, [pc, #72]	@ (800858c <HAL_TIM_OnePulse_Start_IT+0x110>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d009      	beq.n	800855a <HAL_TIM_OnePulse_Start_IT+0xde>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a11      	ldr	r2, [pc, #68]	@ (8008590 <HAL_TIM_OnePulse_Start_IT+0x114>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d004      	beq.n	800855a <HAL_TIM_OnePulse_Start_IT+0xde>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4a0f      	ldr	r2, [pc, #60]	@ (8008594 <HAL_TIM_OnePulse_Start_IT+0x118>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d101      	bne.n	800855e <HAL_TIM_OnePulse_Start_IT+0xe2>
 800855a:	2301      	movs	r3, #1
 800855c:	e000      	b.n	8008560 <HAL_TIM_OnePulse_Start_IT+0xe4>
 800855e:	2300      	movs	r3, #0
 8008560:	2b00      	cmp	r3, #0
 8008562:	d007      	beq.n	8008574 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008572:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8008574:	2300      	movs	r3, #0
}
 8008576:	4618      	mov	r0, r3
 8008578:	3710      	adds	r7, #16
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}
 800857e:	bf00      	nop
 8008580:	40012c00 	.word	0x40012c00
 8008584:	40013400 	.word	0x40013400
 8008588:	40014000 	.word	0x40014000
 800858c:	40014400 	.word	0x40014400
 8008590:	40014800 	.word	0x40014800
 8008594:	40015000 	.word	0x40015000

08008598 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b086      	sub	sp, #24
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d101      	bne.n	80085ac <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80085a8:	2301      	movs	r3, #1
 80085aa:	e0a2      	b.n	80086f2 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80085b2:	b2db      	uxtb	r3, r3
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d111      	bne.n	80085dc <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2200      	movs	r2, #0
 80085bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f001 fba3 	bl	8009d0c <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d102      	bne.n	80085d4 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	4a4a      	ldr	r2, [pc, #296]	@ (80086fc <HAL_TIM_Encoder_Init+0x164>)
 80085d2:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2202      	movs	r2, #2
 80085e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	689b      	ldr	r3, [r3, #8]
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	6812      	ldr	r2, [r2, #0]
 80085ee:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80085f2:	f023 0307 	bic.w	r3, r3, #7
 80085f6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681a      	ldr	r2, [r3, #0]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	3304      	adds	r3, #4
 8008600:	4619      	mov	r1, r3
 8008602:	4610      	mov	r0, r2
 8008604:	f000 fee2 	bl	80093cc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	689b      	ldr	r3, [r3, #8]
 800860e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	699b      	ldr	r3, [r3, #24]
 8008616:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	6a1b      	ldr	r3, [r3, #32]
 800861e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	697a      	ldr	r2, [r7, #20]
 8008626:	4313      	orrs	r3, r2
 8008628:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008630:	f023 0303 	bic.w	r3, r3, #3
 8008634:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	689a      	ldr	r2, [r3, #8]
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	699b      	ldr	r3, [r3, #24]
 800863e:	021b      	lsls	r3, r3, #8
 8008640:	4313      	orrs	r3, r2
 8008642:	693a      	ldr	r2, [r7, #16]
 8008644:	4313      	orrs	r3, r2
 8008646:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800864e:	f023 030c 	bic.w	r3, r3, #12
 8008652:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800865a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800865e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	68da      	ldr	r2, [r3, #12]
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	69db      	ldr	r3, [r3, #28]
 8008668:	021b      	lsls	r3, r3, #8
 800866a:	4313      	orrs	r3, r2
 800866c:	693a      	ldr	r2, [r7, #16]
 800866e:	4313      	orrs	r3, r2
 8008670:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	691b      	ldr	r3, [r3, #16]
 8008676:	011a      	lsls	r2, r3, #4
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	6a1b      	ldr	r3, [r3, #32]
 800867c:	031b      	lsls	r3, r3, #12
 800867e:	4313      	orrs	r3, r2
 8008680:	693a      	ldr	r2, [r7, #16]
 8008682:	4313      	orrs	r3, r2
 8008684:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800868c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8008694:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	685a      	ldr	r2, [r3, #4]
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	695b      	ldr	r3, [r3, #20]
 800869e:	011b      	lsls	r3, r3, #4
 80086a0:	4313      	orrs	r3, r2
 80086a2:	68fa      	ldr	r2, [r7, #12]
 80086a4:	4313      	orrs	r3, r2
 80086a6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	697a      	ldr	r2, [r7, #20]
 80086ae:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	693a      	ldr	r2, [r7, #16]
 80086b6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	68fa      	ldr	r2, [r7, #12]
 80086be:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2201      	movs	r2, #1
 80086c4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2201      	movs	r2, #1
 80086cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2201      	movs	r2, #1
 80086d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2201      	movs	r2, #1
 80086dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2201      	movs	r2, #1
 80086e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2201      	movs	r2, #1
 80086ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80086f0:	2300      	movs	r3, #0
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3718      	adds	r7, #24
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}
 80086fa:	bf00      	nop
 80086fc:	0800453d 	.word	0x0800453d

08008700 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b084      	sub	sp, #16
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008710:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008718:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008720:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008728:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d110      	bne.n	8008752 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008730:	7bfb      	ldrb	r3, [r7, #15]
 8008732:	2b01      	cmp	r3, #1
 8008734:	d102      	bne.n	800873c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008736:	7b7b      	ldrb	r3, [r7, #13]
 8008738:	2b01      	cmp	r3, #1
 800873a:	d001      	beq.n	8008740 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800873c:	2301      	movs	r3, #1
 800873e:	e069      	b.n	8008814 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2202      	movs	r2, #2
 8008744:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2202      	movs	r2, #2
 800874c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008750:	e031      	b.n	80087b6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	2b04      	cmp	r3, #4
 8008756:	d110      	bne.n	800877a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008758:	7bbb      	ldrb	r3, [r7, #14]
 800875a:	2b01      	cmp	r3, #1
 800875c:	d102      	bne.n	8008764 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800875e:	7b3b      	ldrb	r3, [r7, #12]
 8008760:	2b01      	cmp	r3, #1
 8008762:	d001      	beq.n	8008768 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008764:	2301      	movs	r3, #1
 8008766:	e055      	b.n	8008814 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2202      	movs	r2, #2
 800876c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2202      	movs	r2, #2
 8008774:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008778:	e01d      	b.n	80087b6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800877a:	7bfb      	ldrb	r3, [r7, #15]
 800877c:	2b01      	cmp	r3, #1
 800877e:	d108      	bne.n	8008792 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008780:	7bbb      	ldrb	r3, [r7, #14]
 8008782:	2b01      	cmp	r3, #1
 8008784:	d105      	bne.n	8008792 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008786:	7b7b      	ldrb	r3, [r7, #13]
 8008788:	2b01      	cmp	r3, #1
 800878a:	d102      	bne.n	8008792 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800878c:	7b3b      	ldrb	r3, [r7, #12]
 800878e:	2b01      	cmp	r3, #1
 8008790:	d001      	beq.n	8008796 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008792:	2301      	movs	r3, #1
 8008794:	e03e      	b.n	8008814 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2202      	movs	r2, #2
 800879a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2202      	movs	r2, #2
 80087a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2202      	movs	r2, #2
 80087aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2202      	movs	r2, #2
 80087b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d003      	beq.n	80087c4 <HAL_TIM_Encoder_Start+0xc4>
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	2b04      	cmp	r3, #4
 80087c0:	d008      	beq.n	80087d4 <HAL_TIM_Encoder_Start+0xd4>
 80087c2:	e00f      	b.n	80087e4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	2201      	movs	r2, #1
 80087ca:	2100      	movs	r1, #0
 80087cc:	4618      	mov	r0, r3
 80087ce:	f001 fa77 	bl	8009cc0 <TIM_CCxChannelCmd>
      break;
 80087d2:	e016      	b.n	8008802 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	2201      	movs	r2, #1
 80087da:	2104      	movs	r1, #4
 80087dc:	4618      	mov	r0, r3
 80087de:	f001 fa6f 	bl	8009cc0 <TIM_CCxChannelCmd>
      break;
 80087e2:	e00e      	b.n	8008802 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	2201      	movs	r2, #1
 80087ea:	2100      	movs	r1, #0
 80087ec:	4618      	mov	r0, r3
 80087ee:	f001 fa67 	bl	8009cc0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	2201      	movs	r2, #1
 80087f8:	2104      	movs	r1, #4
 80087fa:	4618      	mov	r0, r3
 80087fc:	f001 fa60 	bl	8009cc0 <TIM_CCxChannelCmd>
      break;
 8008800:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	681a      	ldr	r2, [r3, #0]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f042 0201 	orr.w	r2, r2, #1
 8008810:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008812:	2300      	movs	r3, #0
}
 8008814:	4618      	mov	r0, r3
 8008816:	3710      	adds	r7, #16
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}

0800881c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b084      	sub	sp, #16
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	68db      	ldr	r3, [r3, #12]
 800882a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	691b      	ldr	r3, [r3, #16]
 8008832:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	f003 0302 	and.w	r3, r3, #2
 800883a:	2b00      	cmp	r3, #0
 800883c:	d026      	beq.n	800888c <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	f003 0302 	and.w	r3, r3, #2
 8008844:	2b00      	cmp	r3, #0
 8008846:	d021      	beq.n	800888c <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f06f 0202 	mvn.w	r2, #2
 8008850:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2201      	movs	r2, #1
 8008856:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	699b      	ldr	r3, [r3, #24]
 800885e:	f003 0303 	and.w	r3, r3, #3
 8008862:	2b00      	cmp	r3, #0
 8008864:	d005      	beq.n	8008872 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	4798      	blx	r3
 8008870:	e009      	b.n	8008886 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2200      	movs	r2, #0
 800888a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	f003 0304 	and.w	r3, r3, #4
 8008892:	2b00      	cmp	r3, #0
 8008894:	d026      	beq.n	80088e4 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	f003 0304 	and.w	r3, r3, #4
 800889c:	2b00      	cmp	r3, #0
 800889e:	d021      	beq.n	80088e4 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f06f 0204 	mvn.w	r2, #4
 80088a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2202      	movs	r2, #2
 80088ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	699b      	ldr	r3, [r3, #24]
 80088b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d005      	beq.n	80088ca <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	4798      	blx	r3
 80088c8:	e009      	b.n	80088de <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2200      	movs	r2, #0
 80088e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	f003 0308 	and.w	r3, r3, #8
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d026      	beq.n	800893c <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	f003 0308 	and.w	r3, r3, #8
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d021      	beq.n	800893c <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f06f 0208 	mvn.w	r2, #8
 8008900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2204      	movs	r2, #4
 8008906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	69db      	ldr	r3, [r3, #28]
 800890e:	f003 0303 	and.w	r3, r3, #3
 8008912:	2b00      	cmp	r3, #0
 8008914:	d005      	beq.n	8008922 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	4798      	blx	r3
 8008920:	e009      	b.n	8008936 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2200      	movs	r2, #0
 800893a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	f003 0310 	and.w	r3, r3, #16
 8008942:	2b00      	cmp	r3, #0
 8008944:	d026      	beq.n	8008994 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	f003 0310 	and.w	r3, r3, #16
 800894c:	2b00      	cmp	r3, #0
 800894e:	d021      	beq.n	8008994 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f06f 0210 	mvn.w	r2, #16
 8008958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2208      	movs	r2, #8
 800895e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	69db      	ldr	r3, [r3, #28]
 8008966:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800896a:	2b00      	cmp	r3, #0
 800896c:	d005      	beq.n	800897a <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	4798      	blx	r3
 8008978:	e009      	b.n	800898e <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2200      	movs	r2, #0
 8008992:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	f003 0301 	and.w	r3, r3, #1
 800899a:	2b00      	cmp	r3, #0
 800899c:	d00e      	beq.n	80089bc <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	f003 0301 	and.w	r3, r3, #1
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d009      	beq.n	80089bc <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f06f 0201 	mvn.w	r2, #1
 80089b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d104      	bne.n	80089d0 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d00e      	beq.n	80089ee <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d009      	beq.n	80089ee <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80089e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d00e      	beq.n	8008a16 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d009      	beq.n	8008a16 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008a0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d00e      	beq.n	8008a3e <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d009      	beq.n	8008a3e <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008a32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	f003 0320 	and.w	r3, r3, #32
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d00e      	beq.n	8008a66 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f003 0320 	and.w	r3, r3, #32
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d009      	beq.n	8008a66 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f06f 0220 	mvn.w	r2, #32
 8008a5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d00e      	beq.n	8008a8e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d009      	beq.n	8008a8e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008a82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d00e      	beq.n	8008ab6 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d009      	beq.n	8008ab6 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008aaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d00e      	beq.n	8008ade <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d009      	beq.n	8008ade <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008ad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d00e      	beq.n	8008b06 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d009      	beq.n	8008b06 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008afa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008b06:	bf00      	nop
 8008b08:	3710      	adds	r7, #16
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}
	...

08008b10 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b086      	sub	sp, #24
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	60f8      	str	r0, [r7, #12]
 8008b18:	60b9      	str	r1, [r7, #8]
 8008b1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b26:	2b01      	cmp	r3, #1
 8008b28:	d101      	bne.n	8008b2e <HAL_TIM_OC_ConfigChannel+0x1e>
 8008b2a:	2302      	movs	r3, #2
 8008b2c:	e066      	b.n	8008bfc <HAL_TIM_OC_ConfigChannel+0xec>
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2201      	movs	r2, #1
 8008b32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2b14      	cmp	r3, #20
 8008b3a:	d857      	bhi.n	8008bec <HAL_TIM_OC_ConfigChannel+0xdc>
 8008b3c:	a201      	add	r2, pc, #4	@ (adr r2, 8008b44 <HAL_TIM_OC_ConfigChannel+0x34>)
 8008b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b42:	bf00      	nop
 8008b44:	08008b99 	.word	0x08008b99
 8008b48:	08008bed 	.word	0x08008bed
 8008b4c:	08008bed 	.word	0x08008bed
 8008b50:	08008bed 	.word	0x08008bed
 8008b54:	08008ba7 	.word	0x08008ba7
 8008b58:	08008bed 	.word	0x08008bed
 8008b5c:	08008bed 	.word	0x08008bed
 8008b60:	08008bed 	.word	0x08008bed
 8008b64:	08008bb5 	.word	0x08008bb5
 8008b68:	08008bed 	.word	0x08008bed
 8008b6c:	08008bed 	.word	0x08008bed
 8008b70:	08008bed 	.word	0x08008bed
 8008b74:	08008bc3 	.word	0x08008bc3
 8008b78:	08008bed 	.word	0x08008bed
 8008b7c:	08008bed 	.word	0x08008bed
 8008b80:	08008bed 	.word	0x08008bed
 8008b84:	08008bd1 	.word	0x08008bd1
 8008b88:	08008bed 	.word	0x08008bed
 8008b8c:	08008bed 	.word	0x08008bed
 8008b90:	08008bed 	.word	0x08008bed
 8008b94:	08008bdf 	.word	0x08008bdf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	68b9      	ldr	r1, [r7, #8]
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f000 fcc8 	bl	8009534 <TIM_OC1_SetConfig>
      break;
 8008ba4:	e025      	b.n	8008bf2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	68b9      	ldr	r1, [r7, #8]
 8008bac:	4618      	mov	r0, r3
 8008bae:	f000 fd5b 	bl	8009668 <TIM_OC2_SetConfig>
      break;
 8008bb2:	e01e      	b.n	8008bf2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	68b9      	ldr	r1, [r7, #8]
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f000 fde8 	bl	8009790 <TIM_OC3_SetConfig>
      break;
 8008bc0:	e017      	b.n	8008bf2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	68b9      	ldr	r1, [r7, #8]
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f000 fe73 	bl	80098b4 <TIM_OC4_SetConfig>
      break;
 8008bce:	e010      	b.n	8008bf2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	68b9      	ldr	r1, [r7, #8]
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f000 ff00 	bl	80099dc <TIM_OC5_SetConfig>
      break;
 8008bdc:	e009      	b.n	8008bf2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	68b9      	ldr	r1, [r7, #8]
 8008be4:	4618      	mov	r0, r3
 8008be6:	f000 ff63 	bl	8009ab0 <TIM_OC6_SetConfig>
      break;
 8008bea:	e002      	b.n	8008bf2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8008bec:	2301      	movs	r3, #1
 8008bee:	75fb      	strb	r3, [r7, #23]
      break;
 8008bf0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3718      	adds	r7, #24
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b086      	sub	sp, #24
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	60f8      	str	r0, [r7, #12]
 8008c0c:	60b9      	str	r1, [r7, #8]
 8008c0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c10:	2300      	movs	r3, #0
 8008c12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c1a:	2b01      	cmp	r3, #1
 8008c1c:	d101      	bne.n	8008c22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008c1e:	2302      	movs	r3, #2
 8008c20:	e0ff      	b.n	8008e22 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2201      	movs	r2, #1
 8008c26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2b14      	cmp	r3, #20
 8008c2e:	f200 80f0 	bhi.w	8008e12 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008c32:	a201      	add	r2, pc, #4	@ (adr r2, 8008c38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c38:	08008c8d 	.word	0x08008c8d
 8008c3c:	08008e13 	.word	0x08008e13
 8008c40:	08008e13 	.word	0x08008e13
 8008c44:	08008e13 	.word	0x08008e13
 8008c48:	08008ccd 	.word	0x08008ccd
 8008c4c:	08008e13 	.word	0x08008e13
 8008c50:	08008e13 	.word	0x08008e13
 8008c54:	08008e13 	.word	0x08008e13
 8008c58:	08008d0f 	.word	0x08008d0f
 8008c5c:	08008e13 	.word	0x08008e13
 8008c60:	08008e13 	.word	0x08008e13
 8008c64:	08008e13 	.word	0x08008e13
 8008c68:	08008d4f 	.word	0x08008d4f
 8008c6c:	08008e13 	.word	0x08008e13
 8008c70:	08008e13 	.word	0x08008e13
 8008c74:	08008e13 	.word	0x08008e13
 8008c78:	08008d91 	.word	0x08008d91
 8008c7c:	08008e13 	.word	0x08008e13
 8008c80:	08008e13 	.word	0x08008e13
 8008c84:	08008e13 	.word	0x08008e13
 8008c88:	08008dd1 	.word	0x08008dd1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	68b9      	ldr	r1, [r7, #8]
 8008c92:	4618      	mov	r0, r3
 8008c94:	f000 fc4e 	bl	8009534 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	699a      	ldr	r2, [r3, #24]
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f042 0208 	orr.w	r2, r2, #8
 8008ca6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	699a      	ldr	r2, [r3, #24]
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f022 0204 	bic.w	r2, r2, #4
 8008cb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	6999      	ldr	r1, [r3, #24]
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	691a      	ldr	r2, [r3, #16]
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	430a      	orrs	r2, r1
 8008cc8:	619a      	str	r2, [r3, #24]
      break;
 8008cca:	e0a5      	b.n	8008e18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	68b9      	ldr	r1, [r7, #8]
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f000 fcc8 	bl	8009668 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	699a      	ldr	r2, [r3, #24]
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008ce6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	699a      	ldr	r2, [r3, #24]
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008cf6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	6999      	ldr	r1, [r3, #24]
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	691b      	ldr	r3, [r3, #16]
 8008d02:	021a      	lsls	r2, r3, #8
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	430a      	orrs	r2, r1
 8008d0a:	619a      	str	r2, [r3, #24]
      break;
 8008d0c:	e084      	b.n	8008e18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	68b9      	ldr	r1, [r7, #8]
 8008d14:	4618      	mov	r0, r3
 8008d16:	f000 fd3b 	bl	8009790 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	69da      	ldr	r2, [r3, #28]
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f042 0208 	orr.w	r2, r2, #8
 8008d28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	69da      	ldr	r2, [r3, #28]
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f022 0204 	bic.w	r2, r2, #4
 8008d38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	69d9      	ldr	r1, [r3, #28]
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	691a      	ldr	r2, [r3, #16]
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	430a      	orrs	r2, r1
 8008d4a:	61da      	str	r2, [r3, #28]
      break;
 8008d4c:	e064      	b.n	8008e18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	68b9      	ldr	r1, [r7, #8]
 8008d54:	4618      	mov	r0, r3
 8008d56:	f000 fdad 	bl	80098b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	69da      	ldr	r2, [r3, #28]
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008d68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	69da      	ldr	r2, [r3, #28]
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008d78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	69d9      	ldr	r1, [r3, #28]
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	691b      	ldr	r3, [r3, #16]
 8008d84:	021a      	lsls	r2, r3, #8
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	430a      	orrs	r2, r1
 8008d8c:	61da      	str	r2, [r3, #28]
      break;
 8008d8e:	e043      	b.n	8008e18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	68b9      	ldr	r1, [r7, #8]
 8008d96:	4618      	mov	r0, r3
 8008d98:	f000 fe20 	bl	80099dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f042 0208 	orr.w	r2, r2, #8
 8008daa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f022 0204 	bic.w	r2, r2, #4
 8008dba:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	691a      	ldr	r2, [r3, #16]
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	430a      	orrs	r2, r1
 8008dcc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008dce:	e023      	b.n	8008e18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	68b9      	ldr	r1, [r7, #8]
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f000 fe6a 	bl	8009ab0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008dea:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008dfa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	691b      	ldr	r3, [r3, #16]
 8008e06:	021a      	lsls	r2, r3, #8
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	430a      	orrs	r2, r1
 8008e0e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008e10:	e002      	b.n	8008e18 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008e12:	2301      	movs	r3, #1
 8008e14:	75fb      	strb	r3, [r7, #23]
      break;
 8008e16:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008e20:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3718      	adds	r7, #24
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}
 8008e2a:	bf00      	nop

08008e2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b084      	sub	sp, #16
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008e36:	2300      	movs	r3, #0
 8008e38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d101      	bne.n	8008e48 <HAL_TIM_ConfigClockSource+0x1c>
 8008e44:	2302      	movs	r3, #2
 8008e46:	e0f6      	b.n	8009036 <HAL_TIM_ConfigClockSource+0x20a>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2202      	movs	r2, #2
 8008e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	689b      	ldr	r3, [r3, #8]
 8008e5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008e66:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008e6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008e72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	68ba      	ldr	r2, [r7, #8]
 8008e7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a6f      	ldr	r2, [pc, #444]	@ (8009040 <HAL_TIM_ConfigClockSource+0x214>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	f000 80c1 	beq.w	800900a <HAL_TIM_ConfigClockSource+0x1de>
 8008e88:	4a6d      	ldr	r2, [pc, #436]	@ (8009040 <HAL_TIM_ConfigClockSource+0x214>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	f200 80c6 	bhi.w	800901c <HAL_TIM_ConfigClockSource+0x1f0>
 8008e90:	4a6c      	ldr	r2, [pc, #432]	@ (8009044 <HAL_TIM_ConfigClockSource+0x218>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	f000 80b9 	beq.w	800900a <HAL_TIM_ConfigClockSource+0x1de>
 8008e98:	4a6a      	ldr	r2, [pc, #424]	@ (8009044 <HAL_TIM_ConfigClockSource+0x218>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	f200 80be 	bhi.w	800901c <HAL_TIM_ConfigClockSource+0x1f0>
 8008ea0:	4a69      	ldr	r2, [pc, #420]	@ (8009048 <HAL_TIM_ConfigClockSource+0x21c>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	f000 80b1 	beq.w	800900a <HAL_TIM_ConfigClockSource+0x1de>
 8008ea8:	4a67      	ldr	r2, [pc, #412]	@ (8009048 <HAL_TIM_ConfigClockSource+0x21c>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	f200 80b6 	bhi.w	800901c <HAL_TIM_ConfigClockSource+0x1f0>
 8008eb0:	4a66      	ldr	r2, [pc, #408]	@ (800904c <HAL_TIM_ConfigClockSource+0x220>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	f000 80a9 	beq.w	800900a <HAL_TIM_ConfigClockSource+0x1de>
 8008eb8:	4a64      	ldr	r2, [pc, #400]	@ (800904c <HAL_TIM_ConfigClockSource+0x220>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	f200 80ae 	bhi.w	800901c <HAL_TIM_ConfigClockSource+0x1f0>
 8008ec0:	4a63      	ldr	r2, [pc, #396]	@ (8009050 <HAL_TIM_ConfigClockSource+0x224>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	f000 80a1 	beq.w	800900a <HAL_TIM_ConfigClockSource+0x1de>
 8008ec8:	4a61      	ldr	r2, [pc, #388]	@ (8009050 <HAL_TIM_ConfigClockSource+0x224>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	f200 80a6 	bhi.w	800901c <HAL_TIM_ConfigClockSource+0x1f0>
 8008ed0:	4a60      	ldr	r2, [pc, #384]	@ (8009054 <HAL_TIM_ConfigClockSource+0x228>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	f000 8099 	beq.w	800900a <HAL_TIM_ConfigClockSource+0x1de>
 8008ed8:	4a5e      	ldr	r2, [pc, #376]	@ (8009054 <HAL_TIM_ConfigClockSource+0x228>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	f200 809e 	bhi.w	800901c <HAL_TIM_ConfigClockSource+0x1f0>
 8008ee0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008ee4:	f000 8091 	beq.w	800900a <HAL_TIM_ConfigClockSource+0x1de>
 8008ee8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008eec:	f200 8096 	bhi.w	800901c <HAL_TIM_ConfigClockSource+0x1f0>
 8008ef0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ef4:	f000 8089 	beq.w	800900a <HAL_TIM_ConfigClockSource+0x1de>
 8008ef8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008efc:	f200 808e 	bhi.w	800901c <HAL_TIM_ConfigClockSource+0x1f0>
 8008f00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f04:	d03e      	beq.n	8008f84 <HAL_TIM_ConfigClockSource+0x158>
 8008f06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f0a:	f200 8087 	bhi.w	800901c <HAL_TIM_ConfigClockSource+0x1f0>
 8008f0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f12:	f000 8086 	beq.w	8009022 <HAL_TIM_ConfigClockSource+0x1f6>
 8008f16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f1a:	d87f      	bhi.n	800901c <HAL_TIM_ConfigClockSource+0x1f0>
 8008f1c:	2b70      	cmp	r3, #112	@ 0x70
 8008f1e:	d01a      	beq.n	8008f56 <HAL_TIM_ConfigClockSource+0x12a>
 8008f20:	2b70      	cmp	r3, #112	@ 0x70
 8008f22:	d87b      	bhi.n	800901c <HAL_TIM_ConfigClockSource+0x1f0>
 8008f24:	2b60      	cmp	r3, #96	@ 0x60
 8008f26:	d050      	beq.n	8008fca <HAL_TIM_ConfigClockSource+0x19e>
 8008f28:	2b60      	cmp	r3, #96	@ 0x60
 8008f2a:	d877      	bhi.n	800901c <HAL_TIM_ConfigClockSource+0x1f0>
 8008f2c:	2b50      	cmp	r3, #80	@ 0x50
 8008f2e:	d03c      	beq.n	8008faa <HAL_TIM_ConfigClockSource+0x17e>
 8008f30:	2b50      	cmp	r3, #80	@ 0x50
 8008f32:	d873      	bhi.n	800901c <HAL_TIM_ConfigClockSource+0x1f0>
 8008f34:	2b40      	cmp	r3, #64	@ 0x40
 8008f36:	d058      	beq.n	8008fea <HAL_TIM_ConfigClockSource+0x1be>
 8008f38:	2b40      	cmp	r3, #64	@ 0x40
 8008f3a:	d86f      	bhi.n	800901c <HAL_TIM_ConfigClockSource+0x1f0>
 8008f3c:	2b30      	cmp	r3, #48	@ 0x30
 8008f3e:	d064      	beq.n	800900a <HAL_TIM_ConfigClockSource+0x1de>
 8008f40:	2b30      	cmp	r3, #48	@ 0x30
 8008f42:	d86b      	bhi.n	800901c <HAL_TIM_ConfigClockSource+0x1f0>
 8008f44:	2b20      	cmp	r3, #32
 8008f46:	d060      	beq.n	800900a <HAL_TIM_ConfigClockSource+0x1de>
 8008f48:	2b20      	cmp	r3, #32
 8008f4a:	d867      	bhi.n	800901c <HAL_TIM_ConfigClockSource+0x1f0>
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d05c      	beq.n	800900a <HAL_TIM_ConfigClockSource+0x1de>
 8008f50:	2b10      	cmp	r3, #16
 8008f52:	d05a      	beq.n	800900a <HAL_TIM_ConfigClockSource+0x1de>
 8008f54:	e062      	b.n	800901c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008f66:	f000 fe8b 	bl	8009c80 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008f78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	68ba      	ldr	r2, [r7, #8]
 8008f80:	609a      	str	r2, [r3, #8]
      break;
 8008f82:	e04f      	b.n	8009024 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008f94:	f000 fe74 	bl	8009c80 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	689a      	ldr	r2, [r3, #8]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008fa6:	609a      	str	r2, [r3, #8]
      break;
 8008fa8:	e03c      	b.n	8009024 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	f000 fde6 	bl	8009b88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	2150      	movs	r1, #80	@ 0x50
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f000 fe3f 	bl	8009c46 <TIM_ITRx_SetConfig>
      break;
 8008fc8:	e02c      	b.n	8009024 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	f000 fe05 	bl	8009be6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	2160      	movs	r1, #96	@ 0x60
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f000 fe2f 	bl	8009c46 <TIM_ITRx_SetConfig>
      break;
 8008fe8:	e01c      	b.n	8009024 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	f000 fdc6 	bl	8009b88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	2140      	movs	r1, #64	@ 0x40
 8009002:	4618      	mov	r0, r3
 8009004:	f000 fe1f 	bl	8009c46 <TIM_ITRx_SetConfig>
      break;
 8009008:	e00c      	b.n	8009024 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	4619      	mov	r1, r3
 8009014:	4610      	mov	r0, r2
 8009016:	f000 fe16 	bl	8009c46 <TIM_ITRx_SetConfig>
      break;
 800901a:	e003      	b.n	8009024 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800901c:	2301      	movs	r3, #1
 800901e:	73fb      	strb	r3, [r7, #15]
      break;
 8009020:	e000      	b.n	8009024 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8009022:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2201      	movs	r2, #1
 8009028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2200      	movs	r2, #0
 8009030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009034:	7bfb      	ldrb	r3, [r7, #15]
}
 8009036:	4618      	mov	r0, r3
 8009038:	3710      	adds	r7, #16
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}
 800903e:	bf00      	nop
 8009040:	00100070 	.word	0x00100070
 8009044:	00100060 	.word	0x00100060
 8009048:	00100050 	.word	0x00100050
 800904c:	00100040 	.word	0x00100040
 8009050:	00100030 	.word	0x00100030
 8009054:	00100020 	.word	0x00100020

08009058 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009058:	b480      	push	{r7}
 800905a:	b083      	sub	sp, #12
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8009060:	bf00      	nop
 8009062:	370c      	adds	r7, #12
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr

0800906c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800906c:	b480      	push	{r7}
 800906e:	b083      	sub	sp, #12
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009074:	bf00      	nop
 8009076:	370c      	adds	r7, #12
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr

08009080 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009080:	b480      	push	{r7}
 8009082:	b083      	sub	sp, #12
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009088:	bf00      	nop
 800908a:	370c      	adds	r7, #12
 800908c:	46bd      	mov	sp, r7
 800908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009092:	4770      	bx	lr

08009094 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009094:	b480      	push	{r7}
 8009096:	b083      	sub	sp, #12
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800909c:	bf00      	nop
 800909e:	370c      	adds	r7, #12
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr

080090a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b083      	sub	sp, #12
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80090b0:	bf00      	nop
 80090b2:	370c      	adds	r7, #12
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr

080090bc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80090bc:	b480      	push	{r7}
 80090be:	b083      	sub	sp, #12
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80090c4:	bf00      	nop
 80090c6:	370c      	adds	r7, #12
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr

080090d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b083      	sub	sp, #12
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80090d8:	bf00      	nop
 80090da:	370c      	adds	r7, #12
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr

080090e4 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b083      	sub	sp, #12
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80090ec:	bf00      	nop
 80090ee:	370c      	adds	r7, #12
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr

080090f8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b083      	sub	sp, #12
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8009100:	bf00      	nop
 8009102:	370c      	adds	r7, #12
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr

0800910c <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800910c:	b480      	push	{r7}
 800910e:	b087      	sub	sp, #28
 8009110:	af00      	add	r7, sp, #0
 8009112:	60f8      	str	r0, [r7, #12]
 8009114:	460b      	mov	r3, r1
 8009116:	607a      	str	r2, [r7, #4]
 8009118:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800911a:	2300      	movs	r3, #0
 800911c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d101      	bne.n	8009128 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8009124:	2301      	movs	r3, #1
 8009126:	e14a      	b.n	80093be <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800912e:	b2db      	uxtb	r3, r3
 8009130:	2b01      	cmp	r3, #1
 8009132:	f040 80dd 	bne.w	80092f0 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8009136:	7afb      	ldrb	r3, [r7, #11]
 8009138:	2b1f      	cmp	r3, #31
 800913a:	f200 80d6 	bhi.w	80092ea <HAL_TIM_RegisterCallback+0x1de>
 800913e:	a201      	add	r2, pc, #4	@ (adr r2, 8009144 <HAL_TIM_RegisterCallback+0x38>)
 8009140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009144:	080091c5 	.word	0x080091c5
 8009148:	080091cd 	.word	0x080091cd
 800914c:	080091d5 	.word	0x080091d5
 8009150:	080091dd 	.word	0x080091dd
 8009154:	080091e5 	.word	0x080091e5
 8009158:	080091ed 	.word	0x080091ed
 800915c:	080091f5 	.word	0x080091f5
 8009160:	080091fd 	.word	0x080091fd
 8009164:	08009205 	.word	0x08009205
 8009168:	0800920d 	.word	0x0800920d
 800916c:	08009215 	.word	0x08009215
 8009170:	0800921d 	.word	0x0800921d
 8009174:	08009225 	.word	0x08009225
 8009178:	0800922d 	.word	0x0800922d
 800917c:	08009237 	.word	0x08009237
 8009180:	08009241 	.word	0x08009241
 8009184:	0800924b 	.word	0x0800924b
 8009188:	08009255 	.word	0x08009255
 800918c:	0800925f 	.word	0x0800925f
 8009190:	08009269 	.word	0x08009269
 8009194:	08009273 	.word	0x08009273
 8009198:	0800927d 	.word	0x0800927d
 800919c:	08009287 	.word	0x08009287
 80091a0:	08009291 	.word	0x08009291
 80091a4:	0800929b 	.word	0x0800929b
 80091a8:	080092a5 	.word	0x080092a5
 80091ac:	080092af 	.word	0x080092af
 80091b0:	080092b9 	.word	0x080092b9
 80091b4:	080092c3 	.word	0x080092c3
 80091b8:	080092cd 	.word	0x080092cd
 80091bc:	080092d7 	.word	0x080092d7
 80091c0:	080092e1 	.word	0x080092e1
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	687a      	ldr	r2, [r7, #4]
 80091c8:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80091ca:	e0f7      	b.n	80093bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	687a      	ldr	r2, [r7, #4]
 80091d0:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80091d2:	e0f3      	b.n	80093bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	687a      	ldr	r2, [r7, #4]
 80091d8:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80091da:	e0ef      	b.n	80093bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	687a      	ldr	r2, [r7, #4]
 80091e0:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80091e2:	e0eb      	b.n	80093bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	687a      	ldr	r2, [r7, #4]
 80091e8:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 80091ea:	e0e7      	b.n	80093bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	687a      	ldr	r2, [r7, #4]
 80091f0:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80091f2:	e0e3      	b.n	80093bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	687a      	ldr	r2, [r7, #4]
 80091f8:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80091fa:	e0df      	b.n	80093bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	687a      	ldr	r2, [r7, #4]
 8009200:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8009202:	e0db      	b.n	80093bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	687a      	ldr	r2, [r7, #4]
 8009208:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800920a:	e0d7      	b.n	80093bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	687a      	ldr	r2, [r7, #4]
 8009210:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8009212:	e0d3      	b.n	80093bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	687a      	ldr	r2, [r7, #4]
 8009218:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800921a:	e0cf      	b.n	80093bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	687a      	ldr	r2, [r7, #4]
 8009220:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8009222:	e0cb      	b.n	80093bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	687a      	ldr	r2, [r7, #4]
 8009228:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800922a:	e0c7      	b.n	80093bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	687a      	ldr	r2, [r7, #4]
 8009230:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8009234:	e0c2      	b.n	80093bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	687a      	ldr	r2, [r7, #4]
 800923a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800923e:	e0bd      	b.n	80093bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	687a      	ldr	r2, [r7, #4]
 8009244:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8009248:	e0b8      	b.n	80093bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	687a      	ldr	r2, [r7, #4]
 800924e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8009252:	e0b3      	b.n	80093bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	687a      	ldr	r2, [r7, #4]
 8009258:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 800925c:	e0ae      	b.n	80093bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	687a      	ldr	r2, [r7, #4]
 8009262:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8009266:	e0a9      	b.n	80093bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	687a      	ldr	r2, [r7, #4]
 800926c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8009270:	e0a4      	b.n	80093bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	687a      	ldr	r2, [r7, #4]
 8009276:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800927a:	e09f      	b.n	80093bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	687a      	ldr	r2, [r7, #4]
 8009280:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8009284:	e09a      	b.n	80093bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	687a      	ldr	r2, [r7, #4]
 800928a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800928e:	e095      	b.n	80093bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	687a      	ldr	r2, [r7, #4]
 8009294:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8009298:	e090      	b.n	80093bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	687a      	ldr	r2, [r7, #4]
 800929e:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 80092a2:	e08b      	b.n	80093bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	687a      	ldr	r2, [r7, #4]
 80092a8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 80092ac:	e086      	b.n	80093bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80092b6:	e081      	b.n	80093bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	687a      	ldr	r2, [r7, #4]
 80092bc:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 80092c0:	e07c      	b.n	80093bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	687a      	ldr	r2, [r7, #4]
 80092c6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 80092ca:	e077      	b.n	80093bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	687a      	ldr	r2, [r7, #4]
 80092d0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 80092d4:	e072      	b.n	80093bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	687a      	ldr	r2, [r7, #4]
 80092da:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80092de:	e06d      	b.n	80093bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	687a      	ldr	r2, [r7, #4]
 80092e4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80092e8:	e068      	b.n	80093bc <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80092ea:	2301      	movs	r3, #1
 80092ec:	75fb      	strb	r3, [r7, #23]
        break;
 80092ee:	e065      	b.n	80093bc <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80092f6:	b2db      	uxtb	r3, r3
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d15d      	bne.n	80093b8 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 80092fc:	7afb      	ldrb	r3, [r7, #11]
 80092fe:	2b0d      	cmp	r3, #13
 8009300:	d857      	bhi.n	80093b2 <HAL_TIM_RegisterCallback+0x2a6>
 8009302:	a201      	add	r2, pc, #4	@ (adr r2, 8009308 <HAL_TIM_RegisterCallback+0x1fc>)
 8009304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009308:	08009341 	.word	0x08009341
 800930c:	08009349 	.word	0x08009349
 8009310:	08009351 	.word	0x08009351
 8009314:	08009359 	.word	0x08009359
 8009318:	08009361 	.word	0x08009361
 800931c:	08009369 	.word	0x08009369
 8009320:	08009371 	.word	0x08009371
 8009324:	08009379 	.word	0x08009379
 8009328:	08009381 	.word	0x08009381
 800932c:	08009389 	.word	0x08009389
 8009330:	08009391 	.word	0x08009391
 8009334:	08009399 	.word	0x08009399
 8009338:	080093a1 	.word	0x080093a1
 800933c:	080093a9 	.word	0x080093a9
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	687a      	ldr	r2, [r7, #4]
 8009344:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8009346:	e039      	b.n	80093bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	687a      	ldr	r2, [r7, #4]
 800934c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800934e:	e035      	b.n	80093bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	687a      	ldr	r2, [r7, #4]
 8009354:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8009356:	e031      	b.n	80093bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	687a      	ldr	r2, [r7, #4]
 800935c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800935e:	e02d      	b.n	80093bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	687a      	ldr	r2, [r7, #4]
 8009364:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8009366:	e029      	b.n	80093bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	687a      	ldr	r2, [r7, #4]
 800936c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800936e:	e025      	b.n	80093bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8009376:	e021      	b.n	80093bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	687a      	ldr	r2, [r7, #4]
 800937c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800937e:	e01d      	b.n	80093bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	687a      	ldr	r2, [r7, #4]
 8009384:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8009386:	e019      	b.n	80093bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	687a      	ldr	r2, [r7, #4]
 800938c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800938e:	e015      	b.n	80093bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	687a      	ldr	r2, [r7, #4]
 8009394:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8009396:	e011      	b.n	80093bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	687a      	ldr	r2, [r7, #4]
 800939c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800939e:	e00d      	b.n	80093bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	687a      	ldr	r2, [r7, #4]
 80093a4:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80093a6:	e009      	b.n	80093bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	687a      	ldr	r2, [r7, #4]
 80093ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80093b0:	e004      	b.n	80093bc <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80093b2:	2301      	movs	r3, #1
 80093b4:	75fb      	strb	r3, [r7, #23]
        break;
 80093b6:	e001      	b.n	80093bc <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 80093b8:	2301      	movs	r3, #1
 80093ba:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80093bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80093be:	4618      	mov	r0, r3
 80093c0:	371c      	adds	r7, #28
 80093c2:	46bd      	mov	sp, r7
 80093c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c8:	4770      	bx	lr
 80093ca:	bf00      	nop

080093cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b085      	sub	sp, #20
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	4a4c      	ldr	r2, [pc, #304]	@ (8009510 <TIM_Base_SetConfig+0x144>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d017      	beq.n	8009414 <TIM_Base_SetConfig+0x48>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093ea:	d013      	beq.n	8009414 <TIM_Base_SetConfig+0x48>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	4a49      	ldr	r2, [pc, #292]	@ (8009514 <TIM_Base_SetConfig+0x148>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d00f      	beq.n	8009414 <TIM_Base_SetConfig+0x48>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	4a48      	ldr	r2, [pc, #288]	@ (8009518 <TIM_Base_SetConfig+0x14c>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d00b      	beq.n	8009414 <TIM_Base_SetConfig+0x48>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	4a47      	ldr	r2, [pc, #284]	@ (800951c <TIM_Base_SetConfig+0x150>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d007      	beq.n	8009414 <TIM_Base_SetConfig+0x48>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	4a46      	ldr	r2, [pc, #280]	@ (8009520 <TIM_Base_SetConfig+0x154>)
 8009408:	4293      	cmp	r3, r2
 800940a:	d003      	beq.n	8009414 <TIM_Base_SetConfig+0x48>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	4a45      	ldr	r2, [pc, #276]	@ (8009524 <TIM_Base_SetConfig+0x158>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d108      	bne.n	8009426 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800941a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	685b      	ldr	r3, [r3, #4]
 8009420:	68fa      	ldr	r2, [r7, #12]
 8009422:	4313      	orrs	r3, r2
 8009424:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	4a39      	ldr	r2, [pc, #228]	@ (8009510 <TIM_Base_SetConfig+0x144>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d023      	beq.n	8009476 <TIM_Base_SetConfig+0xaa>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009434:	d01f      	beq.n	8009476 <TIM_Base_SetConfig+0xaa>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	4a36      	ldr	r2, [pc, #216]	@ (8009514 <TIM_Base_SetConfig+0x148>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d01b      	beq.n	8009476 <TIM_Base_SetConfig+0xaa>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	4a35      	ldr	r2, [pc, #212]	@ (8009518 <TIM_Base_SetConfig+0x14c>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d017      	beq.n	8009476 <TIM_Base_SetConfig+0xaa>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	4a34      	ldr	r2, [pc, #208]	@ (800951c <TIM_Base_SetConfig+0x150>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d013      	beq.n	8009476 <TIM_Base_SetConfig+0xaa>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	4a33      	ldr	r2, [pc, #204]	@ (8009520 <TIM_Base_SetConfig+0x154>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d00f      	beq.n	8009476 <TIM_Base_SetConfig+0xaa>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	4a33      	ldr	r2, [pc, #204]	@ (8009528 <TIM_Base_SetConfig+0x15c>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d00b      	beq.n	8009476 <TIM_Base_SetConfig+0xaa>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	4a32      	ldr	r2, [pc, #200]	@ (800952c <TIM_Base_SetConfig+0x160>)
 8009462:	4293      	cmp	r3, r2
 8009464:	d007      	beq.n	8009476 <TIM_Base_SetConfig+0xaa>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	4a31      	ldr	r2, [pc, #196]	@ (8009530 <TIM_Base_SetConfig+0x164>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d003      	beq.n	8009476 <TIM_Base_SetConfig+0xaa>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	4a2c      	ldr	r2, [pc, #176]	@ (8009524 <TIM_Base_SetConfig+0x158>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d108      	bne.n	8009488 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800947c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	68db      	ldr	r3, [r3, #12]
 8009482:	68fa      	ldr	r2, [r7, #12]
 8009484:	4313      	orrs	r3, r2
 8009486:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	695b      	ldr	r3, [r3, #20]
 8009492:	4313      	orrs	r3, r2
 8009494:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	68fa      	ldr	r2, [r7, #12]
 800949a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	689a      	ldr	r2, [r3, #8]
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	681a      	ldr	r2, [r3, #0]
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	4a18      	ldr	r2, [pc, #96]	@ (8009510 <TIM_Base_SetConfig+0x144>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d013      	beq.n	80094dc <TIM_Base_SetConfig+0x110>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	4a1a      	ldr	r2, [pc, #104]	@ (8009520 <TIM_Base_SetConfig+0x154>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d00f      	beq.n	80094dc <TIM_Base_SetConfig+0x110>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	4a1a      	ldr	r2, [pc, #104]	@ (8009528 <TIM_Base_SetConfig+0x15c>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d00b      	beq.n	80094dc <TIM_Base_SetConfig+0x110>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	4a19      	ldr	r2, [pc, #100]	@ (800952c <TIM_Base_SetConfig+0x160>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d007      	beq.n	80094dc <TIM_Base_SetConfig+0x110>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	4a18      	ldr	r2, [pc, #96]	@ (8009530 <TIM_Base_SetConfig+0x164>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d003      	beq.n	80094dc <TIM_Base_SetConfig+0x110>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	4a13      	ldr	r2, [pc, #76]	@ (8009524 <TIM_Base_SetConfig+0x158>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d103      	bne.n	80094e4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	691a      	ldr	r2, [r3, #16]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2201      	movs	r2, #1
 80094e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	691b      	ldr	r3, [r3, #16]
 80094ee:	f003 0301 	and.w	r3, r3, #1
 80094f2:	2b01      	cmp	r3, #1
 80094f4:	d105      	bne.n	8009502 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	691b      	ldr	r3, [r3, #16]
 80094fa:	f023 0201 	bic.w	r2, r3, #1
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	611a      	str	r2, [r3, #16]
  }
}
 8009502:	bf00      	nop
 8009504:	3714      	adds	r7, #20
 8009506:	46bd      	mov	sp, r7
 8009508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950c:	4770      	bx	lr
 800950e:	bf00      	nop
 8009510:	40012c00 	.word	0x40012c00
 8009514:	40000400 	.word	0x40000400
 8009518:	40000800 	.word	0x40000800
 800951c:	40000c00 	.word	0x40000c00
 8009520:	40013400 	.word	0x40013400
 8009524:	40015000 	.word	0x40015000
 8009528:	40014000 	.word	0x40014000
 800952c:	40014400 	.word	0x40014400
 8009530:	40014800 	.word	0x40014800

08009534 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009534:	b480      	push	{r7}
 8009536:	b087      	sub	sp, #28
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6a1b      	ldr	r3, [r3, #32]
 8009542:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6a1b      	ldr	r3, [r3, #32]
 8009548:	f023 0201 	bic.w	r2, r3, #1
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	699b      	ldr	r3, [r3, #24]
 800955a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009562:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f023 0303 	bic.w	r3, r3, #3
 800956e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	68fa      	ldr	r2, [r7, #12]
 8009576:	4313      	orrs	r3, r2
 8009578:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800957a:	697b      	ldr	r3, [r7, #20]
 800957c:	f023 0302 	bic.w	r3, r3, #2
 8009580:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	689b      	ldr	r3, [r3, #8]
 8009586:	697a      	ldr	r2, [r7, #20]
 8009588:	4313      	orrs	r3, r2
 800958a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	4a30      	ldr	r2, [pc, #192]	@ (8009650 <TIM_OC1_SetConfig+0x11c>)
 8009590:	4293      	cmp	r3, r2
 8009592:	d013      	beq.n	80095bc <TIM_OC1_SetConfig+0x88>
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	4a2f      	ldr	r2, [pc, #188]	@ (8009654 <TIM_OC1_SetConfig+0x120>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d00f      	beq.n	80095bc <TIM_OC1_SetConfig+0x88>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	4a2e      	ldr	r2, [pc, #184]	@ (8009658 <TIM_OC1_SetConfig+0x124>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d00b      	beq.n	80095bc <TIM_OC1_SetConfig+0x88>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	4a2d      	ldr	r2, [pc, #180]	@ (800965c <TIM_OC1_SetConfig+0x128>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d007      	beq.n	80095bc <TIM_OC1_SetConfig+0x88>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	4a2c      	ldr	r2, [pc, #176]	@ (8009660 <TIM_OC1_SetConfig+0x12c>)
 80095b0:	4293      	cmp	r3, r2
 80095b2:	d003      	beq.n	80095bc <TIM_OC1_SetConfig+0x88>
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	4a2b      	ldr	r2, [pc, #172]	@ (8009664 <TIM_OC1_SetConfig+0x130>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d10c      	bne.n	80095d6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80095bc:	697b      	ldr	r3, [r7, #20]
 80095be:	f023 0308 	bic.w	r3, r3, #8
 80095c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	68db      	ldr	r3, [r3, #12]
 80095c8:	697a      	ldr	r2, [r7, #20]
 80095ca:	4313      	orrs	r3, r2
 80095cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	f023 0304 	bic.w	r3, r3, #4
 80095d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	4a1d      	ldr	r2, [pc, #116]	@ (8009650 <TIM_OC1_SetConfig+0x11c>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d013      	beq.n	8009606 <TIM_OC1_SetConfig+0xd2>
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	4a1c      	ldr	r2, [pc, #112]	@ (8009654 <TIM_OC1_SetConfig+0x120>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d00f      	beq.n	8009606 <TIM_OC1_SetConfig+0xd2>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	4a1b      	ldr	r2, [pc, #108]	@ (8009658 <TIM_OC1_SetConfig+0x124>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d00b      	beq.n	8009606 <TIM_OC1_SetConfig+0xd2>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	4a1a      	ldr	r2, [pc, #104]	@ (800965c <TIM_OC1_SetConfig+0x128>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d007      	beq.n	8009606 <TIM_OC1_SetConfig+0xd2>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	4a19      	ldr	r2, [pc, #100]	@ (8009660 <TIM_OC1_SetConfig+0x12c>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d003      	beq.n	8009606 <TIM_OC1_SetConfig+0xd2>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	4a18      	ldr	r2, [pc, #96]	@ (8009664 <TIM_OC1_SetConfig+0x130>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d111      	bne.n	800962a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800960c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800960e:	693b      	ldr	r3, [r7, #16]
 8009610:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009614:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	695b      	ldr	r3, [r3, #20]
 800961a:	693a      	ldr	r2, [r7, #16]
 800961c:	4313      	orrs	r3, r2
 800961e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	699b      	ldr	r3, [r3, #24]
 8009624:	693a      	ldr	r2, [r7, #16]
 8009626:	4313      	orrs	r3, r2
 8009628:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	693a      	ldr	r2, [r7, #16]
 800962e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	68fa      	ldr	r2, [r7, #12]
 8009634:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	685a      	ldr	r2, [r3, #4]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	697a      	ldr	r2, [r7, #20]
 8009642:	621a      	str	r2, [r3, #32]
}
 8009644:	bf00      	nop
 8009646:	371c      	adds	r7, #28
 8009648:	46bd      	mov	sp, r7
 800964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964e:	4770      	bx	lr
 8009650:	40012c00 	.word	0x40012c00
 8009654:	40013400 	.word	0x40013400
 8009658:	40014000 	.word	0x40014000
 800965c:	40014400 	.word	0x40014400
 8009660:	40014800 	.word	0x40014800
 8009664:	40015000 	.word	0x40015000

08009668 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009668:	b480      	push	{r7}
 800966a:	b087      	sub	sp, #28
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6a1b      	ldr	r3, [r3, #32]
 8009676:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6a1b      	ldr	r3, [r3, #32]
 800967c:	f023 0210 	bic.w	r2, r3, #16
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	685b      	ldr	r3, [r3, #4]
 8009688:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	699b      	ldr	r3, [r3, #24]
 800968e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009696:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800969a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80096a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	021b      	lsls	r3, r3, #8
 80096aa:	68fa      	ldr	r2, [r7, #12]
 80096ac:	4313      	orrs	r3, r2
 80096ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	f023 0320 	bic.w	r3, r3, #32
 80096b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	689b      	ldr	r3, [r3, #8]
 80096bc:	011b      	lsls	r3, r3, #4
 80096be:	697a      	ldr	r2, [r7, #20]
 80096c0:	4313      	orrs	r3, r2
 80096c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	4a2c      	ldr	r2, [pc, #176]	@ (8009778 <TIM_OC2_SetConfig+0x110>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d007      	beq.n	80096dc <TIM_OC2_SetConfig+0x74>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	4a2b      	ldr	r2, [pc, #172]	@ (800977c <TIM_OC2_SetConfig+0x114>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d003      	beq.n	80096dc <TIM_OC2_SetConfig+0x74>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	4a2a      	ldr	r2, [pc, #168]	@ (8009780 <TIM_OC2_SetConfig+0x118>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	d10d      	bne.n	80096f8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80096e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	68db      	ldr	r3, [r3, #12]
 80096e8:	011b      	lsls	r3, r3, #4
 80096ea:	697a      	ldr	r2, [r7, #20]
 80096ec:	4313      	orrs	r3, r2
 80096ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80096f0:	697b      	ldr	r3, [r7, #20]
 80096f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80096f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	4a1f      	ldr	r2, [pc, #124]	@ (8009778 <TIM_OC2_SetConfig+0x110>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d013      	beq.n	8009728 <TIM_OC2_SetConfig+0xc0>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	4a1e      	ldr	r2, [pc, #120]	@ (800977c <TIM_OC2_SetConfig+0x114>)
 8009704:	4293      	cmp	r3, r2
 8009706:	d00f      	beq.n	8009728 <TIM_OC2_SetConfig+0xc0>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	4a1e      	ldr	r2, [pc, #120]	@ (8009784 <TIM_OC2_SetConfig+0x11c>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d00b      	beq.n	8009728 <TIM_OC2_SetConfig+0xc0>
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	4a1d      	ldr	r2, [pc, #116]	@ (8009788 <TIM_OC2_SetConfig+0x120>)
 8009714:	4293      	cmp	r3, r2
 8009716:	d007      	beq.n	8009728 <TIM_OC2_SetConfig+0xc0>
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	4a1c      	ldr	r2, [pc, #112]	@ (800978c <TIM_OC2_SetConfig+0x124>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d003      	beq.n	8009728 <TIM_OC2_SetConfig+0xc0>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	4a17      	ldr	r2, [pc, #92]	@ (8009780 <TIM_OC2_SetConfig+0x118>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d113      	bne.n	8009750 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800972e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009736:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	695b      	ldr	r3, [r3, #20]
 800973c:	009b      	lsls	r3, r3, #2
 800973e:	693a      	ldr	r2, [r7, #16]
 8009740:	4313      	orrs	r3, r2
 8009742:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	699b      	ldr	r3, [r3, #24]
 8009748:	009b      	lsls	r3, r3, #2
 800974a:	693a      	ldr	r2, [r7, #16]
 800974c:	4313      	orrs	r3, r2
 800974e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	693a      	ldr	r2, [r7, #16]
 8009754:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	68fa      	ldr	r2, [r7, #12]
 800975a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	685a      	ldr	r2, [r3, #4]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	697a      	ldr	r2, [r7, #20]
 8009768:	621a      	str	r2, [r3, #32]
}
 800976a:	bf00      	nop
 800976c:	371c      	adds	r7, #28
 800976e:	46bd      	mov	sp, r7
 8009770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009774:	4770      	bx	lr
 8009776:	bf00      	nop
 8009778:	40012c00 	.word	0x40012c00
 800977c:	40013400 	.word	0x40013400
 8009780:	40015000 	.word	0x40015000
 8009784:	40014000 	.word	0x40014000
 8009788:	40014400 	.word	0x40014400
 800978c:	40014800 	.word	0x40014800

08009790 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009790:	b480      	push	{r7}
 8009792:	b087      	sub	sp, #28
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
 8009798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6a1b      	ldr	r3, [r3, #32]
 800979e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6a1b      	ldr	r3, [r3, #32]
 80097a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	685b      	ldr	r3, [r3, #4]
 80097b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	69db      	ldr	r3, [r3, #28]
 80097b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80097be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f023 0303 	bic.w	r3, r3, #3
 80097ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	68fa      	ldr	r2, [r7, #12]
 80097d2:	4313      	orrs	r3, r2
 80097d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80097dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	689b      	ldr	r3, [r3, #8]
 80097e2:	021b      	lsls	r3, r3, #8
 80097e4:	697a      	ldr	r2, [r7, #20]
 80097e6:	4313      	orrs	r3, r2
 80097e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	4a2b      	ldr	r2, [pc, #172]	@ (800989c <TIM_OC3_SetConfig+0x10c>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d007      	beq.n	8009802 <TIM_OC3_SetConfig+0x72>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	4a2a      	ldr	r2, [pc, #168]	@ (80098a0 <TIM_OC3_SetConfig+0x110>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d003      	beq.n	8009802 <TIM_OC3_SetConfig+0x72>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	4a29      	ldr	r2, [pc, #164]	@ (80098a4 <TIM_OC3_SetConfig+0x114>)
 80097fe:	4293      	cmp	r3, r2
 8009800:	d10d      	bne.n	800981e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009808:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	68db      	ldr	r3, [r3, #12]
 800980e:	021b      	lsls	r3, r3, #8
 8009810:	697a      	ldr	r2, [r7, #20]
 8009812:	4313      	orrs	r3, r2
 8009814:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009816:	697b      	ldr	r3, [r7, #20]
 8009818:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800981c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	4a1e      	ldr	r2, [pc, #120]	@ (800989c <TIM_OC3_SetConfig+0x10c>)
 8009822:	4293      	cmp	r3, r2
 8009824:	d013      	beq.n	800984e <TIM_OC3_SetConfig+0xbe>
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	4a1d      	ldr	r2, [pc, #116]	@ (80098a0 <TIM_OC3_SetConfig+0x110>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d00f      	beq.n	800984e <TIM_OC3_SetConfig+0xbe>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	4a1d      	ldr	r2, [pc, #116]	@ (80098a8 <TIM_OC3_SetConfig+0x118>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d00b      	beq.n	800984e <TIM_OC3_SetConfig+0xbe>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	4a1c      	ldr	r2, [pc, #112]	@ (80098ac <TIM_OC3_SetConfig+0x11c>)
 800983a:	4293      	cmp	r3, r2
 800983c:	d007      	beq.n	800984e <TIM_OC3_SetConfig+0xbe>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	4a1b      	ldr	r2, [pc, #108]	@ (80098b0 <TIM_OC3_SetConfig+0x120>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d003      	beq.n	800984e <TIM_OC3_SetConfig+0xbe>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	4a16      	ldr	r2, [pc, #88]	@ (80098a4 <TIM_OC3_SetConfig+0x114>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d113      	bne.n	8009876 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009854:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800985c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	695b      	ldr	r3, [r3, #20]
 8009862:	011b      	lsls	r3, r3, #4
 8009864:	693a      	ldr	r2, [r7, #16]
 8009866:	4313      	orrs	r3, r2
 8009868:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	699b      	ldr	r3, [r3, #24]
 800986e:	011b      	lsls	r3, r3, #4
 8009870:	693a      	ldr	r2, [r7, #16]
 8009872:	4313      	orrs	r3, r2
 8009874:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	693a      	ldr	r2, [r7, #16]
 800987a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	68fa      	ldr	r2, [r7, #12]
 8009880:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	685a      	ldr	r2, [r3, #4]
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	697a      	ldr	r2, [r7, #20]
 800988e:	621a      	str	r2, [r3, #32]
}
 8009890:	bf00      	nop
 8009892:	371c      	adds	r7, #28
 8009894:	46bd      	mov	sp, r7
 8009896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989a:	4770      	bx	lr
 800989c:	40012c00 	.word	0x40012c00
 80098a0:	40013400 	.word	0x40013400
 80098a4:	40015000 	.word	0x40015000
 80098a8:	40014000 	.word	0x40014000
 80098ac:	40014400 	.word	0x40014400
 80098b0:	40014800 	.word	0x40014800

080098b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80098b4:	b480      	push	{r7}
 80098b6:	b087      	sub	sp, #28
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6a1b      	ldr	r3, [r3, #32]
 80098c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6a1b      	ldr	r3, [r3, #32]
 80098c8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	685b      	ldr	r3, [r3, #4]
 80098d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	69db      	ldr	r3, [r3, #28]
 80098da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80098e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80098e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80098ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	021b      	lsls	r3, r3, #8
 80098f6:	68fa      	ldr	r2, [r7, #12]
 80098f8:	4313      	orrs	r3, r2
 80098fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009902:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	689b      	ldr	r3, [r3, #8]
 8009908:	031b      	lsls	r3, r3, #12
 800990a:	697a      	ldr	r2, [r7, #20]
 800990c:	4313      	orrs	r3, r2
 800990e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	4a2c      	ldr	r2, [pc, #176]	@ (80099c4 <TIM_OC4_SetConfig+0x110>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d007      	beq.n	8009928 <TIM_OC4_SetConfig+0x74>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	4a2b      	ldr	r2, [pc, #172]	@ (80099c8 <TIM_OC4_SetConfig+0x114>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d003      	beq.n	8009928 <TIM_OC4_SetConfig+0x74>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	4a2a      	ldr	r2, [pc, #168]	@ (80099cc <TIM_OC4_SetConfig+0x118>)
 8009924:	4293      	cmp	r3, r2
 8009926:	d10d      	bne.n	8009944 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800992e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	68db      	ldr	r3, [r3, #12]
 8009934:	031b      	lsls	r3, r3, #12
 8009936:	697a      	ldr	r2, [r7, #20]
 8009938:	4313      	orrs	r3, r2
 800993a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009942:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	4a1f      	ldr	r2, [pc, #124]	@ (80099c4 <TIM_OC4_SetConfig+0x110>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d013      	beq.n	8009974 <TIM_OC4_SetConfig+0xc0>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	4a1e      	ldr	r2, [pc, #120]	@ (80099c8 <TIM_OC4_SetConfig+0x114>)
 8009950:	4293      	cmp	r3, r2
 8009952:	d00f      	beq.n	8009974 <TIM_OC4_SetConfig+0xc0>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	4a1e      	ldr	r2, [pc, #120]	@ (80099d0 <TIM_OC4_SetConfig+0x11c>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d00b      	beq.n	8009974 <TIM_OC4_SetConfig+0xc0>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	4a1d      	ldr	r2, [pc, #116]	@ (80099d4 <TIM_OC4_SetConfig+0x120>)
 8009960:	4293      	cmp	r3, r2
 8009962:	d007      	beq.n	8009974 <TIM_OC4_SetConfig+0xc0>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	4a1c      	ldr	r2, [pc, #112]	@ (80099d8 <TIM_OC4_SetConfig+0x124>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d003      	beq.n	8009974 <TIM_OC4_SetConfig+0xc0>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	4a17      	ldr	r2, [pc, #92]	@ (80099cc <TIM_OC4_SetConfig+0x118>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d113      	bne.n	800999c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009974:	693b      	ldr	r3, [r7, #16]
 8009976:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800997a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009982:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	695b      	ldr	r3, [r3, #20]
 8009988:	019b      	lsls	r3, r3, #6
 800998a:	693a      	ldr	r2, [r7, #16]
 800998c:	4313      	orrs	r3, r2
 800998e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	699b      	ldr	r3, [r3, #24]
 8009994:	019b      	lsls	r3, r3, #6
 8009996:	693a      	ldr	r2, [r7, #16]
 8009998:	4313      	orrs	r3, r2
 800999a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	693a      	ldr	r2, [r7, #16]
 80099a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	68fa      	ldr	r2, [r7, #12]
 80099a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	685a      	ldr	r2, [r3, #4]
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	697a      	ldr	r2, [r7, #20]
 80099b4:	621a      	str	r2, [r3, #32]
}
 80099b6:	bf00      	nop
 80099b8:	371c      	adds	r7, #28
 80099ba:	46bd      	mov	sp, r7
 80099bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c0:	4770      	bx	lr
 80099c2:	bf00      	nop
 80099c4:	40012c00 	.word	0x40012c00
 80099c8:	40013400 	.word	0x40013400
 80099cc:	40015000 	.word	0x40015000
 80099d0:	40014000 	.word	0x40014000
 80099d4:	40014400 	.word	0x40014400
 80099d8:	40014800 	.word	0x40014800

080099dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80099dc:	b480      	push	{r7}
 80099de:	b087      	sub	sp, #28
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6a1b      	ldr	r3, [r3, #32]
 80099ea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6a1b      	ldr	r3, [r3, #32]
 80099f0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009a0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	68fa      	ldr	r2, [r7, #12]
 8009a16:	4313      	orrs	r3, r2
 8009a18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009a20:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	689b      	ldr	r3, [r3, #8]
 8009a26:	041b      	lsls	r3, r3, #16
 8009a28:	693a      	ldr	r2, [r7, #16]
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	4a19      	ldr	r2, [pc, #100]	@ (8009a98 <TIM_OC5_SetConfig+0xbc>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d013      	beq.n	8009a5e <TIM_OC5_SetConfig+0x82>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	4a18      	ldr	r2, [pc, #96]	@ (8009a9c <TIM_OC5_SetConfig+0xc0>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d00f      	beq.n	8009a5e <TIM_OC5_SetConfig+0x82>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	4a17      	ldr	r2, [pc, #92]	@ (8009aa0 <TIM_OC5_SetConfig+0xc4>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d00b      	beq.n	8009a5e <TIM_OC5_SetConfig+0x82>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	4a16      	ldr	r2, [pc, #88]	@ (8009aa4 <TIM_OC5_SetConfig+0xc8>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d007      	beq.n	8009a5e <TIM_OC5_SetConfig+0x82>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	4a15      	ldr	r2, [pc, #84]	@ (8009aa8 <TIM_OC5_SetConfig+0xcc>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d003      	beq.n	8009a5e <TIM_OC5_SetConfig+0x82>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	4a14      	ldr	r2, [pc, #80]	@ (8009aac <TIM_OC5_SetConfig+0xd0>)
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d109      	bne.n	8009a72 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009a64:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	695b      	ldr	r3, [r3, #20]
 8009a6a:	021b      	lsls	r3, r3, #8
 8009a6c:	697a      	ldr	r2, [r7, #20]
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	697a      	ldr	r2, [r7, #20]
 8009a76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	68fa      	ldr	r2, [r7, #12]
 8009a7c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	685a      	ldr	r2, [r3, #4]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	693a      	ldr	r2, [r7, #16]
 8009a8a:	621a      	str	r2, [r3, #32]
}
 8009a8c:	bf00      	nop
 8009a8e:	371c      	adds	r7, #28
 8009a90:	46bd      	mov	sp, r7
 8009a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a96:	4770      	bx	lr
 8009a98:	40012c00 	.word	0x40012c00
 8009a9c:	40013400 	.word	0x40013400
 8009aa0:	40014000 	.word	0x40014000
 8009aa4:	40014400 	.word	0x40014400
 8009aa8:	40014800 	.word	0x40014800
 8009aac:	40015000 	.word	0x40015000

08009ab0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b087      	sub	sp, #28
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6a1b      	ldr	r3, [r3, #32]
 8009abe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6a1b      	ldr	r3, [r3, #32]
 8009ac4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009ade:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009ae2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	021b      	lsls	r3, r3, #8
 8009aea:	68fa      	ldr	r2, [r7, #12]
 8009aec:	4313      	orrs	r3, r2
 8009aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009af6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	689b      	ldr	r3, [r3, #8]
 8009afc:	051b      	lsls	r3, r3, #20
 8009afe:	693a      	ldr	r2, [r7, #16]
 8009b00:	4313      	orrs	r3, r2
 8009b02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	4a1a      	ldr	r2, [pc, #104]	@ (8009b70 <TIM_OC6_SetConfig+0xc0>)
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d013      	beq.n	8009b34 <TIM_OC6_SetConfig+0x84>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	4a19      	ldr	r2, [pc, #100]	@ (8009b74 <TIM_OC6_SetConfig+0xc4>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d00f      	beq.n	8009b34 <TIM_OC6_SetConfig+0x84>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	4a18      	ldr	r2, [pc, #96]	@ (8009b78 <TIM_OC6_SetConfig+0xc8>)
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d00b      	beq.n	8009b34 <TIM_OC6_SetConfig+0x84>
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	4a17      	ldr	r2, [pc, #92]	@ (8009b7c <TIM_OC6_SetConfig+0xcc>)
 8009b20:	4293      	cmp	r3, r2
 8009b22:	d007      	beq.n	8009b34 <TIM_OC6_SetConfig+0x84>
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	4a16      	ldr	r2, [pc, #88]	@ (8009b80 <TIM_OC6_SetConfig+0xd0>)
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	d003      	beq.n	8009b34 <TIM_OC6_SetConfig+0x84>
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	4a15      	ldr	r2, [pc, #84]	@ (8009b84 <TIM_OC6_SetConfig+0xd4>)
 8009b30:	4293      	cmp	r3, r2
 8009b32:	d109      	bne.n	8009b48 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009b3a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	695b      	ldr	r3, [r3, #20]
 8009b40:	029b      	lsls	r3, r3, #10
 8009b42:	697a      	ldr	r2, [r7, #20]
 8009b44:	4313      	orrs	r3, r2
 8009b46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	697a      	ldr	r2, [r7, #20]
 8009b4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	68fa      	ldr	r2, [r7, #12]
 8009b52:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	685a      	ldr	r2, [r3, #4]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	693a      	ldr	r2, [r7, #16]
 8009b60:	621a      	str	r2, [r3, #32]
}
 8009b62:	bf00      	nop
 8009b64:	371c      	adds	r7, #28
 8009b66:	46bd      	mov	sp, r7
 8009b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6c:	4770      	bx	lr
 8009b6e:	bf00      	nop
 8009b70:	40012c00 	.word	0x40012c00
 8009b74:	40013400 	.word	0x40013400
 8009b78:	40014000 	.word	0x40014000
 8009b7c:	40014400 	.word	0x40014400
 8009b80:	40014800 	.word	0x40014800
 8009b84:	40015000 	.word	0x40015000

08009b88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b087      	sub	sp, #28
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	60f8      	str	r0, [r7, #12]
 8009b90:	60b9      	str	r1, [r7, #8]
 8009b92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	6a1b      	ldr	r3, [r3, #32]
 8009b98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	6a1b      	ldr	r3, [r3, #32]
 8009b9e:	f023 0201 	bic.w	r2, r3, #1
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	699b      	ldr	r3, [r3, #24]
 8009baa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009bac:	693b      	ldr	r3, [r7, #16]
 8009bae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009bb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	011b      	lsls	r3, r3, #4
 8009bb8:	693a      	ldr	r2, [r7, #16]
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	f023 030a 	bic.w	r3, r3, #10
 8009bc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009bc6:	697a      	ldr	r2, [r7, #20]
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	4313      	orrs	r3, r2
 8009bcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	693a      	ldr	r2, [r7, #16]
 8009bd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	697a      	ldr	r2, [r7, #20]
 8009bd8:	621a      	str	r2, [r3, #32]
}
 8009bda:	bf00      	nop
 8009bdc:	371c      	adds	r7, #28
 8009bde:	46bd      	mov	sp, r7
 8009be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be4:	4770      	bx	lr

08009be6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009be6:	b480      	push	{r7}
 8009be8:	b087      	sub	sp, #28
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	60f8      	str	r0, [r7, #12]
 8009bee:	60b9      	str	r1, [r7, #8]
 8009bf0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	6a1b      	ldr	r3, [r3, #32]
 8009bf6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	6a1b      	ldr	r3, [r3, #32]
 8009bfc:	f023 0210 	bic.w	r2, r3, #16
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	699b      	ldr	r3, [r3, #24]
 8009c08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009c10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	031b      	lsls	r3, r3, #12
 8009c16:	693a      	ldr	r2, [r7, #16]
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009c22:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	011b      	lsls	r3, r3, #4
 8009c28:	697a      	ldr	r2, [r7, #20]
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	693a      	ldr	r2, [r7, #16]
 8009c32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	697a      	ldr	r2, [r7, #20]
 8009c38:	621a      	str	r2, [r3, #32]
}
 8009c3a:	bf00      	nop
 8009c3c:	371c      	adds	r7, #28
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c44:	4770      	bx	lr

08009c46 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009c46:	b480      	push	{r7}
 8009c48:	b085      	sub	sp, #20
 8009c4a:	af00      	add	r7, sp, #0
 8009c4c:	6078      	str	r0, [r7, #4]
 8009c4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	689b      	ldr	r3, [r3, #8]
 8009c54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009c5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009c62:	683a      	ldr	r2, [r7, #0]
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	4313      	orrs	r3, r2
 8009c68:	f043 0307 	orr.w	r3, r3, #7
 8009c6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	68fa      	ldr	r2, [r7, #12]
 8009c72:	609a      	str	r2, [r3, #8]
}
 8009c74:	bf00      	nop
 8009c76:	3714      	adds	r7, #20
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7e:	4770      	bx	lr

08009c80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009c80:	b480      	push	{r7}
 8009c82:	b087      	sub	sp, #28
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	60f8      	str	r0, [r7, #12]
 8009c88:	60b9      	str	r1, [r7, #8]
 8009c8a:	607a      	str	r2, [r7, #4]
 8009c8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	689b      	ldr	r3, [r3, #8]
 8009c92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c94:	697b      	ldr	r3, [r7, #20]
 8009c96:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009c9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	021a      	lsls	r2, r3, #8
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	431a      	orrs	r2, r3
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	697a      	ldr	r2, [r7, #20]
 8009caa:	4313      	orrs	r3, r2
 8009cac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	697a      	ldr	r2, [r7, #20]
 8009cb2:	609a      	str	r2, [r3, #8]
}
 8009cb4:	bf00      	nop
 8009cb6:	371c      	adds	r7, #28
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbe:	4770      	bx	lr

08009cc0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b087      	sub	sp, #28
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	60f8      	str	r0, [r7, #12]
 8009cc8:	60b9      	str	r1, [r7, #8]
 8009cca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	f003 031f 	and.w	r3, r3, #31
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8009cd8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	6a1a      	ldr	r2, [r3, #32]
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	43db      	mvns	r3, r3
 8009ce2:	401a      	ands	r2, r3
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	6a1a      	ldr	r2, [r3, #32]
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	f003 031f 	and.w	r3, r3, #31
 8009cf2:	6879      	ldr	r1, [r7, #4]
 8009cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8009cf8:	431a      	orrs	r2, r3
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	621a      	str	r2, [r3, #32]
}
 8009cfe:	bf00      	nop
 8009d00:	371c      	adds	r7, #28
 8009d02:	46bd      	mov	sp, r7
 8009d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d08:	4770      	bx	lr
	...

08009d0c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b083      	sub	sp, #12
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	4a26      	ldr	r2, [pc, #152]	@ (8009db0 <TIM_ResetCallback+0xa4>)
 8009d18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	4a25      	ldr	r2, [pc, #148]	@ (8009db4 <TIM_ResetCallback+0xa8>)
 8009d20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	4a24      	ldr	r2, [pc, #144]	@ (8009db8 <TIM_ResetCallback+0xac>)
 8009d28:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	4a23      	ldr	r2, [pc, #140]	@ (8009dbc <TIM_ResetCallback+0xb0>)
 8009d30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	4a22      	ldr	r2, [pc, #136]	@ (8009dc0 <TIM_ResetCallback+0xb4>)
 8009d38:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	4a21      	ldr	r2, [pc, #132]	@ (8009dc4 <TIM_ResetCallback+0xb8>)
 8009d40:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	4a20      	ldr	r2, [pc, #128]	@ (8009dc8 <TIM_ResetCallback+0xbc>)
 8009d48:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	4a1f      	ldr	r2, [pc, #124]	@ (8009dcc <TIM_ResetCallback+0xc0>)
 8009d50:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	4a1e      	ldr	r2, [pc, #120]	@ (8009dd0 <TIM_ResetCallback+0xc4>)
 8009d58:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	4a1d      	ldr	r2, [pc, #116]	@ (8009dd4 <TIM_ResetCallback+0xc8>)
 8009d60:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	4a1c      	ldr	r2, [pc, #112]	@ (8009dd8 <TIM_ResetCallback+0xcc>)
 8009d68:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	4a1b      	ldr	r2, [pc, #108]	@ (8009ddc <TIM_ResetCallback+0xd0>)
 8009d70:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	4a1a      	ldr	r2, [pc, #104]	@ (8009de0 <TIM_ResetCallback+0xd4>)
 8009d78:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	4a19      	ldr	r2, [pc, #100]	@ (8009de4 <TIM_ResetCallback+0xd8>)
 8009d80:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	4a18      	ldr	r2, [pc, #96]	@ (8009de8 <TIM_ResetCallback+0xdc>)
 8009d88:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	4a17      	ldr	r2, [pc, #92]	@ (8009dec <TIM_ResetCallback+0xe0>)
 8009d90:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	4a16      	ldr	r2, [pc, #88]	@ (8009df0 <TIM_ResetCallback+0xe4>)
 8009d98:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	4a15      	ldr	r2, [pc, #84]	@ (8009df4 <TIM_ResetCallback+0xe8>)
 8009da0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8009da4:	bf00      	nop
 8009da6:	370c      	adds	r7, #12
 8009da8:	46bd      	mov	sp, r7
 8009daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dae:	4770      	bx	lr
 8009db0:	08003359 	.word	0x08003359
 8009db4:	08009059 	.word	0x08009059
 8009db8:	080090d1 	.word	0x080090d1
 8009dbc:	080090e5 	.word	0x080090e5
 8009dc0:	08009081 	.word	0x08009081
 8009dc4:	08009095 	.word	0x08009095
 8009dc8:	0800906d 	.word	0x0800906d
 8009dcc:	080090a9 	.word	0x080090a9
 8009dd0:	080090bd 	.word	0x080090bd
 8009dd4:	080090f9 	.word	0x080090f9
 8009dd8:	0800a04d 	.word	0x0800a04d
 8009ddc:	0800a061 	.word	0x0800a061
 8009de0:	0800a075 	.word	0x0800a075
 8009de4:	0800a089 	.word	0x0800a089
 8009de8:	0800a09d 	.word	0x0800a09d
 8009dec:	0800a0b1 	.word	0x0800a0b1
 8009df0:	0800a0c5 	.word	0x0800a0c5
 8009df4:	0800a0d9 	.word	0x0800a0d9

08009df8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b085      	sub	sp, #20
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
 8009e00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009e08:	2b01      	cmp	r3, #1
 8009e0a:	d101      	bne.n	8009e10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009e0c:	2302      	movs	r3, #2
 8009e0e:	e074      	b.n	8009efa <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2201      	movs	r2, #1
 8009e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2202      	movs	r2, #2
 8009e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	685b      	ldr	r3, [r3, #4]
 8009e26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	689b      	ldr	r3, [r3, #8]
 8009e2e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	4a34      	ldr	r2, [pc, #208]	@ (8009f08 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d009      	beq.n	8009e4e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	4a33      	ldr	r2, [pc, #204]	@ (8009f0c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009e40:	4293      	cmp	r3, r2
 8009e42:	d004      	beq.n	8009e4e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	4a31      	ldr	r2, [pc, #196]	@ (8009f10 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	d108      	bne.n	8009e60 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009e54:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	685b      	ldr	r3, [r3, #4]
 8009e5a:	68fa      	ldr	r2, [r7, #12]
 8009e5c:	4313      	orrs	r3, r2
 8009e5e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009e66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	68fa      	ldr	r2, [r7, #12]
 8009e72:	4313      	orrs	r3, r2
 8009e74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	68fa      	ldr	r2, [r7, #12]
 8009e7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	4a21      	ldr	r2, [pc, #132]	@ (8009f08 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d022      	beq.n	8009ece <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e90:	d01d      	beq.n	8009ece <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4a1f      	ldr	r2, [pc, #124]	@ (8009f14 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d018      	beq.n	8009ece <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4a1d      	ldr	r2, [pc, #116]	@ (8009f18 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d013      	beq.n	8009ece <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	4a1c      	ldr	r2, [pc, #112]	@ (8009f1c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d00e      	beq.n	8009ece <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	4a15      	ldr	r2, [pc, #84]	@ (8009f0c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d009      	beq.n	8009ece <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	4a18      	ldr	r2, [pc, #96]	@ (8009f20 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	d004      	beq.n	8009ece <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	4a11      	ldr	r2, [pc, #68]	@ (8009f10 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d10c      	bne.n	8009ee8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009ed4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	689b      	ldr	r3, [r3, #8]
 8009eda:	68ba      	ldr	r2, [r7, #8]
 8009edc:	4313      	orrs	r3, r2
 8009ede:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	68ba      	ldr	r2, [r7, #8]
 8009ee6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2201      	movs	r2, #1
 8009eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009ef8:	2300      	movs	r3, #0
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3714      	adds	r7, #20
 8009efe:	46bd      	mov	sp, r7
 8009f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f04:	4770      	bx	lr
 8009f06:	bf00      	nop
 8009f08:	40012c00 	.word	0x40012c00
 8009f0c:	40013400 	.word	0x40013400
 8009f10:	40015000 	.word	0x40015000
 8009f14:	40000400 	.word	0x40000400
 8009f18:	40000800 	.word	0x40000800
 8009f1c:	40000c00 	.word	0x40000c00
 8009f20:	40014000 	.word	0x40014000

08009f24 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009f24:	b480      	push	{r7}
 8009f26:	b085      	sub	sp, #20
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009f38:	2b01      	cmp	r3, #1
 8009f3a:	d101      	bne.n	8009f40 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009f3c:	2302      	movs	r3, #2
 8009f3e:	e078      	b.n	800a032 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2201      	movs	r2, #1
 8009f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	68db      	ldr	r3, [r3, #12]
 8009f52:	4313      	orrs	r3, r2
 8009f54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	689b      	ldr	r3, [r3, #8]
 8009f60:	4313      	orrs	r3, r2
 8009f62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	4313      	orrs	r3, r2
 8009f70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	4313      	orrs	r3, r2
 8009f7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	691b      	ldr	r3, [r3, #16]
 8009f8a:	4313      	orrs	r3, r2
 8009f8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	695b      	ldr	r3, [r3, #20]
 8009f98:	4313      	orrs	r3, r2
 8009f9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fa6:	4313      	orrs	r3, r2
 8009fa8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	699b      	ldr	r3, [r3, #24]
 8009fb4:	041b      	lsls	r3, r3, #16
 8009fb6:	4313      	orrs	r3, r2
 8009fb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	69db      	ldr	r3, [r3, #28]
 8009fc4:	4313      	orrs	r3, r2
 8009fc6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	4a1c      	ldr	r2, [pc, #112]	@ (800a040 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	d009      	beq.n	8009fe6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	4a1b      	ldr	r2, [pc, #108]	@ (800a044 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d004      	beq.n	8009fe6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	4a19      	ldr	r2, [pc, #100]	@ (800a048 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8009fe2:	4293      	cmp	r3, r2
 8009fe4:	d11c      	bne.n	800a020 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ff0:	051b      	lsls	r3, r3, #20
 8009ff2:	4313      	orrs	r3, r2
 8009ff4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	6a1b      	ldr	r3, [r3, #32]
 800a000:	4313      	orrs	r3, r2
 800a002:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a00e:	4313      	orrs	r3, r2
 800a010:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a01c:	4313      	orrs	r3, r2
 800a01e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	68fa      	ldr	r2, [r7, #12]
 800a026:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2200      	movs	r2, #0
 800a02c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a030:	2300      	movs	r3, #0
}
 800a032:	4618      	mov	r0, r3
 800a034:	3714      	adds	r7, #20
 800a036:	46bd      	mov	sp, r7
 800a038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03c:	4770      	bx	lr
 800a03e:	bf00      	nop
 800a040:	40012c00 	.word	0x40012c00
 800a044:	40013400 	.word	0x40013400
 800a048:	40015000 	.word	0x40015000

0800a04c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a04c:	b480      	push	{r7}
 800a04e:	b083      	sub	sp, #12
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a054:	bf00      	nop
 800a056:	370c      	adds	r7, #12
 800a058:	46bd      	mov	sp, r7
 800a05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05e:	4770      	bx	lr

0800a060 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a060:	b480      	push	{r7}
 800a062:	b083      	sub	sp, #12
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800a068:	bf00      	nop
 800a06a:	370c      	adds	r7, #12
 800a06c:	46bd      	mov	sp, r7
 800a06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a072:	4770      	bx	lr

0800a074 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a074:	b480      	push	{r7}
 800a076:	b083      	sub	sp, #12
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a07c:	bf00      	nop
 800a07e:	370c      	adds	r7, #12
 800a080:	46bd      	mov	sp, r7
 800a082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a086:	4770      	bx	lr

0800a088 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a088:	b480      	push	{r7}
 800a08a:	b083      	sub	sp, #12
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a090:	bf00      	nop
 800a092:	370c      	adds	r7, #12
 800a094:	46bd      	mov	sp, r7
 800a096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09a:	4770      	bx	lr

0800a09c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a09c:	b480      	push	{r7}
 800a09e:	b083      	sub	sp, #12
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a0a4:	bf00      	nop
 800a0a6:	370c      	adds	r7, #12
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ae:	4770      	bx	lr

0800a0b0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	b083      	sub	sp, #12
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a0b8:	bf00      	nop
 800a0ba:	370c      	adds	r7, #12
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c2:	4770      	bx	lr

0800a0c4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b083      	sub	sp, #12
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a0cc:	bf00      	nop
 800a0ce:	370c      	adds	r7, #12
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d6:	4770      	bx	lr

0800a0d8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b083      	sub	sp, #12
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a0e0:	bf00      	nop
 800a0e2:	370c      	adds	r7, #12
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ea:	4770      	bx	lr

0800a0ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b082      	sub	sp, #8
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d101      	bne.n	800a0fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	e050      	b.n	800a1a0 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a104:	2b00      	cmp	r3, #0
 800a106:	d114      	bne.n	800a132 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2200      	movs	r2, #0
 800a10c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f000 fe37 	bl	800ad84 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d103      	bne.n	800a128 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	4a21      	ldr	r2, [pc, #132]	@ (800a1a8 <HAL_UART_Init+0xbc>)
 800a124:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2224      	movs	r2, #36	@ 0x24
 800a136:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	681a      	ldr	r2, [r3, #0]
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f022 0201 	bic.w	r2, r2, #1
 800a148:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d002      	beq.n	800a158 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f001 f964 	bl	800b420 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f000 fe65 	bl	800ae28 <UART_SetConfig>
 800a15e:	4603      	mov	r3, r0
 800a160:	2b01      	cmp	r3, #1
 800a162:	d101      	bne.n	800a168 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800a164:	2301      	movs	r3, #1
 800a166:	e01b      	b.n	800a1a0 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	685a      	ldr	r2, [r3, #4]
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a176:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	689a      	ldr	r2, [r3, #8]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a186:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	681a      	ldr	r2, [r3, #0]
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f042 0201 	orr.w	r2, r2, #1
 800a196:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f001 f9e3 	bl	800b564 <UART_CheckIdleState>
 800a19e:	4603      	mov	r3, r0
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3708      	adds	r7, #8
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}
 800a1a8:	080047b9 	.word	0x080047b9

0800a1ac <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b087      	sub	sp, #28
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	60f8      	str	r0, [r7, #12]
 800a1b4:	460b      	mov	r3, r1
 800a1b6:	607a      	str	r2, [r7, #4]
 800a1b8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d109      	bne.n	800a1d8 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a1ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	e09c      	b.n	800a312 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1de:	2b20      	cmp	r3, #32
 800a1e0:	d16c      	bne.n	800a2bc <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800a1e2:	7afb      	ldrb	r3, [r7, #11]
 800a1e4:	2b0c      	cmp	r3, #12
 800a1e6:	d85e      	bhi.n	800a2a6 <HAL_UART_RegisterCallback+0xfa>
 800a1e8:	a201      	add	r2, pc, #4	@ (adr r2, 800a1f0 <HAL_UART_RegisterCallback+0x44>)
 800a1ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ee:	bf00      	nop
 800a1f0:	0800a225 	.word	0x0800a225
 800a1f4:	0800a22f 	.word	0x0800a22f
 800a1f8:	0800a239 	.word	0x0800a239
 800a1fc:	0800a243 	.word	0x0800a243
 800a200:	0800a24d 	.word	0x0800a24d
 800a204:	0800a257 	.word	0x0800a257
 800a208:	0800a261 	.word	0x0800a261
 800a20c:	0800a26b 	.word	0x0800a26b
 800a210:	0800a275 	.word	0x0800a275
 800a214:	0800a27f 	.word	0x0800a27f
 800a218:	0800a289 	.word	0x0800a289
 800a21c:	0800a293 	.word	0x0800a293
 800a220:	0800a29d 	.word	0x0800a29d
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	687a      	ldr	r2, [r7, #4]
 800a228:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800a22c:	e070      	b.n	800a310 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	687a      	ldr	r2, [r7, #4]
 800a232:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800a236:	e06b      	b.n	800a310 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	687a      	ldr	r2, [r7, #4]
 800a23c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800a240:	e066      	b.n	800a310 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	687a      	ldr	r2, [r7, #4]
 800a246:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800a24a:	e061      	b.n	800a310 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	687a      	ldr	r2, [r7, #4]
 800a250:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800a254:	e05c      	b.n	800a310 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	687a      	ldr	r2, [r7, #4]
 800a25a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800a25e:	e057      	b.n	800a310 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	687a      	ldr	r2, [r7, #4]
 800a264:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800a268:	e052      	b.n	800a310 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	687a      	ldr	r2, [r7, #4]
 800a26e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800a272:	e04d      	b.n	800a310 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	687a      	ldr	r2, [r7, #4]
 800a278:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800a27c:	e048      	b.n	800a310 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	687a      	ldr	r2, [r7, #4]
 800a282:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800a286:	e043      	b.n	800a310 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	687a      	ldr	r2, [r7, #4]
 800a28c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800a290:	e03e      	b.n	800a310 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	687a      	ldr	r2, [r7, #4]
 800a296:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800a29a:	e039      	b.n	800a310 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	687a      	ldr	r2, [r7, #4]
 800a2a0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800a2a4:	e034      	b.n	800a310 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2ac:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	75fb      	strb	r3, [r7, #23]
        break;
 800a2ba:	e029      	b.n	800a310 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d11a      	bne.n	800a2fc <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800a2c6:	7afb      	ldrb	r3, [r7, #11]
 800a2c8:	2b0b      	cmp	r3, #11
 800a2ca:	d002      	beq.n	800a2d2 <HAL_UART_RegisterCallback+0x126>
 800a2cc:	2b0c      	cmp	r3, #12
 800a2ce:	d005      	beq.n	800a2dc <HAL_UART_RegisterCallback+0x130>
 800a2d0:	e009      	b.n	800a2e6 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	687a      	ldr	r2, [r7, #4]
 800a2d6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800a2da:	e019      	b.n	800a310 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	687a      	ldr	r2, [r7, #4]
 800a2e0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800a2e4:	e014      	b.n	800a310 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2ec:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	75fb      	strb	r3, [r7, #23]
        break;
 800a2fa:	e009      	b.n	800a310 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a302:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800a30c:	2301      	movs	r3, #1
 800a30e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800a310:	7dfb      	ldrb	r3, [r7, #23]
}
 800a312:	4618      	mov	r0, r3
 800a314:	371c      	adds	r7, #28
 800a316:	46bd      	mov	sp, r7
 800a318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31c:	4770      	bx	lr
 800a31e:	bf00      	nop

0800a320 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b08a      	sub	sp, #40	@ 0x28
 800a324:	af00      	add	r7, sp, #0
 800a326:	60f8      	str	r0, [r7, #12]
 800a328:	60b9      	str	r1, [r7, #8]
 800a32a:	4613      	mov	r3, r2
 800a32c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a334:	2b20      	cmp	r3, #32
 800a336:	d137      	bne.n	800a3a8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d002      	beq.n	800a344 <HAL_UART_Receive_IT+0x24>
 800a33e:	88fb      	ldrh	r3, [r7, #6]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d101      	bne.n	800a348 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a344:	2301      	movs	r3, #1
 800a346:	e030      	b.n	800a3aa <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	2200      	movs	r2, #0
 800a34c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	4a18      	ldr	r2, [pc, #96]	@ (800a3b4 <HAL_UART_Receive_IT+0x94>)
 800a354:	4293      	cmp	r3, r2
 800a356:	d01f      	beq.n	800a398 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	685b      	ldr	r3, [r3, #4]
 800a35e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a362:	2b00      	cmp	r3, #0
 800a364:	d018      	beq.n	800a398 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	e853 3f00 	ldrex	r3, [r3]
 800a372:	613b      	str	r3, [r7, #16]
   return(result);
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a37a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	461a      	mov	r2, r3
 800a382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a384:	623b      	str	r3, [r7, #32]
 800a386:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a388:	69f9      	ldr	r1, [r7, #28]
 800a38a:	6a3a      	ldr	r2, [r7, #32]
 800a38c:	e841 2300 	strex	r3, r2, [r1]
 800a390:	61bb      	str	r3, [r7, #24]
   return(result);
 800a392:	69bb      	ldr	r3, [r7, #24]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d1e6      	bne.n	800a366 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a398:	88fb      	ldrh	r3, [r7, #6]
 800a39a:	461a      	mov	r2, r3
 800a39c:	68b9      	ldr	r1, [r7, #8]
 800a39e:	68f8      	ldr	r0, [r7, #12]
 800a3a0:	f001 f9f8 	bl	800b794 <UART_Start_Receive_IT>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	e000      	b.n	800a3aa <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a3a8:	2302      	movs	r3, #2
  }
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3728      	adds	r7, #40	@ 0x28
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}
 800a3b2:	bf00      	nop
 800a3b4:	40008000 	.word	0x40008000

0800a3b8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b08a      	sub	sp, #40	@ 0x28
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	60f8      	str	r0, [r7, #12]
 800a3c0:	60b9      	str	r1, [r7, #8]
 800a3c2:	4613      	mov	r3, r2
 800a3c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a3cc:	2b20      	cmp	r3, #32
 800a3ce:	d167      	bne.n	800a4a0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d002      	beq.n	800a3dc <HAL_UART_Transmit_DMA+0x24>
 800a3d6:	88fb      	ldrh	r3, [r7, #6]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d101      	bne.n	800a3e0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800a3dc:	2301      	movs	r3, #1
 800a3de:	e060      	b.n	800a4a2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	68ba      	ldr	r2, [r7, #8]
 800a3e4:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	88fa      	ldrh	r2, [r7, #6]
 800a3ea:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	88fa      	ldrh	r2, [r7, #6]
 800a3f2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	2221      	movs	r2, #33	@ 0x21
 800a402:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d028      	beq.n	800a460 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a412:	4a26      	ldr	r2, [pc, #152]	@ (800a4ac <HAL_UART_Transmit_DMA+0xf4>)
 800a414:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a41a:	4a25      	ldr	r2, [pc, #148]	@ (800a4b0 <HAL_UART_Transmit_DMA+0xf8>)
 800a41c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a422:	4a24      	ldr	r2, [pc, #144]	@ (800a4b4 <HAL_UART_Transmit_DMA+0xfc>)
 800a424:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a42a:	2200      	movs	r2, #0
 800a42c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a436:	4619      	mov	r1, r3
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	3328      	adds	r3, #40	@ 0x28
 800a43e:	461a      	mov	r2, r3
 800a440:	88fb      	ldrh	r3, [r7, #6]
 800a442:	f7fb ff55 	bl	80062f0 <HAL_DMA_Start_IT>
 800a446:	4603      	mov	r3, r0
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d009      	beq.n	800a460 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	2210      	movs	r2, #16
 800a450:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	2220      	movs	r2, #32
 800a458:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800a45c:	2301      	movs	r3, #1
 800a45e:	e020      	b.n	800a4a2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	2240      	movs	r2, #64	@ 0x40
 800a466:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	3308      	adds	r3, #8
 800a46e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a470:	697b      	ldr	r3, [r7, #20]
 800a472:	e853 3f00 	ldrex	r3, [r3]
 800a476:	613b      	str	r3, [r7, #16]
   return(result);
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a47e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	3308      	adds	r3, #8
 800a486:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a488:	623a      	str	r2, [r7, #32]
 800a48a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a48c:	69f9      	ldr	r1, [r7, #28]
 800a48e:	6a3a      	ldr	r2, [r7, #32]
 800a490:	e841 2300 	strex	r3, r2, [r1]
 800a494:	61bb      	str	r3, [r7, #24]
   return(result);
 800a496:	69bb      	ldr	r3, [r7, #24]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d1e5      	bne.n	800a468 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800a49c:	2300      	movs	r3, #0
 800a49e:	e000      	b.n	800a4a2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800a4a0:	2302      	movs	r3, #2
  }
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3728      	adds	r7, #40	@ 0x28
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}
 800a4aa:	bf00      	nop
 800a4ac:	0800bb27 	.word	0x0800bb27
 800a4b0:	0800bbc5 	.word	0x0800bbc5
 800a4b4:	0800bbe5 	.word	0x0800bbe5

0800a4b8 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b09a      	sub	sp, #104	@ 0x68
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a4c8:	e853 3f00 	ldrex	r3, [r3]
 800a4cc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a4ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a4d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a4d4:	667b      	str	r3, [r7, #100]	@ 0x64
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	461a      	mov	r2, r3
 800a4dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a4de:	657b      	str	r3, [r7, #84]	@ 0x54
 800a4e0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4e2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a4e4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a4e6:	e841 2300 	strex	r3, r2, [r1]
 800a4ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a4ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d1e6      	bne.n	800a4c0 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	3308      	adds	r3, #8
 800a4f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4fc:	e853 3f00 	ldrex	r3, [r3]
 800a500:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a504:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a508:	f023 0301 	bic.w	r3, r3, #1
 800a50c:	663b      	str	r3, [r7, #96]	@ 0x60
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	3308      	adds	r3, #8
 800a514:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a516:	643a      	str	r2, [r7, #64]	@ 0x40
 800a518:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a51a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a51c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a51e:	e841 2300 	strex	r3, r2, [r1]
 800a522:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a526:	2b00      	cmp	r3, #0
 800a528:	d1e3      	bne.n	800a4f2 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a52e:	2b01      	cmp	r3, #1
 800a530:	d118      	bne.n	800a564 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a538:	6a3b      	ldr	r3, [r7, #32]
 800a53a:	e853 3f00 	ldrex	r3, [r3]
 800a53e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a540:	69fb      	ldr	r3, [r7, #28]
 800a542:	f023 0310 	bic.w	r3, r3, #16
 800a546:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	461a      	mov	r2, r3
 800a54e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a550:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a552:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a554:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a556:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a558:	e841 2300 	strex	r3, r2, [r1]
 800a55c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a55e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a560:	2b00      	cmp	r3, #0
 800a562:	d1e6      	bne.n	800a532 <HAL_UART_AbortReceive+0x7a>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	689b      	ldr	r3, [r3, #8]
 800a56a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a56e:	2b40      	cmp	r3, #64	@ 0x40
 800a570:	d13b      	bne.n	800a5ea <HAL_UART_AbortReceive+0x132>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	3308      	adds	r3, #8
 800a578:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	e853 3f00 	ldrex	r3, [r3]
 800a580:	60bb      	str	r3, [r7, #8]
   return(result);
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a588:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	3308      	adds	r3, #8
 800a590:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a592:	61ba      	str	r2, [r7, #24]
 800a594:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a596:	6979      	ldr	r1, [r7, #20]
 800a598:	69ba      	ldr	r2, [r7, #24]
 800a59a:	e841 2300 	strex	r3, r2, [r1]
 800a59e:	613b      	str	r3, [r7, #16]
   return(result);
 800a5a0:	693b      	ldr	r3, [r7, #16]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d1e5      	bne.n	800a572 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d01c      	beq.n	800a5ea <HAL_UART_AbortReceive+0x132>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f7fb ff10 	bl	80063e6 <HAL_DMA_Abort>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d00e      	beq.n	800a5ea <HAL_UART_AbortReceive+0x132>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f7fc f876 	bl	80066c4 <HAL_DMA_GetError>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	2b20      	cmp	r3, #32
 800a5dc:	d105      	bne.n	800a5ea <HAL_UART_AbortReceive+0x132>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2210      	movs	r2, #16
 800a5e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800a5e6:	2303      	movs	r3, #3
 800a5e8:	e017      	b.n	800a61a <HAL_UART_AbortReceive+0x162>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	220f      	movs	r2, #15
 800a5f8:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	699a      	ldr	r2, [r3, #24]
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f042 0208 	orr.w	r2, r2, #8
 800a608:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2220      	movs	r2, #32
 800a60e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2200      	movs	r2, #0
 800a616:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 800a618:	2300      	movs	r3, #0
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3768      	adds	r7, #104	@ 0x68
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}
	...

0800a624 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b0ba      	sub	sp, #232	@ 0xe8
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	69db      	ldr	r3, [r3, #28]
 800a632:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	689b      	ldr	r3, [r3, #8]
 800a646:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a64a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a64e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a652:	4013      	ands	r3, r2
 800a654:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a658:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d11b      	bne.n	800a698 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a660:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a664:	f003 0320 	and.w	r3, r3, #32
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d015      	beq.n	800a698 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a66c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a670:	f003 0320 	and.w	r3, r3, #32
 800a674:	2b00      	cmp	r3, #0
 800a676:	d105      	bne.n	800a684 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a678:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a67c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a680:	2b00      	cmp	r3, #0
 800a682:	d009      	beq.n	800a698 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a688:	2b00      	cmp	r3, #0
 800a68a:	f000 8312 	beq.w	800acb2 <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	4798      	blx	r3
      }
      return;
 800a696:	e30c      	b.n	800acb2 <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a698:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	f000 8129 	beq.w	800a8f4 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a6a2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a6a6:	4b90      	ldr	r3, [pc, #576]	@ (800a8e8 <HAL_UART_IRQHandler+0x2c4>)
 800a6a8:	4013      	ands	r3, r2
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d106      	bne.n	800a6bc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a6ae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a6b2:	4b8e      	ldr	r3, [pc, #568]	@ (800a8ec <HAL_UART_IRQHandler+0x2c8>)
 800a6b4:	4013      	ands	r3, r2
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	f000 811c 	beq.w	800a8f4 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a6bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6c0:	f003 0301 	and.w	r3, r3, #1
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d011      	beq.n	800a6ec <HAL_UART_IRQHandler+0xc8>
 800a6c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a6cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d00b      	beq.n	800a6ec <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	2201      	movs	r2, #1
 800a6da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a6e2:	f043 0201 	orr.w	r2, r3, #1
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a6ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6f0:	f003 0302 	and.w	r3, r3, #2
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d011      	beq.n	800a71c <HAL_UART_IRQHandler+0xf8>
 800a6f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a6fc:	f003 0301 	and.w	r3, r3, #1
 800a700:	2b00      	cmp	r3, #0
 800a702:	d00b      	beq.n	800a71c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	2202      	movs	r2, #2
 800a70a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a712:	f043 0204 	orr.w	r2, r3, #4
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a71c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a720:	f003 0304 	and.w	r3, r3, #4
 800a724:	2b00      	cmp	r3, #0
 800a726:	d011      	beq.n	800a74c <HAL_UART_IRQHandler+0x128>
 800a728:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a72c:	f003 0301 	and.w	r3, r3, #1
 800a730:	2b00      	cmp	r3, #0
 800a732:	d00b      	beq.n	800a74c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	2204      	movs	r2, #4
 800a73a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a742:	f043 0202 	orr.w	r2, r3, #2
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a74c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a750:	f003 0308 	and.w	r3, r3, #8
 800a754:	2b00      	cmp	r3, #0
 800a756:	d017      	beq.n	800a788 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a75c:	f003 0320 	and.w	r3, r3, #32
 800a760:	2b00      	cmp	r3, #0
 800a762:	d105      	bne.n	800a770 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a764:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a768:	4b5f      	ldr	r3, [pc, #380]	@ (800a8e8 <HAL_UART_IRQHandler+0x2c4>)
 800a76a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d00b      	beq.n	800a788 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	2208      	movs	r2, #8
 800a776:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a77e:	f043 0208 	orr.w	r2, r3, #8
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a78c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a790:	2b00      	cmp	r3, #0
 800a792:	d012      	beq.n	800a7ba <HAL_UART_IRQHandler+0x196>
 800a794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a798:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d00c      	beq.n	800a7ba <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a7a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a7b0:	f043 0220 	orr.w	r2, r3, #32
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	f000 8278 	beq.w	800acb6 <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a7c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a7ca:	f003 0320 	and.w	r3, r3, #32
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d013      	beq.n	800a7fa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a7d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a7d6:	f003 0320 	and.w	r3, r3, #32
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d105      	bne.n	800a7ea <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a7de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a7e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d007      	beq.n	800a7fa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d003      	beq.n	800a7fa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a800:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	689b      	ldr	r3, [r3, #8]
 800a80a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a80e:	2b40      	cmp	r3, #64	@ 0x40
 800a810:	d005      	beq.n	800a81e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a812:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a816:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d058      	beq.n	800a8d0 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f001 f91b 	bl	800ba5a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	689b      	ldr	r3, [r3, #8]
 800a82a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a82e:	2b40      	cmp	r3, #64	@ 0x40
 800a830:	d148      	bne.n	800a8c4 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	3308      	adds	r3, #8
 800a838:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a83c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a840:	e853 3f00 	ldrex	r3, [r3]
 800a844:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a848:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a84c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a850:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	3308      	adds	r3, #8
 800a85a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a85e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a862:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a866:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a86a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a86e:	e841 2300 	strex	r3, r2, [r1]
 800a872:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a876:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d1d9      	bne.n	800a832 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a884:	2b00      	cmp	r3, #0
 800a886:	d017      	beq.n	800a8b8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a88e:	4a18      	ldr	r2, [pc, #96]	@ (800a8f0 <HAL_UART_IRQHandler+0x2cc>)
 800a890:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a898:	4618      	mov	r0, r3
 800a89a:	f7fb fdfd 	bl	8006498 <HAL_DMA_Abort_IT>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d01f      	beq.n	800a8e4 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a8aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8ac:	687a      	ldr	r2, [r7, #4]
 800a8ae:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a8b2:	4610      	mov	r0, r2
 800a8b4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8b6:	e015      	b.n	800a8e4 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8c2:	e00f      	b.n	800a8e4 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8ce:	e009      	b.n	800a8e4 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a8e2:	e1e8      	b.n	800acb6 <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8e4:	bf00      	nop
    return;
 800a8e6:	e1e6      	b.n	800acb6 <HAL_UART_IRQHandler+0x692>
 800a8e8:	10000001 	.word	0x10000001
 800a8ec:	04000120 	.word	0x04000120
 800a8f0:	0800bc69 	.word	0x0800bc69

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a8f8:	2b01      	cmp	r3, #1
 800a8fa:	f040 8176 	bne.w	800abea <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a8fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a902:	f003 0310 	and.w	r3, r3, #16
 800a906:	2b00      	cmp	r3, #0
 800a908:	f000 816f 	beq.w	800abea <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a90c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a910:	f003 0310 	and.w	r3, r3, #16
 800a914:	2b00      	cmp	r3, #0
 800a916:	f000 8168 	beq.w	800abea <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	2210      	movs	r2, #16
 800a920:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	689b      	ldr	r3, [r3, #8]
 800a928:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a92c:	2b40      	cmp	r3, #64	@ 0x40
 800a92e:	f040 80dc 	bne.w	800aaea <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	685b      	ldr	r3, [r3, #4]
 800a93c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a940:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a944:	2b00      	cmp	r3, #0
 800a946:	f000 80b1 	beq.w	800aaac <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a950:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a954:	429a      	cmp	r2, r3
 800a956:	f080 80a9 	bcs.w	800aaac <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a960:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f003 0320 	and.w	r3, r3, #32
 800a972:	2b00      	cmp	r3, #0
 800a974:	f040 8087 	bne.w	800aa86 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a980:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a984:	e853 3f00 	ldrex	r3, [r3]
 800a988:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a98c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a990:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a994:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	461a      	mov	r2, r3
 800a99e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a9a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a9a6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a9ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a9b2:	e841 2300 	strex	r3, r2, [r1]
 800a9b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a9ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d1da      	bne.n	800a978 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	3308      	adds	r3, #8
 800a9c8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a9cc:	e853 3f00 	ldrex	r3, [r3]
 800a9d0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a9d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a9d4:	f023 0301 	bic.w	r3, r3, #1
 800a9d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	3308      	adds	r3, #8
 800a9e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a9e6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a9ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a9ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a9f2:	e841 2300 	strex	r3, r2, [r1]
 800a9f6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a9f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d1e1      	bne.n	800a9c2 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	3308      	adds	r3, #8
 800aa04:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa06:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aa08:	e853 3f00 	ldrex	r3, [r3]
 800aa0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800aa0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aa10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aa14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	3308      	adds	r3, #8
 800aa1e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800aa22:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800aa24:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa26:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800aa28:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800aa2a:	e841 2300 	strex	r3, r2, [r1]
 800aa2e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800aa30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d1e3      	bne.n	800a9fe <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2220      	movs	r2, #32
 800aa3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2200      	movs	r2, #0
 800aa42:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa4c:	e853 3f00 	ldrex	r3, [r3]
 800aa50:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800aa52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aa54:	f023 0310 	bic.w	r3, r3, #16
 800aa58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	461a      	mov	r2, r3
 800aa62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aa66:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aa68:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa6a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800aa6c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800aa6e:	e841 2300 	strex	r3, r2, [r1]
 800aa72:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800aa74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d1e4      	bne.n	800aa44 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa80:	4618      	mov	r0, r3
 800aa82:	f7fb fcb0 	bl	80063e6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2202      	movs	r2, #2
 800aa8a:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800aa92:	687a      	ldr	r2, [r7, #4]
 800aa94:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800aa98:	687a      	ldr	r2, [r7, #4]
 800aa9a:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800aa9e:	b292      	uxth	r2, r2
 800aaa0:	1a8a      	subs	r2, r1, r2
 800aaa2:	b292      	uxth	r2, r2
 800aaa4:	4611      	mov	r1, r2
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800aaaa:	e106      	b.n	800acba <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800aab2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800aab6:	429a      	cmp	r2, r3
 800aab8:	f040 80ff 	bne.w	800acba <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f003 0320 	and.w	r3, r3, #32
 800aaca:	2b20      	cmp	r3, #32
 800aacc:	f040 80f5 	bne.w	800acba <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2202      	movs	r2, #2
 800aad4:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800aadc:	687a      	ldr	r2, [r7, #4]
 800aade:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800aae2:	4611      	mov	r1, r2
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	4798      	blx	r3
      return;
 800aae8:	e0e7      	b.n	800acba <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800aaf6:	b29b      	uxth	r3, r3
 800aaf8:	1ad3      	subs	r3, r2, r3
 800aafa:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ab04:	b29b      	uxth	r3, r3
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	f000 80d9 	beq.w	800acbe <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 800ab0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	f000 80d4 	beq.w	800acbe <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab1e:	e853 3f00 	ldrex	r3, [r3]
 800ab22:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ab24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab26:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ab2a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	461a      	mov	r2, r3
 800ab34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ab38:	647b      	str	r3, [r7, #68]	@ 0x44
 800ab3a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab3c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ab3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ab40:	e841 2300 	strex	r3, r2, [r1]
 800ab44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ab46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d1e4      	bne.n	800ab16 <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	3308      	adds	r3, #8
 800ab52:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab56:	e853 3f00 	ldrex	r3, [r3]
 800ab5a:	623b      	str	r3, [r7, #32]
   return(result);
 800ab5c:	6a3b      	ldr	r3, [r7, #32]
 800ab5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ab62:	f023 0301 	bic.w	r3, r3, #1
 800ab66:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	3308      	adds	r3, #8
 800ab70:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ab74:	633a      	str	r2, [r7, #48]	@ 0x30
 800ab76:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab78:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ab7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab7c:	e841 2300 	strex	r3, r2, [r1]
 800ab80:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ab82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d1e1      	bne.n	800ab4c <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2220      	movs	r2, #32
 800ab8c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2200      	movs	r2, #0
 800ab94:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2200      	movs	r2, #0
 800ab9a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aba2:	693b      	ldr	r3, [r7, #16]
 800aba4:	e853 3f00 	ldrex	r3, [r3]
 800aba8:	60fb      	str	r3, [r7, #12]
   return(result);
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	f023 0310 	bic.w	r3, r3, #16
 800abb0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	461a      	mov	r2, r3
 800abba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800abbe:	61fb      	str	r3, [r7, #28]
 800abc0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abc2:	69b9      	ldr	r1, [r7, #24]
 800abc4:	69fa      	ldr	r2, [r7, #28]
 800abc6:	e841 2300 	strex	r3, r2, [r1]
 800abca:	617b      	str	r3, [r7, #20]
   return(result);
 800abcc:	697b      	ldr	r3, [r7, #20]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d1e4      	bne.n	800ab9c <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2202      	movs	r2, #2
 800abd6:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800abde:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800abe2:	4611      	mov	r1, r2
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800abe8:	e069      	b.n	800acbe <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800abea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800abee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d010      	beq.n	800ac18 <HAL_UART_IRQHandler+0x5f4>
 800abf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800abfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d00a      	beq.n	800ac18 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800ac0a:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ac16:	e055      	b.n	800acc4 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ac18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d014      	beq.n	800ac4e <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ac24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d105      	bne.n	800ac3c <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ac30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ac34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d008      	beq.n	800ac4e <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d03e      	beq.n	800acc2 <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	4798      	blx	r3
    }
    return;
 800ac4c:	e039      	b.n	800acc2 <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ac4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d009      	beq.n	800ac6e <HAL_UART_IRQHandler+0x64a>
 800ac5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d003      	beq.n	800ac6e <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f001 f812 	bl	800bc90 <UART_EndTransmit_IT>
    return;
 800ac6c:	e02a      	b.n	800acc4 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ac6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d00b      	beq.n	800ac92 <HAL_UART_IRQHandler+0x66e>
 800ac7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac7e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d005      	beq.n	800ac92 <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ac90:	e018      	b.n	800acc4 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ac92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac96:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d012      	beq.n	800acc4 <HAL_UART_IRQHandler+0x6a0>
 800ac9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	da0e      	bge.n	800acc4 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800acb0:	e008      	b.n	800acc4 <HAL_UART_IRQHandler+0x6a0>
      return;
 800acb2:	bf00      	nop
 800acb4:	e006      	b.n	800acc4 <HAL_UART_IRQHandler+0x6a0>
    return;
 800acb6:	bf00      	nop
 800acb8:	e004      	b.n	800acc4 <HAL_UART_IRQHandler+0x6a0>
      return;
 800acba:	bf00      	nop
 800acbc:	e002      	b.n	800acc4 <HAL_UART_IRQHandler+0x6a0>
      return;
 800acbe:	bf00      	nop
 800acc0:	e000      	b.n	800acc4 <HAL_UART_IRQHandler+0x6a0>
    return;
 800acc2:	bf00      	nop
  }
}
 800acc4:	37e8      	adds	r7, #232	@ 0xe8
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}
 800acca:	bf00      	nop

0800accc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800accc:	b480      	push	{r7}
 800acce:	b083      	sub	sp, #12
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800acd4:	bf00      	nop
 800acd6:	370c      	adds	r7, #12
 800acd8:	46bd      	mov	sp, r7
 800acda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acde:	4770      	bx	lr

0800ace0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ace0:	b480      	push	{r7}
 800ace2:	b083      	sub	sp, #12
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800ace8:	bf00      	nop
 800acea:	370c      	adds	r7, #12
 800acec:	46bd      	mov	sp, r7
 800acee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf2:	4770      	bx	lr

0800acf4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b083      	sub	sp, #12
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800acfc:	bf00      	nop
 800acfe:	370c      	adds	r7, #12
 800ad00:	46bd      	mov	sp, r7
 800ad02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad06:	4770      	bx	lr

0800ad08 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b083      	sub	sp, #12
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800ad10:	bf00      	nop
 800ad12:	370c      	adds	r7, #12
 800ad14:	46bd      	mov	sp, r7
 800ad16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1a:	4770      	bx	lr

0800ad1c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b083      	sub	sp, #12
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ad24:	bf00      	nop
 800ad26:	370c      	adds	r7, #12
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2e:	4770      	bx	lr

0800ad30 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800ad30:	b480      	push	{r7}
 800ad32:	b083      	sub	sp, #12
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800ad38:	bf00      	nop
 800ad3a:	370c      	adds	r7, #12
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad42:	4770      	bx	lr

0800ad44 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800ad44:	b480      	push	{r7}
 800ad46:	b083      	sub	sp, #12
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800ad4c:	bf00      	nop
 800ad4e:	370c      	adds	r7, #12
 800ad50:	46bd      	mov	sp, r7
 800ad52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad56:	4770      	bx	lr

0800ad58 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800ad58:	b480      	push	{r7}
 800ad5a:	b083      	sub	sp, #12
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800ad60:	bf00      	nop
 800ad62:	370c      	adds	r7, #12
 800ad64:	46bd      	mov	sp, r7
 800ad66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6a:	4770      	bx	lr

0800ad6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ad6c:	b480      	push	{r7}
 800ad6e:	b083      	sub	sp, #12
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
 800ad74:	460b      	mov	r3, r1
 800ad76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ad78:	bf00      	nop
 800ad7a:	370c      	adds	r7, #12
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad82:	4770      	bx	lr

0800ad84 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800ad84:	b480      	push	{r7}
 800ad86:	b083      	sub	sp, #12
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	4a1a      	ldr	r2, [pc, #104]	@ (800adf8 <UART_InitCallbacksToDefault+0x74>)
 800ad90:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	4a19      	ldr	r2, [pc, #100]	@ (800adfc <UART_InitCallbacksToDefault+0x78>)
 800ad98:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	4a18      	ldr	r2, [pc, #96]	@ (800ae00 <UART_InitCallbacksToDefault+0x7c>)
 800ada0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	4a17      	ldr	r2, [pc, #92]	@ (800ae04 <UART_InitCallbacksToDefault+0x80>)
 800ada8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	4a16      	ldr	r2, [pc, #88]	@ (800ae08 <UART_InitCallbacksToDefault+0x84>)
 800adb0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	4a15      	ldr	r2, [pc, #84]	@ (800ae0c <UART_InitCallbacksToDefault+0x88>)
 800adb8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	4a14      	ldr	r2, [pc, #80]	@ (800ae10 <UART_InitCallbacksToDefault+0x8c>)
 800adc0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	4a13      	ldr	r2, [pc, #76]	@ (800ae14 <UART_InitCallbacksToDefault+0x90>)
 800adc8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	4a12      	ldr	r2, [pc, #72]	@ (800ae18 <UART_InitCallbacksToDefault+0x94>)
 800add0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	4a11      	ldr	r2, [pc, #68]	@ (800ae1c <UART_InitCallbacksToDefault+0x98>)
 800add8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	4a10      	ldr	r2, [pc, #64]	@ (800ae20 <UART_InitCallbacksToDefault+0x9c>)
 800ade0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	4a0f      	ldr	r2, [pc, #60]	@ (800ae24 <UART_InitCallbacksToDefault+0xa0>)
 800ade8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800adec:	bf00      	nop
 800adee:	370c      	adds	r7, #12
 800adf0:	46bd      	mov	sp, r7
 800adf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf6:	4770      	bx	lr
 800adf8:	0800ace1 	.word	0x0800ace1
 800adfc:	0800accd 	.word	0x0800accd
 800ae00:	0800ad09 	.word	0x0800ad09
 800ae04:	0800acf5 	.word	0x0800acf5
 800ae08:	0800ad1d 	.word	0x0800ad1d
 800ae0c:	0800ad31 	.word	0x0800ad31
 800ae10:	0800ad45 	.word	0x0800ad45
 800ae14:	0800ad59 	.word	0x0800ad59
 800ae18:	0800c755 	.word	0x0800c755
 800ae1c:	0800c769 	.word	0x0800c769
 800ae20:	0800c77d 	.word	0x0800c77d
 800ae24:	0800ad6d 	.word	0x0800ad6d

0800ae28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ae28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ae2c:	b08c      	sub	sp, #48	@ 0x30
 800ae2e:	af00      	add	r7, sp, #0
 800ae30:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ae32:	2300      	movs	r3, #0
 800ae34:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ae38:	697b      	ldr	r3, [r7, #20]
 800ae3a:	689a      	ldr	r2, [r3, #8]
 800ae3c:	697b      	ldr	r3, [r7, #20]
 800ae3e:	691b      	ldr	r3, [r3, #16]
 800ae40:	431a      	orrs	r2, r3
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	695b      	ldr	r3, [r3, #20]
 800ae46:	431a      	orrs	r2, r3
 800ae48:	697b      	ldr	r3, [r7, #20]
 800ae4a:	69db      	ldr	r3, [r3, #28]
 800ae4c:	4313      	orrs	r3, r2
 800ae4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ae50:	697b      	ldr	r3, [r7, #20]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	681a      	ldr	r2, [r3, #0]
 800ae56:	4baa      	ldr	r3, [pc, #680]	@ (800b100 <UART_SetConfig+0x2d8>)
 800ae58:	4013      	ands	r3, r2
 800ae5a:	697a      	ldr	r2, [r7, #20]
 800ae5c:	6812      	ldr	r2, [r2, #0]
 800ae5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ae60:	430b      	orrs	r3, r1
 800ae62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ae64:	697b      	ldr	r3, [r7, #20]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	685b      	ldr	r3, [r3, #4]
 800ae6a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	68da      	ldr	r2, [r3, #12]
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	430a      	orrs	r2, r1
 800ae78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ae7a:	697b      	ldr	r3, [r7, #20]
 800ae7c:	699b      	ldr	r3, [r3, #24]
 800ae7e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ae80:	697b      	ldr	r3, [r7, #20]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	4a9f      	ldr	r2, [pc, #636]	@ (800b104 <UART_SetConfig+0x2dc>)
 800ae86:	4293      	cmp	r3, r2
 800ae88:	d004      	beq.n	800ae94 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	6a1b      	ldr	r3, [r3, #32]
 800ae8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae90:	4313      	orrs	r3, r2
 800ae92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ae94:	697b      	ldr	r3, [r7, #20]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	689b      	ldr	r3, [r3, #8]
 800ae9a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800ae9e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800aea2:	697a      	ldr	r2, [r7, #20]
 800aea4:	6812      	ldr	r2, [r2, #0]
 800aea6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aea8:	430b      	orrs	r3, r1
 800aeaa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800aeac:	697b      	ldr	r3, [r7, #20]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aeb2:	f023 010f 	bic.w	r1, r3, #15
 800aeb6:	697b      	ldr	r3, [r7, #20]
 800aeb8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	430a      	orrs	r2, r1
 800aec0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	4a90      	ldr	r2, [pc, #576]	@ (800b108 <UART_SetConfig+0x2e0>)
 800aec8:	4293      	cmp	r3, r2
 800aeca:	d125      	bne.n	800af18 <UART_SetConfig+0xf0>
 800aecc:	4b8f      	ldr	r3, [pc, #572]	@ (800b10c <UART_SetConfig+0x2e4>)
 800aece:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aed2:	f003 0303 	and.w	r3, r3, #3
 800aed6:	2b03      	cmp	r3, #3
 800aed8:	d81a      	bhi.n	800af10 <UART_SetConfig+0xe8>
 800aeda:	a201      	add	r2, pc, #4	@ (adr r2, 800aee0 <UART_SetConfig+0xb8>)
 800aedc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aee0:	0800aef1 	.word	0x0800aef1
 800aee4:	0800af01 	.word	0x0800af01
 800aee8:	0800aef9 	.word	0x0800aef9
 800aeec:	0800af09 	.word	0x0800af09
 800aef0:	2301      	movs	r3, #1
 800aef2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aef6:	e116      	b.n	800b126 <UART_SetConfig+0x2fe>
 800aef8:	2302      	movs	r3, #2
 800aefa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aefe:	e112      	b.n	800b126 <UART_SetConfig+0x2fe>
 800af00:	2304      	movs	r3, #4
 800af02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af06:	e10e      	b.n	800b126 <UART_SetConfig+0x2fe>
 800af08:	2308      	movs	r3, #8
 800af0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af0e:	e10a      	b.n	800b126 <UART_SetConfig+0x2fe>
 800af10:	2310      	movs	r3, #16
 800af12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af16:	e106      	b.n	800b126 <UART_SetConfig+0x2fe>
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	4a7c      	ldr	r2, [pc, #496]	@ (800b110 <UART_SetConfig+0x2e8>)
 800af1e:	4293      	cmp	r3, r2
 800af20:	d138      	bne.n	800af94 <UART_SetConfig+0x16c>
 800af22:	4b7a      	ldr	r3, [pc, #488]	@ (800b10c <UART_SetConfig+0x2e4>)
 800af24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af28:	f003 030c 	and.w	r3, r3, #12
 800af2c:	2b0c      	cmp	r3, #12
 800af2e:	d82d      	bhi.n	800af8c <UART_SetConfig+0x164>
 800af30:	a201      	add	r2, pc, #4	@ (adr r2, 800af38 <UART_SetConfig+0x110>)
 800af32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af36:	bf00      	nop
 800af38:	0800af6d 	.word	0x0800af6d
 800af3c:	0800af8d 	.word	0x0800af8d
 800af40:	0800af8d 	.word	0x0800af8d
 800af44:	0800af8d 	.word	0x0800af8d
 800af48:	0800af7d 	.word	0x0800af7d
 800af4c:	0800af8d 	.word	0x0800af8d
 800af50:	0800af8d 	.word	0x0800af8d
 800af54:	0800af8d 	.word	0x0800af8d
 800af58:	0800af75 	.word	0x0800af75
 800af5c:	0800af8d 	.word	0x0800af8d
 800af60:	0800af8d 	.word	0x0800af8d
 800af64:	0800af8d 	.word	0x0800af8d
 800af68:	0800af85 	.word	0x0800af85
 800af6c:	2300      	movs	r3, #0
 800af6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af72:	e0d8      	b.n	800b126 <UART_SetConfig+0x2fe>
 800af74:	2302      	movs	r3, #2
 800af76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af7a:	e0d4      	b.n	800b126 <UART_SetConfig+0x2fe>
 800af7c:	2304      	movs	r3, #4
 800af7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af82:	e0d0      	b.n	800b126 <UART_SetConfig+0x2fe>
 800af84:	2308      	movs	r3, #8
 800af86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af8a:	e0cc      	b.n	800b126 <UART_SetConfig+0x2fe>
 800af8c:	2310      	movs	r3, #16
 800af8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af92:	e0c8      	b.n	800b126 <UART_SetConfig+0x2fe>
 800af94:	697b      	ldr	r3, [r7, #20]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	4a5e      	ldr	r2, [pc, #376]	@ (800b114 <UART_SetConfig+0x2ec>)
 800af9a:	4293      	cmp	r3, r2
 800af9c:	d125      	bne.n	800afea <UART_SetConfig+0x1c2>
 800af9e:	4b5b      	ldr	r3, [pc, #364]	@ (800b10c <UART_SetConfig+0x2e4>)
 800afa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800afa4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800afa8:	2b30      	cmp	r3, #48	@ 0x30
 800afaa:	d016      	beq.n	800afda <UART_SetConfig+0x1b2>
 800afac:	2b30      	cmp	r3, #48	@ 0x30
 800afae:	d818      	bhi.n	800afe2 <UART_SetConfig+0x1ba>
 800afb0:	2b20      	cmp	r3, #32
 800afb2:	d00a      	beq.n	800afca <UART_SetConfig+0x1a2>
 800afb4:	2b20      	cmp	r3, #32
 800afb6:	d814      	bhi.n	800afe2 <UART_SetConfig+0x1ba>
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d002      	beq.n	800afc2 <UART_SetConfig+0x19a>
 800afbc:	2b10      	cmp	r3, #16
 800afbe:	d008      	beq.n	800afd2 <UART_SetConfig+0x1aa>
 800afc0:	e00f      	b.n	800afe2 <UART_SetConfig+0x1ba>
 800afc2:	2300      	movs	r3, #0
 800afc4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afc8:	e0ad      	b.n	800b126 <UART_SetConfig+0x2fe>
 800afca:	2302      	movs	r3, #2
 800afcc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afd0:	e0a9      	b.n	800b126 <UART_SetConfig+0x2fe>
 800afd2:	2304      	movs	r3, #4
 800afd4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afd8:	e0a5      	b.n	800b126 <UART_SetConfig+0x2fe>
 800afda:	2308      	movs	r3, #8
 800afdc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afe0:	e0a1      	b.n	800b126 <UART_SetConfig+0x2fe>
 800afe2:	2310      	movs	r3, #16
 800afe4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afe8:	e09d      	b.n	800b126 <UART_SetConfig+0x2fe>
 800afea:	697b      	ldr	r3, [r7, #20]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	4a4a      	ldr	r2, [pc, #296]	@ (800b118 <UART_SetConfig+0x2f0>)
 800aff0:	4293      	cmp	r3, r2
 800aff2:	d125      	bne.n	800b040 <UART_SetConfig+0x218>
 800aff4:	4b45      	ldr	r3, [pc, #276]	@ (800b10c <UART_SetConfig+0x2e4>)
 800aff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800affa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800affe:	2bc0      	cmp	r3, #192	@ 0xc0
 800b000:	d016      	beq.n	800b030 <UART_SetConfig+0x208>
 800b002:	2bc0      	cmp	r3, #192	@ 0xc0
 800b004:	d818      	bhi.n	800b038 <UART_SetConfig+0x210>
 800b006:	2b80      	cmp	r3, #128	@ 0x80
 800b008:	d00a      	beq.n	800b020 <UART_SetConfig+0x1f8>
 800b00a:	2b80      	cmp	r3, #128	@ 0x80
 800b00c:	d814      	bhi.n	800b038 <UART_SetConfig+0x210>
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d002      	beq.n	800b018 <UART_SetConfig+0x1f0>
 800b012:	2b40      	cmp	r3, #64	@ 0x40
 800b014:	d008      	beq.n	800b028 <UART_SetConfig+0x200>
 800b016:	e00f      	b.n	800b038 <UART_SetConfig+0x210>
 800b018:	2300      	movs	r3, #0
 800b01a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b01e:	e082      	b.n	800b126 <UART_SetConfig+0x2fe>
 800b020:	2302      	movs	r3, #2
 800b022:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b026:	e07e      	b.n	800b126 <UART_SetConfig+0x2fe>
 800b028:	2304      	movs	r3, #4
 800b02a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b02e:	e07a      	b.n	800b126 <UART_SetConfig+0x2fe>
 800b030:	2308      	movs	r3, #8
 800b032:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b036:	e076      	b.n	800b126 <UART_SetConfig+0x2fe>
 800b038:	2310      	movs	r3, #16
 800b03a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b03e:	e072      	b.n	800b126 <UART_SetConfig+0x2fe>
 800b040:	697b      	ldr	r3, [r7, #20]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	4a35      	ldr	r2, [pc, #212]	@ (800b11c <UART_SetConfig+0x2f4>)
 800b046:	4293      	cmp	r3, r2
 800b048:	d12a      	bne.n	800b0a0 <UART_SetConfig+0x278>
 800b04a:	4b30      	ldr	r3, [pc, #192]	@ (800b10c <UART_SetConfig+0x2e4>)
 800b04c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b050:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b054:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b058:	d01a      	beq.n	800b090 <UART_SetConfig+0x268>
 800b05a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b05e:	d81b      	bhi.n	800b098 <UART_SetConfig+0x270>
 800b060:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b064:	d00c      	beq.n	800b080 <UART_SetConfig+0x258>
 800b066:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b06a:	d815      	bhi.n	800b098 <UART_SetConfig+0x270>
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d003      	beq.n	800b078 <UART_SetConfig+0x250>
 800b070:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b074:	d008      	beq.n	800b088 <UART_SetConfig+0x260>
 800b076:	e00f      	b.n	800b098 <UART_SetConfig+0x270>
 800b078:	2300      	movs	r3, #0
 800b07a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b07e:	e052      	b.n	800b126 <UART_SetConfig+0x2fe>
 800b080:	2302      	movs	r3, #2
 800b082:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b086:	e04e      	b.n	800b126 <UART_SetConfig+0x2fe>
 800b088:	2304      	movs	r3, #4
 800b08a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b08e:	e04a      	b.n	800b126 <UART_SetConfig+0x2fe>
 800b090:	2308      	movs	r3, #8
 800b092:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b096:	e046      	b.n	800b126 <UART_SetConfig+0x2fe>
 800b098:	2310      	movs	r3, #16
 800b09a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b09e:	e042      	b.n	800b126 <UART_SetConfig+0x2fe>
 800b0a0:	697b      	ldr	r3, [r7, #20]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	4a17      	ldr	r2, [pc, #92]	@ (800b104 <UART_SetConfig+0x2dc>)
 800b0a6:	4293      	cmp	r3, r2
 800b0a8:	d13a      	bne.n	800b120 <UART_SetConfig+0x2f8>
 800b0aa:	4b18      	ldr	r3, [pc, #96]	@ (800b10c <UART_SetConfig+0x2e4>)
 800b0ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b0b0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b0b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b0b8:	d01a      	beq.n	800b0f0 <UART_SetConfig+0x2c8>
 800b0ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b0be:	d81b      	bhi.n	800b0f8 <UART_SetConfig+0x2d0>
 800b0c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b0c4:	d00c      	beq.n	800b0e0 <UART_SetConfig+0x2b8>
 800b0c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b0ca:	d815      	bhi.n	800b0f8 <UART_SetConfig+0x2d0>
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d003      	beq.n	800b0d8 <UART_SetConfig+0x2b0>
 800b0d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b0d4:	d008      	beq.n	800b0e8 <UART_SetConfig+0x2c0>
 800b0d6:	e00f      	b.n	800b0f8 <UART_SetConfig+0x2d0>
 800b0d8:	2300      	movs	r3, #0
 800b0da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0de:	e022      	b.n	800b126 <UART_SetConfig+0x2fe>
 800b0e0:	2302      	movs	r3, #2
 800b0e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0e6:	e01e      	b.n	800b126 <UART_SetConfig+0x2fe>
 800b0e8:	2304      	movs	r3, #4
 800b0ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0ee:	e01a      	b.n	800b126 <UART_SetConfig+0x2fe>
 800b0f0:	2308      	movs	r3, #8
 800b0f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0f6:	e016      	b.n	800b126 <UART_SetConfig+0x2fe>
 800b0f8:	2310      	movs	r3, #16
 800b0fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0fe:	e012      	b.n	800b126 <UART_SetConfig+0x2fe>
 800b100:	cfff69f3 	.word	0xcfff69f3
 800b104:	40008000 	.word	0x40008000
 800b108:	40013800 	.word	0x40013800
 800b10c:	40021000 	.word	0x40021000
 800b110:	40004400 	.word	0x40004400
 800b114:	40004800 	.word	0x40004800
 800b118:	40004c00 	.word	0x40004c00
 800b11c:	40005000 	.word	0x40005000
 800b120:	2310      	movs	r3, #16
 800b122:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b126:	697b      	ldr	r3, [r7, #20]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	4aae      	ldr	r2, [pc, #696]	@ (800b3e4 <UART_SetConfig+0x5bc>)
 800b12c:	4293      	cmp	r3, r2
 800b12e:	f040 8097 	bne.w	800b260 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b132:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b136:	2b08      	cmp	r3, #8
 800b138:	d823      	bhi.n	800b182 <UART_SetConfig+0x35a>
 800b13a:	a201      	add	r2, pc, #4	@ (adr r2, 800b140 <UART_SetConfig+0x318>)
 800b13c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b140:	0800b165 	.word	0x0800b165
 800b144:	0800b183 	.word	0x0800b183
 800b148:	0800b16d 	.word	0x0800b16d
 800b14c:	0800b183 	.word	0x0800b183
 800b150:	0800b173 	.word	0x0800b173
 800b154:	0800b183 	.word	0x0800b183
 800b158:	0800b183 	.word	0x0800b183
 800b15c:	0800b183 	.word	0x0800b183
 800b160:	0800b17b 	.word	0x0800b17b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b164:	f7fc fa7c 	bl	8007660 <HAL_RCC_GetPCLK1Freq>
 800b168:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b16a:	e010      	b.n	800b18e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b16c:	4b9e      	ldr	r3, [pc, #632]	@ (800b3e8 <UART_SetConfig+0x5c0>)
 800b16e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b170:	e00d      	b.n	800b18e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b172:	f7fc fa07 	bl	8007584 <HAL_RCC_GetSysClockFreq>
 800b176:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b178:	e009      	b.n	800b18e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b17a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b17e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b180:	e005      	b.n	800b18e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800b182:	2300      	movs	r3, #0
 800b184:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b186:	2301      	movs	r3, #1
 800b188:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b18c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b18e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b190:	2b00      	cmp	r3, #0
 800b192:	f000 8130 	beq.w	800b3f6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b19a:	4a94      	ldr	r2, [pc, #592]	@ (800b3ec <UART_SetConfig+0x5c4>)
 800b19c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b1a0:	461a      	mov	r2, r3
 800b1a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1a4:	fbb3 f3f2 	udiv	r3, r3, r2
 800b1a8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b1aa:	697b      	ldr	r3, [r7, #20]
 800b1ac:	685a      	ldr	r2, [r3, #4]
 800b1ae:	4613      	mov	r3, r2
 800b1b0:	005b      	lsls	r3, r3, #1
 800b1b2:	4413      	add	r3, r2
 800b1b4:	69ba      	ldr	r2, [r7, #24]
 800b1b6:	429a      	cmp	r2, r3
 800b1b8:	d305      	bcc.n	800b1c6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b1ba:	697b      	ldr	r3, [r7, #20]
 800b1bc:	685b      	ldr	r3, [r3, #4]
 800b1be:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b1c0:	69ba      	ldr	r2, [r7, #24]
 800b1c2:	429a      	cmp	r2, r3
 800b1c4:	d903      	bls.n	800b1ce <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b1cc:	e113      	b.n	800b3f6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b1ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	60bb      	str	r3, [r7, #8]
 800b1d4:	60fa      	str	r2, [r7, #12]
 800b1d6:	697b      	ldr	r3, [r7, #20]
 800b1d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1da:	4a84      	ldr	r2, [pc, #528]	@ (800b3ec <UART_SetConfig+0x5c4>)
 800b1dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b1e0:	b29b      	uxth	r3, r3
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	603b      	str	r3, [r7, #0]
 800b1e6:	607a      	str	r2, [r7, #4]
 800b1e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b1f0:	f7f5 fcb8 	bl	8000b64 <__aeabi_uldivmod>
 800b1f4:	4602      	mov	r2, r0
 800b1f6:	460b      	mov	r3, r1
 800b1f8:	4610      	mov	r0, r2
 800b1fa:	4619      	mov	r1, r3
 800b1fc:	f04f 0200 	mov.w	r2, #0
 800b200:	f04f 0300 	mov.w	r3, #0
 800b204:	020b      	lsls	r3, r1, #8
 800b206:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b20a:	0202      	lsls	r2, r0, #8
 800b20c:	6979      	ldr	r1, [r7, #20]
 800b20e:	6849      	ldr	r1, [r1, #4]
 800b210:	0849      	lsrs	r1, r1, #1
 800b212:	2000      	movs	r0, #0
 800b214:	460c      	mov	r4, r1
 800b216:	4605      	mov	r5, r0
 800b218:	eb12 0804 	adds.w	r8, r2, r4
 800b21c:	eb43 0905 	adc.w	r9, r3, r5
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	685b      	ldr	r3, [r3, #4]
 800b224:	2200      	movs	r2, #0
 800b226:	469a      	mov	sl, r3
 800b228:	4693      	mov	fp, r2
 800b22a:	4652      	mov	r2, sl
 800b22c:	465b      	mov	r3, fp
 800b22e:	4640      	mov	r0, r8
 800b230:	4649      	mov	r1, r9
 800b232:	f7f5 fc97 	bl	8000b64 <__aeabi_uldivmod>
 800b236:	4602      	mov	r2, r0
 800b238:	460b      	mov	r3, r1
 800b23a:	4613      	mov	r3, r2
 800b23c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b23e:	6a3b      	ldr	r3, [r7, #32]
 800b240:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b244:	d308      	bcc.n	800b258 <UART_SetConfig+0x430>
 800b246:	6a3b      	ldr	r3, [r7, #32]
 800b248:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b24c:	d204      	bcs.n	800b258 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	6a3a      	ldr	r2, [r7, #32]
 800b254:	60da      	str	r2, [r3, #12]
 800b256:	e0ce      	b.n	800b3f6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800b258:	2301      	movs	r3, #1
 800b25a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b25e:	e0ca      	b.n	800b3f6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b260:	697b      	ldr	r3, [r7, #20]
 800b262:	69db      	ldr	r3, [r3, #28]
 800b264:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b268:	d166      	bne.n	800b338 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800b26a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b26e:	2b08      	cmp	r3, #8
 800b270:	d827      	bhi.n	800b2c2 <UART_SetConfig+0x49a>
 800b272:	a201      	add	r2, pc, #4	@ (adr r2, 800b278 <UART_SetConfig+0x450>)
 800b274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b278:	0800b29d 	.word	0x0800b29d
 800b27c:	0800b2a5 	.word	0x0800b2a5
 800b280:	0800b2ad 	.word	0x0800b2ad
 800b284:	0800b2c3 	.word	0x0800b2c3
 800b288:	0800b2b3 	.word	0x0800b2b3
 800b28c:	0800b2c3 	.word	0x0800b2c3
 800b290:	0800b2c3 	.word	0x0800b2c3
 800b294:	0800b2c3 	.word	0x0800b2c3
 800b298:	0800b2bb 	.word	0x0800b2bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b29c:	f7fc f9e0 	bl	8007660 <HAL_RCC_GetPCLK1Freq>
 800b2a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b2a2:	e014      	b.n	800b2ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b2a4:	f7fc f9f2 	bl	800768c <HAL_RCC_GetPCLK2Freq>
 800b2a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b2aa:	e010      	b.n	800b2ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b2ac:	4b4e      	ldr	r3, [pc, #312]	@ (800b3e8 <UART_SetConfig+0x5c0>)
 800b2ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b2b0:	e00d      	b.n	800b2ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b2b2:	f7fc f967 	bl	8007584 <HAL_RCC_GetSysClockFreq>
 800b2b6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b2b8:	e009      	b.n	800b2ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b2ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b2be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b2c0:	e005      	b.n	800b2ce <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b2cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b2ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	f000 8090 	beq.w	800b3f6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b2d6:	697b      	ldr	r3, [r7, #20]
 800b2d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2da:	4a44      	ldr	r2, [pc, #272]	@ (800b3ec <UART_SetConfig+0x5c4>)
 800b2dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b2e0:	461a      	mov	r2, r3
 800b2e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800b2e8:	005a      	lsls	r2, r3, #1
 800b2ea:	697b      	ldr	r3, [r7, #20]
 800b2ec:	685b      	ldr	r3, [r3, #4]
 800b2ee:	085b      	lsrs	r3, r3, #1
 800b2f0:	441a      	add	r2, r3
 800b2f2:	697b      	ldr	r3, [r7, #20]
 800b2f4:	685b      	ldr	r3, [r3, #4]
 800b2f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2fa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b2fc:	6a3b      	ldr	r3, [r7, #32]
 800b2fe:	2b0f      	cmp	r3, #15
 800b300:	d916      	bls.n	800b330 <UART_SetConfig+0x508>
 800b302:	6a3b      	ldr	r3, [r7, #32]
 800b304:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b308:	d212      	bcs.n	800b330 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b30a:	6a3b      	ldr	r3, [r7, #32]
 800b30c:	b29b      	uxth	r3, r3
 800b30e:	f023 030f 	bic.w	r3, r3, #15
 800b312:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b314:	6a3b      	ldr	r3, [r7, #32]
 800b316:	085b      	lsrs	r3, r3, #1
 800b318:	b29b      	uxth	r3, r3
 800b31a:	f003 0307 	and.w	r3, r3, #7
 800b31e:	b29a      	uxth	r2, r3
 800b320:	8bfb      	ldrh	r3, [r7, #30]
 800b322:	4313      	orrs	r3, r2
 800b324:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b326:	697b      	ldr	r3, [r7, #20]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	8bfa      	ldrh	r2, [r7, #30]
 800b32c:	60da      	str	r2, [r3, #12]
 800b32e:	e062      	b.n	800b3f6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800b330:	2301      	movs	r3, #1
 800b332:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b336:	e05e      	b.n	800b3f6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b338:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b33c:	2b08      	cmp	r3, #8
 800b33e:	d828      	bhi.n	800b392 <UART_SetConfig+0x56a>
 800b340:	a201      	add	r2, pc, #4	@ (adr r2, 800b348 <UART_SetConfig+0x520>)
 800b342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b346:	bf00      	nop
 800b348:	0800b36d 	.word	0x0800b36d
 800b34c:	0800b375 	.word	0x0800b375
 800b350:	0800b37d 	.word	0x0800b37d
 800b354:	0800b393 	.word	0x0800b393
 800b358:	0800b383 	.word	0x0800b383
 800b35c:	0800b393 	.word	0x0800b393
 800b360:	0800b393 	.word	0x0800b393
 800b364:	0800b393 	.word	0x0800b393
 800b368:	0800b38b 	.word	0x0800b38b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b36c:	f7fc f978 	bl	8007660 <HAL_RCC_GetPCLK1Freq>
 800b370:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b372:	e014      	b.n	800b39e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b374:	f7fc f98a 	bl	800768c <HAL_RCC_GetPCLK2Freq>
 800b378:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b37a:	e010      	b.n	800b39e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b37c:	4b1a      	ldr	r3, [pc, #104]	@ (800b3e8 <UART_SetConfig+0x5c0>)
 800b37e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b380:	e00d      	b.n	800b39e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b382:	f7fc f8ff 	bl	8007584 <HAL_RCC_GetSysClockFreq>
 800b386:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b388:	e009      	b.n	800b39e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b38a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b38e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b390:	e005      	b.n	800b39e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800b392:	2300      	movs	r3, #0
 800b394:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b396:	2301      	movs	r3, #1
 800b398:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b39c:	bf00      	nop
    }

    if (pclk != 0U)
 800b39e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d028      	beq.n	800b3f6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b3a4:	697b      	ldr	r3, [r7, #20]
 800b3a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3a8:	4a10      	ldr	r2, [pc, #64]	@ (800b3ec <UART_SetConfig+0x5c4>)
 800b3aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b3ae:	461a      	mov	r2, r3
 800b3b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3b2:	fbb3 f2f2 	udiv	r2, r3, r2
 800b3b6:	697b      	ldr	r3, [r7, #20]
 800b3b8:	685b      	ldr	r3, [r3, #4]
 800b3ba:	085b      	lsrs	r3, r3, #1
 800b3bc:	441a      	add	r2, r3
 800b3be:	697b      	ldr	r3, [r7, #20]
 800b3c0:	685b      	ldr	r3, [r3, #4]
 800b3c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3c6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b3c8:	6a3b      	ldr	r3, [r7, #32]
 800b3ca:	2b0f      	cmp	r3, #15
 800b3cc:	d910      	bls.n	800b3f0 <UART_SetConfig+0x5c8>
 800b3ce:	6a3b      	ldr	r3, [r7, #32]
 800b3d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b3d4:	d20c      	bcs.n	800b3f0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b3d6:	6a3b      	ldr	r3, [r7, #32]
 800b3d8:	b29a      	uxth	r2, r3
 800b3da:	697b      	ldr	r3, [r7, #20]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	60da      	str	r2, [r3, #12]
 800b3e0:	e009      	b.n	800b3f6 <UART_SetConfig+0x5ce>
 800b3e2:	bf00      	nop
 800b3e4:	40008000 	.word	0x40008000
 800b3e8:	00f42400 	.word	0x00f42400
 800b3ec:	0800e0bc 	.word	0x0800e0bc
      }
      else
      {
        ret = HAL_ERROR;
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b3f6:	697b      	ldr	r3, [r7, #20]
 800b3f8:	2201      	movs	r2, #1
 800b3fa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b3fe:	697b      	ldr	r3, [r7, #20]
 800b400:	2201      	movs	r2, #1
 800b402:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b406:	697b      	ldr	r3, [r7, #20]
 800b408:	2200      	movs	r2, #0
 800b40a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b40c:	697b      	ldr	r3, [r7, #20]
 800b40e:	2200      	movs	r2, #0
 800b410:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b412:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800b416:	4618      	mov	r0, r3
 800b418:	3730      	adds	r7, #48	@ 0x30
 800b41a:	46bd      	mov	sp, r7
 800b41c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b420 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b420:	b480      	push	{r7}
 800b422:	b083      	sub	sp, #12
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b42c:	f003 0308 	and.w	r3, r3, #8
 800b430:	2b00      	cmp	r3, #0
 800b432:	d00a      	beq.n	800b44a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	685b      	ldr	r3, [r3, #4]
 800b43a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	430a      	orrs	r2, r1
 800b448:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b44e:	f003 0301 	and.w	r3, r3, #1
 800b452:	2b00      	cmp	r3, #0
 800b454:	d00a      	beq.n	800b46c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	685b      	ldr	r3, [r3, #4]
 800b45c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	430a      	orrs	r2, r1
 800b46a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b470:	f003 0302 	and.w	r3, r3, #2
 800b474:	2b00      	cmp	r3, #0
 800b476:	d00a      	beq.n	800b48e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	685b      	ldr	r3, [r3, #4]
 800b47e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	430a      	orrs	r2, r1
 800b48c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b492:	f003 0304 	and.w	r3, r3, #4
 800b496:	2b00      	cmp	r3, #0
 800b498:	d00a      	beq.n	800b4b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	685b      	ldr	r3, [r3, #4]
 800b4a0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	430a      	orrs	r2, r1
 800b4ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4b4:	f003 0310 	and.w	r3, r3, #16
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d00a      	beq.n	800b4d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	689b      	ldr	r3, [r3, #8]
 800b4c2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	430a      	orrs	r2, r1
 800b4d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4d6:	f003 0320 	and.w	r3, r3, #32
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d00a      	beq.n	800b4f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	689b      	ldr	r3, [r3, #8]
 800b4e4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	430a      	orrs	r2, r1
 800b4f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d01a      	beq.n	800b536 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	685b      	ldr	r3, [r3, #4]
 800b506:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	430a      	orrs	r2, r1
 800b514:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b51a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b51e:	d10a      	bne.n	800b536 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	685b      	ldr	r3, [r3, #4]
 800b526:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	430a      	orrs	r2, r1
 800b534:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b53a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d00a      	beq.n	800b558 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	685b      	ldr	r3, [r3, #4]
 800b548:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	430a      	orrs	r2, r1
 800b556:	605a      	str	r2, [r3, #4]
  }
}
 800b558:	bf00      	nop
 800b55a:	370c      	adds	r7, #12
 800b55c:	46bd      	mov	sp, r7
 800b55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b562:	4770      	bx	lr

0800b564 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b098      	sub	sp, #96	@ 0x60
 800b568:	af02      	add	r7, sp, #8
 800b56a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2200      	movs	r2, #0
 800b570:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b574:	f7f9 fa3a 	bl	80049ec <HAL_GetTick>
 800b578:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	f003 0308 	and.w	r3, r3, #8
 800b584:	2b08      	cmp	r3, #8
 800b586:	d12f      	bne.n	800b5e8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b588:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b58c:	9300      	str	r3, [sp, #0]
 800b58e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b590:	2200      	movs	r2, #0
 800b592:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b596:	6878      	ldr	r0, [r7, #4]
 800b598:	f000 f88e 	bl	800b6b8 <UART_WaitOnFlagUntilTimeout>
 800b59c:	4603      	mov	r3, r0
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d022      	beq.n	800b5e8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5aa:	e853 3f00 	ldrex	r3, [r3]
 800b5ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b5b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b5b6:	653b      	str	r3, [r7, #80]	@ 0x50
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	461a      	mov	r2, r3
 800b5be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b5c0:	647b      	str	r3, [r7, #68]	@ 0x44
 800b5c2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b5c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b5c8:	e841 2300 	strex	r3, r2, [r1]
 800b5cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b5ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d1e6      	bne.n	800b5a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2220      	movs	r2, #32
 800b5d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2200      	movs	r2, #0
 800b5e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b5e4:	2303      	movs	r3, #3
 800b5e6:	e063      	b.n	800b6b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	f003 0304 	and.w	r3, r3, #4
 800b5f2:	2b04      	cmp	r3, #4
 800b5f4:	d149      	bne.n	800b68a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b5f6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b5fa:	9300      	str	r3, [sp, #0]
 800b5fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b5fe:	2200      	movs	r2, #0
 800b600:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b604:	6878      	ldr	r0, [r7, #4]
 800b606:	f000 f857 	bl	800b6b8 <UART_WaitOnFlagUntilTimeout>
 800b60a:	4603      	mov	r3, r0
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d03c      	beq.n	800b68a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b618:	e853 3f00 	ldrex	r3, [r3]
 800b61c:	623b      	str	r3, [r7, #32]
   return(result);
 800b61e:	6a3b      	ldr	r3, [r7, #32]
 800b620:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b624:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	461a      	mov	r2, r3
 800b62c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b62e:	633b      	str	r3, [r7, #48]	@ 0x30
 800b630:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b632:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b634:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b636:	e841 2300 	strex	r3, r2, [r1]
 800b63a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b63c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d1e6      	bne.n	800b610 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	3308      	adds	r3, #8
 800b648:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b64a:	693b      	ldr	r3, [r7, #16]
 800b64c:	e853 3f00 	ldrex	r3, [r3]
 800b650:	60fb      	str	r3, [r7, #12]
   return(result);
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	f023 0301 	bic.w	r3, r3, #1
 800b658:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	3308      	adds	r3, #8
 800b660:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b662:	61fa      	str	r2, [r7, #28]
 800b664:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b666:	69b9      	ldr	r1, [r7, #24]
 800b668:	69fa      	ldr	r2, [r7, #28]
 800b66a:	e841 2300 	strex	r3, r2, [r1]
 800b66e:	617b      	str	r3, [r7, #20]
   return(result);
 800b670:	697b      	ldr	r3, [r7, #20]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d1e5      	bne.n	800b642 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2220      	movs	r2, #32
 800b67a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2200      	movs	r2, #0
 800b682:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b686:	2303      	movs	r3, #3
 800b688:	e012      	b.n	800b6b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2220      	movs	r2, #32
 800b68e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2220      	movs	r2, #32
 800b696:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2200      	movs	r2, #0
 800b69e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b6ae:	2300      	movs	r3, #0
}
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	3758      	adds	r7, #88	@ 0x58
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd80      	pop	{r7, pc}

0800b6b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b084      	sub	sp, #16
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	60f8      	str	r0, [r7, #12]
 800b6c0:	60b9      	str	r1, [r7, #8]
 800b6c2:	603b      	str	r3, [r7, #0]
 800b6c4:	4613      	mov	r3, r2
 800b6c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b6c8:	e04f      	b.n	800b76a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b6ca:	69bb      	ldr	r3, [r7, #24]
 800b6cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6d0:	d04b      	beq.n	800b76a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b6d2:	f7f9 f98b 	bl	80049ec <HAL_GetTick>
 800b6d6:	4602      	mov	r2, r0
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	1ad3      	subs	r3, r2, r3
 800b6dc:	69ba      	ldr	r2, [r7, #24]
 800b6de:	429a      	cmp	r2, r3
 800b6e0:	d302      	bcc.n	800b6e8 <UART_WaitOnFlagUntilTimeout+0x30>
 800b6e2:	69bb      	ldr	r3, [r7, #24]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d101      	bne.n	800b6ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b6e8:	2303      	movs	r3, #3
 800b6ea:	e04e      	b.n	800b78a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	f003 0304 	and.w	r3, r3, #4
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d037      	beq.n	800b76a <UART_WaitOnFlagUntilTimeout+0xb2>
 800b6fa:	68bb      	ldr	r3, [r7, #8]
 800b6fc:	2b80      	cmp	r3, #128	@ 0x80
 800b6fe:	d034      	beq.n	800b76a <UART_WaitOnFlagUntilTimeout+0xb2>
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	2b40      	cmp	r3, #64	@ 0x40
 800b704:	d031      	beq.n	800b76a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	69db      	ldr	r3, [r3, #28]
 800b70c:	f003 0308 	and.w	r3, r3, #8
 800b710:	2b08      	cmp	r3, #8
 800b712:	d110      	bne.n	800b736 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	2208      	movs	r2, #8
 800b71a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b71c:	68f8      	ldr	r0, [r7, #12]
 800b71e:	f000 f99c 	bl	800ba5a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	2208      	movs	r2, #8
 800b726:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	2200      	movs	r2, #0
 800b72e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b732:	2301      	movs	r3, #1
 800b734:	e029      	b.n	800b78a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	69db      	ldr	r3, [r3, #28]
 800b73c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b740:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b744:	d111      	bne.n	800b76a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b74e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b750:	68f8      	ldr	r0, [r7, #12]
 800b752:	f000 f982 	bl	800ba5a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	2220      	movs	r2, #32
 800b75a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	2200      	movs	r2, #0
 800b762:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b766:	2303      	movs	r3, #3
 800b768:	e00f      	b.n	800b78a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	69da      	ldr	r2, [r3, #28]
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	4013      	ands	r3, r2
 800b774:	68ba      	ldr	r2, [r7, #8]
 800b776:	429a      	cmp	r2, r3
 800b778:	bf0c      	ite	eq
 800b77a:	2301      	moveq	r3, #1
 800b77c:	2300      	movne	r3, #0
 800b77e:	b2db      	uxtb	r3, r3
 800b780:	461a      	mov	r2, r3
 800b782:	79fb      	ldrb	r3, [r7, #7]
 800b784:	429a      	cmp	r2, r3
 800b786:	d0a0      	beq.n	800b6ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b788:	2300      	movs	r3, #0
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	3710      	adds	r7, #16
 800b78e:	46bd      	mov	sp, r7
 800b790:	bd80      	pop	{r7, pc}
	...

0800b794 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b794:	b480      	push	{r7}
 800b796:	b0a3      	sub	sp, #140	@ 0x8c
 800b798:	af00      	add	r7, sp, #0
 800b79a:	60f8      	str	r0, [r7, #12]
 800b79c:	60b9      	str	r1, [r7, #8]
 800b79e:	4613      	mov	r3, r2
 800b7a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	68ba      	ldr	r2, [r7, #8]
 800b7a6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	88fa      	ldrh	r2, [r7, #6]
 800b7ac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	88fa      	ldrh	r2, [r7, #6]
 800b7b4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	689b      	ldr	r3, [r3, #8]
 800b7c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b7c6:	d10e      	bne.n	800b7e6 <UART_Start_Receive_IT+0x52>
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	691b      	ldr	r3, [r3, #16]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d105      	bne.n	800b7dc <UART_Start_Receive_IT+0x48>
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800b7d6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b7da:	e02d      	b.n	800b838 <UART_Start_Receive_IT+0xa4>
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	22ff      	movs	r2, #255	@ 0xff
 800b7e0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b7e4:	e028      	b.n	800b838 <UART_Start_Receive_IT+0xa4>
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	689b      	ldr	r3, [r3, #8]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d10d      	bne.n	800b80a <UART_Start_Receive_IT+0x76>
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	691b      	ldr	r3, [r3, #16]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d104      	bne.n	800b800 <UART_Start_Receive_IT+0x6c>
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	22ff      	movs	r2, #255	@ 0xff
 800b7fa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b7fe:	e01b      	b.n	800b838 <UART_Start_Receive_IT+0xa4>
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	227f      	movs	r2, #127	@ 0x7f
 800b804:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b808:	e016      	b.n	800b838 <UART_Start_Receive_IT+0xa4>
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	689b      	ldr	r3, [r3, #8]
 800b80e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b812:	d10d      	bne.n	800b830 <UART_Start_Receive_IT+0x9c>
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	691b      	ldr	r3, [r3, #16]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d104      	bne.n	800b826 <UART_Start_Receive_IT+0x92>
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	227f      	movs	r2, #127	@ 0x7f
 800b820:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b824:	e008      	b.n	800b838 <UART_Start_Receive_IT+0xa4>
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	223f      	movs	r2, #63	@ 0x3f
 800b82a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b82e:	e003      	b.n	800b838 <UART_Start_Receive_IT+0xa4>
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	2200      	movs	r2, #0
 800b834:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	2200      	movs	r2, #0
 800b83c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	2222      	movs	r2, #34	@ 0x22
 800b844:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	3308      	adds	r3, #8
 800b84e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b850:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b852:	e853 3f00 	ldrex	r3, [r3]
 800b856:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800b858:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b85a:	f043 0301 	orr.w	r3, r3, #1
 800b85e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	3308      	adds	r3, #8
 800b868:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800b86c:	673a      	str	r2, [r7, #112]	@ 0x70
 800b86e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b870:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800b872:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800b874:	e841 2300 	strex	r3, r2, [r1]
 800b878:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800b87a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d1e3      	bne.n	800b848 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b884:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b888:	d14f      	bne.n	800b92a <UART_Start_Receive_IT+0x196>
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b890:	88fa      	ldrh	r2, [r7, #6]
 800b892:	429a      	cmp	r2, r3
 800b894:	d349      	bcc.n	800b92a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	689b      	ldr	r3, [r3, #8]
 800b89a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b89e:	d107      	bne.n	800b8b0 <UART_Start_Receive_IT+0x11c>
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	691b      	ldr	r3, [r3, #16]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d103      	bne.n	800b8b0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	4a47      	ldr	r2, [pc, #284]	@ (800b9c8 <UART_Start_Receive_IT+0x234>)
 800b8ac:	675a      	str	r2, [r3, #116]	@ 0x74
 800b8ae:	e002      	b.n	800b8b6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	4a46      	ldr	r2, [pc, #280]	@ (800b9cc <UART_Start_Receive_IT+0x238>)
 800b8b4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	691b      	ldr	r3, [r3, #16]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d01a      	beq.n	800b8f4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b8c6:	e853 3f00 	ldrex	r3, [r3]
 800b8ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b8cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b8ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b8d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	461a      	mov	r2, r3
 800b8dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b8e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b8e2:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8e4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b8e6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b8e8:	e841 2300 	strex	r3, r2, [r1]
 800b8ec:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800b8ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d1e4      	bne.n	800b8be <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	3308      	adds	r3, #8
 800b8fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8fe:	e853 3f00 	ldrex	r3, [r3]
 800b902:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b906:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b90a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	3308      	adds	r3, #8
 800b912:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800b914:	64ba      	str	r2, [r7, #72]	@ 0x48
 800b916:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b918:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b91a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b91c:	e841 2300 	strex	r3, r2, [r1]
 800b920:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b922:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b924:	2b00      	cmp	r3, #0
 800b926:	d1e5      	bne.n	800b8f4 <UART_Start_Receive_IT+0x160>
 800b928:	e046      	b.n	800b9b8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	689b      	ldr	r3, [r3, #8]
 800b92e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b932:	d107      	bne.n	800b944 <UART_Start_Receive_IT+0x1b0>
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	691b      	ldr	r3, [r3, #16]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d103      	bne.n	800b944 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	4a24      	ldr	r2, [pc, #144]	@ (800b9d0 <UART_Start_Receive_IT+0x23c>)
 800b940:	675a      	str	r2, [r3, #116]	@ 0x74
 800b942:	e002      	b.n	800b94a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	4a23      	ldr	r2, [pc, #140]	@ (800b9d4 <UART_Start_Receive_IT+0x240>)
 800b948:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	691b      	ldr	r3, [r3, #16]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d019      	beq.n	800b986 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b95a:	e853 3f00 	ldrex	r3, [r3]
 800b95e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b962:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800b966:	677b      	str	r3, [r7, #116]	@ 0x74
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	461a      	mov	r2, r3
 800b96e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b970:	637b      	str	r3, [r7, #52]	@ 0x34
 800b972:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b974:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b976:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b978:	e841 2300 	strex	r3, r2, [r1]
 800b97c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b97e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b980:	2b00      	cmp	r3, #0
 800b982:	d1e6      	bne.n	800b952 <UART_Start_Receive_IT+0x1be>
 800b984:	e018      	b.n	800b9b8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b98c:	697b      	ldr	r3, [r7, #20]
 800b98e:	e853 3f00 	ldrex	r3, [r3]
 800b992:	613b      	str	r3, [r7, #16]
   return(result);
 800b994:	693b      	ldr	r3, [r7, #16]
 800b996:	f043 0320 	orr.w	r3, r3, #32
 800b99a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	461a      	mov	r2, r3
 800b9a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b9a4:	623b      	str	r3, [r7, #32]
 800b9a6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9a8:	69f9      	ldr	r1, [r7, #28]
 800b9aa:	6a3a      	ldr	r2, [r7, #32]
 800b9ac:	e841 2300 	strex	r3, r2, [r1]
 800b9b0:	61bb      	str	r3, [r7, #24]
   return(result);
 800b9b2:	69bb      	ldr	r3, [r7, #24]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d1e6      	bne.n	800b986 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800b9b8:	2300      	movs	r3, #0
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	378c      	adds	r7, #140	@ 0x8c
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c4:	4770      	bx	lr
 800b9c6:	bf00      	nop
 800b9c8:	0800c3dd 	.word	0x0800c3dd
 800b9cc:	0800c06d 	.word	0x0800c06d
 800b9d0:	0800bead 	.word	0x0800bead
 800b9d4:	0800bced 	.word	0x0800bced

0800b9d8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b9d8:	b480      	push	{r7}
 800b9da:	b08f      	sub	sp, #60	@ 0x3c
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9e6:	6a3b      	ldr	r3, [r7, #32]
 800b9e8:	e853 3f00 	ldrex	r3, [r3]
 800b9ec:	61fb      	str	r3, [r7, #28]
   return(result);
 800b9ee:	69fb      	ldr	r3, [r7, #28]
 800b9f0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b9f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	461a      	mov	r2, r3
 800b9fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ba00:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ba04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba06:	e841 2300 	strex	r3, r2, [r1]
 800ba0a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ba0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d1e6      	bne.n	800b9e0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	3308      	adds	r3, #8
 800ba18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	e853 3f00 	ldrex	r3, [r3]
 800ba20:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba22:	68bb      	ldr	r3, [r7, #8]
 800ba24:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800ba28:	633b      	str	r3, [r7, #48]	@ 0x30
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	3308      	adds	r3, #8
 800ba30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba32:	61ba      	str	r2, [r7, #24]
 800ba34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba36:	6979      	ldr	r1, [r7, #20]
 800ba38:	69ba      	ldr	r2, [r7, #24]
 800ba3a:	e841 2300 	strex	r3, r2, [r1]
 800ba3e:	613b      	str	r3, [r7, #16]
   return(result);
 800ba40:	693b      	ldr	r3, [r7, #16]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d1e5      	bne.n	800ba12 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	2220      	movs	r2, #32
 800ba4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800ba4e:	bf00      	nop
 800ba50:	373c      	adds	r7, #60	@ 0x3c
 800ba52:	46bd      	mov	sp, r7
 800ba54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba58:	4770      	bx	lr

0800ba5a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ba5a:	b480      	push	{r7}
 800ba5c:	b095      	sub	sp, #84	@ 0x54
 800ba5e:	af00      	add	r7, sp, #0
 800ba60:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba6a:	e853 3f00 	ldrex	r3, [r3]
 800ba6e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ba70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba72:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ba76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	461a      	mov	r2, r3
 800ba7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba80:	643b      	str	r3, [r7, #64]	@ 0x40
 800ba82:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba84:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ba86:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ba88:	e841 2300 	strex	r3, r2, [r1]
 800ba8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ba8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d1e6      	bne.n	800ba62 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	3308      	adds	r3, #8
 800ba9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba9c:	6a3b      	ldr	r3, [r7, #32]
 800ba9e:	e853 3f00 	ldrex	r3, [r3]
 800baa2:	61fb      	str	r3, [r7, #28]
   return(result);
 800baa4:	69fb      	ldr	r3, [r7, #28]
 800baa6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800baaa:	f023 0301 	bic.w	r3, r3, #1
 800baae:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	3308      	adds	r3, #8
 800bab6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bab8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800baba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800babc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800babe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bac0:	e841 2300 	strex	r3, r2, [r1]
 800bac4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d1e3      	bne.n	800ba94 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bad0:	2b01      	cmp	r3, #1
 800bad2:	d118      	bne.n	800bb06 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	e853 3f00 	ldrex	r3, [r3]
 800bae0:	60bb      	str	r3, [r7, #8]
   return(result);
 800bae2:	68bb      	ldr	r3, [r7, #8]
 800bae4:	f023 0310 	bic.w	r3, r3, #16
 800bae8:	647b      	str	r3, [r7, #68]	@ 0x44
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	461a      	mov	r2, r3
 800baf0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800baf2:	61bb      	str	r3, [r7, #24]
 800baf4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baf6:	6979      	ldr	r1, [r7, #20]
 800baf8:	69ba      	ldr	r2, [r7, #24]
 800bafa:	e841 2300 	strex	r3, r2, [r1]
 800bafe:	613b      	str	r3, [r7, #16]
   return(result);
 800bb00:	693b      	ldr	r3, [r7, #16]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d1e6      	bne.n	800bad4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	2220      	movs	r2, #32
 800bb0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	2200      	movs	r2, #0
 800bb12:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2200      	movs	r2, #0
 800bb18:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800bb1a:	bf00      	nop
 800bb1c:	3754      	adds	r7, #84	@ 0x54
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb24:	4770      	bx	lr

0800bb26 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bb26:	b580      	push	{r7, lr}
 800bb28:	b090      	sub	sp, #64	@ 0x40
 800bb2a:	af00      	add	r7, sp, #0
 800bb2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb32:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	f003 0320 	and.w	r3, r3, #32
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d137      	bne.n	800bbb2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800bb42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb44:	2200      	movs	r2, #0
 800bb46:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bb4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	3308      	adds	r3, #8
 800bb50:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb54:	e853 3f00 	ldrex	r3, [r3]
 800bb58:	623b      	str	r3, [r7, #32]
   return(result);
 800bb5a:	6a3b      	ldr	r3, [r7, #32]
 800bb5c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bb60:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bb62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	3308      	adds	r3, #8
 800bb68:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bb6a:	633a      	str	r2, [r7, #48]	@ 0x30
 800bb6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bb70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb72:	e841 2300 	strex	r3, r2, [r1]
 800bb76:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bb78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d1e5      	bne.n	800bb4a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bb7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb84:	693b      	ldr	r3, [r7, #16]
 800bb86:	e853 3f00 	ldrex	r3, [r3]
 800bb8a:	60fb      	str	r3, [r7, #12]
   return(result);
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb92:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	461a      	mov	r2, r3
 800bb9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb9c:	61fb      	str	r3, [r7, #28]
 800bb9e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bba0:	69b9      	ldr	r1, [r7, #24]
 800bba2:	69fa      	ldr	r2, [r7, #28]
 800bba4:	e841 2300 	strex	r3, r2, [r1]
 800bba8:	617b      	str	r3, [r7, #20]
   return(result);
 800bbaa:	697b      	ldr	r3, [r7, #20]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d1e6      	bne.n	800bb7e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bbb0:	e004      	b.n	800bbbc <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800bbb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bbb8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800bbba:	4798      	blx	r3
}
 800bbbc:	bf00      	nop
 800bbbe:	3740      	adds	r7, #64	@ 0x40
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bd80      	pop	{r7, pc}

0800bbc4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b084      	sub	sp, #16
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbd0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bbd8:	68f8      	ldr	r0, [r7, #12]
 800bbda:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bbdc:	bf00      	nop
 800bbde:	3710      	adds	r7, #16
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	bd80      	pop	{r7, pc}

0800bbe4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b086      	sub	sp, #24
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbf0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bbf2:	697b      	ldr	r3, [r7, #20]
 800bbf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bbf8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bbfa:	697b      	ldr	r3, [r7, #20]
 800bbfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bc00:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bc02:	697b      	ldr	r3, [r7, #20]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	689b      	ldr	r3, [r3, #8]
 800bc08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc0c:	2b80      	cmp	r3, #128	@ 0x80
 800bc0e:	d109      	bne.n	800bc24 <UART_DMAError+0x40>
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	2b21      	cmp	r3, #33	@ 0x21
 800bc14:	d106      	bne.n	800bc24 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	2200      	movs	r2, #0
 800bc1a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800bc1e:	6978      	ldr	r0, [r7, #20]
 800bc20:	f7ff feda 	bl	800b9d8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bc24:	697b      	ldr	r3, [r7, #20]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	689b      	ldr	r3, [r3, #8]
 800bc2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc2e:	2b40      	cmp	r3, #64	@ 0x40
 800bc30:	d109      	bne.n	800bc46 <UART_DMAError+0x62>
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	2b22      	cmp	r3, #34	@ 0x22
 800bc36:	d106      	bne.n	800bc46 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bc38:	697b      	ldr	r3, [r7, #20]
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800bc40:	6978      	ldr	r0, [r7, #20]
 800bc42:	f7ff ff0a 	bl	800ba5a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bc46:	697b      	ldr	r3, [r7, #20]
 800bc48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc4c:	f043 0210 	orr.w	r2, r3, #16
 800bc50:	697b      	ldr	r3, [r7, #20]
 800bc52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800bc56:	697b      	ldr	r3, [r7, #20]
 800bc58:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800bc5c:	6978      	ldr	r0, [r7, #20]
 800bc5e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc60:	bf00      	nop
 800bc62:	3718      	adds	r7, #24
 800bc64:	46bd      	mov	sp, r7
 800bc66:	bd80      	pop	{r7, pc}

0800bc68 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b084      	sub	sp, #16
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc74:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	2200      	movs	r2, #0
 800bc7a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800bc84:	68f8      	ldr	r0, [r7, #12]
 800bc86:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc88:	bf00      	nop
 800bc8a:	3710      	adds	r7, #16
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}

0800bc90 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b088      	sub	sp, #32
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	e853 3f00 	ldrex	r3, [r3]
 800bca4:	60bb      	str	r3, [r7, #8]
   return(result);
 800bca6:	68bb      	ldr	r3, [r7, #8]
 800bca8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bcac:	61fb      	str	r3, [r7, #28]
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	461a      	mov	r2, r3
 800bcb4:	69fb      	ldr	r3, [r7, #28]
 800bcb6:	61bb      	str	r3, [r7, #24]
 800bcb8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcba:	6979      	ldr	r1, [r7, #20]
 800bcbc:	69ba      	ldr	r2, [r7, #24]
 800bcbe:	e841 2300 	strex	r3, r2, [r1]
 800bcc2:	613b      	str	r3, [r7, #16]
   return(result);
 800bcc4:	693b      	ldr	r3, [r7, #16]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d1e6      	bne.n	800bc98 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	2220      	movs	r2, #32
 800bcce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bcde:	6878      	ldr	r0, [r7, #4]
 800bce0:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bce2:	bf00      	nop
 800bce4:	3720      	adds	r7, #32
 800bce6:	46bd      	mov	sp, r7
 800bce8:	bd80      	pop	{r7, pc}
	...

0800bcec <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b09c      	sub	sp, #112	@ 0x70
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bcfa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bd04:	2b22      	cmp	r3, #34	@ 0x22
 800bd06:	f040 80c2 	bne.w	800be8e <UART_RxISR_8BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd10:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800bd14:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800bd18:	b2d9      	uxtb	r1, r3
 800bd1a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800bd1e:	b2da      	uxtb	r2, r3
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bd24:	400a      	ands	r2, r1
 800bd26:	b2d2      	uxtb	r2, r2
 800bd28:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bd2e:	1c5a      	adds	r2, r3, #1
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bd3a:	b29b      	uxth	r3, r3
 800bd3c:	3b01      	subs	r3, #1
 800bd3e:	b29a      	uxth	r2, r3
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bd4c:	b29b      	uxth	r3, r3
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	f040 80a5 	bne.w	800be9e <UART_RxISR_8BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bd5c:	e853 3f00 	ldrex	r3, [r3]
 800bd60:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bd62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bd64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bd68:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	461a      	mov	r2, r3
 800bd70:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bd72:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bd74:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd76:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bd78:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bd7a:	e841 2300 	strex	r3, r2, [r1]
 800bd7e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bd80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d1e6      	bne.n	800bd54 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	3308      	adds	r3, #8
 800bd8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd90:	e853 3f00 	ldrex	r3, [r3]
 800bd94:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bd96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd98:	f023 0301 	bic.w	r3, r3, #1
 800bd9c:	667b      	str	r3, [r7, #100]	@ 0x64
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	3308      	adds	r3, #8
 800bda4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800bda6:	647a      	str	r2, [r7, #68]	@ 0x44
 800bda8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdaa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bdac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bdae:	e841 2300 	strex	r3, r2, [r1]
 800bdb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bdb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d1e5      	bne.n	800bd86 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	2220      	movs	r2, #32
 800bdbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	4a35      	ldr	r2, [pc, #212]	@ (800bea8 <UART_RxISR_8BIT+0x1bc>)
 800bdd4:	4293      	cmp	r3, r2
 800bdd6:	d01f      	beq.n	800be18 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	685b      	ldr	r3, [r3, #4]
 800bdde:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d018      	beq.n	800be18 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdee:	e853 3f00 	ldrex	r3, [r3]
 800bdf2:	623b      	str	r3, [r7, #32]
   return(result);
 800bdf4:	6a3b      	ldr	r3, [r7, #32]
 800bdf6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bdfa:	663b      	str	r3, [r7, #96]	@ 0x60
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	461a      	mov	r2, r3
 800be02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800be04:	633b      	str	r3, [r7, #48]	@ 0x30
 800be06:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be08:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800be0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800be0c:	e841 2300 	strex	r3, r2, [r1]
 800be10:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800be12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be14:	2b00      	cmp	r3, #0
 800be16:	d1e6      	bne.n	800bde6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800be1c:	2b01      	cmp	r3, #1
 800be1e:	d130      	bne.n	800be82 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2200      	movs	r2, #0
 800be24:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be2c:	693b      	ldr	r3, [r7, #16]
 800be2e:	e853 3f00 	ldrex	r3, [r3]
 800be32:	60fb      	str	r3, [r7, #12]
   return(result);
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	f023 0310 	bic.w	r3, r3, #16
 800be3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	461a      	mov	r2, r3
 800be42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800be44:	61fb      	str	r3, [r7, #28]
 800be46:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be48:	69b9      	ldr	r1, [r7, #24]
 800be4a:	69fa      	ldr	r2, [r7, #28]
 800be4c:	e841 2300 	strex	r3, r2, [r1]
 800be50:	617b      	str	r3, [r7, #20]
   return(result);
 800be52:	697b      	ldr	r3, [r7, #20]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d1e6      	bne.n	800be26 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	69db      	ldr	r3, [r3, #28]
 800be5e:	f003 0310 	and.w	r3, r3, #16
 800be62:	2b10      	cmp	r3, #16
 800be64:	d103      	bne.n	800be6e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	2210      	movs	r2, #16
 800be6c:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800be74:	687a      	ldr	r2, [r7, #4]
 800be76:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800be7a:	4611      	mov	r1, r2
 800be7c:	6878      	ldr	r0, [r7, #4]
 800be7e:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800be80:	e00d      	b.n	800be9e <UART_RxISR_8BIT+0x1b2>
        huart->RxCpltCallback(huart);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800be88:	6878      	ldr	r0, [r7, #4]
 800be8a:	4798      	blx	r3
}
 800be8c:	e007      	b.n	800be9e <UART_RxISR_8BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	699a      	ldr	r2, [r3, #24]
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	f042 0208 	orr.w	r2, r2, #8
 800be9c:	619a      	str	r2, [r3, #24]
}
 800be9e:	bf00      	nop
 800bea0:	3770      	adds	r7, #112	@ 0x70
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bd80      	pop	{r7, pc}
 800bea6:	bf00      	nop
 800bea8:	40008000 	.word	0x40008000

0800beac <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b09c      	sub	sp, #112	@ 0x70
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800beba:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bec4:	2b22      	cmp	r3, #34	@ 0x22
 800bec6:	f040 80c2 	bne.w	800c04e <UART_RxISR_16BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bed0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bed8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800beda:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800bede:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800bee2:	4013      	ands	r3, r2
 800bee4:	b29a      	uxth	r2, r3
 800bee6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bee8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800beee:	1c9a      	adds	r2, r3, #2
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800befa:	b29b      	uxth	r3, r3
 800befc:	3b01      	subs	r3, #1
 800befe:	b29a      	uxth	r2, r3
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bf0c:	b29b      	uxth	r3, r3
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	f040 80a5 	bne.w	800c05e <UART_RxISR_16BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bf1c:	e853 3f00 	ldrex	r3, [r3]
 800bf20:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800bf22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bf24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bf28:	667b      	str	r3, [r7, #100]	@ 0x64
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	461a      	mov	r2, r3
 800bf30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bf32:	657b      	str	r3, [r7, #84]	@ 0x54
 800bf34:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf36:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800bf38:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bf3a:	e841 2300 	strex	r3, r2, [r1]
 800bf3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800bf40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d1e6      	bne.n	800bf14 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	3308      	adds	r3, #8
 800bf4c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf50:	e853 3f00 	ldrex	r3, [r3]
 800bf54:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bf56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf58:	f023 0301 	bic.w	r3, r3, #1
 800bf5c:	663b      	str	r3, [r7, #96]	@ 0x60
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	3308      	adds	r3, #8
 800bf64:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bf66:	643a      	str	r2, [r7, #64]	@ 0x40
 800bf68:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf6a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bf6c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bf6e:	e841 2300 	strex	r3, r2, [r1]
 800bf72:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bf74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d1e5      	bne.n	800bf46 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	2220      	movs	r2, #32
 800bf7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	2200      	movs	r2, #0
 800bf86:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	4a35      	ldr	r2, [pc, #212]	@ (800c068 <UART_RxISR_16BIT+0x1bc>)
 800bf94:	4293      	cmp	r3, r2
 800bf96:	d01f      	beq.n	800bfd8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	685b      	ldr	r3, [r3, #4]
 800bf9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d018      	beq.n	800bfd8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfac:	6a3b      	ldr	r3, [r7, #32]
 800bfae:	e853 3f00 	ldrex	r3, [r3]
 800bfb2:	61fb      	str	r3, [r7, #28]
   return(result);
 800bfb4:	69fb      	ldr	r3, [r7, #28]
 800bfb6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bfba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	461a      	mov	r2, r3
 800bfc2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bfc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bfc6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfc8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bfca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bfcc:	e841 2300 	strex	r3, r2, [r1]
 800bfd0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bfd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d1e6      	bne.n	800bfa6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bfdc:	2b01      	cmp	r3, #1
 800bfde:	d130      	bne.n	800c042 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	e853 3f00 	ldrex	r3, [r3]
 800bff2:	60bb      	str	r3, [r7, #8]
   return(result);
 800bff4:	68bb      	ldr	r3, [r7, #8]
 800bff6:	f023 0310 	bic.w	r3, r3, #16
 800bffa:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	461a      	mov	r2, r3
 800c002:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c004:	61bb      	str	r3, [r7, #24]
 800c006:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c008:	6979      	ldr	r1, [r7, #20]
 800c00a:	69ba      	ldr	r2, [r7, #24]
 800c00c:	e841 2300 	strex	r3, r2, [r1]
 800c010:	613b      	str	r3, [r7, #16]
   return(result);
 800c012:	693b      	ldr	r3, [r7, #16]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d1e6      	bne.n	800bfe6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	69db      	ldr	r3, [r3, #28]
 800c01e:	f003 0310 	and.w	r3, r3, #16
 800c022:	2b10      	cmp	r3, #16
 800c024:	d103      	bne.n	800c02e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	2210      	movs	r2, #16
 800c02c:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c034:	687a      	ldr	r2, [r7, #4]
 800c036:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800c03a:	4611      	mov	r1, r2
 800c03c:	6878      	ldr	r0, [r7, #4]
 800c03e:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c040:	e00d      	b.n	800c05e <UART_RxISR_16BIT+0x1b2>
        huart->RxCpltCallback(huart);
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	4798      	blx	r3
}
 800c04c:	e007      	b.n	800c05e <UART_RxISR_16BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	699a      	ldr	r2, [r3, #24]
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	f042 0208 	orr.w	r2, r2, #8
 800c05c:	619a      	str	r2, [r3, #24]
}
 800c05e:	bf00      	nop
 800c060:	3770      	adds	r7, #112	@ 0x70
 800c062:	46bd      	mov	sp, r7
 800c064:	bd80      	pop	{r7, pc}
 800c066:	bf00      	nop
 800c068:	40008000 	.word	0x40008000

0800c06c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b0ac      	sub	sp, #176	@ 0xb0
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c07a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	69db      	ldr	r3, [r3, #28]
 800c084:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	689b      	ldr	r3, [r3, #8]
 800c098:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c0a2:	2b22      	cmp	r3, #34	@ 0x22
 800c0a4:	f040 8189 	bne.w	800c3ba <UART_RxISR_8BIT_FIFOEN+0x34e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c0ae:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c0b2:	e12c      	b.n	800c30e <UART_RxISR_8BIT_FIFOEN+0x2a2>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0ba:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c0be:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800c0c2:	b2d9      	uxtb	r1, r3
 800c0c4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800c0c8:	b2da      	uxtb	r2, r3
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c0ce:	400a      	ands	r2, r1
 800c0d0:	b2d2      	uxtb	r2, r2
 800c0d2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c0d8:	1c5a      	adds	r2, r3, #1
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c0e4:	b29b      	uxth	r3, r3
 800c0e6:	3b01      	subs	r3, #1
 800c0e8:	b29a      	uxth	r2, r3
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	69db      	ldr	r3, [r3, #28]
 800c0f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c0fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c0fe:	f003 0307 	and.w	r3, r3, #7
 800c102:	2b00      	cmp	r3, #0
 800c104:	d055      	beq.n	800c1b2 <UART_RxISR_8BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c106:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c10a:	f003 0301 	and.w	r3, r3, #1
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d011      	beq.n	800c136 <UART_RxISR_8BIT_FIFOEN+0xca>
 800c112:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c116:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d00b      	beq.n	800c136 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	2201      	movs	r2, #1
 800c124:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c12c:	f043 0201 	orr.w	r2, r3, #1
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c136:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c13a:	f003 0302 	and.w	r3, r3, #2
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d011      	beq.n	800c166 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800c142:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c146:	f003 0301 	and.w	r3, r3, #1
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d00b      	beq.n	800c166 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	2202      	movs	r2, #2
 800c154:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c15c:	f043 0204 	orr.w	r2, r3, #4
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c166:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c16a:	f003 0304 	and.w	r3, r3, #4
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d011      	beq.n	800c196 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800c172:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c176:	f003 0301 	and.w	r3, r3, #1
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d00b      	beq.n	800c196 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	2204      	movs	r2, #4
 800c184:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c18c:	f043 0202 	orr.w	r2, r3, #2
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d008      	beq.n	800c1b2 <UART_RxISR_8BIT_FIFOEN+0x146>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c1a6:	6878      	ldr	r0, [r7, #4]
 800c1a8:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c1b8:	b29b      	uxth	r3, r3
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	f040 80a7 	bne.w	800c30e <UART_RxISR_8BIT_FIFOEN+0x2a2>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c1c8:	e853 3f00 	ldrex	r3, [r3]
 800c1cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800c1ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c1d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c1d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	461a      	mov	r2, r3
 800c1de:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c1e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c1e4:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1e6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800c1e8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800c1ea:	e841 2300 	strex	r3, r2, [r1]
 800c1ee:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800c1f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d1e4      	bne.n	800c1c0 <UART_RxISR_8BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	3308      	adds	r3, #8
 800c1fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c200:	e853 3f00 	ldrex	r3, [r3]
 800c204:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800c206:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c208:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c20c:	f023 0301 	bic.w	r3, r3, #1
 800c210:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	3308      	adds	r3, #8
 800c21a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c21e:	66ba      	str	r2, [r7, #104]	@ 0x68
 800c220:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c222:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800c224:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c226:	e841 2300 	strex	r3, r2, [r1]
 800c22a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800c22c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d1e1      	bne.n	800c1f6 <UART_RxISR_8BIT_FIFOEN+0x18a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2220      	movs	r2, #32
 800c236:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	2200      	movs	r2, #0
 800c23e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	2200      	movs	r2, #0
 800c244:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	4a62      	ldr	r2, [pc, #392]	@ (800c3d4 <UART_RxISR_8BIT_FIFOEN+0x368>)
 800c24c:	4293      	cmp	r3, r2
 800c24e:	d021      	beq.n	800c294 <UART_RxISR_8BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	685b      	ldr	r3, [r3, #4]
 800c256:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d01a      	beq.n	800c294 <UART_RxISR_8BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c264:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c266:	e853 3f00 	ldrex	r3, [r3]
 800c26a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c26c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c26e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c272:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	461a      	mov	r2, r3
 800c27c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c280:	657b      	str	r3, [r7, #84]	@ 0x54
 800c282:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c284:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c286:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c288:	e841 2300 	strex	r3, r2, [r1]
 800c28c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c28e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c290:	2b00      	cmp	r3, #0
 800c292:	d1e4      	bne.n	800c25e <UART_RxISR_8BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c298:	2b01      	cmp	r3, #1
 800c29a:	d132      	bne.n	800c302 <UART_RxISR_8BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2200      	movs	r2, #0
 800c2a0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c2aa:	e853 3f00 	ldrex	r3, [r3]
 800c2ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c2b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2b2:	f023 0310 	bic.w	r3, r3, #16
 800c2b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	461a      	mov	r2, r3
 800c2c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c2c4:	643b      	str	r3, [r7, #64]	@ 0x40
 800c2c6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c2ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c2cc:	e841 2300 	strex	r3, r2, [r1]
 800c2d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c2d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d1e4      	bne.n	800c2a2 <UART_RxISR_8BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	69db      	ldr	r3, [r3, #28]
 800c2de:	f003 0310 	and.w	r3, r3, #16
 800c2e2:	2b10      	cmp	r3, #16
 800c2e4:	d103      	bne.n	800c2ee <UART_RxISR_8BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	2210      	movs	r2, #16
 800c2ec:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c2f4:	687a      	ldr	r2, [r7, #4]
 800c2f6:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800c2fa:	4611      	mov	r1, r2
 800c2fc:	6878      	ldr	r0, [r7, #4]
 800c2fe:	4798      	blx	r3
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800c300:	e010      	b.n	800c324 <UART_RxISR_8BIT_FIFOEN+0x2b8>
          huart->RxCpltCallback(huart);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c308:	6878      	ldr	r0, [r7, #4]
 800c30a:	4798      	blx	r3
        break;
 800c30c:	e00a      	b.n	800c324 <UART_RxISR_8BIT_FIFOEN+0x2b8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c30e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800c312:	2b00      	cmp	r3, #0
 800c314:	d006      	beq.n	800c324 <UART_RxISR_8BIT_FIFOEN+0x2b8>
 800c316:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c31a:	f003 0320 	and.w	r3, r3, #32
 800c31e:	2b00      	cmp	r3, #0
 800c320:	f47f aec8 	bne.w	800c0b4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c32a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c32e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c332:	2b00      	cmp	r3, #0
 800c334:	d049      	beq.n	800c3ca <UART_RxISR_8BIT_FIFOEN+0x35e>
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c33c:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800c340:	429a      	cmp	r2, r3
 800c342:	d242      	bcs.n	800c3ca <UART_RxISR_8BIT_FIFOEN+0x35e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	3308      	adds	r3, #8
 800c34a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c34c:	6a3b      	ldr	r3, [r7, #32]
 800c34e:	e853 3f00 	ldrex	r3, [r3]
 800c352:	61fb      	str	r3, [r7, #28]
   return(result);
 800c354:	69fb      	ldr	r3, [r7, #28]
 800c356:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c35a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	3308      	adds	r3, #8
 800c364:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800c368:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c36a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c36c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c36e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c370:	e841 2300 	strex	r3, r2, [r1]
 800c374:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d1e3      	bne.n	800c344 <UART_RxISR_8BIT_FIFOEN+0x2d8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	4a16      	ldr	r2, [pc, #88]	@ (800c3d8 <UART_RxISR_8BIT_FIFOEN+0x36c>)
 800c380:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	e853 3f00 	ldrex	r3, [r3]
 800c38e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c390:	68bb      	ldr	r3, [r7, #8]
 800c392:	f043 0320 	orr.w	r3, r3, #32
 800c396:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	461a      	mov	r2, r3
 800c3a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c3a4:	61bb      	str	r3, [r7, #24]
 800c3a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3a8:	6979      	ldr	r1, [r7, #20]
 800c3aa:	69ba      	ldr	r2, [r7, #24]
 800c3ac:	e841 2300 	strex	r3, r2, [r1]
 800c3b0:	613b      	str	r3, [r7, #16]
   return(result);
 800c3b2:	693b      	ldr	r3, [r7, #16]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d1e4      	bne.n	800c382 <UART_RxISR_8BIT_FIFOEN+0x316>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c3b8:	e007      	b.n	800c3ca <UART_RxISR_8BIT_FIFOEN+0x35e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	699a      	ldr	r2, [r3, #24]
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	f042 0208 	orr.w	r2, r2, #8
 800c3c8:	619a      	str	r2, [r3, #24]
}
 800c3ca:	bf00      	nop
 800c3cc:	37b0      	adds	r7, #176	@ 0xb0
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bd80      	pop	{r7, pc}
 800c3d2:	bf00      	nop
 800c3d4:	40008000 	.word	0x40008000
 800c3d8:	0800bced 	.word	0x0800bced

0800c3dc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b0ae      	sub	sp, #184	@ 0xb8
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c3ea:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	69db      	ldr	r3, [r3, #28]
 800c3f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	689b      	ldr	r3, [r3, #8]
 800c408:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c412:	2b22      	cmp	r3, #34	@ 0x22
 800c414:	f040 818d 	bne.w	800c732 <UART_RxISR_16BIT_FIFOEN+0x356>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c41e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c422:	e130      	b.n	800c686 <UART_RxISR_16BIT_FIFOEN+0x2aa>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c42a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c432:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800c436:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800c43a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800c43e:	4013      	ands	r3, r2
 800c440:	b29a      	uxth	r2, r3
 800c442:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c446:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c44c:	1c9a      	adds	r2, r3, #2
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c458:	b29b      	uxth	r3, r3
 800c45a:	3b01      	subs	r3, #1
 800c45c:	b29a      	uxth	r2, r3
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	69db      	ldr	r3, [r3, #28]
 800c46a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c46e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c472:	f003 0307 	and.w	r3, r3, #7
 800c476:	2b00      	cmp	r3, #0
 800c478:	d055      	beq.n	800c526 <UART_RxISR_16BIT_FIFOEN+0x14a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c47a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c47e:	f003 0301 	and.w	r3, r3, #1
 800c482:	2b00      	cmp	r3, #0
 800c484:	d011      	beq.n	800c4aa <UART_RxISR_16BIT_FIFOEN+0xce>
 800c486:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c48a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d00b      	beq.n	800c4aa <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	2201      	movs	r2, #1
 800c498:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c4a0:	f043 0201 	orr.w	r2, r3, #1
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c4aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c4ae:	f003 0302 	and.w	r3, r3, #2
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d011      	beq.n	800c4da <UART_RxISR_16BIT_FIFOEN+0xfe>
 800c4b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c4ba:	f003 0301 	and.w	r3, r3, #1
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d00b      	beq.n	800c4da <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	2202      	movs	r2, #2
 800c4c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c4d0:	f043 0204 	orr.w	r2, r3, #4
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c4da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c4de:	f003 0304 	and.w	r3, r3, #4
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d011      	beq.n	800c50a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800c4e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c4ea:	f003 0301 	and.w	r3, r3, #1
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d00b      	beq.n	800c50a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	2204      	movs	r2, #4
 800c4f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c500:	f043 0202 	orr.w	r2, r3, #2
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c510:	2b00      	cmp	r3, #0
 800c512:	d008      	beq.n	800c526 <UART_RxISR_16BIT_FIFOEN+0x14a>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	2200      	movs	r2, #0
 800c522:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c52c:	b29b      	uxth	r3, r3
 800c52e:	2b00      	cmp	r3, #0
 800c530:	f040 80a9 	bne.w	800c686 <UART_RxISR_16BIT_FIFOEN+0x2aa>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c53a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c53c:	e853 3f00 	ldrex	r3, [r3]
 800c540:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c542:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c544:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c548:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	461a      	mov	r2, r3
 800c552:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c556:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c55a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c55c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c55e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c562:	e841 2300 	strex	r3, r2, [r1]
 800c566:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c568:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d1e2      	bne.n	800c534 <UART_RxISR_16BIT_FIFOEN+0x158>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	3308      	adds	r3, #8
 800c574:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c576:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c578:	e853 3f00 	ldrex	r3, [r3]
 800c57c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c57e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c580:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c584:	f023 0301 	bic.w	r3, r3, #1
 800c588:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	3308      	adds	r3, #8
 800c592:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800c596:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c598:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c59a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c59c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c59e:	e841 2300 	strex	r3, r2, [r1]
 800c5a2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c5a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d1e1      	bne.n	800c56e <UART_RxISR_16BIT_FIFOEN+0x192>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	2220      	movs	r2, #32
 800c5ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	4a62      	ldr	r2, [pc, #392]	@ (800c74c <UART_RxISR_16BIT_FIFOEN+0x370>)
 800c5c4:	4293      	cmp	r3, r2
 800c5c6:	d021      	beq.n	800c60c <UART_RxISR_16BIT_FIFOEN+0x230>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	685b      	ldr	r3, [r3, #4]
 800c5ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d01a      	beq.n	800c60c <UART_RxISR_16BIT_FIFOEN+0x230>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c5de:	e853 3f00 	ldrex	r3, [r3]
 800c5e2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c5e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c5e6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c5ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	461a      	mov	r2, r3
 800c5f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c5f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c5fa:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5fc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c5fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c600:	e841 2300 	strex	r3, r2, [r1]
 800c604:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c606:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d1e4      	bne.n	800c5d6 <UART_RxISR_16BIT_FIFOEN+0x1fa>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c610:	2b01      	cmp	r3, #1
 800c612:	d132      	bne.n	800c67a <UART_RxISR_16BIT_FIFOEN+0x29e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	2200      	movs	r2, #0
 800c618:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c622:	e853 3f00 	ldrex	r3, [r3]
 800c626:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c628:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c62a:	f023 0310 	bic.w	r3, r3, #16
 800c62e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	461a      	mov	r2, r3
 800c638:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c63c:	647b      	str	r3, [r7, #68]	@ 0x44
 800c63e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c640:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c642:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c644:	e841 2300 	strex	r3, r2, [r1]
 800c648:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c64a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d1e4      	bne.n	800c61a <UART_RxISR_16BIT_FIFOEN+0x23e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	69db      	ldr	r3, [r3, #28]
 800c656:	f003 0310 	and.w	r3, r3, #16
 800c65a:	2b10      	cmp	r3, #16
 800c65c:	d103      	bne.n	800c666 <UART_RxISR_16BIT_FIFOEN+0x28a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	2210      	movs	r2, #16
 800c664:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c66c:	687a      	ldr	r2, [r7, #4]
 800c66e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800c672:	4611      	mov	r1, r2
 800c674:	6878      	ldr	r0, [r7, #4]
 800c676:	4798      	blx	r3
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800c678:	e010      	b.n	800c69c <UART_RxISR_16BIT_FIFOEN+0x2c0>
          huart->RxCpltCallback(huart);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c680:	6878      	ldr	r0, [r7, #4]
 800c682:	4798      	blx	r3
        break;
 800c684:	e00a      	b.n	800c69c <UART_RxISR_16BIT_FIFOEN+0x2c0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c686:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d006      	beq.n	800c69c <UART_RxISR_16BIT_FIFOEN+0x2c0>
 800c68e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c692:	f003 0320 	and.w	r3, r3, #32
 800c696:	2b00      	cmp	r3, #0
 800c698:	f47f aec4 	bne.w	800c424 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c6a2:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c6a6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d049      	beq.n	800c742 <UART_RxISR_16BIT_FIFOEN+0x366>
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c6b4:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800c6b8:	429a      	cmp	r2, r3
 800c6ba:	d242      	bcs.n	800c742 <UART_RxISR_16BIT_FIFOEN+0x366>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	3308      	adds	r3, #8
 800c6c2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6c6:	e853 3f00 	ldrex	r3, [r3]
 800c6ca:	623b      	str	r3, [r7, #32]
   return(result);
 800c6cc:	6a3b      	ldr	r3, [r7, #32]
 800c6ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c6d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	3308      	adds	r3, #8
 800c6dc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800c6e0:	633a      	str	r2, [r7, #48]	@ 0x30
 800c6e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c6e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c6e8:	e841 2300 	strex	r3, r2, [r1]
 800c6ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c6ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d1e3      	bne.n	800c6bc <UART_RxISR_16BIT_FIFOEN+0x2e0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	4a16      	ldr	r2, [pc, #88]	@ (800c750 <UART_RxISR_16BIT_FIFOEN+0x374>)
 800c6f8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c700:	693b      	ldr	r3, [r7, #16]
 800c702:	e853 3f00 	ldrex	r3, [r3]
 800c706:	60fb      	str	r3, [r7, #12]
   return(result);
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	f043 0320 	orr.w	r3, r3, #32
 800c70e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	461a      	mov	r2, r3
 800c718:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c71c:	61fb      	str	r3, [r7, #28]
 800c71e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c720:	69b9      	ldr	r1, [r7, #24]
 800c722:	69fa      	ldr	r2, [r7, #28]
 800c724:	e841 2300 	strex	r3, r2, [r1]
 800c728:	617b      	str	r3, [r7, #20]
   return(result);
 800c72a:	697b      	ldr	r3, [r7, #20]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d1e4      	bne.n	800c6fa <UART_RxISR_16BIT_FIFOEN+0x31e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c730:	e007      	b.n	800c742 <UART_RxISR_16BIT_FIFOEN+0x366>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	699a      	ldr	r2, [r3, #24]
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	f042 0208 	orr.w	r2, r2, #8
 800c740:	619a      	str	r2, [r3, #24]
}
 800c742:	bf00      	nop
 800c744:	37b8      	adds	r7, #184	@ 0xb8
 800c746:	46bd      	mov	sp, r7
 800c748:	bd80      	pop	{r7, pc}
 800c74a:	bf00      	nop
 800c74c:	40008000 	.word	0x40008000
 800c750:	0800bead 	.word	0x0800bead

0800c754 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c754:	b480      	push	{r7}
 800c756:	b083      	sub	sp, #12
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c75c:	bf00      	nop
 800c75e:	370c      	adds	r7, #12
 800c760:	46bd      	mov	sp, r7
 800c762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c766:	4770      	bx	lr

0800c768 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c768:	b480      	push	{r7}
 800c76a:	b083      	sub	sp, #12
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c770:	bf00      	nop
 800c772:	370c      	adds	r7, #12
 800c774:	46bd      	mov	sp, r7
 800c776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77a:	4770      	bx	lr

0800c77c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c77c:	b480      	push	{r7}
 800c77e:	b083      	sub	sp, #12
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c784:	bf00      	nop
 800c786:	370c      	adds	r7, #12
 800c788:	46bd      	mov	sp, r7
 800c78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78e:	4770      	bx	lr

0800c790 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c790:	b480      	push	{r7}
 800c792:	b085      	sub	sp, #20
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c79e:	2b01      	cmp	r3, #1
 800c7a0:	d101      	bne.n	800c7a6 <HAL_UARTEx_DisableFifoMode+0x16>
 800c7a2:	2302      	movs	r3, #2
 800c7a4:	e027      	b.n	800c7f6 <HAL_UARTEx_DisableFifoMode+0x66>
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2201      	movs	r2, #1
 800c7aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2224      	movs	r2, #36	@ 0x24
 800c7b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	681a      	ldr	r2, [r3, #0]
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	f022 0201 	bic.w	r2, r2, #1
 800c7cc:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c7d4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	2200      	movs	r2, #0
 800c7da:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	68fa      	ldr	r2, [r7, #12]
 800c7e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2220      	movs	r2, #32
 800c7e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c7f4:	2300      	movs	r3, #0
}
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	3714      	adds	r7, #20
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c800:	4770      	bx	lr

0800c802 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c802:	b580      	push	{r7, lr}
 800c804:	b084      	sub	sp, #16
 800c806:	af00      	add	r7, sp, #0
 800c808:	6078      	str	r0, [r7, #4]
 800c80a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c812:	2b01      	cmp	r3, #1
 800c814:	d101      	bne.n	800c81a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c816:	2302      	movs	r3, #2
 800c818:	e02d      	b.n	800c876 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	2201      	movs	r2, #1
 800c81e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2224      	movs	r2, #36	@ 0x24
 800c826:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	681a      	ldr	r2, [r3, #0]
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	f022 0201 	bic.w	r2, r2, #1
 800c840:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	689b      	ldr	r3, [r3, #8]
 800c848:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	683a      	ldr	r2, [r7, #0]
 800c852:	430a      	orrs	r2, r1
 800c854:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c856:	6878      	ldr	r0, [r7, #4]
 800c858:	f000 f850 	bl	800c8fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	68fa      	ldr	r2, [r7, #12]
 800c862:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2220      	movs	r2, #32
 800c868:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2200      	movs	r2, #0
 800c870:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c874:	2300      	movs	r3, #0
}
 800c876:	4618      	mov	r0, r3
 800c878:	3710      	adds	r7, #16
 800c87a:	46bd      	mov	sp, r7
 800c87c:	bd80      	pop	{r7, pc}

0800c87e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c87e:	b580      	push	{r7, lr}
 800c880:	b084      	sub	sp, #16
 800c882:	af00      	add	r7, sp, #0
 800c884:	6078      	str	r0, [r7, #4]
 800c886:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c88e:	2b01      	cmp	r3, #1
 800c890:	d101      	bne.n	800c896 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c892:	2302      	movs	r3, #2
 800c894:	e02d      	b.n	800c8f2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2201      	movs	r2, #1
 800c89a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2224      	movs	r2, #36	@ 0x24
 800c8a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	681a      	ldr	r2, [r3, #0]
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	f022 0201 	bic.w	r2, r2, #1
 800c8bc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	689b      	ldr	r3, [r3, #8]
 800c8c4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	683a      	ldr	r2, [r7, #0]
 800c8ce:	430a      	orrs	r2, r1
 800c8d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	f000 f812 	bl	800c8fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	68fa      	ldr	r2, [r7, #12]
 800c8de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	2220      	movs	r2, #32
 800c8e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c8f0:	2300      	movs	r3, #0
}
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	3710      	adds	r7, #16
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd80      	pop	{r7, pc}
	...

0800c8fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c8fc:	b480      	push	{r7}
 800c8fe:	b085      	sub	sp, #20
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d108      	bne.n	800c91e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2201      	movs	r2, #1
 800c910:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2201      	movs	r2, #1
 800c918:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c91c:	e031      	b.n	800c982 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c91e:	2308      	movs	r3, #8
 800c920:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c922:	2308      	movs	r3, #8
 800c924:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	689b      	ldr	r3, [r3, #8]
 800c92c:	0e5b      	lsrs	r3, r3, #25
 800c92e:	b2db      	uxtb	r3, r3
 800c930:	f003 0307 	and.w	r3, r3, #7
 800c934:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	689b      	ldr	r3, [r3, #8]
 800c93c:	0f5b      	lsrs	r3, r3, #29
 800c93e:	b2db      	uxtb	r3, r3
 800c940:	f003 0307 	and.w	r3, r3, #7
 800c944:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c946:	7bbb      	ldrb	r3, [r7, #14]
 800c948:	7b3a      	ldrb	r2, [r7, #12]
 800c94a:	4911      	ldr	r1, [pc, #68]	@ (800c990 <UARTEx_SetNbDataToProcess+0x94>)
 800c94c:	5c8a      	ldrb	r2, [r1, r2]
 800c94e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c952:	7b3a      	ldrb	r2, [r7, #12]
 800c954:	490f      	ldr	r1, [pc, #60]	@ (800c994 <UARTEx_SetNbDataToProcess+0x98>)
 800c956:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c958:	fb93 f3f2 	sdiv	r3, r3, r2
 800c95c:	b29a      	uxth	r2, r3
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c964:	7bfb      	ldrb	r3, [r7, #15]
 800c966:	7b7a      	ldrb	r2, [r7, #13]
 800c968:	4909      	ldr	r1, [pc, #36]	@ (800c990 <UARTEx_SetNbDataToProcess+0x94>)
 800c96a:	5c8a      	ldrb	r2, [r1, r2]
 800c96c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c970:	7b7a      	ldrb	r2, [r7, #13]
 800c972:	4908      	ldr	r1, [pc, #32]	@ (800c994 <UARTEx_SetNbDataToProcess+0x98>)
 800c974:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c976:	fb93 f3f2 	sdiv	r3, r3, r2
 800c97a:	b29a      	uxth	r2, r3
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c982:	bf00      	nop
 800c984:	3714      	adds	r7, #20
 800c986:	46bd      	mov	sp, r7
 800c988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98c:	4770      	bx	lr
 800c98e:	bf00      	nop
 800c990:	0800e0d4 	.word	0x0800e0d4
 800c994:	0800e0dc 	.word	0x0800e0dc

0800c998 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b082      	sub	sp, #8
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
 800c9a0:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	ed93 7a06 	vldr	s14, [r3, #24]
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	edd3 7a07 	vldr	s15, [r3, #28]
 800c9ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	edd3 7a08 	vldr	s15, [r3, #32]
 800c9b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	edd3 7a06 	vldr	s15, [r3, #24]
 800c9c8:	eeb1 7a67 	vneg.f32	s14, s15
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	edd3 7a08 	vldr	s15, [r3, #32]
 800c9d2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c9d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	6a1a      	ldr	r2, [r3, #32]
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800c9e8:	683b      	ldr	r3, [r7, #0]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d006      	beq.n	800c9fc <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	330c      	adds	r3, #12
 800c9f2:	220c      	movs	r2, #12
 800c9f4:	2100      	movs	r1, #0
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	f000 fcc4 	bl	800d384 <memset>
  }

}
 800c9fc:	bf00      	nop
 800c9fe:	3708      	adds	r7, #8
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd80      	pop	{r7, pc}

0800ca04 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800ca04:	b480      	push	{r7}
 800ca06:	b08b      	sub	sp, #44	@ 0x2c
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	60f8      	str	r0, [r7, #12]
 800ca0c:	60b9      	str	r1, [r7, #8]
 800ca0e:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	685b      	ldr	r3, [r3, #4]
 800ca14:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800ca16:	68bb      	ldr	r3, [r7, #8]
 800ca18:	685b      	ldr	r3, [r3, #4]
 800ca1a:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	685b      	ldr	r3, [r3, #4]
 800ca20:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	881b      	ldrh	r3, [r3, #0]
 800ca26:	461a      	mov	r2, r3
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	885b      	ldrh	r3, [r3, #2]
 800ca2c:	fb02 f303 	mul.w	r3, r2, r3
 800ca30:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800ca32:	697b      	ldr	r3, [r7, #20]
 800ca34:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800ca36:	e013      	b.n	800ca60 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 800ca38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca3a:	1d1a      	adds	r2, r3, #4
 800ca3c:	627a      	str	r2, [r7, #36]	@ 0x24
 800ca3e:	ed93 7a00 	vldr	s14, [r3]
 800ca42:	6a3b      	ldr	r3, [r7, #32]
 800ca44:	1d1a      	adds	r2, r3, #4
 800ca46:	623a      	str	r2, [r7, #32]
 800ca48:	edd3 7a00 	vldr	s15, [r3]
 800ca4c:	69fb      	ldr	r3, [r7, #28]
 800ca4e:	1d1a      	adds	r2, r3, #4
 800ca50:	61fa      	str	r2, [r7, #28]
 800ca52:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ca56:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800ca5a:	69bb      	ldr	r3, [r7, #24]
 800ca5c:	3b01      	subs	r3, #1
 800ca5e:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800ca60:	69bb      	ldr	r3, [r7, #24]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d1e8      	bne.n	800ca38 <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800ca66:	2300      	movs	r3, #0
 800ca68:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800ca6a:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800ca6e:	4618      	mov	r0, r3
 800ca70:	372c      	adds	r7, #44	@ 0x2c
 800ca72:	46bd      	mov	sp, r7
 800ca74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca78:	4770      	bx	lr

0800ca7a <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800ca7a:	b480      	push	{r7}
 800ca7c:	b085      	sub	sp, #20
 800ca7e:	af00      	add	r7, sp, #0
 800ca80:	60f8      	str	r0, [r7, #12]
 800ca82:	607b      	str	r3, [r7, #4]
 800ca84:	460b      	mov	r3, r1
 800ca86:	817b      	strh	r3, [r7, #10]
 800ca88:	4613      	mov	r3, r2
 800ca8a:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	897a      	ldrh	r2, [r7, #10]
 800ca90:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	893a      	ldrh	r2, [r7, #8]
 800ca96:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	687a      	ldr	r2, [r7, #4]
 800ca9c:	605a      	str	r2, [r3, #4]
}
 800ca9e:	bf00      	nop
 800caa0:	3714      	adds	r7, #20
 800caa2:	46bd      	mov	sp, r7
 800caa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa8:	4770      	bx	lr

0800caaa <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800caaa:	b480      	push	{r7}
 800caac:	b0bb      	sub	sp, #236	@ 0xec
 800caae:	af00      	add	r7, sp, #0
 800cab0:	6078      	str	r0, [r7, #4]
 800cab2:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	685b      	ldr	r3, [r3, #4]
 800cab8:	667b      	str	r3, [r7, #100]	@ 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	685b      	ldr	r3, [r3, #4]
 800cabe:	663b      	str	r3, [r7, #96]	@ 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	881b      	ldrh	r3, [r3, #0]
 800cac4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	885b      	ldrh	r3, [r3, #2]
 800caca:	65bb      	str	r3, [r7, #88]	@ 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 800cacc:	f04f 0300 	mov.w	r3, #0
 800cad0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800cad4:	f04f 0300 	mov.w	r3, #0
 800cad8:	657b      	str	r3, [r7, #84]	@ 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 800cada:	2300      	movs	r3, #0
 800cadc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 800cae0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cae2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 800cae6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cae8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 800caec:	e03b      	b.n	800cb66 <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 800caee:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800caf0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800caf4:	1ad3      	subs	r3, r2, r3
 800caf6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800cafa:	e00c      	b.n	800cb16 <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 800cafc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cb00:	1d1a      	adds	r2, r3, #4
 800cb02:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800cb06:	f04f 0200 	mov.w	r2, #0
 800cb0a:	601a      	str	r2, [r3, #0]
        j--;
 800cb0c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800cb10:	3b01      	subs	r3, #1
 800cb12:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800cb16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d1ee      	bne.n	800cafc <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 800cb1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cb22:	1d1a      	adds	r2, r3, #4
 800cb24:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800cb28:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800cb2c:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 800cb2e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800cb32:	3b01      	subs	r3, #1
 800cb34:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800cb38:	e00c      	b.n	800cb54 <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 800cb3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cb3e:	1d1a      	adds	r2, r3, #4
 800cb40:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800cb44:	f04f 0200 	mov.w	r2, #0
 800cb48:	601a      	str	r2, [r3, #0]
        j--;
 800cb4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800cb4e:	3b01      	subs	r3, #1
 800cb50:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800cb54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d1ee      	bne.n	800cb3a <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 800cb5c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800cb60:	3b01      	subs	r3, #1
 800cb62:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    while (rowCnt > 0U)
 800cb66:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d1bf      	bne.n	800caee <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 800cb6e:	2300      	movs	r3, #0
 800cb70:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800cb74:	e2c7      	b.n	800d106 <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 800cb76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cb7a:	653b      	str	r3, [r7, #80]	@ 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	685a      	ldr	r2, [r3, #4]
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	885b      	ldrh	r3, [r3, #2]
 800cb84:	3301      	adds	r3, #1
 800cb86:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 800cb8a:	fb01 f303 	mul.w	r3, r1, r3
 800cb8e:	009b      	lsls	r3, r3, #2
 800cb90:	4413      	add	r3, r2
 800cb92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      pivot = *pTmp;
 800cb96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      selectedRow = column;
 800cba0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cba4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800cba8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cbac:	3301      	adds	r3, #1
 800cbae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800cbb2:	e02c      	b.n	800cc0e <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	685a      	ldr	r2, [r3, #4]
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	885b      	ldrh	r3, [r3, #2]
 800cbbc:	4619      	mov	r1, r3
 800cbbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cbc2:	fb03 f101 	mul.w	r1, r3, r1
 800cbc6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cbca:	440b      	add	r3, r1
 800cbcc:	009b      	lsls	r3, r3, #2
 800cbce:	4413      	add	r3, r2
 800cbd0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          newPivot = *pTmp;
 800cbd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	657b      	str	r3, [r7, #84]	@ 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 800cbdc:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800cbe0:	eeb0 7ae7 	vabs.f32	s14, s15
 800cbe4:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800cbe8:	eef0 7ae7 	vabs.f32	s15, s15
 800cbec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cbf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbf4:	dd06      	ble.n	800cc04 <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 800cbf6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cbfa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            pivot = newPivot;
 800cbfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800cc04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cc08:	3301      	adds	r3, #1
 800cc0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800cc0e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800cc12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cc14:	429a      	cmp	r2, r3
 800cc16:	d3cd      	bcc.n	800cbb4 <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 800cc18:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800cc1c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cc20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc24:	f000 809b 	beq.w	800cd5e <arm_mat_inverse_f32+0x2b4>
 800cc28:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800cc2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cc30:	429a      	cmp	r2, r3
 800cc32:	f000 8094 	beq.w	800cd5e <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	685b      	ldr	r3, [r3, #4]
 800cc3a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	685b      	ldr	r3, [r3, #4]
 800cc42:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	885b      	ldrh	r3, [r3, #2]
 800cc4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cc4c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cc4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cc52:	1ad3      	subs	r3, r2, r3
 800cc54:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cc56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc58:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cc5a:	fb03 f202 	mul.w	r2, r3, r2
 800cc5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cc62:	4413      	add	r3, r2
 800cc64:	009b      	lsls	r3, r3, #2
 800cc66:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800cc6a:	4413      	add	r3, r2
 800cc6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cc70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc72:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800cc76:	fb03 f202 	mul.w	r2, r3, r2
 800cc7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cc7e:	4413      	add	r3, r2
 800cc80:	009b      	lsls	r3, r3, #2
 800cc82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800cc86:	4413      	add	r3, r2
 800cc88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800cc92:	e018      	b.n	800ccc6 <arm_mat_inverse_f32+0x21c>
 800cc94:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cc9c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cca0:	1d1a      	adds	r2, r3, #4
 800cca2:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 800cca6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ccaa:	6812      	ldr	r2, [r2, #0]
 800ccac:	601a      	str	r2, [r3, #0]
 800ccae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ccb2:	1d1a      	adds	r2, r3, #4
 800ccb4:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800ccb8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ccba:	601a      	str	r2, [r3, #0]
 800ccbc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800ccc0:	3301      	adds	r3, #1
 800ccc2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800ccc6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800ccca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cccc:	429a      	cmp	r2, r3
 800ccce:	dbe1      	blt.n	800cc94 <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 800ccd0:	683b      	ldr	r3, [r7, #0]
 800ccd2:	685b      	ldr	r3, [r3, #4]
 800ccd4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ccd8:	683b      	ldr	r3, [r7, #0]
 800ccda:	685b      	ldr	r3, [r3, #4]
 800ccdc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800cce0:	683b      	ldr	r3, [r7, #0]
 800cce2:	885b      	ldrh	r3, [r3, #2]
 800cce4:	647b      	str	r3, [r7, #68]	@ 0x44
 800cce6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cce8:	643b      	str	r3, [r7, #64]	@ 0x40
 800ccea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ccec:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ccee:	fb02 f303 	mul.w	r3, r2, r3
 800ccf2:	009b      	lsls	r3, r3, #2
 800ccf4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800ccf8:	4413      	add	r3, r2
 800ccfa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ccfe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd00:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800cd04:	fb02 f303 	mul.w	r3, r2, r3
 800cd08:	009b      	lsls	r3, r3, #2
 800cd0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800cd0e:	4413      	add	r3, r2
 800cd10:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800cd14:	2300      	movs	r3, #0
 800cd16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cd1a:	e018      	b.n	800cd4e <arm_mat_inverse_f32+0x2a4>
 800cd1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cd24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cd28:	1d1a      	adds	r2, r3, #4
 800cd2a:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800cd2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800cd32:	6812      	ldr	r2, [r2, #0]
 800cd34:	601a      	str	r2, [r3, #0]
 800cd36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cd3a:	1d1a      	adds	r2, r3, #4
 800cd3c:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800cd40:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800cd42:	601a      	str	r2, [r3, #0]
 800cd44:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800cd48:	3301      	adds	r3, #1
 800cd4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cd4e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800cd52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cd54:	429a      	cmp	r2, r3
 800cd56:	dbe1      	blt.n	800cd1c <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 800cd58:	2301      	movs	r3, #1
 800cd5a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 800cd5e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800cd62:	2b01      	cmp	r3, #1
 800cd64:	d009      	beq.n	800cd7a <arm_mat_inverse_f32+0x2d0>
 800cd66:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800cd6a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cd6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd72:	d102      	bne.n	800cd7a <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 800cd74:	f06f 0304 	mvn.w	r3, #4
 800cd78:	e208      	b.n	800d18c <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 800cd7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cd7e:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 800cd82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd86:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	685b      	ldr	r3, [r3, #4]
 800cd8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	885b      	ldrh	r3, [r3, #2]
 800cd96:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd98:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cd9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cd9e:	1ad3      	subs	r3, r2, r3
 800cda0:	633b      	str	r3, [r7, #48]	@ 0x30
 800cda2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cda4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cda6:	fb03 f202 	mul.w	r2, r3, r2
 800cdaa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cdae:	4413      	add	r3, r2
 800cdb0:	009b      	lsls	r3, r3, #2
 800cdb2:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800cdb6:	4413      	add	r3, r2
 800cdb8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800cdc2:	e011      	b.n	800cde8 <arm_mat_inverse_f32+0x33e>
 800cdc4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cdc8:	1d1a      	adds	r2, r3, #4
 800cdca:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 800cdce:	ed93 7a00 	vldr	s14, [r3]
 800cdd2:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800cdd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdda:	edc3 7a00 	vstr	s15, [r3]
 800cdde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cde2:	3301      	adds	r3, #1
 800cde4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800cde8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800cdec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdee:	429a      	cmp	r2, r3
 800cdf0:	dbe8      	blt.n	800cdc4 <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 800cdf2:	683b      	ldr	r3, [r7, #0]
 800cdf4:	685b      	ldr	r3, [r3, #4]
 800cdf6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	885b      	ldrh	r3, [r3, #2]
 800cdfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ce00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce02:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ce04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce06:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ce08:	fb02 f303 	mul.w	r3, r2, r3
 800ce0c:	009b      	lsls	r3, r3, #2
 800ce0e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800ce12:	4413      	add	r3, r2
 800ce14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ce18:	2300      	movs	r3, #0
 800ce1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ce1e:	e011      	b.n	800ce44 <arm_mat_inverse_f32+0x39a>
 800ce20:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ce24:	1d1a      	adds	r2, r3, #4
 800ce26:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 800ce2a:	ed93 7a00 	vldr	s14, [r3]
 800ce2e:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800ce32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce36:	edc3 7a00 	vstr	s15, [r3]
 800ce3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ce3e:	3301      	adds	r3, #1
 800ce40:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ce44:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800ce48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce4a:	429a      	cmp	r2, r3
 800ce4c:	dbe8      	blt.n	800ce20 <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 800ce4e:	2300      	movs	r3, #0
 800ce50:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      for (;rowNb < pivotRow; rowNb++)
 800ce54:	e0ae      	b.n	800cfb4 <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	685a      	ldr	r2, [r3, #4]
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	885b      	ldrh	r3, [r3, #2]
 800ce5e:	4619      	mov	r1, r3
 800ce60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ce64:	fb03 f101 	mul.w	r1, r3, r1
 800ce68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ce6c:	440b      	add	r3, r1
 800ce6e:	009b      	lsls	r3, r3, #2
 800ce70:	4413      	add	r3, r2
 800ce72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800ce76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	685b      	ldr	r3, [r3, #4]
 800ce84:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	685b      	ldr	r3, [r3, #4]
 800ce8c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	885b      	ldrh	r3, [r3, #2]
 800ce94:	617b      	str	r3, [r7, #20]
 800ce96:	697a      	ldr	r2, [r7, #20]
 800ce98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ce9c:	1ad3      	subs	r3, r2, r3
 800ce9e:	613b      	str	r3, [r7, #16]
 800cea0:	697b      	ldr	r3, [r7, #20]
 800cea2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800cea6:	fb03 f202 	mul.w	r2, r3, r2
 800ceaa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ceae:	4413      	add	r3, r2
 800ceb0:	009b      	lsls	r3, r3, #2
 800ceb2:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800ceb6:	4413      	add	r3, r2
 800ceb8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800cebc:	697b      	ldr	r3, [r7, #20]
 800cebe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cec0:	fb03 f202 	mul.w	r2, r3, r2
 800cec4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cec8:	4413      	add	r3, r2
 800ceca:	009b      	lsls	r3, r3, #2
 800cecc:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800ced0:	4413      	add	r3, r2
 800ced2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ced6:	2300      	movs	r3, #0
 800ced8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cedc:	e01a      	b.n	800cf14 <arm_mat_inverse_f32+0x46a>
 800cede:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cee2:	1d1a      	adds	r2, r3, #4
 800cee4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800cee8:	ed93 7a00 	vldr	s14, [r3]
 800ceec:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800cef0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cef4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800cef8:	1d1a      	adds	r2, r3, #4
 800cefa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800cefe:	ed93 7a00 	vldr	s14, [r3]
 800cf02:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf06:	edc3 7a00 	vstr	s15, [r3]
 800cf0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800cf0e:	3301      	adds	r3, #1
 800cf10:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cf14:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800cf18:	693b      	ldr	r3, [r7, #16]
 800cf1a:	429a      	cmp	r2, r3
 800cf1c:	dbdf      	blt.n	800cede <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800cf1e:	683b      	ldr	r3, [r7, #0]
 800cf20:	685b      	ldr	r3, [r3, #4]
 800cf22:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800cf26:	683b      	ldr	r3, [r7, #0]
 800cf28:	685b      	ldr	r3, [r3, #4]
 800cf2a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	885b      	ldrh	r3, [r3, #2]
 800cf32:	60fb      	str	r3, [r7, #12]
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	60bb      	str	r3, [r7, #8]
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800cf3e:	fb02 f303 	mul.w	r3, r2, r3
 800cf42:	009b      	lsls	r3, r3, #2
 800cf44:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800cf48:	4413      	add	r3, r2
 800cf4a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cf52:	fb02 f303 	mul.w	r3, r2, r3
 800cf56:	009b      	lsls	r3, r3, #2
 800cf58:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800cf5c:	4413      	add	r3, r2
 800cf5e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800cf62:	2300      	movs	r3, #0
 800cf64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800cf68:	e01a      	b.n	800cfa0 <arm_mat_inverse_f32+0x4f6>
 800cf6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800cf6e:	1d1a      	adds	r2, r3, #4
 800cf70:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800cf74:	ed93 7a00 	vldr	s14, [r3]
 800cf78:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800cf7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf80:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800cf84:	1d1a      	adds	r2, r3, #4
 800cf86:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800cf8a:	ed93 7a00 	vldr	s14, [r3]
 800cf8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf92:	edc3 7a00 	vstr	s15, [r3]
 800cf96:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800cf9a:	3301      	adds	r3, #1
 800cf9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800cfa0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800cfa4:	68bb      	ldr	r3, [r7, #8]
 800cfa6:	429a      	cmp	r2, r3
 800cfa8:	dbdf      	blt.n	800cf6a <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 800cfaa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cfae:	3301      	adds	r3, #1
 800cfb0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800cfb4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800cfb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cfba:	429a      	cmp	r2, r3
 800cfbc:	f4ff af4b 	bcc.w	800ce56 <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800cfc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cfc2:	3301      	adds	r3, #1
 800cfc4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800cfc8:	e092      	b.n	800d0f0 <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	685a      	ldr	r2, [r3, #4]
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	885b      	ldrh	r3, [r3, #2]
 800cfd2:	4619      	mov	r1, r3
 800cfd4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cfd8:	fb03 f101 	mul.w	r1, r3, r1
 800cfdc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cfe0:	440b      	add	r3, r1
 800cfe2:	009b      	lsls	r3, r3, #2
 800cfe4:	4413      	add	r3, r2
 800cfe6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800cfea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	685b      	ldr	r3, [r3, #4]
 800cff8:	67bb      	str	r3, [r7, #120]	@ 0x78
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	685b      	ldr	r3, [r3, #4]
 800cffe:	677b      	str	r3, [r7, #116]	@ 0x74
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	885b      	ldrh	r3, [r3, #2]
 800d004:	627b      	str	r3, [r7, #36]	@ 0x24
 800d006:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d008:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800d00c:	1ad3      	subs	r3, r2, r3
 800d00e:	623b      	str	r3, [r7, #32]
 800d010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d012:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800d016:	fb03 f202 	mul.w	r2, r3, r2
 800d01a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800d01e:	4413      	add	r3, r2
 800d020:	009b      	lsls	r3, r3, #2
 800d022:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800d024:	4413      	add	r3, r2
 800d026:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d02a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d02c:	fb03 f202 	mul.w	r2, r3, r2
 800d030:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800d034:	4413      	add	r3, r2
 800d036:	009b      	lsls	r3, r3, #2
 800d038:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800d03a:	4413      	add	r3, r2
 800d03c:	677b      	str	r3, [r7, #116]	@ 0x74
 800d03e:	2300      	movs	r3, #0
 800d040:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d042:	e014      	b.n	800d06e <arm_mat_inverse_f32+0x5c4>
 800d044:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d046:	1d1a      	adds	r2, r3, #4
 800d048:	677a      	str	r2, [r7, #116]	@ 0x74
 800d04a:	ed93 7a00 	vldr	s14, [r3]
 800d04e:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800d052:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d056:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d058:	1d1a      	adds	r2, r3, #4
 800d05a:	67ba      	str	r2, [r7, #120]	@ 0x78
 800d05c:	ed93 7a00 	vldr	s14, [r3]
 800d060:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d064:	edc3 7a00 	vstr	s15, [r3]
 800d068:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d06a:	3301      	adds	r3, #1
 800d06c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d06e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800d070:	6a3b      	ldr	r3, [r7, #32]
 800d072:	429a      	cmp	r2, r3
 800d074:	dbe6      	blt.n	800d044 <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800d076:	683b      	ldr	r3, [r7, #0]
 800d078:	685b      	ldr	r3, [r3, #4]
 800d07a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d07c:	683b      	ldr	r3, [r7, #0]
 800d07e:	685b      	ldr	r3, [r3, #4]
 800d080:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d082:	683b      	ldr	r3, [r7, #0]
 800d084:	885b      	ldrh	r3, [r3, #2]
 800d086:	61fb      	str	r3, [r7, #28]
 800d088:	69fb      	ldr	r3, [r7, #28]
 800d08a:	61bb      	str	r3, [r7, #24]
 800d08c:	69fb      	ldr	r3, [r7, #28]
 800d08e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800d092:	fb02 f303 	mul.w	r3, r2, r3
 800d096:	009b      	lsls	r3, r3, #2
 800d098:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d09a:	4413      	add	r3, r2
 800d09c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d09e:	69fb      	ldr	r3, [r7, #28]
 800d0a0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d0a2:	fb02 f303 	mul.w	r3, r2, r3
 800d0a6:	009b      	lsls	r3, r3, #2
 800d0a8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800d0aa:	4413      	add	r3, r2
 800d0ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	673b      	str	r3, [r7, #112]	@ 0x70
 800d0b2:	e014      	b.n	800d0de <arm_mat_inverse_f32+0x634>
 800d0b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d0b6:	1d1a      	adds	r2, r3, #4
 800d0b8:	66ba      	str	r2, [r7, #104]	@ 0x68
 800d0ba:	ed93 7a00 	vldr	s14, [r3]
 800d0be:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800d0c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d0c8:	1d1a      	adds	r2, r3, #4
 800d0ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d0cc:	ed93 7a00 	vldr	s14, [r3]
 800d0d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d0d4:	edc3 7a00 	vstr	s15, [r3]
 800d0d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d0da:	3301      	adds	r3, #1
 800d0dc:	673b      	str	r3, [r7, #112]	@ 0x70
 800d0de:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800d0e0:	69bb      	ldr	r3, [r7, #24]
 800d0e2:	429a      	cmp	r2, r3
 800d0e4:	dbe6      	blt.n	800d0b4 <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800d0e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d0ea:	3301      	adds	r3, #1
 800d0ec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800d0f0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800d0f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d0f6:	429a      	cmp	r2, r3
 800d0f8:	f4ff af67 	bcc.w	800cfca <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 800d0fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800d100:	3301      	adds	r3, #1
 800d102:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d106:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d10a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d10c:	429a      	cmp	r2, r3
 800d10e:	f4ff ad32 	bcc.w	800cb76 <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800d112:	2300      	movs	r3, #0
 800d114:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 800d118:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800d11c:	2b01      	cmp	r3, #1
 800d11e:	d033      	beq.n	800d188 <arm_mat_inverse_f32+0x6de>
 800d120:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800d124:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d12c:	d12c      	bne.n	800d188 <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	685b      	ldr	r3, [r3, #4]
 800d132:	667b      	str	r3, [r7, #100]	@ 0x64
      for (i = 0; i < numRows * numCols; i++)
 800d134:	2300      	movs	r3, #0
 800d136:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d13a:	e010      	b.n	800d15e <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 800d13c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d140:	009b      	lsls	r3, r3, #2
 800d142:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d144:	4413      	add	r3, r2
 800d146:	edd3 7a00 	vldr	s15, [r3]
 800d14a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d14e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d152:	d10d      	bne.n	800d170 <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 800d154:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d158:	3301      	adds	r3, #1
 800d15a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d15e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d160:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d162:	fb02 f303 	mul.w	r3, r2, r3
 800d166:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800d16a:	429a      	cmp	r2, r3
 800d16c:	d3e6      	bcc.n	800d13c <arm_mat_inverse_f32+0x692>
 800d16e:	e000      	b.n	800d172 <arm_mat_inverse_f32+0x6c8>
            break;
 800d170:	bf00      	nop
      }

      if (i == numRows * numCols)
 800d172:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d174:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d176:	fb02 f303 	mul.w	r3, r2, r3
 800d17a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800d17e:	429a      	cmp	r2, r3
 800d180:	d102      	bne.n	800d188 <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 800d182:	23fb      	movs	r3, #251	@ 0xfb
 800d184:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
    }
  }

  /* Return to application */
  return (status);
 800d188:	f997 30c3 	ldrsb.w	r3, [r7, #195]	@ 0xc3
}
 800d18c:	4618      	mov	r0, r3
 800d18e:	37ec      	adds	r7, #236	@ 0xec
 800d190:	46bd      	mov	sp, r7
 800d192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d196:	4770      	bx	lr

0800d198 <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800d198:	b480      	push	{r7}
 800d19a:	b093      	sub	sp, #76	@ 0x4c
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	60f8      	str	r0, [r7, #12]
 800d1a0:	60b9      	str	r1, [r7, #8]
 800d1a2:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	685b      	ldr	r3, [r3, #4]
 800d1a8:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 800d1aa:	68bb      	ldr	r3, [r7, #8]
 800d1ac:	685b      	ldr	r3, [r3, #4]
 800d1ae:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	685b      	ldr	r3, [r3, #4]
 800d1b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 800d1b6:	68bb      	ldr	r3, [r7, #8]
 800d1b8:	685b      	ldr	r3, [r3, #4]
 800d1ba:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	685b      	ldr	r3, [r3, #4]
 800d1c0:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	881b      	ldrh	r3, [r3, #0]
 800d1c6:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 800d1c8:	68bb      	ldr	r3, [r7, #8]
 800d1ca:	885b      	ldrh	r3, [r3, #2]
 800d1cc:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	885b      	ldrh	r3, [r3, #2]
 800d1d2:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d1d8:	8b7b      	ldrh	r3, [r7, #26]
 800d1da:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 800d1dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1de:	009b      	lsls	r3, r3, #2
 800d1e0:	69fa      	ldr	r2, [r7, #28]
 800d1e2:	4413      	add	r3, r2
 800d1e4:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 800d1e6:	8b3b      	ldrh	r3, [r7, #24]
 800d1e8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 800d1ea:	68bb      	ldr	r3, [r7, #8]
 800d1ec:	685b      	ldr	r3, [r3, #4]
 800d1ee:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 800d1f0:	f04f 0300 	mov.w	r3, #0
 800d1f4:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 800d1f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1f8:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 800d1fa:	8afb      	ldrh	r3, [r7, #22]
 800d1fc:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 800d1fe:	e017      	b.n	800d230 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 800d200:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d202:	1d1a      	adds	r2, r3, #4
 800d204:	647a      	str	r2, [r7, #68]	@ 0x44
 800d206:	ed93 7a00 	vldr	s14, [r3]
 800d20a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d20c:	edd3 7a00 	vldr	s15, [r3]
 800d210:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d214:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800d218:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d21c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 800d220:	8b3b      	ldrh	r3, [r7, #24]
 800d222:	009b      	lsls	r3, r3, #2
 800d224:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d226:	4413      	add	r3, r2
 800d228:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 800d22a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d22c:	3b01      	subs	r3, #1
 800d22e:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 800d230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d232:	2b00      	cmp	r3, #0
 800d234:	d1e4      	bne.n	800d200 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 800d236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d238:	1d1a      	adds	r2, r3, #4
 800d23a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800d23c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d23e:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 800d240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d242:	3b01      	subs	r3, #1
 800d244:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 800d246:	8b3a      	ldrh	r2, [r7, #24]
 800d248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d24a:	1ad3      	subs	r3, r2, r3
 800d24c:	009b      	lsls	r3, r3, #2
 800d24e:	6a3a      	ldr	r2, [r7, #32]
 800d250:	4413      	add	r3, r2
 800d252:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 800d254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d256:	2b00      	cmp	r3, #0
 800d258:	d1ca      	bne.n	800d1f0 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 800d25a:	8b3b      	ldrh	r3, [r7, #24]
 800d25c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d25e:	4413      	add	r3, r2
 800d260:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 800d262:	8afb      	ldrh	r3, [r7, #22]
 800d264:	009b      	lsls	r3, r3, #2
 800d266:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d268:	4413      	add	r3, r2
 800d26a:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 800d26c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d26e:	3b01      	subs	r3, #1
 800d270:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 800d272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d274:	2b00      	cmp	r3, #0
 800d276:	d1b1      	bne.n	800d1dc <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800d278:	2300      	movs	r3, #0
 800d27a:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 800d27c:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800d280:	4618      	mov	r0, r3
 800d282:	374c      	adds	r7, #76	@ 0x4c
 800d284:	46bd      	mov	sp, r7
 800d286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28a:	4770      	bx	lr

0800d28c <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800d28c:	b480      	push	{r7}
 800d28e:	b08b      	sub	sp, #44	@ 0x2c
 800d290:	af00      	add	r7, sp, #0
 800d292:	60f8      	str	r0, [r7, #12]
 800d294:	60b9      	str	r1, [r7, #8]
 800d296:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	685b      	ldr	r3, [r3, #4]
 800d29c:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800d29e:	68bb      	ldr	r3, [r7, #8]
 800d2a0:	685b      	ldr	r3, [r3, #4]
 800d2a2:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	685b      	ldr	r3, [r3, #4]
 800d2a8:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	881b      	ldrh	r3, [r3, #0]
 800d2ae:	461a      	mov	r2, r3
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	885b      	ldrh	r3, [r3, #2]
 800d2b4:	fb02 f303 	mul.w	r3, r2, r3
 800d2b8:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800d2ba:	697b      	ldr	r3, [r7, #20]
 800d2bc:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800d2be:	e013      	b.n	800d2e8 <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 800d2c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2c2:	1d1a      	adds	r2, r3, #4
 800d2c4:	627a      	str	r2, [r7, #36]	@ 0x24
 800d2c6:	ed93 7a00 	vldr	s14, [r3]
 800d2ca:	6a3b      	ldr	r3, [r7, #32]
 800d2cc:	1d1a      	adds	r2, r3, #4
 800d2ce:	623a      	str	r2, [r7, #32]
 800d2d0:	edd3 7a00 	vldr	s15, [r3]
 800d2d4:	69fb      	ldr	r3, [r7, #28]
 800d2d6:	1d1a      	adds	r2, r3, #4
 800d2d8:	61fa      	str	r2, [r7, #28]
 800d2da:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d2de:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800d2e2:	69bb      	ldr	r3, [r7, #24]
 800d2e4:	3b01      	subs	r3, #1
 800d2e6:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800d2e8:	69bb      	ldr	r3, [r7, #24]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d1e8      	bne.n	800d2c0 <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800d2f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	372c      	adds	r7, #44	@ 0x2c
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d300:	4770      	bx	lr

0800d302 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800d302:	b480      	push	{r7}
 800d304:	b08b      	sub	sp, #44	@ 0x2c
 800d306:	af00      	add	r7, sp, #0
 800d308:	6078      	str	r0, [r7, #4]
 800d30a:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	685b      	ldr	r3, [r3, #4]
 800d310:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800d312:	683b      	ldr	r3, [r7, #0]
 800d314:	685b      	ldr	r3, [r3, #4]
 800d316:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	881b      	ldrh	r3, [r3, #0]
 800d31c:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	885b      	ldrh	r3, [r3, #2]
 800d322:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 800d324:	89fb      	ldrh	r3, [r7, #14]
 800d326:	61bb      	str	r3, [r7, #24]
 800d328:	2300      	movs	r3, #0
 800d32a:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 800d32c:	697b      	ldr	r3, [r7, #20]
 800d32e:	009b      	lsls	r3, r3, #2
 800d330:	693a      	ldr	r2, [r7, #16]
 800d332:	4413      	add	r3, r2
 800d334:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 800d336:	89bb      	ldrh	r3, [r7, #12]
 800d338:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 800d33a:	e00d      	b.n	800d358 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 800d33c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d33e:	1d1a      	adds	r2, r3, #4
 800d340:	627a      	str	r2, [r7, #36]	@ 0x24
 800d342:	681a      	ldr	r2, [r3, #0]
 800d344:	6a3b      	ldr	r3, [r7, #32]
 800d346:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 800d348:	89fb      	ldrh	r3, [r7, #14]
 800d34a:	009b      	lsls	r3, r3, #2
 800d34c:	6a3a      	ldr	r2, [r7, #32]
 800d34e:	4413      	add	r3, r2
 800d350:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 800d352:	69fb      	ldr	r3, [r7, #28]
 800d354:	3b01      	subs	r3, #1
 800d356:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 800d358:	69fb      	ldr	r3, [r7, #28]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d1ee      	bne.n	800d33c <arm_mat_trans_f32+0x3a>
      }

      i++;
 800d35e:	697b      	ldr	r3, [r7, #20]
 800d360:	3301      	adds	r3, #1
 800d362:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 800d364:	69bb      	ldr	r3, [r7, #24]
 800d366:	3b01      	subs	r3, #1
 800d368:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 800d36a:	69bb      	ldr	r3, [r7, #24]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d1dd      	bne.n	800d32c <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800d370:	2300      	movs	r3, #0
 800d372:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 800d374:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800d378:	4618      	mov	r0, r3
 800d37a:	372c      	adds	r7, #44	@ 0x2c
 800d37c:	46bd      	mov	sp, r7
 800d37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d382:	4770      	bx	lr

0800d384 <memset>:
 800d384:	4402      	add	r2, r0
 800d386:	4603      	mov	r3, r0
 800d388:	4293      	cmp	r3, r2
 800d38a:	d100      	bne.n	800d38e <memset+0xa>
 800d38c:	4770      	bx	lr
 800d38e:	f803 1b01 	strb.w	r1, [r3], #1
 800d392:	e7f9      	b.n	800d388 <memset+0x4>

0800d394 <__errno>:
 800d394:	4b01      	ldr	r3, [pc, #4]	@ (800d39c <__errno+0x8>)
 800d396:	6818      	ldr	r0, [r3, #0]
 800d398:	4770      	bx	lr
 800d39a:	bf00      	nop
 800d39c:	2000020c 	.word	0x2000020c

0800d3a0 <__libc_init_array>:
 800d3a0:	b570      	push	{r4, r5, r6, lr}
 800d3a2:	4d0d      	ldr	r5, [pc, #52]	@ (800d3d8 <__libc_init_array+0x38>)
 800d3a4:	4c0d      	ldr	r4, [pc, #52]	@ (800d3dc <__libc_init_array+0x3c>)
 800d3a6:	1b64      	subs	r4, r4, r5
 800d3a8:	10a4      	asrs	r4, r4, #2
 800d3aa:	2600      	movs	r6, #0
 800d3ac:	42a6      	cmp	r6, r4
 800d3ae:	d109      	bne.n	800d3c4 <__libc_init_array+0x24>
 800d3b0:	4d0b      	ldr	r5, [pc, #44]	@ (800d3e0 <__libc_init_array+0x40>)
 800d3b2:	4c0c      	ldr	r4, [pc, #48]	@ (800d3e4 <__libc_init_array+0x44>)
 800d3b4:	f000 fdb2 	bl	800df1c <_init>
 800d3b8:	1b64      	subs	r4, r4, r5
 800d3ba:	10a4      	asrs	r4, r4, #2
 800d3bc:	2600      	movs	r6, #0
 800d3be:	42a6      	cmp	r6, r4
 800d3c0:	d105      	bne.n	800d3ce <__libc_init_array+0x2e>
 800d3c2:	bd70      	pop	{r4, r5, r6, pc}
 800d3c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800d3c8:	4798      	blx	r3
 800d3ca:	3601      	adds	r6, #1
 800d3cc:	e7ee      	b.n	800d3ac <__libc_init_array+0xc>
 800d3ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800d3d2:	4798      	blx	r3
 800d3d4:	3601      	adds	r6, #1
 800d3d6:	e7f2      	b.n	800d3be <__libc_init_array+0x1e>
 800d3d8:	0800e4bc 	.word	0x0800e4bc
 800d3dc:	0800e4bc 	.word	0x0800e4bc
 800d3e0:	0800e4bc 	.word	0x0800e4bc
 800d3e4:	0800e4c0 	.word	0x0800e4c0

0800d3e8 <memcpy>:
 800d3e8:	440a      	add	r2, r1
 800d3ea:	4291      	cmp	r1, r2
 800d3ec:	f100 33ff 	add.w	r3, r0, #4294967295
 800d3f0:	d100      	bne.n	800d3f4 <memcpy+0xc>
 800d3f2:	4770      	bx	lr
 800d3f4:	b510      	push	{r4, lr}
 800d3f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d3fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d3fe:	4291      	cmp	r1, r2
 800d400:	d1f9      	bne.n	800d3f6 <memcpy+0xe>
 800d402:	bd10      	pop	{r4, pc}

0800d404 <sqrtf>:
 800d404:	b508      	push	{r3, lr}
 800d406:	ed2d 8b02 	vpush	{d8}
 800d40a:	eeb0 8a40 	vmov.f32	s16, s0
 800d40e:	f000 f897 	bl	800d540 <__ieee754_sqrtf>
 800d412:	eeb4 8a48 	vcmp.f32	s16, s16
 800d416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d41a:	d60c      	bvs.n	800d436 <sqrtf+0x32>
 800d41c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800d43c <sqrtf+0x38>
 800d420:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800d424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d428:	d505      	bpl.n	800d436 <sqrtf+0x32>
 800d42a:	f7ff ffb3 	bl	800d394 <__errno>
 800d42e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800d432:	2321      	movs	r3, #33	@ 0x21
 800d434:	6003      	str	r3, [r0, #0]
 800d436:	ecbd 8b02 	vpop	{d8}
 800d43a:	bd08      	pop	{r3, pc}
 800d43c:	00000000 	.word	0x00000000

0800d440 <sinf>:
 800d440:	ee10 3a10 	vmov	r3, s0
 800d444:	b507      	push	{r0, r1, r2, lr}
 800d446:	4a1f      	ldr	r2, [pc, #124]	@ (800d4c4 <sinf+0x84>)
 800d448:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d44c:	4293      	cmp	r3, r2
 800d44e:	d807      	bhi.n	800d460 <sinf+0x20>
 800d450:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800d4c8 <sinf+0x88>
 800d454:	2000      	movs	r0, #0
 800d456:	b003      	add	sp, #12
 800d458:	f85d eb04 	ldr.w	lr, [sp], #4
 800d45c:	f000 b8cc 	b.w	800d5f8 <__kernel_sinf>
 800d460:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d464:	d304      	bcc.n	800d470 <sinf+0x30>
 800d466:	ee30 0a40 	vsub.f32	s0, s0, s0
 800d46a:	b003      	add	sp, #12
 800d46c:	f85d fb04 	ldr.w	pc, [sp], #4
 800d470:	4668      	mov	r0, sp
 800d472:	f000 f909 	bl	800d688 <__ieee754_rem_pio2f>
 800d476:	f000 0003 	and.w	r0, r0, #3
 800d47a:	2801      	cmp	r0, #1
 800d47c:	d00a      	beq.n	800d494 <sinf+0x54>
 800d47e:	2802      	cmp	r0, #2
 800d480:	d00f      	beq.n	800d4a2 <sinf+0x62>
 800d482:	b9c0      	cbnz	r0, 800d4b6 <sinf+0x76>
 800d484:	eddd 0a01 	vldr	s1, [sp, #4]
 800d488:	ed9d 0a00 	vldr	s0, [sp]
 800d48c:	2001      	movs	r0, #1
 800d48e:	f000 f8b3 	bl	800d5f8 <__kernel_sinf>
 800d492:	e7ea      	b.n	800d46a <sinf+0x2a>
 800d494:	eddd 0a01 	vldr	s1, [sp, #4]
 800d498:	ed9d 0a00 	vldr	s0, [sp]
 800d49c:	f000 f854 	bl	800d548 <__kernel_cosf>
 800d4a0:	e7e3      	b.n	800d46a <sinf+0x2a>
 800d4a2:	eddd 0a01 	vldr	s1, [sp, #4]
 800d4a6:	ed9d 0a00 	vldr	s0, [sp]
 800d4aa:	2001      	movs	r0, #1
 800d4ac:	f000 f8a4 	bl	800d5f8 <__kernel_sinf>
 800d4b0:	eeb1 0a40 	vneg.f32	s0, s0
 800d4b4:	e7d9      	b.n	800d46a <sinf+0x2a>
 800d4b6:	eddd 0a01 	vldr	s1, [sp, #4]
 800d4ba:	ed9d 0a00 	vldr	s0, [sp]
 800d4be:	f000 f843 	bl	800d548 <__kernel_cosf>
 800d4c2:	e7f5      	b.n	800d4b0 <sinf+0x70>
 800d4c4:	3f490fd8 	.word	0x3f490fd8
 800d4c8:	00000000 	.word	0x00000000

0800d4cc <fmaxf>:
 800d4cc:	b508      	push	{r3, lr}
 800d4ce:	ed2d 8b02 	vpush	{d8}
 800d4d2:	eeb0 8a40 	vmov.f32	s16, s0
 800d4d6:	eef0 8a60 	vmov.f32	s17, s1
 800d4da:	f000 f815 	bl	800d508 <__fpclassifyf>
 800d4de:	b930      	cbnz	r0, 800d4ee <fmaxf+0x22>
 800d4e0:	eeb0 8a68 	vmov.f32	s16, s17
 800d4e4:	eeb0 0a48 	vmov.f32	s0, s16
 800d4e8:	ecbd 8b02 	vpop	{d8}
 800d4ec:	bd08      	pop	{r3, pc}
 800d4ee:	eeb0 0a68 	vmov.f32	s0, s17
 800d4f2:	f000 f809 	bl	800d508 <__fpclassifyf>
 800d4f6:	2800      	cmp	r0, #0
 800d4f8:	d0f4      	beq.n	800d4e4 <fmaxf+0x18>
 800d4fa:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800d4fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d502:	dded      	ble.n	800d4e0 <fmaxf+0x14>
 800d504:	e7ee      	b.n	800d4e4 <fmaxf+0x18>
	...

0800d508 <__fpclassifyf>:
 800d508:	ee10 3a10 	vmov	r3, s0
 800d50c:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800d510:	d00d      	beq.n	800d52e <__fpclassifyf+0x26>
 800d512:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800d516:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800d51a:	d30a      	bcc.n	800d532 <__fpclassifyf+0x2a>
 800d51c:	4b07      	ldr	r3, [pc, #28]	@ (800d53c <__fpclassifyf+0x34>)
 800d51e:	1e42      	subs	r2, r0, #1
 800d520:	429a      	cmp	r2, r3
 800d522:	d908      	bls.n	800d536 <__fpclassifyf+0x2e>
 800d524:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800d528:	4258      	negs	r0, r3
 800d52a:	4158      	adcs	r0, r3
 800d52c:	4770      	bx	lr
 800d52e:	2002      	movs	r0, #2
 800d530:	4770      	bx	lr
 800d532:	2004      	movs	r0, #4
 800d534:	4770      	bx	lr
 800d536:	2003      	movs	r0, #3
 800d538:	4770      	bx	lr
 800d53a:	bf00      	nop
 800d53c:	007ffffe 	.word	0x007ffffe

0800d540 <__ieee754_sqrtf>:
 800d540:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d544:	4770      	bx	lr
	...

0800d548 <__kernel_cosf>:
 800d548:	ee10 3a10 	vmov	r3, s0
 800d54c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d550:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800d554:	eef0 6a40 	vmov.f32	s13, s0
 800d558:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800d55c:	d204      	bcs.n	800d568 <__kernel_cosf+0x20>
 800d55e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800d562:	ee17 2a90 	vmov	r2, s15
 800d566:	b342      	cbz	r2, 800d5ba <__kernel_cosf+0x72>
 800d568:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800d56c:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800d5d8 <__kernel_cosf+0x90>
 800d570:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800d5dc <__kernel_cosf+0x94>
 800d574:	4a1a      	ldr	r2, [pc, #104]	@ (800d5e0 <__kernel_cosf+0x98>)
 800d576:	eea7 6a27 	vfma.f32	s12, s14, s15
 800d57a:	4293      	cmp	r3, r2
 800d57c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800d5e4 <__kernel_cosf+0x9c>
 800d580:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d584:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800d5e8 <__kernel_cosf+0xa0>
 800d588:	eea7 6a87 	vfma.f32	s12, s15, s14
 800d58c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800d5ec <__kernel_cosf+0xa4>
 800d590:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d594:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800d5f0 <__kernel_cosf+0xa8>
 800d598:	eea7 6a87 	vfma.f32	s12, s15, s14
 800d59c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800d5a0:	ee26 6a07 	vmul.f32	s12, s12, s14
 800d5a4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800d5a8:	eee7 0a06 	vfma.f32	s1, s14, s12
 800d5ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5b0:	d804      	bhi.n	800d5bc <__kernel_cosf+0x74>
 800d5b2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800d5b6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d5ba:	4770      	bx	lr
 800d5bc:	4a0d      	ldr	r2, [pc, #52]	@ (800d5f4 <__kernel_cosf+0xac>)
 800d5be:	4293      	cmp	r3, r2
 800d5c0:	bf9a      	itte	ls
 800d5c2:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800d5c6:	ee07 3a10 	vmovls	s14, r3
 800d5ca:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800d5ce:	ee30 0a47 	vsub.f32	s0, s0, s14
 800d5d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d5d6:	e7ec      	b.n	800d5b2 <__kernel_cosf+0x6a>
 800d5d8:	ad47d74e 	.word	0xad47d74e
 800d5dc:	310f74f6 	.word	0x310f74f6
 800d5e0:	3e999999 	.word	0x3e999999
 800d5e4:	b493f27c 	.word	0xb493f27c
 800d5e8:	37d00d01 	.word	0x37d00d01
 800d5ec:	bab60b61 	.word	0xbab60b61
 800d5f0:	3d2aaaab 	.word	0x3d2aaaab
 800d5f4:	3f480000 	.word	0x3f480000

0800d5f8 <__kernel_sinf>:
 800d5f8:	ee10 3a10 	vmov	r3, s0
 800d5fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d600:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800d604:	d204      	bcs.n	800d610 <__kernel_sinf+0x18>
 800d606:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800d60a:	ee17 3a90 	vmov	r3, s15
 800d60e:	b35b      	cbz	r3, 800d668 <__kernel_sinf+0x70>
 800d610:	ee20 7a00 	vmul.f32	s14, s0, s0
 800d614:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800d66c <__kernel_sinf+0x74>
 800d618:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800d670 <__kernel_sinf+0x78>
 800d61c:	eea7 6a27 	vfma.f32	s12, s14, s15
 800d620:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800d674 <__kernel_sinf+0x7c>
 800d624:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d628:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800d678 <__kernel_sinf+0x80>
 800d62c:	eea7 6a87 	vfma.f32	s12, s15, s14
 800d630:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800d67c <__kernel_sinf+0x84>
 800d634:	ee60 6a07 	vmul.f32	s13, s0, s14
 800d638:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d63c:	b930      	cbnz	r0, 800d64c <__kernel_sinf+0x54>
 800d63e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800d680 <__kernel_sinf+0x88>
 800d642:	eea7 6a27 	vfma.f32	s12, s14, s15
 800d646:	eea6 0a26 	vfma.f32	s0, s12, s13
 800d64a:	4770      	bx	lr
 800d64c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800d650:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800d654:	eee0 7a86 	vfma.f32	s15, s1, s12
 800d658:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800d65c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800d684 <__kernel_sinf+0x8c>
 800d660:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800d664:	ee30 0a60 	vsub.f32	s0, s0, s1
 800d668:	4770      	bx	lr
 800d66a:	bf00      	nop
 800d66c:	2f2ec9d3 	.word	0x2f2ec9d3
 800d670:	b2d72f34 	.word	0xb2d72f34
 800d674:	3638ef1b 	.word	0x3638ef1b
 800d678:	b9500d01 	.word	0xb9500d01
 800d67c:	3c088889 	.word	0x3c088889
 800d680:	be2aaaab 	.word	0xbe2aaaab
 800d684:	3e2aaaab 	.word	0x3e2aaaab

0800d688 <__ieee754_rem_pio2f>:
 800d688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d68a:	ee10 6a10 	vmov	r6, s0
 800d68e:	4b88      	ldr	r3, [pc, #544]	@ (800d8b0 <__ieee754_rem_pio2f+0x228>)
 800d690:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800d694:	429d      	cmp	r5, r3
 800d696:	b087      	sub	sp, #28
 800d698:	4604      	mov	r4, r0
 800d69a:	d805      	bhi.n	800d6a8 <__ieee754_rem_pio2f+0x20>
 800d69c:	2300      	movs	r3, #0
 800d69e:	ed80 0a00 	vstr	s0, [r0]
 800d6a2:	6043      	str	r3, [r0, #4]
 800d6a4:	2000      	movs	r0, #0
 800d6a6:	e022      	b.n	800d6ee <__ieee754_rem_pio2f+0x66>
 800d6a8:	4b82      	ldr	r3, [pc, #520]	@ (800d8b4 <__ieee754_rem_pio2f+0x22c>)
 800d6aa:	429d      	cmp	r5, r3
 800d6ac:	d83a      	bhi.n	800d724 <__ieee754_rem_pio2f+0x9c>
 800d6ae:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800d6b2:	2e00      	cmp	r6, #0
 800d6b4:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800d8b8 <__ieee754_rem_pio2f+0x230>
 800d6b8:	4a80      	ldr	r2, [pc, #512]	@ (800d8bc <__ieee754_rem_pio2f+0x234>)
 800d6ba:	f023 030f 	bic.w	r3, r3, #15
 800d6be:	dd18      	ble.n	800d6f2 <__ieee754_rem_pio2f+0x6a>
 800d6c0:	4293      	cmp	r3, r2
 800d6c2:	ee70 7a47 	vsub.f32	s15, s0, s14
 800d6c6:	bf09      	itett	eq
 800d6c8:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800d8c0 <__ieee754_rem_pio2f+0x238>
 800d6cc:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800d8c4 <__ieee754_rem_pio2f+0x23c>
 800d6d0:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800d8c8 <__ieee754_rem_pio2f+0x240>
 800d6d4:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800d6d8:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800d6dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d6e0:	ed80 7a00 	vstr	s14, [r0]
 800d6e4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d6e8:	edc0 7a01 	vstr	s15, [r0, #4]
 800d6ec:	2001      	movs	r0, #1
 800d6ee:	b007      	add	sp, #28
 800d6f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6f2:	4293      	cmp	r3, r2
 800d6f4:	ee70 7a07 	vadd.f32	s15, s0, s14
 800d6f8:	bf09      	itett	eq
 800d6fa:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800d8c0 <__ieee754_rem_pio2f+0x238>
 800d6fe:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800d8c4 <__ieee754_rem_pio2f+0x23c>
 800d702:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800d8c8 <__ieee754_rem_pio2f+0x240>
 800d706:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800d70a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d70e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d712:	ed80 7a00 	vstr	s14, [r0]
 800d716:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d71a:	edc0 7a01 	vstr	s15, [r0, #4]
 800d71e:	f04f 30ff 	mov.w	r0, #4294967295
 800d722:	e7e4      	b.n	800d6ee <__ieee754_rem_pio2f+0x66>
 800d724:	4b69      	ldr	r3, [pc, #420]	@ (800d8cc <__ieee754_rem_pio2f+0x244>)
 800d726:	429d      	cmp	r5, r3
 800d728:	d873      	bhi.n	800d812 <__ieee754_rem_pio2f+0x18a>
 800d72a:	f000 f8dd 	bl	800d8e8 <fabsf>
 800d72e:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800d8d0 <__ieee754_rem_pio2f+0x248>
 800d732:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800d736:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d73a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d73e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d742:	ee17 0a90 	vmov	r0, s15
 800d746:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800d8b8 <__ieee754_rem_pio2f+0x230>
 800d74a:	eea7 0a67 	vfms.f32	s0, s14, s15
 800d74e:	281f      	cmp	r0, #31
 800d750:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800d8c4 <__ieee754_rem_pio2f+0x23c>
 800d754:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d758:	eeb1 6a47 	vneg.f32	s12, s14
 800d75c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800d760:	ee16 1a90 	vmov	r1, s13
 800d764:	dc09      	bgt.n	800d77a <__ieee754_rem_pio2f+0xf2>
 800d766:	4a5b      	ldr	r2, [pc, #364]	@ (800d8d4 <__ieee754_rem_pio2f+0x24c>)
 800d768:	1e47      	subs	r7, r0, #1
 800d76a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800d76e:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800d772:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d776:	4293      	cmp	r3, r2
 800d778:	d107      	bne.n	800d78a <__ieee754_rem_pio2f+0x102>
 800d77a:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800d77e:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800d782:	2a08      	cmp	r2, #8
 800d784:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800d788:	dc14      	bgt.n	800d7b4 <__ieee754_rem_pio2f+0x12c>
 800d78a:	6021      	str	r1, [r4, #0]
 800d78c:	ed94 7a00 	vldr	s14, [r4]
 800d790:	ee30 0a47 	vsub.f32	s0, s0, s14
 800d794:	2e00      	cmp	r6, #0
 800d796:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d79a:	ed84 0a01 	vstr	s0, [r4, #4]
 800d79e:	daa6      	bge.n	800d6ee <__ieee754_rem_pio2f+0x66>
 800d7a0:	eeb1 7a47 	vneg.f32	s14, s14
 800d7a4:	eeb1 0a40 	vneg.f32	s0, s0
 800d7a8:	ed84 7a00 	vstr	s14, [r4]
 800d7ac:	ed84 0a01 	vstr	s0, [r4, #4]
 800d7b0:	4240      	negs	r0, r0
 800d7b2:	e79c      	b.n	800d6ee <__ieee754_rem_pio2f+0x66>
 800d7b4:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800d8c0 <__ieee754_rem_pio2f+0x238>
 800d7b8:	eef0 6a40 	vmov.f32	s13, s0
 800d7bc:	eee6 6a25 	vfma.f32	s13, s12, s11
 800d7c0:	ee70 7a66 	vsub.f32	s15, s0, s13
 800d7c4:	eee6 7a25 	vfma.f32	s15, s12, s11
 800d7c8:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800d8c8 <__ieee754_rem_pio2f+0x240>
 800d7cc:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800d7d0:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800d7d4:	ee15 2a90 	vmov	r2, s11
 800d7d8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800d7dc:	1a5b      	subs	r3, r3, r1
 800d7de:	2b19      	cmp	r3, #25
 800d7e0:	dc04      	bgt.n	800d7ec <__ieee754_rem_pio2f+0x164>
 800d7e2:	edc4 5a00 	vstr	s11, [r4]
 800d7e6:	eeb0 0a66 	vmov.f32	s0, s13
 800d7ea:	e7cf      	b.n	800d78c <__ieee754_rem_pio2f+0x104>
 800d7ec:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800d8d8 <__ieee754_rem_pio2f+0x250>
 800d7f0:	eeb0 0a66 	vmov.f32	s0, s13
 800d7f4:	eea6 0a25 	vfma.f32	s0, s12, s11
 800d7f8:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800d7fc:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800d8dc <__ieee754_rem_pio2f+0x254>
 800d800:	eee6 7a25 	vfma.f32	s15, s12, s11
 800d804:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800d808:	ee30 7a67 	vsub.f32	s14, s0, s15
 800d80c:	ed84 7a00 	vstr	s14, [r4]
 800d810:	e7bc      	b.n	800d78c <__ieee754_rem_pio2f+0x104>
 800d812:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800d816:	d306      	bcc.n	800d826 <__ieee754_rem_pio2f+0x19e>
 800d818:	ee70 7a40 	vsub.f32	s15, s0, s0
 800d81c:	edc0 7a01 	vstr	s15, [r0, #4]
 800d820:	edc0 7a00 	vstr	s15, [r0]
 800d824:	e73e      	b.n	800d6a4 <__ieee754_rem_pio2f+0x1c>
 800d826:	15ea      	asrs	r2, r5, #23
 800d828:	3a86      	subs	r2, #134	@ 0x86
 800d82a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800d82e:	ee07 3a90 	vmov	s15, r3
 800d832:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800d836:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800d8e0 <__ieee754_rem_pio2f+0x258>
 800d83a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d83e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d842:	ed8d 7a03 	vstr	s14, [sp, #12]
 800d846:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d84a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800d84e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d852:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d856:	ed8d 7a04 	vstr	s14, [sp, #16]
 800d85a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d85e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d866:	edcd 7a05 	vstr	s15, [sp, #20]
 800d86a:	d11e      	bne.n	800d8aa <__ieee754_rem_pio2f+0x222>
 800d86c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800d870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d874:	bf0c      	ite	eq
 800d876:	2301      	moveq	r3, #1
 800d878:	2302      	movne	r3, #2
 800d87a:	491a      	ldr	r1, [pc, #104]	@ (800d8e4 <__ieee754_rem_pio2f+0x25c>)
 800d87c:	9101      	str	r1, [sp, #4]
 800d87e:	2102      	movs	r1, #2
 800d880:	9100      	str	r1, [sp, #0]
 800d882:	a803      	add	r0, sp, #12
 800d884:	4621      	mov	r1, r4
 800d886:	f000 f89d 	bl	800d9c4 <__kernel_rem_pio2f>
 800d88a:	2e00      	cmp	r6, #0
 800d88c:	f6bf af2f 	bge.w	800d6ee <__ieee754_rem_pio2f+0x66>
 800d890:	edd4 7a00 	vldr	s15, [r4]
 800d894:	eef1 7a67 	vneg.f32	s15, s15
 800d898:	edc4 7a00 	vstr	s15, [r4]
 800d89c:	edd4 7a01 	vldr	s15, [r4, #4]
 800d8a0:	eef1 7a67 	vneg.f32	s15, s15
 800d8a4:	edc4 7a01 	vstr	s15, [r4, #4]
 800d8a8:	e782      	b.n	800d7b0 <__ieee754_rem_pio2f+0x128>
 800d8aa:	2303      	movs	r3, #3
 800d8ac:	e7e5      	b.n	800d87a <__ieee754_rem_pio2f+0x1f2>
 800d8ae:	bf00      	nop
 800d8b0:	3f490fd8 	.word	0x3f490fd8
 800d8b4:	4016cbe3 	.word	0x4016cbe3
 800d8b8:	3fc90f80 	.word	0x3fc90f80
 800d8bc:	3fc90fd0 	.word	0x3fc90fd0
 800d8c0:	37354400 	.word	0x37354400
 800d8c4:	37354443 	.word	0x37354443
 800d8c8:	2e85a308 	.word	0x2e85a308
 800d8cc:	43490f80 	.word	0x43490f80
 800d8d0:	3f22f984 	.word	0x3f22f984
 800d8d4:	0800e0e4 	.word	0x0800e0e4
 800d8d8:	2e85a300 	.word	0x2e85a300
 800d8dc:	248d3132 	.word	0x248d3132
 800d8e0:	43800000 	.word	0x43800000
 800d8e4:	0800e164 	.word	0x0800e164

0800d8e8 <fabsf>:
 800d8e8:	ee10 3a10 	vmov	r3, s0
 800d8ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d8f0:	ee00 3a10 	vmov	s0, r3
 800d8f4:	4770      	bx	lr
	...

0800d8f8 <scalbnf>:
 800d8f8:	ee10 3a10 	vmov	r3, s0
 800d8fc:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800d900:	d02b      	beq.n	800d95a <scalbnf+0x62>
 800d902:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800d906:	d302      	bcc.n	800d90e <scalbnf+0x16>
 800d908:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d90c:	4770      	bx	lr
 800d90e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800d912:	d123      	bne.n	800d95c <scalbnf+0x64>
 800d914:	4b24      	ldr	r3, [pc, #144]	@ (800d9a8 <scalbnf+0xb0>)
 800d916:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800d9ac <scalbnf+0xb4>
 800d91a:	4298      	cmp	r0, r3
 800d91c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d920:	db17      	blt.n	800d952 <scalbnf+0x5a>
 800d922:	ee10 3a10 	vmov	r3, s0
 800d926:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d92a:	3a19      	subs	r2, #25
 800d92c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800d930:	4288      	cmp	r0, r1
 800d932:	dd15      	ble.n	800d960 <scalbnf+0x68>
 800d934:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800d9b0 <scalbnf+0xb8>
 800d938:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800d9b4 <scalbnf+0xbc>
 800d93c:	ee10 3a10 	vmov	r3, s0
 800d940:	eeb0 7a67 	vmov.f32	s14, s15
 800d944:	2b00      	cmp	r3, #0
 800d946:	bfb8      	it	lt
 800d948:	eef0 7a66 	vmovlt.f32	s15, s13
 800d94c:	ee27 0a87 	vmul.f32	s0, s15, s14
 800d950:	4770      	bx	lr
 800d952:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800d9b8 <scalbnf+0xc0>
 800d956:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d95a:	4770      	bx	lr
 800d95c:	0dd2      	lsrs	r2, r2, #23
 800d95e:	e7e5      	b.n	800d92c <scalbnf+0x34>
 800d960:	4410      	add	r0, r2
 800d962:	28fe      	cmp	r0, #254	@ 0xfe
 800d964:	dce6      	bgt.n	800d934 <scalbnf+0x3c>
 800d966:	2800      	cmp	r0, #0
 800d968:	dd06      	ble.n	800d978 <scalbnf+0x80>
 800d96a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d96e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800d972:	ee00 3a10 	vmov	s0, r3
 800d976:	4770      	bx	lr
 800d978:	f110 0f16 	cmn.w	r0, #22
 800d97c:	da09      	bge.n	800d992 <scalbnf+0x9a>
 800d97e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800d9b8 <scalbnf+0xc0>
 800d982:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800d9bc <scalbnf+0xc4>
 800d986:	ee10 3a10 	vmov	r3, s0
 800d98a:	eeb0 7a67 	vmov.f32	s14, s15
 800d98e:	2b00      	cmp	r3, #0
 800d990:	e7d9      	b.n	800d946 <scalbnf+0x4e>
 800d992:	3019      	adds	r0, #25
 800d994:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d998:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800d99c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800d9c0 <scalbnf+0xc8>
 800d9a0:	ee07 3a90 	vmov	s15, r3
 800d9a4:	e7d7      	b.n	800d956 <scalbnf+0x5e>
 800d9a6:	bf00      	nop
 800d9a8:	ffff3cb0 	.word	0xffff3cb0
 800d9ac:	4c000000 	.word	0x4c000000
 800d9b0:	7149f2ca 	.word	0x7149f2ca
 800d9b4:	f149f2ca 	.word	0xf149f2ca
 800d9b8:	0da24260 	.word	0x0da24260
 800d9bc:	8da24260 	.word	0x8da24260
 800d9c0:	33000000 	.word	0x33000000

0800d9c4 <__kernel_rem_pio2f>:
 800d9c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9c8:	ed2d 8b04 	vpush	{d8-d9}
 800d9cc:	b0d9      	sub	sp, #356	@ 0x164
 800d9ce:	4690      	mov	r8, r2
 800d9d0:	9001      	str	r0, [sp, #4]
 800d9d2:	4ab6      	ldr	r2, [pc, #728]	@ (800dcac <__kernel_rem_pio2f+0x2e8>)
 800d9d4:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800d9d6:	f118 0f04 	cmn.w	r8, #4
 800d9da:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800d9de:	460f      	mov	r7, r1
 800d9e0:	f103 3bff 	add.w	fp, r3, #4294967295
 800d9e4:	db26      	blt.n	800da34 <__kernel_rem_pio2f+0x70>
 800d9e6:	f1b8 0203 	subs.w	r2, r8, #3
 800d9ea:	bf48      	it	mi
 800d9ec:	f108 0204 	addmi.w	r2, r8, #4
 800d9f0:	10d2      	asrs	r2, r2, #3
 800d9f2:	1c55      	adds	r5, r2, #1
 800d9f4:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800d9f6:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800dcbc <__kernel_rem_pio2f+0x2f8>
 800d9fa:	00e8      	lsls	r0, r5, #3
 800d9fc:	eba2 060b 	sub.w	r6, r2, fp
 800da00:	9002      	str	r0, [sp, #8]
 800da02:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800da06:	eb0a 0c0b 	add.w	ip, sl, fp
 800da0a:	ac1c      	add	r4, sp, #112	@ 0x70
 800da0c:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800da10:	2000      	movs	r0, #0
 800da12:	4560      	cmp	r0, ip
 800da14:	dd10      	ble.n	800da38 <__kernel_rem_pio2f+0x74>
 800da16:	a91c      	add	r1, sp, #112	@ 0x70
 800da18:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800da1c:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800da20:	2600      	movs	r6, #0
 800da22:	4556      	cmp	r6, sl
 800da24:	dc24      	bgt.n	800da70 <__kernel_rem_pio2f+0xac>
 800da26:	f8dd e004 	ldr.w	lr, [sp, #4]
 800da2a:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800dcbc <__kernel_rem_pio2f+0x2f8>
 800da2e:	4684      	mov	ip, r0
 800da30:	2400      	movs	r4, #0
 800da32:	e016      	b.n	800da62 <__kernel_rem_pio2f+0x9e>
 800da34:	2200      	movs	r2, #0
 800da36:	e7dc      	b.n	800d9f2 <__kernel_rem_pio2f+0x2e>
 800da38:	42c6      	cmn	r6, r0
 800da3a:	bf5d      	ittte	pl
 800da3c:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800da40:	ee07 1a90 	vmovpl	s15, r1
 800da44:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800da48:	eef0 7a47 	vmovmi.f32	s15, s14
 800da4c:	ece4 7a01 	vstmia	r4!, {s15}
 800da50:	3001      	adds	r0, #1
 800da52:	e7de      	b.n	800da12 <__kernel_rem_pio2f+0x4e>
 800da54:	ecfe 6a01 	vldmia	lr!, {s13}
 800da58:	ed3c 7a01 	vldmdb	ip!, {s14}
 800da5c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800da60:	3401      	adds	r4, #1
 800da62:	455c      	cmp	r4, fp
 800da64:	ddf6      	ble.n	800da54 <__kernel_rem_pio2f+0x90>
 800da66:	ece9 7a01 	vstmia	r9!, {s15}
 800da6a:	3601      	adds	r6, #1
 800da6c:	3004      	adds	r0, #4
 800da6e:	e7d8      	b.n	800da22 <__kernel_rem_pio2f+0x5e>
 800da70:	a908      	add	r1, sp, #32
 800da72:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800da76:	9104      	str	r1, [sp, #16]
 800da78:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800da7a:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800dcb8 <__kernel_rem_pio2f+0x2f4>
 800da7e:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800dcb4 <__kernel_rem_pio2f+0x2f0>
 800da82:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800da86:	9203      	str	r2, [sp, #12]
 800da88:	4654      	mov	r4, sl
 800da8a:	00a2      	lsls	r2, r4, #2
 800da8c:	9205      	str	r2, [sp, #20]
 800da8e:	aa58      	add	r2, sp, #352	@ 0x160
 800da90:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800da94:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800da98:	a944      	add	r1, sp, #272	@ 0x110
 800da9a:	aa08      	add	r2, sp, #32
 800da9c:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800daa0:	4694      	mov	ip, r2
 800daa2:	4626      	mov	r6, r4
 800daa4:	2e00      	cmp	r6, #0
 800daa6:	dc4c      	bgt.n	800db42 <__kernel_rem_pio2f+0x17e>
 800daa8:	4628      	mov	r0, r5
 800daaa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800daae:	f7ff ff23 	bl	800d8f8 <scalbnf>
 800dab2:	eeb0 8a40 	vmov.f32	s16, s0
 800dab6:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800daba:	ee28 0a00 	vmul.f32	s0, s16, s0
 800dabe:	f000 f9e9 	bl	800de94 <floorf>
 800dac2:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800dac6:	eea0 8a67 	vfms.f32	s16, s0, s15
 800daca:	2d00      	cmp	r5, #0
 800dacc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dad0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800dad4:	ee17 9a90 	vmov	r9, s15
 800dad8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dadc:	ee38 8a67 	vsub.f32	s16, s16, s15
 800dae0:	dd41      	ble.n	800db66 <__kernel_rem_pio2f+0x1a2>
 800dae2:	f104 3cff 	add.w	ip, r4, #4294967295
 800dae6:	a908      	add	r1, sp, #32
 800dae8:	f1c5 0e08 	rsb	lr, r5, #8
 800daec:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800daf0:	fa46 f00e 	asr.w	r0, r6, lr
 800daf4:	4481      	add	r9, r0
 800daf6:	fa00 f00e 	lsl.w	r0, r0, lr
 800dafa:	1a36      	subs	r6, r6, r0
 800dafc:	f1c5 0007 	rsb	r0, r5, #7
 800db00:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800db04:	4106      	asrs	r6, r0
 800db06:	2e00      	cmp	r6, #0
 800db08:	dd3c      	ble.n	800db84 <__kernel_rem_pio2f+0x1c0>
 800db0a:	f04f 0e00 	mov.w	lr, #0
 800db0e:	f109 0901 	add.w	r9, r9, #1
 800db12:	4670      	mov	r0, lr
 800db14:	4574      	cmp	r4, lr
 800db16:	dc68      	bgt.n	800dbea <__kernel_rem_pio2f+0x226>
 800db18:	2d00      	cmp	r5, #0
 800db1a:	dd03      	ble.n	800db24 <__kernel_rem_pio2f+0x160>
 800db1c:	2d01      	cmp	r5, #1
 800db1e:	d074      	beq.n	800dc0a <__kernel_rem_pio2f+0x246>
 800db20:	2d02      	cmp	r5, #2
 800db22:	d07d      	beq.n	800dc20 <__kernel_rem_pio2f+0x25c>
 800db24:	2e02      	cmp	r6, #2
 800db26:	d12d      	bne.n	800db84 <__kernel_rem_pio2f+0x1c0>
 800db28:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800db2c:	ee30 8a48 	vsub.f32	s16, s0, s16
 800db30:	b340      	cbz	r0, 800db84 <__kernel_rem_pio2f+0x1c0>
 800db32:	4628      	mov	r0, r5
 800db34:	9306      	str	r3, [sp, #24]
 800db36:	f7ff fedf 	bl	800d8f8 <scalbnf>
 800db3a:	9b06      	ldr	r3, [sp, #24]
 800db3c:	ee38 8a40 	vsub.f32	s16, s16, s0
 800db40:	e020      	b.n	800db84 <__kernel_rem_pio2f+0x1c0>
 800db42:	ee60 7a28 	vmul.f32	s15, s0, s17
 800db46:	3e01      	subs	r6, #1
 800db48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800db4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800db50:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800db54:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800db58:	ecac 0a01 	vstmia	ip!, {s0}
 800db5c:	ed30 0a01 	vldmdb	r0!, {s0}
 800db60:	ee37 0a80 	vadd.f32	s0, s15, s0
 800db64:	e79e      	b.n	800daa4 <__kernel_rem_pio2f+0xe0>
 800db66:	d105      	bne.n	800db74 <__kernel_rem_pio2f+0x1b0>
 800db68:	1e60      	subs	r0, r4, #1
 800db6a:	a908      	add	r1, sp, #32
 800db6c:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800db70:	11f6      	asrs	r6, r6, #7
 800db72:	e7c8      	b.n	800db06 <__kernel_rem_pio2f+0x142>
 800db74:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800db78:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800db7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db80:	da31      	bge.n	800dbe6 <__kernel_rem_pio2f+0x222>
 800db82:	2600      	movs	r6, #0
 800db84:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800db88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db8c:	f040 8098 	bne.w	800dcc0 <__kernel_rem_pio2f+0x2fc>
 800db90:	1e60      	subs	r0, r4, #1
 800db92:	2200      	movs	r2, #0
 800db94:	4550      	cmp	r0, sl
 800db96:	da4b      	bge.n	800dc30 <__kernel_rem_pio2f+0x26c>
 800db98:	2a00      	cmp	r2, #0
 800db9a:	d065      	beq.n	800dc68 <__kernel_rem_pio2f+0x2a4>
 800db9c:	3c01      	subs	r4, #1
 800db9e:	ab08      	add	r3, sp, #32
 800dba0:	3d08      	subs	r5, #8
 800dba2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d0f8      	beq.n	800db9c <__kernel_rem_pio2f+0x1d8>
 800dbaa:	4628      	mov	r0, r5
 800dbac:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800dbb0:	f7ff fea2 	bl	800d8f8 <scalbnf>
 800dbb4:	1c63      	adds	r3, r4, #1
 800dbb6:	aa44      	add	r2, sp, #272	@ 0x110
 800dbb8:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800dcb8 <__kernel_rem_pio2f+0x2f4>
 800dbbc:	0099      	lsls	r1, r3, #2
 800dbbe:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800dbc2:	4623      	mov	r3, r4
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	f280 80a9 	bge.w	800dd1c <__kernel_rem_pio2f+0x358>
 800dbca:	4623      	mov	r3, r4
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	f2c0 80c7 	blt.w	800dd60 <__kernel_rem_pio2f+0x39c>
 800dbd2:	aa44      	add	r2, sp, #272	@ 0x110
 800dbd4:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800dbd8:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800dcb0 <__kernel_rem_pio2f+0x2ec>
 800dbdc:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800dcbc <__kernel_rem_pio2f+0x2f8>
 800dbe0:	2000      	movs	r0, #0
 800dbe2:	1ae2      	subs	r2, r4, r3
 800dbe4:	e0b1      	b.n	800dd4a <__kernel_rem_pio2f+0x386>
 800dbe6:	2602      	movs	r6, #2
 800dbe8:	e78f      	b.n	800db0a <__kernel_rem_pio2f+0x146>
 800dbea:	f852 1b04 	ldr.w	r1, [r2], #4
 800dbee:	b948      	cbnz	r0, 800dc04 <__kernel_rem_pio2f+0x240>
 800dbf0:	b121      	cbz	r1, 800dbfc <__kernel_rem_pio2f+0x238>
 800dbf2:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800dbf6:	f842 1c04 	str.w	r1, [r2, #-4]
 800dbfa:	2101      	movs	r1, #1
 800dbfc:	f10e 0e01 	add.w	lr, lr, #1
 800dc00:	4608      	mov	r0, r1
 800dc02:	e787      	b.n	800db14 <__kernel_rem_pio2f+0x150>
 800dc04:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800dc08:	e7f5      	b.n	800dbf6 <__kernel_rem_pio2f+0x232>
 800dc0a:	f104 3cff 	add.w	ip, r4, #4294967295
 800dc0e:	aa08      	add	r2, sp, #32
 800dc10:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800dc14:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800dc18:	a908      	add	r1, sp, #32
 800dc1a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800dc1e:	e781      	b.n	800db24 <__kernel_rem_pio2f+0x160>
 800dc20:	f104 3cff 	add.w	ip, r4, #4294967295
 800dc24:	aa08      	add	r2, sp, #32
 800dc26:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800dc2a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800dc2e:	e7f3      	b.n	800dc18 <__kernel_rem_pio2f+0x254>
 800dc30:	a908      	add	r1, sp, #32
 800dc32:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800dc36:	3801      	subs	r0, #1
 800dc38:	430a      	orrs	r2, r1
 800dc3a:	e7ab      	b.n	800db94 <__kernel_rem_pio2f+0x1d0>
 800dc3c:	3201      	adds	r2, #1
 800dc3e:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800dc42:	2e00      	cmp	r6, #0
 800dc44:	d0fa      	beq.n	800dc3c <__kernel_rem_pio2f+0x278>
 800dc46:	9905      	ldr	r1, [sp, #20]
 800dc48:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800dc4c:	eb0d 0001 	add.w	r0, sp, r1
 800dc50:	18e6      	adds	r6, r4, r3
 800dc52:	a91c      	add	r1, sp, #112	@ 0x70
 800dc54:	f104 0c01 	add.w	ip, r4, #1
 800dc58:	384c      	subs	r0, #76	@ 0x4c
 800dc5a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800dc5e:	4422      	add	r2, r4
 800dc60:	4562      	cmp	r2, ip
 800dc62:	da04      	bge.n	800dc6e <__kernel_rem_pio2f+0x2aa>
 800dc64:	4614      	mov	r4, r2
 800dc66:	e710      	b.n	800da8a <__kernel_rem_pio2f+0xc6>
 800dc68:	9804      	ldr	r0, [sp, #16]
 800dc6a:	2201      	movs	r2, #1
 800dc6c:	e7e7      	b.n	800dc3e <__kernel_rem_pio2f+0x27a>
 800dc6e:	9903      	ldr	r1, [sp, #12]
 800dc70:	f8dd e004 	ldr.w	lr, [sp, #4]
 800dc74:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800dc78:	9105      	str	r1, [sp, #20]
 800dc7a:	ee07 1a90 	vmov	s15, r1
 800dc7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dc82:	2400      	movs	r4, #0
 800dc84:	ece6 7a01 	vstmia	r6!, {s15}
 800dc88:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800dcbc <__kernel_rem_pio2f+0x2f8>
 800dc8c:	46b1      	mov	r9, r6
 800dc8e:	455c      	cmp	r4, fp
 800dc90:	dd04      	ble.n	800dc9c <__kernel_rem_pio2f+0x2d8>
 800dc92:	ece0 7a01 	vstmia	r0!, {s15}
 800dc96:	f10c 0c01 	add.w	ip, ip, #1
 800dc9a:	e7e1      	b.n	800dc60 <__kernel_rem_pio2f+0x29c>
 800dc9c:	ecfe 6a01 	vldmia	lr!, {s13}
 800dca0:	ed39 7a01 	vldmdb	r9!, {s14}
 800dca4:	3401      	adds	r4, #1
 800dca6:	eee6 7a87 	vfma.f32	s15, s13, s14
 800dcaa:	e7f0      	b.n	800dc8e <__kernel_rem_pio2f+0x2ca>
 800dcac:	0800e4a8 	.word	0x0800e4a8
 800dcb0:	0800e47c 	.word	0x0800e47c
 800dcb4:	43800000 	.word	0x43800000
 800dcb8:	3b800000 	.word	0x3b800000
 800dcbc:	00000000 	.word	0x00000000
 800dcc0:	9b02      	ldr	r3, [sp, #8]
 800dcc2:	eeb0 0a48 	vmov.f32	s0, s16
 800dcc6:	eba3 0008 	sub.w	r0, r3, r8
 800dcca:	f7ff fe15 	bl	800d8f8 <scalbnf>
 800dcce:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800dcb4 <__kernel_rem_pio2f+0x2f0>
 800dcd2:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800dcd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcda:	db19      	blt.n	800dd10 <__kernel_rem_pio2f+0x34c>
 800dcdc:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800dcb8 <__kernel_rem_pio2f+0x2f4>
 800dce0:	ee60 7a27 	vmul.f32	s15, s0, s15
 800dce4:	aa08      	add	r2, sp, #32
 800dce6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dcea:	3508      	adds	r5, #8
 800dcec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dcf0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800dcf4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dcf8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800dcfc:	ee10 3a10 	vmov	r3, s0
 800dd00:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800dd04:	ee17 3a90 	vmov	r3, s15
 800dd08:	3401      	adds	r4, #1
 800dd0a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800dd0e:	e74c      	b.n	800dbaa <__kernel_rem_pio2f+0x1e6>
 800dd10:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800dd14:	aa08      	add	r2, sp, #32
 800dd16:	ee10 3a10 	vmov	r3, s0
 800dd1a:	e7f6      	b.n	800dd0a <__kernel_rem_pio2f+0x346>
 800dd1c:	a808      	add	r0, sp, #32
 800dd1e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800dd22:	9001      	str	r0, [sp, #4]
 800dd24:	ee07 0a90 	vmov	s15, r0
 800dd28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dd2c:	3b01      	subs	r3, #1
 800dd2e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800dd32:	ee20 0a07 	vmul.f32	s0, s0, s14
 800dd36:	ed62 7a01 	vstmdb	r2!, {s15}
 800dd3a:	e743      	b.n	800dbc4 <__kernel_rem_pio2f+0x200>
 800dd3c:	ecfc 6a01 	vldmia	ip!, {s13}
 800dd40:	ecb5 7a01 	vldmia	r5!, {s14}
 800dd44:	eee6 7a87 	vfma.f32	s15, s13, s14
 800dd48:	3001      	adds	r0, #1
 800dd4a:	4550      	cmp	r0, sl
 800dd4c:	dc01      	bgt.n	800dd52 <__kernel_rem_pio2f+0x38e>
 800dd4e:	4290      	cmp	r0, r2
 800dd50:	ddf4      	ble.n	800dd3c <__kernel_rem_pio2f+0x378>
 800dd52:	a858      	add	r0, sp, #352	@ 0x160
 800dd54:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800dd58:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800dd5c:	3b01      	subs	r3, #1
 800dd5e:	e735      	b.n	800dbcc <__kernel_rem_pio2f+0x208>
 800dd60:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800dd62:	2b02      	cmp	r3, #2
 800dd64:	dc09      	bgt.n	800dd7a <__kernel_rem_pio2f+0x3b6>
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	dc27      	bgt.n	800ddba <__kernel_rem_pio2f+0x3f6>
 800dd6a:	d040      	beq.n	800ddee <__kernel_rem_pio2f+0x42a>
 800dd6c:	f009 0007 	and.w	r0, r9, #7
 800dd70:	b059      	add	sp, #356	@ 0x164
 800dd72:	ecbd 8b04 	vpop	{d8-d9}
 800dd76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd7a:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800dd7c:	2b03      	cmp	r3, #3
 800dd7e:	d1f5      	bne.n	800dd6c <__kernel_rem_pio2f+0x3a8>
 800dd80:	aa30      	add	r2, sp, #192	@ 0xc0
 800dd82:	1f0b      	subs	r3, r1, #4
 800dd84:	4413      	add	r3, r2
 800dd86:	461a      	mov	r2, r3
 800dd88:	4620      	mov	r0, r4
 800dd8a:	2800      	cmp	r0, #0
 800dd8c:	dc50      	bgt.n	800de30 <__kernel_rem_pio2f+0x46c>
 800dd8e:	4622      	mov	r2, r4
 800dd90:	2a01      	cmp	r2, #1
 800dd92:	dc5d      	bgt.n	800de50 <__kernel_rem_pio2f+0x48c>
 800dd94:	ab30      	add	r3, sp, #192	@ 0xc0
 800dd96:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800dcbc <__kernel_rem_pio2f+0x2f8>
 800dd9a:	440b      	add	r3, r1
 800dd9c:	2c01      	cmp	r4, #1
 800dd9e:	dc67      	bgt.n	800de70 <__kernel_rem_pio2f+0x4ac>
 800dda0:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800dda4:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800dda8:	2e00      	cmp	r6, #0
 800ddaa:	d167      	bne.n	800de7c <__kernel_rem_pio2f+0x4b8>
 800ddac:	edc7 6a00 	vstr	s13, [r7]
 800ddb0:	ed87 7a01 	vstr	s14, [r7, #4]
 800ddb4:	edc7 7a02 	vstr	s15, [r7, #8]
 800ddb8:	e7d8      	b.n	800dd6c <__kernel_rem_pio2f+0x3a8>
 800ddba:	ab30      	add	r3, sp, #192	@ 0xc0
 800ddbc:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800dcbc <__kernel_rem_pio2f+0x2f8>
 800ddc0:	440b      	add	r3, r1
 800ddc2:	4622      	mov	r2, r4
 800ddc4:	2a00      	cmp	r2, #0
 800ddc6:	da24      	bge.n	800de12 <__kernel_rem_pio2f+0x44e>
 800ddc8:	b34e      	cbz	r6, 800de1e <__kernel_rem_pio2f+0x45a>
 800ddca:	eef1 7a47 	vneg.f32	s15, s14
 800ddce:	edc7 7a00 	vstr	s15, [r7]
 800ddd2:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800ddd6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ddda:	aa31      	add	r2, sp, #196	@ 0xc4
 800dddc:	2301      	movs	r3, #1
 800ddde:	429c      	cmp	r4, r3
 800dde0:	da20      	bge.n	800de24 <__kernel_rem_pio2f+0x460>
 800dde2:	b10e      	cbz	r6, 800dde8 <__kernel_rem_pio2f+0x424>
 800dde4:	eef1 7a67 	vneg.f32	s15, s15
 800dde8:	edc7 7a01 	vstr	s15, [r7, #4]
 800ddec:	e7be      	b.n	800dd6c <__kernel_rem_pio2f+0x3a8>
 800ddee:	ab30      	add	r3, sp, #192	@ 0xc0
 800ddf0:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800dcbc <__kernel_rem_pio2f+0x2f8>
 800ddf4:	440b      	add	r3, r1
 800ddf6:	2c00      	cmp	r4, #0
 800ddf8:	da05      	bge.n	800de06 <__kernel_rem_pio2f+0x442>
 800ddfa:	b10e      	cbz	r6, 800de00 <__kernel_rem_pio2f+0x43c>
 800ddfc:	eef1 7a67 	vneg.f32	s15, s15
 800de00:	edc7 7a00 	vstr	s15, [r7]
 800de04:	e7b2      	b.n	800dd6c <__kernel_rem_pio2f+0x3a8>
 800de06:	ed33 7a01 	vldmdb	r3!, {s14}
 800de0a:	3c01      	subs	r4, #1
 800de0c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800de10:	e7f1      	b.n	800ddf6 <__kernel_rem_pio2f+0x432>
 800de12:	ed73 7a01 	vldmdb	r3!, {s15}
 800de16:	3a01      	subs	r2, #1
 800de18:	ee37 7a27 	vadd.f32	s14, s14, s15
 800de1c:	e7d2      	b.n	800ddc4 <__kernel_rem_pio2f+0x400>
 800de1e:	eef0 7a47 	vmov.f32	s15, s14
 800de22:	e7d4      	b.n	800ddce <__kernel_rem_pio2f+0x40a>
 800de24:	ecb2 7a01 	vldmia	r2!, {s14}
 800de28:	3301      	adds	r3, #1
 800de2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800de2e:	e7d6      	b.n	800ddde <__kernel_rem_pio2f+0x41a>
 800de30:	ed72 7a01 	vldmdb	r2!, {s15}
 800de34:	edd2 6a01 	vldr	s13, [r2, #4]
 800de38:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800de3c:	3801      	subs	r0, #1
 800de3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800de42:	ed82 7a00 	vstr	s14, [r2]
 800de46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800de4a:	edc2 7a01 	vstr	s15, [r2, #4]
 800de4e:	e79c      	b.n	800dd8a <__kernel_rem_pio2f+0x3c6>
 800de50:	ed73 7a01 	vldmdb	r3!, {s15}
 800de54:	edd3 6a01 	vldr	s13, [r3, #4]
 800de58:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800de5c:	3a01      	subs	r2, #1
 800de5e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800de62:	ed83 7a00 	vstr	s14, [r3]
 800de66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800de6a:	edc3 7a01 	vstr	s15, [r3, #4]
 800de6e:	e78f      	b.n	800dd90 <__kernel_rem_pio2f+0x3cc>
 800de70:	ed33 7a01 	vldmdb	r3!, {s14}
 800de74:	3c01      	subs	r4, #1
 800de76:	ee77 7a87 	vadd.f32	s15, s15, s14
 800de7a:	e78f      	b.n	800dd9c <__kernel_rem_pio2f+0x3d8>
 800de7c:	eef1 6a66 	vneg.f32	s13, s13
 800de80:	eeb1 7a47 	vneg.f32	s14, s14
 800de84:	edc7 6a00 	vstr	s13, [r7]
 800de88:	ed87 7a01 	vstr	s14, [r7, #4]
 800de8c:	eef1 7a67 	vneg.f32	s15, s15
 800de90:	e790      	b.n	800ddb4 <__kernel_rem_pio2f+0x3f0>
 800de92:	bf00      	nop

0800de94 <floorf>:
 800de94:	ee10 3a10 	vmov	r3, s0
 800de98:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800de9c:	3a7f      	subs	r2, #127	@ 0x7f
 800de9e:	2a16      	cmp	r2, #22
 800dea0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800dea4:	dc2b      	bgt.n	800defe <floorf+0x6a>
 800dea6:	2a00      	cmp	r2, #0
 800dea8:	da12      	bge.n	800ded0 <floorf+0x3c>
 800deaa:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800df10 <floorf+0x7c>
 800deae:	ee30 0a27 	vadd.f32	s0, s0, s15
 800deb2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800deb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800deba:	dd06      	ble.n	800deca <floorf+0x36>
 800debc:	2b00      	cmp	r3, #0
 800debe:	da24      	bge.n	800df0a <floorf+0x76>
 800dec0:	2900      	cmp	r1, #0
 800dec2:	4b14      	ldr	r3, [pc, #80]	@ (800df14 <floorf+0x80>)
 800dec4:	bf08      	it	eq
 800dec6:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800deca:	ee00 3a10 	vmov	s0, r3
 800dece:	4770      	bx	lr
 800ded0:	4911      	ldr	r1, [pc, #68]	@ (800df18 <floorf+0x84>)
 800ded2:	4111      	asrs	r1, r2
 800ded4:	420b      	tst	r3, r1
 800ded6:	d0fa      	beq.n	800dece <floorf+0x3a>
 800ded8:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800df10 <floorf+0x7c>
 800dedc:	ee30 0a27 	vadd.f32	s0, s0, s15
 800dee0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800dee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dee8:	ddef      	ble.n	800deca <floorf+0x36>
 800deea:	2b00      	cmp	r3, #0
 800deec:	bfbe      	ittt	lt
 800deee:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800def2:	fa40 f202 	asrlt.w	r2, r0, r2
 800def6:	189b      	addlt	r3, r3, r2
 800def8:	ea23 0301 	bic.w	r3, r3, r1
 800defc:	e7e5      	b.n	800deca <floorf+0x36>
 800defe:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800df02:	d3e4      	bcc.n	800dece <floorf+0x3a>
 800df04:	ee30 0a00 	vadd.f32	s0, s0, s0
 800df08:	4770      	bx	lr
 800df0a:	2300      	movs	r3, #0
 800df0c:	e7dd      	b.n	800deca <floorf+0x36>
 800df0e:	bf00      	nop
 800df10:	7149f2ca 	.word	0x7149f2ca
 800df14:	bf800000 	.word	0xbf800000
 800df18:	007fffff 	.word	0x007fffff

0800df1c <_init>:
 800df1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df1e:	bf00      	nop
 800df20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df22:	bc08      	pop	{r3}
 800df24:	469e      	mov	lr, r3
 800df26:	4770      	bx	lr

0800df28 <_fini>:
 800df28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df2a:	bf00      	nop
 800df2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df2e:	bc08      	pop	{r3}
 800df30:	469e      	mov	lr, r3
 800df32:	4770      	bx	lr
