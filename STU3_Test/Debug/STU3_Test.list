
STU3_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e58  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08005030  08005030  00006030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005040  08005040  0000700c  2**0
                  CONTENTS
  4 .ARM          00000000  08005040  08005040  0000700c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005040  08005040  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005040  08005040  00006040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005044  08005044  00006044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005048  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  2000000c  08005054  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  08005054  0000727c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010d79  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002336  00000000  00000000  00017db5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001138  00000000  00000000  0001a0f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d47  00000000  00000000  0001b228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026f3f  00000000  00000000  0001bf6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000122e5  00000000  00000000  00042eae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108ce4  00000000  00000000  00055193  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015de77  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049f0  00000000  00000000  0015debc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  001628ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005018 	.word	0x08005018

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08005018 	.word	0x08005018

08000218 <Encoder_Init>:
#include "Encoder.h"

#define PULSES_PER_REV 12000.0f
#define TWO_PI 6.283185f

void Encoder_Init(Encoder *enc, TIM_HandleTypeDef *htim) {
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
    enc->htim = htim;
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	683a      	ldr	r2, [r7, #0]
 8000226:	601a      	str	r2, [r3, #0]
    HAL_TIM_Encoder_Start(htim, TIM_CHANNEL_ALL);
 8000228:	213c      	movs	r1, #60	@ 0x3c
 800022a:	6838      	ldr	r0, [r7, #0]
 800022c:	f003 fe46 	bl	8003ebc <HAL_TIM_Encoder_Start>

    enc->lastRawPosition = __HAL_TIM_GET_COUNTER(htim);
 8000230:	683b      	ldr	r3, [r7, #0]
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000236:	461a      	mov	r2, r3
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	605a      	str	r2, [r3, #4]
    enc->position = 0;
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	f04f 0200 	mov.w	r2, #0
 8000242:	609a      	str	r2, [r3, #8]
    enc->velocity = 0;
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	f04f 0200 	mov.w	r2, #0
 800024a:	60da      	str	r2, [r3, #12]
    enc->acceleration = 0;
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	f04f 0200 	mov.w	r2, #0
 8000252:	611a      	str	r2, [r3, #16]
    enc->lastPosition = 0;
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	f04f 0200 	mov.w	r2, #0
 800025a:	615a      	str	r2, [r3, #20]
    enc->lastVelocity = 0;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f04f 0200 	mov.w	r2, #0
 8000262:	619a      	str	r2, [r3, #24]
}
 8000264:	bf00      	nop
 8000266:	3708      	adds	r7, #8
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}

0800026c <Encoder_Update>:

void Encoder_Update(Encoder *enc, float dt) {
 800026c:	b480      	push	{r7}
 800026e:	b085      	sub	sp, #20
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
 8000274:	ed87 0a00 	vstr	s0, [r7]
    int32_t rawPosition = __HAL_TIM_GET_COUNTER(enc->htim);
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000280:	60bb      	str	r3, [r7, #8]
    int32_t deltaRaw = rawPosition - enc->lastRawPosition;
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	685b      	ldr	r3, [r3, #4]
 8000286:	68ba      	ldr	r2, [r7, #8]
 8000288:	1ad3      	subs	r3, r2, r3
 800028a:	60fb      	str	r3, [r7, #12]

    // Handle 16-bit counter wrap-around
    if (deltaRaw > 32767) {
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000292:	db04      	blt.n	800029e <Encoder_Update+0x32>
        deltaRaw -= 65536;
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 800029a:	60fb      	str	r3, [r7, #12]
 800029c:	e007      	b.n	80002ae <Encoder_Update+0x42>
    } else if (deltaRaw < -32768) {
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80002a4:	da03      	bge.n	80002ae <Encoder_Update+0x42>
        deltaRaw += 65536;
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80002ac:	60fb      	str	r3, [r7, #12]
    }

    enc->position += ((float)deltaRaw * TWO_PI) / PULSES_PER_REV;
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	ed93 7a02 	vldr	s14, [r3, #8]
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	ee07 3a90 	vmov	s15, r3
 80002ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80002be:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8000338 <Encoder_Update+0xcc>
 80002c2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80002c6:	ed9f 6a1d 	vldr	s12, [pc, #116]	@ 800033c <Encoder_Update+0xd0>
 80002ca:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80002ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	edc3 7a02 	vstr	s15, [r3, #8]
    enc->velocity = (enc->position - enc->lastPosition) / dt;
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	ed93 7a02 	vldr	s14, [r3, #8]
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	edd3 7a05 	vldr	s15, [r3, #20]
 80002e4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80002e8:	ed97 7a00 	vldr	s14, [r7]
 80002ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	edc3 7a03 	vstr	s15, [r3, #12]
    enc->acceleration = (enc->velocity - enc->lastVelocity) / dt;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	ed93 7a03 	vldr	s14, [r3, #12]
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	edd3 7a06 	vldr	s15, [r3, #24]
 8000302:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000306:	ed97 7a00 	vldr	s14, [r7]
 800030a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	edc3 7a04 	vstr	s15, [r3, #16]

    enc->lastRawPosition = rawPosition;
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	68ba      	ldr	r2, [r7, #8]
 8000318:	605a      	str	r2, [r3, #4]
    enc->lastPosition = enc->position;
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	689a      	ldr	r2, [r3, #8]
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	615a      	str	r2, [r3, #20]
    enc->lastVelocity = enc->velocity;
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	68da      	ldr	r2, [r3, #12]
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	619a      	str	r2, [r3, #24]
}
 800032a:	bf00      	nop
 800032c:	3714      	adds	r7, #20
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	40c90fda 	.word	0x40c90fda
 800033c:	463b8000 	.word	0x463b8000

08000340 <Encoder_GetPosition>:

float Encoder_GetPosition(Encoder *enc) {
 8000340:	b480      	push	{r7}
 8000342:	b083      	sub	sp, #12
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
    return enc->position;
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	689b      	ldr	r3, [r3, #8]
 800034c:	ee07 3a90 	vmov	s15, r3
}
 8000350:	eeb0 0a67 	vmov.f32	s0, s15
 8000354:	370c      	adds	r7, #12
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr

0800035e <Encoder_GetVelocity>:

float Encoder_GetVelocity(Encoder *enc) {
 800035e:	b480      	push	{r7}
 8000360:	b083      	sub	sp, #12
 8000362:	af00      	add	r7, sp, #0
 8000364:	6078      	str	r0, [r7, #4]
    return enc->velocity;
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	68db      	ldr	r3, [r3, #12]
 800036a:	ee07 3a90 	vmov	s15, r3
}
 800036e:	eeb0 0a67 	vmov.f32	s0, s15
 8000372:	370c      	adds	r7, #12
 8000374:	46bd      	mov	sp, r7
 8000376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037a:	4770      	bx	lr

0800037c <Encoder_GetAcceleration>:

float Encoder_GetAcceleration(Encoder *enc) {
 800037c:	b480      	push	{r7}
 800037e:	b083      	sub	sp, #12
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
    return enc->acceleration;
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	691b      	ldr	r3, [r3, #16]
 8000388:	ee07 3a90 	vmov	s15, r3
}
 800038c:	eeb0 0a67 	vmov.f32	s0, s15
 8000390:	370c      	adds	r7, #12
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr
	...

0800039c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b092      	sub	sp, #72	@ 0x48
 80003a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003a2:	f000 fff6 	bl	8001392 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003a6:	f000 f8a3 	bl	80004f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003aa:	f000 fc71 	bl	8000c90 <MX_GPIO_Init>
  MX_TIM3_Init();
 80003ae:	f000 fa63 	bl	8000878 <MX_TIM3_Init>
  MX_ADC1_Init();
 80003b2:	f000 f8e9 	bl	8000588 <MX_ADC1_Init>
  MX_TIM1_Init();
 80003b6:	f000 f961 	bl	800067c <MX_TIM1_Init>
  MX_TIM2_Init();
 80003ba:	f000 fa0f 	bl	80007dc <MX_TIM2_Init>
  MX_TIM4_Init();
 80003be:	f000 fab1 	bl	8000924 <MX_TIM4_Init>
  MX_TIM20_Init();
 80003c2:	f000 fbb5 	bl	8000b30 <MX_TIM20_Init>
  MX_TIM8_Init();
 80003c6:	f000 fb03 	bl	80009d0 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
	Encoder encoder1;
	Encoder encoder2;
	Encoder_Init(&encoder1, &htim4);
 80003ca:	f107 0320 	add.w	r3, r7, #32
 80003ce:	493d      	ldr	r1, [pc, #244]	@ (80004c4 <main+0x128>)
 80003d0:	4618      	mov	r0, r3
 80003d2:	f7ff ff21 	bl	8000218 <Encoder_Init>
	Encoder_Init(&encoder2, &htim3);
 80003d6:	1d3b      	adds	r3, r7, #4
 80003d8:	493b      	ldr	r1, [pc, #236]	@ (80004c8 <main+0x12c>)
 80003da:	4618      	mov	r0, r3
 80003dc:	f7ff ff1c 	bl	8000218 <Encoder_Init>
	int lastTick = 0;
 80003e0:	2300      	movs	r3, #0
 80003e2:	647b      	str	r3, [r7, #68]	@ 0x44
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80003e4:	213c      	movs	r1, #60	@ 0x3c
 80003e6:	4838      	ldr	r0, [pc, #224]	@ (80004c8 <main+0x12c>)
 80003e8:	f003 fd68 	bl	8003ebc <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80003ec:	213c      	movs	r1, #60	@ 0x3c
 80003ee:	4835      	ldr	r0, [pc, #212]	@ (80004c4 <main+0x128>)
 80003f0:	f003 fd64 	bl	8003ebc <HAL_TIM_Encoder_Start>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		uint32_t currentTick = HAL_GetTick();
 80003f4:	f001 f832 	bl	800145c <HAL_GetTick>
 80003f8:	6438      	str	r0, [r7, #64]	@ 0x40
		float dt = (currentTick - lastTick) / 1000.0f;
 80003fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80003fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80003fe:	1ad3      	subs	r3, r2, r3
 8000400:	ee07 3a90 	vmov	s15, r3
 8000404:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000408:	eddf 6a30 	vldr	s13, [pc, #192]	@ 80004cc <main+0x130>
 800040c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000410:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim4);
 8000414:	4b2b      	ldr	r3, [pc, #172]	@ (80004c4 <main+0x128>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800041a:	4a2d      	ldr	r2, [pc, #180]	@ (80004d0 <main+0x134>)
 800041c:	6013      	str	r3, [r2, #0]
		if (dt >= 0.01f) {
 800041e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000422:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80004d4 <main+0x138>
 8000426:	eef4 7ac7 	vcmpe.f32	s15, s14
 800042a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800042e:	db47      	blt.n	80004c0 <main+0x124>
			Encoder_Update(&encoder1, dt);
 8000430:	f107 0320 	add.w	r3, r7, #32
 8000434:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 8000438:	4618      	mov	r0, r3
 800043a:	f7ff ff17 	bl	800026c <Encoder_Update>
			Encoder_Update(&encoder2, dt);
 800043e:	1d3b      	adds	r3, r7, #4
 8000440:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 8000444:	4618      	mov	r0, r3
 8000446:	f7ff ff11 	bl	800026c <Encoder_Update>
			lastTick = currentTick;
 800044a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800044c:	647b      	str	r3, [r7, #68]	@ 0x44

			p1 = Encoder_GetPosition(&encoder1);
 800044e:	f107 0320 	add.w	r3, r7, #32
 8000452:	4618      	mov	r0, r3
 8000454:	f7ff ff74 	bl	8000340 <Encoder_GetPosition>
 8000458:	eef0 7a40 	vmov.f32	s15, s0
 800045c:	4b1e      	ldr	r3, [pc, #120]	@ (80004d8 <main+0x13c>)
 800045e:	edc3 7a00 	vstr	s15, [r3]
			v1 = Encoder_GetVelocity(&encoder1);
 8000462:	f107 0320 	add.w	r3, r7, #32
 8000466:	4618      	mov	r0, r3
 8000468:	f7ff ff79 	bl	800035e <Encoder_GetVelocity>
 800046c:	eef0 7a40 	vmov.f32	s15, s0
 8000470:	4b1a      	ldr	r3, [pc, #104]	@ (80004dc <main+0x140>)
 8000472:	edc3 7a00 	vstr	s15, [r3]
			a1 = Encoder_GetAcceleration(&encoder1);
 8000476:	f107 0320 	add.w	r3, r7, #32
 800047a:	4618      	mov	r0, r3
 800047c:	f7ff ff7e 	bl	800037c <Encoder_GetAcceleration>
 8000480:	eef0 7a40 	vmov.f32	s15, s0
 8000484:	4b16      	ldr	r3, [pc, #88]	@ (80004e0 <main+0x144>)
 8000486:	edc3 7a00 	vstr	s15, [r3]

			p2 = Encoder_GetPosition(&encoder2);
 800048a:	1d3b      	adds	r3, r7, #4
 800048c:	4618      	mov	r0, r3
 800048e:	f7ff ff57 	bl	8000340 <Encoder_GetPosition>
 8000492:	eef0 7a40 	vmov.f32	s15, s0
 8000496:	4b13      	ldr	r3, [pc, #76]	@ (80004e4 <main+0x148>)
 8000498:	edc3 7a00 	vstr	s15, [r3]
			v2 = Encoder_GetVelocity(&encoder2);
 800049c:	1d3b      	adds	r3, r7, #4
 800049e:	4618      	mov	r0, r3
 80004a0:	f7ff ff5d 	bl	800035e <Encoder_GetVelocity>
 80004a4:	eef0 7a40 	vmov.f32	s15, s0
 80004a8:	4b0f      	ldr	r3, [pc, #60]	@ (80004e8 <main+0x14c>)
 80004aa:	edc3 7a00 	vstr	s15, [r3]
			a2 = Encoder_GetAcceleration(&encoder2);
 80004ae:	1d3b      	adds	r3, r7, #4
 80004b0:	4618      	mov	r0, r3
 80004b2:	f7ff ff63 	bl	800037c <Encoder_GetAcceleration>
 80004b6:	eef0 7a40 	vmov.f32	s15, s0
 80004ba:	4b0c      	ldr	r3, [pc, #48]	@ (80004ec <main+0x150>)
 80004bc:	edc3 7a00 	vstr	s15, [r3]
	while (1) {
 80004c0:	e798      	b.n	80003f4 <main+0x58>
 80004c2:	bf00      	nop
 80004c4:	20000178 	.word	0x20000178
 80004c8:	2000012c 	.word	0x2000012c
 80004cc:	447a0000 	.word	0x447a0000
 80004d0:	2000025c 	.word	0x2000025c
 80004d4:	3c23d70a 	.word	0x3c23d70a
 80004d8:	20000260 	.word	0x20000260
 80004dc:	20000264 	.word	0x20000264
 80004e0:	20000268 	.word	0x20000268
 80004e4:	2000026c 	.word	0x2000026c
 80004e8:	20000270 	.word	0x20000270
 80004ec:	20000274 	.word	0x20000274

080004f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b094      	sub	sp, #80	@ 0x50
 80004f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f6:	f107 0318 	add.w	r3, r7, #24
 80004fa:	2238      	movs	r2, #56	@ 0x38
 80004fc:	2100      	movs	r1, #0
 80004fe:	4618      	mov	r0, r3
 8000500:	f004 fd5e 	bl	8004fc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000504:	1d3b      	adds	r3, r7, #4
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	605a      	str	r2, [r3, #4]
 800050c:	609a      	str	r2, [r3, #8]
 800050e:	60da      	str	r2, [r3, #12]
 8000510:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000512:	2000      	movs	r0, #0
 8000514:	f002 fb7c 	bl	8002c10 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000518:	2302      	movs	r3, #2
 800051a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800051c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000520:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000522:	2340      	movs	r3, #64	@ 0x40
 8000524:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000526:	2302      	movs	r3, #2
 8000528:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800052a:	2302      	movs	r3, #2
 800052c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800052e:	2304      	movs	r3, #4
 8000530:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000532:	2355      	movs	r3, #85	@ 0x55
 8000534:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000536:	2302      	movs	r3, #2
 8000538:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800053a:	2302      	movs	r3, #2
 800053c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800053e:	2302      	movs	r3, #2
 8000540:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000542:	f107 0318 	add.w	r3, r7, #24
 8000546:	4618      	mov	r0, r3
 8000548:	f002 fc16 	bl	8002d78 <HAL_RCC_OscConfig>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000552:	f000 fc8d 	bl	8000e70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000556:	230f      	movs	r3, #15
 8000558:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800055a:	2303      	movs	r3, #3
 800055c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800055e:	2300      	movs	r3, #0
 8000560:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000562:	2300      	movs	r3, #0
 8000564:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000566:	2300      	movs	r3, #0
 8000568:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800056a:	1d3b      	adds	r3, r7, #4
 800056c:	2104      	movs	r1, #4
 800056e:	4618      	mov	r0, r3
 8000570:	f002 ff14 	bl	800339c <HAL_RCC_ClockConfig>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800057a:	f000 fc79 	bl	8000e70 <Error_Handler>
  }
}
 800057e:	bf00      	nop
 8000580:	3750      	adds	r7, #80	@ 0x50
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
	...

08000588 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b08c      	sub	sp, #48	@ 0x30
 800058c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800058e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800059a:	1d3b      	adds	r3, r7, #4
 800059c:	2220      	movs	r2, #32
 800059e:	2100      	movs	r1, #0
 80005a0:	4618      	mov	r0, r3
 80005a2:	f004 fd0d 	bl	8004fc0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005a6:	4b32      	ldr	r3, [pc, #200]	@ (8000670 <MX_ADC1_Init+0xe8>)
 80005a8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80005ac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005ae:	4b30      	ldr	r3, [pc, #192]	@ (8000670 <MX_ADC1_Init+0xe8>)
 80005b0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80005b4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005b6:	4b2e      	ldr	r3, [pc, #184]	@ (8000670 <MX_ADC1_Init+0xe8>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005bc:	4b2c      	ldr	r3, [pc, #176]	@ (8000670 <MX_ADC1_Init+0xe8>)
 80005be:	2200      	movs	r2, #0
 80005c0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80005c2:	4b2b      	ldr	r3, [pc, #172]	@ (8000670 <MX_ADC1_Init+0xe8>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005c8:	4b29      	ldr	r3, [pc, #164]	@ (8000670 <MX_ADC1_Init+0xe8>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005ce:	4b28      	ldr	r3, [pc, #160]	@ (8000670 <MX_ADC1_Init+0xe8>)
 80005d0:	2204      	movs	r2, #4
 80005d2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005d4:	4b26      	ldr	r3, [pc, #152]	@ (8000670 <MX_ADC1_Init+0xe8>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005da:	4b25      	ldr	r3, [pc, #148]	@ (8000670 <MX_ADC1_Init+0xe8>)
 80005dc:	2200      	movs	r2, #0
 80005de:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80005e0:	4b23      	ldr	r3, [pc, #140]	@ (8000670 <MX_ADC1_Init+0xe8>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005e6:	4b22      	ldr	r3, [pc, #136]	@ (8000670 <MX_ADC1_Init+0xe8>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005ee:	4b20      	ldr	r3, [pc, #128]	@ (8000670 <MX_ADC1_Init+0xe8>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005f4:	4b1e      	ldr	r3, [pc, #120]	@ (8000670 <MX_ADC1_Init+0xe8>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005fa:	4b1d      	ldr	r3, [pc, #116]	@ (8000670 <MX_ADC1_Init+0xe8>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000602:	4b1b      	ldr	r3, [pc, #108]	@ (8000670 <MX_ADC1_Init+0xe8>)
 8000604:	2200      	movs	r2, #0
 8000606:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000608:	4b19      	ldr	r3, [pc, #100]	@ (8000670 <MX_ADC1_Init+0xe8>)
 800060a:	2200      	movs	r2, #0
 800060c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000610:	4817      	ldr	r0, [pc, #92]	@ (8000670 <MX_ADC1_Init+0xe8>)
 8000612:	f001 f905 	bl	8001820 <HAL_ADC_Init>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800061c:	f000 fc28 	bl	8000e70 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000620:	2300      	movs	r3, #0
 8000622:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000624:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000628:	4619      	mov	r1, r3
 800062a:	4811      	ldr	r0, [pc, #68]	@ (8000670 <MX_ADC1_Init+0xe8>)
 800062c:	f001 ff1a 	bl	8002464 <HAL_ADCEx_MultiModeConfigChannel>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000636:	f000 fc1b 	bl	8000e70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800063a:	4b0e      	ldr	r3, [pc, #56]	@ (8000674 <MX_ADC1_Init+0xec>)
 800063c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800063e:	2306      	movs	r3, #6
 8000640:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000642:	2300      	movs	r3, #0
 8000644:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000646:	4b0c      	ldr	r3, [pc, #48]	@ (8000678 <MX_ADC1_Init+0xf0>)
 8000648:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800064a:	2304      	movs	r3, #4
 800064c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	4619      	mov	r1, r3
 8000656:	4806      	ldr	r0, [pc, #24]	@ (8000670 <MX_ADC1_Init+0xe8>)
 8000658:	f001 fa9e 	bl	8001b98 <HAL_ADC_ConfigChannel>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000662:	f000 fc05 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000666:	bf00      	nop
 8000668:	3730      	adds	r7, #48	@ 0x30
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20000028 	.word	0x20000028
 8000674:	04300002 	.word	0x04300002
 8000678:	407f0000 	.word	0x407f0000

0800067c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b09c      	sub	sp, #112	@ 0x70
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000682:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000690:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800069c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]
 80006ac:	615a      	str	r2, [r3, #20]
 80006ae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	2234      	movs	r2, #52	@ 0x34
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f004 fc82 	bl	8004fc0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006bc:	4b45      	ldr	r3, [pc, #276]	@ (80007d4 <MX_TIM1_Init+0x158>)
 80006be:	4a46      	ldr	r2, [pc, #280]	@ (80007d8 <MX_TIM1_Init+0x15c>)
 80006c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80006c2:	4b44      	ldr	r3, [pc, #272]	@ (80007d4 <MX_TIM1_Init+0x158>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c8:	4b42      	ldr	r3, [pc, #264]	@ (80007d4 <MX_TIM1_Init+0x158>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000;
 80006ce:	4b41      	ldr	r3, [pc, #260]	@ (80007d4 <MX_TIM1_Init+0x158>)
 80006d0:	f64e 2260 	movw	r2, #60000	@ 0xea60
 80006d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006d6:	4b3f      	ldr	r3, [pc, #252]	@ (80007d4 <MX_TIM1_Init+0x158>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006dc:	4b3d      	ldr	r3, [pc, #244]	@ (80007d4 <MX_TIM1_Init+0x158>)
 80006de:	2200      	movs	r2, #0
 80006e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006e2:	4b3c      	ldr	r3, [pc, #240]	@ (80007d4 <MX_TIM1_Init+0x158>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006e8:	483a      	ldr	r0, [pc, #232]	@ (80007d4 <MX_TIM1_Init+0x158>)
 80006ea:	f003 fa89 	bl	8003c00 <HAL_TIM_Base_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80006f4:	f000 fbbc 	bl	8000e70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006fc:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006fe:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000702:	4619      	mov	r1, r3
 8000704:	4833      	ldr	r0, [pc, #204]	@ (80007d4 <MX_TIM1_Init+0x158>)
 8000706:	f003 fd7b 	bl	8004200 <HAL_TIM_ConfigClockSource>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000710:	f000 fbae 	bl	8000e70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000714:	482f      	ldr	r0, [pc, #188]	@ (80007d4 <MX_TIM1_Init+0x158>)
 8000716:	f003 faca 	bl	8003cae <HAL_TIM_PWM_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000720:	f000 fba6 	bl	8000e70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000724:	2300      	movs	r3, #0
 8000726:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000728:	2300      	movs	r3, #0
 800072a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800072c:	2300      	movs	r3, #0
 800072e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000730:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000734:	4619      	mov	r1, r3
 8000736:	4827      	ldr	r0, [pc, #156]	@ (80007d4 <MX_TIM1_Init+0x158>)
 8000738:	f004 fb18 	bl	8004d6c <HAL_TIMEx_MasterConfigSynchronization>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000742:	f000 fb95 	bl	8000e70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000746:	2360      	movs	r3, #96	@ 0x60
 8000748:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800074a:	2300      	movs	r3, #0
 800074c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800074e:	2300      	movs	r3, #0
 8000750:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000752:	2300      	movs	r3, #0
 8000754:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000756:	2300      	movs	r3, #0
 8000758:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800075a:	2300      	movs	r3, #0
 800075c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800075e:	2300      	movs	r3, #0
 8000760:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000762:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000766:	2208      	movs	r2, #8
 8000768:	4619      	mov	r1, r3
 800076a:	481a      	ldr	r0, [pc, #104]	@ (80007d4 <MX_TIM1_Init+0x158>)
 800076c:	f003 fc34 	bl	8003fd8 <HAL_TIM_PWM_ConfigChannel>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000776:	f000 fb7b 	bl	8000e70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800077a:	2300      	movs	r3, #0
 800077c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800077e:	2300      	movs	r3, #0
 8000780:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000782:	2300      	movs	r3, #0
 8000784:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000786:	2300      	movs	r3, #0
 8000788:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800078e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000792:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000798:	2300      	movs	r3, #0
 800079a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800079c:	2300      	movs	r3, #0
 800079e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80007a0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80007a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80007aa:	2300      	movs	r3, #0
 80007ac:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007ae:	2300      	movs	r3, #0
 80007b0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	4619      	mov	r1, r3
 80007b6:	4807      	ldr	r0, [pc, #28]	@ (80007d4 <MX_TIM1_Init+0x158>)
 80007b8:	f004 fb6e 	bl	8004e98 <HAL_TIMEx_ConfigBreakDeadTime>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 80007c2:	f000 fb55 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007c6:	4803      	ldr	r0, [pc, #12]	@ (80007d4 <MX_TIM1_Init+0x158>)
 80007c8:	f000 fcda 	bl	8001180 <HAL_TIM_MspPostInit>

}
 80007cc:	bf00      	nop
 80007ce:	3770      	adds	r7, #112	@ 0x70
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	20000094 	.word	0x20000094
 80007d8:	40012c00 	.word	0x40012c00

080007dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b088      	sub	sp, #32
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007e2:	f107 0310 	add.w	r3, r7, #16
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007fa:	4b1e      	ldr	r3, [pc, #120]	@ (8000874 <MX_TIM2_Init+0x98>)
 80007fc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000800:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000802:	4b1c      	ldr	r3, [pc, #112]	@ (8000874 <MX_TIM2_Init+0x98>)
 8000804:	2200      	movs	r2, #0
 8000806:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000808:	4b1a      	ldr	r3, [pc, #104]	@ (8000874 <MX_TIM2_Init+0x98>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800080e:	4b19      	ldr	r3, [pc, #100]	@ (8000874 <MX_TIM2_Init+0x98>)
 8000810:	f04f 32ff 	mov.w	r2, #4294967295
 8000814:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000816:	4b17      	ldr	r3, [pc, #92]	@ (8000874 <MX_TIM2_Init+0x98>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800081c:	4b15      	ldr	r3, [pc, #84]	@ (8000874 <MX_TIM2_Init+0x98>)
 800081e:	2200      	movs	r2, #0
 8000820:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000822:	4814      	ldr	r0, [pc, #80]	@ (8000874 <MX_TIM2_Init+0x98>)
 8000824:	f003 f9ec 	bl	8003c00 <HAL_TIM_Base_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800082e:	f000 fb1f 	bl	8000e70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000832:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000836:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000838:	f107 0310 	add.w	r3, r7, #16
 800083c:	4619      	mov	r1, r3
 800083e:	480d      	ldr	r0, [pc, #52]	@ (8000874 <MX_TIM2_Init+0x98>)
 8000840:	f003 fcde 	bl	8004200 <HAL_TIM_ConfigClockSource>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800084a:	f000 fb11 	bl	8000e70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000852:	2300      	movs	r3, #0
 8000854:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	4619      	mov	r1, r3
 800085a:	4806      	ldr	r0, [pc, #24]	@ (8000874 <MX_TIM2_Init+0x98>)
 800085c:	f004 fa86 	bl	8004d6c <HAL_TIMEx_MasterConfigSynchronization>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000866:	f000 fb03 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800086a:	bf00      	nop
 800086c:	3720      	adds	r7, #32
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	200000e0 	.word	0x200000e0

08000878 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08c      	sub	sp, #48	@ 0x30
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800087e:	f107 030c 	add.w	r3, r7, #12
 8000882:	2224      	movs	r2, #36	@ 0x24
 8000884:	2100      	movs	r1, #0
 8000886:	4618      	mov	r0, r3
 8000888:	f004 fb9a 	bl	8004fc0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800088c:	463b      	mov	r3, r7
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000896:	4b21      	ldr	r3, [pc, #132]	@ (800091c <MX_TIM3_Init+0xa4>)
 8000898:	4a21      	ldr	r2, [pc, #132]	@ (8000920 <MX_TIM3_Init+0xa8>)
 800089a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800089c:	4b1f      	ldr	r3, [pc, #124]	@ (800091c <MX_TIM3_Init+0xa4>)
 800089e:	2200      	movs	r2, #0
 80008a0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a2:	4b1e      	ldr	r3, [pc, #120]	@ (800091c <MX_TIM3_Init+0xa4>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 80008a8:	4b1c      	ldr	r3, [pc, #112]	@ (800091c <MX_TIM3_Init+0xa4>)
 80008aa:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80008ae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b0:	4b1a      	ldr	r3, [pc, #104]	@ (800091c <MX_TIM3_Init+0xa4>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b6:	4b19      	ldr	r3, [pc, #100]	@ (800091c <MX_TIM3_Init+0xa4>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80008bc:	2303      	movs	r3, #3
 80008be:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008c0:	2300      	movs	r3, #0
 80008c2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008c4:	2301      	movs	r3, #1
 80008c6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008c8:	2300      	movs	r3, #0
 80008ca:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80008d0:	2300      	movs	r3, #0
 80008d2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008d4:	2301      	movs	r3, #1
 80008d6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80008d8:	2300      	movs	r3, #0
 80008da:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80008e0:	f107 030c 	add.w	r3, r7, #12
 80008e4:	4619      	mov	r1, r3
 80008e6:	480d      	ldr	r0, [pc, #52]	@ (800091c <MX_TIM3_Init+0xa4>)
 80008e8:	f003 fa42 	bl	8003d70 <HAL_TIM_Encoder_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80008f2:	f000 fabd 	bl	8000e70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008f6:	2300      	movs	r3, #0
 80008f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008fa:	2300      	movs	r3, #0
 80008fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008fe:	463b      	mov	r3, r7
 8000900:	4619      	mov	r1, r3
 8000902:	4806      	ldr	r0, [pc, #24]	@ (800091c <MX_TIM3_Init+0xa4>)
 8000904:	f004 fa32 	bl	8004d6c <HAL_TIMEx_MasterConfigSynchronization>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800090e:	f000 faaf 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000912:	bf00      	nop
 8000914:	3730      	adds	r7, #48	@ 0x30
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	2000012c 	.word	0x2000012c
 8000920:	40000400 	.word	0x40000400

08000924 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08c      	sub	sp, #48	@ 0x30
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800092a:	f107 030c 	add.w	r3, r7, #12
 800092e:	2224      	movs	r2, #36	@ 0x24
 8000930:	2100      	movs	r1, #0
 8000932:	4618      	mov	r0, r3
 8000934:	f004 fb44 	bl	8004fc0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000938:	463b      	mov	r3, r7
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000942:	4b21      	ldr	r3, [pc, #132]	@ (80009c8 <MX_TIM4_Init+0xa4>)
 8000944:	4a21      	ldr	r2, [pc, #132]	@ (80009cc <MX_TIM4_Init+0xa8>)
 8000946:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000948:	4b1f      	ldr	r3, [pc, #124]	@ (80009c8 <MX_TIM4_Init+0xa4>)
 800094a:	2200      	movs	r2, #0
 800094c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094e:	4b1e      	ldr	r3, [pc, #120]	@ (80009c8 <MX_TIM4_Init+0xa4>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 59999;
 8000954:	4b1c      	ldr	r3, [pc, #112]	@ (80009c8 <MX_TIM4_Init+0xa4>)
 8000956:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 800095a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800095c:	4b1a      	ldr	r3, [pc, #104]	@ (80009c8 <MX_TIM4_Init+0xa4>)
 800095e:	2200      	movs	r2, #0
 8000960:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000962:	4b19      	ldr	r3, [pc, #100]	@ (80009c8 <MX_TIM4_Init+0xa4>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000968:	2301      	movs	r3, #1
 800096a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800096c:	2300      	movs	r3, #0
 800096e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000970:	2301      	movs	r3, #1
 8000972:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000974:	2300      	movs	r3, #0
 8000976:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800097c:	2300      	movs	r3, #0
 800097e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000980:	2301      	movs	r3, #1
 8000982:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000984:	2300      	movs	r3, #0
 8000986:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000988:	2300      	movs	r3, #0
 800098a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800098c:	f107 030c 	add.w	r3, r7, #12
 8000990:	4619      	mov	r1, r3
 8000992:	480d      	ldr	r0, [pc, #52]	@ (80009c8 <MX_TIM4_Init+0xa4>)
 8000994:	f003 f9ec 	bl	8003d70 <HAL_TIM_Encoder_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800099e:	f000 fa67 	bl	8000e70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a2:	2300      	movs	r3, #0
 80009a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a6:	2300      	movs	r3, #0
 80009a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009aa:	463b      	mov	r3, r7
 80009ac:	4619      	mov	r1, r3
 80009ae:	4806      	ldr	r0, [pc, #24]	@ (80009c8 <MX_TIM4_Init+0xa4>)
 80009b0:	f004 f9dc 	bl	8004d6c <HAL_TIMEx_MasterConfigSynchronization>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80009ba:	f000 fa59 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	3730      	adds	r7, #48	@ 0x30
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20000178 	.word	0x20000178
 80009cc:	40000800 	.word	0x40000800

080009d0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b09c      	sub	sp, #112	@ 0x70
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009d6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
 80009e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009e4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009f0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]
 8000a00:	615a      	str	r2, [r3, #20]
 8000a02:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a04:	1d3b      	adds	r3, r7, #4
 8000a06:	2234      	movs	r2, #52	@ 0x34
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f004 fad8 	bl	8004fc0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000a10:	4b45      	ldr	r3, [pc, #276]	@ (8000b28 <MX_TIM8_Init+0x158>)
 8000a12:	4a46      	ldr	r2, [pc, #280]	@ (8000b2c <MX_TIM8_Init+0x15c>)
 8000a14:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000a16:	4b44      	ldr	r3, [pc, #272]	@ (8000b28 <MX_TIM8_Init+0x158>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a1c:	4b42      	ldr	r3, [pc, #264]	@ (8000b28 <MX_TIM8_Init+0x158>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000a22:	4b41      	ldr	r3, [pc, #260]	@ (8000b28 <MX_TIM8_Init+0x158>)
 8000a24:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a28:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a2a:	4b3f      	ldr	r3, [pc, #252]	@ (8000b28 <MX_TIM8_Init+0x158>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000a30:	4b3d      	ldr	r3, [pc, #244]	@ (8000b28 <MX_TIM8_Init+0x158>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a36:	4b3c      	ldr	r3, [pc, #240]	@ (8000b28 <MX_TIM8_Init+0x158>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000a3c:	483a      	ldr	r0, [pc, #232]	@ (8000b28 <MX_TIM8_Init+0x158>)
 8000a3e:	f003 f8df 	bl	8003c00 <HAL_TIM_Base_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8000a48:	f000 fa12 	bl	8000e70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a50:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000a52:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000a56:	4619      	mov	r1, r3
 8000a58:	4833      	ldr	r0, [pc, #204]	@ (8000b28 <MX_TIM8_Init+0x158>)
 8000a5a:	f003 fbd1 	bl	8004200 <HAL_TIM_ConfigClockSource>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8000a64:	f000 fa04 	bl	8000e70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000a68:	482f      	ldr	r0, [pc, #188]	@ (8000b28 <MX_TIM8_Init+0x158>)
 8000a6a:	f003 f920 	bl	8003cae <HAL_TIM_PWM_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8000a74:	f000 f9fc 	bl	8000e70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a80:	2300      	movs	r3, #0
 8000a82:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000a84:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4827      	ldr	r0, [pc, #156]	@ (8000b28 <MX_TIM8_Init+0x158>)
 8000a8c:	f004 f96e 	bl	8004d6c <HAL_TIMEx_MasterConfigSynchronization>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8000a96:	f000 f9eb 	bl	8000e70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a9a:	2360      	movs	r3, #96	@ 0x60
 8000a9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ab6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000aba:	2200      	movs	r2, #0
 8000abc:	4619      	mov	r1, r3
 8000abe:	481a      	ldr	r0, [pc, #104]	@ (8000b28 <MX_TIM8_Init+0x158>)
 8000ac0:	f003 fa8a 	bl	8003fd8 <HAL_TIM_PWM_ConfigChannel>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8000aca:	f000 f9d1 	bl	8000e70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ada:	2300      	movs	r3, #0
 8000adc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ae2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ae6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000aec:	2300      	movs	r3, #0
 8000aee:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000af0:	2300      	movs	r3, #0
 8000af2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000af4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000af8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000afe:	2300      	movs	r3, #0
 8000b00:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b02:	2300      	movs	r3, #0
 8000b04:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000b06:	1d3b      	adds	r3, r7, #4
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4807      	ldr	r0, [pc, #28]	@ (8000b28 <MX_TIM8_Init+0x158>)
 8000b0c:	f004 f9c4 	bl	8004e98 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_TIM8_Init+0x14a>
  {
    Error_Handler();
 8000b16:	f000 f9ab 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000b1a:	4803      	ldr	r0, [pc, #12]	@ (8000b28 <MX_TIM8_Init+0x158>)
 8000b1c:	f000 fb30 	bl	8001180 <HAL_TIM_MspPostInit>

}
 8000b20:	bf00      	nop
 8000b22:	3770      	adds	r7, #112	@ 0x70
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	200001c4 	.word	0x200001c4
 8000b2c:	40013400 	.word	0x40013400

08000b30 <MX_TIM20_Init>:
  * @brief TIM20 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM20_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b09c      	sub	sp, #112	@ 0x70
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b36:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
 8000b42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b44:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b50:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
 8000b60:	615a      	str	r2, [r3, #20]
 8000b62:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b64:	1d3b      	adds	r3, r7, #4
 8000b66:	2234      	movs	r2, #52	@ 0x34
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f004 fa28 	bl	8004fc0 <memset>

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8000b70:	4b45      	ldr	r3, [pc, #276]	@ (8000c88 <MX_TIM20_Init+0x158>)
 8000b72:	4a46      	ldr	r2, [pc, #280]	@ (8000c8c <MX_TIM20_Init+0x15c>)
 8000b74:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 8000b76:	4b44      	ldr	r3, [pc, #272]	@ (8000c88 <MX_TIM20_Init+0x158>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7c:	4b42      	ldr	r3, [pc, #264]	@ (8000c88 <MX_TIM20_Init+0x158>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 8000b82:	4b41      	ldr	r3, [pc, #260]	@ (8000c88 <MX_TIM20_Init+0x158>)
 8000b84:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b88:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b8a:	4b3f      	ldr	r3, [pc, #252]	@ (8000c88 <MX_TIM20_Init+0x158>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 8000b90:	4b3d      	ldr	r3, [pc, #244]	@ (8000c88 <MX_TIM20_Init+0x158>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b96:	4b3c      	ldr	r3, [pc, #240]	@ (8000c88 <MX_TIM20_Init+0x158>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 8000b9c:	483a      	ldr	r0, [pc, #232]	@ (8000c88 <MX_TIM20_Init+0x158>)
 8000b9e:	f003 f82f 	bl	8003c00 <HAL_TIM_Base_Init>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_TIM20_Init+0x7c>
  {
    Error_Handler();
 8000ba8:	f000 f962 	bl	8000e70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bb0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 8000bb2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4833      	ldr	r0, [pc, #204]	@ (8000c88 <MX_TIM20_Init+0x158>)
 8000bba:	f003 fb21 	bl	8004200 <HAL_TIM_ConfigClockSource>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM20_Init+0x98>
  {
    Error_Handler();
 8000bc4:	f000 f954 	bl	8000e70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 8000bc8:	482f      	ldr	r0, [pc, #188]	@ (8000c88 <MX_TIM20_Init+0x158>)
 8000bca:	f003 f870 	bl	8003cae <HAL_TIM_PWM_Init>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_TIM20_Init+0xa8>
  {
    Error_Handler();
 8000bd4:	f000 f94c 	bl	8000e70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000be0:	2300      	movs	r3, #0
 8000be2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8000be4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000be8:	4619      	mov	r1, r3
 8000bea:	4827      	ldr	r0, [pc, #156]	@ (8000c88 <MX_TIM20_Init+0x158>)
 8000bec:	f004 f8be 	bl	8004d6c <HAL_TIMEx_MasterConfigSynchronization>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_TIM20_Init+0xca>
  {
    Error_Handler();
 8000bf6:	f000 f93b 	bl	8000e70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bfa:	2360      	movs	r3, #96	@ 0x60
 8000bfc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c02:	2300      	movs	r3, #0
 8000c04:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c06:	2300      	movs	r3, #0
 8000c08:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c12:	2300      	movs	r3, #0
 8000c14:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c16:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	481a      	ldr	r0, [pc, #104]	@ (8000c88 <MX_TIM20_Init+0x158>)
 8000c20:	f003 f9da 	bl	8003fd8 <HAL_TIM_PWM_ConfigChannel>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_TIM20_Init+0xfe>
  {
    Error_Handler();
 8000c2a:	f000 f921 	bl	8000e70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c32:	2300      	movs	r3, #0
 8000c34:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c42:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c46:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c50:	2300      	movs	r3, #0
 8000c52:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c54:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000c58:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c62:	2300      	movs	r3, #0
 8000c64:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 8000c66:	1d3b      	adds	r3, r7, #4
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4807      	ldr	r0, [pc, #28]	@ (8000c88 <MX_TIM20_Init+0x158>)
 8000c6c:	f004 f914 	bl	8004e98 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_TIM20_Init+0x14a>
  {
    Error_Handler();
 8000c76:	f000 f8fb 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */
  HAL_TIM_MspPostInit(&htim20);
 8000c7a:	4803      	ldr	r0, [pc, #12]	@ (8000c88 <MX_TIM20_Init+0x158>)
 8000c7c:	f000 fa80 	bl	8001180 <HAL_TIM_MspPostInit>

}
 8000c80:	bf00      	nop
 8000c82:	3770      	adds	r7, #112	@ 0x70
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20000210 	.word	0x20000210
 8000c8c:	40015000 	.word	0x40015000

08000c90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08a      	sub	sp, #40	@ 0x28
 8000c94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c96:	f107 0314 	add.w	r3, r7, #20
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
 8000ca4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca6:	4b6f      	ldr	r3, [pc, #444]	@ (8000e64 <MX_GPIO_Init+0x1d4>)
 8000ca8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000caa:	4a6e      	ldr	r2, [pc, #440]	@ (8000e64 <MX_GPIO_Init+0x1d4>)
 8000cac:	f043 0304 	orr.w	r3, r3, #4
 8000cb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cb2:	4b6c      	ldr	r3, [pc, #432]	@ (8000e64 <MX_GPIO_Init+0x1d4>)
 8000cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cb6:	f003 0304 	and.w	r3, r3, #4
 8000cba:	613b      	str	r3, [r7, #16]
 8000cbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cbe:	4b69      	ldr	r3, [pc, #420]	@ (8000e64 <MX_GPIO_Init+0x1d4>)
 8000cc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cc2:	4a68      	ldr	r2, [pc, #416]	@ (8000e64 <MX_GPIO_Init+0x1d4>)
 8000cc4:	f043 0320 	orr.w	r3, r3, #32
 8000cc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cca:	4b66      	ldr	r3, [pc, #408]	@ (8000e64 <MX_GPIO_Init+0x1d4>)
 8000ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cce:	f003 0320 	and.w	r3, r3, #32
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd6:	4b63      	ldr	r3, [pc, #396]	@ (8000e64 <MX_GPIO_Init+0x1d4>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cda:	4a62      	ldr	r2, [pc, #392]	@ (8000e64 <MX_GPIO_Init+0x1d4>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ce2:	4b60      	ldr	r3, [pc, #384]	@ (8000e64 <MX_GPIO_Init+0x1d4>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	60bb      	str	r3, [r7, #8]
 8000cec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cee:	4b5d      	ldr	r3, [pc, #372]	@ (8000e64 <MX_GPIO_Init+0x1d4>)
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cf2:	4a5c      	ldr	r2, [pc, #368]	@ (8000e64 <MX_GPIO_Init+0x1d4>)
 8000cf4:	f043 0302 	orr.w	r3, r3, #2
 8000cf8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cfa:	4b5a      	ldr	r3, [pc, #360]	@ (8000e64 <MX_GPIO_Init+0x1d4>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cfe:	f003 0302 	and.w	r3, r3, #2
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_MD20A_18V_GPIO_Port, DIR_MD20A_18V_Pin, GPIO_PIN_RESET);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2180      	movs	r1, #128	@ 0x80
 8000d0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d0e:	f001 ff43 	bl	8002b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_MD20A_24V_GPIO_Port, DIR_MD20A_24V_Pin, GPIO_PIN_RESET);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2102      	movs	r1, #2
 8000d16:	4854      	ldr	r0, [pc, #336]	@ (8000e68 <MX_GPIO_Init+0x1d8>)
 8000d18:	f001 ff3e 	bl	8002b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000d1c:	230c      	movs	r3, #12
 8000d1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d20:	2302      	movs	r3, #2
 8000d22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000d2c:	230c      	movs	r3, #12
 8000d2e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	4619      	mov	r1, r3
 8000d36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d3a:	f001 fdab 	bl	8002894 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d3e:	2320      	movs	r3, #32
 8000d40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d42:	2302      	movs	r3, #2
 8000d44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d4e:	2305      	movs	r3, #5
 8000d50:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d52:	f107 0314 	add.w	r3, r7, #20
 8000d56:	4619      	mov	r1, r3
 8000d58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d5c:	f001 fd9a 	bl	8002894 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_MD20A_18V_Pin */
  GPIO_InitStruct.Pin = DIR_MD20A_18V_Pin;
 8000d60:	2380      	movs	r3, #128	@ 0x80
 8000d62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d64:	2301      	movs	r3, #1
 8000d66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_MD20A_18V_GPIO_Port, &GPIO_InitStruct);
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	4619      	mov	r1, r3
 8000d76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d7a:	f001 fd8b 	bl	8002894 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000d7e:	2330      	movs	r3, #48	@ 0x30
 8000d80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d82:	2302      	movs	r3, #2
 8000d84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d8e:	2307      	movs	r3, #7
 8000d90:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d92:	f107 0314 	add.w	r3, r7, #20
 8000d96:	4619      	mov	r1, r3
 8000d98:	4834      	ldr	r0, [pc, #208]	@ (8000e6c <MX_GPIO_Init+0x1dc>)
 8000d9a:	f001 fd7b 	bl	8002894 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_MD20A_24V_Pin */
  GPIO_InitStruct.Pin = DIR_MD20A_24V_Pin;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da2:	2301      	movs	r3, #1
 8000da4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000daa:	2300      	movs	r3, #0
 8000dac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_MD20A_24V_GPIO_Port, &GPIO_InitStruct);
 8000dae:	f107 0314 	add.w	r3, r7, #20
 8000db2:	4619      	mov	r1, r3
 8000db4:	482c      	ldr	r0, [pc, #176]	@ (8000e68 <MX_GPIO_Init+0x1d8>)
 8000db6:	f001 fd6d 	bl	8002894 <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit_Switch_pen_2_Pin Proximity_sensor_Pin Limit_Switch_Prismatic1_Pin Limit_Switch_pen_1_Pin */
  GPIO_InitStruct.Pin = Limit_Switch_pen_2_Pin|Proximity_sensor_Pin|Limit_Switch_Prismatic1_Pin|Limit_Switch_pen_1_Pin;
 8000dba:	f44f 43cc 	mov.w	r3, #26112	@ 0x6600
 8000dbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dc0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000dc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dca:	f107 0314 	add.w	r3, r7, #20
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4825      	ldr	r0, [pc, #148]	@ (8000e68 <MX_GPIO_Init+0x1d8>)
 8000dd2:	f001 fd5f 	bl	8002894 <HAL_GPIO_Init>

  /*Configure GPIO pins : Proximity_sensorA12_Pin Limit_Switch_Prismatic2_Pin */
  GPIO_InitStruct.Pin = Proximity_sensorA12_Pin|Limit_Switch_Prismatic2_Pin;
 8000dd6:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8000dda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ddc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000de0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de6:	f107 0314 	add.w	r3, r7, #20
 8000dea:	4619      	mov	r1, r3
 8000dec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000df0:	f001 fd50 	bl	8002894 <HAL_GPIO_Init>

  /*Configure GPIO pin : PS2_Joy_stick_Attention_Pin */
  GPIO_InitStruct.Pin = PS2_Joy_stick_Attention_Pin;
 8000df4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000df8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PS2_Joy_stick_Attention_GPIO_Port, &GPIO_InitStruct);
 8000e02:	f107 0314 	add.w	r3, r7, #20
 8000e06:	4619      	mov	r1, r3
 8000e08:	4818      	ldr	r0, [pc, #96]	@ (8000e6c <MX_GPIO_Init+0x1dc>)
 8000e0a:	f001 fd43 	bl	8002894 <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_Pin */
  GPIO_InitStruct.Pin = Emergency_Pin;
 8000e0e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000e12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e14:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_GPIO_Port, &GPIO_InitStruct);
 8000e1e:	f107 0314 	add.w	r3, r7, #20
 8000e22:	4619      	mov	r1, r3
 8000e24:	4811      	ldr	r0, [pc, #68]	@ (8000e6c <MX_GPIO_Init+0x1dc>)
 8000e26:	f001 fd35 	bl	8002894 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000e2a:	2330      	movs	r3, #48	@ 0x30
 8000e2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e36:	2300      	movs	r3, #0
 8000e38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e3a:	2305      	movs	r3, #5
 8000e3c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3e:	f107 0314 	add.w	r3, r7, #20
 8000e42:	4619      	mov	r1, r3
 8000e44:	4808      	ldr	r0, [pc, #32]	@ (8000e68 <MX_GPIO_Init+0x1d8>)
 8000e46:	f001 fd25 	bl	8002894 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	2028      	movs	r0, #40	@ 0x28
 8000e50:	f001 fceb 	bl	800282a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e54:	2028      	movs	r0, #40	@ 0x28
 8000e56:	f001 fd02 	bl	800285e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e5a:	bf00      	nop
 8000e5c:	3728      	adds	r7, #40	@ 0x28
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40021000 	.word	0x40021000
 8000e68:	48000400 	.word	0x48000400
 8000e6c:	48000800 	.word	0x48000800

08000e70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e74:	b672      	cpsid	i
}
 8000e76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1) {
 8000e78:	bf00      	nop
 8000e7a:	e7fd      	b.n	8000e78 <Error_Handler+0x8>

08000e7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e82:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec0 <HAL_MspInit+0x44>)
 8000e84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e86:	4a0e      	ldr	r2, [pc, #56]	@ (8000ec0 <HAL_MspInit+0x44>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec0 <HAL_MspInit+0x44>)
 8000e90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	607b      	str	r3, [r7, #4]
 8000e98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e9a:	4b09      	ldr	r3, [pc, #36]	@ (8000ec0 <HAL_MspInit+0x44>)
 8000e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e9e:	4a08      	ldr	r2, [pc, #32]	@ (8000ec0 <HAL_MspInit+0x44>)
 8000ea0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ea4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ea6:	4b06      	ldr	r3, [pc, #24]	@ (8000ec0 <HAL_MspInit+0x44>)
 8000ea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eae:	603b      	str	r3, [r7, #0]
 8000eb0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000eb2:	f001 ff51 	bl	8002d58 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40021000 	.word	0x40021000

08000ec4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b09e      	sub	sp, #120	@ 0x78
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000edc:	f107 0310 	add.w	r3, r7, #16
 8000ee0:	2254      	movs	r2, #84	@ 0x54
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f004 f86b 	bl	8004fc0 <memset>
  if(hadc->Instance==ADC1)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000ef2:	d134      	bne.n	8000f5e <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000ef4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ef8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000efa:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000efe:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f00:	f107 0310 	add.w	r3, r7, #16
 8000f04:	4618      	mov	r0, r3
 8000f06:	f002 fc2d 	bl	8003764 <HAL_RCCEx_PeriphCLKConfig>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000f10:	f7ff ffae 	bl	8000e70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000f14:	4b14      	ldr	r3, [pc, #80]	@ (8000f68 <HAL_ADC_MspInit+0xa4>)
 8000f16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f18:	4a13      	ldr	r2, [pc, #76]	@ (8000f68 <HAL_ADC_MspInit+0xa4>)
 8000f1a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000f1e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f20:	4b11      	ldr	r3, [pc, #68]	@ (8000f68 <HAL_ADC_MspInit+0xa4>)
 8000f22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f68 <HAL_ADC_MspInit+0xa4>)
 8000f2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f30:	4a0d      	ldr	r2, [pc, #52]	@ (8000f68 <HAL_ADC_MspInit+0xa4>)
 8000f32:	f043 0301 	orr.w	r3, r3, #1
 8000f36:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f38:	4b0b      	ldr	r3, [pc, #44]	@ (8000f68 <HAL_ADC_MspInit+0xa4>)
 8000f3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f3c:	f003 0301 	and.w	r3, r3, #1
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = Current_Sensor_Pin|Current_SensorA1_Pin;
 8000f44:	2303      	movs	r3, #3
 8000f46:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f50:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f54:	4619      	mov	r1, r3
 8000f56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f5a:	f001 fc9b 	bl	8002894 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000f5e:	bf00      	nop
 8000f60:	3778      	adds	r7, #120	@ 0x78
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40021000 	.word	0x40021000

08000f6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b087      	sub	sp, #28
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a25      	ldr	r2, [pc, #148]	@ (8001010 <HAL_TIM_Base_MspInit+0xa4>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d10c      	bne.n	8000f98 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f7e:	4b25      	ldr	r3, [pc, #148]	@ (8001014 <HAL_TIM_Base_MspInit+0xa8>)
 8000f80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f82:	4a24      	ldr	r2, [pc, #144]	@ (8001014 <HAL_TIM_Base_MspInit+0xa8>)
 8000f84:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f88:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f8a:	4b22      	ldr	r3, [pc, #136]	@ (8001014 <HAL_TIM_Base_MspInit+0xa8>)
 8000f8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000f92:	617b      	str	r3, [r7, #20]
 8000f94:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }

}
 8000f96:	e034      	b.n	8001002 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM2)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000fa0:	d10c      	bne.n	8000fbc <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fa2:	4b1c      	ldr	r3, [pc, #112]	@ (8001014 <HAL_TIM_Base_MspInit+0xa8>)
 8000fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fa6:	4a1b      	ldr	r2, [pc, #108]	@ (8001014 <HAL_TIM_Base_MspInit+0xa8>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fae:	4b19      	ldr	r3, [pc, #100]	@ (8001014 <HAL_TIM_Base_MspInit+0xa8>)
 8000fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	613b      	str	r3, [r7, #16]
 8000fb8:	693b      	ldr	r3, [r7, #16]
}
 8000fba:	e022      	b.n	8001002 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM8)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a15      	ldr	r2, [pc, #84]	@ (8001018 <HAL_TIM_Base_MspInit+0xac>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d10c      	bne.n	8000fe0 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000fc6:	4b13      	ldr	r3, [pc, #76]	@ (8001014 <HAL_TIM_Base_MspInit+0xa8>)
 8000fc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fca:	4a12      	ldr	r2, [pc, #72]	@ (8001014 <HAL_TIM_Base_MspInit+0xa8>)
 8000fcc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000fd0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fd2:	4b10      	ldr	r3, [pc, #64]	@ (8001014 <HAL_TIM_Base_MspInit+0xa8>)
 8000fd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fd6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
}
 8000fde:	e010      	b.n	8001002 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM20)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a0d      	ldr	r2, [pc, #52]	@ (800101c <HAL_TIM_Base_MspInit+0xb0>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d10b      	bne.n	8001002 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8000fea:	4b0a      	ldr	r3, [pc, #40]	@ (8001014 <HAL_TIM_Base_MspInit+0xa8>)
 8000fec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fee:	4a09      	ldr	r2, [pc, #36]	@ (8001014 <HAL_TIM_Base_MspInit+0xa8>)
 8000ff0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000ff4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ff6:	4b07      	ldr	r3, [pc, #28]	@ (8001014 <HAL_TIM_Base_MspInit+0xa8>)
 8000ff8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ffa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ffe:	60bb      	str	r3, [r7, #8]
 8001000:	68bb      	ldr	r3, [r7, #8]
}
 8001002:	bf00      	nop
 8001004:	371c      	adds	r7, #28
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	40012c00 	.word	0x40012c00
 8001014:	40021000 	.word	0x40021000
 8001018:	40013400 	.word	0x40013400
 800101c:	40015000 	.word	0x40015000

08001020 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08e      	sub	sp, #56	@ 0x38
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a4b      	ldr	r2, [pc, #300]	@ (800116c <HAL_TIM_Encoder_MspInit+0x14c>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d145      	bne.n	80010ce <HAL_TIM_Encoder_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001042:	4b4b      	ldr	r3, [pc, #300]	@ (8001170 <HAL_TIM_Encoder_MspInit+0x150>)
 8001044:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001046:	4a4a      	ldr	r2, [pc, #296]	@ (8001170 <HAL_TIM_Encoder_MspInit+0x150>)
 8001048:	f043 0302 	orr.w	r3, r3, #2
 800104c:	6593      	str	r3, [r2, #88]	@ 0x58
 800104e:	4b48      	ldr	r3, [pc, #288]	@ (8001170 <HAL_TIM_Encoder_MspInit+0x150>)
 8001050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	623b      	str	r3, [r7, #32]
 8001058:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105a:	4b45      	ldr	r3, [pc, #276]	@ (8001170 <HAL_TIM_Encoder_MspInit+0x150>)
 800105c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800105e:	4a44      	ldr	r2, [pc, #272]	@ (8001170 <HAL_TIM_Encoder_MspInit+0x150>)
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001066:	4b42      	ldr	r3, [pc, #264]	@ (8001170 <HAL_TIM_Encoder_MspInit+0x150>)
 8001068:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	61fb      	str	r3, [r7, #28]
 8001070:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001072:	4b3f      	ldr	r3, [pc, #252]	@ (8001170 <HAL_TIM_Encoder_MspInit+0x150>)
 8001074:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001076:	4a3e      	ldr	r2, [pc, #248]	@ (8001170 <HAL_TIM_Encoder_MspInit+0x150>)
 8001078:	f043 0304 	orr.w	r3, r3, #4
 800107c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800107e:	4b3c      	ldr	r3, [pc, #240]	@ (8001170 <HAL_TIM_Encoder_MspInit+0x150>)
 8001080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001082:	f003 0304 	and.w	r3, r3, #4
 8001086:	61bb      	str	r3, [r7, #24]
 8001088:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Encoder_1_Pin;
 800108a:	2340      	movs	r3, #64	@ 0x40
 800108c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108e:	2302      	movs	r3, #2
 8001090:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001096:	2300      	movs	r3, #0
 8001098:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800109a:	2302      	movs	r3, #2
 800109c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Encoder_1_GPIO_Port, &GPIO_InitStruct);
 800109e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010a2:	4619      	mov	r1, r3
 80010a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010a8:	f001 fbf4 	bl	8002894 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Encoder_1C7_Pin;
 80010ac:	2380      	movs	r3, #128	@ 0x80
 80010ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b0:	2302      	movs	r3, #2
 80010b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b8:	2300      	movs	r3, #0
 80010ba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010bc:	2302      	movs	r3, #2
 80010be:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Encoder_1C7_GPIO_Port, &GPIO_InitStruct);
 80010c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010c4:	4619      	mov	r1, r3
 80010c6:	482b      	ldr	r0, [pc, #172]	@ (8001174 <HAL_TIM_Encoder_MspInit+0x154>)
 80010c8:	f001 fbe4 	bl	8002894 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80010cc:	e04a      	b.n	8001164 <HAL_TIM_Encoder_MspInit+0x144>
  else if(htim_encoder->Instance==TIM4)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a29      	ldr	r2, [pc, #164]	@ (8001178 <HAL_TIM_Encoder_MspInit+0x158>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d145      	bne.n	8001164 <HAL_TIM_Encoder_MspInit+0x144>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80010d8:	4b25      	ldr	r3, [pc, #148]	@ (8001170 <HAL_TIM_Encoder_MspInit+0x150>)
 80010da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010dc:	4a24      	ldr	r2, [pc, #144]	@ (8001170 <HAL_TIM_Encoder_MspInit+0x150>)
 80010de:	f043 0304 	orr.w	r3, r3, #4
 80010e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80010e4:	4b22      	ldr	r3, [pc, #136]	@ (8001170 <HAL_TIM_Encoder_MspInit+0x150>)
 80010e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010e8:	f003 0304 	and.w	r3, r3, #4
 80010ec:	617b      	str	r3, [r7, #20]
 80010ee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001170 <HAL_TIM_Encoder_MspInit+0x150>)
 80010f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f4:	4a1e      	ldr	r2, [pc, #120]	@ (8001170 <HAL_TIM_Encoder_MspInit+0x150>)
 80010f6:	f043 0301 	orr.w	r3, r3, #1
 80010fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001170 <HAL_TIM_Encoder_MspInit+0x150>)
 80010fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001100:	f003 0301 	and.w	r3, r3, #1
 8001104:	613b      	str	r3, [r7, #16]
 8001106:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001108:	4b19      	ldr	r3, [pc, #100]	@ (8001170 <HAL_TIM_Encoder_MspInit+0x150>)
 800110a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110c:	4a18      	ldr	r2, [pc, #96]	@ (8001170 <HAL_TIM_Encoder_MspInit+0x150>)
 800110e:	f043 0302 	orr.w	r3, r3, #2
 8001112:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001114:	4b16      	ldr	r3, [pc, #88]	@ (8001170 <HAL_TIM_Encoder_MspInit+0x150>)
 8001116:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001118:	f003 0302 	and.w	r3, r3, #2
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder_2_Pin;
 8001120:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001124:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001126:	2302      	movs	r3, #2
 8001128:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112e:	2300      	movs	r3, #0
 8001130:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001132:	230a      	movs	r3, #10
 8001134:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Encoder_2_GPIO_Port, &GPIO_InitStruct);
 8001136:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800113a:	4619      	mov	r1, r3
 800113c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001140:	f001 fba8 	bl	8002894 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Encoder_2B7_Pin;
 8001144:	2380      	movs	r3, #128	@ 0x80
 8001146:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001148:	2302      	movs	r3, #2
 800114a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001150:	2300      	movs	r3, #0
 8001152:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001154:	2302      	movs	r3, #2
 8001156:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Encoder_2B7_GPIO_Port, &GPIO_InitStruct);
 8001158:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800115c:	4619      	mov	r1, r3
 800115e:	4807      	ldr	r0, [pc, #28]	@ (800117c <HAL_TIM_Encoder_MspInit+0x15c>)
 8001160:	f001 fb98 	bl	8002894 <HAL_GPIO_Init>
}
 8001164:	bf00      	nop
 8001166:	3738      	adds	r7, #56	@ 0x38
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40000400 	.word	0x40000400
 8001170:	40021000 	.word	0x40021000
 8001174:	48000800 	.word	0x48000800
 8001178:	40000800 	.word	0x40000800
 800117c:	48000400 	.word	0x48000400

08001180 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08a      	sub	sp, #40	@ 0x28
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a33      	ldr	r2, [pc, #204]	@ (800126c <HAL_TIM_MspPostInit+0xec>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d11c      	bne.n	80011dc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a2:	4b33      	ldr	r3, [pc, #204]	@ (8001270 <HAL_TIM_MspPostInit+0xf0>)
 80011a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a6:	4a32      	ldr	r2, [pc, #200]	@ (8001270 <HAL_TIM_MspPostInit+0xf0>)
 80011a8:	f043 0304 	orr.w	r3, r3, #4
 80011ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ae:	4b30      	ldr	r3, [pc, #192]	@ (8001270 <HAL_TIM_MspPostInit+0xf0>)
 80011b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b2:	f003 0304 	and.w	r3, r3, #4
 80011b6:	613b      	str	r3, [r7, #16]
 80011b8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC2     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PWM_MD20A_24V_Pin;
 80011ba:	2304      	movs	r3, #4
 80011bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011be:	2302      	movs	r3, #2
 80011c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c6:	2300      	movs	r3, #0
 80011c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80011ca:	2302      	movs	r3, #2
 80011cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MD20A_24V_GPIO_Port, &GPIO_InitStruct);
 80011ce:	f107 0314 	add.w	r3, r7, #20
 80011d2:	4619      	mov	r1, r3
 80011d4:	4827      	ldr	r0, [pc, #156]	@ (8001274 <HAL_TIM_MspPostInit+0xf4>)
 80011d6:	f001 fb5d 	bl	8002894 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM20_MspPostInit 1 */

  /* USER CODE END TIM20_MspPostInit 1 */
  }

}
 80011da:	e042      	b.n	8001262 <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM8)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a25      	ldr	r2, [pc, #148]	@ (8001278 <HAL_TIM_MspPostInit+0xf8>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d11c      	bne.n	8001220 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e6:	4b22      	ldr	r3, [pc, #136]	@ (8001270 <HAL_TIM_MspPostInit+0xf0>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ea:	4a21      	ldr	r2, [pc, #132]	@ (8001270 <HAL_TIM_MspPostInit+0xf0>)
 80011ec:	f043 0304 	orr.w	r3, r3, #4
 80011f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001270 <HAL_TIM_MspPostInit+0xf0>)
 80011f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f6:	f003 0304 	and.w	r3, r3, #4
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Servo_Pin;
 80011fe:	2340      	movs	r3, #64	@ 0x40
 8001200:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001202:	2302      	movs	r3, #2
 8001204:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120a:	2300      	movs	r3, #0
 800120c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800120e:	2304      	movs	r3, #4
 8001210:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Servo_GPIO_Port, &GPIO_InitStruct);
 8001212:	f107 0314 	add.w	r3, r7, #20
 8001216:	4619      	mov	r1, r3
 8001218:	4816      	ldr	r0, [pc, #88]	@ (8001274 <HAL_TIM_MspPostInit+0xf4>)
 800121a:	f001 fb3b 	bl	8002894 <HAL_GPIO_Init>
}
 800121e:	e020      	b.n	8001262 <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM20)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a15      	ldr	r2, [pc, #84]	@ (800127c <HAL_TIM_MspPostInit+0xfc>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d11b      	bne.n	8001262 <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800122a:	4b11      	ldr	r3, [pc, #68]	@ (8001270 <HAL_TIM_MspPostInit+0xf0>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800122e:	4a10      	ldr	r2, [pc, #64]	@ (8001270 <HAL_TIM_MspPostInit+0xf0>)
 8001230:	f043 0302 	orr.w	r3, r3, #2
 8001234:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001236:	4b0e      	ldr	r3, [pc, #56]	@ (8001270 <HAL_TIM_MspPostInit+0xf0>)
 8001238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_MD20A_18V_Pin;
 8001242:	2304      	movs	r3, #4
 8001244:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001246:	2302      	movs	r3, #2
 8001248:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124e:	2300      	movs	r3, #0
 8001250:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 8001252:	2303      	movs	r3, #3
 8001254:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MD20A_18V_GPIO_Port, &GPIO_InitStruct);
 8001256:	f107 0314 	add.w	r3, r7, #20
 800125a:	4619      	mov	r1, r3
 800125c:	4808      	ldr	r0, [pc, #32]	@ (8001280 <HAL_TIM_MspPostInit+0x100>)
 800125e:	f001 fb19 	bl	8002894 <HAL_GPIO_Init>
}
 8001262:	bf00      	nop
 8001264:	3728      	adds	r7, #40	@ 0x28
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40012c00 	.word	0x40012c00
 8001270:	40021000 	.word	0x40021000
 8001274:	48000800 	.word	0x48000800
 8001278:	40013400 	.word	0x40013400
 800127c:	40015000 	.word	0x40015000
 8001280:	48000400 	.word	0x48000400

08001284 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001288:	bf00      	nop
 800128a:	e7fd      	b.n	8001288 <NMI_Handler+0x4>

0800128c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001290:	bf00      	nop
 8001292:	e7fd      	b.n	8001290 <HardFault_Handler+0x4>

08001294 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001298:	bf00      	nop
 800129a:	e7fd      	b.n	8001298 <MemManage_Handler+0x4>

0800129c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012a0:	bf00      	nop
 80012a2:	e7fd      	b.n	80012a0 <BusFault_Handler+0x4>

080012a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012a8:	bf00      	nop
 80012aa:	e7fd      	b.n	80012a8 <UsageFault_Handler+0x4>

080012ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr

080012ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr

080012d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012da:	f000 f8ad 	bl	8001438 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_pen_2_Pin);
 80012e6:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80012ea:	f001 fc6d 	bl	8002bc8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Emergency_Pin);
 80012ee:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80012f2:	f001 fc69 	bl	8002bc8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Proximity_sensorA12_Pin);
 80012f6:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80012fa:	f001 fc65 	bl	8002bc8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Proximity_sensor_Pin);
 80012fe:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001302:	f001 fc61 	bl	8002bc8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_Prismatic1_Pin);
 8001306:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800130a:	f001 fc5d 	bl	8002bc8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_Prismatic2_Pin);
 800130e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001312:	f001 fc59 	bl	8002bc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
	...

0800131c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001320:	4b06      	ldr	r3, [pc, #24]	@ (800133c <SystemInit+0x20>)
 8001322:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001326:	4a05      	ldr	r2, [pc, #20]	@ (800133c <SystemInit+0x20>)
 8001328:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800132c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001340:	480d      	ldr	r0, [pc, #52]	@ (8001378 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001342:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001344:	f7ff ffea 	bl	800131c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001348:	480c      	ldr	r0, [pc, #48]	@ (800137c <LoopForever+0x6>)
  ldr r1, =_edata
 800134a:	490d      	ldr	r1, [pc, #52]	@ (8001380 <LoopForever+0xa>)
  ldr r2, =_sidata
 800134c:	4a0d      	ldr	r2, [pc, #52]	@ (8001384 <LoopForever+0xe>)
  movs r3, #0
 800134e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001350:	e002      	b.n	8001358 <LoopCopyDataInit>

08001352 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001352:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001354:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001356:	3304      	adds	r3, #4

08001358 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001358:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800135a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800135c:	d3f9      	bcc.n	8001352 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800135e:	4a0a      	ldr	r2, [pc, #40]	@ (8001388 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001360:	4c0a      	ldr	r4, [pc, #40]	@ (800138c <LoopForever+0x16>)
  movs r3, #0
 8001362:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001364:	e001      	b.n	800136a <LoopFillZerobss>

08001366 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001366:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001368:	3204      	adds	r2, #4

0800136a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800136a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800136c:	d3fb      	bcc.n	8001366 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800136e:	f003 fe2f 	bl	8004fd0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001372:	f7ff f813 	bl	800039c <main>

08001376 <LoopForever>:

LoopForever:
    b LoopForever
 8001376:	e7fe      	b.n	8001376 <LoopForever>
  ldr   r0, =_estack
 8001378:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800137c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001380:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001384:	08005048 	.word	0x08005048
  ldr r2, =_sbss
 8001388:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800138c:	2000027c 	.word	0x2000027c

08001390 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001390:	e7fe      	b.n	8001390 <ADC1_2_IRQHandler>

08001392 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001398:	2300      	movs	r3, #0
 800139a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800139c:	2003      	movs	r0, #3
 800139e:	f001 fa39 	bl	8002814 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013a2:	2000      	movs	r0, #0
 80013a4:	f000 f80e 	bl	80013c4 <HAL_InitTick>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d002      	beq.n	80013b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	71fb      	strb	r3, [r7, #7]
 80013b2:	e001      	b.n	80013b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013b4:	f7ff fd62 	bl	8000e7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013b8:	79fb      	ldrb	r3, [r7, #7]

}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
	...

080013c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013cc:	2300      	movs	r3, #0
 80013ce:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80013d0:	4b16      	ldr	r3, [pc, #88]	@ (800142c <HAL_InitTick+0x68>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d022      	beq.n	800141e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80013d8:	4b15      	ldr	r3, [pc, #84]	@ (8001430 <HAL_InitTick+0x6c>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	4b13      	ldr	r3, [pc, #76]	@ (800142c <HAL_InitTick+0x68>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80013e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80013e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ec:	4618      	mov	r0, r3
 80013ee:	f001 fa44 	bl	800287a <HAL_SYSTICK_Config>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d10f      	bne.n	8001418 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2b0f      	cmp	r3, #15
 80013fc:	d809      	bhi.n	8001412 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013fe:	2200      	movs	r2, #0
 8001400:	6879      	ldr	r1, [r7, #4]
 8001402:	f04f 30ff 	mov.w	r0, #4294967295
 8001406:	f001 fa10 	bl	800282a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800140a:	4a0a      	ldr	r2, [pc, #40]	@ (8001434 <HAL_InitTick+0x70>)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6013      	str	r3, [r2, #0]
 8001410:	e007      	b.n	8001422 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	73fb      	strb	r3, [r7, #15]
 8001416:	e004      	b.n	8001422 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	73fb      	strb	r3, [r7, #15]
 800141c:	e001      	b.n	8001422 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001422:	7bfb      	ldrb	r3, [r7, #15]
}
 8001424:	4618      	mov	r0, r3
 8001426:	3710      	adds	r7, #16
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000008 	.word	0x20000008
 8001430:	20000000 	.word	0x20000000
 8001434:	20000004 	.word	0x20000004

08001438 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800143c:	4b05      	ldr	r3, [pc, #20]	@ (8001454 <HAL_IncTick+0x1c>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	4b05      	ldr	r3, [pc, #20]	@ (8001458 <HAL_IncTick+0x20>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4413      	add	r3, r2
 8001446:	4a03      	ldr	r2, [pc, #12]	@ (8001454 <HAL_IncTick+0x1c>)
 8001448:	6013      	str	r3, [r2, #0]
}
 800144a:	bf00      	nop
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	20000278 	.word	0x20000278
 8001458:	20000008 	.word	0x20000008

0800145c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  return uwTick;
 8001460:	4b03      	ldr	r3, [pc, #12]	@ (8001470 <HAL_GetTick+0x14>)
 8001462:	681b      	ldr	r3, [r3, #0]
}
 8001464:	4618      	mov	r0, r3
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	20000278 	.word	0x20000278

08001474 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	431a      	orrs	r2, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	609a      	str	r2, [r3, #8]
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800149a:	b480      	push	{r7}
 800149c:	b083      	sub	sp, #12
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
 80014a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	431a      	orrs	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	609a      	str	r2, [r3, #8]
}
 80014b4:	bf00      	nop
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80014dc:	b480      	push	{r7}
 80014de:	b087      	sub	sp, #28
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
 80014e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	3360      	adds	r3, #96	@ 0x60
 80014ee:	461a      	mov	r2, r3
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4413      	add	r3, r2
 80014f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	4b08      	ldr	r3, [pc, #32]	@ (8001520 <LL_ADC_SetOffset+0x44>)
 80014fe:	4013      	ands	r3, r2
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001506:	683a      	ldr	r2, [r7, #0]
 8001508:	430a      	orrs	r2, r1
 800150a:	4313      	orrs	r3, r2
 800150c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001514:	bf00      	nop
 8001516:	371c      	adds	r7, #28
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	03fff000 	.word	0x03fff000

08001524 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	3360      	adds	r3, #96	@ 0x60
 8001532:	461a      	mov	r2, r3
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	4413      	add	r3, r2
 800153a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001544:	4618      	mov	r0, r3
 8001546:	3714      	adds	r7, #20
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001550:	b480      	push	{r7}
 8001552:	b087      	sub	sp, #28
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	3360      	adds	r3, #96	@ 0x60
 8001560:	461a      	mov	r2, r3
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	4413      	add	r3, r2
 8001568:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	431a      	orrs	r2, r3
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800157a:	bf00      	nop
 800157c:	371c      	adds	r7, #28
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr

08001586 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001586:	b480      	push	{r7}
 8001588:	b087      	sub	sp, #28
 800158a:	af00      	add	r7, sp, #0
 800158c:	60f8      	str	r0, [r7, #12]
 800158e:	60b9      	str	r1, [r7, #8]
 8001590:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	3360      	adds	r3, #96	@ 0x60
 8001596:	461a      	mov	r2, r3
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	4413      	add	r3, r2
 800159e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	431a      	orrs	r2, r3
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80015b0:	bf00      	nop
 80015b2:	371c      	adds	r7, #28
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80015bc:	b480      	push	{r7}
 80015be:	b087      	sub	sp, #28
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	3360      	adds	r3, #96	@ 0x60
 80015cc:	461a      	mov	r2, r3
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	4413      	add	r3, r2
 80015d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	431a      	orrs	r2, r3
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80015e6:	bf00      	nop
 80015e8:	371c      	adds	r7, #28
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80015f2:	b480      	push	{r7}
 80015f4:	b083      	sub	sp, #12
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
 80015fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	695b      	ldr	r3, [r3, #20]
 8001600:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	431a      	orrs	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	615a      	str	r2, [r3, #20]
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001618:	b480      	push	{r7}
 800161a:	b087      	sub	sp, #28
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	3330      	adds	r3, #48	@ 0x30
 8001628:	461a      	mov	r2, r3
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	0a1b      	lsrs	r3, r3, #8
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	f003 030c 	and.w	r3, r3, #12
 8001634:	4413      	add	r3, r2
 8001636:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	f003 031f 	and.w	r3, r3, #31
 8001642:	211f      	movs	r1, #31
 8001644:	fa01 f303 	lsl.w	r3, r1, r3
 8001648:	43db      	mvns	r3, r3
 800164a:	401a      	ands	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	0e9b      	lsrs	r3, r3, #26
 8001650:	f003 011f 	and.w	r1, r3, #31
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	f003 031f 	and.w	r3, r3, #31
 800165a:	fa01 f303 	lsl.w	r3, r1, r3
 800165e:	431a      	orrs	r2, r3
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001664:	bf00      	nop
 8001666:	371c      	adds	r7, #28
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001670:	b480      	push	{r7}
 8001672:	b087      	sub	sp, #28
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	3314      	adds	r3, #20
 8001680:	461a      	mov	r2, r3
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	0e5b      	lsrs	r3, r3, #25
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	f003 0304 	and.w	r3, r3, #4
 800168c:	4413      	add	r3, r2
 800168e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	0d1b      	lsrs	r3, r3, #20
 8001698:	f003 031f 	and.w	r3, r3, #31
 800169c:	2107      	movs	r1, #7
 800169e:	fa01 f303 	lsl.w	r3, r1, r3
 80016a2:	43db      	mvns	r3, r3
 80016a4:	401a      	ands	r2, r3
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	0d1b      	lsrs	r3, r3, #20
 80016aa:	f003 031f 	and.w	r3, r3, #31
 80016ae:	6879      	ldr	r1, [r7, #4]
 80016b0:	fa01 f303 	lsl.w	r3, r1, r3
 80016b4:	431a      	orrs	r2, r3
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80016ba:	bf00      	nop
 80016bc:	371c      	adds	r7, #28
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
	...

080016c8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016e0:	43db      	mvns	r3, r3
 80016e2:	401a      	ands	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f003 0318 	and.w	r3, r3, #24
 80016ea:	4908      	ldr	r1, [pc, #32]	@ (800170c <LL_ADC_SetChannelSingleDiff+0x44>)
 80016ec:	40d9      	lsrs	r1, r3
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	400b      	ands	r3, r1
 80016f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016f6:	431a      	orrs	r2, r3
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80016fe:	bf00      	nop
 8001700:	3714      	adds	r7, #20
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	0007ffff 	.word	0x0007ffff

08001710 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001720:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	6093      	str	r3, [r2, #8]
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001744:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001748:	d101      	bne.n	800174e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800174a:	2301      	movs	r3, #1
 800174c:	e000      	b.n	8001750 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800174e:	2300      	movs	r3, #0
}
 8001750:	4618      	mov	r0, r3
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800176c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001770:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001794:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001798:	d101      	bne.n	800179e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800179a:	2301      	movs	r3, #1
 800179c:	e000      	b.n	80017a0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800179e:	2300      	movs	r3, #0
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f003 0301 	and.w	r3, r3, #1
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d101      	bne.n	80017c4 <LL_ADC_IsEnabled+0x18>
 80017c0:	2301      	movs	r3, #1
 80017c2:	e000      	b.n	80017c6 <LL_ADC_IsEnabled+0x1a>
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80017d2:	b480      	push	{r7}
 80017d4:	b083      	sub	sp, #12
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f003 0304 	and.w	r3, r3, #4
 80017e2:	2b04      	cmp	r3, #4
 80017e4:	d101      	bne.n	80017ea <LL_ADC_REG_IsConversionOngoing+0x18>
 80017e6:	2301      	movs	r3, #1
 80017e8:	e000      	b.n	80017ec <LL_ADC_REG_IsConversionOngoing+0x1a>
 80017ea:	2300      	movs	r3, #0
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f003 0308 	and.w	r3, r3, #8
 8001808:	2b08      	cmp	r3, #8
 800180a:	d101      	bne.n	8001810 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800180c:	2301      	movs	r3, #1
 800180e:	e000      	b.n	8001812 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
	...

08001820 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001820:	b590      	push	{r4, r7, lr}
 8001822:	b089      	sub	sp, #36	@ 0x24
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001828:	2300      	movs	r3, #0
 800182a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800182c:	2300      	movs	r3, #0
 800182e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d101      	bne.n	800183a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e1a9      	b.n	8001b8e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	695b      	ldr	r3, [r3, #20]
 800183e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001844:	2b00      	cmp	r3, #0
 8001846:	d109      	bne.n	800185c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f7ff fb3b 	bl	8000ec4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff ff67 	bl	8001734 <LL_ADC_IsDeepPowerDownEnabled>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d004      	beq.n	8001876 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff ff4d 	bl	8001710 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff ff82 	bl	8001784 <LL_ADC_IsInternalRegulatorEnabled>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d115      	bne.n	80018b2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff ff66 	bl	800175c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001890:	4b9c      	ldr	r3, [pc, #624]	@ (8001b04 <HAL_ADC_Init+0x2e4>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	099b      	lsrs	r3, r3, #6
 8001896:	4a9c      	ldr	r2, [pc, #624]	@ (8001b08 <HAL_ADC_Init+0x2e8>)
 8001898:	fba2 2303 	umull	r2, r3, r2, r3
 800189c:	099b      	lsrs	r3, r3, #6
 800189e:	3301      	adds	r3, #1
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80018a4:	e002      	b.n	80018ac <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	3b01      	subs	r3, #1
 80018aa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1f9      	bne.n	80018a6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff ff64 	bl	8001784 <LL_ADC_IsInternalRegulatorEnabled>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d10d      	bne.n	80018de <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018c6:	f043 0210 	orr.w	r2, r3, #16
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018d2:	f043 0201 	orr.w	r2, r3, #1
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff ff75 	bl	80017d2 <LL_ADC_REG_IsConversionOngoing>
 80018e8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018ee:	f003 0310 	and.w	r3, r3, #16
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f040 8142 	bne.w	8001b7c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f040 813e 	bne.w	8001b7c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001904:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001908:	f043 0202 	orr.w	r2, r3, #2
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff ff49 	bl	80017ac <LL_ADC_IsEnabled>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d141      	bne.n	80019a4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001928:	d004      	beq.n	8001934 <HAL_ADC_Init+0x114>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a77      	ldr	r2, [pc, #476]	@ (8001b0c <HAL_ADC_Init+0x2ec>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d10f      	bne.n	8001954 <HAL_ADC_Init+0x134>
 8001934:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001938:	f7ff ff38 	bl	80017ac <LL_ADC_IsEnabled>
 800193c:	4604      	mov	r4, r0
 800193e:	4873      	ldr	r0, [pc, #460]	@ (8001b0c <HAL_ADC_Init+0x2ec>)
 8001940:	f7ff ff34 	bl	80017ac <LL_ADC_IsEnabled>
 8001944:	4603      	mov	r3, r0
 8001946:	4323      	orrs	r3, r4
 8001948:	2b00      	cmp	r3, #0
 800194a:	bf0c      	ite	eq
 800194c:	2301      	moveq	r3, #1
 800194e:	2300      	movne	r3, #0
 8001950:	b2db      	uxtb	r3, r3
 8001952:	e012      	b.n	800197a <HAL_ADC_Init+0x15a>
 8001954:	486e      	ldr	r0, [pc, #440]	@ (8001b10 <HAL_ADC_Init+0x2f0>)
 8001956:	f7ff ff29 	bl	80017ac <LL_ADC_IsEnabled>
 800195a:	4604      	mov	r4, r0
 800195c:	486d      	ldr	r0, [pc, #436]	@ (8001b14 <HAL_ADC_Init+0x2f4>)
 800195e:	f7ff ff25 	bl	80017ac <LL_ADC_IsEnabled>
 8001962:	4603      	mov	r3, r0
 8001964:	431c      	orrs	r4, r3
 8001966:	486c      	ldr	r0, [pc, #432]	@ (8001b18 <HAL_ADC_Init+0x2f8>)
 8001968:	f7ff ff20 	bl	80017ac <LL_ADC_IsEnabled>
 800196c:	4603      	mov	r3, r0
 800196e:	4323      	orrs	r3, r4
 8001970:	2b00      	cmp	r3, #0
 8001972:	bf0c      	ite	eq
 8001974:	2301      	moveq	r3, #1
 8001976:	2300      	movne	r3, #0
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b00      	cmp	r3, #0
 800197c:	d012      	beq.n	80019a4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001986:	d004      	beq.n	8001992 <HAL_ADC_Init+0x172>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a5f      	ldr	r2, [pc, #380]	@ (8001b0c <HAL_ADC_Init+0x2ec>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d101      	bne.n	8001996 <HAL_ADC_Init+0x176>
 8001992:	4a62      	ldr	r2, [pc, #392]	@ (8001b1c <HAL_ADC_Init+0x2fc>)
 8001994:	e000      	b.n	8001998 <HAL_ADC_Init+0x178>
 8001996:	4a62      	ldr	r2, [pc, #392]	@ (8001b20 <HAL_ADC_Init+0x300>)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	4619      	mov	r1, r3
 800199e:	4610      	mov	r0, r2
 80019a0:	f7ff fd68 	bl	8001474 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	7f5b      	ldrb	r3, [r3, #29]
 80019a8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019ae:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80019b4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80019ba:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80019c2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019c4:	4313      	orrs	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d106      	bne.n	80019e0 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019d6:	3b01      	subs	r3, #1
 80019d8:	045b      	lsls	r3, r3, #17
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	4313      	orrs	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d009      	beq.n	80019fc <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ec:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	68da      	ldr	r2, [r3, #12]
 8001a02:	4b48      	ldr	r3, [pc, #288]	@ (8001b24 <HAL_ADC_Init+0x304>)
 8001a04:	4013      	ands	r3, r2
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	6812      	ldr	r2, [r2, #0]
 8001a0a:	69b9      	ldr	r1, [r7, #24]
 8001a0c:	430b      	orrs	r3, r1
 8001a0e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	430a      	orrs	r2, r1
 8001a24:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff fee4 	bl	80017f8 <LL_ADC_INJ_IsConversionOngoing>
 8001a30:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d17f      	bne.n	8001b38 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d17c      	bne.n	8001b38 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a42:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001a4a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001a5a:	f023 0302 	bic.w	r3, r3, #2
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	6812      	ldr	r2, [r2, #0]
 8001a62:	69b9      	ldr	r1, [r7, #24]
 8001a64:	430b      	orrs	r3, r1
 8001a66:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	691b      	ldr	r3, [r3, #16]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d017      	beq.n	8001aa0 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	691a      	ldr	r2, [r3, #16]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001a7e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001a88:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001a8c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	6911      	ldr	r1, [r2, #16]
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	6812      	ldr	r2, [r2, #0]
 8001a98:	430b      	orrs	r3, r1
 8001a9a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001a9e:	e013      	b.n	8001ac8 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	691a      	ldr	r2, [r3, #16]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001aae:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	6812      	ldr	r2, [r2, #0]
 8001abc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001ac0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ac4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d12a      	bne.n	8001b28 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001adc:	f023 0304 	bic.w	r3, r3, #4
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001ae8:	4311      	orrs	r1, r2
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001aee:	4311      	orrs	r1, r2
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001af4:	430a      	orrs	r2, r1
 8001af6:	431a      	orrs	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f042 0201 	orr.w	r2, r2, #1
 8001b00:	611a      	str	r2, [r3, #16]
 8001b02:	e019      	b.n	8001b38 <HAL_ADC_Init+0x318>
 8001b04:	20000000 	.word	0x20000000
 8001b08:	053e2d63 	.word	0x053e2d63
 8001b0c:	50000100 	.word	0x50000100
 8001b10:	50000400 	.word	0x50000400
 8001b14:	50000500 	.word	0x50000500
 8001b18:	50000600 	.word	0x50000600
 8001b1c:	50000300 	.word	0x50000300
 8001b20:	50000700 	.word	0x50000700
 8001b24:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	691a      	ldr	r2, [r3, #16]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f022 0201 	bic.w	r2, r2, #1
 8001b36:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	695b      	ldr	r3, [r3, #20]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d10c      	bne.n	8001b5a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b46:	f023 010f 	bic.w	r1, r3, #15
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a1b      	ldr	r3, [r3, #32]
 8001b4e:	1e5a      	subs	r2, r3, #1
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	430a      	orrs	r2, r1
 8001b56:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b58:	e007      	b.n	8001b6a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f022 020f 	bic.w	r2, r2, #15
 8001b68:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b6e:	f023 0303 	bic.w	r3, r3, #3
 8001b72:	f043 0201 	orr.w	r2, r3, #1
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001b7a:	e007      	b.n	8001b8c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b80:	f043 0210 	orr.w	r2, r3, #16
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b8c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3724      	adds	r7, #36	@ 0x24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd90      	pop	{r4, r7, pc}
 8001b96:	bf00      	nop

08001b98 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b0b6      	sub	sp, #216	@ 0xd8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d102      	bne.n	8001bbc <HAL_ADC_ConfigChannel+0x24>
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	f000 bc13 	b.w	80023e2 <HAL_ADC_ConfigChannel+0x84a>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff fe02 	bl	80017d2 <LL_ADC_REG_IsConversionOngoing>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f040 83f3 	bne.w	80023bc <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6818      	ldr	r0, [r3, #0]
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	6859      	ldr	r1, [r3, #4]
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	461a      	mov	r2, r3
 8001be4:	f7ff fd18 	bl	8001618 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff fdf0 	bl	80017d2 <LL_ADC_REG_IsConversionOngoing>
 8001bf2:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff fdfc 	bl	80017f8 <LL_ADC_INJ_IsConversionOngoing>
 8001c00:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c04:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f040 81d9 	bne.w	8001fc0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	f040 81d4 	bne.w	8001fc0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001c20:	d10f      	bne.n	8001c42 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6818      	ldr	r0, [r3, #0]
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	f7ff fd1f 	bl	8001670 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff fcd9 	bl	80015f2 <LL_ADC_SetSamplingTimeCommonConfig>
 8001c40:	e00e      	b.n	8001c60 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6818      	ldr	r0, [r3, #0]
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	6819      	ldr	r1, [r3, #0]
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	461a      	mov	r2, r3
 8001c50:	f7ff fd0e 	bl	8001670 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2100      	movs	r1, #0
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff fcc9 	bl	80015f2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	695a      	ldr	r2, [r3, #20]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	08db      	lsrs	r3, r3, #3
 8001c6c:	f003 0303 	and.w	r3, r3, #3
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	691b      	ldr	r3, [r3, #16]
 8001c7e:	2b04      	cmp	r3, #4
 8001c80:	d022      	beq.n	8001cc8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6818      	ldr	r0, [r3, #0]
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	6919      	ldr	r1, [r3, #16]
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001c92:	f7ff fc23 	bl	80014dc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6818      	ldr	r0, [r3, #0]
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	6919      	ldr	r1, [r3, #16]
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	f7ff fc6f 	bl	8001586 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6818      	ldr	r0, [r3, #0]
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d102      	bne.n	8001cbe <HAL_ADC_ConfigChannel+0x126>
 8001cb8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001cbc:	e000      	b.n	8001cc0 <HAL_ADC_ConfigChannel+0x128>
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	f7ff fc7b 	bl	80015bc <LL_ADC_SetOffsetSaturation>
 8001cc6:	e17b      	b.n	8001fc0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2100      	movs	r1, #0
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7ff fc28 	bl	8001524 <LL_ADC_GetOffsetChannel>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d10a      	bne.n	8001cf4 <HAL_ADC_ConfigChannel+0x15c>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff fc1d 	bl	8001524 <LL_ADC_GetOffsetChannel>
 8001cea:	4603      	mov	r3, r0
 8001cec:	0e9b      	lsrs	r3, r3, #26
 8001cee:	f003 021f 	and.w	r2, r3, #31
 8001cf2:	e01e      	b.n	8001d32 <HAL_ADC_ConfigChannel+0x19a>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff fc12 	bl	8001524 <LL_ADC_GetOffsetChannel>
 8001d00:	4603      	mov	r3, r0
 8001d02:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d06:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001d0a:	fa93 f3a3 	rbit	r3, r3
 8001d0e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001d16:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001d1a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001d22:	2320      	movs	r3, #32
 8001d24:	e004      	b.n	8001d30 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001d26:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001d2a:	fab3 f383 	clz	r3, r3
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d105      	bne.n	8001d4a <HAL_ADC_ConfigChannel+0x1b2>
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	0e9b      	lsrs	r3, r3, #26
 8001d44:	f003 031f 	and.w	r3, r3, #31
 8001d48:	e018      	b.n	8001d7c <HAL_ADC_ConfigChannel+0x1e4>
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d52:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d56:	fa93 f3a3 	rbit	r3, r3
 8001d5a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001d5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001d62:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001d66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001d6e:	2320      	movs	r3, #32
 8001d70:	e004      	b.n	8001d7c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001d72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001d76:	fab3 f383 	clz	r3, r3
 8001d7a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d106      	bne.n	8001d8e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2200      	movs	r2, #0
 8001d86:	2100      	movs	r1, #0
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff fbe1 	bl	8001550 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2101      	movs	r1, #1
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff fbc5 	bl	8001524 <LL_ADC_GetOffsetChannel>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d10a      	bne.n	8001dba <HAL_ADC_ConfigChannel+0x222>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2101      	movs	r1, #1
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7ff fbba 	bl	8001524 <LL_ADC_GetOffsetChannel>
 8001db0:	4603      	mov	r3, r0
 8001db2:	0e9b      	lsrs	r3, r3, #26
 8001db4:	f003 021f 	and.w	r2, r3, #31
 8001db8:	e01e      	b.n	8001df8 <HAL_ADC_ConfigChannel+0x260>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2101      	movs	r1, #1
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff fbaf 	bl	8001524 <LL_ADC_GetOffsetChannel>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dcc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001dd0:	fa93 f3a3 	rbit	r3, r3
 8001dd4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001dd8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001ddc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001de0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d101      	bne.n	8001dec <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001de8:	2320      	movs	r3, #32
 8001dea:	e004      	b.n	8001df6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001dec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001df0:	fab3 f383 	clz	r3, r3
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d105      	bne.n	8001e10 <HAL_ADC_ConfigChannel+0x278>
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	0e9b      	lsrs	r3, r3, #26
 8001e0a:	f003 031f 	and.w	r3, r3, #31
 8001e0e:	e018      	b.n	8001e42 <HAL_ADC_ConfigChannel+0x2aa>
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001e1c:	fa93 f3a3 	rbit	r3, r3
 8001e20:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001e24:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001e28:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001e2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d101      	bne.n	8001e38 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001e34:	2320      	movs	r3, #32
 8001e36:	e004      	b.n	8001e42 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001e38:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001e3c:	fab3 f383 	clz	r3, r3
 8001e40:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d106      	bne.n	8001e54 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff fb7e 	bl	8001550 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2102      	movs	r1, #2
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff fb62 	bl	8001524 <LL_ADC_GetOffsetChannel>
 8001e60:	4603      	mov	r3, r0
 8001e62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d10a      	bne.n	8001e80 <HAL_ADC_ConfigChannel+0x2e8>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2102      	movs	r1, #2
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff fb57 	bl	8001524 <LL_ADC_GetOffsetChannel>
 8001e76:	4603      	mov	r3, r0
 8001e78:	0e9b      	lsrs	r3, r3, #26
 8001e7a:	f003 021f 	and.w	r2, r3, #31
 8001e7e:	e01e      	b.n	8001ebe <HAL_ADC_ConfigChannel+0x326>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2102      	movs	r1, #2
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff fb4c 	bl	8001524 <LL_ADC_GetOffsetChannel>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e96:	fa93 f3a3 	rbit	r3, r3
 8001e9a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001e9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001ea2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001ea6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001eae:	2320      	movs	r3, #32
 8001eb0:	e004      	b.n	8001ebc <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001eb2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001eb6:	fab3 f383 	clz	r3, r3
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d105      	bne.n	8001ed6 <HAL_ADC_ConfigChannel+0x33e>
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	0e9b      	lsrs	r3, r3, #26
 8001ed0:	f003 031f 	and.w	r3, r3, #31
 8001ed4:	e016      	b.n	8001f04 <HAL_ADC_ConfigChannel+0x36c>
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ede:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001ee2:	fa93 f3a3 	rbit	r3, r3
 8001ee6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001ee8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001eea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001eee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d101      	bne.n	8001efa <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001ef6:	2320      	movs	r3, #32
 8001ef8:	e004      	b.n	8001f04 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001efa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001efe:	fab3 f383 	clz	r3, r3
 8001f02:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d106      	bne.n	8001f16 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	2102      	movs	r1, #2
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff fb1d 	bl	8001550 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2103      	movs	r1, #3
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff fb01 	bl	8001524 <LL_ADC_GetOffsetChannel>
 8001f22:	4603      	mov	r3, r0
 8001f24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d10a      	bne.n	8001f42 <HAL_ADC_ConfigChannel+0x3aa>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2103      	movs	r1, #3
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff faf6 	bl	8001524 <LL_ADC_GetOffsetChannel>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	0e9b      	lsrs	r3, r3, #26
 8001f3c:	f003 021f 	and.w	r2, r3, #31
 8001f40:	e017      	b.n	8001f72 <HAL_ADC_ConfigChannel+0x3da>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2103      	movs	r1, #3
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff faeb 	bl	8001524 <LL_ADC_GetOffsetChannel>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f54:	fa93 f3a3 	rbit	r3, r3
 8001f58:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001f5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001f5c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001f5e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d101      	bne.n	8001f68 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001f64:	2320      	movs	r3, #32
 8001f66:	e003      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001f68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001f6a:	fab3 f383 	clz	r3, r3
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d105      	bne.n	8001f8a <HAL_ADC_ConfigChannel+0x3f2>
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	0e9b      	lsrs	r3, r3, #26
 8001f84:	f003 031f 	and.w	r3, r3, #31
 8001f88:	e011      	b.n	8001fae <HAL_ADC_ConfigChannel+0x416>
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f90:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f92:	fa93 f3a3 	rbit	r3, r3
 8001f96:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001f98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001f9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001f9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001fa2:	2320      	movs	r3, #32
 8001fa4:	e003      	b.n	8001fae <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001fa6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001fa8:	fab3 f383 	clz	r3, r3
 8001fac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d106      	bne.n	8001fc0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	2103      	movs	r1, #3
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7ff fac8 	bl	8001550 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff fbf1 	bl	80017ac <LL_ADC_IsEnabled>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f040 813d 	bne.w	800224c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6818      	ldr	r0, [r3, #0]
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	6819      	ldr	r1, [r3, #0]
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	461a      	mov	r2, r3
 8001fe0:	f7ff fb72 	bl	80016c8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	4aa2      	ldr	r2, [pc, #648]	@ (8002274 <HAL_ADC_ConfigChannel+0x6dc>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	f040 812e 	bne.w	800224c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d10b      	bne.n	8002018 <HAL_ADC_ConfigChannel+0x480>
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	0e9b      	lsrs	r3, r3, #26
 8002006:	3301      	adds	r3, #1
 8002008:	f003 031f 	and.w	r3, r3, #31
 800200c:	2b09      	cmp	r3, #9
 800200e:	bf94      	ite	ls
 8002010:	2301      	movls	r3, #1
 8002012:	2300      	movhi	r3, #0
 8002014:	b2db      	uxtb	r3, r3
 8002016:	e019      	b.n	800204c <HAL_ADC_ConfigChannel+0x4b4>
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002020:	fa93 f3a3 	rbit	r3, r3
 8002024:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002026:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002028:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800202a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800202c:	2b00      	cmp	r3, #0
 800202e:	d101      	bne.n	8002034 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002030:	2320      	movs	r3, #32
 8002032:	e003      	b.n	800203c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002034:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002036:	fab3 f383 	clz	r3, r3
 800203a:	b2db      	uxtb	r3, r3
 800203c:	3301      	adds	r3, #1
 800203e:	f003 031f 	and.w	r3, r3, #31
 8002042:	2b09      	cmp	r3, #9
 8002044:	bf94      	ite	ls
 8002046:	2301      	movls	r3, #1
 8002048:	2300      	movhi	r3, #0
 800204a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800204c:	2b00      	cmp	r3, #0
 800204e:	d079      	beq.n	8002144 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002058:	2b00      	cmp	r3, #0
 800205a:	d107      	bne.n	800206c <HAL_ADC_ConfigChannel+0x4d4>
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	0e9b      	lsrs	r3, r3, #26
 8002062:	3301      	adds	r3, #1
 8002064:	069b      	lsls	r3, r3, #26
 8002066:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800206a:	e015      	b.n	8002098 <HAL_ADC_ConfigChannel+0x500>
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002072:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002074:	fa93 f3a3 	rbit	r3, r3
 8002078:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800207a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800207c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800207e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002080:	2b00      	cmp	r3, #0
 8002082:	d101      	bne.n	8002088 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002084:	2320      	movs	r3, #32
 8002086:	e003      	b.n	8002090 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002088:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800208a:	fab3 f383 	clz	r3, r3
 800208e:	b2db      	uxtb	r3, r3
 8002090:	3301      	adds	r3, #1
 8002092:	069b      	lsls	r3, r3, #26
 8002094:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d109      	bne.n	80020b8 <HAL_ADC_ConfigChannel+0x520>
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	0e9b      	lsrs	r3, r3, #26
 80020aa:	3301      	adds	r3, #1
 80020ac:	f003 031f 	and.w	r3, r3, #31
 80020b0:	2101      	movs	r1, #1
 80020b2:	fa01 f303 	lsl.w	r3, r1, r3
 80020b6:	e017      	b.n	80020e8 <HAL_ADC_ConfigChannel+0x550>
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020c0:	fa93 f3a3 	rbit	r3, r3
 80020c4:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80020c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80020ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d101      	bne.n	80020d4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80020d0:	2320      	movs	r3, #32
 80020d2:	e003      	b.n	80020dc <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80020d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80020d6:	fab3 f383 	clz	r3, r3
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	3301      	adds	r3, #1
 80020de:	f003 031f 	and.w	r3, r3, #31
 80020e2:	2101      	movs	r1, #1
 80020e4:	fa01 f303 	lsl.w	r3, r1, r3
 80020e8:	ea42 0103 	orr.w	r1, r2, r3
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d10a      	bne.n	800210e <HAL_ADC_ConfigChannel+0x576>
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	0e9b      	lsrs	r3, r3, #26
 80020fe:	3301      	adds	r3, #1
 8002100:	f003 021f 	and.w	r2, r3, #31
 8002104:	4613      	mov	r3, r2
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	4413      	add	r3, r2
 800210a:	051b      	lsls	r3, r3, #20
 800210c:	e018      	b.n	8002140 <HAL_ADC_ConfigChannel+0x5a8>
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002116:	fa93 f3a3 	rbit	r3, r3
 800211a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800211c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800211e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002120:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002126:	2320      	movs	r3, #32
 8002128:	e003      	b.n	8002132 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800212a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800212c:	fab3 f383 	clz	r3, r3
 8002130:	b2db      	uxtb	r3, r3
 8002132:	3301      	adds	r3, #1
 8002134:	f003 021f 	and.w	r2, r3, #31
 8002138:	4613      	mov	r3, r2
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	4413      	add	r3, r2
 800213e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002140:	430b      	orrs	r3, r1
 8002142:	e07e      	b.n	8002242 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800214c:	2b00      	cmp	r3, #0
 800214e:	d107      	bne.n	8002160 <HAL_ADC_ConfigChannel+0x5c8>
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	0e9b      	lsrs	r3, r3, #26
 8002156:	3301      	adds	r3, #1
 8002158:	069b      	lsls	r3, r3, #26
 800215a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800215e:	e015      	b.n	800218c <HAL_ADC_ConfigChannel+0x5f4>
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002168:	fa93 f3a3 	rbit	r3, r3
 800216c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800216e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002170:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002174:	2b00      	cmp	r3, #0
 8002176:	d101      	bne.n	800217c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002178:	2320      	movs	r3, #32
 800217a:	e003      	b.n	8002184 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800217c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800217e:	fab3 f383 	clz	r3, r3
 8002182:	b2db      	uxtb	r3, r3
 8002184:	3301      	adds	r3, #1
 8002186:	069b      	lsls	r3, r3, #26
 8002188:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002194:	2b00      	cmp	r3, #0
 8002196:	d109      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x614>
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	0e9b      	lsrs	r3, r3, #26
 800219e:	3301      	adds	r3, #1
 80021a0:	f003 031f 	and.w	r3, r3, #31
 80021a4:	2101      	movs	r1, #1
 80021a6:	fa01 f303 	lsl.w	r3, r1, r3
 80021aa:	e017      	b.n	80021dc <HAL_ADC_ConfigChannel+0x644>
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b2:	6a3b      	ldr	r3, [r7, #32]
 80021b4:	fa93 f3a3 	rbit	r3, r3
 80021b8:	61fb      	str	r3, [r7, #28]
  return result;
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80021be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d101      	bne.n	80021c8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80021c4:	2320      	movs	r3, #32
 80021c6:	e003      	b.n	80021d0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80021c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ca:	fab3 f383 	clz	r3, r3
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	3301      	adds	r3, #1
 80021d2:	f003 031f 	and.w	r3, r3, #31
 80021d6:	2101      	movs	r1, #1
 80021d8:	fa01 f303 	lsl.w	r3, r1, r3
 80021dc:	ea42 0103 	orr.w	r1, r2, r3
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d10d      	bne.n	8002208 <HAL_ADC_ConfigChannel+0x670>
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	0e9b      	lsrs	r3, r3, #26
 80021f2:	3301      	adds	r3, #1
 80021f4:	f003 021f 	and.w	r2, r3, #31
 80021f8:	4613      	mov	r3, r2
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	4413      	add	r3, r2
 80021fe:	3b1e      	subs	r3, #30
 8002200:	051b      	lsls	r3, r3, #20
 8002202:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002206:	e01b      	b.n	8002240 <HAL_ADC_ConfigChannel+0x6a8>
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	fa93 f3a3 	rbit	r3, r3
 8002214:	613b      	str	r3, [r7, #16]
  return result;
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d101      	bne.n	8002224 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002220:	2320      	movs	r3, #32
 8002222:	e003      	b.n	800222c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	fab3 f383 	clz	r3, r3
 800222a:	b2db      	uxtb	r3, r3
 800222c:	3301      	adds	r3, #1
 800222e:	f003 021f 	and.w	r2, r3, #31
 8002232:	4613      	mov	r3, r2
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	4413      	add	r3, r2
 8002238:	3b1e      	subs	r3, #30
 800223a:	051b      	lsls	r3, r3, #20
 800223c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002240:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002246:	4619      	mov	r1, r3
 8002248:	f7ff fa12 	bl	8001670 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	4b09      	ldr	r3, [pc, #36]	@ (8002278 <HAL_ADC_ConfigChannel+0x6e0>)
 8002252:	4013      	ands	r3, r2
 8002254:	2b00      	cmp	r3, #0
 8002256:	f000 80be 	beq.w	80023d6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002262:	d004      	beq.n	800226e <HAL_ADC_ConfigChannel+0x6d6>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a04      	ldr	r2, [pc, #16]	@ (800227c <HAL_ADC_ConfigChannel+0x6e4>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d10a      	bne.n	8002284 <HAL_ADC_ConfigChannel+0x6ec>
 800226e:	4b04      	ldr	r3, [pc, #16]	@ (8002280 <HAL_ADC_ConfigChannel+0x6e8>)
 8002270:	e009      	b.n	8002286 <HAL_ADC_ConfigChannel+0x6ee>
 8002272:	bf00      	nop
 8002274:	407f0000 	.word	0x407f0000
 8002278:	80080000 	.word	0x80080000
 800227c:	50000100 	.word	0x50000100
 8002280:	50000300 	.word	0x50000300
 8002284:	4b59      	ldr	r3, [pc, #356]	@ (80023ec <HAL_ADC_ConfigChannel+0x854>)
 8002286:	4618      	mov	r0, r3
 8002288:	f7ff f91a 	bl	80014c0 <LL_ADC_GetCommonPathInternalCh>
 800228c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a56      	ldr	r2, [pc, #344]	@ (80023f0 <HAL_ADC_ConfigChannel+0x858>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d004      	beq.n	80022a4 <HAL_ADC_ConfigChannel+0x70c>
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a55      	ldr	r2, [pc, #340]	@ (80023f4 <HAL_ADC_ConfigChannel+0x85c>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d13a      	bne.n	800231a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80022a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80022a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d134      	bne.n	800231a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022b8:	d005      	beq.n	80022c6 <HAL_ADC_ConfigChannel+0x72e>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a4e      	ldr	r2, [pc, #312]	@ (80023f8 <HAL_ADC_ConfigChannel+0x860>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	f040 8085 	bne.w	80023d0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022ce:	d004      	beq.n	80022da <HAL_ADC_ConfigChannel+0x742>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a49      	ldr	r2, [pc, #292]	@ (80023fc <HAL_ADC_ConfigChannel+0x864>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d101      	bne.n	80022de <HAL_ADC_ConfigChannel+0x746>
 80022da:	4a49      	ldr	r2, [pc, #292]	@ (8002400 <HAL_ADC_ConfigChannel+0x868>)
 80022dc:	e000      	b.n	80022e0 <HAL_ADC_ConfigChannel+0x748>
 80022de:	4a43      	ldr	r2, [pc, #268]	@ (80023ec <HAL_ADC_ConfigChannel+0x854>)
 80022e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80022e4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80022e8:	4619      	mov	r1, r3
 80022ea:	4610      	mov	r0, r2
 80022ec:	f7ff f8d5 	bl	800149a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022f0:	4b44      	ldr	r3, [pc, #272]	@ (8002404 <HAL_ADC_ConfigChannel+0x86c>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	099b      	lsrs	r3, r3, #6
 80022f6:	4a44      	ldr	r2, [pc, #272]	@ (8002408 <HAL_ADC_ConfigChannel+0x870>)
 80022f8:	fba2 2303 	umull	r2, r3, r2, r3
 80022fc:	099b      	lsrs	r3, r3, #6
 80022fe:	1c5a      	adds	r2, r3, #1
 8002300:	4613      	mov	r3, r2
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	4413      	add	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800230a:	e002      	b.n	8002312 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	3b01      	subs	r3, #1
 8002310:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d1f9      	bne.n	800230c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002318:	e05a      	b.n	80023d0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a3b      	ldr	r2, [pc, #236]	@ (800240c <HAL_ADC_ConfigChannel+0x874>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d125      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002324:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002328:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d11f      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a31      	ldr	r2, [pc, #196]	@ (80023fc <HAL_ADC_ConfigChannel+0x864>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d104      	bne.n	8002344 <HAL_ADC_ConfigChannel+0x7ac>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a34      	ldr	r2, [pc, #208]	@ (8002410 <HAL_ADC_ConfigChannel+0x878>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d047      	beq.n	80023d4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800234c:	d004      	beq.n	8002358 <HAL_ADC_ConfigChannel+0x7c0>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a2a      	ldr	r2, [pc, #168]	@ (80023fc <HAL_ADC_ConfigChannel+0x864>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d101      	bne.n	800235c <HAL_ADC_ConfigChannel+0x7c4>
 8002358:	4a29      	ldr	r2, [pc, #164]	@ (8002400 <HAL_ADC_ConfigChannel+0x868>)
 800235a:	e000      	b.n	800235e <HAL_ADC_ConfigChannel+0x7c6>
 800235c:	4a23      	ldr	r2, [pc, #140]	@ (80023ec <HAL_ADC_ConfigChannel+0x854>)
 800235e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002362:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002366:	4619      	mov	r1, r3
 8002368:	4610      	mov	r0, r2
 800236a:	f7ff f896 	bl	800149a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800236e:	e031      	b.n	80023d4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a27      	ldr	r2, [pc, #156]	@ (8002414 <HAL_ADC_ConfigChannel+0x87c>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d12d      	bne.n	80023d6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800237a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800237e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d127      	bne.n	80023d6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a1c      	ldr	r2, [pc, #112]	@ (80023fc <HAL_ADC_ConfigChannel+0x864>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d022      	beq.n	80023d6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002398:	d004      	beq.n	80023a4 <HAL_ADC_ConfigChannel+0x80c>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a17      	ldr	r2, [pc, #92]	@ (80023fc <HAL_ADC_ConfigChannel+0x864>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d101      	bne.n	80023a8 <HAL_ADC_ConfigChannel+0x810>
 80023a4:	4a16      	ldr	r2, [pc, #88]	@ (8002400 <HAL_ADC_ConfigChannel+0x868>)
 80023a6:	e000      	b.n	80023aa <HAL_ADC_ConfigChannel+0x812>
 80023a8:	4a10      	ldr	r2, [pc, #64]	@ (80023ec <HAL_ADC_ConfigChannel+0x854>)
 80023aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80023ae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80023b2:	4619      	mov	r1, r3
 80023b4:	4610      	mov	r0, r2
 80023b6:	f7ff f870 	bl	800149a <LL_ADC_SetCommonPathInternalCh>
 80023ba:	e00c      	b.n	80023d6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023c0:	f043 0220 	orr.w	r2, r3, #32
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80023ce:	e002      	b.n	80023d6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023d0:	bf00      	nop
 80023d2:	e000      	b.n	80023d6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023d4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80023de:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	37d8      	adds	r7, #216	@ 0xd8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	50000700 	.word	0x50000700
 80023f0:	c3210000 	.word	0xc3210000
 80023f4:	90c00010 	.word	0x90c00010
 80023f8:	50000600 	.word	0x50000600
 80023fc:	50000100 	.word	0x50000100
 8002400:	50000300 	.word	0x50000300
 8002404:	20000000 	.word	0x20000000
 8002408:	053e2d63 	.word	0x053e2d63
 800240c:	c7520000 	.word	0xc7520000
 8002410:	50000500 	.word	0x50000500
 8002414:	cb840000 	.word	0xcb840000

08002418 <LL_ADC_IsEnabled>:
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f003 0301 	and.w	r3, r3, #1
 8002428:	2b01      	cmp	r3, #1
 800242a:	d101      	bne.n	8002430 <LL_ADC_IsEnabled+0x18>
 800242c:	2301      	movs	r3, #1
 800242e:	e000      	b.n	8002432 <LL_ADC_IsEnabled+0x1a>
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr

0800243e <LL_ADC_REG_IsConversionOngoing>:
{
 800243e:	b480      	push	{r7}
 8002440:	b083      	sub	sp, #12
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 0304 	and.w	r3, r3, #4
 800244e:	2b04      	cmp	r3, #4
 8002450:	d101      	bne.n	8002456 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002452:	2301      	movs	r3, #1
 8002454:	e000      	b.n	8002458 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002464:	b590      	push	{r4, r7, lr}
 8002466:	b0a1      	sub	sp, #132	@ 0x84
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800246e:	2300      	movs	r3, #0
 8002470:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800247a:	2b01      	cmp	r3, #1
 800247c:	d101      	bne.n	8002482 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800247e:	2302      	movs	r3, #2
 8002480:	e0e7      	b.n	8002652 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2201      	movs	r2, #1
 8002486:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800248a:	2300      	movs	r3, #0
 800248c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800248e:	2300      	movs	r3, #0
 8002490:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800249a:	d102      	bne.n	80024a2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800249c:	4b6f      	ldr	r3, [pc, #444]	@ (800265c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800249e:	60bb      	str	r3, [r7, #8]
 80024a0:	e009      	b.n	80024b6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a6e      	ldr	r2, [pc, #440]	@ (8002660 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d102      	bne.n	80024b2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80024ac:	4b6d      	ldr	r3, [pc, #436]	@ (8002664 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80024ae:	60bb      	str	r3, [r7, #8]
 80024b0:	e001      	b.n	80024b6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80024b2:	2300      	movs	r3, #0
 80024b4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d10b      	bne.n	80024d4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024c0:	f043 0220 	orr.w	r2, r3, #32
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e0be      	b.n	8002652 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff ffb1 	bl	800243e <LL_ADC_REG_IsConversionOngoing>
 80024dc:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7ff ffab 	bl	800243e <LL_ADC_REG_IsConversionOngoing>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f040 80a0 	bne.w	8002630 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80024f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f040 809c 	bne.w	8002630 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002500:	d004      	beq.n	800250c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a55      	ldr	r2, [pc, #340]	@ (800265c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d101      	bne.n	8002510 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800250c:	4b56      	ldr	r3, [pc, #344]	@ (8002668 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800250e:	e000      	b.n	8002512 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002510:	4b56      	ldr	r3, [pc, #344]	@ (800266c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002512:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d04b      	beq.n	80025b4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800251c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	6859      	ldr	r1, [r3, #4]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800252e:	035b      	lsls	r3, r3, #13
 8002530:	430b      	orrs	r3, r1
 8002532:	431a      	orrs	r2, r3
 8002534:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002536:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002540:	d004      	beq.n	800254c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a45      	ldr	r2, [pc, #276]	@ (800265c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d10f      	bne.n	800256c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800254c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002550:	f7ff ff62 	bl	8002418 <LL_ADC_IsEnabled>
 8002554:	4604      	mov	r4, r0
 8002556:	4841      	ldr	r0, [pc, #260]	@ (800265c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002558:	f7ff ff5e 	bl	8002418 <LL_ADC_IsEnabled>
 800255c:	4603      	mov	r3, r0
 800255e:	4323      	orrs	r3, r4
 8002560:	2b00      	cmp	r3, #0
 8002562:	bf0c      	ite	eq
 8002564:	2301      	moveq	r3, #1
 8002566:	2300      	movne	r3, #0
 8002568:	b2db      	uxtb	r3, r3
 800256a:	e012      	b.n	8002592 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800256c:	483c      	ldr	r0, [pc, #240]	@ (8002660 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800256e:	f7ff ff53 	bl	8002418 <LL_ADC_IsEnabled>
 8002572:	4604      	mov	r4, r0
 8002574:	483b      	ldr	r0, [pc, #236]	@ (8002664 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002576:	f7ff ff4f 	bl	8002418 <LL_ADC_IsEnabled>
 800257a:	4603      	mov	r3, r0
 800257c:	431c      	orrs	r4, r3
 800257e:	483c      	ldr	r0, [pc, #240]	@ (8002670 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002580:	f7ff ff4a 	bl	8002418 <LL_ADC_IsEnabled>
 8002584:	4603      	mov	r3, r0
 8002586:	4323      	orrs	r3, r4
 8002588:	2b00      	cmp	r3, #0
 800258a:	bf0c      	ite	eq
 800258c:	2301      	moveq	r3, #1
 800258e:	2300      	movne	r3, #0
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d056      	beq.n	8002644 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002596:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800259e:	f023 030f 	bic.w	r3, r3, #15
 80025a2:	683a      	ldr	r2, [r7, #0]
 80025a4:	6811      	ldr	r1, [r2, #0]
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	6892      	ldr	r2, [r2, #8]
 80025aa:	430a      	orrs	r2, r1
 80025ac:	431a      	orrs	r2, r3
 80025ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025b0:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80025b2:	e047      	b.n	8002644 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80025b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80025bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025be:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025c8:	d004      	beq.n	80025d4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a23      	ldr	r2, [pc, #140]	@ (800265c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d10f      	bne.n	80025f4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80025d4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80025d8:	f7ff ff1e 	bl	8002418 <LL_ADC_IsEnabled>
 80025dc:	4604      	mov	r4, r0
 80025de:	481f      	ldr	r0, [pc, #124]	@ (800265c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80025e0:	f7ff ff1a 	bl	8002418 <LL_ADC_IsEnabled>
 80025e4:	4603      	mov	r3, r0
 80025e6:	4323      	orrs	r3, r4
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	bf0c      	ite	eq
 80025ec:	2301      	moveq	r3, #1
 80025ee:	2300      	movne	r3, #0
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	e012      	b.n	800261a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80025f4:	481a      	ldr	r0, [pc, #104]	@ (8002660 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80025f6:	f7ff ff0f 	bl	8002418 <LL_ADC_IsEnabled>
 80025fa:	4604      	mov	r4, r0
 80025fc:	4819      	ldr	r0, [pc, #100]	@ (8002664 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80025fe:	f7ff ff0b 	bl	8002418 <LL_ADC_IsEnabled>
 8002602:	4603      	mov	r3, r0
 8002604:	431c      	orrs	r4, r3
 8002606:	481a      	ldr	r0, [pc, #104]	@ (8002670 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002608:	f7ff ff06 	bl	8002418 <LL_ADC_IsEnabled>
 800260c:	4603      	mov	r3, r0
 800260e:	4323      	orrs	r3, r4
 8002610:	2b00      	cmp	r3, #0
 8002612:	bf0c      	ite	eq
 8002614:	2301      	moveq	r3, #1
 8002616:	2300      	movne	r3, #0
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d012      	beq.n	8002644 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800261e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002626:	f023 030f 	bic.w	r3, r3, #15
 800262a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800262c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800262e:	e009      	b.n	8002644 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002634:	f043 0220 	orr.w	r2, r3, #32
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002642:	e000      	b.n	8002646 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002644:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800264e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002652:	4618      	mov	r0, r3
 8002654:	3784      	adds	r7, #132	@ 0x84
 8002656:	46bd      	mov	sp, r7
 8002658:	bd90      	pop	{r4, r7, pc}
 800265a:	bf00      	nop
 800265c:	50000100 	.word	0x50000100
 8002660:	50000400 	.word	0x50000400
 8002664:	50000500 	.word	0x50000500
 8002668:	50000300 	.word	0x50000300
 800266c:	50000700 	.word	0x50000700
 8002670:	50000600 	.word	0x50000600

08002674 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f003 0307 	and.w	r3, r3, #7
 8002682:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002684:	4b0c      	ldr	r3, [pc, #48]	@ (80026b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800268a:	68ba      	ldr	r2, [r7, #8]
 800268c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002690:	4013      	ands	r3, r2
 8002692:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800269c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80026a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026a6:	4a04      	ldr	r2, [pc, #16]	@ (80026b8 <__NVIC_SetPriorityGrouping+0x44>)
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	60d3      	str	r3, [r2, #12]
}
 80026ac:	bf00      	nop
 80026ae:	3714      	adds	r7, #20
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr
 80026b8:	e000ed00 	.word	0xe000ed00

080026bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026c0:	4b04      	ldr	r3, [pc, #16]	@ (80026d4 <__NVIC_GetPriorityGrouping+0x18>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	0a1b      	lsrs	r3, r3, #8
 80026c6:	f003 0307 	and.w	r3, r3, #7
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	e000ed00 	.word	0xe000ed00

080026d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	4603      	mov	r3, r0
 80026e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	db0b      	blt.n	8002702 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ea:	79fb      	ldrb	r3, [r7, #7]
 80026ec:	f003 021f 	and.w	r2, r3, #31
 80026f0:	4907      	ldr	r1, [pc, #28]	@ (8002710 <__NVIC_EnableIRQ+0x38>)
 80026f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f6:	095b      	lsrs	r3, r3, #5
 80026f8:	2001      	movs	r0, #1
 80026fa:	fa00 f202 	lsl.w	r2, r0, r2
 80026fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	e000e100 	.word	0xe000e100

08002714 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	4603      	mov	r3, r0
 800271c:	6039      	str	r1, [r7, #0]
 800271e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002724:	2b00      	cmp	r3, #0
 8002726:	db0a      	blt.n	800273e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	b2da      	uxtb	r2, r3
 800272c:	490c      	ldr	r1, [pc, #48]	@ (8002760 <__NVIC_SetPriority+0x4c>)
 800272e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002732:	0112      	lsls	r2, r2, #4
 8002734:	b2d2      	uxtb	r2, r2
 8002736:	440b      	add	r3, r1
 8002738:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800273c:	e00a      	b.n	8002754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	b2da      	uxtb	r2, r3
 8002742:	4908      	ldr	r1, [pc, #32]	@ (8002764 <__NVIC_SetPriority+0x50>)
 8002744:	79fb      	ldrb	r3, [r7, #7]
 8002746:	f003 030f 	and.w	r3, r3, #15
 800274a:	3b04      	subs	r3, #4
 800274c:	0112      	lsls	r2, r2, #4
 800274e:	b2d2      	uxtb	r2, r2
 8002750:	440b      	add	r3, r1
 8002752:	761a      	strb	r2, [r3, #24]
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr
 8002760:	e000e100 	.word	0xe000e100
 8002764:	e000ed00 	.word	0xe000ed00

08002768 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002768:	b480      	push	{r7}
 800276a:	b089      	sub	sp, #36	@ 0x24
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f003 0307 	and.w	r3, r3, #7
 800277a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	f1c3 0307 	rsb	r3, r3, #7
 8002782:	2b04      	cmp	r3, #4
 8002784:	bf28      	it	cs
 8002786:	2304      	movcs	r3, #4
 8002788:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	3304      	adds	r3, #4
 800278e:	2b06      	cmp	r3, #6
 8002790:	d902      	bls.n	8002798 <NVIC_EncodePriority+0x30>
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	3b03      	subs	r3, #3
 8002796:	e000      	b.n	800279a <NVIC_EncodePriority+0x32>
 8002798:	2300      	movs	r3, #0
 800279a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800279c:	f04f 32ff 	mov.w	r2, #4294967295
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	fa02 f303 	lsl.w	r3, r2, r3
 80027a6:	43da      	mvns	r2, r3
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	401a      	ands	r2, r3
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027b0:	f04f 31ff 	mov.w	r1, #4294967295
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	fa01 f303 	lsl.w	r3, r1, r3
 80027ba:	43d9      	mvns	r1, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027c0:	4313      	orrs	r3, r2
         );
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3724      	adds	r7, #36	@ 0x24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
	...

080027d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3b01      	subs	r3, #1
 80027dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027e0:	d301      	bcc.n	80027e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027e2:	2301      	movs	r3, #1
 80027e4:	e00f      	b.n	8002806 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002810 <SysTick_Config+0x40>)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	3b01      	subs	r3, #1
 80027ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027ee:	210f      	movs	r1, #15
 80027f0:	f04f 30ff 	mov.w	r0, #4294967295
 80027f4:	f7ff ff8e 	bl	8002714 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027f8:	4b05      	ldr	r3, [pc, #20]	@ (8002810 <SysTick_Config+0x40>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027fe:	4b04      	ldr	r3, [pc, #16]	@ (8002810 <SysTick_Config+0x40>)
 8002800:	2207      	movs	r2, #7
 8002802:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	e000e010 	.word	0xe000e010

08002814 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f7ff ff29 	bl	8002674 <__NVIC_SetPriorityGrouping>
}
 8002822:	bf00      	nop
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b086      	sub	sp, #24
 800282e:	af00      	add	r7, sp, #0
 8002830:	4603      	mov	r3, r0
 8002832:	60b9      	str	r1, [r7, #8]
 8002834:	607a      	str	r2, [r7, #4]
 8002836:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002838:	f7ff ff40 	bl	80026bc <__NVIC_GetPriorityGrouping>
 800283c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	68b9      	ldr	r1, [r7, #8]
 8002842:	6978      	ldr	r0, [r7, #20]
 8002844:	f7ff ff90 	bl	8002768 <NVIC_EncodePriority>
 8002848:	4602      	mov	r2, r0
 800284a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800284e:	4611      	mov	r1, r2
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff ff5f 	bl	8002714 <__NVIC_SetPriority>
}
 8002856:	bf00      	nop
 8002858:	3718      	adds	r7, #24
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800285e:	b580      	push	{r7, lr}
 8002860:	b082      	sub	sp, #8
 8002862:	af00      	add	r7, sp, #0
 8002864:	4603      	mov	r3, r0
 8002866:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286c:	4618      	mov	r0, r3
 800286e:	f7ff ff33 	bl	80026d8 <__NVIC_EnableIRQ>
}
 8002872:	bf00      	nop
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b082      	sub	sp, #8
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f7ff ffa4 	bl	80027d0 <SysTick_Config>
 8002888:	4603      	mov	r3, r0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
	...

08002894 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002894:	b480      	push	{r7}
 8002896:	b087      	sub	sp, #28
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800289e:	2300      	movs	r3, #0
 80028a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80028a2:	e15a      	b.n	8002b5a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	2101      	movs	r1, #1
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	fa01 f303 	lsl.w	r3, r1, r3
 80028b0:	4013      	ands	r3, r2
 80028b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f000 814c 	beq.w	8002b54 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f003 0303 	and.w	r3, r3, #3
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d005      	beq.n	80028d4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d130      	bne.n	8002936 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	2203      	movs	r2, #3
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	43db      	mvns	r3, r3
 80028e6:	693a      	ldr	r2, [r7, #16]
 80028e8:	4013      	ands	r3, r2
 80028ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	68da      	ldr	r2, [r3, #12]
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800290a:	2201      	movs	r2, #1
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	43db      	mvns	r3, r3
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	4013      	ands	r3, r2
 8002918:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	091b      	lsrs	r3, r3, #4
 8002920:	f003 0201 	and.w	r2, r3, #1
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	4313      	orrs	r3, r2
 800292e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f003 0303 	and.w	r3, r3, #3
 800293e:	2b03      	cmp	r3, #3
 8002940:	d017      	beq.n	8002972 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	2203      	movs	r2, #3
 800294e:	fa02 f303 	lsl.w	r3, r2, r3
 8002952:	43db      	mvns	r3, r3
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	4013      	ands	r3, r2
 8002958:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	689a      	ldr	r2, [r3, #8]
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	4313      	orrs	r3, r2
 800296a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f003 0303 	and.w	r3, r3, #3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d123      	bne.n	80029c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	08da      	lsrs	r2, r3, #3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	3208      	adds	r2, #8
 8002986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800298a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	f003 0307 	and.w	r3, r3, #7
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	220f      	movs	r2, #15
 8002996:	fa02 f303 	lsl.w	r3, r2, r3
 800299a:	43db      	mvns	r3, r3
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	4013      	ands	r3, r2
 80029a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	691a      	ldr	r2, [r3, #16]
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	f003 0307 	and.w	r3, r3, #7
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	08da      	lsrs	r2, r3, #3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	3208      	adds	r2, #8
 80029c0:	6939      	ldr	r1, [r7, #16]
 80029c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	2203      	movs	r2, #3
 80029d2:	fa02 f303 	lsl.w	r3, r2, r3
 80029d6:	43db      	mvns	r3, r3
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	4013      	ands	r3, r2
 80029dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f003 0203 	and.w	r2, r3, #3
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	fa02 f303 	lsl.w	r3, r2, r3
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	f000 80a6 	beq.w	8002b54 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a08:	4b5b      	ldr	r3, [pc, #364]	@ (8002b78 <HAL_GPIO_Init+0x2e4>)
 8002a0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a0c:	4a5a      	ldr	r2, [pc, #360]	@ (8002b78 <HAL_GPIO_Init+0x2e4>)
 8002a0e:	f043 0301 	orr.w	r3, r3, #1
 8002a12:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a14:	4b58      	ldr	r3, [pc, #352]	@ (8002b78 <HAL_GPIO_Init+0x2e4>)
 8002a16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	60bb      	str	r3, [r7, #8]
 8002a1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a20:	4a56      	ldr	r2, [pc, #344]	@ (8002b7c <HAL_GPIO_Init+0x2e8>)
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	089b      	lsrs	r3, r3, #2
 8002a26:	3302      	adds	r3, #2
 8002a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	f003 0303 	and.w	r3, r3, #3
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	220f      	movs	r2, #15
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	43db      	mvns	r3, r3
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	4013      	ands	r3, r2
 8002a42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002a4a:	d01f      	beq.n	8002a8c <HAL_GPIO_Init+0x1f8>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a4c      	ldr	r2, [pc, #304]	@ (8002b80 <HAL_GPIO_Init+0x2ec>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d019      	beq.n	8002a88 <HAL_GPIO_Init+0x1f4>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4a4b      	ldr	r2, [pc, #300]	@ (8002b84 <HAL_GPIO_Init+0x2f0>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d013      	beq.n	8002a84 <HAL_GPIO_Init+0x1f0>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4a4a      	ldr	r2, [pc, #296]	@ (8002b88 <HAL_GPIO_Init+0x2f4>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d00d      	beq.n	8002a80 <HAL_GPIO_Init+0x1ec>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4a49      	ldr	r2, [pc, #292]	@ (8002b8c <HAL_GPIO_Init+0x2f8>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d007      	beq.n	8002a7c <HAL_GPIO_Init+0x1e8>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4a48      	ldr	r2, [pc, #288]	@ (8002b90 <HAL_GPIO_Init+0x2fc>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d101      	bne.n	8002a78 <HAL_GPIO_Init+0x1e4>
 8002a74:	2305      	movs	r3, #5
 8002a76:	e00a      	b.n	8002a8e <HAL_GPIO_Init+0x1fa>
 8002a78:	2306      	movs	r3, #6
 8002a7a:	e008      	b.n	8002a8e <HAL_GPIO_Init+0x1fa>
 8002a7c:	2304      	movs	r3, #4
 8002a7e:	e006      	b.n	8002a8e <HAL_GPIO_Init+0x1fa>
 8002a80:	2303      	movs	r3, #3
 8002a82:	e004      	b.n	8002a8e <HAL_GPIO_Init+0x1fa>
 8002a84:	2302      	movs	r3, #2
 8002a86:	e002      	b.n	8002a8e <HAL_GPIO_Init+0x1fa>
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e000      	b.n	8002a8e <HAL_GPIO_Init+0x1fa>
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	f002 0203 	and.w	r2, r2, #3
 8002a94:	0092      	lsls	r2, r2, #2
 8002a96:	4093      	lsls	r3, r2
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a9e:	4937      	ldr	r1, [pc, #220]	@ (8002b7c <HAL_GPIO_Init+0x2e8>)
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	089b      	lsrs	r3, r3, #2
 8002aa4:	3302      	adds	r3, #2
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002aac:	4b39      	ldr	r3, [pc, #228]	@ (8002b94 <HAL_GPIO_Init+0x300>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	43db      	mvns	r3, r3
 8002ab6:	693a      	ldr	r2, [r7, #16]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d003      	beq.n	8002ad0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ad0:	4a30      	ldr	r2, [pc, #192]	@ (8002b94 <HAL_GPIO_Init+0x300>)
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002ad6:	4b2f      	ldr	r3, [pc, #188]	@ (8002b94 <HAL_GPIO_Init+0x300>)
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002afa:	4a26      	ldr	r2, [pc, #152]	@ (8002b94 <HAL_GPIO_Init+0x300>)
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002b00:	4b24      	ldr	r3, [pc, #144]	@ (8002b94 <HAL_GPIO_Init+0x300>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d003      	beq.n	8002b24 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b24:	4a1b      	ldr	r2, [pc, #108]	@ (8002b94 <HAL_GPIO_Init+0x300>)
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002b2a:	4b1a      	ldr	r3, [pc, #104]	@ (8002b94 <HAL_GPIO_Init+0x300>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	43db      	mvns	r3, r3
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	4013      	ands	r3, r2
 8002b38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d003      	beq.n	8002b4e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b4e:	4a11      	ldr	r2, [pc, #68]	@ (8002b94 <HAL_GPIO_Init+0x300>)
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	3301      	adds	r3, #1
 8002b58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	fa22 f303 	lsr.w	r3, r2, r3
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f47f ae9d 	bne.w	80028a4 <HAL_GPIO_Init+0x10>
  }
}
 8002b6a:	bf00      	nop
 8002b6c:	bf00      	nop
 8002b6e:	371c      	adds	r7, #28
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	40010000 	.word	0x40010000
 8002b80:	48000400 	.word	0x48000400
 8002b84:	48000800 	.word	0x48000800
 8002b88:	48000c00 	.word	0x48000c00
 8002b8c:	48001000 	.word	0x48001000
 8002b90:	48001400 	.word	0x48001400
 8002b94:	40010400 	.word	0x40010400

08002b98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	807b      	strh	r3, [r7, #2]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ba8:	787b      	ldrb	r3, [r7, #1]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bae:	887a      	ldrh	r2, [r7, #2]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002bb4:	e002      	b.n	8002bbc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002bb6:	887a      	ldrh	r2, [r7, #2]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	4603      	mov	r3, r0
 8002bd0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002bd2:	4b08      	ldr	r3, [pc, #32]	@ (8002bf4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bd4:	695a      	ldr	r2, [r3, #20]
 8002bd6:	88fb      	ldrh	r3, [r7, #6]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d006      	beq.n	8002bec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002bde:	4a05      	ldr	r2, [pc, #20]	@ (8002bf4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002be0:	88fb      	ldrh	r3, [r7, #6]
 8002be2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002be4:	88fb      	ldrh	r3, [r7, #6]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f000 f806 	bl	8002bf8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002bec:	bf00      	nop
 8002bee:	3708      	adds	r7, #8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	40010400 	.word	0x40010400

08002bf8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	4603      	mov	r3, r0
 8002c00:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002c02:	bf00      	nop
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
	...

08002c10 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d141      	bne.n	8002ca2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c1e:	4b4b      	ldr	r3, [pc, #300]	@ (8002d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002c26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c2a:	d131      	bne.n	8002c90 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c2c:	4b47      	ldr	r3, [pc, #284]	@ (8002d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c32:	4a46      	ldr	r2, [pc, #280]	@ (8002d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c38:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c3c:	4b43      	ldr	r3, [pc, #268]	@ (8002d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c44:	4a41      	ldr	r2, [pc, #260]	@ (8002d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c4a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c4c:	4b40      	ldr	r3, [pc, #256]	@ (8002d50 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2232      	movs	r2, #50	@ 0x32
 8002c52:	fb02 f303 	mul.w	r3, r2, r3
 8002c56:	4a3f      	ldr	r2, [pc, #252]	@ (8002d54 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c58:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5c:	0c9b      	lsrs	r3, r3, #18
 8002c5e:	3301      	adds	r3, #1
 8002c60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c62:	e002      	b.n	8002c6a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	3b01      	subs	r3, #1
 8002c68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c6a:	4b38      	ldr	r3, [pc, #224]	@ (8002d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c76:	d102      	bne.n	8002c7e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1f2      	bne.n	8002c64 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c7e:	4b33      	ldr	r3, [pc, #204]	@ (8002d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c8a:	d158      	bne.n	8002d3e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e057      	b.n	8002d40 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c90:	4b2e      	ldr	r3, [pc, #184]	@ (8002d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c96:	4a2d      	ldr	r2, [pc, #180]	@ (8002d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c9c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002ca0:	e04d      	b.n	8002d3e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ca8:	d141      	bne.n	8002d2e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002caa:	4b28      	ldr	r3, [pc, #160]	@ (8002d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002cb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cb6:	d131      	bne.n	8002d1c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002cb8:	4b24      	ldr	r3, [pc, #144]	@ (8002d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002cbe:	4a23      	ldr	r2, [pc, #140]	@ (8002d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cc4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cc8:	4b20      	ldr	r3, [pc, #128]	@ (8002d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002cd0:	4a1e      	ldr	r2, [pc, #120]	@ (8002d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cd2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002cd6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002cd8:	4b1d      	ldr	r3, [pc, #116]	@ (8002d50 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2232      	movs	r2, #50	@ 0x32
 8002cde:	fb02 f303 	mul.w	r3, r2, r3
 8002ce2:	4a1c      	ldr	r2, [pc, #112]	@ (8002d54 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce8:	0c9b      	lsrs	r3, r3, #18
 8002cea:	3301      	adds	r3, #1
 8002cec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cee:	e002      	b.n	8002cf6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cf6:	4b15      	ldr	r3, [pc, #84]	@ (8002d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d02:	d102      	bne.n	8002d0a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1f2      	bne.n	8002cf0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d0a:	4b10      	ldr	r3, [pc, #64]	@ (8002d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d16:	d112      	bne.n	8002d3e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e011      	b.n	8002d40 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d22:	4a0a      	ldr	r2, [pc, #40]	@ (8002d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d28:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002d2c:	e007      	b.n	8002d3e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d2e:	4b07      	ldr	r3, [pc, #28]	@ (8002d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002d36:	4a05      	ldr	r2, [pc, #20]	@ (8002d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d38:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d3c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3714      	adds	r7, #20
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr
 8002d4c:	40007000 	.word	0x40007000
 8002d50:	20000000 	.word	0x20000000
 8002d54:	431bde83 	.word	0x431bde83

08002d58 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002d5c:	4b05      	ldr	r3, [pc, #20]	@ (8002d74 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	4a04      	ldr	r2, [pc, #16]	@ (8002d74 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002d62:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d66:	6093      	str	r3, [r2, #8]
}
 8002d68:	bf00      	nop
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	40007000 	.word	0x40007000

08002d78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b088      	sub	sp, #32
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e2fe      	b.n	8003388 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d075      	beq.n	8002e82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d96:	4b97      	ldr	r3, [pc, #604]	@ (8002ff4 <HAL_RCC_OscConfig+0x27c>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 030c 	and.w	r3, r3, #12
 8002d9e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002da0:	4b94      	ldr	r3, [pc, #592]	@ (8002ff4 <HAL_RCC_OscConfig+0x27c>)
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	f003 0303 	and.w	r3, r3, #3
 8002da8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	2b0c      	cmp	r3, #12
 8002dae:	d102      	bne.n	8002db6 <HAL_RCC_OscConfig+0x3e>
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	2b03      	cmp	r3, #3
 8002db4:	d002      	beq.n	8002dbc <HAL_RCC_OscConfig+0x44>
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	2b08      	cmp	r3, #8
 8002dba:	d10b      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dbc:	4b8d      	ldr	r3, [pc, #564]	@ (8002ff4 <HAL_RCC_OscConfig+0x27c>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d05b      	beq.n	8002e80 <HAL_RCC_OscConfig+0x108>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d157      	bne.n	8002e80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e2d9      	b.n	8003388 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ddc:	d106      	bne.n	8002dec <HAL_RCC_OscConfig+0x74>
 8002dde:	4b85      	ldr	r3, [pc, #532]	@ (8002ff4 <HAL_RCC_OscConfig+0x27c>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a84      	ldr	r2, [pc, #528]	@ (8002ff4 <HAL_RCC_OscConfig+0x27c>)
 8002de4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002de8:	6013      	str	r3, [r2, #0]
 8002dea:	e01d      	b.n	8002e28 <HAL_RCC_OscConfig+0xb0>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002df4:	d10c      	bne.n	8002e10 <HAL_RCC_OscConfig+0x98>
 8002df6:	4b7f      	ldr	r3, [pc, #508]	@ (8002ff4 <HAL_RCC_OscConfig+0x27c>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a7e      	ldr	r2, [pc, #504]	@ (8002ff4 <HAL_RCC_OscConfig+0x27c>)
 8002dfc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e00:	6013      	str	r3, [r2, #0]
 8002e02:	4b7c      	ldr	r3, [pc, #496]	@ (8002ff4 <HAL_RCC_OscConfig+0x27c>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a7b      	ldr	r2, [pc, #492]	@ (8002ff4 <HAL_RCC_OscConfig+0x27c>)
 8002e08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e0c:	6013      	str	r3, [r2, #0]
 8002e0e:	e00b      	b.n	8002e28 <HAL_RCC_OscConfig+0xb0>
 8002e10:	4b78      	ldr	r3, [pc, #480]	@ (8002ff4 <HAL_RCC_OscConfig+0x27c>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a77      	ldr	r2, [pc, #476]	@ (8002ff4 <HAL_RCC_OscConfig+0x27c>)
 8002e16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e1a:	6013      	str	r3, [r2, #0]
 8002e1c:	4b75      	ldr	r3, [pc, #468]	@ (8002ff4 <HAL_RCC_OscConfig+0x27c>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a74      	ldr	r2, [pc, #464]	@ (8002ff4 <HAL_RCC_OscConfig+0x27c>)
 8002e22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d013      	beq.n	8002e58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e30:	f7fe fb14 	bl	800145c <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e38:	f7fe fb10 	bl	800145c <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b64      	cmp	r3, #100	@ 0x64
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e29e      	b.n	8003388 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e4a:	4b6a      	ldr	r3, [pc, #424]	@ (8002ff4 <HAL_RCC_OscConfig+0x27c>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d0f0      	beq.n	8002e38 <HAL_RCC_OscConfig+0xc0>
 8002e56:	e014      	b.n	8002e82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e58:	f7fe fb00 	bl	800145c <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e60:	f7fe fafc 	bl	800145c <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b64      	cmp	r3, #100	@ 0x64
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e28a      	b.n	8003388 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e72:	4b60      	ldr	r3, [pc, #384]	@ (8002ff4 <HAL_RCC_OscConfig+0x27c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1f0      	bne.n	8002e60 <HAL_RCC_OscConfig+0xe8>
 8002e7e:	e000      	b.n	8002e82 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d075      	beq.n	8002f7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e8e:	4b59      	ldr	r3, [pc, #356]	@ (8002ff4 <HAL_RCC_OscConfig+0x27c>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f003 030c 	and.w	r3, r3, #12
 8002e96:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e98:	4b56      	ldr	r3, [pc, #344]	@ (8002ff4 <HAL_RCC_OscConfig+0x27c>)
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	f003 0303 	and.w	r3, r3, #3
 8002ea0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	2b0c      	cmp	r3, #12
 8002ea6:	d102      	bne.n	8002eae <HAL_RCC_OscConfig+0x136>
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d002      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x13c>
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	2b04      	cmp	r3, #4
 8002eb2:	d11f      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002eb4:	4b4f      	ldr	r3, [pc, #316]	@ (8002ff4 <HAL_RCC_OscConfig+0x27c>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d005      	beq.n	8002ecc <HAL_RCC_OscConfig+0x154>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d101      	bne.n	8002ecc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e25d      	b.n	8003388 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ecc:	4b49      	ldr	r3, [pc, #292]	@ (8002ff4 <HAL_RCC_OscConfig+0x27c>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	061b      	lsls	r3, r3, #24
 8002eda:	4946      	ldr	r1, [pc, #280]	@ (8002ff4 <HAL_RCC_OscConfig+0x27c>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002ee0:	4b45      	ldr	r3, [pc, #276]	@ (8002ff8 <HAL_RCC_OscConfig+0x280>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7fe fa6d 	bl	80013c4 <HAL_InitTick>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d043      	beq.n	8002f78 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e249      	b.n	8003388 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d023      	beq.n	8002f44 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002efc:	4b3d      	ldr	r3, [pc, #244]	@ (8002ff4 <HAL_RCC_OscConfig+0x27c>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a3c      	ldr	r2, [pc, #240]	@ (8002ff4 <HAL_RCC_OscConfig+0x27c>)
 8002f02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f08:	f7fe faa8 	bl	800145c <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f10:	f7fe faa4 	bl	800145c <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e232      	b.n	8003388 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f22:	4b34      	ldr	r3, [pc, #208]	@ (8002ff4 <HAL_RCC_OscConfig+0x27c>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d0f0      	beq.n	8002f10 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f2e:	4b31      	ldr	r3, [pc, #196]	@ (8002ff4 <HAL_RCC_OscConfig+0x27c>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	061b      	lsls	r3, r3, #24
 8002f3c:	492d      	ldr	r1, [pc, #180]	@ (8002ff4 <HAL_RCC_OscConfig+0x27c>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	604b      	str	r3, [r1, #4]
 8002f42:	e01a      	b.n	8002f7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f44:	4b2b      	ldr	r3, [pc, #172]	@ (8002ff4 <HAL_RCC_OscConfig+0x27c>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a2a      	ldr	r2, [pc, #168]	@ (8002ff4 <HAL_RCC_OscConfig+0x27c>)
 8002f4a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f50:	f7fe fa84 	bl	800145c <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f58:	f7fe fa80 	bl	800145c <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e20e      	b.n	8003388 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f6a:	4b22      	ldr	r3, [pc, #136]	@ (8002ff4 <HAL_RCC_OscConfig+0x27c>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1f0      	bne.n	8002f58 <HAL_RCC_OscConfig+0x1e0>
 8002f76:	e000      	b.n	8002f7a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f78:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0308 	and.w	r3, r3, #8
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d041      	beq.n	800300a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d01c      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f8e:	4b19      	ldr	r3, [pc, #100]	@ (8002ff4 <HAL_RCC_OscConfig+0x27c>)
 8002f90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f94:	4a17      	ldr	r2, [pc, #92]	@ (8002ff4 <HAL_RCC_OscConfig+0x27c>)
 8002f96:	f043 0301 	orr.w	r3, r3, #1
 8002f9a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f9e:	f7fe fa5d 	bl	800145c <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fa4:	e008      	b.n	8002fb8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fa6:	f7fe fa59 	bl	800145c <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e1e7      	b.n	8003388 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fb8:	4b0e      	ldr	r3, [pc, #56]	@ (8002ff4 <HAL_RCC_OscConfig+0x27c>)
 8002fba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d0ef      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x22e>
 8002fc6:	e020      	b.n	800300a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8002ff4 <HAL_RCC_OscConfig+0x27c>)
 8002fca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fce:	4a09      	ldr	r2, [pc, #36]	@ (8002ff4 <HAL_RCC_OscConfig+0x27c>)
 8002fd0:	f023 0301 	bic.w	r3, r3, #1
 8002fd4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd8:	f7fe fa40 	bl	800145c <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fde:	e00d      	b.n	8002ffc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fe0:	f7fe fa3c 	bl	800145c <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d906      	bls.n	8002ffc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e1ca      	b.n	8003388 <HAL_RCC_OscConfig+0x610>
 8002ff2:	bf00      	nop
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ffc:	4b8c      	ldr	r3, [pc, #560]	@ (8003230 <HAL_RCC_OscConfig+0x4b8>)
 8002ffe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1ea      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0304 	and.w	r3, r3, #4
 8003012:	2b00      	cmp	r3, #0
 8003014:	f000 80a6 	beq.w	8003164 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003018:	2300      	movs	r3, #0
 800301a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800301c:	4b84      	ldr	r3, [pc, #528]	@ (8003230 <HAL_RCC_OscConfig+0x4b8>)
 800301e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003020:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d101      	bne.n	800302c <HAL_RCC_OscConfig+0x2b4>
 8003028:	2301      	movs	r3, #1
 800302a:	e000      	b.n	800302e <HAL_RCC_OscConfig+0x2b6>
 800302c:	2300      	movs	r3, #0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00d      	beq.n	800304e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003032:	4b7f      	ldr	r3, [pc, #508]	@ (8003230 <HAL_RCC_OscConfig+0x4b8>)
 8003034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003036:	4a7e      	ldr	r2, [pc, #504]	@ (8003230 <HAL_RCC_OscConfig+0x4b8>)
 8003038:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800303c:	6593      	str	r3, [r2, #88]	@ 0x58
 800303e:	4b7c      	ldr	r3, [pc, #496]	@ (8003230 <HAL_RCC_OscConfig+0x4b8>)
 8003040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003042:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003046:	60fb      	str	r3, [r7, #12]
 8003048:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800304a:	2301      	movs	r3, #1
 800304c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800304e:	4b79      	ldr	r3, [pc, #484]	@ (8003234 <HAL_RCC_OscConfig+0x4bc>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003056:	2b00      	cmp	r3, #0
 8003058:	d118      	bne.n	800308c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800305a:	4b76      	ldr	r3, [pc, #472]	@ (8003234 <HAL_RCC_OscConfig+0x4bc>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a75      	ldr	r2, [pc, #468]	@ (8003234 <HAL_RCC_OscConfig+0x4bc>)
 8003060:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003064:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003066:	f7fe f9f9 	bl	800145c <HAL_GetTick>
 800306a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800306c:	e008      	b.n	8003080 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800306e:	f7fe f9f5 	bl	800145c <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	2b02      	cmp	r3, #2
 800307a:	d901      	bls.n	8003080 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e183      	b.n	8003388 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003080:	4b6c      	ldr	r3, [pc, #432]	@ (8003234 <HAL_RCC_OscConfig+0x4bc>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003088:	2b00      	cmp	r3, #0
 800308a:	d0f0      	beq.n	800306e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d108      	bne.n	80030a6 <HAL_RCC_OscConfig+0x32e>
 8003094:	4b66      	ldr	r3, [pc, #408]	@ (8003230 <HAL_RCC_OscConfig+0x4b8>)
 8003096:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800309a:	4a65      	ldr	r2, [pc, #404]	@ (8003230 <HAL_RCC_OscConfig+0x4b8>)
 800309c:	f043 0301 	orr.w	r3, r3, #1
 80030a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80030a4:	e024      	b.n	80030f0 <HAL_RCC_OscConfig+0x378>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	2b05      	cmp	r3, #5
 80030ac:	d110      	bne.n	80030d0 <HAL_RCC_OscConfig+0x358>
 80030ae:	4b60      	ldr	r3, [pc, #384]	@ (8003230 <HAL_RCC_OscConfig+0x4b8>)
 80030b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030b4:	4a5e      	ldr	r2, [pc, #376]	@ (8003230 <HAL_RCC_OscConfig+0x4b8>)
 80030b6:	f043 0304 	orr.w	r3, r3, #4
 80030ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80030be:	4b5c      	ldr	r3, [pc, #368]	@ (8003230 <HAL_RCC_OscConfig+0x4b8>)
 80030c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030c4:	4a5a      	ldr	r2, [pc, #360]	@ (8003230 <HAL_RCC_OscConfig+0x4b8>)
 80030c6:	f043 0301 	orr.w	r3, r3, #1
 80030ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80030ce:	e00f      	b.n	80030f0 <HAL_RCC_OscConfig+0x378>
 80030d0:	4b57      	ldr	r3, [pc, #348]	@ (8003230 <HAL_RCC_OscConfig+0x4b8>)
 80030d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030d6:	4a56      	ldr	r2, [pc, #344]	@ (8003230 <HAL_RCC_OscConfig+0x4b8>)
 80030d8:	f023 0301 	bic.w	r3, r3, #1
 80030dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80030e0:	4b53      	ldr	r3, [pc, #332]	@ (8003230 <HAL_RCC_OscConfig+0x4b8>)
 80030e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030e6:	4a52      	ldr	r2, [pc, #328]	@ (8003230 <HAL_RCC_OscConfig+0x4b8>)
 80030e8:	f023 0304 	bic.w	r3, r3, #4
 80030ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d016      	beq.n	8003126 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f8:	f7fe f9b0 	bl	800145c <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030fe:	e00a      	b.n	8003116 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003100:	f7fe f9ac 	bl	800145c <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800310e:	4293      	cmp	r3, r2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e138      	b.n	8003388 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003116:	4b46      	ldr	r3, [pc, #280]	@ (8003230 <HAL_RCC_OscConfig+0x4b8>)
 8003118:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d0ed      	beq.n	8003100 <HAL_RCC_OscConfig+0x388>
 8003124:	e015      	b.n	8003152 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003126:	f7fe f999 	bl	800145c <HAL_GetTick>
 800312a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800312c:	e00a      	b.n	8003144 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800312e:	f7fe f995 	bl	800145c <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	f241 3288 	movw	r2, #5000	@ 0x1388
 800313c:	4293      	cmp	r3, r2
 800313e:	d901      	bls.n	8003144 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e121      	b.n	8003388 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003144:	4b3a      	ldr	r3, [pc, #232]	@ (8003230 <HAL_RCC_OscConfig+0x4b8>)
 8003146:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1ed      	bne.n	800312e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003152:	7ffb      	ldrb	r3, [r7, #31]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d105      	bne.n	8003164 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003158:	4b35      	ldr	r3, [pc, #212]	@ (8003230 <HAL_RCC_OscConfig+0x4b8>)
 800315a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800315c:	4a34      	ldr	r2, [pc, #208]	@ (8003230 <HAL_RCC_OscConfig+0x4b8>)
 800315e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003162:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0320 	and.w	r3, r3, #32
 800316c:	2b00      	cmp	r3, #0
 800316e:	d03c      	beq.n	80031ea <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d01c      	beq.n	80031b2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003178:	4b2d      	ldr	r3, [pc, #180]	@ (8003230 <HAL_RCC_OscConfig+0x4b8>)
 800317a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800317e:	4a2c      	ldr	r2, [pc, #176]	@ (8003230 <HAL_RCC_OscConfig+0x4b8>)
 8003180:	f043 0301 	orr.w	r3, r3, #1
 8003184:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003188:	f7fe f968 	bl	800145c <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003190:	f7fe f964 	bl	800145c <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e0f2      	b.n	8003388 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031a2:	4b23      	ldr	r3, [pc, #140]	@ (8003230 <HAL_RCC_OscConfig+0x4b8>)
 80031a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d0ef      	beq.n	8003190 <HAL_RCC_OscConfig+0x418>
 80031b0:	e01b      	b.n	80031ea <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80031b2:	4b1f      	ldr	r3, [pc, #124]	@ (8003230 <HAL_RCC_OscConfig+0x4b8>)
 80031b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80031b8:	4a1d      	ldr	r2, [pc, #116]	@ (8003230 <HAL_RCC_OscConfig+0x4b8>)
 80031ba:	f023 0301 	bic.w	r3, r3, #1
 80031be:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c2:	f7fe f94b 	bl	800145c <HAL_GetTick>
 80031c6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031c8:	e008      	b.n	80031dc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031ca:	f7fe f947 	bl	800145c <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d901      	bls.n	80031dc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e0d5      	b.n	8003388 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031dc:	4b14      	ldr	r3, [pc, #80]	@ (8003230 <HAL_RCC_OscConfig+0x4b8>)
 80031de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1ef      	bne.n	80031ca <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	69db      	ldr	r3, [r3, #28]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	f000 80c9 	beq.w	8003386 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031f4:	4b0e      	ldr	r3, [pc, #56]	@ (8003230 <HAL_RCC_OscConfig+0x4b8>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f003 030c 	and.w	r3, r3, #12
 80031fc:	2b0c      	cmp	r3, #12
 80031fe:	f000 8083 	beq.w	8003308 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	2b02      	cmp	r3, #2
 8003208:	d15e      	bne.n	80032c8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800320a:	4b09      	ldr	r3, [pc, #36]	@ (8003230 <HAL_RCC_OscConfig+0x4b8>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a08      	ldr	r2, [pc, #32]	@ (8003230 <HAL_RCC_OscConfig+0x4b8>)
 8003210:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003214:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003216:	f7fe f921 	bl	800145c <HAL_GetTick>
 800321a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800321c:	e00c      	b.n	8003238 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800321e:	f7fe f91d 	bl	800145c <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d905      	bls.n	8003238 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e0ab      	b.n	8003388 <HAL_RCC_OscConfig+0x610>
 8003230:	40021000 	.word	0x40021000
 8003234:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003238:	4b55      	ldr	r3, [pc, #340]	@ (8003390 <HAL_RCC_OscConfig+0x618>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d1ec      	bne.n	800321e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003244:	4b52      	ldr	r3, [pc, #328]	@ (8003390 <HAL_RCC_OscConfig+0x618>)
 8003246:	68da      	ldr	r2, [r3, #12]
 8003248:	4b52      	ldr	r3, [pc, #328]	@ (8003394 <HAL_RCC_OscConfig+0x61c>)
 800324a:	4013      	ands	r3, r2
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	6a11      	ldr	r1, [r2, #32]
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003254:	3a01      	subs	r2, #1
 8003256:	0112      	lsls	r2, r2, #4
 8003258:	4311      	orrs	r1, r2
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800325e:	0212      	lsls	r2, r2, #8
 8003260:	4311      	orrs	r1, r2
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003266:	0852      	lsrs	r2, r2, #1
 8003268:	3a01      	subs	r2, #1
 800326a:	0552      	lsls	r2, r2, #21
 800326c:	4311      	orrs	r1, r2
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003272:	0852      	lsrs	r2, r2, #1
 8003274:	3a01      	subs	r2, #1
 8003276:	0652      	lsls	r2, r2, #25
 8003278:	4311      	orrs	r1, r2
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800327e:	06d2      	lsls	r2, r2, #27
 8003280:	430a      	orrs	r2, r1
 8003282:	4943      	ldr	r1, [pc, #268]	@ (8003390 <HAL_RCC_OscConfig+0x618>)
 8003284:	4313      	orrs	r3, r2
 8003286:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003288:	4b41      	ldr	r3, [pc, #260]	@ (8003390 <HAL_RCC_OscConfig+0x618>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a40      	ldr	r2, [pc, #256]	@ (8003390 <HAL_RCC_OscConfig+0x618>)
 800328e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003292:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003294:	4b3e      	ldr	r3, [pc, #248]	@ (8003390 <HAL_RCC_OscConfig+0x618>)
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	4a3d      	ldr	r2, [pc, #244]	@ (8003390 <HAL_RCC_OscConfig+0x618>)
 800329a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800329e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a0:	f7fe f8dc 	bl	800145c <HAL_GetTick>
 80032a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032a6:	e008      	b.n	80032ba <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032a8:	f7fe f8d8 	bl	800145c <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e066      	b.n	8003388 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032ba:	4b35      	ldr	r3, [pc, #212]	@ (8003390 <HAL_RCC_OscConfig+0x618>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d0f0      	beq.n	80032a8 <HAL_RCC_OscConfig+0x530>
 80032c6:	e05e      	b.n	8003386 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032c8:	4b31      	ldr	r3, [pc, #196]	@ (8003390 <HAL_RCC_OscConfig+0x618>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a30      	ldr	r2, [pc, #192]	@ (8003390 <HAL_RCC_OscConfig+0x618>)
 80032ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80032d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d4:	f7fe f8c2 	bl	800145c <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032da:	e008      	b.n	80032ee <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032dc:	f7fe f8be 	bl	800145c <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e04c      	b.n	8003388 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032ee:	4b28      	ldr	r3, [pc, #160]	@ (8003390 <HAL_RCC_OscConfig+0x618>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1f0      	bne.n	80032dc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80032fa:	4b25      	ldr	r3, [pc, #148]	@ (8003390 <HAL_RCC_OscConfig+0x618>)
 80032fc:	68da      	ldr	r2, [r3, #12]
 80032fe:	4924      	ldr	r1, [pc, #144]	@ (8003390 <HAL_RCC_OscConfig+0x618>)
 8003300:	4b25      	ldr	r3, [pc, #148]	@ (8003398 <HAL_RCC_OscConfig+0x620>)
 8003302:	4013      	ands	r3, r2
 8003304:	60cb      	str	r3, [r1, #12]
 8003306:	e03e      	b.n	8003386 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	69db      	ldr	r3, [r3, #28]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d101      	bne.n	8003314 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e039      	b.n	8003388 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003314:	4b1e      	ldr	r3, [pc, #120]	@ (8003390 <HAL_RCC_OscConfig+0x618>)
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f003 0203 	and.w	r2, r3, #3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a1b      	ldr	r3, [r3, #32]
 8003324:	429a      	cmp	r2, r3
 8003326:	d12c      	bne.n	8003382 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003332:	3b01      	subs	r3, #1
 8003334:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003336:	429a      	cmp	r2, r3
 8003338:	d123      	bne.n	8003382 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003344:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003346:	429a      	cmp	r2, r3
 8003348:	d11b      	bne.n	8003382 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003354:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003356:	429a      	cmp	r2, r3
 8003358:	d113      	bne.n	8003382 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003364:	085b      	lsrs	r3, r3, #1
 8003366:	3b01      	subs	r3, #1
 8003368:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800336a:	429a      	cmp	r2, r3
 800336c:	d109      	bne.n	8003382 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003378:	085b      	lsrs	r3, r3, #1
 800337a:	3b01      	subs	r3, #1
 800337c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800337e:	429a      	cmp	r2, r3
 8003380:	d001      	beq.n	8003386 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e000      	b.n	8003388 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3720      	adds	r7, #32
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	40021000 	.word	0x40021000
 8003394:	019f800c 	.word	0x019f800c
 8003398:	feeefffc 	.word	0xfeeefffc

0800339c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80033a6:	2300      	movs	r3, #0
 80033a8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d101      	bne.n	80033b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e11e      	b.n	80035f2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033b4:	4b91      	ldr	r3, [pc, #580]	@ (80035fc <HAL_RCC_ClockConfig+0x260>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 030f 	and.w	r3, r3, #15
 80033bc:	683a      	ldr	r2, [r7, #0]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d910      	bls.n	80033e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033c2:	4b8e      	ldr	r3, [pc, #568]	@ (80035fc <HAL_RCC_ClockConfig+0x260>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f023 020f 	bic.w	r2, r3, #15
 80033ca:	498c      	ldr	r1, [pc, #560]	@ (80035fc <HAL_RCC_ClockConfig+0x260>)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033d2:	4b8a      	ldr	r3, [pc, #552]	@ (80035fc <HAL_RCC_ClockConfig+0x260>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 030f 	and.w	r3, r3, #15
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d001      	beq.n	80033e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e106      	b.n	80035f2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d073      	beq.n	80034d8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	2b03      	cmp	r3, #3
 80033f6:	d129      	bne.n	800344c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033f8:	4b81      	ldr	r3, [pc, #516]	@ (8003600 <HAL_RCC_ClockConfig+0x264>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d101      	bne.n	8003408 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e0f4      	b.n	80035f2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003408:	f000 f966 	bl	80036d8 <RCC_GetSysClockFreqFromPLLSource>
 800340c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	4a7c      	ldr	r2, [pc, #496]	@ (8003604 <HAL_RCC_ClockConfig+0x268>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d93f      	bls.n	8003496 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003416:	4b7a      	ldr	r3, [pc, #488]	@ (8003600 <HAL_RCC_ClockConfig+0x264>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d009      	beq.n	8003436 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800342a:	2b00      	cmp	r3, #0
 800342c:	d033      	beq.n	8003496 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003432:	2b00      	cmp	r3, #0
 8003434:	d12f      	bne.n	8003496 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003436:	4b72      	ldr	r3, [pc, #456]	@ (8003600 <HAL_RCC_ClockConfig+0x264>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800343e:	4a70      	ldr	r2, [pc, #448]	@ (8003600 <HAL_RCC_ClockConfig+0x264>)
 8003440:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003444:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003446:	2380      	movs	r3, #128	@ 0x80
 8003448:	617b      	str	r3, [r7, #20]
 800344a:	e024      	b.n	8003496 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	2b02      	cmp	r3, #2
 8003452:	d107      	bne.n	8003464 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003454:	4b6a      	ldr	r3, [pc, #424]	@ (8003600 <HAL_RCC_ClockConfig+0x264>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d109      	bne.n	8003474 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e0c6      	b.n	80035f2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003464:	4b66      	ldr	r3, [pc, #408]	@ (8003600 <HAL_RCC_ClockConfig+0x264>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800346c:	2b00      	cmp	r3, #0
 800346e:	d101      	bne.n	8003474 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e0be      	b.n	80035f2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003474:	f000 f8ce 	bl	8003614 <HAL_RCC_GetSysClockFreq>
 8003478:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	4a61      	ldr	r2, [pc, #388]	@ (8003604 <HAL_RCC_ClockConfig+0x268>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d909      	bls.n	8003496 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003482:	4b5f      	ldr	r3, [pc, #380]	@ (8003600 <HAL_RCC_ClockConfig+0x264>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800348a:	4a5d      	ldr	r2, [pc, #372]	@ (8003600 <HAL_RCC_ClockConfig+0x264>)
 800348c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003490:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003492:	2380      	movs	r3, #128	@ 0x80
 8003494:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003496:	4b5a      	ldr	r3, [pc, #360]	@ (8003600 <HAL_RCC_ClockConfig+0x264>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f023 0203 	bic.w	r2, r3, #3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	4957      	ldr	r1, [pc, #348]	@ (8003600 <HAL_RCC_ClockConfig+0x264>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034a8:	f7fd ffd8 	bl	800145c <HAL_GetTick>
 80034ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ae:	e00a      	b.n	80034c6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034b0:	f7fd ffd4 	bl	800145c <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034be:	4293      	cmp	r3, r2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e095      	b.n	80035f2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034c6:	4b4e      	ldr	r3, [pc, #312]	@ (8003600 <HAL_RCC_ClockConfig+0x264>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f003 020c 	and.w	r2, r3, #12
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d1eb      	bne.n	80034b0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0302 	and.w	r3, r3, #2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d023      	beq.n	800352c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0304 	and.w	r3, r3, #4
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d005      	beq.n	80034fc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034f0:	4b43      	ldr	r3, [pc, #268]	@ (8003600 <HAL_RCC_ClockConfig+0x264>)
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	4a42      	ldr	r2, [pc, #264]	@ (8003600 <HAL_RCC_ClockConfig+0x264>)
 80034f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80034fa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0308 	and.w	r3, r3, #8
 8003504:	2b00      	cmp	r3, #0
 8003506:	d007      	beq.n	8003518 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003508:	4b3d      	ldr	r3, [pc, #244]	@ (8003600 <HAL_RCC_ClockConfig+0x264>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003510:	4a3b      	ldr	r2, [pc, #236]	@ (8003600 <HAL_RCC_ClockConfig+0x264>)
 8003512:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003516:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003518:	4b39      	ldr	r3, [pc, #228]	@ (8003600 <HAL_RCC_ClockConfig+0x264>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	4936      	ldr	r1, [pc, #216]	@ (8003600 <HAL_RCC_ClockConfig+0x264>)
 8003526:	4313      	orrs	r3, r2
 8003528:	608b      	str	r3, [r1, #8]
 800352a:	e008      	b.n	800353e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	2b80      	cmp	r3, #128	@ 0x80
 8003530:	d105      	bne.n	800353e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003532:	4b33      	ldr	r3, [pc, #204]	@ (8003600 <HAL_RCC_ClockConfig+0x264>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	4a32      	ldr	r2, [pc, #200]	@ (8003600 <HAL_RCC_ClockConfig+0x264>)
 8003538:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800353c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800353e:	4b2f      	ldr	r3, [pc, #188]	@ (80035fc <HAL_RCC_ClockConfig+0x260>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 030f 	and.w	r3, r3, #15
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	429a      	cmp	r2, r3
 800354a:	d21d      	bcs.n	8003588 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800354c:	4b2b      	ldr	r3, [pc, #172]	@ (80035fc <HAL_RCC_ClockConfig+0x260>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f023 020f 	bic.w	r2, r3, #15
 8003554:	4929      	ldr	r1, [pc, #164]	@ (80035fc <HAL_RCC_ClockConfig+0x260>)
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	4313      	orrs	r3, r2
 800355a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800355c:	f7fd ff7e 	bl	800145c <HAL_GetTick>
 8003560:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003562:	e00a      	b.n	800357a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003564:	f7fd ff7a 	bl	800145c <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003572:	4293      	cmp	r3, r2
 8003574:	d901      	bls.n	800357a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e03b      	b.n	80035f2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800357a:	4b20      	ldr	r3, [pc, #128]	@ (80035fc <HAL_RCC_ClockConfig+0x260>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 030f 	and.w	r3, r3, #15
 8003582:	683a      	ldr	r2, [r7, #0]
 8003584:	429a      	cmp	r2, r3
 8003586:	d1ed      	bne.n	8003564 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0304 	and.w	r3, r3, #4
 8003590:	2b00      	cmp	r3, #0
 8003592:	d008      	beq.n	80035a6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003594:	4b1a      	ldr	r3, [pc, #104]	@ (8003600 <HAL_RCC_ClockConfig+0x264>)
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	4917      	ldr	r1, [pc, #92]	@ (8003600 <HAL_RCC_ClockConfig+0x264>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0308 	and.w	r3, r3, #8
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d009      	beq.n	80035c6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035b2:	4b13      	ldr	r3, [pc, #76]	@ (8003600 <HAL_RCC_ClockConfig+0x264>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	490f      	ldr	r1, [pc, #60]	@ (8003600 <HAL_RCC_ClockConfig+0x264>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035c6:	f000 f825 	bl	8003614 <HAL_RCC_GetSysClockFreq>
 80035ca:	4602      	mov	r2, r0
 80035cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003600 <HAL_RCC_ClockConfig+0x264>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	091b      	lsrs	r3, r3, #4
 80035d2:	f003 030f 	and.w	r3, r3, #15
 80035d6:	490c      	ldr	r1, [pc, #48]	@ (8003608 <HAL_RCC_ClockConfig+0x26c>)
 80035d8:	5ccb      	ldrb	r3, [r1, r3]
 80035da:	f003 031f 	and.w	r3, r3, #31
 80035de:	fa22 f303 	lsr.w	r3, r2, r3
 80035e2:	4a0a      	ldr	r2, [pc, #40]	@ (800360c <HAL_RCC_ClockConfig+0x270>)
 80035e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80035e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003610 <HAL_RCC_ClockConfig+0x274>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7fd feea 	bl	80013c4 <HAL_InitTick>
 80035f0:	4603      	mov	r3, r0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3718      	adds	r7, #24
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	40022000 	.word	0x40022000
 8003600:	40021000 	.word	0x40021000
 8003604:	04c4b400 	.word	0x04c4b400
 8003608:	08005030 	.word	0x08005030
 800360c:	20000000 	.word	0x20000000
 8003610:	20000004 	.word	0x20000004

08003614 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003614:	b480      	push	{r7}
 8003616:	b087      	sub	sp, #28
 8003618:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800361a:	4b2c      	ldr	r3, [pc, #176]	@ (80036cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f003 030c 	and.w	r3, r3, #12
 8003622:	2b04      	cmp	r3, #4
 8003624:	d102      	bne.n	800362c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003626:	4b2a      	ldr	r3, [pc, #168]	@ (80036d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003628:	613b      	str	r3, [r7, #16]
 800362a:	e047      	b.n	80036bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800362c:	4b27      	ldr	r3, [pc, #156]	@ (80036cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f003 030c 	and.w	r3, r3, #12
 8003634:	2b08      	cmp	r3, #8
 8003636:	d102      	bne.n	800363e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003638:	4b26      	ldr	r3, [pc, #152]	@ (80036d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800363a:	613b      	str	r3, [r7, #16]
 800363c:	e03e      	b.n	80036bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800363e:	4b23      	ldr	r3, [pc, #140]	@ (80036cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 030c 	and.w	r3, r3, #12
 8003646:	2b0c      	cmp	r3, #12
 8003648:	d136      	bne.n	80036b8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800364a:	4b20      	ldr	r3, [pc, #128]	@ (80036cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	f003 0303 	and.w	r3, r3, #3
 8003652:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003654:	4b1d      	ldr	r3, [pc, #116]	@ (80036cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	091b      	lsrs	r3, r3, #4
 800365a:	f003 030f 	and.w	r3, r3, #15
 800365e:	3301      	adds	r3, #1
 8003660:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2b03      	cmp	r3, #3
 8003666:	d10c      	bne.n	8003682 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003668:	4a1a      	ldr	r2, [pc, #104]	@ (80036d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003670:	4a16      	ldr	r2, [pc, #88]	@ (80036cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003672:	68d2      	ldr	r2, [r2, #12]
 8003674:	0a12      	lsrs	r2, r2, #8
 8003676:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800367a:	fb02 f303 	mul.w	r3, r2, r3
 800367e:	617b      	str	r3, [r7, #20]
      break;
 8003680:	e00c      	b.n	800369c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003682:	4a13      	ldr	r2, [pc, #76]	@ (80036d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	fbb2 f3f3 	udiv	r3, r2, r3
 800368a:	4a10      	ldr	r2, [pc, #64]	@ (80036cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800368c:	68d2      	ldr	r2, [r2, #12]
 800368e:	0a12      	lsrs	r2, r2, #8
 8003690:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003694:	fb02 f303 	mul.w	r3, r2, r3
 8003698:	617b      	str	r3, [r7, #20]
      break;
 800369a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800369c:	4b0b      	ldr	r3, [pc, #44]	@ (80036cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	0e5b      	lsrs	r3, r3, #25
 80036a2:	f003 0303 	and.w	r3, r3, #3
 80036a6:	3301      	adds	r3, #1
 80036a8:	005b      	lsls	r3, r3, #1
 80036aa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b4:	613b      	str	r3, [r7, #16]
 80036b6:	e001      	b.n	80036bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80036b8:	2300      	movs	r3, #0
 80036ba:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80036bc:	693b      	ldr	r3, [r7, #16]
}
 80036be:	4618      	mov	r0, r3
 80036c0:	371c      	adds	r7, #28
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	40021000 	.word	0x40021000
 80036d0:	00f42400 	.word	0x00f42400
 80036d4:	016e3600 	.word	0x016e3600

080036d8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80036d8:	b480      	push	{r7}
 80036da:	b087      	sub	sp, #28
 80036dc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036de:	4b1e      	ldr	r3, [pc, #120]	@ (8003758 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	f003 0303 	and.w	r3, r3, #3
 80036e6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003758 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	091b      	lsrs	r3, r3, #4
 80036ee:	f003 030f 	and.w	r3, r3, #15
 80036f2:	3301      	adds	r3, #1
 80036f4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	2b03      	cmp	r3, #3
 80036fa:	d10c      	bne.n	8003716 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036fc:	4a17      	ldr	r2, [pc, #92]	@ (800375c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	fbb2 f3f3 	udiv	r3, r2, r3
 8003704:	4a14      	ldr	r2, [pc, #80]	@ (8003758 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003706:	68d2      	ldr	r2, [r2, #12]
 8003708:	0a12      	lsrs	r2, r2, #8
 800370a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800370e:	fb02 f303 	mul.w	r3, r2, r3
 8003712:	617b      	str	r3, [r7, #20]
    break;
 8003714:	e00c      	b.n	8003730 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003716:	4a12      	ldr	r2, [pc, #72]	@ (8003760 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	fbb2 f3f3 	udiv	r3, r2, r3
 800371e:	4a0e      	ldr	r2, [pc, #56]	@ (8003758 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003720:	68d2      	ldr	r2, [r2, #12]
 8003722:	0a12      	lsrs	r2, r2, #8
 8003724:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003728:	fb02 f303 	mul.w	r3, r2, r3
 800372c:	617b      	str	r3, [r7, #20]
    break;
 800372e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003730:	4b09      	ldr	r3, [pc, #36]	@ (8003758 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	0e5b      	lsrs	r3, r3, #25
 8003736:	f003 0303 	and.w	r3, r3, #3
 800373a:	3301      	adds	r3, #1
 800373c:	005b      	lsls	r3, r3, #1
 800373e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003740:	697a      	ldr	r2, [r7, #20]
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	fbb2 f3f3 	udiv	r3, r2, r3
 8003748:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800374a:	687b      	ldr	r3, [r7, #4]
}
 800374c:	4618      	mov	r0, r3
 800374e:	371c      	adds	r7, #28
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr
 8003758:	40021000 	.word	0x40021000
 800375c:	016e3600 	.word	0x016e3600
 8003760:	00f42400 	.word	0x00f42400

08003764 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b086      	sub	sp, #24
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800376c:	2300      	movs	r3, #0
 800376e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003770:	2300      	movs	r3, #0
 8003772:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800377c:	2b00      	cmp	r3, #0
 800377e:	f000 8098 	beq.w	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003782:	2300      	movs	r3, #0
 8003784:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003786:	4b43      	ldr	r3, [pc, #268]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800378a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d10d      	bne.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003792:	4b40      	ldr	r3, [pc, #256]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003796:	4a3f      	ldr	r2, [pc, #252]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003798:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800379c:	6593      	str	r3, [r2, #88]	@ 0x58
 800379e:	4b3d      	ldr	r3, [pc, #244]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037a6:	60bb      	str	r3, [r7, #8]
 80037a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037aa:	2301      	movs	r3, #1
 80037ac:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037ae:	4b3a      	ldr	r3, [pc, #232]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a39      	ldr	r2, [pc, #228]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80037b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037ba:	f7fd fe4f 	bl	800145c <HAL_GetTick>
 80037be:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037c0:	e009      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037c2:	f7fd fe4b 	bl	800145c <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d902      	bls.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	74fb      	strb	r3, [r7, #19]
        break;
 80037d4:	e005      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037d6:	4b30      	ldr	r3, [pc, #192]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d0ef      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80037e2:	7cfb      	ldrb	r3, [r7, #19]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d159      	bne.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80037e8:	4b2a      	ldr	r3, [pc, #168]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037f2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d01e      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	429a      	cmp	r2, r3
 8003802:	d019      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003804:	4b23      	ldr	r3, [pc, #140]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003806:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800380a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800380e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003810:	4b20      	ldr	r3, [pc, #128]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003812:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003816:	4a1f      	ldr	r2, [pc, #124]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003818:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800381c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003820:	4b1c      	ldr	r3, [pc, #112]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003822:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003826:	4a1b      	ldr	r2, [pc, #108]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003828:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800382c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003830:	4a18      	ldr	r2, [pc, #96]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	2b00      	cmp	r3, #0
 8003840:	d016      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003842:	f7fd fe0b 	bl	800145c <HAL_GetTick>
 8003846:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003848:	e00b      	b.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800384a:	f7fd fe07 	bl	800145c <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003858:	4293      	cmp	r3, r2
 800385a:	d902      	bls.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	74fb      	strb	r3, [r7, #19]
            break;
 8003860:	e006      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003862:	4b0c      	ldr	r3, [pc, #48]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003864:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b00      	cmp	r3, #0
 800386e:	d0ec      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003870:	7cfb      	ldrb	r3, [r7, #19]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d10b      	bne.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003876:	4b07      	ldr	r3, [pc, #28]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003878:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800387c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003884:	4903      	ldr	r1, [pc, #12]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003886:	4313      	orrs	r3, r2
 8003888:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800388c:	e008      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800388e:	7cfb      	ldrb	r3, [r7, #19]
 8003890:	74bb      	strb	r3, [r7, #18]
 8003892:	e005      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003894:	40021000 	.word	0x40021000
 8003898:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800389c:	7cfb      	ldrb	r3, [r7, #19]
 800389e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038a0:	7c7b      	ldrb	r3, [r7, #17]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d105      	bne.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038a6:	4ba7      	ldr	r3, [pc, #668]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038aa:	4aa6      	ldr	r2, [pc, #664]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038b0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00a      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038be:	4ba1      	ldr	r3, [pc, #644]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038c4:	f023 0203 	bic.w	r2, r3, #3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	499d      	ldr	r1, [pc, #628]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00a      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038e0:	4b98      	ldr	r3, [pc, #608]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038e6:	f023 020c 	bic.w	r2, r3, #12
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	4995      	ldr	r1, [pc, #596]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0304 	and.w	r3, r3, #4
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00a      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003902:	4b90      	ldr	r3, [pc, #576]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003904:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003908:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	498c      	ldr	r1, [pc, #560]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003912:	4313      	orrs	r3, r2
 8003914:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0308 	and.w	r3, r3, #8
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00a      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003924:	4b87      	ldr	r3, [pc, #540]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800392a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	4984      	ldr	r1, [pc, #528]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003934:	4313      	orrs	r3, r2
 8003936:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0310 	and.w	r3, r3, #16
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00a      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003946:	4b7f      	ldr	r3, [pc, #508]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003948:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800394c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	695b      	ldr	r3, [r3, #20]
 8003954:	497b      	ldr	r1, [pc, #492]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003956:	4313      	orrs	r3, r2
 8003958:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0320 	and.w	r3, r3, #32
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00a      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003968:	4b76      	ldr	r3, [pc, #472]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800396a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800396e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	4973      	ldr	r1, [pc, #460]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003978:	4313      	orrs	r3, r2
 800397a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00a      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800398a:	4b6e      	ldr	r3, [pc, #440]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800398c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003990:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	69db      	ldr	r3, [r3, #28]
 8003998:	496a      	ldr	r1, [pc, #424]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800399a:	4313      	orrs	r3, r2
 800399c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d00a      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039ac:	4b65      	ldr	r3, [pc, #404]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039b2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a1b      	ldr	r3, [r3, #32]
 80039ba:	4962      	ldr	r1, [pc, #392]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00a      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039ce:	4b5d      	ldr	r3, [pc, #372]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039d4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039dc:	4959      	ldr	r1, [pc, #356]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00a      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80039f0:	4b54      	ldr	r3, [pc, #336]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80039f6:	f023 0203 	bic.w	r2, r3, #3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039fe:	4951      	ldr	r1, [pc, #324]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00a      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a12:	4b4c      	ldr	r3, [pc, #304]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a18:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a20:	4948      	ldr	r1, [pc, #288]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d015      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a34:	4b43      	ldr	r3, [pc, #268]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a3a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a42:	4940      	ldr	r1, [pc, #256]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a52:	d105      	bne.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a54:	4b3b      	ldr	r3, [pc, #236]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	4a3a      	ldr	r2, [pc, #232]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a5e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d015      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a6c:	4b35      	ldr	r3, [pc, #212]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a72:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a7a:	4932      	ldr	r1, [pc, #200]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a86:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a8a:	d105      	bne.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a8c:	4b2d      	ldr	r3, [pc, #180]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	4a2c      	ldr	r2, [pc, #176]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a96:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d015      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003aa4:	4b27      	ldr	r3, [pc, #156]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aaa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ab2:	4924      	ldr	r1, [pc, #144]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003abe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ac2:	d105      	bne.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ac4:	4b1f      	ldr	r3, [pc, #124]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	4a1e      	ldr	r2, [pc, #120]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ace:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d015      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003adc:	4b19      	ldr	r3, [pc, #100]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ae2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aea:	4916      	ldr	r1, [pc, #88]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003af6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003afa:	d105      	bne.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003afc:	4b11      	ldr	r3, [pc, #68]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	4a10      	ldr	r2, [pc, #64]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b06:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d019      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b14:	4b0b      	ldr	r3, [pc, #44]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b1a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b22:	4908      	ldr	r1, [pc, #32]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b32:	d109      	bne.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b34:	4b03      	ldr	r3, [pc, #12]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	4a02      	ldr	r2, [pc, #8]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b3e:	60d3      	str	r3, [r2, #12]
 8003b40:	e002      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003b42:	bf00      	nop
 8003b44:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d015      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003b54:	4b29      	ldr	r3, [pc, #164]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b5a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b62:	4926      	ldr	r1, [pc, #152]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b72:	d105      	bne.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003b74:	4b21      	ldr	r3, [pc, #132]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	4a20      	ldr	r2, [pc, #128]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b7e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d015      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003b8c:	4b1b      	ldr	r3, [pc, #108]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b92:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b9a:	4918      	ldr	r1, [pc, #96]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003baa:	d105      	bne.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003bac:	4b13      	ldr	r3, [pc, #76]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	4a12      	ldr	r2, [pc, #72]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bb6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d015      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003bc4:	4b0d      	ldr	r3, [pc, #52]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003bca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bd2:	490a      	ldr	r1, [pc, #40]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bde:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003be2:	d105      	bne.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003be4:	4b05      	ldr	r3, [pc, #20]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	4a04      	ldr	r2, [pc, #16]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003bee:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003bf0:	7cbb      	ldrb	r3, [r7, #18]
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3718      	adds	r7, #24
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	40021000 	.word	0x40021000

08003c00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e049      	b.n	8003ca6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d106      	bne.n	8003c2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7fd f9a0 	bl	8000f6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2202      	movs	r2, #2
 8003c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	3304      	adds	r3, #4
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	4610      	mov	r0, r2
 8003c40:	f000 fbf4 	bl	800442c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3708      	adds	r7, #8
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b082      	sub	sp, #8
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d101      	bne.n	8003cc0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e049      	b.n	8003d54 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d106      	bne.n	8003cda <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f000 f841 	bl	8003d5c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2202      	movs	r2, #2
 8003cde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	3304      	adds	r3, #4
 8003cea:	4619      	mov	r1, r3
 8003cec:	4610      	mov	r0, r2
 8003cee:	f000 fb9d 	bl	800442c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3708      	adds	r7, #8
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003d64:	bf00      	nop
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d101      	bne.n	8003d84 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e097      	b.n	8003eb4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d106      	bne.n	8003d9e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f7fd f941 	bl	8001020 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2202      	movs	r2, #2
 8003da2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	6812      	ldr	r2, [r2, #0]
 8003db0:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8003db4:	f023 0307 	bic.w	r3, r3, #7
 8003db8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	3304      	adds	r3, #4
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	4610      	mov	r0, r2
 8003dc6:	f000 fb31 	bl	800442c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	6a1b      	ldr	r3, [r3, #32]
 8003de0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	697a      	ldr	r2, [r7, #20]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003df2:	f023 0303 	bic.w	r3, r3, #3
 8003df6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	689a      	ldr	r2, [r3, #8]
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	021b      	lsls	r3, r3, #8
 8003e02:	4313      	orrs	r3, r2
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003e10:	f023 030c 	bic.w	r3, r3, #12
 8003e14:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003e1c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	68da      	ldr	r2, [r3, #12]
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	021b      	lsls	r3, r3, #8
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	693a      	ldr	r2, [r7, #16]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	011a      	lsls	r2, r3, #4
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	031b      	lsls	r3, r3, #12
 8003e40:	4313      	orrs	r3, r2
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003e4e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003e56:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	685a      	ldr	r2, [r3, #4]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	695b      	ldr	r3, [r3, #20]
 8003e60:	011b      	lsls	r3, r3, #4
 8003e62:	4313      	orrs	r3, r2
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	697a      	ldr	r2, [r7, #20]
 8003e70:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2201      	movs	r2, #1
 8003e86:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3718      	adds	r7, #24
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ecc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003ed4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003edc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003ee4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d110      	bne.n	8003f0e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003eec:	7bfb      	ldrb	r3, [r7, #15]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d102      	bne.n	8003ef8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ef2:	7b7b      	ldrb	r3, [r7, #13]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d001      	beq.n	8003efc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e069      	b.n	8003fd0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2202      	movs	r2, #2
 8003f00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2202      	movs	r2, #2
 8003f08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f0c:	e031      	b.n	8003f72 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	2b04      	cmp	r3, #4
 8003f12:	d110      	bne.n	8003f36 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f14:	7bbb      	ldrb	r3, [r7, #14]
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d102      	bne.n	8003f20 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f1a:	7b3b      	ldrb	r3, [r7, #12]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d001      	beq.n	8003f24 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e055      	b.n	8003fd0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2202      	movs	r2, #2
 8003f28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2202      	movs	r2, #2
 8003f30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f34:	e01d      	b.n	8003f72 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f36:	7bfb      	ldrb	r3, [r7, #15]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d108      	bne.n	8003f4e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f3c:	7bbb      	ldrb	r3, [r7, #14]
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d105      	bne.n	8003f4e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f42:	7b7b      	ldrb	r3, [r7, #13]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d102      	bne.n	8003f4e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f48:	7b3b      	ldrb	r3, [r7, #12]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d001      	beq.n	8003f52 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e03e      	b.n	8003fd0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2202      	movs	r2, #2
 8003f56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2202      	movs	r2, #2
 8003f5e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2202      	movs	r2, #2
 8003f66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2202      	movs	r2, #2
 8003f6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d003      	beq.n	8003f80 <HAL_TIM_Encoder_Start+0xc4>
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	2b04      	cmp	r3, #4
 8003f7c:	d008      	beq.n	8003f90 <HAL_TIM_Encoder_Start+0xd4>
 8003f7e:	e00f      	b.n	8003fa0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2201      	movs	r2, #1
 8003f86:	2100      	movs	r1, #0
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f000 fec9 	bl	8004d20 <TIM_CCxChannelCmd>
      break;
 8003f8e:	e016      	b.n	8003fbe <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2201      	movs	r2, #1
 8003f96:	2104      	movs	r1, #4
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f000 fec1 	bl	8004d20 <TIM_CCxChannelCmd>
      break;
 8003f9e:	e00e      	b.n	8003fbe <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	2100      	movs	r1, #0
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f000 feb9 	bl	8004d20 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	2104      	movs	r1, #4
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f000 feb2 	bl	8004d20 <TIM_CCxChannelCmd>
      break;
 8003fbc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f042 0201 	orr.w	r2, r2, #1
 8003fcc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d101      	bne.n	8003ff6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003ff2:	2302      	movs	r3, #2
 8003ff4:	e0ff      	b.n	80041f6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2b14      	cmp	r3, #20
 8004002:	f200 80f0 	bhi.w	80041e6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004006:	a201      	add	r2, pc, #4	@ (adr r2, 800400c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800400c:	08004061 	.word	0x08004061
 8004010:	080041e7 	.word	0x080041e7
 8004014:	080041e7 	.word	0x080041e7
 8004018:	080041e7 	.word	0x080041e7
 800401c:	080040a1 	.word	0x080040a1
 8004020:	080041e7 	.word	0x080041e7
 8004024:	080041e7 	.word	0x080041e7
 8004028:	080041e7 	.word	0x080041e7
 800402c:	080040e3 	.word	0x080040e3
 8004030:	080041e7 	.word	0x080041e7
 8004034:	080041e7 	.word	0x080041e7
 8004038:	080041e7 	.word	0x080041e7
 800403c:	08004123 	.word	0x08004123
 8004040:	080041e7 	.word	0x080041e7
 8004044:	080041e7 	.word	0x080041e7
 8004048:	080041e7 	.word	0x080041e7
 800404c:	08004165 	.word	0x08004165
 8004050:	080041e7 	.word	0x080041e7
 8004054:	080041e7 	.word	0x080041e7
 8004058:	080041e7 	.word	0x080041e7
 800405c:	080041a5 	.word	0x080041a5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68b9      	ldr	r1, [r7, #8]
 8004066:	4618      	mov	r0, r3
 8004068:	f000 fa94 	bl	8004594 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	699a      	ldr	r2, [r3, #24]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f042 0208 	orr.w	r2, r2, #8
 800407a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	699a      	ldr	r2, [r3, #24]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f022 0204 	bic.w	r2, r2, #4
 800408a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6999      	ldr	r1, [r3, #24]
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	691a      	ldr	r2, [r3, #16]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	430a      	orrs	r2, r1
 800409c:	619a      	str	r2, [r3, #24]
      break;
 800409e:	e0a5      	b.n	80041ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68b9      	ldr	r1, [r7, #8]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 fb0e 	bl	80046c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	699a      	ldr	r2, [r3, #24]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	699a      	ldr	r2, [r3, #24]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6999      	ldr	r1, [r3, #24]
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	021a      	lsls	r2, r3, #8
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	430a      	orrs	r2, r1
 80040de:	619a      	str	r2, [r3, #24]
      break;
 80040e0:	e084      	b.n	80041ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68b9      	ldr	r1, [r7, #8]
 80040e8:	4618      	mov	r0, r3
 80040ea:	f000 fb81 	bl	80047f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	69da      	ldr	r2, [r3, #28]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f042 0208 	orr.w	r2, r2, #8
 80040fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	69da      	ldr	r2, [r3, #28]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f022 0204 	bic.w	r2, r2, #4
 800410c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	69d9      	ldr	r1, [r3, #28]
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	691a      	ldr	r2, [r3, #16]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	430a      	orrs	r2, r1
 800411e:	61da      	str	r2, [r3, #28]
      break;
 8004120:	e064      	b.n	80041ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68b9      	ldr	r1, [r7, #8]
 8004128:	4618      	mov	r0, r3
 800412a:	f000 fbf3 	bl	8004914 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	69da      	ldr	r2, [r3, #28]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800413c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	69da      	ldr	r2, [r3, #28]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800414c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	69d9      	ldr	r1, [r3, #28]
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	021a      	lsls	r2, r3, #8
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	430a      	orrs	r2, r1
 8004160:	61da      	str	r2, [r3, #28]
      break;
 8004162:	e043      	b.n	80041ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68b9      	ldr	r1, [r7, #8]
 800416a:	4618      	mov	r0, r3
 800416c:	f000 fc66 	bl	8004a3c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f042 0208 	orr.w	r2, r2, #8
 800417e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f022 0204 	bic.w	r2, r2, #4
 800418e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	691a      	ldr	r2, [r3, #16]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	430a      	orrs	r2, r1
 80041a0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80041a2:	e023      	b.n	80041ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68b9      	ldr	r1, [r7, #8]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f000 fcb0 	bl	8004b10 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041be:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041ce:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	021a      	lsls	r2, r3, #8
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	430a      	orrs	r2, r1
 80041e2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80041e4:	e002      	b.n	80041ec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	75fb      	strb	r3, [r7, #23]
      break;
 80041ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80041f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3718      	adds	r7, #24
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop

08004200 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800420a:	2300      	movs	r3, #0
 800420c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004214:	2b01      	cmp	r3, #1
 8004216:	d101      	bne.n	800421c <HAL_TIM_ConfigClockSource+0x1c>
 8004218:	2302      	movs	r3, #2
 800421a:	e0f6      	b.n	800440a <HAL_TIM_ConfigClockSource+0x20a>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2202      	movs	r2, #2
 8004228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800423a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800423e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004246:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68ba      	ldr	r2, [r7, #8]
 800424e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a6f      	ldr	r2, [pc, #444]	@ (8004414 <HAL_TIM_ConfigClockSource+0x214>)
 8004256:	4293      	cmp	r3, r2
 8004258:	f000 80c1 	beq.w	80043de <HAL_TIM_ConfigClockSource+0x1de>
 800425c:	4a6d      	ldr	r2, [pc, #436]	@ (8004414 <HAL_TIM_ConfigClockSource+0x214>)
 800425e:	4293      	cmp	r3, r2
 8004260:	f200 80c6 	bhi.w	80043f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004264:	4a6c      	ldr	r2, [pc, #432]	@ (8004418 <HAL_TIM_ConfigClockSource+0x218>)
 8004266:	4293      	cmp	r3, r2
 8004268:	f000 80b9 	beq.w	80043de <HAL_TIM_ConfigClockSource+0x1de>
 800426c:	4a6a      	ldr	r2, [pc, #424]	@ (8004418 <HAL_TIM_ConfigClockSource+0x218>)
 800426e:	4293      	cmp	r3, r2
 8004270:	f200 80be 	bhi.w	80043f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004274:	4a69      	ldr	r2, [pc, #420]	@ (800441c <HAL_TIM_ConfigClockSource+0x21c>)
 8004276:	4293      	cmp	r3, r2
 8004278:	f000 80b1 	beq.w	80043de <HAL_TIM_ConfigClockSource+0x1de>
 800427c:	4a67      	ldr	r2, [pc, #412]	@ (800441c <HAL_TIM_ConfigClockSource+0x21c>)
 800427e:	4293      	cmp	r3, r2
 8004280:	f200 80b6 	bhi.w	80043f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004284:	4a66      	ldr	r2, [pc, #408]	@ (8004420 <HAL_TIM_ConfigClockSource+0x220>)
 8004286:	4293      	cmp	r3, r2
 8004288:	f000 80a9 	beq.w	80043de <HAL_TIM_ConfigClockSource+0x1de>
 800428c:	4a64      	ldr	r2, [pc, #400]	@ (8004420 <HAL_TIM_ConfigClockSource+0x220>)
 800428e:	4293      	cmp	r3, r2
 8004290:	f200 80ae 	bhi.w	80043f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004294:	4a63      	ldr	r2, [pc, #396]	@ (8004424 <HAL_TIM_ConfigClockSource+0x224>)
 8004296:	4293      	cmp	r3, r2
 8004298:	f000 80a1 	beq.w	80043de <HAL_TIM_ConfigClockSource+0x1de>
 800429c:	4a61      	ldr	r2, [pc, #388]	@ (8004424 <HAL_TIM_ConfigClockSource+0x224>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	f200 80a6 	bhi.w	80043f0 <HAL_TIM_ConfigClockSource+0x1f0>
 80042a4:	4a60      	ldr	r2, [pc, #384]	@ (8004428 <HAL_TIM_ConfigClockSource+0x228>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	f000 8099 	beq.w	80043de <HAL_TIM_ConfigClockSource+0x1de>
 80042ac:	4a5e      	ldr	r2, [pc, #376]	@ (8004428 <HAL_TIM_ConfigClockSource+0x228>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	f200 809e 	bhi.w	80043f0 <HAL_TIM_ConfigClockSource+0x1f0>
 80042b4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80042b8:	f000 8091 	beq.w	80043de <HAL_TIM_ConfigClockSource+0x1de>
 80042bc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80042c0:	f200 8096 	bhi.w	80043f0 <HAL_TIM_ConfigClockSource+0x1f0>
 80042c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042c8:	f000 8089 	beq.w	80043de <HAL_TIM_ConfigClockSource+0x1de>
 80042cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042d0:	f200 808e 	bhi.w	80043f0 <HAL_TIM_ConfigClockSource+0x1f0>
 80042d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042d8:	d03e      	beq.n	8004358 <HAL_TIM_ConfigClockSource+0x158>
 80042da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042de:	f200 8087 	bhi.w	80043f0 <HAL_TIM_ConfigClockSource+0x1f0>
 80042e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042e6:	f000 8086 	beq.w	80043f6 <HAL_TIM_ConfigClockSource+0x1f6>
 80042ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042ee:	d87f      	bhi.n	80043f0 <HAL_TIM_ConfigClockSource+0x1f0>
 80042f0:	2b70      	cmp	r3, #112	@ 0x70
 80042f2:	d01a      	beq.n	800432a <HAL_TIM_ConfigClockSource+0x12a>
 80042f4:	2b70      	cmp	r3, #112	@ 0x70
 80042f6:	d87b      	bhi.n	80043f0 <HAL_TIM_ConfigClockSource+0x1f0>
 80042f8:	2b60      	cmp	r3, #96	@ 0x60
 80042fa:	d050      	beq.n	800439e <HAL_TIM_ConfigClockSource+0x19e>
 80042fc:	2b60      	cmp	r3, #96	@ 0x60
 80042fe:	d877      	bhi.n	80043f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004300:	2b50      	cmp	r3, #80	@ 0x50
 8004302:	d03c      	beq.n	800437e <HAL_TIM_ConfigClockSource+0x17e>
 8004304:	2b50      	cmp	r3, #80	@ 0x50
 8004306:	d873      	bhi.n	80043f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004308:	2b40      	cmp	r3, #64	@ 0x40
 800430a:	d058      	beq.n	80043be <HAL_TIM_ConfigClockSource+0x1be>
 800430c:	2b40      	cmp	r3, #64	@ 0x40
 800430e:	d86f      	bhi.n	80043f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004310:	2b30      	cmp	r3, #48	@ 0x30
 8004312:	d064      	beq.n	80043de <HAL_TIM_ConfigClockSource+0x1de>
 8004314:	2b30      	cmp	r3, #48	@ 0x30
 8004316:	d86b      	bhi.n	80043f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004318:	2b20      	cmp	r3, #32
 800431a:	d060      	beq.n	80043de <HAL_TIM_ConfigClockSource+0x1de>
 800431c:	2b20      	cmp	r3, #32
 800431e:	d867      	bhi.n	80043f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004320:	2b00      	cmp	r3, #0
 8004322:	d05c      	beq.n	80043de <HAL_TIM_ConfigClockSource+0x1de>
 8004324:	2b10      	cmp	r3, #16
 8004326:	d05a      	beq.n	80043de <HAL_TIM_ConfigClockSource+0x1de>
 8004328:	e062      	b.n	80043f0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800433a:	f000 fcd1 	bl	8004ce0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800434c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68ba      	ldr	r2, [r7, #8]
 8004354:	609a      	str	r2, [r3, #8]
      break;
 8004356:	e04f      	b.n	80043f8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004368:	f000 fcba 	bl	8004ce0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	689a      	ldr	r2, [r3, #8]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800437a:	609a      	str	r2, [r3, #8]
      break;
 800437c:	e03c      	b.n	80043f8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800438a:	461a      	mov	r2, r3
 800438c:	f000 fc2c 	bl	8004be8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2150      	movs	r1, #80	@ 0x50
 8004396:	4618      	mov	r0, r3
 8004398:	f000 fc85 	bl	8004ca6 <TIM_ITRx_SetConfig>
      break;
 800439c:	e02c      	b.n	80043f8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043aa:	461a      	mov	r2, r3
 80043ac:	f000 fc4b 	bl	8004c46 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2160      	movs	r1, #96	@ 0x60
 80043b6:	4618      	mov	r0, r3
 80043b8:	f000 fc75 	bl	8004ca6 <TIM_ITRx_SetConfig>
      break;
 80043bc:	e01c      	b.n	80043f8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ca:	461a      	mov	r2, r3
 80043cc:	f000 fc0c 	bl	8004be8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2140      	movs	r1, #64	@ 0x40
 80043d6:	4618      	mov	r0, r3
 80043d8:	f000 fc65 	bl	8004ca6 <TIM_ITRx_SetConfig>
      break;
 80043dc:	e00c      	b.n	80043f8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4619      	mov	r1, r3
 80043e8:	4610      	mov	r0, r2
 80043ea:	f000 fc5c 	bl	8004ca6 <TIM_ITRx_SetConfig>
      break;
 80043ee:	e003      	b.n	80043f8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	73fb      	strb	r3, [r7, #15]
      break;
 80043f4:	e000      	b.n	80043f8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80043f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004408:	7bfb      	ldrb	r3, [r7, #15]
}
 800440a:	4618      	mov	r0, r3
 800440c:	3710      	adds	r7, #16
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	00100070 	.word	0x00100070
 8004418:	00100060 	.word	0x00100060
 800441c:	00100050 	.word	0x00100050
 8004420:	00100040 	.word	0x00100040
 8004424:	00100030 	.word	0x00100030
 8004428:	00100020 	.word	0x00100020

0800442c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a4c      	ldr	r2, [pc, #304]	@ (8004570 <TIM_Base_SetConfig+0x144>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d017      	beq.n	8004474 <TIM_Base_SetConfig+0x48>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800444a:	d013      	beq.n	8004474 <TIM_Base_SetConfig+0x48>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a49      	ldr	r2, [pc, #292]	@ (8004574 <TIM_Base_SetConfig+0x148>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d00f      	beq.n	8004474 <TIM_Base_SetConfig+0x48>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a48      	ldr	r2, [pc, #288]	@ (8004578 <TIM_Base_SetConfig+0x14c>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d00b      	beq.n	8004474 <TIM_Base_SetConfig+0x48>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a47      	ldr	r2, [pc, #284]	@ (800457c <TIM_Base_SetConfig+0x150>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d007      	beq.n	8004474 <TIM_Base_SetConfig+0x48>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a46      	ldr	r2, [pc, #280]	@ (8004580 <TIM_Base_SetConfig+0x154>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d003      	beq.n	8004474 <TIM_Base_SetConfig+0x48>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a45      	ldr	r2, [pc, #276]	@ (8004584 <TIM_Base_SetConfig+0x158>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d108      	bne.n	8004486 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800447a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	68fa      	ldr	r2, [r7, #12]
 8004482:	4313      	orrs	r3, r2
 8004484:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a39      	ldr	r2, [pc, #228]	@ (8004570 <TIM_Base_SetConfig+0x144>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d023      	beq.n	80044d6 <TIM_Base_SetConfig+0xaa>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004494:	d01f      	beq.n	80044d6 <TIM_Base_SetConfig+0xaa>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a36      	ldr	r2, [pc, #216]	@ (8004574 <TIM_Base_SetConfig+0x148>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d01b      	beq.n	80044d6 <TIM_Base_SetConfig+0xaa>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a35      	ldr	r2, [pc, #212]	@ (8004578 <TIM_Base_SetConfig+0x14c>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d017      	beq.n	80044d6 <TIM_Base_SetConfig+0xaa>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a34      	ldr	r2, [pc, #208]	@ (800457c <TIM_Base_SetConfig+0x150>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d013      	beq.n	80044d6 <TIM_Base_SetConfig+0xaa>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a33      	ldr	r2, [pc, #204]	@ (8004580 <TIM_Base_SetConfig+0x154>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d00f      	beq.n	80044d6 <TIM_Base_SetConfig+0xaa>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a33      	ldr	r2, [pc, #204]	@ (8004588 <TIM_Base_SetConfig+0x15c>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d00b      	beq.n	80044d6 <TIM_Base_SetConfig+0xaa>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a32      	ldr	r2, [pc, #200]	@ (800458c <TIM_Base_SetConfig+0x160>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d007      	beq.n	80044d6 <TIM_Base_SetConfig+0xaa>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a31      	ldr	r2, [pc, #196]	@ (8004590 <TIM_Base_SetConfig+0x164>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d003      	beq.n	80044d6 <TIM_Base_SetConfig+0xaa>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a2c      	ldr	r2, [pc, #176]	@ (8004584 <TIM_Base_SetConfig+0x158>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d108      	bne.n	80044e8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	689a      	ldr	r2, [r3, #8]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a18      	ldr	r2, [pc, #96]	@ (8004570 <TIM_Base_SetConfig+0x144>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d013      	beq.n	800453c <TIM_Base_SetConfig+0x110>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a1a      	ldr	r2, [pc, #104]	@ (8004580 <TIM_Base_SetConfig+0x154>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d00f      	beq.n	800453c <TIM_Base_SetConfig+0x110>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a1a      	ldr	r2, [pc, #104]	@ (8004588 <TIM_Base_SetConfig+0x15c>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d00b      	beq.n	800453c <TIM_Base_SetConfig+0x110>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a19      	ldr	r2, [pc, #100]	@ (800458c <TIM_Base_SetConfig+0x160>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d007      	beq.n	800453c <TIM_Base_SetConfig+0x110>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a18      	ldr	r2, [pc, #96]	@ (8004590 <TIM_Base_SetConfig+0x164>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d003      	beq.n	800453c <TIM_Base_SetConfig+0x110>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a13      	ldr	r2, [pc, #76]	@ (8004584 <TIM_Base_SetConfig+0x158>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d103      	bne.n	8004544 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	691a      	ldr	r2, [r3, #16]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	2b01      	cmp	r3, #1
 8004554:	d105      	bne.n	8004562 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	f023 0201 	bic.w	r2, r3, #1
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	611a      	str	r2, [r3, #16]
  }
}
 8004562:	bf00      	nop
 8004564:	3714      	adds	r7, #20
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	40012c00 	.word	0x40012c00
 8004574:	40000400 	.word	0x40000400
 8004578:	40000800 	.word	0x40000800
 800457c:	40000c00 	.word	0x40000c00
 8004580:	40013400 	.word	0x40013400
 8004584:	40015000 	.word	0x40015000
 8004588:	40014000 	.word	0x40014000
 800458c:	40014400 	.word	0x40014400
 8004590:	40014800 	.word	0x40014800

08004594 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004594:	b480      	push	{r7}
 8004596:	b087      	sub	sp, #28
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a1b      	ldr	r3, [r3, #32]
 80045a8:	f023 0201 	bic.w	r2, r3, #1
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f023 0303 	bic.w	r3, r3, #3
 80045ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	f023 0302 	bic.w	r3, r3, #2
 80045e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a30      	ldr	r2, [pc, #192]	@ (80046b0 <TIM_OC1_SetConfig+0x11c>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d013      	beq.n	800461c <TIM_OC1_SetConfig+0x88>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4a2f      	ldr	r2, [pc, #188]	@ (80046b4 <TIM_OC1_SetConfig+0x120>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d00f      	beq.n	800461c <TIM_OC1_SetConfig+0x88>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a2e      	ldr	r2, [pc, #184]	@ (80046b8 <TIM_OC1_SetConfig+0x124>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d00b      	beq.n	800461c <TIM_OC1_SetConfig+0x88>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a2d      	ldr	r2, [pc, #180]	@ (80046bc <TIM_OC1_SetConfig+0x128>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d007      	beq.n	800461c <TIM_OC1_SetConfig+0x88>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a2c      	ldr	r2, [pc, #176]	@ (80046c0 <TIM_OC1_SetConfig+0x12c>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d003      	beq.n	800461c <TIM_OC1_SetConfig+0x88>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a2b      	ldr	r2, [pc, #172]	@ (80046c4 <TIM_OC1_SetConfig+0x130>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d10c      	bne.n	8004636 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	f023 0308 	bic.w	r3, r3, #8
 8004622:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	697a      	ldr	r2, [r7, #20]
 800462a:	4313      	orrs	r3, r2
 800462c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	f023 0304 	bic.w	r3, r3, #4
 8004634:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a1d      	ldr	r2, [pc, #116]	@ (80046b0 <TIM_OC1_SetConfig+0x11c>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d013      	beq.n	8004666 <TIM_OC1_SetConfig+0xd2>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a1c      	ldr	r2, [pc, #112]	@ (80046b4 <TIM_OC1_SetConfig+0x120>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d00f      	beq.n	8004666 <TIM_OC1_SetConfig+0xd2>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a1b      	ldr	r2, [pc, #108]	@ (80046b8 <TIM_OC1_SetConfig+0x124>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d00b      	beq.n	8004666 <TIM_OC1_SetConfig+0xd2>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a1a      	ldr	r2, [pc, #104]	@ (80046bc <TIM_OC1_SetConfig+0x128>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d007      	beq.n	8004666 <TIM_OC1_SetConfig+0xd2>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a19      	ldr	r2, [pc, #100]	@ (80046c0 <TIM_OC1_SetConfig+0x12c>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d003      	beq.n	8004666 <TIM_OC1_SetConfig+0xd2>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a18      	ldr	r2, [pc, #96]	@ (80046c4 <TIM_OC1_SetConfig+0x130>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d111      	bne.n	800468a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800466c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004674:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	4313      	orrs	r3, r2
 800467e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	699b      	ldr	r3, [r3, #24]
 8004684:	693a      	ldr	r2, [r7, #16]
 8004686:	4313      	orrs	r3, r2
 8004688:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	685a      	ldr	r2, [r3, #4]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	697a      	ldr	r2, [r7, #20]
 80046a2:	621a      	str	r2, [r3, #32]
}
 80046a4:	bf00      	nop
 80046a6:	371c      	adds	r7, #28
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr
 80046b0:	40012c00 	.word	0x40012c00
 80046b4:	40013400 	.word	0x40013400
 80046b8:	40014000 	.word	0x40014000
 80046bc:	40014400 	.word	0x40014400
 80046c0:	40014800 	.word	0x40014800
 80046c4:	40015000 	.word	0x40015000

080046c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b087      	sub	sp, #28
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a1b      	ldr	r3, [r3, #32]
 80046dc:	f023 0210 	bic.w	r2, r3, #16
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80046f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004702:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	021b      	lsls	r3, r3, #8
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	4313      	orrs	r3, r2
 800470e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	f023 0320 	bic.w	r3, r3, #32
 8004716:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	011b      	lsls	r3, r3, #4
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	4313      	orrs	r3, r2
 8004722:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a2c      	ldr	r2, [pc, #176]	@ (80047d8 <TIM_OC2_SetConfig+0x110>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d007      	beq.n	800473c <TIM_OC2_SetConfig+0x74>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a2b      	ldr	r2, [pc, #172]	@ (80047dc <TIM_OC2_SetConfig+0x114>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d003      	beq.n	800473c <TIM_OC2_SetConfig+0x74>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a2a      	ldr	r2, [pc, #168]	@ (80047e0 <TIM_OC2_SetConfig+0x118>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d10d      	bne.n	8004758 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004742:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	011b      	lsls	r3, r3, #4
 800474a:	697a      	ldr	r2, [r7, #20]
 800474c:	4313      	orrs	r3, r2
 800474e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004756:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a1f      	ldr	r2, [pc, #124]	@ (80047d8 <TIM_OC2_SetConfig+0x110>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d013      	beq.n	8004788 <TIM_OC2_SetConfig+0xc0>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a1e      	ldr	r2, [pc, #120]	@ (80047dc <TIM_OC2_SetConfig+0x114>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d00f      	beq.n	8004788 <TIM_OC2_SetConfig+0xc0>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a1e      	ldr	r2, [pc, #120]	@ (80047e4 <TIM_OC2_SetConfig+0x11c>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d00b      	beq.n	8004788 <TIM_OC2_SetConfig+0xc0>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a1d      	ldr	r2, [pc, #116]	@ (80047e8 <TIM_OC2_SetConfig+0x120>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d007      	beq.n	8004788 <TIM_OC2_SetConfig+0xc0>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4a1c      	ldr	r2, [pc, #112]	@ (80047ec <TIM_OC2_SetConfig+0x124>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d003      	beq.n	8004788 <TIM_OC2_SetConfig+0xc0>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4a17      	ldr	r2, [pc, #92]	@ (80047e0 <TIM_OC2_SetConfig+0x118>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d113      	bne.n	80047b0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800478e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004796:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	695b      	ldr	r3, [r3, #20]
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	693a      	ldr	r2, [r7, #16]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	693a      	ldr	r2, [r7, #16]
 80047b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	685a      	ldr	r2, [r3, #4]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	697a      	ldr	r2, [r7, #20]
 80047c8:	621a      	str	r2, [r3, #32]
}
 80047ca:	bf00      	nop
 80047cc:	371c      	adds	r7, #28
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop
 80047d8:	40012c00 	.word	0x40012c00
 80047dc:	40013400 	.word	0x40013400
 80047e0:	40015000 	.word	0x40015000
 80047e4:	40014000 	.word	0x40014000
 80047e8:	40014400 	.word	0x40014400
 80047ec:	40014800 	.word	0x40014800

080047f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b087      	sub	sp, #28
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a1b      	ldr	r3, [r3, #32]
 80047fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a1b      	ldr	r3, [r3, #32]
 8004804:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	69db      	ldr	r3, [r3, #28]
 8004816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800481e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004822:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f023 0303 	bic.w	r3, r3, #3
 800482a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	4313      	orrs	r3, r2
 8004834:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800483c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	021b      	lsls	r3, r3, #8
 8004844:	697a      	ldr	r2, [r7, #20]
 8004846:	4313      	orrs	r3, r2
 8004848:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a2b      	ldr	r2, [pc, #172]	@ (80048fc <TIM_OC3_SetConfig+0x10c>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d007      	beq.n	8004862 <TIM_OC3_SetConfig+0x72>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a2a      	ldr	r2, [pc, #168]	@ (8004900 <TIM_OC3_SetConfig+0x110>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d003      	beq.n	8004862 <TIM_OC3_SetConfig+0x72>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a29      	ldr	r2, [pc, #164]	@ (8004904 <TIM_OC3_SetConfig+0x114>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d10d      	bne.n	800487e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004868:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	021b      	lsls	r3, r3, #8
 8004870:	697a      	ldr	r2, [r7, #20]
 8004872:	4313      	orrs	r3, r2
 8004874:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800487c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a1e      	ldr	r2, [pc, #120]	@ (80048fc <TIM_OC3_SetConfig+0x10c>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d013      	beq.n	80048ae <TIM_OC3_SetConfig+0xbe>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a1d      	ldr	r2, [pc, #116]	@ (8004900 <TIM_OC3_SetConfig+0x110>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d00f      	beq.n	80048ae <TIM_OC3_SetConfig+0xbe>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a1d      	ldr	r2, [pc, #116]	@ (8004908 <TIM_OC3_SetConfig+0x118>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d00b      	beq.n	80048ae <TIM_OC3_SetConfig+0xbe>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a1c      	ldr	r2, [pc, #112]	@ (800490c <TIM_OC3_SetConfig+0x11c>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d007      	beq.n	80048ae <TIM_OC3_SetConfig+0xbe>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a1b      	ldr	r2, [pc, #108]	@ (8004910 <TIM_OC3_SetConfig+0x120>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d003      	beq.n	80048ae <TIM_OC3_SetConfig+0xbe>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a16      	ldr	r2, [pc, #88]	@ (8004904 <TIM_OC3_SetConfig+0x114>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d113      	bne.n	80048d6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80048b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80048bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	695b      	ldr	r3, [r3, #20]
 80048c2:	011b      	lsls	r3, r3, #4
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	011b      	lsls	r3, r3, #4
 80048d0:	693a      	ldr	r2, [r7, #16]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	693a      	ldr	r2, [r7, #16]
 80048da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	685a      	ldr	r2, [r3, #4]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	621a      	str	r2, [r3, #32]
}
 80048f0:	bf00      	nop
 80048f2:	371c      	adds	r7, #28
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr
 80048fc:	40012c00 	.word	0x40012c00
 8004900:	40013400 	.word	0x40013400
 8004904:	40015000 	.word	0x40015000
 8004908:	40014000 	.word	0x40014000
 800490c:	40014400 	.word	0x40014400
 8004910:	40014800 	.word	0x40014800

08004914 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004914:	b480      	push	{r7}
 8004916:	b087      	sub	sp, #28
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a1b      	ldr	r3, [r3, #32]
 8004922:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a1b      	ldr	r3, [r3, #32]
 8004928:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	69db      	ldr	r3, [r3, #28]
 800493a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004942:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004946:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800494e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	021b      	lsls	r3, r3, #8
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	4313      	orrs	r3, r2
 800495a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004962:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	031b      	lsls	r3, r3, #12
 800496a:	697a      	ldr	r2, [r7, #20]
 800496c:	4313      	orrs	r3, r2
 800496e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a2c      	ldr	r2, [pc, #176]	@ (8004a24 <TIM_OC4_SetConfig+0x110>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d007      	beq.n	8004988 <TIM_OC4_SetConfig+0x74>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a2b      	ldr	r2, [pc, #172]	@ (8004a28 <TIM_OC4_SetConfig+0x114>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d003      	beq.n	8004988 <TIM_OC4_SetConfig+0x74>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a2a      	ldr	r2, [pc, #168]	@ (8004a2c <TIM_OC4_SetConfig+0x118>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d10d      	bne.n	80049a4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800498e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	031b      	lsls	r3, r3, #12
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	4313      	orrs	r3, r2
 800499a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80049a2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a1f      	ldr	r2, [pc, #124]	@ (8004a24 <TIM_OC4_SetConfig+0x110>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d013      	beq.n	80049d4 <TIM_OC4_SetConfig+0xc0>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a1e      	ldr	r2, [pc, #120]	@ (8004a28 <TIM_OC4_SetConfig+0x114>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d00f      	beq.n	80049d4 <TIM_OC4_SetConfig+0xc0>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a1e      	ldr	r2, [pc, #120]	@ (8004a30 <TIM_OC4_SetConfig+0x11c>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d00b      	beq.n	80049d4 <TIM_OC4_SetConfig+0xc0>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a1d      	ldr	r2, [pc, #116]	@ (8004a34 <TIM_OC4_SetConfig+0x120>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d007      	beq.n	80049d4 <TIM_OC4_SetConfig+0xc0>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a1c      	ldr	r2, [pc, #112]	@ (8004a38 <TIM_OC4_SetConfig+0x124>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d003      	beq.n	80049d4 <TIM_OC4_SetConfig+0xc0>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4a17      	ldr	r2, [pc, #92]	@ (8004a2c <TIM_OC4_SetConfig+0x118>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d113      	bne.n	80049fc <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80049da:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80049e2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	695b      	ldr	r3, [r3, #20]
 80049e8:	019b      	lsls	r3, r3, #6
 80049ea:	693a      	ldr	r2, [r7, #16]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	019b      	lsls	r3, r3, #6
 80049f6:	693a      	ldr	r2, [r7, #16]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	693a      	ldr	r2, [r7, #16]
 8004a00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	685a      	ldr	r2, [r3, #4]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	697a      	ldr	r2, [r7, #20]
 8004a14:	621a      	str	r2, [r3, #32]
}
 8004a16:	bf00      	nop
 8004a18:	371c      	adds	r7, #28
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop
 8004a24:	40012c00 	.word	0x40012c00
 8004a28:	40013400 	.word	0x40013400
 8004a2c:	40015000 	.word	0x40015000
 8004a30:	40014000 	.word	0x40014000
 8004a34:	40014400 	.word	0x40014400
 8004a38:	40014800 	.word	0x40014800

08004a3c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b087      	sub	sp, #28
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a1b      	ldr	r3, [r3, #32]
 8004a4a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6a1b      	ldr	r3, [r3, #32]
 8004a50:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004a80:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	041b      	lsls	r3, r3, #16
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a19      	ldr	r2, [pc, #100]	@ (8004af8 <TIM_OC5_SetConfig+0xbc>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d013      	beq.n	8004abe <TIM_OC5_SetConfig+0x82>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a18      	ldr	r2, [pc, #96]	@ (8004afc <TIM_OC5_SetConfig+0xc0>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d00f      	beq.n	8004abe <TIM_OC5_SetConfig+0x82>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a17      	ldr	r2, [pc, #92]	@ (8004b00 <TIM_OC5_SetConfig+0xc4>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d00b      	beq.n	8004abe <TIM_OC5_SetConfig+0x82>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a16      	ldr	r2, [pc, #88]	@ (8004b04 <TIM_OC5_SetConfig+0xc8>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d007      	beq.n	8004abe <TIM_OC5_SetConfig+0x82>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a15      	ldr	r2, [pc, #84]	@ (8004b08 <TIM_OC5_SetConfig+0xcc>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d003      	beq.n	8004abe <TIM_OC5_SetConfig+0x82>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a14      	ldr	r2, [pc, #80]	@ (8004b0c <TIM_OC5_SetConfig+0xd0>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d109      	bne.n	8004ad2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ac4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	021b      	lsls	r3, r3, #8
 8004acc:	697a      	ldr	r2, [r7, #20]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	697a      	ldr	r2, [r7, #20]
 8004ad6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	685a      	ldr	r2, [r3, #4]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	693a      	ldr	r2, [r7, #16]
 8004aea:	621a      	str	r2, [r3, #32]
}
 8004aec:	bf00      	nop
 8004aee:	371c      	adds	r7, #28
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr
 8004af8:	40012c00 	.word	0x40012c00
 8004afc:	40013400 	.word	0x40013400
 8004b00:	40014000 	.word	0x40014000
 8004b04:	40014400 	.word	0x40014400
 8004b08:	40014800 	.word	0x40014800
 8004b0c:	40015000 	.word	0x40015000

08004b10 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b087      	sub	sp, #28
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a1b      	ldr	r3, [r3, #32]
 8004b1e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a1b      	ldr	r3, [r3, #32]
 8004b24:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	021b      	lsls	r3, r3, #8
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004b56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	051b      	lsls	r3, r3, #20
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a1a      	ldr	r2, [pc, #104]	@ (8004bd0 <TIM_OC6_SetConfig+0xc0>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d013      	beq.n	8004b94 <TIM_OC6_SetConfig+0x84>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a19      	ldr	r2, [pc, #100]	@ (8004bd4 <TIM_OC6_SetConfig+0xc4>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d00f      	beq.n	8004b94 <TIM_OC6_SetConfig+0x84>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a18      	ldr	r2, [pc, #96]	@ (8004bd8 <TIM_OC6_SetConfig+0xc8>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d00b      	beq.n	8004b94 <TIM_OC6_SetConfig+0x84>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a17      	ldr	r2, [pc, #92]	@ (8004bdc <TIM_OC6_SetConfig+0xcc>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d007      	beq.n	8004b94 <TIM_OC6_SetConfig+0x84>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a16      	ldr	r2, [pc, #88]	@ (8004be0 <TIM_OC6_SetConfig+0xd0>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d003      	beq.n	8004b94 <TIM_OC6_SetConfig+0x84>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a15      	ldr	r2, [pc, #84]	@ (8004be4 <TIM_OC6_SetConfig+0xd4>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d109      	bne.n	8004ba8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b9a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	695b      	ldr	r3, [r3, #20]
 8004ba0:	029b      	lsls	r3, r3, #10
 8004ba2:	697a      	ldr	r2, [r7, #20]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	685a      	ldr	r2, [r3, #4]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	693a      	ldr	r2, [r7, #16]
 8004bc0:	621a      	str	r2, [r3, #32]
}
 8004bc2:	bf00      	nop
 8004bc4:	371c      	adds	r7, #28
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop
 8004bd0:	40012c00 	.word	0x40012c00
 8004bd4:	40013400 	.word	0x40013400
 8004bd8:	40014000 	.word	0x40014000
 8004bdc:	40014400 	.word	0x40014400
 8004be0:	40014800 	.word	0x40014800
 8004be4:	40015000 	.word	0x40015000

08004be8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b087      	sub	sp, #28
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6a1b      	ldr	r3, [r3, #32]
 8004bf8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6a1b      	ldr	r3, [r3, #32]
 8004bfe:	f023 0201 	bic.w	r2, r3, #1
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	011b      	lsls	r3, r3, #4
 8004c18:	693a      	ldr	r2, [r7, #16]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	f023 030a 	bic.w	r3, r3, #10
 8004c24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	693a      	ldr	r2, [r7, #16]
 8004c32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	697a      	ldr	r2, [r7, #20]
 8004c38:	621a      	str	r2, [r3, #32]
}
 8004c3a:	bf00      	nop
 8004c3c:	371c      	adds	r7, #28
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr

08004c46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c46:	b480      	push	{r7}
 8004c48:	b087      	sub	sp, #28
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	60f8      	str	r0, [r7, #12]
 8004c4e:	60b9      	str	r1, [r7, #8]
 8004c50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6a1b      	ldr	r3, [r3, #32]
 8004c56:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6a1b      	ldr	r3, [r3, #32]
 8004c5c:	f023 0210 	bic.w	r2, r3, #16
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	699b      	ldr	r3, [r3, #24]
 8004c68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004c70:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	031b      	lsls	r3, r3, #12
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004c82:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	011b      	lsls	r3, r3, #4
 8004c88:	697a      	ldr	r2, [r7, #20]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	697a      	ldr	r2, [r7, #20]
 8004c98:	621a      	str	r2, [r3, #32]
}
 8004c9a:	bf00      	nop
 8004c9c:	371c      	adds	r7, #28
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr

08004ca6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ca6:	b480      	push	{r7}
 8004ca8:	b085      	sub	sp, #20
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
 8004cae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004cbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004cc2:	683a      	ldr	r2, [r7, #0]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	f043 0307 	orr.w	r3, r3, #7
 8004ccc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	609a      	str	r2, [r3, #8]
}
 8004cd4:	bf00      	nop
 8004cd6:	3714      	adds	r7, #20
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b087      	sub	sp, #28
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	607a      	str	r2, [r7, #4]
 8004cec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004cfa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	021a      	lsls	r2, r3, #8
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	431a      	orrs	r2, r3
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	697a      	ldr	r2, [r7, #20]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	609a      	str	r2, [r3, #8]
}
 8004d14:	bf00      	nop
 8004d16:	371c      	adds	r7, #28
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b087      	sub	sp, #28
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	f003 031f 	and.w	r3, r3, #31
 8004d32:	2201      	movs	r2, #1
 8004d34:	fa02 f303 	lsl.w	r3, r2, r3
 8004d38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6a1a      	ldr	r2, [r3, #32]
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	43db      	mvns	r3, r3
 8004d42:	401a      	ands	r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6a1a      	ldr	r2, [r3, #32]
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	f003 031f 	and.w	r3, r3, #31
 8004d52:	6879      	ldr	r1, [r7, #4]
 8004d54:	fa01 f303 	lsl.w	r3, r1, r3
 8004d58:	431a      	orrs	r2, r3
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	621a      	str	r2, [r3, #32]
}
 8004d5e:	bf00      	nop
 8004d60:	371c      	adds	r7, #28
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
	...

08004d6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d101      	bne.n	8004d84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d80:	2302      	movs	r3, #2
 8004d82:	e074      	b.n	8004e6e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2202      	movs	r2, #2
 8004d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a34      	ldr	r2, [pc, #208]	@ (8004e7c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d009      	beq.n	8004dc2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a33      	ldr	r2, [pc, #204]	@ (8004e80 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d004      	beq.n	8004dc2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a31      	ldr	r2, [pc, #196]	@ (8004e84 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d108      	bne.n	8004dd4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004dc8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004dda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a21      	ldr	r2, [pc, #132]	@ (8004e7c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d022      	beq.n	8004e42 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e04:	d01d      	beq.n	8004e42 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a1f      	ldr	r2, [pc, #124]	@ (8004e88 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d018      	beq.n	8004e42 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a1d      	ldr	r2, [pc, #116]	@ (8004e8c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d013      	beq.n	8004e42 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a1c      	ldr	r2, [pc, #112]	@ (8004e90 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d00e      	beq.n	8004e42 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a15      	ldr	r2, [pc, #84]	@ (8004e80 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d009      	beq.n	8004e42 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a18      	ldr	r2, [pc, #96]	@ (8004e94 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d004      	beq.n	8004e42 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a11      	ldr	r2, [pc, #68]	@ (8004e84 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d10c      	bne.n	8004e5c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	68ba      	ldr	r2, [r7, #8]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68ba      	ldr	r2, [r7, #8]
 8004e5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3714      	adds	r7, #20
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	40012c00 	.word	0x40012c00
 8004e80:	40013400 	.word	0x40013400
 8004e84:	40015000 	.word	0x40015000
 8004e88:	40000400 	.word	0x40000400
 8004e8c:	40000800 	.word	0x40000800
 8004e90:	40000c00 	.word	0x40000c00
 8004e94:	40014000 	.word	0x40014000

08004e98 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b085      	sub	sp, #20
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d101      	bne.n	8004eb4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004eb0:	2302      	movs	r3, #2
 8004eb2:	e078      	b.n	8004fa6 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	699b      	ldr	r3, [r3, #24]
 8004f28:	041b      	lsls	r3, r3, #16
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	69db      	ldr	r3, [r3, #28]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a1c      	ldr	r2, [pc, #112]	@ (8004fb4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d009      	beq.n	8004f5a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a1b      	ldr	r2, [pc, #108]	@ (8004fb8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d004      	beq.n	8004f5a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a19      	ldr	r2, [pc, #100]	@ (8004fbc <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d11c      	bne.n	8004f94 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f64:	051b      	lsls	r3, r3, #20
 8004f66:	4313      	orrs	r3, r2
 8004f68:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	6a1b      	ldr	r3, [r3, #32]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f82:	4313      	orrs	r3, r2
 8004f84:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f90:	4313      	orrs	r3, r2
 8004f92:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3714      	adds	r7, #20
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	40012c00 	.word	0x40012c00
 8004fb8:	40013400 	.word	0x40013400
 8004fbc:	40015000 	.word	0x40015000

08004fc0 <memset>:
 8004fc0:	4402      	add	r2, r0
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d100      	bne.n	8004fca <memset+0xa>
 8004fc8:	4770      	bx	lr
 8004fca:	f803 1b01 	strb.w	r1, [r3], #1
 8004fce:	e7f9      	b.n	8004fc4 <memset+0x4>

08004fd0 <__libc_init_array>:
 8004fd0:	b570      	push	{r4, r5, r6, lr}
 8004fd2:	4d0d      	ldr	r5, [pc, #52]	@ (8005008 <__libc_init_array+0x38>)
 8004fd4:	4c0d      	ldr	r4, [pc, #52]	@ (800500c <__libc_init_array+0x3c>)
 8004fd6:	1b64      	subs	r4, r4, r5
 8004fd8:	10a4      	asrs	r4, r4, #2
 8004fda:	2600      	movs	r6, #0
 8004fdc:	42a6      	cmp	r6, r4
 8004fde:	d109      	bne.n	8004ff4 <__libc_init_array+0x24>
 8004fe0:	4d0b      	ldr	r5, [pc, #44]	@ (8005010 <__libc_init_array+0x40>)
 8004fe2:	4c0c      	ldr	r4, [pc, #48]	@ (8005014 <__libc_init_array+0x44>)
 8004fe4:	f000 f818 	bl	8005018 <_init>
 8004fe8:	1b64      	subs	r4, r4, r5
 8004fea:	10a4      	asrs	r4, r4, #2
 8004fec:	2600      	movs	r6, #0
 8004fee:	42a6      	cmp	r6, r4
 8004ff0:	d105      	bne.n	8004ffe <__libc_init_array+0x2e>
 8004ff2:	bd70      	pop	{r4, r5, r6, pc}
 8004ff4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ff8:	4798      	blx	r3
 8004ffa:	3601      	adds	r6, #1
 8004ffc:	e7ee      	b.n	8004fdc <__libc_init_array+0xc>
 8004ffe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005002:	4798      	blx	r3
 8005004:	3601      	adds	r6, #1
 8005006:	e7f2      	b.n	8004fee <__libc_init_array+0x1e>
 8005008:	08005040 	.word	0x08005040
 800500c:	08005040 	.word	0x08005040
 8005010:	08005040 	.word	0x08005040
 8005014:	08005044 	.word	0x08005044

08005018 <_init>:
 8005018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800501a:	bf00      	nop
 800501c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800501e:	bc08      	pop	{r3}
 8005020:	469e      	mov	lr, r3
 8005022:	4770      	bx	lr

08005024 <_fini>:
 8005024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005026:	bf00      	nop
 8005028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800502a:	bc08      	pop	{r3}
 800502c:	469e      	mov	lr, r3
 800502e:	4770      	bx	lr
