
STU3_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010fec  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  080111c8  080111c8  000121c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011620  08011620  000132c0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08011620  08011620  00012620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011628  08011628  000132c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011628  08011628  00012628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801162c  0801162c  0001262c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c0  20000000  08011630  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c50  200002c0  080118f0  000132c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001f10  080118f0  00013f10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000132c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002997a  00000000  00000000  000132f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d3c  00000000  00000000  0003cc6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cf8  00000000  00000000  000419a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000167d  00000000  00000000  000436a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b510  00000000  00000000  00044d1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028716  00000000  00000000  0007022d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011ac08  00000000  00000000  00098943  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b354b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008580  00000000  00000000  001b3590  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  001bbb10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200002c0 	.word	0x200002c0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080111ac 	.word	0x080111ac

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200002c4 	.word	0x200002c4
 8000214:	080111ac 	.word	0x080111ac

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_frsub>:
 8000bd0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bd4:	e002      	b.n	8000bdc <__addsf3>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_fsub>:
 8000bd8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bdc <__addsf3>:
 8000bdc:	0042      	lsls	r2, r0, #1
 8000bde:	bf1f      	itttt	ne
 8000be0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000be4:	ea92 0f03 	teqne	r2, r3
 8000be8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf0:	d06a      	beq.n	8000cc8 <__addsf3+0xec>
 8000bf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bfa:	bfc1      	itttt	gt
 8000bfc:	18d2      	addgt	r2, r2, r3
 8000bfe:	4041      	eorgt	r1, r0
 8000c00:	4048      	eorgt	r0, r1
 8000c02:	4041      	eorgt	r1, r0
 8000c04:	bfb8      	it	lt
 8000c06:	425b      	neglt	r3, r3
 8000c08:	2b19      	cmp	r3, #25
 8000c0a:	bf88      	it	hi
 8000c0c:	4770      	bxhi	lr
 8000c0e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c12:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c16:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c1a:	bf18      	it	ne
 8000c1c:	4240      	negne	r0, r0
 8000c1e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c22:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c26:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c2a:	bf18      	it	ne
 8000c2c:	4249      	negne	r1, r1
 8000c2e:	ea92 0f03 	teq	r2, r3
 8000c32:	d03f      	beq.n	8000cb4 <__addsf3+0xd8>
 8000c34:	f1a2 0201 	sub.w	r2, r2, #1
 8000c38:	fa41 fc03 	asr.w	ip, r1, r3
 8000c3c:	eb10 000c 	adds.w	r0, r0, ip
 8000c40:	f1c3 0320 	rsb	r3, r3, #32
 8000c44:	fa01 f103 	lsl.w	r1, r1, r3
 8000c48:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c4c:	d502      	bpl.n	8000c54 <__addsf3+0x78>
 8000c4e:	4249      	negs	r1, r1
 8000c50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c54:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c58:	d313      	bcc.n	8000c82 <__addsf3+0xa6>
 8000c5a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c5e:	d306      	bcc.n	8000c6e <__addsf3+0x92>
 8000c60:	0840      	lsrs	r0, r0, #1
 8000c62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c66:	f102 0201 	add.w	r2, r2, #1
 8000c6a:	2afe      	cmp	r2, #254	@ 0xfe
 8000c6c:	d251      	bcs.n	8000d12 <__addsf3+0x136>
 8000c6e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c76:	bf08      	it	eq
 8000c78:	f020 0001 	biceq.w	r0, r0, #1
 8000c7c:	ea40 0003 	orr.w	r0, r0, r3
 8000c80:	4770      	bx	lr
 8000c82:	0049      	lsls	r1, r1, #1
 8000c84:	eb40 0000 	adc.w	r0, r0, r0
 8000c88:	3a01      	subs	r2, #1
 8000c8a:	bf28      	it	cs
 8000c8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c90:	d2ed      	bcs.n	8000c6e <__addsf3+0x92>
 8000c92:	fab0 fc80 	clz	ip, r0
 8000c96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ca2:	bfaa      	itet	ge
 8000ca4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ca8:	4252      	neglt	r2, r2
 8000caa:	4318      	orrge	r0, r3
 8000cac:	bfbc      	itt	lt
 8000cae:	40d0      	lsrlt	r0, r2
 8000cb0:	4318      	orrlt	r0, r3
 8000cb2:	4770      	bx	lr
 8000cb4:	f092 0f00 	teq	r2, #0
 8000cb8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000cbc:	bf06      	itte	eq
 8000cbe:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000cc2:	3201      	addeq	r2, #1
 8000cc4:	3b01      	subne	r3, #1
 8000cc6:	e7b5      	b.n	8000c34 <__addsf3+0x58>
 8000cc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ccc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cd0:	bf18      	it	ne
 8000cd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cd6:	d021      	beq.n	8000d1c <__addsf3+0x140>
 8000cd8:	ea92 0f03 	teq	r2, r3
 8000cdc:	d004      	beq.n	8000ce8 <__addsf3+0x10c>
 8000cde:	f092 0f00 	teq	r2, #0
 8000ce2:	bf08      	it	eq
 8000ce4:	4608      	moveq	r0, r1
 8000ce6:	4770      	bx	lr
 8000ce8:	ea90 0f01 	teq	r0, r1
 8000cec:	bf1c      	itt	ne
 8000cee:	2000      	movne	r0, #0
 8000cf0:	4770      	bxne	lr
 8000cf2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cf6:	d104      	bne.n	8000d02 <__addsf3+0x126>
 8000cf8:	0040      	lsls	r0, r0, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d00:	4770      	bx	lr
 8000d02:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d06:	bf3c      	itt	cc
 8000d08:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d0c:	4770      	bxcc	lr
 8000d0e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d12:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d16:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d1a:	4770      	bx	lr
 8000d1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d20:	bf16      	itet	ne
 8000d22:	4608      	movne	r0, r1
 8000d24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d28:	4601      	movne	r1, r0
 8000d2a:	0242      	lsls	r2, r0, #9
 8000d2c:	bf06      	itte	eq
 8000d2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d32:	ea90 0f01 	teqeq	r0, r1
 8000d36:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d3a:	4770      	bx	lr

08000d3c <__aeabi_ui2f>:
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	e004      	b.n	8000d4c <__aeabi_i2f+0x8>
 8000d42:	bf00      	nop

08000d44 <__aeabi_i2f>:
 8000d44:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d48:	bf48      	it	mi
 8000d4a:	4240      	negmi	r0, r0
 8000d4c:	ea5f 0c00 	movs.w	ip, r0
 8000d50:	bf08      	it	eq
 8000d52:	4770      	bxeq	lr
 8000d54:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d58:	4601      	mov	r1, r0
 8000d5a:	f04f 0000 	mov.w	r0, #0
 8000d5e:	e01c      	b.n	8000d9a <__aeabi_l2f+0x2a>

08000d60 <__aeabi_ul2f>:
 8000d60:	ea50 0201 	orrs.w	r2, r0, r1
 8000d64:	bf08      	it	eq
 8000d66:	4770      	bxeq	lr
 8000d68:	f04f 0300 	mov.w	r3, #0
 8000d6c:	e00a      	b.n	8000d84 <__aeabi_l2f+0x14>
 8000d6e:	bf00      	nop

08000d70 <__aeabi_l2f>:
 8000d70:	ea50 0201 	orrs.w	r2, r0, r1
 8000d74:	bf08      	it	eq
 8000d76:	4770      	bxeq	lr
 8000d78:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d7c:	d502      	bpl.n	8000d84 <__aeabi_l2f+0x14>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	ea5f 0c01 	movs.w	ip, r1
 8000d88:	bf02      	ittt	eq
 8000d8a:	4684      	moveq	ip, r0
 8000d8c:	4601      	moveq	r1, r0
 8000d8e:	2000      	moveq	r0, #0
 8000d90:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d94:	bf08      	it	eq
 8000d96:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d9a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d9e:	fabc f28c 	clz	r2, ip
 8000da2:	3a08      	subs	r2, #8
 8000da4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000da8:	db10      	blt.n	8000dcc <__aeabi_l2f+0x5c>
 8000daa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dae:	4463      	add	r3, ip
 8000db0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000db4:	f1c2 0220 	rsb	r2, r2, #32
 8000db8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000dbc:	fa20 f202 	lsr.w	r2, r0, r2
 8000dc0:	eb43 0002 	adc.w	r0, r3, r2
 8000dc4:	bf08      	it	eq
 8000dc6:	f020 0001 	biceq.w	r0, r0, #1
 8000dca:	4770      	bx	lr
 8000dcc:	f102 0220 	add.w	r2, r2, #32
 8000dd0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd4:	f1c2 0220 	rsb	r2, r2, #32
 8000dd8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ddc:	fa21 f202 	lsr.w	r2, r1, r2
 8000de0:	eb43 0002 	adc.w	r0, r3, r2
 8000de4:	bf08      	it	eq
 8000de6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dea:	4770      	bx	lr

08000dec <__aeabi_uldivmod>:
 8000dec:	b953      	cbnz	r3, 8000e04 <__aeabi_uldivmod+0x18>
 8000dee:	b94a      	cbnz	r2, 8000e04 <__aeabi_uldivmod+0x18>
 8000df0:	2900      	cmp	r1, #0
 8000df2:	bf08      	it	eq
 8000df4:	2800      	cmpeq	r0, #0
 8000df6:	bf1c      	itt	ne
 8000df8:	f04f 31ff 	movne.w	r1, #4294967295
 8000dfc:	f04f 30ff 	movne.w	r0, #4294967295
 8000e00:	f000 b988 	b.w	8001114 <__aeabi_idiv0>
 8000e04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e0c:	f000 f806 	bl	8000e1c <__udivmoddi4>
 8000e10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e18:	b004      	add	sp, #16
 8000e1a:	4770      	bx	lr

08000e1c <__udivmoddi4>:
 8000e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e20:	9d08      	ldr	r5, [sp, #32]
 8000e22:	468e      	mov	lr, r1
 8000e24:	4604      	mov	r4, r0
 8000e26:	4688      	mov	r8, r1
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d14a      	bne.n	8000ec2 <__udivmoddi4+0xa6>
 8000e2c:	428a      	cmp	r2, r1
 8000e2e:	4617      	mov	r7, r2
 8000e30:	d962      	bls.n	8000ef8 <__udivmoddi4+0xdc>
 8000e32:	fab2 f682 	clz	r6, r2
 8000e36:	b14e      	cbz	r6, 8000e4c <__udivmoddi4+0x30>
 8000e38:	f1c6 0320 	rsb	r3, r6, #32
 8000e3c:	fa01 f806 	lsl.w	r8, r1, r6
 8000e40:	fa20 f303 	lsr.w	r3, r0, r3
 8000e44:	40b7      	lsls	r7, r6
 8000e46:	ea43 0808 	orr.w	r8, r3, r8
 8000e4a:	40b4      	lsls	r4, r6
 8000e4c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e50:	fa1f fc87 	uxth.w	ip, r7
 8000e54:	fbb8 f1fe 	udiv	r1, r8, lr
 8000e58:	0c23      	lsrs	r3, r4, #16
 8000e5a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000e5e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e62:	fb01 f20c 	mul.w	r2, r1, ip
 8000e66:	429a      	cmp	r2, r3
 8000e68:	d909      	bls.n	8000e7e <__udivmoddi4+0x62>
 8000e6a:	18fb      	adds	r3, r7, r3
 8000e6c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e70:	f080 80ea 	bcs.w	8001048 <__udivmoddi4+0x22c>
 8000e74:	429a      	cmp	r2, r3
 8000e76:	f240 80e7 	bls.w	8001048 <__udivmoddi4+0x22c>
 8000e7a:	3902      	subs	r1, #2
 8000e7c:	443b      	add	r3, r7
 8000e7e:	1a9a      	subs	r2, r3, r2
 8000e80:	b2a3      	uxth	r3, r4
 8000e82:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e86:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e8e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e92:	459c      	cmp	ip, r3
 8000e94:	d909      	bls.n	8000eaa <__udivmoddi4+0x8e>
 8000e96:	18fb      	adds	r3, r7, r3
 8000e98:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e9c:	f080 80d6 	bcs.w	800104c <__udivmoddi4+0x230>
 8000ea0:	459c      	cmp	ip, r3
 8000ea2:	f240 80d3 	bls.w	800104c <__udivmoddi4+0x230>
 8000ea6:	443b      	add	r3, r7
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000eae:	eba3 030c 	sub.w	r3, r3, ip
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	b11d      	cbz	r5, 8000ebe <__udivmoddi4+0xa2>
 8000eb6:	40f3      	lsrs	r3, r6
 8000eb8:	2200      	movs	r2, #0
 8000eba:	e9c5 3200 	strd	r3, r2, [r5]
 8000ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec2:	428b      	cmp	r3, r1
 8000ec4:	d905      	bls.n	8000ed2 <__udivmoddi4+0xb6>
 8000ec6:	b10d      	cbz	r5, 8000ecc <__udivmoddi4+0xb0>
 8000ec8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4608      	mov	r0, r1
 8000ed0:	e7f5      	b.n	8000ebe <__udivmoddi4+0xa2>
 8000ed2:	fab3 f183 	clz	r1, r3
 8000ed6:	2900      	cmp	r1, #0
 8000ed8:	d146      	bne.n	8000f68 <__udivmoddi4+0x14c>
 8000eda:	4573      	cmp	r3, lr
 8000edc:	d302      	bcc.n	8000ee4 <__udivmoddi4+0xc8>
 8000ede:	4282      	cmp	r2, r0
 8000ee0:	f200 8105 	bhi.w	80010ee <__udivmoddi4+0x2d2>
 8000ee4:	1a84      	subs	r4, r0, r2
 8000ee6:	eb6e 0203 	sbc.w	r2, lr, r3
 8000eea:	2001      	movs	r0, #1
 8000eec:	4690      	mov	r8, r2
 8000eee:	2d00      	cmp	r5, #0
 8000ef0:	d0e5      	beq.n	8000ebe <__udivmoddi4+0xa2>
 8000ef2:	e9c5 4800 	strd	r4, r8, [r5]
 8000ef6:	e7e2      	b.n	8000ebe <__udivmoddi4+0xa2>
 8000ef8:	2a00      	cmp	r2, #0
 8000efa:	f000 8090 	beq.w	800101e <__udivmoddi4+0x202>
 8000efe:	fab2 f682 	clz	r6, r2
 8000f02:	2e00      	cmp	r6, #0
 8000f04:	f040 80a4 	bne.w	8001050 <__udivmoddi4+0x234>
 8000f08:	1a8a      	subs	r2, r1, r2
 8000f0a:	0c03      	lsrs	r3, r0, #16
 8000f0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f10:	b280      	uxth	r0, r0
 8000f12:	b2bc      	uxth	r4, r7
 8000f14:	2101      	movs	r1, #1
 8000f16:	fbb2 fcfe 	udiv	ip, r2, lr
 8000f1a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000f1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000f22:	fb04 f20c 	mul.w	r2, r4, ip
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d907      	bls.n	8000f3a <__udivmoddi4+0x11e>
 8000f2a:	18fb      	adds	r3, r7, r3
 8000f2c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000f30:	d202      	bcs.n	8000f38 <__udivmoddi4+0x11c>
 8000f32:	429a      	cmp	r2, r3
 8000f34:	f200 80e0 	bhi.w	80010f8 <__udivmoddi4+0x2dc>
 8000f38:	46c4      	mov	ip, r8
 8000f3a:	1a9b      	subs	r3, r3, r2
 8000f3c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000f40:	fb0e 3312 	mls	r3, lr, r2, r3
 8000f44:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000f48:	fb02 f404 	mul.w	r4, r2, r4
 8000f4c:	429c      	cmp	r4, r3
 8000f4e:	d907      	bls.n	8000f60 <__udivmoddi4+0x144>
 8000f50:	18fb      	adds	r3, r7, r3
 8000f52:	f102 30ff 	add.w	r0, r2, #4294967295
 8000f56:	d202      	bcs.n	8000f5e <__udivmoddi4+0x142>
 8000f58:	429c      	cmp	r4, r3
 8000f5a:	f200 80ca 	bhi.w	80010f2 <__udivmoddi4+0x2d6>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	1b1b      	subs	r3, r3, r4
 8000f62:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000f66:	e7a5      	b.n	8000eb4 <__udivmoddi4+0x98>
 8000f68:	f1c1 0620 	rsb	r6, r1, #32
 8000f6c:	408b      	lsls	r3, r1
 8000f6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000f72:	431f      	orrs	r7, r3
 8000f74:	fa0e f401 	lsl.w	r4, lr, r1
 8000f78:	fa20 f306 	lsr.w	r3, r0, r6
 8000f7c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000f80:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000f84:	4323      	orrs	r3, r4
 8000f86:	fa00 f801 	lsl.w	r8, r0, r1
 8000f8a:	fa1f fc87 	uxth.w	ip, r7
 8000f8e:	fbbe f0f9 	udiv	r0, lr, r9
 8000f92:	0c1c      	lsrs	r4, r3, #16
 8000f94:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f98:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f9c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000fa0:	45a6      	cmp	lr, r4
 8000fa2:	fa02 f201 	lsl.w	r2, r2, r1
 8000fa6:	d909      	bls.n	8000fbc <__udivmoddi4+0x1a0>
 8000fa8:	193c      	adds	r4, r7, r4
 8000faa:	f100 3aff 	add.w	sl, r0, #4294967295
 8000fae:	f080 809c 	bcs.w	80010ea <__udivmoddi4+0x2ce>
 8000fb2:	45a6      	cmp	lr, r4
 8000fb4:	f240 8099 	bls.w	80010ea <__udivmoddi4+0x2ce>
 8000fb8:	3802      	subs	r0, #2
 8000fba:	443c      	add	r4, r7
 8000fbc:	eba4 040e 	sub.w	r4, r4, lr
 8000fc0:	fa1f fe83 	uxth.w	lr, r3
 8000fc4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000fc8:	fb09 4413 	mls	r4, r9, r3, r4
 8000fcc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000fd0:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fd4:	45a4      	cmp	ip, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x1ce>
 8000fd8:	193c      	adds	r4, r7, r4
 8000fda:	f103 3eff 	add.w	lr, r3, #4294967295
 8000fde:	f080 8082 	bcs.w	80010e6 <__udivmoddi4+0x2ca>
 8000fe2:	45a4      	cmp	ip, r4
 8000fe4:	d97f      	bls.n	80010e6 <__udivmoddi4+0x2ca>
 8000fe6:	3b02      	subs	r3, #2
 8000fe8:	443c      	add	r4, r7
 8000fea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000fee:	eba4 040c 	sub.w	r4, r4, ip
 8000ff2:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ff6:	4564      	cmp	r4, ip
 8000ff8:	4673      	mov	r3, lr
 8000ffa:	46e1      	mov	r9, ip
 8000ffc:	d362      	bcc.n	80010c4 <__udivmoddi4+0x2a8>
 8000ffe:	d05f      	beq.n	80010c0 <__udivmoddi4+0x2a4>
 8001000:	b15d      	cbz	r5, 800101a <__udivmoddi4+0x1fe>
 8001002:	ebb8 0203 	subs.w	r2, r8, r3
 8001006:	eb64 0409 	sbc.w	r4, r4, r9
 800100a:	fa04 f606 	lsl.w	r6, r4, r6
 800100e:	fa22 f301 	lsr.w	r3, r2, r1
 8001012:	431e      	orrs	r6, r3
 8001014:	40cc      	lsrs	r4, r1
 8001016:	e9c5 6400 	strd	r6, r4, [r5]
 800101a:	2100      	movs	r1, #0
 800101c:	e74f      	b.n	8000ebe <__udivmoddi4+0xa2>
 800101e:	fbb1 fcf2 	udiv	ip, r1, r2
 8001022:	0c01      	lsrs	r1, r0, #16
 8001024:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8001028:	b280      	uxth	r0, r0
 800102a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800102e:	463b      	mov	r3, r7
 8001030:	4638      	mov	r0, r7
 8001032:	463c      	mov	r4, r7
 8001034:	46b8      	mov	r8, r7
 8001036:	46be      	mov	lr, r7
 8001038:	2620      	movs	r6, #32
 800103a:	fbb1 f1f7 	udiv	r1, r1, r7
 800103e:	eba2 0208 	sub.w	r2, r2, r8
 8001042:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8001046:	e766      	b.n	8000f16 <__udivmoddi4+0xfa>
 8001048:	4601      	mov	r1, r0
 800104a:	e718      	b.n	8000e7e <__udivmoddi4+0x62>
 800104c:	4610      	mov	r0, r2
 800104e:	e72c      	b.n	8000eaa <__udivmoddi4+0x8e>
 8001050:	f1c6 0220 	rsb	r2, r6, #32
 8001054:	fa2e f302 	lsr.w	r3, lr, r2
 8001058:	40b7      	lsls	r7, r6
 800105a:	40b1      	lsls	r1, r6
 800105c:	fa20 f202 	lsr.w	r2, r0, r2
 8001060:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001064:	430a      	orrs	r2, r1
 8001066:	fbb3 f8fe 	udiv	r8, r3, lr
 800106a:	b2bc      	uxth	r4, r7
 800106c:	fb0e 3318 	mls	r3, lr, r8, r3
 8001070:	0c11      	lsrs	r1, r2, #16
 8001072:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001076:	fb08 f904 	mul.w	r9, r8, r4
 800107a:	40b0      	lsls	r0, r6
 800107c:	4589      	cmp	r9, r1
 800107e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001082:	b280      	uxth	r0, r0
 8001084:	d93e      	bls.n	8001104 <__udivmoddi4+0x2e8>
 8001086:	1879      	adds	r1, r7, r1
 8001088:	f108 3cff 	add.w	ip, r8, #4294967295
 800108c:	d201      	bcs.n	8001092 <__udivmoddi4+0x276>
 800108e:	4589      	cmp	r9, r1
 8001090:	d81f      	bhi.n	80010d2 <__udivmoddi4+0x2b6>
 8001092:	eba1 0109 	sub.w	r1, r1, r9
 8001096:	fbb1 f9fe 	udiv	r9, r1, lr
 800109a:	fb09 f804 	mul.w	r8, r9, r4
 800109e:	fb0e 1119 	mls	r1, lr, r9, r1
 80010a2:	b292      	uxth	r2, r2
 80010a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80010a8:	4542      	cmp	r2, r8
 80010aa:	d229      	bcs.n	8001100 <__udivmoddi4+0x2e4>
 80010ac:	18ba      	adds	r2, r7, r2
 80010ae:	f109 31ff 	add.w	r1, r9, #4294967295
 80010b2:	d2c4      	bcs.n	800103e <__udivmoddi4+0x222>
 80010b4:	4542      	cmp	r2, r8
 80010b6:	d2c2      	bcs.n	800103e <__udivmoddi4+0x222>
 80010b8:	f1a9 0102 	sub.w	r1, r9, #2
 80010bc:	443a      	add	r2, r7
 80010be:	e7be      	b.n	800103e <__udivmoddi4+0x222>
 80010c0:	45f0      	cmp	r8, lr
 80010c2:	d29d      	bcs.n	8001000 <__udivmoddi4+0x1e4>
 80010c4:	ebbe 0302 	subs.w	r3, lr, r2
 80010c8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80010cc:	3801      	subs	r0, #1
 80010ce:	46e1      	mov	r9, ip
 80010d0:	e796      	b.n	8001000 <__udivmoddi4+0x1e4>
 80010d2:	eba7 0909 	sub.w	r9, r7, r9
 80010d6:	4449      	add	r1, r9
 80010d8:	f1a8 0c02 	sub.w	ip, r8, #2
 80010dc:	fbb1 f9fe 	udiv	r9, r1, lr
 80010e0:	fb09 f804 	mul.w	r8, r9, r4
 80010e4:	e7db      	b.n	800109e <__udivmoddi4+0x282>
 80010e6:	4673      	mov	r3, lr
 80010e8:	e77f      	b.n	8000fea <__udivmoddi4+0x1ce>
 80010ea:	4650      	mov	r0, sl
 80010ec:	e766      	b.n	8000fbc <__udivmoddi4+0x1a0>
 80010ee:	4608      	mov	r0, r1
 80010f0:	e6fd      	b.n	8000eee <__udivmoddi4+0xd2>
 80010f2:	443b      	add	r3, r7
 80010f4:	3a02      	subs	r2, #2
 80010f6:	e733      	b.n	8000f60 <__udivmoddi4+0x144>
 80010f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80010fc:	443b      	add	r3, r7
 80010fe:	e71c      	b.n	8000f3a <__udivmoddi4+0x11e>
 8001100:	4649      	mov	r1, r9
 8001102:	e79c      	b.n	800103e <__udivmoddi4+0x222>
 8001104:	eba1 0109 	sub.w	r1, r1, r9
 8001108:	46c4      	mov	ip, r8
 800110a:	fbb1 f9fe 	udiv	r9, r1, lr
 800110e:	fb09 f804 	mul.w	r8, r9, r4
 8001112:	e7c4      	b.n	800109e <__udivmoddi4+0x282>

08001114 <__aeabi_idiv0>:
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop

08001118 <sign>:
#include <math.h>

/**
 * @brief Sign function: returns +1, -1, or 0 based on input value.
 */
int8_t sign(float32_t x) {
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	ed87 0a01 	vstr	s0, [r7, #4]
    if (x > 0.0f) {
 8001122:	edd7 7a01 	vldr	s15, [r7, #4]
 8001126:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800112a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800112e:	dd01      	ble.n	8001134 <sign+0x1c>
        return 1;
 8001130:	2301      	movs	r3, #1
 8001132:	e00a      	b.n	800114a <sign+0x32>
    } else if (x < 0.0f) {
 8001134:	edd7 7a01 	vldr	s15, [r7, #4]
 8001138:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800113c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001140:	d502      	bpl.n	8001148 <sign+0x30>
        return -1;
 8001142:	f04f 33ff 	mov.w	r3, #4294967295
 8001146:	e000      	b.n	800114a <sign+0x32>
    } else {
        return 0;
 8001148:	2300      	movs	r3, #0
    }
}
 800114a:	4618      	mov	r0, r3
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <Backlash_Init>:
/**
 * @brief Initialize the backlash controller.
 * @param ctrl Pointer to controller structure.
 * @param backlash_width Estimated or measured backlash gap.
 */
void Backlash_Init(BacklashController *ctrl, float32_t backlash_width) {
 8001156:	b480      	push	{r7}
 8001158:	b083      	sub	sp, #12
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
 800115e:	ed87 0a00 	vstr	s0, [r7]
    ctrl->backlash_width = backlash_width;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	683a      	ldr	r2, [r7, #0]
 8001166:	601a      	str	r2, [r3, #0]
    ctrl->backlash_offset = 0.0f;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f04f 0200 	mov.w	r2, #0
 800116e:	605a      	str	r2, [r3, #4]
    ctrl->direction_prev = 0;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2200      	movs	r2, #0
 8001174:	721a      	strb	r2, [r3, #8]
    ctrl->state = TRANSITION;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2200      	movs	r2, #0
 800117a:	725a      	strb	r2, [r3, #9]
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <Backlash_Update>:
 * @param pos_ref Desired reference position.
 * @param pos_act Actual measured position.
 * @param vel Measured or estimated velocity.
 * @return Compensated position to use in control.
 */
float32_t Backlash_Update(BacklashController *ctrl, float32_t pos_ref, float32_t pos_act, float32_t vel) {
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	ed87 0a02 	vstr	s0, [r7, #8]
 8001194:	edc7 0a01 	vstr	s1, [r7, #4]
 8001198:	ed87 1a00 	vstr	s2, [r7]
    int8_t direction_now = sign(vel);
 800119c:	ed97 0a00 	vldr	s0, [r7]
 80011a0:	f7ff ffba 	bl	8001118 <sign>
 80011a4:	4603      	mov	r3, r0
 80011a6:	75fb      	strb	r3, [r7, #23]

    // Detect direction change
    if (direction_now != ctrl->direction_prev && direction_now != 0) {
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80011ae:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d01a      	beq.n	80011ec <Backlash_Update+0x64>
 80011b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d016      	beq.n	80011ec <Backlash_Update+0x64>
        ctrl->direction_prev = direction_now;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	7dfa      	ldrb	r2, [r7, #23]
 80011c2:	721a      	strb	r2, [r3, #8]
        ctrl->state = TRANSITION;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	2200      	movs	r2, #0
 80011c8:	725a      	strb	r2, [r3, #9]

        if (direction_now > 0) {
 80011ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	dd04      	ble.n	80011dc <Backlash_Update+0x54>
            ctrl->backlash_offset = ctrl->backlash_width;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	e007      	b.n	80011ec <Backlash_Update+0x64>
        } else {
            ctrl->backlash_offset = -ctrl->backlash_width;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	edd3 7a00 	vldr	s15, [r3]
 80011e2:	eef1 7a67 	vneg.f32	s15, s15
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	edc3 7a01 	vstr	s15, [r3, #4]
        }
    }

    // Apply backlash offset to reference
    float32_t pos_ref_compensated = pos_ref + ctrl->backlash_offset;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	edd3 7a01 	vldr	s15, [r3, #4]
 80011f2:	ed97 7a02 	vldr	s14, [r7, #8]
 80011f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011fa:	edc7 7a04 	vstr	s15, [r7, #16]

    // Check if backlash has been taken up
    if (ctrl->state == TRANSITION) {
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d11e      	bne.n	8001246 <Backlash_Update+0xbe>
        if (fabsf(pos_ref - pos_act) >= ctrl->backlash_width) {
 8001208:	ed97 7a02 	vldr	s14, [r7, #8]
 800120c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001210:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001214:	eeb0 7ae7 	vabs.f32	s14, s15
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	edd3 7a00 	vldr	s15, [r3]
 800121e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001226:	db0e      	blt.n	8001246 <Backlash_Update+0xbe>
            if (direction_now > 0) {
 8001228:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800122c:	2b00      	cmp	r3, #0
 800122e:	dd03      	ble.n	8001238 <Backlash_Update+0xb0>
                ctrl->state = ENGAGED_POS;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2201      	movs	r2, #1
 8001234:	725a      	strb	r2, [r3, #9]
 8001236:	e002      	b.n	800123e <Backlash_Update+0xb6>
            } else {
                ctrl->state = ENGAGED_NEG;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	22ff      	movs	r2, #255	@ 0xff
 800123c:	725a      	strb	r2, [r3, #9]
            }
            ctrl->backlash_offset = 0.0f;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	f04f 0200 	mov.w	r2, #0
 8001244:	605a      	str	r2, [r3, #4]
        }
    }

    return pos_ref_compensated;
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	ee07 3a90 	vmov	s15, r3
}
 800124c:	eeb0 0a67 	vmov.f32	s0, s15
 8001250:	3718      	adds	r7, #24
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <modbus_heartbeat>:

void modbus_heartbeat_init(ModbusHandleTypedef *hmodbus) {
	hmodbus->RegisterAddress[0x00].U16 = 22881;
}

void modbus_heartbeat(ModbusHandleTypedef *hmodbus) {
 8001256:	b480      	push	{r7}
 8001258:	b083      	sub	sp, #12
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
	//if (hmodbus->RegisterAddress[0x00].U16 == 18537) {
	hmodbus->RegisterAddress[0x00].U16 = 22881;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f645 1261 	movw	r2, #22881	@ 0x5961
 8001266:	801a      	strh	r2, [r3, #0]
	//}
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <modbus_Base_System_Status>:

uint8_t modbus_Base_System_Status(ModbusHandleTypedef *hmodbus) {
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
	uint8_t status = hmodbus->RegisterAddress[0x01].U16;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	3302      	adds	r3, #2
 8001282:	881b      	ldrh	r3, [r3, #0]
 8001284:	73fb      	strb	r3, [r7, #15]
	return status;
 8001286:	7bfb      	ldrb	r3, [r7, #15]
}
 8001288:	4618      	mov	r0, r3
 800128a:	3714      	adds	r7, #20
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <modbus_servo_Status>:

void modbus_servo_Status(ModbusHandleTypedef *hmodbus, uint8_t Pen_status) {
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	460b      	mov	r3, r1
 800129e:	70fb      	strb	r3, [r7, #3]
	hmodbus->RegisterAddress[0x03].U16 = Pen_status;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	3306      	adds	r3, #6
 80012a6:	78fa      	ldrb	r2, [r7, #3]
 80012a8:	b292      	uxth	r2, r2
 80012aa:	801a      	strh	r2, [r3, #0]
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <modbus_write_servo_up>:

uint8_t modbus_write_servo_up(ModbusHandleTypedef *hmodbus) {
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
	uint8_t status = hmodbus->RegisterAddress[0x04].U16;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	3308      	adds	r3, #8
 80012c6:	881b      	ldrh	r3, [r3, #0]
 80012c8:	73fb      	strb	r3, [r7, #15]
//	if (status == 1) {
//		if (hmodbus->RegisterAddress[0x05].U16 == 1) {
//			hmodbus->RegisterAddress[0x05].U16 = 0;
//		}
//	}
	return status;
 80012ca:	7bfb      	ldrb	r3, [r7, #15]

}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3714      	adds	r7, #20
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <modbus_write_servo_down>:
uint8_t modbus_write_servo_down(ModbusHandleTypedef *hmodbus) {
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
	uint8_t status = hmodbus->RegisterAddress[0x05].U16;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	330a      	adds	r3, #10
 80012e6:	881b      	ldrh	r3, [r3, #0]
 80012e8:	73fb      	strb	r3, [r7, #15]
//		if (hmodbus->RegisterAddress[0x04].U16 == 1) {
//			hmodbus->RegisterAddress[0x04].U16 = 0;
//		}
//
//	}
	return status;
 80012ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3714      	adds	r7, #20
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <R_Theta_moving_Status>:

void R_Theta_moving_Status(ModbusHandleTypedef *hmodbus, uint8_t Moving_Status) {
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	460b      	mov	r3, r1
 8001302:	70fb      	strb	r3, [r7, #3]
	hmodbus->RegisterAddress[0x10].U16 = Moving_Status;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	3320      	adds	r3, #32
 800130a:	78fa      	ldrb	r2, [r7, #3]
 800130c:	b292      	uxth	r2, r2
 800130e:	801a      	strh	r2, [r3, #0]
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <modbus_Update_All>:
void modbus_theta_acceleration(ModbusHandleTypedef *hmodbus, float theta_accel) {
	hmodbus->RegisterAddress[0x16].U16 = format_robot_to_base(theta_accel);
}
void modbus_Update_All(ModbusHandleTypedef *hmodbus, float r_pos,
		float theta_pos, float r_Velo, float theta_Velo, float r_accel,
		float theta_accel) {
 800131c:	b590      	push	{r4, r7, lr}
 800131e:	b089      	sub	sp, #36	@ 0x24
 8001320:	af00      	add	r7, sp, #0
 8001322:	61f8      	str	r0, [r7, #28]
 8001324:	ed87 0a06 	vstr	s0, [r7, #24]
 8001328:	edc7 0a05 	vstr	s1, [r7, #20]
 800132c:	ed87 1a04 	vstr	s2, [r7, #16]
 8001330:	edc7 1a03 	vstr	s3, [r7, #12]
 8001334:	ed87 2a02 	vstr	s4, [r7, #8]
 8001338:	edc7 2a01 	vstr	s5, [r7, #4]
	hmodbus->RegisterAddress[0x11].U16 = format_robot_to_base(r_pos);
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f103 0422 	add.w	r4, r3, #34	@ 0x22
 8001344:	ed97 0a06 	vldr	s0, [r7, #24]
 8001348:	f000 fd00 	bl	8001d4c <format_robot_to_base>
 800134c:	4603      	mov	r3, r0
 800134e:	8023      	strh	r3, [r4, #0]
	hmodbus->RegisterAddress[0x12].U16 = format_robot_to_base(theta_pos);
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8001358:	ed97 0a05 	vldr	s0, [r7, #20]
 800135c:	f000 fcf6 	bl	8001d4c <format_robot_to_base>
 8001360:	4603      	mov	r3, r0
 8001362:	8023      	strh	r3, [r4, #0]
	hmodbus->RegisterAddress[0x13].U16 = format_robot_to_base(r_Velo);
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f103 0426 	add.w	r4, r3, #38	@ 0x26
 800136c:	ed97 0a04 	vldr	s0, [r7, #16]
 8001370:	f000 fcec 	bl	8001d4c <format_robot_to_base>
 8001374:	4603      	mov	r3, r0
 8001376:	8023      	strh	r3, [r4, #0]
	hmodbus->RegisterAddress[0x14].U16 = format_robot_to_base(theta_Velo);
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 8001380:	ed97 0a03 	vldr	s0, [r7, #12]
 8001384:	f000 fce2 	bl	8001d4c <format_robot_to_base>
 8001388:	4603      	mov	r3, r0
 800138a:	8023      	strh	r3, [r4, #0]
	hmodbus->RegisterAddress[0x15].U16 = format_robot_to_base(r_accel);
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f103 042a 	add.w	r4, r3, #42	@ 0x2a
 8001394:	ed97 0a02 	vldr	s0, [r7, #8]
 8001398:	f000 fcd8 	bl	8001d4c <format_robot_to_base>
 800139c:	4603      	mov	r3, r0
 800139e:	8023      	strh	r3, [r4, #0]
	hmodbus->RegisterAddress[0x16].U16 = format_robot_to_base(theta_accel);
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f103 042c 	add.w	r4, r3, #44	@ 0x2c
 80013a8:	ed97 0a01 	vldr	s0, [r7, #4]
 80013ac:	f000 fcce 	bl	8001d4c <format_robot_to_base>
 80013b0:	4603      	mov	r3, r0
 80013b2:	8023      	strh	r3, [r4, #0]
}
 80013b4:	bf00      	nop
 80013b6:	3724      	adds	r7, #36	@ 0x24
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd90      	pop	{r4, r7, pc}

080013bc <set_Target_Position_ten_points>:

void set_Target_Position_ten_points(ModbusHandleTypedef *hmodbus, float r_pos,
		float theta_pos, uint8_t index) //
{
 80013bc:	b590      	push	{r4, r7, lr}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	ed87 0a02 	vstr	s0, [r7, #8]
 80013c8:	edc7 0a01 	vstr	s1, [r7, #4]
 80013cc:	460b      	mov	r3, r1
 80013ce:	70fb      	strb	r3, [r7, #3]
	if (index >= 0 && index <= 9) {
 80013d0:	78fb      	ldrb	r3, [r7, #3]
 80013d2:	2b09      	cmp	r3, #9
 80013d4:	d818      	bhi.n	8001408 <set_Target_Position_ten_points+0x4c>
		hmodbus->RegisterAddress[0x20 + index * 2].U16 = format_robot_to_base(
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	685a      	ldr	r2, [r3, #4]
 80013da:	78fb      	ldrb	r3, [r7, #3]
 80013dc:	3310      	adds	r3, #16
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	18d4      	adds	r4, r2, r3
 80013e2:	ed97 0a02 	vldr	s0, [r7, #8]
 80013e6:	f000 fcb1 	bl	8001d4c <format_robot_to_base>
 80013ea:	4603      	mov	r3, r0
 80013ec:	8023      	strh	r3, [r4, #0]
				r_pos);
		hmodbus->RegisterAddress[0x20 + (index * 2) + 1].U16 =
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	685a      	ldr	r2, [r3, #4]
 80013f2:	78fb      	ldrb	r3, [r7, #3]
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	3321      	adds	r3, #33	@ 0x21
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	18d4      	adds	r4, r2, r3
				format_robot_to_base(theta_pos);
 80013fc:	ed97 0a01 	vldr	s0, [r7, #4]
 8001400:	f000 fca4 	bl	8001d4c <format_robot_to_base>
 8001404:	4603      	mov	r3, r0
		hmodbus->RegisterAddress[0x20 + (index * 2) + 1].U16 =
 8001406:	8023      	strh	r3, [r4, #0]
	}
}
 8001408:	bf00      	nop
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	bd90      	pop	{r4, r7, pc}

08001410 <modbus_set_goal_r_position>:
uint16_t modbus_set_goal_r_position(ModbusHandleTypedef *hmodbus) {
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
	uint16_t goal_r_position = hmodbus->RegisterAddress[0x40].U16;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	3380      	adds	r3, #128	@ 0x80
 800141e:	881b      	ldrh	r3, [r3, #0]
 8001420:	81fb      	strh	r3, [r7, #14]
	return format_base_to_robot(goal_r_position);
 8001422:	89fb      	ldrh	r3, [r7, #14]
 8001424:	4618      	mov	r0, r3
 8001426:	f000 fcb3 	bl	8001d90 <format_base_to_robot>
 800142a:	eef0 7a40 	vmov.f32	s15, s0
 800142e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001432:	ee17 3a90 	vmov	r3, s15
 8001436:	b29b      	uxth	r3, r3
}
 8001438:	4618      	mov	r0, r3
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <modbus_set_goal_theta_position>:
uint16_t modbus_set_goal_theta_position(ModbusHandleTypedef *hmodbus) {
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
	uint16_t goal_theta_position = hmodbus->RegisterAddress[0x41].U16;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	3382      	adds	r3, #130	@ 0x82
 800144e:	881b      	ldrh	r3, [r3, #0]
 8001450:	81fb      	strh	r3, [r7, #14]
	return format_base_to_robot(goal_theta_position);
 8001452:	89fb      	ldrh	r3, [r7, #14]
 8001454:	4618      	mov	r0, r3
 8001456:	f000 fc9b 	bl	8001d90 <format_base_to_robot>
 800145a:	eef0 7a40 	vmov.f32	s15, s0
 800145e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001462:	ee17 3a90 	vmov	r3, s15
 8001466:	b29b      	uxth	r3, r3
}
 8001468:	4618      	mov	r0, r3
 800146a:	3710      	adds	r7, #16
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <Coordinate_Base_to_Robot>:

Robot_goal_point Coordinate_Base_to_Robot(Robot_goal_point *Goal_point,
		float r_position, float theta_position) {
 8001470:	b5b0      	push	{r4, r5, r7, lr}
 8001472:	b090      	sub	sp, #64	@ 0x40
 8001474:	af00      	add	r7, sp, #0
 8001476:	6178      	str	r0, [r7, #20]
 8001478:	ed87 0a04 	vstr	s0, [r7, #16]
 800147c:	edc7 0a03 	vstr	s1, [r7, #12]

	Goal_point->r_goal_position = 0;
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	f04f 0200 	mov.w	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
	Goal_point->theta_goal_position = 0;
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	f04f 0200 	mov.w	r2, #0
 800148e:	605a      	str	r2, [r3, #4]

	float prismatic_pos;
	float beta = pow(r_position, 2) + pow(Offet, 2);
 8001490:	6938      	ldr	r0, [r7, #16]
 8001492:	f7ff f825 	bl	80004e0 <__aeabi_f2d>
 8001496:	4602      	mov	r2, r0
 8001498:	460b      	mov	r3, r1
 800149a:	ed9f 1be3 	vldr	d1, [pc, #908]	@ 8001828 <Coordinate_Base_to_Robot+0x3b8>
 800149e:	ec43 2b10 	vmov	d0, r2, r3
 80014a2:	f00e f817 	bl	800f4d4 <pow>
 80014a6:	ec51 0b10 	vmov	r0, r1, d0
 80014aa:	f04f 0200 	mov.w	r2, #0
 80014ae:	4be0      	ldr	r3, [pc, #896]	@ (8001830 <Coordinate_Base_to_Robot+0x3c0>)
 80014b0:	f7fe feb8 	bl	8000224 <__adddf3>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	4610      	mov	r0, r2
 80014ba:	4619      	mov	r1, r3
 80014bc:	f7ff fb38 	bl	8000b30 <__aeabi_d2f>
 80014c0:	4603      	mov	r3, r0
 80014c2:	63bb      	str	r3, [r7, #56]	@ 0x38
	float gamma = 2 * r_position * Offet;
 80014c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80014c8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80014cc:	ed9f 7ad9 	vldr	s14, [pc, #868]	@ 8001834 <Coordinate_Base_to_Robot+0x3c4>
 80014d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014d4:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

	if (theta_position >= 0 && theta_position <= 90) // quadrant 1
 80014d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80014dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e4:	db35      	blt.n	8001552 <Coordinate_Base_to_Robot+0xe2>
 80014e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80014ea:	ed9f 7ad6 	vldr	s14, [pc, #856]	@ 8001844 <Coordinate_Base_to_Robot+0x3d4>
 80014ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f6:	d82c      	bhi.n	8001552 <Coordinate_Base_to_Robot+0xe2>
			{
		//Goal_point->theta_goal_position = degree_to_rad(90 - alpha);
		prismatic_pos = sqrt(beta - gamma * cosf(degree_to_rad(theta_position + 90)));
 80014f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80014fc:	ed9f 7ad1 	vldr	s14, [pc, #836]	@ 8001844 <Coordinate_Base_to_Robot+0x3d4>
 8001500:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001504:	eeb0 0a67 	vmov.f32	s0, s15
 8001508:	f000 fbf6 	bl	8001cf8 <degree_to_rad>
 800150c:	eef0 7a40 	vmov.f32	s15, s0
 8001510:	eeb0 0a67 	vmov.f32	s0, s15
 8001514:	f00e f8c4 	bl	800f6a0 <cosf>
 8001518:	eeb0 7a40 	vmov.f32	s14, s0
 800151c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001520:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001524:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001528:	ee77 7a67 	vsub.f32	s15, s14, s15
 800152c:	ee17 0a90 	vmov	r0, s15
 8001530:	f7fe ffd6 	bl	80004e0 <__aeabi_f2d>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	ec43 2b10 	vmov	d0, r2, r3
 800153c:	f00e f83a 	bl	800f5b4 <sqrt>
 8001540:	ec53 2b10 	vmov	r2, r3, d0
 8001544:	4610      	mov	r0, r2
 8001546:	4619      	mov	r1, r3
 8001548:	f7ff faf2 	bl	8000b30 <__aeabi_d2f>
 800154c:	4603      	mov	r3, r0
 800154e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001550:	e0b9      	b.n	80016c6 <Coordinate_Base_to_Robot+0x256>
//		Goal_point->r_goal_position = sqrt(
//				beta - gamma * cosf(theta_position + 90));
	} else if (theta_position >= 90 && theta_position <= 180) // quadrant 2
 8001552:	edd7 7a03 	vldr	s15, [r7, #12]
 8001556:	ed9f 7abb 	vldr	s14, [pc, #748]	@ 8001844 <Coordinate_Base_to_Robot+0x3d4>
 800155a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800155e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001562:	db35      	blt.n	80015d0 <Coordinate_Base_to_Robot+0x160>
 8001564:	edd7 7a03 	vldr	s15, [r7, #12]
 8001568:	ed9f 7ab3 	vldr	s14, [pc, #716]	@ 8001838 <Coordinate_Base_to_Robot+0x3c8>
 800156c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001574:	d82c      	bhi.n	80015d0 <Coordinate_Base_to_Robot+0x160>
			{
		//Goal_point->theta_goal_position = degree_to_rad(alpha + 90);
		prismatic_pos = sqrt(beta - gamma * cosf(degree_to_rad(180 - theta_position)));
 8001576:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 8001838 <Coordinate_Base_to_Robot+0x3c8>
 800157a:	edd7 7a03 	vldr	s15, [r7, #12]
 800157e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001582:	eeb0 0a67 	vmov.f32	s0, s15
 8001586:	f000 fbb7 	bl	8001cf8 <degree_to_rad>
 800158a:	eef0 7a40 	vmov.f32	s15, s0
 800158e:	eeb0 0a67 	vmov.f32	s0, s15
 8001592:	f00e f885 	bl	800f6a0 <cosf>
 8001596:	eeb0 7a40 	vmov.f32	s14, s0
 800159a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800159e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015a2:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80015a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015aa:	ee17 0a90 	vmov	r0, s15
 80015ae:	f7fe ff97 	bl	80004e0 <__aeabi_f2d>
 80015b2:	4602      	mov	r2, r0
 80015b4:	460b      	mov	r3, r1
 80015b6:	ec43 2b10 	vmov	d0, r2, r3
 80015ba:	f00d fffb 	bl	800f5b4 <sqrt>
 80015be:	ec53 2b10 	vmov	r2, r3, d0
 80015c2:	4610      	mov	r0, r2
 80015c4:	4619      	mov	r1, r3
 80015c6:	f7ff fab3 	bl	8000b30 <__aeabi_d2f>
 80015ca:	4603      	mov	r3, r0
 80015cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80015ce:	e07a      	b.n	80016c6 <Coordinate_Base_to_Robot+0x256>
//		Goal_point->r_goal_position = sqrt(
//				beta - gamma * cosf(180 - theta_position));
	} else if (theta_position <= 0 && theta_position >= -90) // quadrant 3
 80015d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80015d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015dc:	d835      	bhi.n	800164a <Coordinate_Base_to_Robot+0x1da>
 80015de:	edd7 7a03 	vldr	s15, [r7, #12]
 80015e2:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 800183c <Coordinate_Base_to_Robot+0x3cc>
 80015e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ee:	db2c      	blt.n	800164a <Coordinate_Base_to_Robot+0x1da>
			{
		//Goal_point->theta_goal_position = degree_to_rad(alpha + 90);
		prismatic_pos = sqrt(beta - gamma * cosf(degree_to_rad(theta_position - 90)));
 80015f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80015f4:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 8001844 <Coordinate_Base_to_Robot+0x3d4>
 80015f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80015fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001600:	f000 fb7a 	bl	8001cf8 <degree_to_rad>
 8001604:	eef0 7a40 	vmov.f32	s15, s0
 8001608:	eeb0 0a67 	vmov.f32	s0, s15
 800160c:	f00e f848 	bl	800f6a0 <cosf>
 8001610:	eeb0 7a40 	vmov.f32	s14, s0
 8001614:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001618:	ee67 7a27 	vmul.f32	s15, s14, s15
 800161c:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001620:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001624:	ee17 0a90 	vmov	r0, s15
 8001628:	f7fe ff5a 	bl	80004e0 <__aeabi_f2d>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	ec43 2b10 	vmov	d0, r2, r3
 8001634:	f00d ffbe 	bl	800f5b4 <sqrt>
 8001638:	ec53 2b10 	vmov	r2, r3, d0
 800163c:	4610      	mov	r0, r2
 800163e:	4619      	mov	r1, r3
 8001640:	f7ff fa76 	bl	8000b30 <__aeabi_d2f>
 8001644:	4603      	mov	r3, r0
 8001646:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001648:	e03d      	b.n	80016c6 <Coordinate_Base_to_Robot+0x256>
//		Goal_point->r_goal_position = sqrt(
//				beta - gamma * cosf(theta_position - 90));
	} else if (theta_position <= -90 && theta_position >= -180) // quadrant 4
 800164a:	edd7 7a03 	vldr	s15, [r7, #12]
 800164e:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 800183c <Coordinate_Base_to_Robot+0x3cc>
 8001652:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800165a:	d834      	bhi.n	80016c6 <Coordinate_Base_to_Robot+0x256>
 800165c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001660:	ed9f 7a77 	vldr	s14, [pc, #476]	@ 8001840 <Coordinate_Base_to_Robot+0x3d0>
 8001664:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800166c:	db2b      	blt.n	80016c6 <Coordinate_Base_to_Robot+0x256>
			{
//		Goal_point->theta_goal_position = degree_to_rad(90 - alpha);
//		Goal_point->r_goal_position = sqrt(
//				beta - gamma * cosf(90 - theta_position));
		prismatic_pos = sqrt(beta - gamma * cosf(degree_to_rad(90 - theta_position)));
 800166e:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 8001844 <Coordinate_Base_to_Robot+0x3d4>
 8001672:	edd7 7a03 	vldr	s15, [r7, #12]
 8001676:	ee77 7a67 	vsub.f32	s15, s14, s15
 800167a:	eeb0 0a67 	vmov.f32	s0, s15
 800167e:	f000 fb3b 	bl	8001cf8 <degree_to_rad>
 8001682:	eef0 7a40 	vmov.f32	s15, s0
 8001686:	eeb0 0a67 	vmov.f32	s0, s15
 800168a:	f00e f809 	bl	800f6a0 <cosf>
 800168e:	eeb0 7a40 	vmov.f32	s14, s0
 8001692:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800169a:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800169e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016a2:	ee17 0a90 	vmov	r0, s15
 80016a6:	f7fe ff1b 	bl	80004e0 <__aeabi_f2d>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	ec43 2b10 	vmov	d0, r2, r3
 80016b2:	f00d ff7f 	bl	800f5b4 <sqrt>
 80016b6:	ec53 2b10 	vmov	r2, r3, d0
 80016ba:	4610      	mov	r0, r2
 80016bc:	4619      	mov	r1, r3
 80016be:	f7ff fa37 	bl	8000b30 <__aeabi_d2f>
 80016c2:	4603      	mov	r3, r0
 80016c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	}

	float up = pow(r_position, 2) - pow(prismatic_pos, 2) - pow(Offet, 2);
 80016c6:	6938      	ldr	r0, [r7, #16]
 80016c8:	f7fe ff0a 	bl	80004e0 <__aeabi_f2d>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	ed9f 1b55 	vldr	d1, [pc, #340]	@ 8001828 <Coordinate_Base_to_Robot+0x3b8>
 80016d4:	ec43 2b10 	vmov	d0, r2, r3
 80016d8:	f00d fefc 	bl	800f4d4 <pow>
 80016dc:	ec55 4b10 	vmov	r4, r5, d0
 80016e0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80016e2:	f7fe fefd 	bl	80004e0 <__aeabi_f2d>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	ed9f 1b4f 	vldr	d1, [pc, #316]	@ 8001828 <Coordinate_Base_to_Robot+0x3b8>
 80016ee:	ec43 2b10 	vmov	d0, r2, r3
 80016f2:	f00d feef 	bl	800f4d4 <pow>
 80016f6:	ec53 2b10 	vmov	r2, r3, d0
 80016fa:	4620      	mov	r0, r4
 80016fc:	4629      	mov	r1, r5
 80016fe:	f7fe fd8f 	bl	8000220 <__aeabi_dsub>
 8001702:	4602      	mov	r2, r0
 8001704:	460b      	mov	r3, r1
 8001706:	4610      	mov	r0, r2
 8001708:	4619      	mov	r1, r3
 800170a:	f04f 0200 	mov.w	r2, #0
 800170e:	4b48      	ldr	r3, [pc, #288]	@ (8001830 <Coordinate_Base_to_Robot+0x3c0>)
 8001710:	f7fe fd86 	bl	8000220 <__aeabi_dsub>
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
 8001718:	4610      	mov	r0, r2
 800171a:	4619      	mov	r1, r3
 800171c:	f7ff fa08 	bl	8000b30 <__aeabi_d2f>
 8001720:	4603      	mov	r3, r0
 8001722:	633b      	str	r3, [r7, #48]	@ 0x30
	float down = -2 * prismatic_pos * Offet;
 8001724:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001728:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800172c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001730:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8001834 <Coordinate_Base_to_Robot+0x3c4>
 8001734:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001738:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
	float arc = acosf(up/down);
 800173c:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001740:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001744:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001748:	eeb0 0a66 	vmov.f32	s0, s13
 800174c:	f00d ff5e 	bl	800f60c <acosf>
 8001750:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
	float alpha = rad_to_degree(arc);
 8001754:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8001758:	f000 faa2 	bl	8001ca0 <rad_to_degree>
 800175c:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24

	if (theta_position >= 0 && theta_position <= 90) // quadrant 1
 8001760:	edd7 7a03 	vldr	s15, [r7, #12]
 8001764:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800176c:	db18      	blt.n	80017a0 <Coordinate_Base_to_Robot+0x330>
 800176e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001772:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8001844 <Coordinate_Base_to_Robot+0x3d4>
 8001776:	eef4 7ac7 	vcmpe.f32	s15, s14
 800177a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800177e:	d80f      	bhi.n	80017a0 <Coordinate_Base_to_Robot+0x330>
			{
		Goal_point->theta_goal_position = degree_to_rad(90 - alpha);
 8001780:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001844 <Coordinate_Base_to_Robot+0x3d4>
 8001784:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001788:	ee77 7a67 	vsub.f32	s15, s14, s15
 800178c:	eeb0 0a67 	vmov.f32	s0, s15
 8001790:	f000 fab2 	bl	8001cf8 <degree_to_rad>
 8001794:	eef0 7a40 	vmov.f32	s15, s0
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	edc3 7a01 	vstr	s15, [r3, #4]
 800179e:	e074      	b.n	800188a <Coordinate_Base_to_Robot+0x41a>
//		prismatic_pos = format_base_to_robot(sqrt(beta - gamma * cosf(degree_to_rad(theta_position + 90))));
	} else if (theta_position >= 90 && theta_position <= 180) // quadrant 2
 80017a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80017a4:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8001844 <Coordinate_Base_to_Robot+0x3d4>
 80017a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b0:	db18      	blt.n	80017e4 <Coordinate_Base_to_Robot+0x374>
 80017b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80017b6:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8001838 <Coordinate_Base_to_Robot+0x3c8>
 80017ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c2:	d80f      	bhi.n	80017e4 <Coordinate_Base_to_Robot+0x374>
			{
		Goal_point->theta_goal_position = degree_to_rad(alpha + 90);
 80017c4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80017c8:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001844 <Coordinate_Base_to_Robot+0x3d4>
 80017cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017d0:	eeb0 0a67 	vmov.f32	s0, s15
 80017d4:	f000 fa90 	bl	8001cf8 <degree_to_rad>
 80017d8:	eef0 7a40 	vmov.f32	s15, s0
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	edc3 7a01 	vstr	s15, [r3, #4]
 80017e2:	e052      	b.n	800188a <Coordinate_Base_to_Robot+0x41a>
//		prismatic_pos = format_base_to_robot(sqrt(beta - gamma * cosf(degree_to_rad(180 - theta_position))));
	} else if (theta_position <= 0 && theta_position >= -90) // quadrant 3
 80017e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80017e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f0:	d82a      	bhi.n	8001848 <Coordinate_Base_to_Robot+0x3d8>
 80017f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80017f6:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800183c <Coordinate_Base_to_Robot+0x3cc>
 80017fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001802:	db21      	blt.n	8001848 <Coordinate_Base_to_Robot+0x3d8>
			{
		Goal_point->theta_goal_position = degree_to_rad(alpha + 90);
 8001804:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001808:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001844 <Coordinate_Base_to_Robot+0x3d4>
 800180c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001810:	eeb0 0a67 	vmov.f32	s0, s15
 8001814:	f000 fa70 	bl	8001cf8 <degree_to_rad>
 8001818:	eef0 7a40 	vmov.f32	s15, s0
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	edc3 7a01 	vstr	s15, [r3, #4]
 8001822:	e032      	b.n	800188a <Coordinate_Base_to_Robot+0x41a>
 8001824:	f3af 8000 	nop.w
 8001828:	00000000 	.word	0x00000000
 800182c:	40000000 	.word	0x40000000
 8001830:	410c2000 	.word	0x410c2000
 8001834:	43f00000 	.word	0x43f00000
 8001838:	43340000 	.word	0x43340000
 800183c:	c2b40000 	.word	0xc2b40000
 8001840:	c3340000 	.word	0xc3340000
 8001844:	42b40000 	.word	0x42b40000
//		prismatic_pos = format_base_to_robot(sqrt(beta - gamma * cosf(degree_to_rad(theta_position - 90))));
	} else if (theta_position <= -90 && theta_position >= -180) // quadrant 4
 8001848:	edd7 7a03 	vldr	s15, [r7, #12]
 800184c:	ed1f 7a05 	vldr	s14, [pc, #-20]	@ 800183c <Coordinate_Base_to_Robot+0x3cc>
 8001850:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001858:	d817      	bhi.n	800188a <Coordinate_Base_to_Robot+0x41a>
 800185a:	edd7 7a03 	vldr	s15, [r7, #12]
 800185e:	ed1f 7a08 	vldr	s14, [pc, #-32]	@ 8001840 <Coordinate_Base_to_Robot+0x3d0>
 8001862:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800186a:	db0e      	blt.n	800188a <Coordinate_Base_to_Robot+0x41a>
			{
		Goal_point->theta_goal_position = degree_to_rad(90 - alpha);
 800186c:	ed1f 7a0b 	vldr	s14, [pc, #-44]	@ 8001844 <Coordinate_Base_to_Robot+0x3d4>
 8001870:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001874:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001878:	eeb0 0a67 	vmov.f32	s0, s15
 800187c:	f000 fa3c 	bl	8001cf8 <degree_to_rad>
 8001880:	eef0 7a40 	vmov.f32	s15, s0
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	edc3 7a01 	vstr	s15, [r3, #4]
//		prismatic_pos = format_base_to_robot(sqrt(beta - gamma * cosf(degree_to_rad(90 - theta_position))));
	}

//	Goal_point->r_goal_position = format_base_to_robot(prismatic_pos);
	Goal_point->r_goal_position = prismatic_pos;
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800188e:	601a      	str	r2, [r3, #0]

	return *Goal_point;
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	f107 031c 	add.w	r3, r7, #28
 8001896:	e892 0003 	ldmia.w	r2, {r0, r1}
 800189a:	e883 0003 	stmia.w	r3, {r0, r1}
 800189e:	69fa      	ldr	r2, [r7, #28]
 80018a0:	6a3b      	ldr	r3, [r7, #32]
 80018a2:	ee07 2a10 	vmov	s14, r2
 80018a6:	ee07 3a90 	vmov	s15, r3
}
 80018aa:	eeb0 0a47 	vmov.f32	s0, s14
 80018ae:	eef0 0a67 	vmov.f32	s1, s15
 80018b2:	3740      	adds	r7, #64	@ 0x40
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bdb0      	pop	{r4, r5, r7, pc}

080018b8 <Coordinate_Robot_to_Base>:

Robot_goal_point Coordinate_Robot_to_Base(Robot_goal_point *Goal_point,
		float r_position, float theta_position) {
 80018b8:	b5b0      	push	{r4, r5, r7, lr}
 80018ba:	b092      	sub	sp, #72	@ 0x48
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6178      	str	r0, [r7, #20]
 80018c0:	ed87 0a04 	vstr	s0, [r7, #16]
 80018c4:	edc7 0a03 	vstr	s1, [r7, #12]

	float theta_position_deg = rad_to_degree(theta_position);
 80018c8:	ed97 0a03 	vldr	s0, [r7, #12]
 80018cc:	f000 f9e8 	bl	8001ca0 <rad_to_degree>
 80018d0:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38
	Goal_point->r_goal_position = 0;
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	f04f 0200 	mov.w	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
	Goal_point->theta_goal_position = 0;
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	f04f 0200 	mov.w	r2, #0
 80018e2:	605a      	str	r2, [r3, #4]

	int quadrant = 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	647b      	str	r3, [r7, #68]	@ 0x44
	if (theta_position_deg >= 0 && theta_position_deg <= 90) {
 80018e8:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80018ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018f4:	db1f      	blt.n	8001936 <Coordinate_Robot_to_Base+0x7e>
 80018f6:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80018fa:	ed9f 7ad4 	vldr	s14, [pc, #848]	@ 8001c4c <Coordinate_Robot_to_Base+0x394>
 80018fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001906:	d816      	bhi.n	8001936 <Coordinate_Robot_to_Base+0x7e>
		if (sinf(theta_position) * r_position >= Offet) {
 8001908:	ed97 0a03 	vldr	s0, [r7, #12]
 800190c:	f00d ff14 	bl	800f738 <sinf>
 8001910:	eeb0 7a40 	vmov.f32	s14, s0
 8001914:	edd7 7a04 	vldr	s15, [r7, #16]
 8001918:	ee67 7a27 	vmul.f32	s15, s14, s15
 800191c:	ed9f 7ac6 	vldr	s14, [pc, #792]	@ 8001c38 <Coordinate_Robot_to_Base+0x380>
 8001920:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001928:	db02      	blt.n	8001930 <Coordinate_Robot_to_Base+0x78>
			quadrant = 1;
 800192a:	2301      	movs	r3, #1
 800192c:	647b      	str	r3, [r7, #68]	@ 0x44
		if (sinf(theta_position) * r_position >= Offet) {
 800192e:	e022      	b.n	8001976 <Coordinate_Robot_to_Base+0xbe>
		} else {
			quadrant = 4;
 8001930:	2304      	movs	r3, #4
 8001932:	647b      	str	r3, [r7, #68]	@ 0x44
		if (sinf(theta_position) * r_position >= Offet) {
 8001934:	e01f      	b.n	8001976 <Coordinate_Robot_to_Base+0xbe>
		}
	} else {
		if (cosf(theta_position - degree_to_rad(90.0)) * r_position >= Offet) {
 8001936:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 8001c4c <Coordinate_Robot_to_Base+0x394>
 800193a:	f000 f9dd 	bl	8001cf8 <degree_to_rad>
 800193e:	eeb0 7a40 	vmov.f32	s14, s0
 8001942:	edd7 7a03 	vldr	s15, [r7, #12]
 8001946:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800194a:	eeb0 0a67 	vmov.f32	s0, s15
 800194e:	f00d fea7 	bl	800f6a0 <cosf>
 8001952:	eeb0 7a40 	vmov.f32	s14, s0
 8001956:	edd7 7a04 	vldr	s15, [r7, #16]
 800195a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800195e:	ed9f 7ab6 	vldr	s14, [pc, #728]	@ 8001c38 <Coordinate_Robot_to_Base+0x380>
 8001962:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800196a:	db02      	blt.n	8001972 <Coordinate_Robot_to_Base+0xba>
			quadrant = 2;
 800196c:	2302      	movs	r3, #2
 800196e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001970:	e001      	b.n	8001976 <Coordinate_Robot_to_Base+0xbe>
		} else {
			quadrant = 3;
 8001972:	2303      	movs	r3, #3
 8001974:	647b      	str	r3, [r7, #68]	@ 0x44
		}
	}
	float beta = pow(r_position, 2) + pow(Offet, 2);
 8001976:	6938      	ldr	r0, [r7, #16]
 8001978:	f7fe fdb2 	bl	80004e0 <__aeabi_f2d>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	ed9f 1bab 	vldr	d1, [pc, #684]	@ 8001c30 <Coordinate_Robot_to_Base+0x378>
 8001984:	ec43 2b10 	vmov	d0, r2, r3
 8001988:	f00d fda4 	bl	800f4d4 <pow>
 800198c:	ec51 0b10 	vmov	r0, r1, d0
 8001990:	f04f 0200 	mov.w	r2, #0
 8001994:	4ba9      	ldr	r3, [pc, #676]	@ (8001c3c <Coordinate_Robot_to_Base+0x384>)
 8001996:	f7fe fc45 	bl	8000224 <__adddf3>
 800199a:	4602      	mov	r2, r0
 800199c:	460b      	mov	r3, r1
 800199e:	4610      	mov	r0, r2
 80019a0:	4619      	mov	r1, r3
 80019a2:	f7ff f8c5 	bl	8000b30 <__aeabi_d2f>
 80019a6:	4603      	mov	r3, r0
 80019a8:	637b      	str	r3, [r7, #52]	@ 0x34
	float gamma = -2 * r_position * Offet;
 80019aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80019ae:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 80019b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019b6:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 8001c38 <Coordinate_Robot_to_Base+0x380>
 80019ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019be:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	float Prismatic_pos;
	float theta;
	if (quadrant == 1) // quadrant 1
 80019c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d12a      	bne.n	8001a1e <Coordinate_Robot_to_Base+0x166>
			{
		Prismatic_pos = sqrt(
				beta + gamma * cosf(degree_to_rad(90.0) - theta_position));
 80019c8:	ed9f 0aa0 	vldr	s0, [pc, #640]	@ 8001c4c <Coordinate_Robot_to_Base+0x394>
 80019cc:	f000 f994 	bl	8001cf8 <degree_to_rad>
 80019d0:	eeb0 7a40 	vmov.f32	s14, s0
 80019d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80019d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019dc:	eeb0 0a67 	vmov.f32	s0, s15
 80019e0:	f00d fe5e 	bl	800f6a0 <cosf>
 80019e4:	eeb0 7a40 	vmov.f32	s14, s0
 80019e8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80019ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019f0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80019f4:	ee77 7a27 	vadd.f32	s15, s14, s15
		Prismatic_pos = sqrt(
 80019f8:	ee17 0a90 	vmov	r0, s15
 80019fc:	f7fe fd70 	bl	80004e0 <__aeabi_f2d>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	ec43 2b10 	vmov	d0, r2, r3
 8001a08:	f00d fdd4 	bl	800f5b4 <sqrt>
 8001a0c:	ec53 2b10 	vmov	r2, r3, d0
 8001a10:	4610      	mov	r0, r2
 8001a12:	4619      	mov	r1, r3
 8001a14:	f7ff f88c 	bl	8000b30 <__aeabi_d2f>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	643b      	str	r3, [r7, #64]	@ 0x40
 8001a1c:	e085      	b.n	8001b2a <Coordinate_Robot_to_Base+0x272>

	} else if (quadrant == 2) // quadrant 2
 8001a1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d12a      	bne.n	8001a7a <Coordinate_Robot_to_Base+0x1c2>
			{
		Prismatic_pos = sqrt(
				beta + gamma * cosf(theta_position - degree_to_rad(90.0)));
 8001a24:	ed9f 0a89 	vldr	s0, [pc, #548]	@ 8001c4c <Coordinate_Robot_to_Base+0x394>
 8001a28:	f000 f966 	bl	8001cf8 <degree_to_rad>
 8001a2c:	eeb0 7a40 	vmov.f32	s14, s0
 8001a30:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a34:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a38:	eeb0 0a67 	vmov.f32	s0, s15
 8001a3c:	f00d fe30 	bl	800f6a0 <cosf>
 8001a40:	eeb0 7a40 	vmov.f32	s14, s0
 8001a44:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001a48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a4c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001a50:	ee77 7a27 	vadd.f32	s15, s14, s15
		Prismatic_pos = sqrt(
 8001a54:	ee17 0a90 	vmov	r0, s15
 8001a58:	f7fe fd42 	bl	80004e0 <__aeabi_f2d>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	ec43 2b10 	vmov	d0, r2, r3
 8001a64:	f00d fda6 	bl	800f5b4 <sqrt>
 8001a68:	ec53 2b10 	vmov	r2, r3, d0
 8001a6c:	4610      	mov	r0, r2
 8001a6e:	4619      	mov	r1, r3
 8001a70:	f7ff f85e 	bl	8000b30 <__aeabi_d2f>
 8001a74:	4603      	mov	r3, r0
 8001a76:	643b      	str	r3, [r7, #64]	@ 0x40
 8001a78:	e057      	b.n	8001b2a <Coordinate_Robot_to_Base+0x272>

	} else if (quadrant == 3) // quadrant 3
 8001a7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a7c:	2b03      	cmp	r3, #3
 8001a7e:	d12a      	bne.n	8001ad6 <Coordinate_Robot_to_Base+0x21e>
			{
		Prismatic_pos = sqrt(
				beta + gamma * cosf(theta_position - degree_to_rad(90.0)));
 8001a80:	ed9f 0a72 	vldr	s0, [pc, #456]	@ 8001c4c <Coordinate_Robot_to_Base+0x394>
 8001a84:	f000 f938 	bl	8001cf8 <degree_to_rad>
 8001a88:	eeb0 7a40 	vmov.f32	s14, s0
 8001a8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a94:	eeb0 0a67 	vmov.f32	s0, s15
 8001a98:	f00d fe02 	bl	800f6a0 <cosf>
 8001a9c:	eeb0 7a40 	vmov.f32	s14, s0
 8001aa0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001aa4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aa8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001aac:	ee77 7a27 	vadd.f32	s15, s14, s15
		Prismatic_pos = sqrt(
 8001ab0:	ee17 0a90 	vmov	r0, s15
 8001ab4:	f7fe fd14 	bl	80004e0 <__aeabi_f2d>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	ec43 2b10 	vmov	d0, r2, r3
 8001ac0:	f00d fd78 	bl	800f5b4 <sqrt>
 8001ac4:	ec53 2b10 	vmov	r2, r3, d0
 8001ac8:	4610      	mov	r0, r2
 8001aca:	4619      	mov	r1, r3
 8001acc:	f7ff f830 	bl	8000b30 <__aeabi_d2f>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	643b      	str	r3, [r7, #64]	@ 0x40
 8001ad4:	e029      	b.n	8001b2a <Coordinate_Robot_to_Base+0x272>
	} else  // quadrant 4
	{
		Prismatic_pos = sqrt(
				beta + gamma * cosf(degree_to_rad(90.0) - theta_position));
 8001ad6:	ed9f 0a5d 	vldr	s0, [pc, #372]	@ 8001c4c <Coordinate_Robot_to_Base+0x394>
 8001ada:	f000 f90d 	bl	8001cf8 <degree_to_rad>
 8001ade:	eeb0 7a40 	vmov.f32	s14, s0
 8001ae2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ae6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aea:	eeb0 0a67 	vmov.f32	s0, s15
 8001aee:	f00d fdd7 	bl	800f6a0 <cosf>
 8001af2:	eeb0 7a40 	vmov.f32	s14, s0
 8001af6:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001afa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001afe:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001b02:	ee77 7a27 	vadd.f32	s15, s14, s15
		Prismatic_pos = sqrt(
 8001b06:	ee17 0a90 	vmov	r0, s15
 8001b0a:	f7fe fce9 	bl	80004e0 <__aeabi_f2d>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	ec43 2b10 	vmov	d0, r2, r3
 8001b16:	f00d fd4d 	bl	800f5b4 <sqrt>
 8001b1a:	ec53 2b10 	vmov	r2, r3, d0
 8001b1e:	4610      	mov	r0, r2
 8001b20:	4619      	mov	r1, r3
 8001b22:	f7ff f805 	bl	8000b30 <__aeabi_d2f>
 8001b26:	4603      	mov	r3, r0
 8001b28:	643b      	str	r3, [r7, #64]	@ 0x40
	}

	float up = pow(r_position, 2) - pow(Prismatic_pos, 2) - pow(Offet, 2);
 8001b2a:	6938      	ldr	r0, [r7, #16]
 8001b2c:	f7fe fcd8 	bl	80004e0 <__aeabi_f2d>
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
 8001b34:	ed9f 1b3e 	vldr	d1, [pc, #248]	@ 8001c30 <Coordinate_Robot_to_Base+0x378>
 8001b38:	ec43 2b10 	vmov	d0, r2, r3
 8001b3c:	f00d fcca 	bl	800f4d4 <pow>
 8001b40:	ec55 4b10 	vmov	r4, r5, d0
 8001b44:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001b46:	f7fe fccb 	bl	80004e0 <__aeabi_f2d>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	ed9f 1b38 	vldr	d1, [pc, #224]	@ 8001c30 <Coordinate_Robot_to_Base+0x378>
 8001b52:	ec43 2b10 	vmov	d0, r2, r3
 8001b56:	f00d fcbd 	bl	800f4d4 <pow>
 8001b5a:	ec53 2b10 	vmov	r2, r3, d0
 8001b5e:	4620      	mov	r0, r4
 8001b60:	4629      	mov	r1, r5
 8001b62:	f7fe fb5d 	bl	8000220 <__aeabi_dsub>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	4610      	mov	r0, r2
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	f04f 0200 	mov.w	r2, #0
 8001b72:	4b32      	ldr	r3, [pc, #200]	@ (8001c3c <Coordinate_Robot_to_Base+0x384>)
 8001b74:	f7fe fb54 	bl	8000220 <__aeabi_dsub>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	4610      	mov	r0, r2
 8001b7e:	4619      	mov	r1, r3
 8001b80:	f7fe ffd6 	bl	8000b30 <__aeabi_d2f>
 8001b84:	4603      	mov	r3, r0
 8001b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
	float down = (-2 * Prismatic_pos * Offet);
 8001b88:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001b8c:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8001b90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b94:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8001c38 <Coordinate_Robot_to_Base+0x380>
 8001b98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b9c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	float alpha = acosf(up/down);
 8001ba0:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001ba4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001ba8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001bac:	eeb0 0a66 	vmov.f32	s0, s13
 8001bb0:	f00d fd2c 	bl	800f60c <acosf>
 8001bb4:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24

	if (quadrant == 1) // quadrant 1
 8001bb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d116      	bne.n	8001bec <Coordinate_Robot_to_Base+0x334>
			{
		theta = rad_to_degree(alpha) - 90.0;
 8001bbe:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001bc2:	f000 f86d 	bl	8001ca0 <rad_to_degree>
 8001bc6:	ee10 3a10 	vmov	r3, s0
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7fe fc88 	bl	80004e0 <__aeabi_f2d>
 8001bd0:	f04f 0200 	mov.w	r2, #0
 8001bd4:	4b1a      	ldr	r3, [pc, #104]	@ (8001c40 <Coordinate_Robot_to_Base+0x388>)
 8001bd6:	f7fe fb23 	bl	8000220 <__aeabi_dsub>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	4610      	mov	r0, r2
 8001be0:	4619      	mov	r1, r3
 8001be2:	f7fe ffa5 	bl	8000b30 <__aeabi_d2f>
 8001be6:	4603      	mov	r3, r0
 8001be8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001bea:	e03f      	b.n	8001c6c <Coordinate_Robot_to_Base+0x3b4>

	} else if (quadrant == 2) // quadrant 2
 8001bec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d10c      	bne.n	8001c0c <Coordinate_Robot_to_Base+0x354>
			{
		theta = 270 - rad_to_degree(alpha);
 8001bf2:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001bf6:	f000 f853 	bl	8001ca0 <rad_to_degree>
 8001bfa:	eef0 7a40 	vmov.f32	s15, s0
 8001bfe:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001c44 <Coordinate_Robot_to_Base+0x38c>
 8001c02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c06:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 8001c0a:	e02f      	b.n	8001c6c <Coordinate_Robot_to_Base+0x3b4>

	} else if (quadrant == 3) // quadrant 3
 8001c0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c0e:	2b03      	cmp	r3, #3
 8001c10:	d11e      	bne.n	8001c50 <Coordinate_Robot_to_Base+0x398>
			{
		theta = -90 - rad_to_degree(alpha);
 8001c12:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001c16:	f000 f843 	bl	8001ca0 <rad_to_degree>
 8001c1a:	eef0 7a40 	vmov.f32	s15, s0
 8001c1e:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8001c48 <Coordinate_Robot_to_Base+0x390>
 8001c22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c26:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 8001c2a:	e01f      	b.n	8001c6c <Coordinate_Robot_to_Base+0x3b4>
 8001c2c:	f3af 8000 	nop.w
 8001c30:	00000000 	.word	0x00000000
 8001c34:	40000000 	.word	0x40000000
 8001c38:	43f00000 	.word	0x43f00000
 8001c3c:	410c2000 	.word	0x410c2000
 8001c40:	40568000 	.word	0x40568000
 8001c44:	43870000 	.word	0x43870000
 8001c48:	c2b40000 	.word	0xc2b40000
 8001c4c:	42b40000 	.word	0x42b40000
	} else  // quadrant 4
	{
		theta = -1 * (90 - rad_to_degree(alpha));
 8001c50:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001c54:	f000 f824 	bl	8001ca0 <rad_to_degree>
 8001c58:	eef0 7a40 	vmov.f32	s15, s0
 8001c5c:	ed1f 7a05 	vldr	s14, [pc, #-20]	@ 8001c4c <Coordinate_Robot_to_Base+0x394>
 8001c60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c64:	eef1 7a67 	vneg.f32	s15, s15
 8001c68:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
	}
//	Goal_point->r_goal_position = format_robot_to_base(Prismatic_pos);
//	Goal_point->theta_goal_position = format_robot_to_base(theta);
	Goal_point->r_goal_position = Prismatic_pos;
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001c70:	601a      	str	r2, [r3, #0]
	Goal_point->theta_goal_position = theta;
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001c76:	605a      	str	r2, [r3, #4]
	return *Goal_point;
 8001c78:	697a      	ldr	r2, [r7, #20]
 8001c7a:	f107 031c 	add.w	r3, r7, #28
 8001c7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c82:	e883 0003 	stmia.w	r3, {r0, r1}
 8001c86:	69fa      	ldr	r2, [r7, #28]
 8001c88:	6a3b      	ldr	r3, [r7, #32]
 8001c8a:	ee07 2a10 	vmov	s14, r2
 8001c8e:	ee07 3a90 	vmov	s15, r3
}
 8001c92:	eeb0 0a47 	vmov.f32	s0, s14
 8001c96:	eef0 0a67 	vmov.f32	s1, s15
 8001c9a:	3748      	adds	r7, #72	@ 0x48
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bdb0      	pop	{r4, r5, r7, pc}

08001ca0 <rad_to_degree>:

float rad_to_degree(float rad) {
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	ed87 0a01 	vstr	s0, [r7, #4]
	return (rad * 180.0) / 3.142;
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7fe fc18 	bl	80004e0 <__aeabi_f2d>
 8001cb0:	f04f 0200 	mov.w	r2, #0
 8001cb4:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf0 <rad_to_degree+0x50>)
 8001cb6:	f7fe fc6b 	bl	8000590 <__aeabi_dmul>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	4610      	mov	r0, r2
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	a309      	add	r3, pc, #36	@ (adr r3, 8001ce8 <rad_to_degree+0x48>)
 8001cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc8:	f7fe fd8c 	bl	80007e4 <__aeabi_ddiv>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	460b      	mov	r3, r1
 8001cd0:	4610      	mov	r0, r2
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	f7fe ff2c 	bl	8000b30 <__aeabi_d2f>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	ee07 3a90 	vmov	s15, r3
}
 8001cde:	eeb0 0a67 	vmov.f32	s0, s15
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	e5604189 	.word	0xe5604189
 8001cec:	400922d0 	.word	0x400922d0
 8001cf0:	40668000 	.word	0x40668000
 8001cf4:	00000000 	.word	0x00000000

08001cf8 <degree_to_rad>:
float degree_to_rad(float degree) {
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	ed87 0a01 	vstr	s0, [r7, #4]
	return (degree * 3.142) / 180.0;
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f7fe fbec 	bl	80004e0 <__aeabi_f2d>
 8001d08:	a30e      	add	r3, pc, #56	@ (adr r3, 8001d44 <degree_to_rad+0x4c>)
 8001d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d0e:	f7fe fc3f 	bl	8000590 <__aeabi_dmul>
 8001d12:	4602      	mov	r2, r0
 8001d14:	460b      	mov	r3, r1
 8001d16:	4610      	mov	r0, r2
 8001d18:	4619      	mov	r1, r3
 8001d1a:	f04f 0200 	mov.w	r2, #0
 8001d1e:	4b08      	ldr	r3, [pc, #32]	@ (8001d40 <degree_to_rad+0x48>)
 8001d20:	f7fe fd60 	bl	80007e4 <__aeabi_ddiv>
 8001d24:	4602      	mov	r2, r0
 8001d26:	460b      	mov	r3, r1
 8001d28:	4610      	mov	r0, r2
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	f7fe ff00 	bl	8000b30 <__aeabi_d2f>
 8001d30:	4603      	mov	r3, r0
 8001d32:	ee07 3a90 	vmov	s15, r3
}
 8001d36:	eeb0 0a67 	vmov.f32	s0, s15
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40668000 	.word	0x40668000
 8001d44:	e5604189 	.word	0xe5604189
 8001d48:	400922d0 	.word	0x400922d0

08001d4c <format_robot_to_base>:
uint16_t format_robot_to_base(float degree) {
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	ed87 0a01 	vstr	s0, [r7, #4]
	return (uint16_t) (roundf(degree) * 10.0);
 8001d56:	ed97 0a01 	vldr	s0, [r7, #4]
 8001d5a:	f00d fe1f 	bl	800f99c <roundf>
 8001d5e:	ee10 3a10 	vmov	r3, s0
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7fe fbbc 	bl	80004e0 <__aeabi_f2d>
 8001d68:	f04f 0200 	mov.w	r2, #0
 8001d6c:	4b07      	ldr	r3, [pc, #28]	@ (8001d8c <format_robot_to_base+0x40>)
 8001d6e:	f7fe fc0f 	bl	8000590 <__aeabi_dmul>
 8001d72:	4602      	mov	r2, r0
 8001d74:	460b      	mov	r3, r1
 8001d76:	4610      	mov	r0, r2
 8001d78:	4619      	mov	r1, r3
 8001d7a:	f7fe feb9 	bl	8000af0 <__aeabi_d2uiz>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	b29b      	uxth	r3, r3
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40240000 	.word	0x40240000

08001d90 <format_base_to_robot>:
float format_base_to_robot(uint16_t degree) {
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	80fb      	strh	r3, [r7, #6]
	return (float) (degree / 10.0);
 8001d9a:	88fb      	ldrh	r3, [r7, #6]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7fe fb8d 	bl	80004bc <__aeabi_i2d>
 8001da2:	f04f 0200 	mov.w	r2, #0
 8001da6:	4b08      	ldr	r3, [pc, #32]	@ (8001dc8 <format_base_to_robot+0x38>)
 8001da8:	f7fe fd1c 	bl	80007e4 <__aeabi_ddiv>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	4610      	mov	r0, r2
 8001db2:	4619      	mov	r1, r3
 8001db4:	f7fe febc 	bl	8000b30 <__aeabi_d2f>
 8001db8:	4603      	mov	r3, r0
 8001dba:	ee07 3a90 	vmov	s15, r3
}
 8001dbe:	eeb0 0a67 	vmov.f32	s0, s15
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40240000 	.word	0x40240000

08001dcc <Encoder_Init>:
#define Count_PER_REV 12000.0f
#define TWO_PI 6.283185f
#define PI 3.14286f
#define Lead 11.0f

void Encoder_Init(Encoder *enc, TIM_HandleTypeDef *htim) {
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
    enc->htim = htim;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	601a      	str	r2, [r3, #0]
    HAL_TIM_Encoder_Start(htim, TIM_CHANNEL_ALL);
 8001ddc:	213c      	movs	r1, #60	@ 0x3c
 8001dde:	6838      	ldr	r0, [r7, #0]
 8001de0:	f008 fcf6 	bl	800a7d0 <HAL_TIM_Encoder_Start>

    enc->lastRawPosition = __HAL_TIM_GET_COUNTER(htim);
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dea:	461a      	mov	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	605a      	str	r2, [r3, #4]
    enc->position = 0;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f04f 0200 	mov.w	r2, #0
 8001df6:	609a      	str	r2, [r3, #8]
    enc->velocity = 0;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f04f 0200 	mov.w	r2, #0
 8001dfe:	60da      	str	r2, [r3, #12]
    enc->acceleration = 0;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f04f 0200 	mov.w	r2, #0
 8001e06:	611a      	str	r2, [r3, #16]
    enc->lastPosition = 0;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f04f 0200 	mov.w	r2, #0
 8001e0e:	619a      	str	r2, [r3, #24]
    enc->lastVelocity = 0;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f04f 0200 	mov.w	r2, #0
 8001e16:	61da      	str	r2, [r3, #28]
}
 8001e18:	bf00      	nop
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <Encoder_Update>:

void Encoder_Update(Encoder *enc, float dt) {
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	ed87 0a00 	vstr	s0, [r7]
    int32_t rawPosition = __HAL_TIM_GET_COUNTER(enc->htim);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e34:	60bb      	str	r3, [r7, #8]
    int32_t deltaRaw = rawPosition - enc->lastRawPosition;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	68ba      	ldr	r2, [r7, #8]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	60fb      	str	r3, [r7, #12]

    // Handle 16-bit counter wrap-around
    if (deltaRaw > 30000) {
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001e46:	4293      	cmp	r3, r2
 8001e48:	dd05      	ble.n	8001e56 <Encoder_Update+0x36>
        deltaRaw -= 60000;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f5a3 436a 	sub.w	r3, r3, #59904	@ 0xea00
 8001e50:	3b60      	subs	r3, #96	@ 0x60
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	e008      	b.n	8001e68 <Encoder_Update+0x48>
    } else if (deltaRaw < -30000) {
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	4a48      	ldr	r2, [pc, #288]	@ (8001f7c <Encoder_Update+0x15c>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	da04      	bge.n	8001e68 <Encoder_Update+0x48>
        deltaRaw += 60000;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f503 436a 	add.w	r3, r3, #59904	@ 0xea00
 8001e64:	3360      	adds	r3, #96	@ 0x60
 8001e66:	60fb      	str	r3, [r7, #12]
    }

    enc->position += ((float)deltaRaw * TWO_PI) / Count_PER_REV;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	ed93 7a02 	vldr	s14, [r3, #8]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	ee07 3a90 	vmov	s15, r3
 8001e74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e78:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8001f80 <Encoder_Update+0x160>
 8001e7c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001e80:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 8001f84 <Encoder_Update+0x164>
 8001e84:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001e88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	edc3 7a02 	vstr	s15, [r3, #8]
    enc->velocity = (enc->position - enc->lastPosition) / dt;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	ed93 7a02 	vldr	s14, [r3, #8]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	edd3 7a06 	vldr	s15, [r3, #24]
 8001e9e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001ea2:	ed97 7a00 	vldr	s14, [r7]
 8001ea6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	edc3 7a03 	vstr	s15, [r3, #12]
    enc->acceleration = (enc->velocity - enc->lastVelocity) / dt;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	ed93 7a03 	vldr	s14, [r3, #12]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	edd3 7a07 	vldr	s15, [r3, #28]
 8001ebc:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001ec0:	ed97 7a00 	vldr	s14, [r7]
 8001ec4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	edc3 7a04 	vstr	s15, [r3, #16]
    enc->position_degree = enc->position * (180.0f / PI);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ed4:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8001f88 <Encoder_Update+0x168>
 8001ed8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	edc3 7a05 	vstr	s15, [r3, #20]

    enc->lastRawPosition = rawPosition;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68ba      	ldr	r2, [r7, #8]
 8001ee6:	605a      	str	r2, [r3, #4]
    enc->lastPosition = enc->position;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	619a      	str	r2, [r3, #24]
    enc->lastVelocity = enc->velocity;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	68da      	ldr	r2, [r3, #12]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	61da      	str	r2, [r3, #28]

    enc->position_mm += ((float)deltaRaw / Count_PER_REV) * Lead;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	ed93 7a08 	vldr	s14, [r3, #32]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	ee07 3a90 	vmov	s15, r3
 8001f04:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001f08:	ed9f 6a1e 	vldr	s12, [pc, #120]	@ 8001f84 <Encoder_Update+0x164>
 8001f0c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001f10:	eef2 6a06 	vmov.f32	s13, #38	@ 0x41300000  11.0
 8001f14:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001f18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	edc3 7a08 	vstr	s15, [r3, #32]
    enc->velocity_mm = (enc->position_mm - enc->lastPosition_mm) / dt;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	ed93 7a08 	vldr	s14, [r3, #32]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001f2e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001f32:	ed97 7a00 	vldr	s14, [r7]
 8001f36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    enc->acceleration_mm = (enc->velocity_mm - enc->lastVelocity_mm) / dt;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001f4c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001f50:	ed97 7a00 	vldr	s14, [r7]
 8001f54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

    enc->lastPosition_mm = enc->position_mm;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a1a      	ldr	r2, [r3, #32]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	62da      	str	r2, [r3, #44]	@ 0x2c
    enc->lastVelocity_mm = enc->velocity_mm;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001f6e:	bf00      	nop
 8001f70:	3714      	adds	r7, #20
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	ffff8ad0 	.word	0xffff8ad0
 8001f80:	40c90fda 	.word	0x40c90fda
 8001f84:	463b8000 	.word	0x463b8000
 8001f88:	42651738 	.word	0x42651738

08001f8c <Encoder_GetPosition>:

void Encoder_setLimit(Encoder *enc, float limit) {
		enc->position = limit;
}

float Encoder_GetPosition(Encoder *enc) {
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
    return enc->position;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	ee07 3a90 	vmov	s15, r3
}
 8001f9c:	eeb0 0a67 	vmov.f32	s0, s15
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <Encoder_GetVelocity>:

float Encoder_GetVelocity(Encoder *enc) {
 8001faa:	b480      	push	{r7}
 8001fac:	b083      	sub	sp, #12
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
    return enc->velocity;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	ee07 3a90 	vmov	s15, r3
}
 8001fba:	eeb0 0a67 	vmov.f32	s0, s15
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <Encoder_GetAcceleration>:

float Encoder_GetAcceleration(Encoder *enc) {
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
    return enc->acceleration;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	ee07 3a90 	vmov	s15, r3
}
 8001fd8:	eeb0 0a67 	vmov.f32	s0, s15
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <Encoder_GetDegree>:

float Encoder_GetDegree(Encoder *enc) {
 8001fe6:	b480      	push	{r7}
 8001fe8:	b083      	sub	sp, #12
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
	return enc->position_degree;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	ee07 3a90 	vmov	s15, r3
}
 8001ff6:	eeb0 0a67 	vmov.f32	s0, s15
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <Encoder_GetPosition_mm>:

float Encoder_GetPosition_mm(Encoder *enc) {
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
    return enc->position_mm;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	ee07 3a90 	vmov	s15, r3
}
 8002014:	eeb0 0a67 	vmov.f32	s0, s15
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <Encoder_GetVelocity_mm>:

float Encoder_GetVelocity_mm(Encoder *enc) {
 8002022:	b480      	push	{r7}
 8002024:	b083      	sub	sp, #12
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
    return enc->velocity_mm;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800202e:	ee07 3a90 	vmov	s15, r3
}
 8002032:	eeb0 0a67 	vmov.f32	s0, s15
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <Encoder_GetAcceleration_mm>:

float Encoder_GetAcceleration_mm(Encoder *enc) {
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
    return enc->acceleration_mm;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800204c:	ee07 3a90 	vmov	s15, r3
}
 8002050:	eeb0 0a67 	vmov.f32	s0, s15
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
	...

08002060 <PS2_ReadData>:
uint8_t SPIRx[PS2_DATA_LENGTH];

#define PS2_CS_PORT GPIOC
#define PS2_CS_PIN  GPIO_PIN_10

void PS2_ReadData() {
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af02      	add	r7, sp, #8
//	HAL_Delay(1);
	HAL_GPIO_WritePin(PS2_CS_PORT, PS2_CS_PIN, GPIO_PIN_RESET);
 8002066:	2200      	movs	r2, #0
 8002068:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800206c:	4811      	ldr	r0, [pc, #68]	@ (80020b4 <PS2_ReadData+0x54>)
 800206e:	f006 fa3d 	bl	80084ec <HAL_GPIO_WritePin>

	for (int i = 0; i < PS2_DATA_LENGTH; i++) {
 8002072:	2300      	movs	r3, #0
 8002074:	607b      	str	r3, [r7, #4]
 8002076:	e00f      	b.n	8002098 <PS2_ReadData+0x38>
		HAL_SPI_TransmitReceive(&hspi1, &SPITx[i], &SPIRx[i], 1, HAL_MAX_DELAY);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a0f      	ldr	r2, [pc, #60]	@ (80020b8 <PS2_ReadData+0x58>)
 800207c:	1899      	adds	r1, r3, r2
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a0e      	ldr	r2, [pc, #56]	@ (80020bc <PS2_ReadData+0x5c>)
 8002082:	441a      	add	r2, r3
 8002084:	f04f 33ff 	mov.w	r3, #4294967295
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	2301      	movs	r3, #1
 800208c:	480c      	ldr	r0, [pc, #48]	@ (80020c0 <PS2_ReadData+0x60>)
 800208e:	f007 fb38 	bl	8009702 <HAL_SPI_TransmitReceive>
	for (int i = 0; i < PS2_DATA_LENGTH; i++) {
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	3301      	adds	r3, #1
 8002096:	607b      	str	r3, [r7, #4]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b07      	cmp	r3, #7
 800209c:	ddec      	ble.n	8002078 <PS2_ReadData+0x18>
//		HAL_Delay(5);
	}

	HAL_GPIO_WritePin(PS2_CS_PORT, PS2_CS_PIN, GPIO_PIN_SET);
 800209e:	2201      	movs	r2, #1
 80020a0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80020a4:	4803      	ldr	r0, [pc, #12]	@ (80020b4 <PS2_ReadData+0x54>)
 80020a6:	f006 fa21 	bl	80084ec <HAL_GPIO_WritePin>
//	HAL_Delay(5);
}
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	48000800 	.word	0x48000800
 80020b8:	20000000 	.word	0x20000000
 80020bc:	200002dc 	.word	0x200002dc
 80020c0:	200016b0 	.word	0x200016b0

080020c4 <PS2_ButtonCircle>:

uint8_t PS2_ButtonCircle() {
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x20);
 80020c8:	4b06      	ldr	r3, [pc, #24]	@ (80020e4 <PS2_ButtonCircle+0x20>)
 80020ca:	791b      	ldrb	r3, [r3, #4]
 80020cc:	f003 0320 	and.w	r3, r3, #32
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	bf0c      	ite	eq
 80020d4:	2301      	moveq	r3, #1
 80020d6:	2300      	movne	r3, #0
 80020d8:	b2db      	uxtb	r3, r3
}
 80020da:	4618      	mov	r0, r3
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	200002dc 	.word	0x200002dc

080020e8 <PS2_ButtonSquare>:

uint8_t PS2_ButtonSquare() {
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x80);
 80020ec:	4b05      	ldr	r3, [pc, #20]	@ (8002104 <PS2_ButtonSquare+0x1c>)
 80020ee:	791b      	ldrb	r3, [r3, #4]
 80020f0:	b25b      	sxtb	r3, r3
 80020f2:	43db      	mvns	r3, r3
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	09db      	lsrs	r3, r3, #7
 80020f8:	b2db      	uxtb	r3, r3
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	200002dc 	.word	0x200002dc

08002108 <PS2_ButtonTriangle>:

uint8_t PS2_ButtonTriangle() {
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x10);
 800210c:	4b06      	ldr	r3, [pc, #24]	@ (8002128 <PS2_ButtonTriangle+0x20>)
 800210e:	791b      	ldrb	r3, [r3, #4]
 8002110:	f003 0310 	and.w	r3, r3, #16
 8002114:	2b00      	cmp	r3, #0
 8002116:	bf0c      	ite	eq
 8002118:	2301      	moveq	r3, #1
 800211a:	2300      	movne	r3, #0
 800211c:	b2db      	uxtb	r3, r3
}
 800211e:	4618      	mov	r0, r3
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	200002dc 	.word	0x200002dc

0800212c <PS2_ButtonCross>:

uint8_t PS2_ButtonCross() {
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x40);
 8002130:	4b06      	ldr	r3, [pc, #24]	@ (800214c <PS2_ButtonCross+0x20>)
 8002132:	791b      	ldrb	r3, [r3, #4]
 8002134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002138:	2b00      	cmp	r3, #0
 800213a:	bf0c      	ite	eq
 800213c:	2301      	moveq	r3, #1
 800213e:	2300      	movne	r3, #0
 8002140:	b2db      	uxtb	r3, r3
}
 8002142:	4618      	mov	r0, r3
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	200002dc 	.word	0x200002dc

08002150 <PS2_ButtonR1>:

uint8_t PS2_ButtonR1() {
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x08);
 8002154:	4b06      	ldr	r3, [pc, #24]	@ (8002170 <PS2_ButtonR1+0x20>)
 8002156:	791b      	ldrb	r3, [r3, #4]
 8002158:	f003 0308 	and.w	r3, r3, #8
 800215c:	2b00      	cmp	r3, #0
 800215e:	bf0c      	ite	eq
 8002160:	2301      	moveq	r3, #1
 8002162:	2300      	movne	r3, #0
 8002164:	b2db      	uxtb	r3, r3
}
 8002166:	4618      	mov	r0, r3
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	200002dc 	.word	0x200002dc

08002174 <PS2_ButtonR2>:

uint8_t PS2_ButtonR2() {
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x02);
 8002178:	4b06      	ldr	r3, [pc, #24]	@ (8002194 <PS2_ButtonR2+0x20>)
 800217a:	791b      	ldrb	r3, [r3, #4]
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b00      	cmp	r3, #0
 8002182:	bf0c      	ite	eq
 8002184:	2301      	moveq	r3, #1
 8002186:	2300      	movne	r3, #0
 8002188:	b2db      	uxtb	r3, r3
}
 800218a:	4618      	mov	r0, r3
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	200002dc 	.word	0x200002dc

08002198 <PS2_ButtonSelect>:

uint8_t PS2_ButtonSelect() {
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
	return !(SPIRx[3] & 0x01);
 800219c:	4b06      	ldr	r3, [pc, #24]	@ (80021b8 <PS2_ButtonSelect+0x20>)
 800219e:	78db      	ldrb	r3, [r3, #3]
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	bf0c      	ite	eq
 80021a8:	2301      	moveq	r3, #1
 80021aa:	2300      	movne	r3, #0
 80021ac:	b2db      	uxtb	r3, r3
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr
 80021b8:	200002dc 	.word	0x200002dc

080021bc <PS2_ButtonStart>:

uint8_t PS2_ButtonStart() {
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
	return !(SPIRx[3] & 0x08);
 80021c0:	4b06      	ldr	r3, [pc, #24]	@ (80021dc <PS2_ButtonStart+0x20>)
 80021c2:	78db      	ldrb	r3, [r3, #3]
 80021c4:	f003 0308 	and.w	r3, r3, #8
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	bf0c      	ite	eq
 80021cc:	2301      	moveq	r3, #1
 80021ce:	2300      	movne	r3, #0
 80021d0:	b2db      	uxtb	r3, r3
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	200002dc 	.word	0x200002dc

080021e0 <PS2_ButtonL2>:

uint8_t PS2_ButtonL2() {
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
	 return !(SPIRx[4] & 0x01);
 80021e4:	4b06      	ldr	r3, [pc, #24]	@ (8002200 <PS2_ButtonL2+0x20>)
 80021e6:	791b      	ldrb	r3, [r3, #4]
 80021e8:	f003 0301 	and.w	r3, r3, #1
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	bf0c      	ite	eq
 80021f0:	2301      	moveq	r3, #1
 80021f2:	2300      	movne	r3, #0
 80021f4:	b2db      	uxtb	r3, r3
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	200002dc 	.word	0x200002dc

08002204 <Kalman_Init>:
#include "Kalman_Filter.h"

void Kalman_Init(KalmanFilter *kf) {
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
    arm_mat_init_f32(&kf->A, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->A_data);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	3370      	adds	r3, #112	@ 0x70
 8002212:	2204      	movs	r2, #4
 8002214:	2104      	movs	r1, #4
 8002216:	f00c fc98 	bl	800eb4a <arm_mat_init_f32>
    arm_mat_init_f32(&kf->B, KALMAN_STATE_DIM, KALMAN_MEAS_DIM, kf->B_data);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f103 0008 	add.w	r0, r3, #8
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	33b0      	adds	r3, #176	@ 0xb0
 8002224:	2204      	movs	r2, #4
 8002226:	2104      	movs	r1, #4
 8002228:	f00c fc8f 	bl	800eb4a <arm_mat_init_f32>
    arm_mat_init_f32(&kf->H, KALMAN_MEAS_DIM, KALMAN_STATE_DIM, kf->H_data);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f103 0010 	add.w	r0, r3, #16
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	33f0      	adds	r3, #240	@ 0xf0
 8002236:	2204      	movs	r2, #4
 8002238:	2104      	movs	r1, #4
 800223a:	f00c fc86 	bl	800eb4a <arm_mat_init_f32>
    arm_mat_init_f32(&kf->Q, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->Q_data);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f103 0018 	add.w	r0, r3, #24
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800224a:	2204      	movs	r2, #4
 800224c:	2104      	movs	r1, #4
 800224e:	f00c fc7c 	bl	800eb4a <arm_mat_init_f32>
    arm_mat_init_f32(&kf->R, KALMAN_MEAS_DIM, KALMAN_MEAS_DIM, kf->R_data);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f103 0020 	add.w	r0, r3, #32
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 800225e:	2204      	movs	r2, #4
 8002260:	2104      	movs	r1, #4
 8002262:	f00c fc72 	bl	800eb4a <arm_mat_init_f32>
    arm_mat_init_f32(&kf->P, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->P_data);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 8002272:	2204      	movs	r2, #4
 8002274:	2104      	movs	r1, #4
 8002276:	f00c fc68 	bl	800eb4a <arm_mat_init_f32>
    arm_mat_init_f32(&kf->K, KALMAN_STATE_DIM, KALMAN_MEAS_DIM, kf->K_data);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8002286:	2204      	movs	r2, #4
 8002288:	2104      	movs	r1, #4
 800228a:	f00c fc5e 	bl	800eb4a <arm_mat_init_f32>
    arm_mat_init_f32(&kf->Input, KALMAN_STATE_DIM, 1, kf->Input_data);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800229a:	2201      	movs	r2, #1
 800229c:	2104      	movs	r1, #4
 800229e:	f00c fc54 	bl	800eb4a <arm_mat_init_f32>

    arm_mat_init_f32(&kf->x, KALMAN_STATE_DIM, 1, kf->x_data);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 80022ae:	2201      	movs	r2, #1
 80022b0:	2104      	movs	r1, #4
 80022b2:	f00c fc4a 	bl	800eb4a <arm_mat_init_f32>
    arm_mat_init_f32(&kf->u, KALMAN_MEAS_DIM, 1, kf->u_data);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 80022c2:	2201      	movs	r2, #1
 80022c4:	2104      	movs	r1, #4
 80022c6:	f00c fc40 	bl	800eb4a <arm_mat_init_f32>
    arm_mat_init_f32(&kf->z, KALMAN_MEAS_DIM, 1, kf->z_data);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f103 0050 	add.w	r0, r3, #80	@ 0x50
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80022d6:	2201      	movs	r2, #1
 80022d8:	2104      	movs	r1, #4
 80022da:	f00c fc36 	bl	800eb4a <arm_mat_init_f32>

    arm_mat_init_f32(&kf->temp1, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->temp1_data);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80022ea:	2204      	movs	r2, #4
 80022ec:	2104      	movs	r1, #4
 80022ee:	f00c fc2c 	bl	800eb4a <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp2, KALMAN_STATE_DIM, KALMAN_MEAS_DIM, kf->temp2_data);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 80022fe:	2204      	movs	r2, #4
 8002300:	2104      	movs	r1, #4
 8002302:	f00c fc22 	bl	800eb4a <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp3, KALMAN_MEAS_DIM, KALMAN_MEAS_DIM, kf->temp3_data);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8002312:	2204      	movs	r2, #4
 8002314:	2104      	movs	r1, #4
 8002316:	f00c fc18 	bl	800eb4a <arm_mat_init_f32>

    // Clear state
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 800231a:	2300      	movs	r3, #0
 800231c:	60fb      	str	r3, [r7, #12]
 800231e:	e00b      	b.n	8002338 <Kalman_Init+0x134>
        kf->x_data[i] = 0.0f;
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	338c      	adds	r3, #140	@ 0x8c
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4413      	add	r3, r2
 800232a:	3304      	adds	r3, #4
 800232c:	f04f 0200 	mov.w	r2, #0
 8002330:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	3301      	adds	r3, #1
 8002336:	60fb      	str	r3, [r7, #12]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2b03      	cmp	r3, #3
 800233c:	ddf0      	ble.n	8002320 <Kalman_Init+0x11c>
    }
}
 800233e:	bf00      	nop
 8002340:	bf00      	nop
 8002342:	3710      	adds	r7, #16
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <Kalman_SetProcessNoise>:

void Kalman_SetProcessNoise(KalmanFilter *kf, float value) {
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	ed87 0a00 	vstr	s0, [r7]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8002354:	2300      	movs	r3, #0
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	e01c      	b.n	8002394 <Kalman_SetProcessNoise+0x4c>
        for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 800235a:	2300      	movs	r3, #0
 800235c:	60bb      	str	r3, [r7, #8]
 800235e:	e013      	b.n	8002388 <Kalman_SetProcessNoise+0x40>
            kf->Q_data[i * KALMAN_STATE_DIM + j] = (i == j) ? value : 0.0f;
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	429a      	cmp	r2, r3
 8002366:	d101      	bne.n	800236c <Kalman_SetProcessNoise+0x24>
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	e001      	b.n	8002370 <Kalman_SetProcessNoise+0x28>
 800236c:	f04f 0300 	mov.w	r3, #0
 8002370:	68fa      	ldr	r2, [r7, #12]
 8002372:	0091      	lsls	r1, r2, #2
 8002374:	68ba      	ldr	r2, [r7, #8]
 8002376:	440a      	add	r2, r1
 8002378:	6879      	ldr	r1, [r7, #4]
 800237a:	324c      	adds	r2, #76	@ 0x4c
 800237c:	0092      	lsls	r2, r2, #2
 800237e:	440a      	add	r2, r1
 8002380:	6013      	str	r3, [r2, #0]
        for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	3301      	adds	r3, #1
 8002386:	60bb      	str	r3, [r7, #8]
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	2b03      	cmp	r3, #3
 800238c:	dde8      	ble.n	8002360 <Kalman_SetProcessNoise+0x18>
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	3301      	adds	r3, #1
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2b03      	cmp	r3, #3
 8002398:	dddf      	ble.n	800235a <Kalman_SetProcessNoise+0x12>
        }
    }
}
 800239a:	bf00      	nop
 800239c:	bf00      	nop
 800239e:	3714      	adds	r7, #20
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <Kalman_SetMeasurementNoise>:

void Kalman_SetMeasurementNoise(KalmanFilter *kf, float value) {
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	ed87 0a00 	vstr	s0, [r7]
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 80023b4:	2300      	movs	r3, #0
 80023b6:	60fb      	str	r3, [r7, #12]
 80023b8:	e01c      	b.n	80023f4 <Kalman_SetMeasurementNoise+0x4c>
        for (int j = 0; j < KALMAN_MEAS_DIM; j++) {
 80023ba:	2300      	movs	r3, #0
 80023bc:	60bb      	str	r3, [r7, #8]
 80023be:	e013      	b.n	80023e8 <Kalman_SetMeasurementNoise+0x40>
            kf->R_data[i * KALMAN_MEAS_DIM + j] = (i == j) ? value : 0.0f;
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d101      	bne.n	80023cc <Kalman_SetMeasurementNoise+0x24>
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	e001      	b.n	80023d0 <Kalman_SetMeasurementNoise+0x28>
 80023cc:	f04f 0300 	mov.w	r3, #0
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	0091      	lsls	r1, r2, #2
 80023d4:	68ba      	ldr	r2, [r7, #8]
 80023d6:	440a      	add	r2, r1
 80023d8:	6879      	ldr	r1, [r7, #4]
 80023da:	325c      	adds	r2, #92	@ 0x5c
 80023dc:	0092      	lsls	r2, r2, #2
 80023de:	440a      	add	r2, r1
 80023e0:	6013      	str	r3, [r2, #0]
        for (int j = 0; j < KALMAN_MEAS_DIM; j++) {
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	3301      	adds	r3, #1
 80023e6:	60bb      	str	r3, [r7, #8]
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	2b03      	cmp	r3, #3
 80023ec:	dde8      	ble.n	80023c0 <Kalman_SetMeasurementNoise+0x18>
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	3301      	adds	r3, #1
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2b03      	cmp	r3, #3
 80023f8:	dddf      	ble.n	80023ba <Kalman_SetMeasurementNoise+0x12>
        }
    }
}
 80023fa:	bf00      	nop
 80023fc:	bf00      	nop
 80023fe:	3714      	adds	r7, #20
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <Kalman_SetInput>:

void Kalman_SetInput(KalmanFilter *kf, float value)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	ed87 0a00 	vstr	s0, [r7]
	kf->Input_data[0] = value;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <Kalman_Predict>:
void Kalman_Predict(KalmanFilter *kf) {
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
	// x = A * x + B * u
	arm_mat_mult_f32(&kf->A, &kf->x, &kf->temp1);   // temp1 = A * x
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3358      	adds	r3, #88	@ 0x58
 800243c:	461a      	mov	r2, r3
 800243e:	f00c ff13 	bl	800f268 <arm_mat_mult_f32>
	arm_mat_mult_f32(&kf->B, &kf->Input, &kf->temp2);   // temp2 = B * u
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f103 0008 	add.w	r0, r3, #8
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	3360      	adds	r3, #96	@ 0x60
 8002452:	461a      	mov	r2, r3
 8002454:	f00c ff08 	bl	800f268 <arm_mat_mult_f32>
	arm_mat_add_f32(&kf->temp1, &kf->temp2, &kf->x); // x = temp1 + temp2
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3340      	adds	r3, #64	@ 0x40
 8002468:	461a      	mov	r2, r3
 800246a:	f00c fb33 	bl	800ead4 <arm_mat_add_f32>

    // P = A * P * A' + Q
    arm_mat_mult_f32(&kf->A, &kf->P, &kf->temp1);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	3358      	adds	r3, #88	@ 0x58
 800247a:	461a      	mov	r2, r3
 800247c:	f00c fef4 	bl	800f268 <arm_mat_mult_f32>
    arm_mat_trans_f32(&kf->A, &kf->temp2);  // reuse temp2
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	3360      	adds	r3, #96	@ 0x60
 8002486:	4619      	mov	r1, r3
 8002488:	4610      	mov	r0, r2
 800248a:	f00c ffa2 	bl	800f3d2 <arm_mat_trans_f32>
    arm_mat_mult_f32(&kf->temp1, &kf->temp2, &kf->P);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	3328      	adds	r3, #40	@ 0x28
 800249e:	461a      	mov	r2, r3
 80024a0:	f00c fee2 	bl	800f268 <arm_mat_mult_f32>
    arm_mat_add_f32(&kf->P, &kf->Q, &kf->P);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f103 0118 	add.w	r1, r3, #24
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	3328      	adds	r3, #40	@ 0x28
 80024b4:	461a      	mov	r2, r3
 80024b6:	f00c fb0d 	bl	800ead4 <arm_mat_add_f32>
}
 80024ba:	bf00      	nop
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <Kalman_Update>:

void Kalman_Update(KalmanFilter *kf, float32_t *measurement) {
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b088      	sub	sp, #32
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
 80024ca:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 80024cc:	2300      	movs	r3, #0
 80024ce:	61fb      	str	r3, [r7, #28]
 80024d0:	e00e      	b.n	80024f0 <Kalman_Update+0x2e>
        kf->z_data[i] = measurement[i];
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	4413      	add	r3, r2
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	6879      	ldr	r1, [r7, #4]
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	3394      	adds	r3, #148	@ 0x94
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	440b      	add	r3, r1
 80024e6:	3304      	adds	r3, #4
 80024e8:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	3301      	adds	r3, #1
 80024ee:	61fb      	str	r3, [r7, #28]
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	2b03      	cmp	r3, #3
 80024f4:	dded      	ble.n	80024d2 <Kalman_Update+0x10>
    }

    // K = P * H' * (H * P * H' + R)^-1
    arm_mat_trans_f32(&kf->H, &kf->temp2);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f103 0210 	add.w	r2, r3, #16
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3360      	adds	r3, #96	@ 0x60
 8002500:	4619      	mov	r1, r3
 8002502:	4610      	mov	r0, r2
 8002504:	f00c ff65 	bl	800f3d2 <arm_mat_trans_f32>
    arm_mat_mult_f32(&kf->P, &kf->temp2, &kf->temp1);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3358      	adds	r3, #88	@ 0x58
 8002518:	461a      	mov	r2, r3
 800251a:	f00c fea5 	bl	800f268 <arm_mat_mult_f32>
    arm_mat_mult_f32(&kf->H, &kf->temp1, &kf->temp3);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f103 0010 	add.w	r0, r3, #16
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	3368      	adds	r3, #104	@ 0x68
 800252e:	461a      	mov	r2, r3
 8002530:	f00c fe9a 	bl	800f268 <arm_mat_mult_f32>
    arm_mat_add_f32(&kf->temp3, &kf->R, &kf->temp3);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f103 0120 	add.w	r1, r3, #32
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	3368      	adds	r3, #104	@ 0x68
 8002544:	461a      	mov	r2, r3
 8002546:	f00c fac5 	bl	800ead4 <arm_mat_add_f32>
    arm_mat_inverse_f32(&kf->temp3, &kf->temp3);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3368      	adds	r3, #104	@ 0x68
 8002554:	4619      	mov	r1, r3
 8002556:	4610      	mov	r0, r2
 8002558:	f00c fb0f 	bl	800eb7a <arm_mat_inverse_f32>
    arm_mat_mult_f32(&kf->temp1, &kf->temp3, &kf->K);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3330      	adds	r3, #48	@ 0x30
 800256c:	461a      	mov	r2, r3
 800256e:	f00c fe7b 	bl	800f268 <arm_mat_mult_f32>

    // x = x + K * (z - H * x)
    arm_mat_mult_f32(&kf->H, &kf->x, &kf->u);         // reuse u for Hx
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f103 0010 	add.w	r0, r3, #16
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	3348      	adds	r3, #72	@ 0x48
 8002582:	461a      	mov	r2, r3
 8002584:	f00c fe70 	bl	800f268 <arm_mat_mult_f32>
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 8002588:	2300      	movs	r3, #0
 800258a:	61bb      	str	r3, [r7, #24]
 800258c:	e01c      	b.n	80025c8 <Kalman_Update+0x106>
        kf->u_data[i] = kf->z_data[i] - kf->u_data[i]; // z - Hx
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	3394      	adds	r3, #148	@ 0x94
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	4413      	add	r3, r2
 8002598:	3304      	adds	r3, #4
 800259a:	ed93 7a00 	vldr	s14, [r3]
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	3390      	adds	r3, #144	@ 0x90
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	4413      	add	r3, r2
 80025a8:	3304      	adds	r3, #4
 80025aa:	edd3 7a00 	vldr	s15, [r3]
 80025ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	3390      	adds	r3, #144	@ 0x90
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	4413      	add	r3, r2
 80025bc:	3304      	adds	r3, #4
 80025be:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	3301      	adds	r3, #1
 80025c6:	61bb      	str	r3, [r7, #24]
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	2b03      	cmp	r3, #3
 80025cc:	dddf      	ble.n	800258e <Kalman_Update+0xcc>
    }
    arm_mat_mult_f32(&kf->K, &kf->u, &kf->u);         // reuse u for K*(z-Hx)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	3348      	adds	r3, #72	@ 0x48
 80025de:	461a      	mov	r2, r3
 80025e0:	f00c fe42 	bl	800f268 <arm_mat_mult_f32>
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 80025e4:	2300      	movs	r3, #0
 80025e6:	617b      	str	r3, [r7, #20]
 80025e8:	e01c      	b.n	8002624 <Kalman_Update+0x162>
        kf->x_data[i] += kf->u_data[i];
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	338c      	adds	r3, #140	@ 0x8c
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	4413      	add	r3, r2
 80025f4:	3304      	adds	r3, #4
 80025f6:	ed93 7a00 	vldr	s14, [r3]
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	3390      	adds	r3, #144	@ 0x90
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	4413      	add	r3, r2
 8002604:	3304      	adds	r3, #4
 8002606:	edd3 7a00 	vldr	s15, [r3]
 800260a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	338c      	adds	r3, #140	@ 0x8c
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	4413      	add	r3, r2
 8002618:	3304      	adds	r3, #4
 800261a:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	3301      	adds	r3, #1
 8002622:	617b      	str	r3, [r7, #20]
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	2b03      	cmp	r3, #3
 8002628:	dddf      	ble.n	80025ea <Kalman_Update+0x128>
    }

    // P = (I - K * H) * P
    for (int i = 0; i < KALMAN_STATE_DIM * KALMAN_STATE_DIM; i++) {
 800262a:	2300      	movs	r3, #0
 800262c:	613b      	str	r3, [r7, #16]
 800262e:	e00b      	b.n	8002648 <Kalman_Update+0x186>
        kf->temp1_data[i] = 0.0f;
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	3398      	adds	r3, #152	@ 0x98
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	4413      	add	r3, r2
 800263a:	3304      	adds	r3, #4
 800263c:	f04f 0200 	mov.w	r2, #0
 8002640:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KALMAN_STATE_DIM * KALMAN_STATE_DIM; i++) {
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	3301      	adds	r3, #1
 8002646:	613b      	str	r3, [r7, #16]
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	2b0f      	cmp	r3, #15
 800264c:	ddf0      	ble.n	8002630 <Kalman_Update+0x16e>
    }
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 800264e:	2300      	movs	r3, #0
 8002650:	60fb      	str	r3, [r7, #12]
 8002652:	e00e      	b.n	8002672 <Kalman_Update+0x1b0>
        kf->temp1_data[i * KALMAN_STATE_DIM + i] = 1.0f;
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	4613      	mov	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4413      	add	r3, r2
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	3398      	adds	r3, #152	@ 0x98
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	4413      	add	r3, r2
 8002664:	3304      	adds	r3, #4
 8002666:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800266a:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	3301      	adds	r3, #1
 8002670:	60fb      	str	r3, [r7, #12]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2b03      	cmp	r3, #3
 8002676:	dded      	ble.n	8002654 <Kalman_Update+0x192>
    }
    arm_mat_mult_f32(&kf->K, &kf->H, &kf->temp2);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f103 0110 	add.w	r1, r3, #16
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3360      	adds	r3, #96	@ 0x60
 8002688:	461a      	mov	r2, r3
 800268a:	f00c fded 	bl	800f268 <arm_mat_mult_f32>
    arm_mat_sub_f32(&kf->temp1, &kf->temp2, &kf->temp1);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	3358      	adds	r3, #88	@ 0x58
 800269e:	461a      	mov	r2, r3
 80026a0:	f00c fe5c 	bl	800f35c <arm_mat_sub_f32>
    arm_mat_mult_f32(&kf->temp1, &kf->P, &kf->P);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	3328      	adds	r3, #40	@ 0x28
 80026b4:	461a      	mov	r2, r3
 80026b6:	f00c fdd7 	bl	800f268 <arm_mat_mult_f32>
}
 80026ba:	bf00      	nop
 80026bc:	3720      	adds	r7, #32
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
	...

080026c4 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 80026cc:	4b04      	ldr	r3, [pc, #16]	@ (80026e0 <modbus_1t5_Timeout+0x1c>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2201      	movs	r2, #1
 80026d2:	751a      	strb	r2, [r3, #20]
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	200002e4 	.word	0x200002e4

080026e4 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 80026ec:	4b04      	ldr	r3, [pc, #16]	@ (8002700 <modbus_3t5_Timeout+0x1c>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2201      	movs	r2, #1
 80026f2:	755a      	strb	r2, [r3, #21]
}
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	200002e4 	.word	0x200002e4

08002704 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 800270e:	4b15      	ldr	r3, [pc, #84]	@ (8002764 <modbus_UART_Recived+0x60>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2201      	movs	r2, #1
 8002714:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 8002716:	4b13      	ldr	r3, [pc, #76]	@ (8002764 <modbus_UART_Recived+0x60>)
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	@ 0x3a2
 800271e:	1c59      	adds	r1, r3, #1
 8002720:	b289      	uxth	r1, r1
 8002722:	f8a2 13a2 	strh.w	r1, [r2, #930]	@ 0x3a2
 8002726:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800272a:	d210      	bcs.n	800274e <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 800272c:	4b0d      	ldr	r3, [pc, #52]	@ (8002764 <modbus_UART_Recived+0x60>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68d8      	ldr	r0, [r3, #12]
 8002732:	4b0c      	ldr	r3, [pc, #48]	@ (8002764 <modbus_UART_Recived+0x60>)
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	4b0b      	ldr	r3, [pc, #44]	@ (8002764 <modbus_UART_Recived+0x60>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800273e:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8002742:	4413      	add	r3, r2
 8002744:	3302      	adds	r3, #2
 8002746:	2201      	movs	r2, #1
 8002748:	4619      	mov	r1, r3
 800274a:	f009 fe51 	bl	800c3f0 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 800274e:	4b05      	ldr	r3, [pc, #20]	@ (8002764 <modbus_UART_Recived+0x60>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2200      	movs	r2, #0
 8002758:	625a      	str	r2, [r3, #36]	@ 0x24

}
 800275a:	bf00      	nop
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	200002e4 	.word	0x200002e4

08002768 <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8002772:	4a24      	ldr	r2, [pc, #144]	@ (8002804 <Modbus_init+0x9c>)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8002778:	4b22      	ldr	r3, [pc, #136]	@ (8002804 <Modbus_init+0x9c>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 8002780:	4b20      	ldr	r3, [pc, #128]	@ (8002804 <Modbus_init+0x9c>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	4a20      	ldr	r2, [pc, #128]	@ (8002808 <Modbus_init+0xa0>)
 8002788:	2114      	movs	r1, #20
 800278a:	4618      	mov	r0, r3
 800278c:	f008 fd26 	bl	800b1dc <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8002790:	4b1c      	ldr	r3, [pc, #112]	@ (8002804 <Modbus_init+0x9c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	4a1d      	ldr	r2, [pc, #116]	@ (800280c <Modbus_init+0xa4>)
 8002798:	210e      	movs	r1, #14
 800279a:	4618      	mov	r0, r3
 800279c:	f008 fd1e 	bl	800b1dc <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 80027a0:	4b18      	ldr	r3, [pc, #96]	@ (8002804 <Modbus_init+0x9c>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	4a1a      	ldr	r2, [pc, #104]	@ (8002810 <Modbus_init+0xa8>)
 80027a8:	2103      	movs	r1, #3
 80027aa:	4618      	mov	r0, r3
 80027ac:	f009 fd66 	bl	800c27c <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80027b0:	4b14      	ldr	r3, [pc, #80]	@ (8002804 <Modbus_init+0x9c>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68d8      	ldr	r0, [r3, #12]
 80027b6:	4b13      	ldr	r3, [pc, #76]	@ (8002804 <Modbus_init+0x9c>)
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	4b12      	ldr	r3, [pc, #72]	@ (8002804 <Modbus_init+0x9c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80027c2:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80027c6:	4413      	add	r3, r2
 80027c8:	3302      	adds	r3, #2
 80027ca:	2201      	movs	r2, #1
 80027cc:	4619      	mov	r1, r3
 80027ce:	f009 fe0f 	bl	800c3f0 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 80027d2:	4b0c      	ldr	r3, [pc, #48]	@ (8002804 <Modbus_init+0x9c>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d10c      	bne.n	80027fc <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 80027e2:	4b08      	ldr	r3, [pc, #32]	@ (8002804 <Modbus_init+0x9c>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f007 fbe1 	bl	8009fb0 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 80027ee:	4b05      	ldr	r3, [pc, #20]	@ (8002804 <Modbus_init+0x9c>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	2100      	movs	r1, #0
 80027f6:	4618      	mov	r0, r3
 80027f8:	f007 fea8 	bl	800a54c <HAL_TIM_OnePulse_Start_IT>
    	}

}
 80027fc:	bf00      	nop
 80027fe:	3708      	adds	r7, #8
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	200002e4 	.word	0x200002e4
 8002808:	080026c5 	.word	0x080026c5
 800280c:	080026e5 	.word	0x080026e5
 8002810:	08002705 	.word	0x08002705

08002814 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	460b      	mov	r3, r1
 800281e:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8002820:	23ff      	movs	r3, #255	@ 0xff
 8002822:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8002824:	23ff      	movs	r3, #255	@ 0xff
 8002826:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8002828:	e013      	b.n	8002852 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	1c5a      	adds	r2, r3, #1
 800282e:	607a      	str	r2, [r7, #4]
 8002830:	781a      	ldrb	r2, [r3, #0]
 8002832:	7bbb      	ldrb	r3, [r7, #14]
 8002834:	4053      	eors	r3, r2
 8002836:	b2db      	uxtb	r3, r3
 8002838:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800283a:	4a10      	ldr	r2, [pc, #64]	@ (800287c <CRC16+0x68>)
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	4413      	add	r3, r2
 8002840:	781a      	ldrb	r2, [r3, #0]
 8002842:	7bfb      	ldrb	r3, [r7, #15]
 8002844:	4053      	eors	r3, r2
 8002846:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8002848:	4a0d      	ldr	r2, [pc, #52]	@ (8002880 <CRC16+0x6c>)
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	4413      	add	r3, r2
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8002852:	883b      	ldrh	r3, [r7, #0]
 8002854:	1e5a      	subs	r2, r3, #1
 8002856:	803a      	strh	r2, [r7, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1e6      	bne.n	800282a <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 800285c:	7bfb      	ldrb	r3, [r7, #15]
 800285e:	b21b      	sxth	r3, r3
 8002860:	021b      	lsls	r3, r3, #8
 8002862:	b21a      	sxth	r2, r3
 8002864:	7bbb      	ldrb	r3, [r7, #14]
 8002866:	b21b      	sxth	r3, r3
 8002868:	4313      	orrs	r3, r2
 800286a:	b21b      	sxth	r3, r3
 800286c:	b29b      	uxth	r3, r3
}
 800286e:	4618      	mov	r0, r3
 8002870:	3714      	adds	r7, #20
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	20000108 	.word	0x20000108
 8002880:	20000008 	.word	0x20000008

08002884 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 800288a:	4b80      	ldr	r3, [pc, #512]	@ (8002a8c <Modbus_Protocal_Worker+0x208>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	7e1b      	ldrb	r3, [r3, #24]
 8002890:	3b01      	subs	r3, #1
 8002892:	2b03      	cmp	r3, #3
 8002894:	d80a      	bhi.n	80028ac <Modbus_Protocal_Worker+0x28>
 8002896:	a201      	add	r2, pc, #4	@ (adr r2, 800289c <Modbus_Protocal_Worker+0x18>)
 8002898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800289c:	080028b7 	.word	0x080028b7
 80028a0:	08002a55 	.word	0x08002a55
 80028a4:	08002941 	.word	0x08002941
 80028a8:	08002967 	.word	0x08002967
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80028ac:	4b77      	ldr	r3, [pc, #476]	@ (8002a8c <Modbus_Protocal_Worker+0x208>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2201      	movs	r2, #1
 80028b2:	761a      	strb	r2, [r3, #24]
		break;
 80028b4:	e0e6      	b.n	8002a84 <Modbus_Protocal_Worker+0x200>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80028b6:	4b75      	ldr	r3, [pc, #468]	@ (8002a8c <Modbus_Protocal_Worker+0x208>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d002      	beq.n	80028c8 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 80028c2:	f000 f9d5 	bl	8002c70 <Modbus_Emission>
 80028c6:	e01c      	b.n	8002902 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 80028c8:	4b70      	ldr	r3, [pc, #448]	@ (8002a8c <Modbus_Protocal_Worker+0x208>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	7d9b      	ldrb	r3, [r3, #22]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d017      	beq.n	8002902 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 80028d2:	4b6e      	ldr	r3, [pc, #440]	@ (8002a8c <Modbus_Protocal_Worker+0x208>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2200      	movs	r2, #0
 80028d8:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 80028da:	4b6c      	ldr	r3, [pc, #432]	@ (8002a8c <Modbus_Protocal_Worker+0x208>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2200      	movs	r2, #0
 80028e0:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 80028e2:	4b6a      	ldr	r3, [pc, #424]	@ (8002a8c <Modbus_Protocal_Worker+0x208>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	4b67      	ldr	r3, [pc, #412]	@ (8002a8c <Modbus_Protocal_Worker+0x208>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f042 0201 	orr.w	r2, r2, #1
 80028f8:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 80028fa:	4b64      	ldr	r3, [pc, #400]	@ (8002a8c <Modbus_Protocal_Worker+0x208>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2203      	movs	r2, #3
 8002900:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8002902:	4b62      	ldr	r3, [pc, #392]	@ (8002a8c <Modbus_Protocal_Worker+0x208>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800290c:	2b20      	cmp	r3, #32
 800290e:	f040 80b2 	bne.w	8002a76 <Modbus_Protocal_Worker+0x1f2>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8002912:	4b5e      	ldr	r3, [pc, #376]	@ (8002a8c <Modbus_Protocal_Worker+0x208>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2200      	movs	r2, #0
 8002918:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 800291c:	4b5b      	ldr	r3, [pc, #364]	@ (8002a8c <Modbus_Protocal_Worker+0x208>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68d8      	ldr	r0, [r3, #12]
 8002922:	4b5a      	ldr	r3, [pc, #360]	@ (8002a8c <Modbus_Protocal_Worker+0x208>)
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	4b59      	ldr	r3, [pc, #356]	@ (8002a8c <Modbus_Protocal_Worker+0x208>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800292e:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8002932:	4413      	add	r3, r2
 8002934:	3302      	adds	r3, #2
 8002936:	2201      	movs	r2, #1
 8002938:	4619      	mov	r1, r3
 800293a:	f009 fd59 	bl	800c3f0 <HAL_UART_Receive_IT>
		}
		break;
 800293e:	e09a      	b.n	8002a76 <Modbus_Protocal_Worker+0x1f2>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8002940:	4b52      	ldr	r3, [pc, #328]	@ (8002a8c <Modbus_Protocal_Worker+0x208>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	7d1b      	ldrb	r3, [r3, #20]
 8002946:	2b00      	cmp	r3, #0
 8002948:	f000 8097 	beq.w	8002a7a <Modbus_Protocal_Worker+0x1f6>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 800294c:	4b4f      	ldr	r3, [pc, #316]	@ (8002a8c <Modbus_Protocal_Worker+0x208>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2200      	movs	r2, #0
 8002952:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8002954:	4b4d      	ldr	r3, [pc, #308]	@ (8002a8c <Modbus_Protocal_Worker+0x208>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	22fe      	movs	r2, #254	@ 0xfe
 800295a:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 800295c:	4b4b      	ldr	r3, [pc, #300]	@ (8002a8c <Modbus_Protocal_Worker+0x208>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2204      	movs	r2, #4
 8002962:	761a      	strb	r2, [r3, #24]
		}
		break;
 8002964:	e089      	b.n	8002a7a <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 8002966:	4b49      	ldr	r3, [pc, #292]	@ (8002a8c <Modbus_Protocal_Worker+0x208>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	7d9b      	ldrb	r3, [r3, #22]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d009      	beq.n	8002984 <Modbus_Protocal_Worker+0x100>
		{

			if(!hModbus->RecvStatus)
 8002970:	4b46      	ldr	r3, [pc, #280]	@ (8002a8c <Modbus_Protocal_Worker+0x208>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d103      	bne.n	8002984 <Modbus_Protocal_Worker+0x100>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800297c:	4b43      	ldr	r3, [pc, #268]	@ (8002a8c <Modbus_Protocal_Worker+0x208>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	22ff      	movs	r2, #255	@ 0xff
 8002982:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8002984:	4b41      	ldr	r3, [pc, #260]	@ (8002a8c <Modbus_Protocal_Worker+0x208>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f993 3017 	ldrsb.w	r3, [r3, #23]
 800298c:	f113 0f02 	cmn.w	r3, #2
 8002990:	d150      	bne.n	8002a34 <Modbus_Protocal_Worker+0x1b0>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8002992:	4b3e      	ldr	r3, [pc, #248]	@ (8002a8c <Modbus_Protocal_Worker+0x208>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2200      	movs	r2, #0
 8002998:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 800299a:	4b3c      	ldr	r3, [pc, #240]	@ (8002a8c <Modbus_Protocal_Worker+0x208>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f203 2272 	addw	r2, r3, #626	@ 0x272
 80029a2:	4b3a      	ldr	r3, [pc, #232]	@ (8002a8c <Modbus_Protocal_Worker+0x208>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80029aa:	3b02      	subs	r3, #2
 80029ac:	4619      	mov	r1, r3
 80029ae:	4610      	mov	r0, r2
 80029b0:	f7ff ff30 	bl	8002814 <CRC16>
 80029b4:	4603      	mov	r3, r0
 80029b6:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80029b8:	793a      	ldrb	r2, [r7, #4]
 80029ba:	4b34      	ldr	r3, [pc, #208]	@ (8002a8c <Modbus_Protocal_Worker+0x208>)
 80029bc:	6819      	ldr	r1, [r3, #0]
 80029be:	4b33      	ldr	r3, [pc, #204]	@ (8002a8c <Modbus_Protocal_Worker+0x208>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80029c6:	3b02      	subs	r3, #2
 80029c8:	440b      	add	r3, r1
 80029ca:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d10c      	bne.n	80029ec <Modbus_Protocal_Worker+0x168>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80029d2:	797a      	ldrb	r2, [r7, #5]
 80029d4:	4b2d      	ldr	r3, [pc, #180]	@ (8002a8c <Modbus_Protocal_Worker+0x208>)
 80029d6:	6819      	ldr	r1, [r3, #0]
 80029d8:	4b2c      	ldr	r3, [pc, #176]	@ (8002a8c <Modbus_Protocal_Worker+0x208>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80029e0:	3b01      	subs	r3, #1
 80029e2:	440b      	add	r3, r1
 80029e4:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d004      	beq.n	80029f6 <Modbus_Protocal_Worker+0x172>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80029ec:	4b27      	ldr	r3, [pc, #156]	@ (8002a8c <Modbus_Protocal_Worker+0x208>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	22ff      	movs	r2, #255	@ 0xff
 80029f2:	75da      	strb	r2, [r3, #23]
				break;
 80029f4:	e046      	b.n	8002a84 <Modbus_Protocal_Worker+0x200>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 80029f6:	4b25      	ldr	r3, [pc, #148]	@ (8002a8c <Modbus_Protocal_Worker+0x208>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 80029fe:	4b23      	ldr	r3, [pc, #140]	@ (8002a8c <Modbus_Protocal_Worker+0x208>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d113      	bne.n	8002a30 <Modbus_Protocal_Worker+0x1ac>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8002a08:	4b20      	ldr	r3, [pc, #128]	@ (8002a8c <Modbus_Protocal_Worker+0x208>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8002a10:	4b1e      	ldr	r3, [pc, #120]	@ (8002a8c <Modbus_Protocal_Worker+0x208>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 8002a18:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8002a1a:	4b1c      	ldr	r3, [pc, #112]	@ (8002a8c <Modbus_Protocal_Worker+0x208>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8002a22:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8002a24:	461a      	mov	r2, r3
 8002a26:	f00c fd47 	bl	800f4b8 <memcpy>

			//execute command
			Modbus_frame_response();
 8002a2a:	f000 f909 	bl	8002c40 <Modbus_frame_response>
 8002a2e:	e001      	b.n	8002a34 <Modbus_Protocal_Worker+0x1b0>
				break;
 8002a30:	bf00      	nop
					}
		break;


	}
}
 8002a32:	e027      	b.n	8002a84 <Modbus_Protocal_Worker+0x200>
		if(hModbus->Flag_T35TimeOut)
 8002a34:	4b15      	ldr	r3, [pc, #84]	@ (8002a8c <Modbus_Protocal_Worker+0x208>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	7d5b      	ldrb	r3, [r3, #21]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d01f      	beq.n	8002a7e <Modbus_Protocal_Worker+0x1fa>
			hModbus->Mstatus = Modbus_state_Idle;
 8002a3e:	4b13      	ldr	r3, [pc, #76]	@ (8002a8c <Modbus_Protocal_Worker+0x208>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2201      	movs	r2, #1
 8002a44:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8002a46:	4b11      	ldr	r3, [pc, #68]	@ (8002a8c <Modbus_Protocal_Worker+0x208>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f009 fd9b 	bl	800c588 <HAL_UART_AbortReceive>
		break;
 8002a52:	e014      	b.n	8002a7e <Modbus_Protocal_Worker+0x1fa>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8002a54:	4b0d      	ldr	r3, [pc, #52]	@ (8002a8c <Modbus_Protocal_Worker+0x208>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a5e:	2b20      	cmp	r3, #32
 8002a60:	d10f      	bne.n	8002a82 <Modbus_Protocal_Worker+0x1fe>
			hModbus->TxCount=0;
 8002a62:	4b0a      	ldr	r3, [pc, #40]	@ (8002a8c <Modbus_Protocal_Worker+0x208>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 8002a6c:	4b07      	ldr	r3, [pc, #28]	@ (8002a8c <Modbus_Protocal_Worker+0x208>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2201      	movs	r2, #1
 8002a72:	761a      	strb	r2, [r3, #24]
		break;
 8002a74:	e005      	b.n	8002a82 <Modbus_Protocal_Worker+0x1fe>
		break;
 8002a76:	bf00      	nop
 8002a78:	e004      	b.n	8002a84 <Modbus_Protocal_Worker+0x200>
		break;
 8002a7a:	bf00      	nop
 8002a7c:	e002      	b.n	8002a84 <Modbus_Protocal_Worker+0x200>
		break;
 8002a7e:	bf00      	nop
 8002a80:	e000      	b.n	8002a84 <Modbus_Protocal_Worker+0x200>
		break;
 8002a82:	bf00      	nop
}
 8002a84:	bf00      	nop
 8002a86:	3708      	adds	r7, #8
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	200002e4 	.word	0x200002e4

08002a90 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8002a96:	4b1d      	ldr	r3, [pc, #116]	@ (8002b0c <modbusWrite1Register+0x7c>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	7e9b      	ldrb	r3, [r3, #26]
 8002a9c:	021b      	lsls	r3, r3, #8
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	4a1a      	ldr	r2, [pc, #104]	@ (8002b0c <modbusWrite1Register+0x7c>)
 8002aa2:	6812      	ldr	r2, [r2, #0]
 8002aa4:	7ed2      	ldrb	r2, [r2, #27]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 8002aaa:	88fa      	ldrh	r2, [r7, #6]
 8002aac:	4b17      	ldr	r3, [pc, #92]	@ (8002b0c <modbusWrite1Register+0x7c>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d903      	bls.n	8002abe <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8002ab6:	2002      	movs	r0, #2
 8002ab8:	f000 f8a0 	bl	8002bfc <ModbusErrorReply>
			 return;
 8002abc:	e023      	b.n	8002b06 <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8002abe:	4b13      	ldr	r3, [pc, #76]	@ (8002b0c <modbusWrite1Register+0x7c>)
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	4b12      	ldr	r3, [pc, #72]	@ (8002b0c <modbusWrite1Register+0x7c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	6859      	ldr	r1, [r3, #4]
 8002ac8:	88fb      	ldrh	r3, [r7, #6]
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	440b      	add	r3, r1
 8002ace:	7f12      	ldrb	r2, [r2, #28]
 8002ad0:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8002ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8002b0c <modbusWrite1Register+0x7c>)
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8002b0c <modbusWrite1Register+0x7c>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	6859      	ldr	r1, [r3, #4]
 8002adc:	88fb      	ldrh	r3, [r7, #6]
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	440b      	add	r3, r1
 8002ae2:	7f52      	ldrb	r2, [r2, #29]
 8002ae4:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8002ae6:	4b09      	ldr	r3, [pc, #36]	@ (8002b0c <modbusWrite1Register+0x7c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f203 1045 	addw	r0, r3, #325	@ 0x145
			hModbus->Rxframe,
 8002aee:	4b07      	ldr	r3, [pc, #28]	@ (8002b0c <modbusWrite1Register+0x7c>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 8002af4:	2208      	movs	r2, #8
 8002af6:	4619      	mov	r1, r3
 8002af8:	f00c fcde 	bl	800f4b8 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8002afc:	4b03      	ldr	r3, [pc, #12]	@ (8002b0c <modbusWrite1Register+0x7c>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2205      	movs	r2, #5
 8002b02:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271



}
 8002b06:	3708      	adds	r7, #8
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	200002e4 	.word	0x200002e4

08002b10 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8002b10:	b590      	push	{r4, r7, lr}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8002b16:	4b38      	ldr	r3, [pc, #224]	@ (8002bf8 <modbusRead1Register+0xe8>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	7f1b      	ldrb	r3, [r3, #28]
 8002b1c:	021b      	lsls	r3, r3, #8
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	4a35      	ldr	r2, [pc, #212]	@ (8002bf8 <modbusRead1Register+0xe8>)
 8002b22:	6812      	ldr	r2, [r2, #0]
 8002b24:	7f52      	ldrb	r2, [r2, #29]
 8002b26:	4413      	add	r3, r2
 8002b28:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8002b2a:	4b33      	ldr	r3, [pc, #204]	@ (8002bf8 <modbusRead1Register+0xe8>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	7e9b      	ldrb	r3, [r3, #26]
 8002b30:	021b      	lsls	r3, r3, #8
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	4a30      	ldr	r2, [pc, #192]	@ (8002bf8 <modbusRead1Register+0xe8>)
 8002b36:	6812      	ldr	r2, [r2, #0]
 8002b38:	7ed2      	ldrb	r2, [r2, #27]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8002b3e:	88fb      	ldrh	r3, [r7, #6]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d002      	beq.n	8002b4a <modbusRead1Register+0x3a>
 8002b44:	88fb      	ldrh	r3, [r7, #6]
 8002b46:	2b7d      	cmp	r3, #125	@ 0x7d
 8002b48:	d903      	bls.n	8002b52 <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8002b4a:	2003      	movs	r0, #3
 8002b4c:	f000 f856 	bl	8002bfc <ModbusErrorReply>
		 return;
 8002b50:	e04e      	b.n	8002bf0 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8002b52:	88ba      	ldrh	r2, [r7, #4]
 8002b54:	4b28      	ldr	r3, [pc, #160]	@ (8002bf8 <modbusRead1Register+0xe8>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d808      	bhi.n	8002b70 <modbusRead1Register+0x60>
 8002b5e:	88ba      	ldrh	r2, [r7, #4]
 8002b60:	88fb      	ldrh	r3, [r7, #6]
 8002b62:	4413      	add	r3, r2
 8002b64:	461a      	mov	r2, r3
 8002b66:	4b24      	ldr	r3, [pc, #144]	@ (8002bf8 <modbusRead1Register+0xe8>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d903      	bls.n	8002b78 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8002b70:	2002      	movs	r0, #2
 8002b72:	f000 f843 	bl	8002bfc <ModbusErrorReply>
		 return;
 8002b76:	e03b      	b.n	8002bf0 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8002b78:	4b1f      	ldr	r3, [pc, #124]	@ (8002bf8 <modbusRead1Register+0xe8>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2203      	movs	r2, #3
 8002b7e:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8002b82:	88fb      	ldrh	r3, [r7, #6]
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	4b1c      	ldr	r3, [pc, #112]	@ (8002bf8 <modbusRead1Register+0xe8>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	0052      	lsls	r2, r2, #1
 8002b8c:	b2d2      	uxtb	r2, r2
 8002b8e:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8002b92:	2400      	movs	r4, #0
 8002b94:	e020      	b.n	8002bd8 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8002b96:	4b18      	ldr	r3, [pc, #96]	@ (8002bf8 <modbusRead1Register+0xe8>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	685a      	ldr	r2, [r3, #4]
 8002b9c:	88bb      	ldrh	r3, [r7, #4]
 8002b9e:	4423      	add	r3, r4
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	18d1      	adds	r1, r2, r3
 8002ba4:	4b14      	ldr	r3, [pc, #80]	@ (8002bf8 <modbusRead1Register+0xe8>)
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	1c63      	adds	r3, r4, #1
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	7849      	ldrb	r1, [r1, #1]
 8002bae:	4413      	add	r3, r2
 8002bb0:	460a      	mov	r2, r1
 8002bb2:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8002bb6:	4b10      	ldr	r3, [pc, #64]	@ (8002bf8 <modbusRead1Register+0xe8>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	685a      	ldr	r2, [r3, #4]
 8002bbc:	88bb      	ldrh	r3, [r7, #4]
 8002bbe:	4423      	add	r3, r4
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	18d1      	adds	r1, r2, r3
 8002bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8002bf8 <modbusRead1Register+0xe8>)
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	0063      	lsls	r3, r4, #1
 8002bca:	3303      	adds	r3, #3
 8002bcc:	7809      	ldrb	r1, [r1, #0]
 8002bce:	4413      	add	r3, r2
 8002bd0:	460a      	mov	r2, r1
 8002bd2:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	for(i=0; i<numberOfDataToRead;i++)
 8002bd6:	3401      	adds	r4, #1
 8002bd8:	88fb      	ldrh	r3, [r7, #6]
 8002bda:	429c      	cmp	r4, r3
 8002bdc:	dbdb      	blt.n	8002b96 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8002bde:	88fb      	ldrh	r3, [r7, #6]
 8002be0:	3301      	adds	r3, #1
 8002be2:	b2da      	uxtb	r2, r3
 8002be4:	4b04      	ldr	r3, [pc, #16]	@ (8002bf8 <modbusRead1Register+0xe8>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	0052      	lsls	r2, r2, #1
 8002bea:	b2d2      	uxtb	r2, r2
 8002bec:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271

}
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd90      	pop	{r4, r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	200002e4 	.word	0x200002e4

08002bfc <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	4603      	mov	r3, r0
 8002c04:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8002c06:	4b0d      	ldr	r3, [pc, #52]	@ (8002c3c <ModbusErrorReply+0x40>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	7e5a      	ldrb	r2, [r3, #25]
 8002c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c3c <ModbusErrorReply+0x40>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002c14:	b2d2      	uxtb	r2, r2
 8002c16:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->Txframe[1] = Errorcode;
 8002c1a:	4b08      	ldr	r3, [pc, #32]	@ (8002c3c <ModbusErrorReply+0x40>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	79fa      	ldrb	r2, [r7, #7]
 8002c20:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
	hModbus->TxCount = 2;
 8002c24:	4b05      	ldr	r3, [pc, #20]	@ (8002c3c <ModbusErrorReply+0x40>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2202      	movs	r2, #2
 8002c2a:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271
}
 8002c2e:	bf00      	nop
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	200002e4 	.word	0x200002e4

08002c40 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8002c44:	4b09      	ldr	r3, [pc, #36]	@ (8002c6c <Modbus_frame_response+0x2c>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	7e5b      	ldrb	r3, [r3, #25]
 8002c4a:	2b03      	cmp	r3, #3
 8002c4c:	d004      	beq.n	8002c58 <Modbus_frame_response+0x18>
 8002c4e:	2b06      	cmp	r3, #6
 8002c50:	d105      	bne.n	8002c5e <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8002c52:	f7ff ff1d 	bl	8002a90 <modbusWrite1Register>
		break;
 8002c56:	e006      	b.n	8002c66 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8002c58:	f7ff ff5a 	bl	8002b10 <modbusRead1Register>
		break;
 8002c5c:	e003      	b.n	8002c66 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8002c5e:	2001      	movs	r0, #1
 8002c60:	f7ff ffcc 	bl	8002bfc <ModbusErrorReply>
		break;
 8002c64:	bf00      	nop

	}
}
 8002c66:	bf00      	nop
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	200002e4 	.word	0x200002e4

08002c70 <Modbus_Emission>:

void Modbus_Emission()
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8002c76:	4b3c      	ldr	r3, [pc, #240]	@ (8002d68 <Modbus_Emission+0xf8>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c80:	2b20      	cmp	r3, #32
 8002c82:	d15d      	bne.n	8002d40 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8002c84:	4b38      	ldr	r3, [pc, #224]	@ (8002d68 <Modbus_Emission+0xf8>)
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	4b37      	ldr	r3, [pc, #220]	@ (8002d68 <Modbus_Emission+0xf8>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	7812      	ldrb	r2, [r2, #0]
 8002c8e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8002c92:	4b35      	ldr	r3, [pc, #212]	@ (8002d68 <Modbus_Emission+0xf8>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 8002c9a:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8002c9c:	4b32      	ldr	r3, [pc, #200]	@ (8002d68 <Modbus_Emission+0xf8>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f203 1145 	addw	r1, r3, #325	@ 0x145
				hModbus->TxCount
 8002ca4:	4b30      	ldr	r3, [pc, #192]	@ (8002d68 <Modbus_Emission+0xf8>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
		memcpy
 8002cac:	461a      	mov	r2, r3
 8002cae:	f00c fc03 	bl	800f4b8 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8002cb2:	4b2d      	ldr	r3, [pc, #180]	@ (8002d68 <Modbus_Emission+0xf8>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
 8002cba:	461a      	mov	r2, r3
 8002cbc:	4b2a      	ldr	r3, [pc, #168]	@ (8002d68 <Modbus_Emission+0xf8>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	3203      	adds	r2, #3
 8002cc2:	b292      	uxth	r2, r2
 8002cc4:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8002cc8:	4b27      	ldr	r3, [pc, #156]	@ (8002d68 <Modbus_Emission+0xf8>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8002cd0:	4b25      	ldr	r3, [pc, #148]	@ (8002d68 <Modbus_Emission+0xf8>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8002cd8:	3b02      	subs	r3, #2
 8002cda:	4619      	mov	r1, r3
 8002cdc:	4610      	mov	r0, r2
 8002cde:	f7ff fd99 	bl	8002814 <CRC16>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8002ce6:	4b20      	ldr	r3, [pc, #128]	@ (8002d68 <Modbus_Emission+0xf8>)
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	4b1f      	ldr	r3, [pc, #124]	@ (8002d68 <Modbus_Emission+0xf8>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8002cf2:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8002cf4:	7939      	ldrb	r1, [r7, #4]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	460a      	mov	r2, r1
 8002cfa:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8002cfe:	4b1a      	ldr	r3, [pc, #104]	@ (8002d68 <Modbus_Emission+0xf8>)
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	4b19      	ldr	r3, [pc, #100]	@ (8002d68 <Modbus_Emission+0xf8>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8002d0a:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8002d0c:	7979      	ldrb	r1, [r7, #5]
 8002d0e:	4413      	add	r3, r2
 8002d10:	460a      	mov	r2, r1
 8002d12:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8002d16:	4b14      	ldr	r3, [pc, #80]	@ (8002d68 <Modbus_Emission+0xf8>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d20:	2b20      	cmp	r3, #32
 8002d22:	d10d      	bne.n	8002d40 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8002d24:	4b10      	ldr	r3, [pc, #64]	@ (8002d68 <Modbus_Emission+0xf8>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8002d2a:	4b0f      	ldr	r3, [pc, #60]	@ (8002d68 <Modbus_Emission+0xf8>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8002d32:	4b0d      	ldr	r3, [pc, #52]	@ (8002d68 <Modbus_Emission+0xf8>)
 8002d34:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8002d36:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	f009 fba4 	bl	800c488 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8002d40:	4b09      	ldr	r3, [pc, #36]	@ (8002d68 <Modbus_Emission+0xf8>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2200      	movs	r2, #0
 8002d46:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8002d48:	4b07      	ldr	r3, [pc, #28]	@ (8002d68 <Modbus_Emission+0xf8>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 8002d50:	4b05      	ldr	r3, [pc, #20]	@ (8002d68 <Modbus_Emission+0xf8>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2200      	movs	r2, #0
 8002d56:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 8002d58:	4b03      	ldr	r3, [pc, #12]	@ (8002d68 <Modbus_Emission+0xf8>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2202      	movs	r2, #2
 8002d5e:	761a      	strb	r2, [r3, #24]
}
 8002d60:	bf00      	nop
 8002d62:	3708      	adds	r7, #8
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	200002e4 	.word	0x200002e4

08002d6c <create_prismatic_motor>:

float v_pris_dis[2] = {0, 0};
float v_pris_ref[3] = {0, 0, 0};

PrismaticMotor create_prismatic_motor(double J, double B, double Eff, double Ke,
		double Kt, double R, double L) {
 8002d6c:	b4b0      	push	{r4, r5, r7}
 8002d6e:	b09f      	sub	sp, #124	@ 0x7c
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8002d74:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
 8002d78:	ed87 1b0a 	vstr	d1, [r7, #40]	@ 0x28
 8002d7c:	ed87 2b08 	vstr	d2, [r7, #32]
 8002d80:	ed87 3b06 	vstr	d3, [r7, #24]
 8002d84:	ed87 4b04 	vstr	d4, [r7, #16]
 8002d88:	ed87 5b02 	vstr	d5, [r7, #8]
 8002d8c:	ed87 6b00 	vstr	d6, [r7]
	PrismaticMotor motor = { J, B, Eff, Ke, Kt, R, L };
 8002d90:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002d94:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8002d98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002d9c:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 8002da0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002da4:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 8002da8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dac:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8002db0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002db4:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 8002db8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002dbc:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
 8002dc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002dc4:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
	return motor;
 8002dc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dca:	461d      	mov	r5, r3
 8002dcc:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8002dd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ddc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002de0:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8002de4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002de6:	377c      	adds	r7, #124	@ 0x7c
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bcb0      	pop	{r4, r5, r7}
 8002dec:	4770      	bx	lr

08002dee <create_motor>:
#include "revolute.h"

float v_rev_dis[2] = {0, 0};
float v_rev_ref[3] = {0, 0, 0};

RevoluteMotor create_motor(double J, double B, double Eff, double Ke, double Kt, double R, double L) {
 8002dee:	b4b0      	push	{r4, r5, r7}
 8002df0:	b09f      	sub	sp, #124	@ 0x7c
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8002df6:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
 8002dfa:	ed87 1b0a 	vstr	d1, [r7, #40]	@ 0x28
 8002dfe:	ed87 2b08 	vstr	d2, [r7, #32]
 8002e02:	ed87 3b06 	vstr	d3, [r7, #24]
 8002e06:	ed87 4b04 	vstr	d4, [r7, #16]
 8002e0a:	ed87 5b02 	vstr	d5, [r7, #8]
 8002e0e:	ed87 6b00 	vstr	d6, [r7]
    RevoluteMotor motor = { J, B, Eff, Ke, Kt, R, L };
 8002e12:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002e16:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8002e1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e1e:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 8002e22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e26:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 8002e2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e2e:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8002e32:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e36:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 8002e3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e3e:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
 8002e42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e46:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
    return motor;
 8002e4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e4c:	461d      	mov	r5, r3
 8002e4e:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8002e52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e5e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e62:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8002e66:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002e68:	377c      	adds	r7, #124	@ 0x7c
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bcb0      	pop	{r4, r5, r7}
 8002e6e:	4770      	bx	lr

08002e70 <InitTrajectorySegment>:
#include "Trajectory.h"
#include <math.h>

void InitTrajectorySegment(TrajectorySegment *seg, float start, float end, float v_max, float a_max, float t_start) {
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b08c      	sub	sp, #48	@ 0x30
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6178      	str	r0, [r7, #20]
 8002e78:	ed87 0a04 	vstr	s0, [r7, #16]
 8002e7c:	edc7 0a03 	vstr	s1, [r7, #12]
 8002e80:	ed87 1a02 	vstr	s2, [r7, #8]
 8002e84:	edc7 1a01 	vstr	s3, [r7, #4]
 8002e88:	ed87 2a00 	vstr	s4, [r7]
    float D = end - start;
 8002e8c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002e90:	edd7 7a04 	vldr	s15, [r7, #16]
 8002e94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e98:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float dir = (D >= 0) ? 1.0f : -1.0f;
 8002e9c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002ea0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ea8:	db02      	blt.n	8002eb0 <InitTrajectorySegment+0x40>
 8002eaa:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002eae:	e000      	b.n	8002eb2 <InitTrajectorySegment+0x42>
 8002eb0:	4b49      	ldr	r3, [pc, #292]	@ (8002fd8 <InitTrajectorySegment+0x168>)
 8002eb2:	627b      	str	r3, [r7, #36]	@ 0x24
    D = fabsf(D);
 8002eb4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002eb8:	eef0 7ae7 	vabs.f32	s15, s15
 8002ebc:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

    float t_accel = v_max / a_max;
 8002ec0:	edd7 6a02 	vldr	s13, [r7, #8]
 8002ec4:	ed97 7a01 	vldr	s14, [r7, #4]
 8002ec8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ecc:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float d_accel = 0.5f * a_max * t_accel * t_accel;
 8002ed0:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ed4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002ed8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002edc:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002ee0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ee4:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8002ee8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eec:	edc7 7a08 	vstr	s15, [r7, #32]

    if (2 * d_accel > D) {
 8002ef0:	edd7 7a08 	vldr	s15, [r7, #32]
 8002ef4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002ef8:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002efc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f04:	d524      	bpl.n	8002f50 <InitTrajectorySegment+0xe0>
        // Triangular profile
        t_accel = sqrtf(D / a_max);
 8002f06:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002f0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f0e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002f12:	eeb0 0a66 	vmov.f32	s0, s13
 8002f16:	f00c fba5 	bl	800f664 <sqrtf>
 8002f1a:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
        seg->t_const = 0;
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	f04f 0200 	mov.w	r2, #0
 8002f24:	615a      	str	r2, [r3, #20]
        seg->t_total = 2 * t_accel;
 8002f26:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002f2a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	edc3 7a07 	vstr	s15, [r3, #28]
        seg->v_max = a_max * t_accel * dir;
 8002f34:	ed97 7a01 	vldr	s14, [r7, #4]
 8002f38:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002f3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f40:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002f44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	edc3 7a02 	vstr	s15, [r3, #8]
 8002f4e:	e027      	b.n	8002fa0 <InitTrajectorySegment+0x130>
    } else {
        // Trapezoidal profile
        float d_const = D - 2 * d_accel;
 8002f50:	edd7 7a08 	vldr	s15, [r7, #32]
 8002f54:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002f58:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002f5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f60:	edc7 7a07 	vstr	s15, [r7, #28]
        seg->t_const = d_const / v_max;
 8002f64:	edd7 6a07 	vldr	s13, [r7, #28]
 8002f68:	ed97 7a02 	vldr	s14, [r7, #8]
 8002f6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	edc3 7a05 	vstr	s15, [r3, #20]
        seg->t_total = 2 * t_accel + seg->t_const;
 8002f76:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002f7a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	edd3 7a05 	vldr	s15, [r3, #20]
 8002f84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	edc3 7a07 	vstr	s15, [r3, #28]
        seg->v_max = v_max * dir;
 8002f8e:	ed97 7a02 	vldr	s14, [r7, #8]
 8002f92:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    seg->start_pos = start;
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	601a      	str	r2, [r3, #0]
    seg->end_pos = end;
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	605a      	str	r2, [r3, #4]
//    seg->v_max = v_max * dir;
    seg->a_max = a_max * dir;
 8002fac:	ed97 7a01 	vldr	s14, [r7, #4]
 8002fb0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002fb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	edc3 7a03 	vstr	s15, [r3, #12]
    seg->t_accel = t_accel;
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fc2:	611a      	str	r2, [r3, #16]
    seg->t_decel = t_accel;
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fc8:	619a      	str	r2, [r3, #24]
    seg->t_start = t_start;
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	621a      	str	r2, [r3, #32]
}
 8002fd0:	bf00      	nop
 8002fd2:	3730      	adds	r7, #48	@ 0x30
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	bf800000 	.word	0xbf800000

08002fdc <GetTrajectoryPosition>:

float GetTrajectoryPosition(const TrajectorySegment *seg, float t_global) {
 8002fdc:	b480      	push	{r7}
 8002fde:	b08f      	sub	sp, #60	@ 0x3c
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	ed87 0a00 	vstr	s0, [r7]
    float t = t_global - seg->t_start;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	edd3 7a08 	vldr	s15, [r3, #32]
 8002fee:	ed97 7a00 	vldr	s14, [r7]
 8002ff2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ff6:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    if (t < 0) return seg->start_pos;
 8002ffa:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002ffe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003006:	d503      	bpl.n	8003010 <GetTrajectoryPosition+0x34>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	edd3 7a00 	vldr	s15, [r3]
 800300e:	e0b4      	b.n	800317a <GetTrajectoryPosition+0x19e>
    if (t >= seg->t_total) return seg->end_pos;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	edd3 7a07 	vldr	s15, [r3, #28]
 8003016:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800301a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800301e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003022:	db03      	blt.n	800302c <GetTrajectoryPosition+0x50>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	edd3 7a01 	vldr	s15, [r3, #4]
 800302a:	e0a6      	b.n	800317a <GetTrajectoryPosition+0x19e>

    float a = seg->a_max;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	633b      	str	r3, [r7, #48]	@ 0x30
    float v = seg->v_max;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float p0 = seg->start_pos;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (t < seg->t_accel) {
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	edd3 7a04 	vldr	s15, [r3, #16]
 8003044:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003048:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800304c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003050:	d512      	bpl.n	8003078 <GetTrajectoryPosition+0x9c>
        return p0 + 0.5f * a * t * t;
 8003052:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003056:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800305a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800305e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003062:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003066:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800306a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800306e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003072:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003076:	e080      	b.n	800317a <GetTrajectoryPosition+0x19e>
    } else if (t < seg->t_accel + seg->t_const) {
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	ed93 7a04 	vldr	s14, [r3, #16]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	edd3 7a05 	vldr	s15, [r3, #20]
 8003084:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003088:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800308c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003094:	d525      	bpl.n	80030e2 <GetTrajectoryPosition+0x106>
        float t1 = seg->t_accel;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	613b      	str	r3, [r7, #16]
        float p1 = p0 + 0.5f * a * t1 * t1;
 800309c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80030a0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80030a4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030a8:	edd7 7a04 	vldr	s15, [r7, #16]
 80030ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80030b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030b8:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80030bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030c0:	edc7 7a03 	vstr	s15, [r7, #12]
        return p1 + v * (t - t1);
 80030c4:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80030c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80030cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030d0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80030d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80030dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030e0:	e04b      	b.n	800317a <GetTrajectoryPosition+0x19e>
    } else {
        float t1 = seg->t_accel;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	627b      	str	r3, [r7, #36]	@ 0x24
        float t2 = seg->t_const;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	695b      	ldr	r3, [r3, #20]
 80030ec:	623b      	str	r3, [r7, #32]
        float p1 = p0 + 0.5f * a * t1 * t1;
 80030ee:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80030f2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80030f6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030fa:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80030fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003102:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800310a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800310e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003112:	edc7 7a07 	vstr	s15, [r7, #28]
        float p2 = p1 + v * t2;
 8003116:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800311a:	edd7 7a08 	vldr	s15, [r7, #32]
 800311e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003122:	ed97 7a07 	vldr	s14, [r7, #28]
 8003126:	ee77 7a27 	vadd.f32	s15, s14, s15
 800312a:	edc7 7a06 	vstr	s15, [r7, #24]
        float td = t - t1 - t2;
 800312e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003132:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003136:	ee37 7a67 	vsub.f32	s14, s14, s15
 800313a:	edd7 7a08 	vldr	s15, [r7, #32]
 800313e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003142:	edc7 7a05 	vstr	s15, [r7, #20]
        return p2 + v * td - 0.5f * a * td * td;
 8003146:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800314a:	edd7 7a05 	vldr	s15, [r7, #20]
 800314e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003152:	edd7 7a06 	vldr	s15, [r7, #24]
 8003156:	ee37 7a27 	vadd.f32	s14, s14, s15
 800315a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800315e:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8003162:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003166:	edd7 7a05 	vldr	s15, [r7, #20]
 800316a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800316e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003172:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003176:	ee77 7a67 	vsub.f32	s15, s14, s15
    }
}
 800317a:	eeb0 0a67 	vmov.f32	s0, s15
 800317e:	373c      	adds	r7, #60	@ 0x3c
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <GetTrajectoryVelocity>:

float GetTrajectoryVelocity(const TrajectorySegment *seg, float t_global) {
 8003188:	b480      	push	{r7}
 800318a:	b087      	sub	sp, #28
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	ed87 0a00 	vstr	s0, [r7]
    float t = t_global - seg->t_start;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	edd3 7a08 	vldr	s15, [r3, #32]
 800319a:	ed97 7a00 	vldr	s14, [r7]
 800319e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031a2:	edc7 7a05 	vstr	s15, [r7, #20]
    if (t < 0) return 0;
 80031a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80031aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031b2:	d502      	bpl.n	80031ba <GetTrajectoryVelocity+0x32>
 80031b4:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 8003264 <GetTrajectoryVelocity+0xdc>
 80031b8:	e04d      	b.n	8003256 <GetTrajectoryVelocity+0xce>
    if (t >= seg->t_total) return 0;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	edd3 7a07 	vldr	s15, [r3, #28]
 80031c0:	ed97 7a05 	vldr	s14, [r7, #20]
 80031c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031cc:	db02      	blt.n	80031d4 <GetTrajectoryVelocity+0x4c>
 80031ce:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8003264 <GetTrajectoryVelocity+0xdc>
 80031d2:	e040      	b.n	8003256 <GetTrajectoryVelocity+0xce>

    float a = seg->a_max;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	613b      	str	r3, [r7, #16]
    float v = seg->v_max;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	60fb      	str	r3, [r7, #12]

    if (t < seg->t_accel) {
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	edd3 7a04 	vldr	s15, [r3, #16]
 80031e6:	ed97 7a05 	vldr	s14, [r7, #20]
 80031ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031f2:	d506      	bpl.n	8003202 <GetTrajectoryVelocity+0x7a>
        return a * t;
 80031f4:	ed97 7a04 	vldr	s14, [r7, #16]
 80031f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80031fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003200:	e029      	b.n	8003256 <GetTrajectoryVelocity+0xce>
    } else if (t < seg->t_accel + seg->t_const) {
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	ed93 7a04 	vldr	s14, [r3, #16]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	edd3 7a05 	vldr	s15, [r3, #20]
 800320e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003212:	ed97 7a05 	vldr	s14, [r7, #20]
 8003216:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800321a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800321e:	d502      	bpl.n	8003226 <GetTrajectoryVelocity+0x9e>
        return v;
 8003220:	edd7 7a03 	vldr	s15, [r7, #12]
 8003224:	e017      	b.n	8003256 <GetTrajectoryVelocity+0xce>
    } else {
        float td = t - seg->t_accel - seg->t_const;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	edd3 7a04 	vldr	s15, [r3, #16]
 800322c:	ed97 7a05 	vldr	s14, [r7, #20]
 8003230:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	edd3 7a05 	vldr	s15, [r3, #20]
 800323a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800323e:	edc7 7a02 	vstr	s15, [r7, #8]
        return v - a * td;
 8003242:	ed97 7a04 	vldr	s14, [r7, #16]
 8003246:	edd7 7a02 	vldr	s15, [r7, #8]
 800324a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800324e:	ed97 7a03 	vldr	s14, [r7, #12]
 8003252:	ee77 7a67 	vsub.f32	s15, s14, s15
    }
}
 8003256:	eeb0 0a67 	vmov.f32	s0, s15
 800325a:	371c      	adds	r7, #28
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr
 8003264:	00000000 	.word	0x00000000

08003268 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b08c      	sub	sp, #48	@ 0x30
 800326c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800326e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003272:	2200      	movs	r2, #0
 8003274:	601a      	str	r2, [r3, #0]
 8003276:	605a      	str	r2, [r3, #4]
 8003278:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800327a:	1d3b      	adds	r3, r7, #4
 800327c:	2220      	movs	r2, #32
 800327e:	2100      	movs	r1, #0
 8003280:	4618      	mov	r0, r3
 8003282:	f00c f8e7 	bl	800f454 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003286:	4b32      	ldr	r3, [pc, #200]	@ (8003350 <MX_ADC1_Init+0xe8>)
 8003288:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800328c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800328e:	4b30      	ldr	r3, [pc, #192]	@ (8003350 <MX_ADC1_Init+0xe8>)
 8003290:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003294:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003296:	4b2e      	ldr	r3, [pc, #184]	@ (8003350 <MX_ADC1_Init+0xe8>)
 8003298:	2200      	movs	r2, #0
 800329a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800329c:	4b2c      	ldr	r3, [pc, #176]	@ (8003350 <MX_ADC1_Init+0xe8>)
 800329e:	2200      	movs	r2, #0
 80032a0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80032a2:	4b2b      	ldr	r3, [pc, #172]	@ (8003350 <MX_ADC1_Init+0xe8>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80032a8:	4b29      	ldr	r3, [pc, #164]	@ (8003350 <MX_ADC1_Init+0xe8>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80032ae:	4b28      	ldr	r3, [pc, #160]	@ (8003350 <MX_ADC1_Init+0xe8>)
 80032b0:	2204      	movs	r2, #4
 80032b2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80032b4:	4b26      	ldr	r3, [pc, #152]	@ (8003350 <MX_ADC1_Init+0xe8>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80032ba:	4b25      	ldr	r3, [pc, #148]	@ (8003350 <MX_ADC1_Init+0xe8>)
 80032bc:	2200      	movs	r2, #0
 80032be:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80032c0:	4b23      	ldr	r3, [pc, #140]	@ (8003350 <MX_ADC1_Init+0xe8>)
 80032c2:	2201      	movs	r2, #1
 80032c4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80032c6:	4b22      	ldr	r3, [pc, #136]	@ (8003350 <MX_ADC1_Init+0xe8>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80032ce:	4b20      	ldr	r3, [pc, #128]	@ (8003350 <MX_ADC1_Init+0xe8>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80032d4:	4b1e      	ldr	r3, [pc, #120]	@ (8003350 <MX_ADC1_Init+0xe8>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80032da:	4b1d      	ldr	r3, [pc, #116]	@ (8003350 <MX_ADC1_Init+0xe8>)
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80032e2:	4b1b      	ldr	r3, [pc, #108]	@ (8003350 <MX_ADC1_Init+0xe8>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80032e8:	4b19      	ldr	r3, [pc, #100]	@ (8003350 <MX_ADC1_Init+0xe8>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80032f0:	4817      	ldr	r0, [pc, #92]	@ (8003350 <MX_ADC1_Init+0xe8>)
 80032f2:	f003 fa79 	bl	80067e8 <HAL_ADC_Init>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d001      	beq.n	8003300 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80032fc:	f002 f8da 	bl	80054b4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003300:	2300      	movs	r3, #0
 8003302:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003304:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003308:	4619      	mov	r1, r3
 800330a:	4811      	ldr	r0, [pc, #68]	@ (8003350 <MX_ADC1_Init+0xe8>)
 800330c:	f004 fa16 	bl	800773c <HAL_ADCEx_MultiModeConfigChannel>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8003316:	f002 f8cd 	bl	80054b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800331a:	4b0e      	ldr	r3, [pc, #56]	@ (8003354 <MX_ADC1_Init+0xec>)
 800331c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800331e:	2306      	movs	r3, #6
 8003320:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003322:	2300      	movs	r3, #0
 8003324:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003326:	237f      	movs	r3, #127	@ 0x7f
 8003328:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800332a:	2304      	movs	r3, #4
 800332c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800332e:	2300      	movs	r3, #0
 8003330:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003332:	1d3b      	adds	r3, r7, #4
 8003334:	4619      	mov	r1, r3
 8003336:	4806      	ldr	r0, [pc, #24]	@ (8003350 <MX_ADC1_Init+0xe8>)
 8003338:	f003 fd04 	bl	8006d44 <HAL_ADC_ConfigChannel>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8003342:	f002 f8b7 	bl	80054b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003346:	bf00      	nop
 8003348:	3730      	adds	r7, #48	@ 0x30
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	200002e8 	.word	0x200002e8
 8003354:	04300002 	.word	0x04300002

08003358 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b088      	sub	sp, #32
 800335c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800335e:	463b      	mov	r3, r7
 8003360:	2220      	movs	r2, #32
 8003362:	2100      	movs	r1, #0
 8003364:	4618      	mov	r0, r3
 8003366:	f00c f875 	bl	800f454 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800336a:	4b2b      	ldr	r3, [pc, #172]	@ (8003418 <MX_ADC2_Init+0xc0>)
 800336c:	4a2b      	ldr	r2, [pc, #172]	@ (800341c <MX_ADC2_Init+0xc4>)
 800336e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003370:	4b29      	ldr	r3, [pc, #164]	@ (8003418 <MX_ADC2_Init+0xc0>)
 8003372:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003376:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003378:	4b27      	ldr	r3, [pc, #156]	@ (8003418 <MX_ADC2_Init+0xc0>)
 800337a:	2200      	movs	r2, #0
 800337c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800337e:	4b26      	ldr	r3, [pc, #152]	@ (8003418 <MX_ADC2_Init+0xc0>)
 8003380:	2200      	movs	r2, #0
 8003382:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8003384:	4b24      	ldr	r3, [pc, #144]	@ (8003418 <MX_ADC2_Init+0xc0>)
 8003386:	2200      	movs	r2, #0
 8003388:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800338a:	4b23      	ldr	r3, [pc, #140]	@ (8003418 <MX_ADC2_Init+0xc0>)
 800338c:	2200      	movs	r2, #0
 800338e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003390:	4b21      	ldr	r3, [pc, #132]	@ (8003418 <MX_ADC2_Init+0xc0>)
 8003392:	2204      	movs	r2, #4
 8003394:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8003396:	4b20      	ldr	r3, [pc, #128]	@ (8003418 <MX_ADC2_Init+0xc0>)
 8003398:	2200      	movs	r2, #0
 800339a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800339c:	4b1e      	ldr	r3, [pc, #120]	@ (8003418 <MX_ADC2_Init+0xc0>)
 800339e:	2200      	movs	r2, #0
 80033a0:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80033a2:	4b1d      	ldr	r3, [pc, #116]	@ (8003418 <MX_ADC2_Init+0xc0>)
 80033a4:	2201      	movs	r2, #1
 80033a6:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80033a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003418 <MX_ADC2_Init+0xc0>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80033b0:	4b19      	ldr	r3, [pc, #100]	@ (8003418 <MX_ADC2_Init+0xc0>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80033b6:	4b18      	ldr	r3, [pc, #96]	@ (8003418 <MX_ADC2_Init+0xc0>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80033bc:	4b16      	ldr	r3, [pc, #88]	@ (8003418 <MX_ADC2_Init+0xc0>)
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80033c4:	4b14      	ldr	r3, [pc, #80]	@ (8003418 <MX_ADC2_Init+0xc0>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80033ca:	4b13      	ldr	r3, [pc, #76]	@ (8003418 <MX_ADC2_Init+0xc0>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80033d2:	4811      	ldr	r0, [pc, #68]	@ (8003418 <MX_ADC2_Init+0xc0>)
 80033d4:	f003 fa08 	bl	80067e8 <HAL_ADC_Init>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80033de:	f002 f869 	bl	80054b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80033e2:	4b0f      	ldr	r3, [pc, #60]	@ (8003420 <MX_ADC2_Init+0xc8>)
 80033e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80033e6:	2306      	movs	r3, #6
 80033e8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80033ea:	2300      	movs	r3, #0
 80033ec:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80033ee:	237f      	movs	r3, #127	@ 0x7f
 80033f0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80033f2:	2304      	movs	r3, #4
 80033f4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80033f6:	2300      	movs	r3, #0
 80033f8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80033fa:	463b      	mov	r3, r7
 80033fc:	4619      	mov	r1, r3
 80033fe:	4806      	ldr	r0, [pc, #24]	@ (8003418 <MX_ADC2_Init+0xc0>)
 8003400:	f003 fca0 	bl	8006d44 <HAL_ADC_ConfigChannel>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800340a:	f002 f853 	bl	80054b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800340e:	bf00      	nop
 8003410:	3720      	adds	r7, #32
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	20000354 	.word	0x20000354
 800341c:	50000100 	.word	0x50000100
 8003420:	08600004 	.word	0x08600004

08003424 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b0a0      	sub	sp, #128	@ 0x80
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800342c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003430:	2200      	movs	r2, #0
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	605a      	str	r2, [r3, #4]
 8003436:	609a      	str	r2, [r3, #8]
 8003438:	60da      	str	r2, [r3, #12]
 800343a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800343c:	f107 0318 	add.w	r3, r7, #24
 8003440:	2254      	movs	r2, #84	@ 0x54
 8003442:	2100      	movs	r1, #0
 8003444:	4618      	mov	r0, r3
 8003446:	f00c f805 	bl	800f454 <memset>
  if(adcHandle->Instance==ADC1)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003452:	d13e      	bne.n	80034d2 <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003454:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003458:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800345a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800345e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003460:	f107 0318 	add.w	r3, r7, #24
 8003464:	4618      	mov	r0, r3
 8003466:	f005 fe53 	bl	8009110 <HAL_RCCEx_PeriphCLKConfig>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d001      	beq.n	8003474 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8003470:	f002 f820 	bl	80054b4 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003474:	4b3a      	ldr	r3, [pc, #232]	@ (8003560 <HAL_ADC_MspInit+0x13c>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	3301      	adds	r3, #1
 800347a:	4a39      	ldr	r2, [pc, #228]	@ (8003560 <HAL_ADC_MspInit+0x13c>)
 800347c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800347e:	4b38      	ldr	r3, [pc, #224]	@ (8003560 <HAL_ADC_MspInit+0x13c>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d10b      	bne.n	800349e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003486:	4b37      	ldr	r3, [pc, #220]	@ (8003564 <HAL_ADC_MspInit+0x140>)
 8003488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800348a:	4a36      	ldr	r2, [pc, #216]	@ (8003564 <HAL_ADC_MspInit+0x140>)
 800348c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003490:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003492:	4b34      	ldr	r3, [pc, #208]	@ (8003564 <HAL_ADC_MspInit+0x140>)
 8003494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003496:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800349a:	617b      	str	r3, [r7, #20]
 800349c:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800349e:	4b31      	ldr	r3, [pc, #196]	@ (8003564 <HAL_ADC_MspInit+0x140>)
 80034a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034a2:	4a30      	ldr	r2, [pc, #192]	@ (8003564 <HAL_ADC_MspInit+0x140>)
 80034a4:	f043 0301 	orr.w	r3, r3, #1
 80034a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034aa:	4b2e      	ldr	r3, [pc, #184]	@ (8003564 <HAL_ADC_MspInit+0x140>)
 80034ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	613b      	str	r3, [r7, #16]
 80034b4:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = Current_Sensor_Pin|Current_SensorA1_Pin;
 80034b6:	2303      	movs	r3, #3
 80034b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034ba:	2303      	movs	r3, #3
 80034bc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034be:	2300      	movs	r3, #0
 80034c0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034c2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80034c6:	4619      	mov	r1, r3
 80034c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80034cc:	f004 fe8c 	bl	80081e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80034d0:	e042      	b.n	8003558 <HAL_ADC_MspInit+0x134>
  else if(adcHandle->Instance==ADC2)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a24      	ldr	r2, [pc, #144]	@ (8003568 <HAL_ADC_MspInit+0x144>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d13d      	bne.n	8003558 <HAL_ADC_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80034dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034e0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80034e2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80034e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034e8:	f107 0318 	add.w	r3, r7, #24
 80034ec:	4618      	mov	r0, r3
 80034ee:	f005 fe0f 	bl	8009110 <HAL_RCCEx_PeriphCLKConfig>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d001      	beq.n	80034fc <HAL_ADC_MspInit+0xd8>
      Error_Handler();
 80034f8:	f001 ffdc 	bl	80054b4 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80034fc:	4b18      	ldr	r3, [pc, #96]	@ (8003560 <HAL_ADC_MspInit+0x13c>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	3301      	adds	r3, #1
 8003502:	4a17      	ldr	r2, [pc, #92]	@ (8003560 <HAL_ADC_MspInit+0x13c>)
 8003504:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003506:	4b16      	ldr	r3, [pc, #88]	@ (8003560 <HAL_ADC_MspInit+0x13c>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2b01      	cmp	r3, #1
 800350c:	d10b      	bne.n	8003526 <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800350e:	4b15      	ldr	r3, [pc, #84]	@ (8003564 <HAL_ADC_MspInit+0x140>)
 8003510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003512:	4a14      	ldr	r2, [pc, #80]	@ (8003564 <HAL_ADC_MspInit+0x140>)
 8003514:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003518:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800351a:	4b12      	ldr	r3, [pc, #72]	@ (8003564 <HAL_ADC_MspInit+0x140>)
 800351c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800351e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003522:	60fb      	str	r3, [r7, #12]
 8003524:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003526:	4b0f      	ldr	r3, [pc, #60]	@ (8003564 <HAL_ADC_MspInit+0x140>)
 8003528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800352a:	4a0e      	ldr	r2, [pc, #56]	@ (8003564 <HAL_ADC_MspInit+0x140>)
 800352c:	f043 0301 	orr.w	r3, r3, #1
 8003530:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003532:	4b0c      	ldr	r3, [pc, #48]	@ (8003564 <HAL_ADC_MspInit+0x140>)
 8003534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	60bb      	str	r3, [r7, #8]
 800353c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Current_SensorA1_Pin;
 800353e:	2302      	movs	r3, #2
 8003540:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003542:	2303      	movs	r3, #3
 8003544:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003546:	2300      	movs	r3, #0
 8003548:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(Current_SensorA1_GPIO_Port, &GPIO_InitStruct);
 800354a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800354e:	4619      	mov	r1, r3
 8003550:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003554:	f004 fe48 	bl	80081e8 <HAL_GPIO_Init>
}
 8003558:	bf00      	nop
 800355a:	3780      	adds	r7, #128	@ 0x80
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	200003c0 	.word	0x200003c0
 8003564:	40021000 	.word	0x40021000
 8003568:	50000100 	.word	0x50000100

0800356c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8003572:	4b12      	ldr	r3, [pc, #72]	@ (80035bc <MX_DMA_Init+0x50>)
 8003574:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003576:	4a11      	ldr	r2, [pc, #68]	@ (80035bc <MX_DMA_Init+0x50>)
 8003578:	f043 0304 	orr.w	r3, r3, #4
 800357c:	6493      	str	r3, [r2, #72]	@ 0x48
 800357e:	4b0f      	ldr	r3, [pc, #60]	@ (80035bc <MX_DMA_Init+0x50>)
 8003580:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003582:	f003 0304 	and.w	r3, r3, #4
 8003586:	607b      	str	r3, [r7, #4]
 8003588:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800358a:	4b0c      	ldr	r3, [pc, #48]	@ (80035bc <MX_DMA_Init+0x50>)
 800358c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800358e:	4a0b      	ldr	r2, [pc, #44]	@ (80035bc <MX_DMA_Init+0x50>)
 8003590:	f043 0301 	orr.w	r3, r3, #1
 8003594:	6493      	str	r3, [r2, #72]	@ 0x48
 8003596:	4b09      	ldr	r3, [pc, #36]	@ (80035bc <MX_DMA_Init+0x50>)
 8003598:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	603b      	str	r3, [r7, #0]
 80035a0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80035a2:	2200      	movs	r2, #0
 80035a4:	2100      	movs	r1, #0
 80035a6:	200b      	movs	r0, #11
 80035a8:	f004 faab 	bl	8007b02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80035ac:	200b      	movs	r0, #11
 80035ae:	f004 fac2 	bl	8007b36 <HAL_NVIC_EnableIRQ>

}
 80035b2:	bf00      	nop
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	40021000 	.word	0x40021000

080035c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b08a      	sub	sp, #40	@ 0x28
 80035c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035c6:	f107 0314 	add.w	r3, r7, #20
 80035ca:	2200      	movs	r2, #0
 80035cc:	601a      	str	r2, [r3, #0]
 80035ce:	605a      	str	r2, [r3, #4]
 80035d0:	609a      	str	r2, [r3, #8]
 80035d2:	60da      	str	r2, [r3, #12]
 80035d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80035d6:	4b54      	ldr	r3, [pc, #336]	@ (8003728 <MX_GPIO_Init+0x168>)
 80035d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035da:	4a53      	ldr	r2, [pc, #332]	@ (8003728 <MX_GPIO_Init+0x168>)
 80035dc:	f043 0304 	orr.w	r3, r3, #4
 80035e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035e2:	4b51      	ldr	r3, [pc, #324]	@ (8003728 <MX_GPIO_Init+0x168>)
 80035e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035e6:	f003 0304 	and.w	r3, r3, #4
 80035ea:	613b      	str	r3, [r7, #16]
 80035ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80035ee:	4b4e      	ldr	r3, [pc, #312]	@ (8003728 <MX_GPIO_Init+0x168>)
 80035f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035f2:	4a4d      	ldr	r2, [pc, #308]	@ (8003728 <MX_GPIO_Init+0x168>)
 80035f4:	f043 0320 	orr.w	r3, r3, #32
 80035f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035fa:	4b4b      	ldr	r3, [pc, #300]	@ (8003728 <MX_GPIO_Init+0x168>)
 80035fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035fe:	f003 0320 	and.w	r3, r3, #32
 8003602:	60fb      	str	r3, [r7, #12]
 8003604:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003606:	4b48      	ldr	r3, [pc, #288]	@ (8003728 <MX_GPIO_Init+0x168>)
 8003608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800360a:	4a47      	ldr	r2, [pc, #284]	@ (8003728 <MX_GPIO_Init+0x168>)
 800360c:	f043 0301 	orr.w	r3, r3, #1
 8003610:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003612:	4b45      	ldr	r3, [pc, #276]	@ (8003728 <MX_GPIO_Init+0x168>)
 8003614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	60bb      	str	r3, [r7, #8]
 800361c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800361e:	4b42      	ldr	r3, [pc, #264]	@ (8003728 <MX_GPIO_Init+0x168>)
 8003620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003622:	4a41      	ldr	r2, [pc, #260]	@ (8003728 <MX_GPIO_Init+0x168>)
 8003624:	f043 0302 	orr.w	r3, r3, #2
 8003628:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800362a:	4b3f      	ldr	r3, [pc, #252]	@ (8003728 <MX_GPIO_Init+0x168>)
 800362c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	607b      	str	r3, [r7, #4]
 8003634:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_MD20A_24V_GPIO_Port, DIR_MD20A_24V_Pin, GPIO_PIN_RESET);
 8003636:	2200      	movs	r2, #0
 8003638:	2102      	movs	r1, #2
 800363a:	483c      	ldr	r0, [pc, #240]	@ (800372c <MX_GPIO_Init+0x16c>)
 800363c:	f004 ff56 	bl	80084ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_MD20A_18V_GPIO_Port, DIR_MD20A_18V_Pin, GPIO_PIN_RESET);
 8003640:	2200      	movs	r2, #0
 8003642:	2140      	movs	r1, #64	@ 0x40
 8003644:	483a      	ldr	r0, [pc, #232]	@ (8003730 <MX_GPIO_Init+0x170>)
 8003646:	f004 ff51 	bl	80084ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PS2_Attention_GPIO_Port, PS2_Attention_Pin, GPIO_PIN_SET);
 800364a:	2201      	movs	r2, #1
 800364c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003650:	4837      	ldr	r0, [pc, #220]	@ (8003730 <MX_GPIO_Init+0x170>)
 8003652:	f004 ff4b 	bl	80084ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DIR_MD20A_24V_Pin */
  GPIO_InitStruct.Pin = DIR_MD20A_24V_Pin;
 8003656:	2302      	movs	r3, #2
 8003658:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800365a:	2301      	movs	r3, #1
 800365c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800365e:	2300      	movs	r3, #0
 8003660:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003662:	2300      	movs	r3, #0
 8003664:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_MD20A_24V_GPIO_Port, &GPIO_InitStruct);
 8003666:	f107 0314 	add.w	r3, r7, #20
 800366a:	4619      	mov	r1, r3
 800366c:	482f      	ldr	r0, [pc, #188]	@ (800372c <MX_GPIO_Init+0x16c>)
 800366e:	f004 fdbb 	bl	80081e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit_Switch_pen_2_Pin Limit_Switch_Prismatic1_Pin Limit_Switch_pen_1_Pin */
  GPIO_InitStruct.Pin = Limit_Switch_pen_2_Pin|Limit_Switch_Prismatic1_Pin|Limit_Switch_pen_1_Pin;
 8003672:	f44f 438c 	mov.w	r3, #17920	@ 0x4600
 8003676:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003678:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800367c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367e:	2300      	movs	r3, #0
 8003680:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003682:	f107 0314 	add.w	r3, r7, #20
 8003686:	4619      	mov	r1, r3
 8003688:	4828      	ldr	r0, [pc, #160]	@ (800372c <MX_GPIO_Init+0x16c>)
 800368a:	f004 fdad 	bl	80081e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Proximity_Left_Pin Limit_Switch_Prismatic2_Pin */
  GPIO_InitStruct.Pin = Proximity_Left_Pin|Limit_Switch_Prismatic2_Pin;
 800368e:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8003692:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003694:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003698:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800369a:	2300      	movs	r3, #0
 800369c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800369e:	f107 0314 	add.w	r3, r7, #20
 80036a2:	4619      	mov	r1, r3
 80036a4:	4821      	ldr	r0, [pc, #132]	@ (800372c <MX_GPIO_Init+0x16c>)
 80036a6:	f004 fd9f 	bl	80081e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_MD20A_18V_Pin PS2_Attention_Pin */
  GPIO_InitStruct.Pin = DIR_MD20A_18V_Pin|PS2_Attention_Pin;
 80036aa:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 80036ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036b0:	2301      	movs	r3, #1
 80036b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b4:	2300      	movs	r3, #0
 80036b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036b8:	2300      	movs	r3, #0
 80036ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036bc:	f107 0314 	add.w	r3, r7, #20
 80036c0:	4619      	mov	r1, r3
 80036c2:	481b      	ldr	r0, [pc, #108]	@ (8003730 <MX_GPIO_Init+0x170>)
 80036c4:	f004 fd90 	bl	80081e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_Pin */
  GPIO_InitStruct.Pin = Emergency_Pin;
 80036c8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80036cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80036ce:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80036d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d4:	2300      	movs	r3, #0
 80036d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_GPIO_Port, &GPIO_InitStruct);
 80036d8:	f107 0314 	add.w	r3, r7, #20
 80036dc:	4619      	mov	r1, r3
 80036de:	4814      	ldr	r0, [pc, #80]	@ (8003730 <MX_GPIO_Init+0x170>)
 80036e0:	f004 fd82 	bl	80081e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Proximity_sensor_Pin */
  GPIO_InitStruct.Pin = Proximity_sensor_Pin;
 80036e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80036e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80036ea:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80036ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f0:	2300      	movs	r3, #0
 80036f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Proximity_sensor_GPIO_Port, &GPIO_InitStruct);
 80036f4:	f107 0314 	add.w	r3, r7, #20
 80036f8:	4619      	mov	r1, r3
 80036fa:	480d      	ldr	r0, [pc, #52]	@ (8003730 <MX_GPIO_Init+0x170>)
 80036fc:	f004 fd74 	bl	80081e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003700:	2200      	movs	r2, #0
 8003702:	2100      	movs	r1, #0
 8003704:	2017      	movs	r0, #23
 8003706:	f004 f9fc 	bl	8007b02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800370a:	2017      	movs	r0, #23
 800370c:	f004 fa13 	bl	8007b36 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003710:	2200      	movs	r2, #0
 8003712:	2100      	movs	r1, #0
 8003714:	2028      	movs	r0, #40	@ 0x28
 8003716:	f004 f9f4 	bl	8007b02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800371a:	2028      	movs	r0, #40	@ 0x28
 800371c:	f004 fa0b 	bl	8007b36 <HAL_NVIC_EnableIRQ>

}
 8003720:	bf00      	nop
 8003722:	3728      	adds	r7, #40	@ 0x28
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	40021000 	.word	0x40021000
 800372c:	48000400 	.word	0x48000400
 8003730:	48000800 	.word	0x48000800
 8003734:	00000000 	.word	0x00000000

08003738 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003738:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800373c:	ed2d 8b04 	vpush	{d8-d9}
 8003740:	b0a4      	sub	sp, #144	@ 0x90
 8003742:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003744:	f002 fdd3 	bl	80062ee <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003748:	f001 fac8 	bl	8004cdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800374c:	f7ff ff38 	bl	80035c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8003750:	f7ff ff0c 	bl	800356c <MX_DMA_Init>
  MX_TIM3_Init();
 8003754:	f002 f8b4 	bl	80058c0 <MX_TIM3_Init>
  MX_ADC1_Init();
 8003758:	f7ff fd86 	bl	8003268 <MX_ADC1_Init>
  MX_TIM1_Init();
 800375c:	f002 f80e 	bl	800577c <MX_TIM1_Init>
  MX_TIM2_Init();
 8003760:	f002 f860 	bl	8005824 <MX_TIM2_Init>
  MX_TIM4_Init();
 8003764:	f002 f902 	bl	800596c <MX_TIM4_Init>
  MX_TIM20_Init();
 8003768:	f002 fa86 	bl	8005c78 <MX_TIM20_Init>
  MX_TIM8_Init();
 800376c:	f002 f954 	bl	8005a18 <MX_TIM8_Init>
  MX_TIM16_Init();
 8003770:	f002 fa02 	bl	8005b78 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 8003774:	f002 fcb8 	bl	80060e8 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 8003778:	f7ff fdee 	bl	8003358 <MX_ADC2_Init>
  MX_SPI1_Init();
 800377c:	f001 fea0 	bl	80054c0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim20);
 8003780:	48aa      	ldr	r0, [pc, #680]	@ (8003a2c <main+0x2f4>)
 8003782:	f006 fba5 	bl	8009ed0 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim8);
 8003786:	48aa      	ldr	r0, [pc, #680]	@ (8003a30 <main+0x2f8>)
 8003788:	f006 fba2 	bl	8009ed0 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 800378c:	210c      	movs	r1, #12
 800378e:	48a8      	ldr	r0, [pc, #672]	@ (8003a30 <main+0x2f8>)
 8003790:	f006 fd62 	bl	800a258 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim20, TIM_CHANNEL_1);
 8003794:	2100      	movs	r1, #0
 8003796:	48a5      	ldr	r0, [pc, #660]	@ (8003a2c <main+0x2f4>)
 8003798:	f006 fd5e 	bl	800a258 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim20, TIM_CHANNEL_3);
 800379c:	2108      	movs	r1, #8
 800379e:	48a3      	ldr	r0, [pc, #652]	@ (8003a2c <main+0x2f4>)
 80037a0:	f006 fd5a 	bl	800a258 <HAL_TIM_PWM_Start>
	Encoder_Init(&encoder1, &htim4);
 80037a4:	49a3      	ldr	r1, [pc, #652]	@ (8003a34 <main+0x2fc>)
 80037a6:	48a4      	ldr	r0, [pc, #656]	@ (8003a38 <main+0x300>)
 80037a8:	f7fe fb10 	bl	8001dcc <Encoder_Init>
	Encoder_Init(&encoder2, &htim3);
 80037ac:	49a3      	ldr	r1, [pc, #652]	@ (8003a3c <main+0x304>)
 80037ae:	48a4      	ldr	r0, [pc, #656]	@ (8003a40 <main+0x308>)
 80037b0:	f7fe fb0c 	bl	8001dcc <Encoder_Init>
	HAL_ADC_Start(&hadc1);
 80037b4:	48a3      	ldr	r0, [pc, #652]	@ (8003a44 <main+0x30c>)
 80037b6:	f003 f9d3 	bl	8006b60 <HAL_ADC_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 80037ba:	48a3      	ldr	r0, [pc, #652]	@ (8003a48 <main+0x310>)
 80037bc:	f006 fbf8 	bl	8009fb0 <HAL_TIM_Base_Start_IT>

	uint64_t lastTick = 0;
 80037c0:	f04f 0200 	mov.w	r2, #0
 80037c4:	f04f 0300 	mov.w	r3, #0
 80037c8:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80037cc:	213c      	movs	r1, #60	@ 0x3c
 80037ce:	489b      	ldr	r0, [pc, #620]	@ (8003a3c <main+0x304>)
 80037d0:	f006 fffe 	bl	800a7d0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80037d4:	213c      	movs	r1, #60	@ 0x3c
 80037d6:	4897      	ldr	r0, [pc, #604]	@ (8003a34 <main+0x2fc>)
 80037d8:	f006 fffa 	bl	800a7d0 <HAL_TIM_Encoder_Start>

	hmodbus.huart = &huart2;
 80037dc:	4b9b      	ldr	r3, [pc, #620]	@ (8003a4c <main+0x314>)
 80037de:	4a9c      	ldr	r2, [pc, #624]	@ (8003a50 <main+0x318>)
 80037e0:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim16;
 80037e2:	4b9a      	ldr	r3, [pc, #616]	@ (8003a4c <main+0x314>)
 80037e4:	4a9b      	ldr	r2, [pc, #620]	@ (8003a54 <main+0x31c>)
 80037e6:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x15;
 80037e8:	4b98      	ldr	r3, [pc, #608]	@ (8003a4c <main+0x314>)
 80037ea:	2215      	movs	r2, #21
 80037ec:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize = 200;
 80037ee:	4b97      	ldr	r3, [pc, #604]	@ (8003a4c <main+0x314>)
 80037f0:	22c8      	movs	r2, #200	@ 0xc8
 80037f2:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, registerFrame);
 80037f4:	4998      	ldr	r1, [pc, #608]	@ (8003a58 <main+0x320>)
 80037f6:	4895      	ldr	r0, [pc, #596]	@ (8003a4c <main+0x314>)
 80037f8:	f7fe ffb6 	bl	8002768 <Modbus_init>

	Kalman_Init(&kf_pris);
 80037fc:	4897      	ldr	r0, [pc, #604]	@ (8003a5c <main+0x324>)
 80037fe:	f7fe fd01 	bl	8002204 <Kalman_Init>

	kf_pris.A_data[0] = 1;
 8003802:	4b96      	ldr	r3, [pc, #600]	@ (8003a5c <main+0x324>)
 8003804:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003808:	671a      	str	r2, [r3, #112]	@ 0x70
	kf_pris.A_data[1] = 0.0008395;
 800380a:	4b94      	ldr	r3, [pc, #592]	@ (8003a5c <main+0x324>)
 800380c:	4a94      	ldr	r2, [pc, #592]	@ (8003a60 <main+0x328>)
 800380e:	675a      	str	r2, [r3, #116]	@ 0x74
	kf_pris.A_data[2] = -4.198e-07;
 8003810:	4b92      	ldr	r3, [pc, #584]	@ (8003a5c <main+0x324>)
 8003812:	4a94      	ldr	r2, [pc, #592]	@ (8003a64 <main+0x32c>)
 8003814:	679a      	str	r2, [r3, #120]	@ 0x78
	kf_pris.A_data[3] = 1.282e-05;
 8003816:	4b91      	ldr	r3, [pc, #580]	@ (8003a5c <main+0x324>)
 8003818:	4a93      	ldr	r2, [pc, #588]	@ (8003a68 <main+0x330>)
 800381a:	67da      	str	r2, [r3, #124]	@ 0x7c
	kf_pris.A_data[4] = 0;
 800381c:	4b8f      	ldr	r3, [pc, #572]	@ (8003a5c <main+0x324>)
 800381e:	f04f 0200 	mov.w	r2, #0
 8003822:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	kf_pris.A_data[5] = 0.6791;
 8003826:	4b8d      	ldr	r3, [pc, #564]	@ (8003a5c <main+0x324>)
 8003828:	4a90      	ldr	r2, [pc, #576]	@ (8003a6c <main+0x334>)
 800382a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	kf_pris.A_data[6] = -0.0008395;
 800382e:	4b8b      	ldr	r3, [pc, #556]	@ (8003a5c <main+0x324>)
 8003830:	4a8f      	ldr	r2, [pc, #572]	@ (8003a70 <main+0x338>)
 8003832:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	kf_pris.A_data[7] = 0.02564;
 8003836:	4b89      	ldr	r3, [pc, #548]	@ (8003a5c <main+0x324>)
 8003838:	4a8e      	ldr	r2, [pc, #568]	@ (8003a74 <main+0x33c>)
 800383a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	kf_pris.A_data[8] = 0;
 800383e:	4b87      	ldr	r3, [pc, #540]	@ (8003a5c <main+0x324>)
 8003840:	f04f 0200 	mov.w	r2, #0
 8003844:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	kf_pris.A_data[9] = 0;
 8003848:	4b84      	ldr	r3, [pc, #528]	@ (8003a5c <main+0x324>)
 800384a:	f04f 0200 	mov.w	r2, #0
 800384e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	kf_pris.A_data[10] = 1;
 8003852:	4b82      	ldr	r3, [pc, #520]	@ (8003a5c <main+0x324>)
 8003854:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003858:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	kf_pris.A_data[11] = 0;
 800385c:	4b7f      	ldr	r3, [pc, #508]	@ (8003a5c <main+0x324>)
 800385e:	f04f 0200 	mov.w	r2, #0
 8003862:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	kf_pris.A_data[12] = 0;
 8003866:	4b7d      	ldr	r3, [pc, #500]	@ (8003a5c <main+0x324>)
 8003868:	f04f 0200 	mov.w	r2, #0
 800386c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	kf_pris.A_data[13] = -0.04203;
 8003870:	4b7a      	ldr	r3, [pc, #488]	@ (8003a5c <main+0x324>)
 8003872:	4a81      	ldr	r2, [pc, #516]	@ (8003a78 <main+0x340>)
 8003874:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	kf_pris.A_data[14] = 2.101e-05;
 8003878:	4b78      	ldr	r3, [pc, #480]	@ (8003a5c <main+0x324>)
 800387a:	4a80      	ldr	r2, [pc, #512]	@ (8003a7c <main+0x344>)
 800387c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	kf_pris.A_data[15] = -0.09565;
 8003880:	4b76      	ldr	r3, [pc, #472]	@ (8003a5c <main+0x324>)
 8003882:	4a7f      	ldr	r2, [pc, #508]	@ (8003a80 <main+0x348>)
 8003884:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

	kf_pris.B_data[0] = 4.006e-06;
 8003888:	4b74      	ldr	r3, [pc, #464]	@ (8003a5c <main+0x324>)
 800388a:	4a7e      	ldr	r2, [pc, #504]	@ (8003a84 <main+0x34c>)
 800388c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	kf_pris.B_data[1] = 0.008011;
 8003890:	4b72      	ldr	r3, [pc, #456]	@ (8003a5c <main+0x324>)
 8003892:	4a7d      	ldr	r2, [pc, #500]	@ (8003a88 <main+0x350>)
 8003894:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	kf_pris.B_data[2] = 0;
 8003898:	4b70      	ldr	r3, [pc, #448]	@ (8003a5c <main+0x324>)
 800389a:	f04f 0200 	mov.w	r2, #0
 800389e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	kf_pris.B_data[3] = 0.2826;
 80038a2:	4b6e      	ldr	r3, [pc, #440]	@ (8003a5c <main+0x324>)
 80038a4:	4a79      	ldr	r2, [pc, #484]	@ (8003a8c <main+0x354>)
 80038a6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc

	// Identity H
	for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 80038aa:	2300      	movs	r3, #0
 80038ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80038b0:	e027      	b.n	8003902 <main+0x1ca>
		for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 80038b2:	2300      	movs	r3, #0
 80038b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80038b8:	e01a      	b.n	80038f0 <main+0x1b8>
			kf_pris.H_data[i * KALMAN_STATE_DIM + j] = (i == j) ? 1.0f : 0.0f;
 80038ba:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80038be:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d102      	bne.n	80038cc <main+0x194>
 80038c6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80038ca:	e001      	b.n	80038d0 <main+0x198>
 80038cc:	f04f 0200 	mov.w	r2, #0
 80038d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038d4:	0099      	lsls	r1, r3, #2
 80038d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80038da:	440b      	add	r3, r1
 80038dc:	495f      	ldr	r1, [pc, #380]	@ (8003a5c <main+0x324>)
 80038de:	333c      	adds	r3, #60	@ 0x3c
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	440b      	add	r3, r1
 80038e4:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 80038e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80038ea:	3301      	adds	r3, #1
 80038ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80038f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80038f4:	2b03      	cmp	r3, #3
 80038f6:	dde0      	ble.n	80038ba <main+0x182>
	for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 80038f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038fc:	3301      	adds	r3, #1
 80038fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003902:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003906:	2b03      	cmp	r3, #3
 8003908:	ddd3      	ble.n	80038b2 <main+0x17a>
		}
	}

	// Prismatic
	kf_pris.x_data[0] = 0;
 800390a:	4b54      	ldr	r3, [pc, #336]	@ (8003a5c <main+0x324>)
 800390c:	f04f 0200 	mov.w	r2, #0
 8003910:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
	kf_pris.x_data[1] = 0;
 8003914:	4b51      	ldr	r3, [pc, #324]	@ (8003a5c <main+0x324>)
 8003916:	f04f 0200 	mov.w	r2, #0
 800391a:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
	kf_pris.x_data[2] = 0;
 800391e:	4b4f      	ldr	r3, [pc, #316]	@ (8003a5c <main+0x324>)
 8003920:	f04f 0200 	mov.w	r2, #0
 8003924:	f8c3 223c 	str.w	r2, [r3, #572]	@ 0x23c
	kf_pris.x_data[3] = 0;
 8003928:	4b4c      	ldr	r3, [pc, #304]	@ (8003a5c <main+0x324>)
 800392a:	f04f 0200 	mov.w	r2, #0
 800392e:	f8c3 2240 	str.w	r2, [r3, #576]	@ 0x240

	Kalman_SetMeasurementNoise(&kf_pris, 0.01f);
 8003932:	ed9f 0a57 	vldr	s0, [pc, #348]	@ 8003a90 <main+0x358>
 8003936:	4849      	ldr	r0, [pc, #292]	@ (8003a5c <main+0x324>)
 8003938:	f7fe fd36 	bl	80023a8 <Kalman_SetMeasurementNoise>
	Kalman_SetProcessNoise(&kf_pris, 0.9f);
 800393c:	ed9f 0a55 	vldr	s0, [pc, #340]	@ 8003a94 <main+0x35c>
 8003940:	4846      	ldr	r0, [pc, #280]	@ (8003a5c <main+0x324>)
 8003942:	f7fe fd01 	bl	8002348 <Kalman_SetProcessNoise>

	Kalman_Init(&kf_rev);
 8003946:	4854      	ldr	r0, [pc, #336]	@ (8003a98 <main+0x360>)
 8003948:	f7fe fc5c 	bl	8002204 <Kalman_Init>

	kf_rev.A_data[0] = 1;
 800394c:	4b52      	ldr	r3, [pc, #328]	@ (8003a98 <main+0x360>)
 800394e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003952:	671a      	str	r2, [r3, #112]	@ 0x70
	kf_rev.A_data[1] = 0.0009998;
 8003954:	4b50      	ldr	r3, [pc, #320]	@ (8003a98 <main+0x360>)
 8003956:	4a51      	ldr	r2, [pc, #324]	@ (8003a9c <main+0x364>)
 8003958:	675a      	str	r2, [r3, #116]	@ 0x74
	kf_rev.A_data[2] = -2.659e-06;
 800395a:	4b4f      	ldr	r3, [pc, #316]	@ (8003a98 <main+0x360>)
 800395c:	4a50      	ldr	r2, [pc, #320]	@ (8003aa0 <main+0x368>)
 800395e:	679a      	str	r2, [r3, #120]	@ 0x78
	kf_rev.A_data[3] = 8.108e-08;
 8003960:	4b4d      	ldr	r3, [pc, #308]	@ (8003a98 <main+0x360>)
 8003962:	4a50      	ldr	r2, [pc, #320]	@ (8003aa4 <main+0x36c>)
 8003964:	67da      	str	r2, [r3, #124]	@ 0x7c
	kf_rev.A_data[4] = 0;
 8003966:	4b4c      	ldr	r3, [pc, #304]	@ (8003a98 <main+0x360>)
 8003968:	f04f 0200 	mov.w	r2, #0
 800396c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	kf_rev.A_data[5] = 0.9996;
 8003970:	4b49      	ldr	r3, [pc, #292]	@ (8003a98 <main+0x360>)
 8003972:	4a4d      	ldr	r2, [pc, #308]	@ (8003aa8 <main+0x370>)
 8003974:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	kf_rev.A_data[6] = -0.005318;
 8003978:	4b47      	ldr	r3, [pc, #284]	@ (8003a98 <main+0x360>)
 800397a:	4a4c      	ldr	r2, [pc, #304]	@ (8003aac <main+0x374>)
 800397c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	kf_rev.A_data[7] = 0.0001622;
 8003980:	4b45      	ldr	r3, [pc, #276]	@ (8003a98 <main+0x360>)
 8003982:	4a4b      	ldr	r2, [pc, #300]	@ (8003ab0 <main+0x378>)
 8003984:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	kf_rev.A_data[8] = 0;
 8003988:	4b43      	ldr	r3, [pc, #268]	@ (8003a98 <main+0x360>)
 800398a:	f04f 0200 	mov.w	r2, #0
 800398e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	kf_rev.A_data[9] = 0;
 8003992:	4b41      	ldr	r3, [pc, #260]	@ (8003a98 <main+0x360>)
 8003994:	f04f 0200 	mov.w	r2, #0
 8003998:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	kf_rev.A_data[10] = 1;
 800399c:	4b3e      	ldr	r3, [pc, #248]	@ (8003a98 <main+0x360>)
 800399e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80039a2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	kf_rev.A_data[11] = 0;
 80039a6:	4b3c      	ldr	r3, [pc, #240]	@ (8003a98 <main+0x360>)
 80039a8:	f04f 0200 	mov.w	r2, #0
 80039ac:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	kf_rev.A_data[12] = 0;
 80039b0:	4b39      	ldr	r3, [pc, #228]	@ (8003a98 <main+0x360>)
 80039b2:	f04f 0200 	mov.w	r2, #0
 80039b6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	kf_rev.A_data[13] = -2.746;
 80039ba:	4b37      	ldr	r3, [pc, #220]	@ (8003a98 <main+0x360>)
 80039bc:	4a3d      	ldr	r2, [pc, #244]	@ (8003ab4 <main+0x37c>)
 80039be:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	kf_rev.A_data[14] = 0.007303;
 80039c2:	4b35      	ldr	r3, [pc, #212]	@ (8003a98 <main+0x360>)
 80039c4:	4a3c      	ldr	r2, [pc, #240]	@ (8003ab8 <main+0x380>)
 80039c6:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	kf_rev.A_data[15] = 0.1354;
 80039ca:	4b33      	ldr	r3, [pc, #204]	@ (8003a98 <main+0x360>)
 80039cc:	4a3b      	ldr	r2, [pc, #236]	@ (8003abc <main+0x384>)
 80039ce:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

	kf_rev.B_data[0] = 1.203e-07;
 80039d2:	4b31      	ldr	r3, [pc, #196]	@ (8003a98 <main+0x360>)
 80039d4:	4a3a      	ldr	r2, [pc, #232]	@ (8003ac0 <main+0x388>)
 80039d6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	kf_rev.B_data[1] = 0.0002406;
 80039da:	4b2f      	ldr	r3, [pc, #188]	@ (8003a98 <main+0x360>)
 80039dc:	4a39      	ldr	r2, [pc, #228]	@ (8003ac4 <main+0x38c>)
 80039de:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	kf_rev.B_data[2] = 0;
 80039e2:	4b2d      	ldr	r3, [pc, #180]	@ (8003a98 <main+0x360>)
 80039e4:	f04f 0200 	mov.w	r2, #0
 80039e8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	kf_rev.B_data[3] = 1.685;
 80039ec:	4b2a      	ldr	r3, [pc, #168]	@ (8003a98 <main+0x360>)
 80039ee:	4a36      	ldr	r2, [pc, #216]	@ (8003ac8 <main+0x390>)
 80039f0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc

	// Identity H
	for (int i = 0; i < 2; i++) {
 80039f4:	2300      	movs	r3, #0
 80039f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80039fa:	e082      	b.n	8003b02 <main+0x3ca>
		for (int j = 0; j < 4; j++) {
 80039fc:	2300      	movs	r3, #0
 80039fe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003a02:	e075      	b.n	8003af0 <main+0x3b8>
			if (i == j) {
 8003a04:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8003a08:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d15d      	bne.n	8003acc <main+0x394>
				kf_rev.H_data[i * 4 + j] = 1.0f;
 8003a10:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a14:	009a      	lsls	r2, r3, #2
 8003a16:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003a1a:	4413      	add	r3, r2
 8003a1c:	4a1e      	ldr	r2, [pc, #120]	@ (8003a98 <main+0x360>)
 8003a1e:	333c      	adds	r3, #60	@ 0x3c
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	4413      	add	r3, r2
 8003a24:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003a28:	601a      	str	r2, [r3, #0]
 8003a2a:	e05c      	b.n	8003ae6 <main+0x3ae>
 8003a2c:	20001bdc 	.word	0x20001bdc
 8003a30:	20001a44 	.word	0x20001a44
 8003a34:	20001978 	.word	0x20001978
 8003a38:	200003c4 	.word	0x200003c4
 8003a3c:	200018ac 	.word	0x200018ac
 8003a40:	200003f8 	.word	0x200003f8
 8003a44:	200002e8 	.word	0x200002e8
 8003a48:	200017e0 	.word	0x200017e0
 8003a4c:	20000750 	.word	0x20000750
 8003a50:	20001ca8 	.word	0x20001ca8
 8003a54:	20001b10 	.word	0x20001b10
 8003a58:	20000c28 	.word	0x20000c28
 8003a5c:	20000ee8 	.word	0x20000ee8
 8003a60:	3a5c11e4 	.word	0x3a5c11e4
 8003a64:	b4e160df 	.word	0xb4e160df
 8003a68:	3757157b 	.word	0x3757157b
 8003a6c:	3f2dd97f 	.word	0x3f2dd97f
 8003a70:	ba5c11e4 	.word	0xba5c11e4
 8003a74:	3cd20afa 	.word	0x3cd20afa
 8003a78:	bd2c27a6 	.word	0xbd2c27a6
 8003a7c:	37b03ea2 	.word	0x37b03ea2
 8003a80:	bdc3e426 	.word	0xbdc3e426
 8003a84:	36866b47 	.word	0x36866b47
 8003a88:	3c034092 	.word	0x3c034092
 8003a8c:	3e90b0f2 	.word	0x3e90b0f2
 8003a90:	3c23d70a 	.word	0x3c23d70a
 8003a94:	3f666666 	.word	0x3f666666
 8003a98:	2000120c 	.word	0x2000120c
 8003a9c:	3a830bb9 	.word	0x3a830bb9
 8003aa0:	b6327146 	.word	0xb6327146
 8003aa4:	33ae1e34 	.word	0x33ae1e34
 8003aa8:	3f7fe5c9 	.word	0x3f7fe5c9
 8003aac:	bbae429e 	.word	0xbbae429e
 8003ab0:	392a143b 	.word	0x392a143b
 8003ab4:	c02fbe77 	.word	0xc02fbe77
 8003ab8:	3bef4e01 	.word	0x3bef4e01
 8003abc:	3e0aa64c 	.word	0x3e0aa64c
 8003ac0:	34012bd0 	.word	0x34012bd0
 8003ac4:	397c4992 	.word	0x397c4992
 8003ac8:	3fd7ae14 	.word	0x3fd7ae14
			} else {
				kf_rev.H_data[i * 4 + j] = 0.0f;
 8003acc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ad0:	009a      	lsls	r2, r3, #2
 8003ad2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003ad6:	4413      	add	r3, r2
 8003ad8:	4aa7      	ldr	r2, [pc, #668]	@ (8003d78 <main+0x640>)
 8003ada:	333c      	adds	r3, #60	@ 0x3c
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	4413      	add	r3, r2
 8003ae0:	f04f 0200 	mov.w	r2, #0
 8003ae4:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < 4; j++) {
 8003ae6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003aea:	3301      	adds	r3, #1
 8003aec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003af0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003af4:	2b03      	cmp	r3, #3
 8003af6:	dd85      	ble.n	8003a04 <main+0x2cc>
	for (int i = 0; i < 2; i++) {
 8003af8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003afc:	3301      	adds	r3, #1
 8003afe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003b02:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	f77f af78 	ble.w	80039fc <main+0x2c4>
			}
		}
	}

	// Revolute
	kf_rev.x_data[0] = 0;
 8003b0c:	4b9a      	ldr	r3, [pc, #616]	@ (8003d78 <main+0x640>)
 8003b0e:	f04f 0200 	mov.w	r2, #0
 8003b12:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
	kf_rev.x_data[1] = 0;
 8003b16:	4b98      	ldr	r3, [pc, #608]	@ (8003d78 <main+0x640>)
 8003b18:	f04f 0200 	mov.w	r2, #0
 8003b1c:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
	kf_rev.x_data[2] = 0;
 8003b20:	4b95      	ldr	r3, [pc, #596]	@ (8003d78 <main+0x640>)
 8003b22:	f04f 0200 	mov.w	r2, #0
 8003b26:	f8c3 223c 	str.w	r2, [r3, #572]	@ 0x23c
	kf_rev.x_data[3] = 0;
 8003b2a:	4b93      	ldr	r3, [pc, #588]	@ (8003d78 <main+0x640>)
 8003b2c:	f04f 0200 	mov.w	r2, #0
 8003b30:	f8c3 2240 	str.w	r2, [r3, #576]	@ 0x240

	Kalman_SetMeasurementNoise(&kf_rev, 0.08f);
 8003b34:	ed9f 0a91 	vldr	s0, [pc, #580]	@ 8003d7c <main+0x644>
 8003b38:	488f      	ldr	r0, [pc, #572]	@ (8003d78 <main+0x640>)
 8003b3a:	f7fe fc35 	bl	80023a8 <Kalman_SetMeasurementNoise>
	Kalman_SetProcessNoise(&kf_rev, 0.12f);
 8003b3e:	ed9f 0a90 	vldr	s0, [pc, #576]	@ 8003d80 <main+0x648>
 8003b42:	488d      	ldr	r0, [pc, #564]	@ (8003d78 <main+0x640>)
 8003b44:	f7fe fc00 	bl	8002348 <Kalman_SetProcessNoise>

	Pris_motor = create_prismatic_motor(2.29e-04, 4.82e-04, 8.75e-01, 1.77e-01,
 8003b48:	4c8e      	ldr	r4, [pc, #568]	@ (8003d84 <main+0x64c>)
 8003b4a:	463b      	mov	r3, r7
 8003b4c:	ed9f 6b70 	vldr	d6, [pc, #448]	@ 8003d10 <main+0x5d8>
 8003b50:	ed9f 5b71 	vldr	d5, [pc, #452]	@ 8003d18 <main+0x5e0>
 8003b54:	ed9f 4b72 	vldr	d4, [pc, #456]	@ 8003d20 <main+0x5e8>
 8003b58:	ed9f 3b71 	vldr	d3, [pc, #452]	@ 8003d20 <main+0x5e8>
 8003b5c:	ed9f 2b72 	vldr	d2, [pc, #456]	@ 8003d28 <main+0x5f0>
 8003b60:	ed9f 1b73 	vldr	d1, [pc, #460]	@ 8003d30 <main+0x5f8>
 8003b64:	ed9f 0b74 	vldr	d0, [pc, #464]	@ 8003d38 <main+0x600>
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7ff f8ff 	bl	8002d6c <create_prismatic_motor>
 8003b6e:	4625      	mov	r5, r4
 8003b70:	463c      	mov	r4, r7
 8003b72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b7e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b82:	e885 0003 	stmia.w	r5, {r0, r1}
			1.77e-01, 3.8719, 0.0016);
	Rev_motor = create_motor(1.88E-01, 6.91E-03, 7.36E-01, 1.63E+00,
 8003b86:	4c80      	ldr	r4, [pc, #512]	@ (8003d88 <main+0x650>)
 8003b88:	463b      	mov	r3, r7
 8003b8a:	ed9f 6b6d 	vldr	d6, [pc, #436]	@ 8003d40 <main+0x608>
 8003b8e:	ed9f 5b6e 	vldr	d5, [pc, #440]	@ 8003d48 <main+0x610>
 8003b92:	ed9f 4b6f 	vldr	d4, [pc, #444]	@ 8003d50 <main+0x618>
 8003b96:	ed9f 3b70 	vldr	d3, [pc, #448]	@ 8003d58 <main+0x620>
 8003b9a:	ed9f 2b71 	vldr	d2, [pc, #452]	@ 8003d60 <main+0x628>
 8003b9e:	ed9f 1b72 	vldr	d1, [pc, #456]	@ 8003d68 <main+0x630>
 8003ba2:	ed9f 0b73 	vldr	d0, [pc, #460]	@ 8003d70 <main+0x638>
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7ff f921 	bl	8002dee <create_motor>
 8003bac:	4625      	mov	r5, r4
 8003bae:	463c      	mov	r4, r7
 8003bb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bbc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003bc0:	e885 0003 	stmia.w	r5, {r0, r1}
			1.63E+00 * 7.36E-01, 5.13E-01, 3.37E-04);

	// Prismatic Position
	Pris_posi_PID.Kp = 0.3;
 8003bc4:	4b71      	ldr	r3, [pc, #452]	@ (8003d8c <main+0x654>)
 8003bc6:	4a72      	ldr	r2, [pc, #456]	@ (8003d90 <main+0x658>)
 8003bc8:	619a      	str	r2, [r3, #24]
	Pris_posi_PID.Ki = 0.01;
 8003bca:	4b70      	ldr	r3, [pc, #448]	@ (8003d8c <main+0x654>)
 8003bcc:	4a71      	ldr	r2, [pc, #452]	@ (8003d94 <main+0x65c>)
 8003bce:	61da      	str	r2, [r3, #28]
	Pris_posi_PID.Kd = 0.3;
 8003bd0:	4b6e      	ldr	r3, [pc, #440]	@ (8003d8c <main+0x654>)
 8003bd2:	4a6f      	ldr	r2, [pc, #444]	@ (8003d90 <main+0x658>)
 8003bd4:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Pris_posi_PID, 0);
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	486c      	ldr	r0, [pc, #432]	@ (8003d8c <main+0x654>)
 8003bda:	f00a ff45 	bl	800ea68 <arm_pid_init_f32>

	// Prismatic Velocity
	Pris_velo_PID.Kp = 0.08;
 8003bde:	4b6e      	ldr	r3, [pc, #440]	@ (8003d98 <main+0x660>)
 8003be0:	4a6e      	ldr	r2, [pc, #440]	@ (8003d9c <main+0x664>)
 8003be2:	619a      	str	r2, [r3, #24]
	Pris_velo_PID.Ki = 0.01;
 8003be4:	4b6c      	ldr	r3, [pc, #432]	@ (8003d98 <main+0x660>)
 8003be6:	4a6b      	ldr	r2, [pc, #428]	@ (8003d94 <main+0x65c>)
 8003be8:	61da      	str	r2, [r3, #28]
	Pris_velo_PID.Kd = 0;
 8003bea:	4b6b      	ldr	r3, [pc, #428]	@ (8003d98 <main+0x660>)
 8003bec:	f04f 0200 	mov.w	r2, #0
 8003bf0:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Pris_velo_PID, 0);
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	4868      	ldr	r0, [pc, #416]	@ (8003d98 <main+0x660>)
 8003bf6:	f00a ff37 	bl	800ea68 <arm_pid_init_f32>

	// Revolute Position
	Rev_posi_PID.Kp = 100.0;
 8003bfa:	4b69      	ldr	r3, [pc, #420]	@ (8003da0 <main+0x668>)
 8003bfc:	4a69      	ldr	r2, [pc, #420]	@ (8003da4 <main+0x66c>)
 8003bfe:	619a      	str	r2, [r3, #24]
	Rev_posi_PID.Ki = 40.0;
 8003c00:	4b67      	ldr	r3, [pc, #412]	@ (8003da0 <main+0x668>)
 8003c02:	4a69      	ldr	r2, [pc, #420]	@ (8003da8 <main+0x670>)
 8003c04:	61da      	str	r2, [r3, #28]
	Rev_posi_PID.Kd = 4.0;
 8003c06:	4b66      	ldr	r3, [pc, #408]	@ (8003da0 <main+0x668>)
 8003c08:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8003c0c:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Rev_posi_PID, 0);
 8003c0e:	2100      	movs	r1, #0
 8003c10:	4863      	ldr	r0, [pc, #396]	@ (8003da0 <main+0x668>)
 8003c12:	f00a ff29 	bl	800ea68 <arm_pid_init_f32>

	// Revolute Velocity
	Rev_velo_PID.Kp = 3.0;
 8003c16:	4b65      	ldr	r3, [pc, #404]	@ (8003dac <main+0x674>)
 8003c18:	4a65      	ldr	r2, [pc, #404]	@ (8003db0 <main+0x678>)
 8003c1a:	619a      	str	r2, [r3, #24]
	Rev_velo_PID.Ki = 0.1;
 8003c1c:	4b63      	ldr	r3, [pc, #396]	@ (8003dac <main+0x674>)
 8003c1e:	4a65      	ldr	r2, [pc, #404]	@ (8003db4 <main+0x67c>)
 8003c20:	61da      	str	r2, [r3, #28]
	Rev_velo_PID.Kd = 0;
 8003c22:	4b62      	ldr	r3, [pc, #392]	@ (8003dac <main+0x674>)
 8003c24:	f04f 0200 	mov.w	r2, #0
 8003c28:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Rev_velo_PID, 0);
 8003c2a:	2100      	movs	r1, #0
 8003c2c:	485f      	ldr	r0, [pc, #380]	@ (8003dac <main+0x674>)
 8003c2e:	f00a ff1b 	bl	800ea68 <arm_pid_init_f32>

	Backlash_Init(&Rev_backlash, 0.0349066);
 8003c32:	ed9f 0a61 	vldr	s0, [pc, #388]	@ 8003db8 <main+0x680>
 8003c36:	4861      	ldr	r0, [pc, #388]	@ (8003dbc <main+0x684>)
 8003c38:	f7fd fa8d 	bl	8001156 <Backlash_Init>
	encoder2.position = 0; // offset
 8003c3c:	4b60      	ldr	r3, [pc, #384]	@ (8003dc0 <main+0x688>)
 8003c3e:	f04f 0200 	mov.w	r2, #0
 8003c42:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		uint64_t currentTick = HAL_GetTick();
 8003c44:	f002 fbb8 	bl	80063b8 <HAL_GetTick>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	469a      	mov	sl, r3
 8003c4e:	4693      	mov	fp, r2
 8003c50:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	@ 0x68
		float dt = (currentTick - lastTick) / 1000.0f;
 8003c54:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003c58:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003c5c:	ebb0 0802 	subs.w	r8, r0, r2
 8003c60:	eb61 0903 	sbc.w	r9, r1, r3
 8003c64:	4640      	mov	r0, r8
 8003c66:	4649      	mov	r1, r9
 8003c68:	f7fd f87a 	bl	8000d60 <__aeabi_ul2f>
 8003c6c:	ee06 0a90 	vmov	s13, r0
 8003c70:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8003dc4 <main+0x68c>
 8003c74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c78:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
		Modbus_Protocal_Worker();
 8003c7c:	f7fe fe02 	bl	8002884 <Modbus_Protocal_Worker>
		modbus_heartbeat(&hmodbus);
 8003c80:	4851      	ldr	r0, [pc, #324]	@ (8003dc8 <main+0x690>)
 8003c82:	f7fd fae8 	bl	8001256 <modbus_heartbeat>
		Base_Sysytem_status = modbus_Base_System_Status(&hmodbus);
 8003c86:	4850      	ldr	r0, [pc, #320]	@ (8003dc8 <main+0x690>)
 8003c88:	f7fd faf4 	bl	8001274 <modbus_Base_System_Status>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	461a      	mov	r2, r3
 8003c90:	4b4e      	ldr	r3, [pc, #312]	@ (8003dcc <main+0x694>)
 8003c92:	701a      	strb	r2, [r3, #0]
		PS2_ReadData();
 8003c94:	f7fe f9e4 	bl	8002060 <PS2_ReadData>
		if (modbus_write_servo_up(&hmodbus) == 1) {
 8003c98:	484b      	ldr	r0, [pc, #300]	@ (8003dc8 <main+0x690>)
 8003c9a:	f7fd fb0d 	bl	80012b8 <modbus_write_servo_up>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d102      	bne.n	8003caa <main+0x572>
			plotter = 1;
 8003ca4:	4b4a      	ldr	r3, [pc, #296]	@ (8003dd0 <main+0x698>)
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	601a      	str	r2, [r3, #0]
		}
		if (modbus_write_servo_down(&hmodbus) == 1) {
 8003caa:	4847      	ldr	r0, [pc, #284]	@ (8003dc8 <main+0x690>)
 8003cac:	f7fd fb14 	bl	80012d8 <modbus_write_servo_down>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d102      	bne.n	8003cbc <main+0x584>
			plotter = 2;
 8003cb6:	4b46      	ldr	r3, [pc, #280]	@ (8003dd0 <main+0x698>)
 8003cb8:	2202      	movs	r2, #2
 8003cba:	601a      	str	r2, [r3, #0]
		}

		t_global = HAL_GetTick() / 1000.0f;
 8003cbc:	f002 fb7c 	bl	80063b8 <HAL_GetTick>
 8003cc0:	ee07 0a90 	vmov	s15, r0
 8003cc4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003cc8:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8003dc4 <main+0x68c>
 8003ccc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003cd0:	4b40      	ldr	r3, [pc, #256]	@ (8003dd4 <main+0x69c>)
 8003cd2:	edc3 7a00 	vstr	s15, [r3]

		uint32_t now = HAL_GetTick();
 8003cd6:	f002 fb6f 	bl	80063b8 <HAL_GetTick>
 8003cda:	6638      	str	r0, [r7, #96]	@ 0x60
		if (now - last_servo_tick >= 500) {
 8003cdc:	4b3e      	ldr	r3, [pc, #248]	@ (8003dd8 <main+0x6a0>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003ce8:	f0c0 8084 	bcc.w	8003df4 <main+0x6bc>
			last_servo_tick = now;
 8003cec:	4a3a      	ldr	r2, [pc, #232]	@ (8003dd8 <main+0x6a0>)
 8003cee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003cf0:	6013      	str	r3, [r2, #0]
			if (servo_state == 0) {
 8003cf2:	4b3a      	ldr	r3, [pc, #232]	@ (8003ddc <main+0x6a4>)
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d174      	bne.n	8003de4 <main+0x6ac>
				__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 500);
 8003cfa:	4b39      	ldr	r3, [pc, #228]	@ (8003de0 <main+0x6a8>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003d02:	641a      	str	r2, [r3, #64]	@ 0x40
				servo_state = 1;
 8003d04:	4b35      	ldr	r3, [pc, #212]	@ (8003ddc <main+0x6a4>)
 8003d06:	2201      	movs	r2, #1
 8003d08:	701a      	strb	r2, [r3, #0]
 8003d0a:	e073      	b.n	8003df4 <main+0x6bc>
 8003d0c:	f3af 8000 	nop.w
 8003d10:	eb1c432d 	.word	0xeb1c432d
 8003d14:	3f5a36e2 	.word	0x3f5a36e2
 8003d18:	b50b0f28 	.word	0xb50b0f28
 8003d1c:	400ef9a6 	.word	0x400ef9a6
 8003d20:	9db22d0e 	.word	0x9db22d0e
 8003d24:	3fc6a7ef 	.word	0x3fc6a7ef
 8003d28:	00000000 	.word	0x00000000
 8003d2c:	3fec0000 	.word	0x3fec0000
 8003d30:	3c968944 	.word	0x3c968944
 8003d34:	3f3f969e 	.word	0x3f3f969e
 8003d38:	05857aff 	.word	0x05857aff
 8003d3c:	3f2e03f7 	.word	0x3f2e03f7
 8003d40:	fa8f7db7 	.word	0xfa8f7db7
 8003d44:	3f3615eb 	.word	0x3f3615eb
 8003d48:	f9db22d1 	.word	0xf9db22d1
 8003d4c:	3fe06a7e 	.word	0x3fe06a7e
 8003d50:	a7daa4fc 	.word	0xa7daa4fc
 8003d54:	3ff331e3 	.word	0x3ff331e3
 8003d58:	e147ae14 	.word	0xe147ae14
 8003d5c:	3ffa147a 	.word	0x3ffa147a
 8003d60:	df3b645a 	.word	0xdf3b645a
 8003d64:	3fe78d4f 	.word	0x3fe78d4f
 8003d68:	003eea21 	.word	0x003eea21
 8003d6c:	3f7c4da9 	.word	0x3f7c4da9
 8003d70:	4dd2f1aa 	.word	0x4dd2f1aa
 8003d74:	3fc81062 	.word	0x3fc81062
 8003d78:	2000120c 	.word	0x2000120c
 8003d7c:	3da3d70a 	.word	0x3da3d70a
 8003d80:	3df5c28f 	.word	0x3df5c28f
 8003d84:	20001530 	.word	0x20001530
 8003d88:	20001568 	.word	0x20001568
 8003d8c:	20000de4 	.word	0x20000de4
 8003d90:	3e99999a 	.word	0x3e99999a
 8003d94:	3c23d70a 	.word	0x3c23d70a
 8003d98:	20000e24 	.word	0x20000e24
 8003d9c:	3da3d70a 	.word	0x3da3d70a
 8003da0:	20000e64 	.word	0x20000e64
 8003da4:	42c80000 	.word	0x42c80000
 8003da8:	42200000 	.word	0x42200000
 8003dac:	20000ea0 	.word	0x20000ea0
 8003db0:	40400000 	.word	0x40400000
 8003db4:	3dcccccd 	.word	0x3dcccccd
 8003db8:	3d0efa39 	.word	0x3d0efa39
 8003dbc:	20000dd8 	.word	0x20000dd8
 8003dc0:	200003f8 	.word	0x200003f8
 8003dc4:	447a0000 	.word	0x447a0000
 8003dc8:	20000750 	.word	0x20000750
 8003dcc:	20000db8 	.word	0x20000db8
 8003dd0:	200016a4 	.word	0x200016a4
 8003dd4:	20000718 	.word	0x20000718
 8003dd8:	200016a8 	.word	0x200016a8
 8003ddc:	200016ac 	.word	0x200016ac
 8003de0:	20001a44 	.word	0x20001a44
			} else {
				__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 2000);
 8003de4:	4b93      	ldr	r3, [pc, #588]	@ (8004034 <main+0x8fc>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003dec:	641a      	str	r2, [r3, #64]	@ 0x40
				servo_state = 0;
 8003dee:	4b92      	ldr	r3, [pc, #584]	@ (8004038 <main+0x900>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	701a      	strb	r2, [r3, #0]
			}
		}

		if (dt >= 0.001f) {
 8003df4:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8003df8:	ed9f 7a90 	vldr	s14, [pc, #576]	@ 800403c <main+0x904>
 8003dfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e04:	f2c0 869f 	blt.w	8004b46 <main+0x140e>

			HAL_ADC_Start(&hadc1);
 8003e08:	488d      	ldr	r0, [pc, #564]	@ (8004040 <main+0x908>)
 8003e0a:	f002 fea9 	bl	8006b60 <HAL_ADC_Start>
			HAL_ADC_Start(&hadc2);
 8003e0e:	488d      	ldr	r0, [pc, #564]	@ (8004044 <main+0x90c>)
 8003e10:	f002 fea6 	bl	8006b60 <HAL_ADC_Start>
			adc_1 = HAL_ADC_GetValue(&hadc1);
 8003e14:	488a      	ldr	r0, [pc, #552]	@ (8004040 <main+0x908>)
 8003e16:	f002 ff87 	bl	8006d28 <HAL_ADC_GetValue>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	4b8a      	ldr	r3, [pc, #552]	@ (8004048 <main+0x910>)
 8003e20:	801a      	strh	r2, [r3, #0]
			adc_2 = HAL_ADC_GetValue(&hadc2);
 8003e22:	4888      	ldr	r0, [pc, #544]	@ (8004044 <main+0x90c>)
 8003e24:	f002 ff80 	bl	8006d28 <HAL_ADC_GetValue>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	b29a      	uxth	r2, r3
 8003e2c:	4b87      	ldr	r3, [pc, #540]	@ (800404c <main+0x914>)
 8003e2e:	801a      	strh	r2, [r3, #0]

			Encoder_Update(&encoder1, dt);
 8003e30:	ed97 0a19 	vldr	s0, [r7, #100]	@ 0x64
 8003e34:	4886      	ldr	r0, [pc, #536]	@ (8004050 <main+0x918>)
 8003e36:	f7fd fff3 	bl	8001e20 <Encoder_Update>
			Encoder_Update(&encoder2, dt);
 8003e3a:	ed97 0a19 	vldr	s0, [r7, #100]	@ 0x64
 8003e3e:	4885      	ldr	r0, [pc, #532]	@ (8004054 <main+0x91c>)
 8003e40:	f7fd ffee 	bl	8001e20 <Encoder_Update>
			QEIReadRaw3 = __HAL_TIM_GET_COUNTER(&htim3);
 8003e44:	4b84      	ldr	r3, [pc, #528]	@ (8004058 <main+0x920>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4a:	4a84      	ldr	r2, [pc, #528]	@ (800405c <main+0x924>)
 8003e4c:	6013      	str	r3, [r2, #0]
			QEIReadRaw4 = __HAL_TIM_GET_COUNTER(&htim4);
 8003e4e:	4b84      	ldr	r3, [pc, #528]	@ (8004060 <main+0x928>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e54:	4a83      	ldr	r2, [pc, #524]	@ (8004064 <main+0x92c>)
 8003e56:	6013      	str	r3, [r2, #0]

			p1 = Encoder_GetPosition(&encoder1);
 8003e58:	487d      	ldr	r0, [pc, #500]	@ (8004050 <main+0x918>)
 8003e5a:	f7fe f897 	bl	8001f8c <Encoder_GetPosition>
 8003e5e:	eef0 7a40 	vmov.f32	s15, s0
 8003e62:	4b81      	ldr	r3, [pc, #516]	@ (8004068 <main+0x930>)
 8003e64:	edc3 7a00 	vstr	s15, [r3]
			v1 = Encoder_GetVelocity(&encoder1);
 8003e68:	4879      	ldr	r0, [pc, #484]	@ (8004050 <main+0x918>)
 8003e6a:	f7fe f89e 	bl	8001faa <Encoder_GetVelocity>
 8003e6e:	eef0 7a40 	vmov.f32	s15, s0
 8003e72:	4b7e      	ldr	r3, [pc, #504]	@ (800406c <main+0x934>)
 8003e74:	edc3 7a00 	vstr	s15, [r3]
			a1 = Encoder_GetAcceleration(&encoder1);
 8003e78:	4875      	ldr	r0, [pc, #468]	@ (8004050 <main+0x918>)
 8003e7a:	f7fe f8a5 	bl	8001fc8 <Encoder_GetAcceleration>
 8003e7e:	eef0 7a40 	vmov.f32	s15, s0
 8003e82:	4b7b      	ldr	r3, [pc, #492]	@ (8004070 <main+0x938>)
 8003e84:	edc3 7a00 	vstr	s15, [r3]

			p2 = Encoder_GetPosition(&encoder2);
 8003e88:	4872      	ldr	r0, [pc, #456]	@ (8004054 <main+0x91c>)
 8003e8a:	f7fe f87f 	bl	8001f8c <Encoder_GetPosition>
 8003e8e:	eef0 7a40 	vmov.f32	s15, s0
 8003e92:	4b78      	ldr	r3, [pc, #480]	@ (8004074 <main+0x93c>)
 8003e94:	edc3 7a00 	vstr	s15, [r3]
			v2 = Encoder_GetVelocity(&encoder2);
 8003e98:	486e      	ldr	r0, [pc, #440]	@ (8004054 <main+0x91c>)
 8003e9a:	f7fe f886 	bl	8001faa <Encoder_GetVelocity>
 8003e9e:	eef0 7a40 	vmov.f32	s15, s0
 8003ea2:	4b75      	ldr	r3, [pc, #468]	@ (8004078 <main+0x940>)
 8003ea4:	edc3 7a00 	vstr	s15, [r3]
			a2 = Encoder_GetAcceleration(&encoder2);
 8003ea8:	486a      	ldr	r0, [pc, #424]	@ (8004054 <main+0x91c>)
 8003eaa:	f7fe f88d 	bl	8001fc8 <Encoder_GetAcceleration>
 8003eae:	eef0 7a40 	vmov.f32	s15, s0
 8003eb2:	4b72      	ldr	r3, [pc, #456]	@ (800407c <main+0x944>)
 8003eb4:	edc3 7a00 	vstr	s15, [r3]

			if (Base_Sysytem_status == Base_Home) {
 8003eb8:	4b71      	ldr	r3, [pc, #452]	@ (8004080 <main+0x948>)
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d104      	bne.n	8003eca <main+0x792>

				R_Theta_moving_Status(&hmodbus, Home);
 8003ec0:	2101      	movs	r1, #1
 8003ec2:	4870      	ldr	r0, [pc, #448]	@ (8004084 <main+0x94c>)
 8003ec4:	f7fd fa18 	bl	80012f8 <R_Theta_moving_Status>
 8003ec8:	e3f9      	b.n	80046be <main+0xf86>
//					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0); // 0 or 1
//					__HAL_TIM_SET_COMPARE(&htim20, TIM_CHANNEL_1, 0);
////					set_home_pris = 0;
//				}

			} else if (Base_Sysytem_status == Base_Run_Jog_mode) {
 8003eca:	4b6d      	ldr	r3, [pc, #436]	@ (8004080 <main+0x948>)
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	f040 832c 	bne.w	800452c <main+0xdf4>

				R_Theta_moving_Status(&hmodbus, Run_Jog_mode);
 8003ed4:	2102      	movs	r1, #2
 8003ed6:	486b      	ldr	r0, [pc, #428]	@ (8004084 <main+0x94c>)
 8003ed8:	f7fd fa0e 	bl	80012f8 <R_Theta_moving_Status>

				Circle = PS2_ButtonCircle();
 8003edc:	f7fe f8f2 	bl	80020c4 <PS2_ButtonCircle>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	4b68      	ldr	r3, [pc, #416]	@ (8004088 <main+0x950>)
 8003ee6:	601a      	str	r2, [r3, #0]
				Square = PS2_ButtonSquare();
 8003ee8:	f7fe f8fe 	bl	80020e8 <PS2_ButtonSquare>
 8003eec:	4603      	mov	r3, r0
 8003eee:	461a      	mov	r2, r3
 8003ef0:	4b66      	ldr	r3, [pc, #408]	@ (800408c <main+0x954>)
 8003ef2:	601a      	str	r2, [r3, #0]
				Triangle = PS2_ButtonTriangle();
 8003ef4:	f7fe f908 	bl	8002108 <PS2_ButtonTriangle>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	461a      	mov	r2, r3
 8003efc:	4b64      	ldr	r3, [pc, #400]	@ (8004090 <main+0x958>)
 8003efe:	601a      	str	r2, [r3, #0]
				Cross = PS2_ButtonCross();
 8003f00:	f7fe f914 	bl	800212c <PS2_ButtonCross>
 8003f04:	4603      	mov	r3, r0
 8003f06:	461a      	mov	r2, r3
 8003f08:	4b62      	ldr	r3, [pc, #392]	@ (8004094 <main+0x95c>)
 8003f0a:	601a      	str	r2, [r3, #0]
				R1 = PS2_ButtonR1();
 8003f0c:	f7fe f920 	bl	8002150 <PS2_ButtonR1>
 8003f10:	4603      	mov	r3, r0
 8003f12:	461a      	mov	r2, r3
 8003f14:	4b60      	ldr	r3, [pc, #384]	@ (8004098 <main+0x960>)
 8003f16:	601a      	str	r2, [r3, #0]
				R2 = PS2_ButtonR2();
 8003f18:	f7fe f92c 	bl	8002174 <PS2_ButtonR2>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	461a      	mov	r2, r3
 8003f20:	4b5e      	ldr	r3, [pc, #376]	@ (800409c <main+0x964>)
 8003f22:	601a      	str	r2, [r3, #0]
				Select = PS2_ButtonSelect();
 8003f24:	f7fe f938 	bl	8002198 <PS2_ButtonSelect>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	4b5c      	ldr	r3, [pc, #368]	@ (80040a0 <main+0x968>)
 8003f2e:	601a      	str	r2, [r3, #0]
				Start = PS2_ButtonStart();
 8003f30:	f7fe f944 	bl	80021bc <PS2_ButtonStart>
 8003f34:	4603      	mov	r3, r0
 8003f36:	461a      	mov	r2, r3
 8003f38:	4b5a      	ldr	r3, [pc, #360]	@ (80040a4 <main+0x96c>)
 8003f3a:	601a      	str	r2, [r3, #0]
				L2 = PS2_ButtonL2();
 8003f3c:	f7fe f950 	bl	80021e0 <PS2_ButtonL2>
 8003f40:	4603      	mov	r3, r0
 8003f42:	461a      	mov	r2, r3
 8003f44:	4b58      	ldr	r3, [pc, #352]	@ (80040a8 <main+0x970>)
 8003f46:	601a      	str	r2, [r3, #0]
//				} else {
//					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0); // 0 or 1
//					__HAL_TIM_SET_COMPARE(&htim20, TIM_CHANNEL_1, 0);
//				}

				if (PS2_ButtonR1()) {
 8003f48:	f7fe f902 	bl	8002150 <PS2_ButtonR1>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d005      	beq.n	8003f5e <main+0x826>
					// Servo/Pen Move up
					__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 500);
 8003f52:	4b38      	ldr	r3, [pc, #224]	@ (8004034 <main+0x8fc>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003f5a:	641a      	str	r2, [r3, #64]	@ 0x40
 8003f5c:	e00e      	b.n	8003f7c <main+0x844>
				} else if (PS2_ButtonR2()) {
 8003f5e:	f7fe f909 	bl	8002174 <PS2_ButtonR2>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d005      	beq.n	8003f74 <main+0x83c>
					// Servo/Pen Move Down
					__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 2000);
 8003f68:	4b32      	ldr	r3, [pc, #200]	@ (8004034 <main+0x8fc>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003f70:	641a      	str	r2, [r3, #64]	@ 0x40
 8003f72:	e003      	b.n	8003f7c <main+0x844>
				} else {
					__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 0);
 8003f74:	4b2f      	ldr	r3, [pc, #188]	@ (8004034 <main+0x8fc>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	641a      	str	r2, [r3, #64]	@ 0x40
				}

				uint8_t selectPressed = PS2_ButtonL2();
 8003f7c:	f7fe f930 	bl	80021e0 <PS2_ButtonL2>
 8003f80:	4603      	mov	r3, r0
 8003f82:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
				static uint8_t prevSelect = 0;
				if (selectPressed && !prevSelect) {
 8003f86:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d038      	beq.n	8004000 <main+0x8c8>
 8003f8e:	4b47      	ldr	r3, [pc, #284]	@ (80040ac <main+0x974>)
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d134      	bne.n	8004000 <main+0x8c8>
					if (count < 11) {
 8003f96:	4b46      	ldr	r3, [pc, #280]	@ (80040b0 <main+0x978>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2b0a      	cmp	r3, #10
 8003f9c:	dc30      	bgt.n	8004000 <main+0x8c8>
						PrismaticTenPoints[count] = roundf(Encoder_GetPosition_mm(&encoder1) * 10.0f);
 8003f9e:	482c      	ldr	r0, [pc, #176]	@ (8004050 <main+0x918>)
 8003fa0:	f7fe f830 	bl	8002004 <Encoder_GetPosition_mm>
 8003fa4:	eef0 7a40 	vmov.f32	s15, s0
 8003fa8:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8003fac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fb0:	4b3f      	ldr	r3, [pc, #252]	@ (80040b0 <main+0x978>)
 8003fb2:	681c      	ldr	r4, [r3, #0]
 8003fb4:	eeb0 0a67 	vmov.f32	s0, s15
 8003fb8:	f00b fcf0 	bl	800f99c <roundf>
 8003fbc:	eef0 7a40 	vmov.f32	s15, s0
 8003fc0:	4a3c      	ldr	r2, [pc, #240]	@ (80040b4 <main+0x97c>)
 8003fc2:	00a3      	lsls	r3, r4, #2
 8003fc4:	4413      	add	r3, r2
 8003fc6:	edc3 7a00 	vstr	s15, [r3]
						RevoluteTenPoints[count] = roundf(Encoder_GetDegree(&encoder2) * 10.0f);
 8003fca:	4822      	ldr	r0, [pc, #136]	@ (8004054 <main+0x91c>)
 8003fcc:	f7fe f80b 	bl	8001fe6 <Encoder_GetDegree>
 8003fd0:	eef0 7a40 	vmov.f32	s15, s0
 8003fd4:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8003fd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fdc:	4b34      	ldr	r3, [pc, #208]	@ (80040b0 <main+0x978>)
 8003fde:	681c      	ldr	r4, [r3, #0]
 8003fe0:	eeb0 0a67 	vmov.f32	s0, s15
 8003fe4:	f00b fcda 	bl	800f99c <roundf>
 8003fe8:	eef0 7a40 	vmov.f32	s15, s0
 8003fec:	4a32      	ldr	r2, [pc, #200]	@ (80040b8 <main+0x980>)
 8003fee:	00a3      	lsls	r3, r4, #2
 8003ff0:	4413      	add	r3, r2
 8003ff2:	edc3 7a00 	vstr	s15, [r3]
//						PrismaticTenPoints[count] = count;
//						RevoluteTenPoints[count] = count;
						count += 1;
 8003ff6:	4b2e      	ldr	r3, [pc, #184]	@ (80040b0 <main+0x978>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	4a2c      	ldr	r2, [pc, #176]	@ (80040b0 <main+0x978>)
 8003ffe:	6013      	str	r3, [r2, #0]
					}
				}
				prevSelect = selectPressed;
 8004000:	4a2a      	ldr	r2, [pc, #168]	@ (80040ac <main+0x974>)
 8004002:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004006:	7013      	strb	r3, [r2, #0]

				static uint8_t prevStart = 0;
				uint8_t nowStart = PS2_ButtonStart();
 8004008:	f7fe f8d8 	bl	80021bc <PS2_ButtonStart>
 800400c:	4603      	mov	r3, r0
 800400e:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
				if (nowStart && !prevStart) {
 8004012:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 8004016:	2b00      	cmp	r3, #0
 8004018:	f000 8158 	beq.w	80042cc <main+0xb94>
 800401c:	4b27      	ldr	r3, [pc, #156]	@ (80040bc <main+0x984>)
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	2b00      	cmp	r3, #0
 8004022:	f040 8153 	bne.w	80042cc <main+0xb94>
				    traj_start_time = t_global;
 8004026:	4b26      	ldr	r3, [pc, #152]	@ (80040c0 <main+0x988>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a26      	ldr	r2, [pc, #152]	@ (80040c4 <main+0x98c>)
 800402c:	6013      	str	r3, [r2, #0]
				    for (int i = 0; i < 10; i++) {
 800402e:	2300      	movs	r3, #0
 8004030:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004032:	e144      	b.n	80042be <main+0xb86>
 8004034:	20001a44 	.word	0x20001a44
 8004038:	200016ac 	.word	0x200016ac
 800403c:	3a83126f 	.word	0x3a83126f
 8004040:	200002e8 	.word	0x200002e8
 8004044:	20000354 	.word	0x20000354
 8004048:	2000074c 	.word	0x2000074c
 800404c:	2000074e 	.word	0x2000074e
 8004050:	200003c4 	.word	0x200003c4
 8004054:	200003f8 	.word	0x200003f8
 8004058:	200018ac 	.word	0x200018ac
 800405c:	2000042c 	.word	0x2000042c
 8004060:	20001978 	.word	0x20001978
 8004064:	20000430 	.word	0x20000430
 8004068:	20000730 	.word	0x20000730
 800406c:	20000734 	.word	0x20000734
 8004070:	20000738 	.word	0x20000738
 8004074:	2000073c 	.word	0x2000073c
 8004078:	20000740 	.word	0x20000740
 800407c:	20000744 	.word	0x20000744
 8004080:	20000db8 	.word	0x20000db8
 8004084:	20000750 	.word	0x20000750
 8004088:	200015cc 	.word	0x200015cc
 800408c:	200015d0 	.word	0x200015d0
 8004090:	200015d4 	.word	0x200015d4
 8004094:	200015d8 	.word	0x200015d8
 8004098:	200015dc 	.word	0x200015dc
 800409c:	200015e0 	.word	0x200015e0
 80040a0:	200015e4 	.word	0x200015e4
 80040a4:	200015e8 	.word	0x200015e8
 80040a8:	200015ec 	.word	0x200015ec
 80040ac:	200016ad 	.word	0x200016ad
 80040b0:	20000260 	.word	0x20000260
 80040b4:	20000208 	.word	0x20000208
 80040b8:	20000234 	.word	0x20000234
 80040bc:	200016ae 	.word	0x200016ae
 80040c0:	20000718 	.word	0x20000718
 80040c4:	2000071c 	.word	0x2000071c
				        float start_pris = PrismaticTenPoints[i] / 10.0f;
 80040c8:	4aae      	ldr	r2, [pc, #696]	@ (8004384 <main+0xc4c>)
 80040ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	4413      	add	r3, r2
 80040d0:	ed93 7a00 	vldr	s14, [r3]
 80040d4:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80040d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80040dc:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
				        float end_pris = PrismaticTenPoints[i + 1] / 10.0f;
 80040e0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80040e2:	3301      	adds	r3, #1
 80040e4:	4aa7      	ldr	r2, [pc, #668]	@ (8004384 <main+0xc4c>)
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	4413      	add	r3, r2
 80040ea:	ed93 7a00 	vldr	s14, [r3]
 80040ee:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80040f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80040f6:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
				        float start_rev = RevoluteTenPoints[i] / 10.0f;
 80040fa:	4aa3      	ldr	r2, [pc, #652]	@ (8004388 <main+0xc50>)
 80040fc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	4413      	add	r3, r2
 8004102:	ed93 7a00 	vldr	s14, [r3]
 8004106:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800410a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800410e:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
				        float end_rev = RevoluteTenPoints[i + 1] / 10.0f;
 8004112:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004114:	3301      	adds	r3, #1
 8004116:	4a9c      	ldr	r2, [pc, #624]	@ (8004388 <main+0xc50>)
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	4413      	add	r3, r2
 800411c:	ed93 7a00 	vldr	s14, [r3]
 8004120:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8004124:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004128:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

				        float t_start_pris = (i == 0) ? 0.0f : Prismatic[i - 1].t_start + Prismatic[i - 1].t_total + delay_pris[i - 1];
 800412c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800412e:	2b00      	cmp	r3, #0
 8004130:	d021      	beq.n	8004176 <main+0xa3e>
 8004132:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004134:	1e5a      	subs	r2, r3, #1
 8004136:	4995      	ldr	r1, [pc, #596]	@ (800438c <main+0xc54>)
 8004138:	4613      	mov	r3, r2
 800413a:	00db      	lsls	r3, r3, #3
 800413c:	4413      	add	r3, r2
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	440b      	add	r3, r1
 8004142:	3320      	adds	r3, #32
 8004144:	ed93 7a00 	vldr	s14, [r3]
 8004148:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800414a:	1e5a      	subs	r2, r3, #1
 800414c:	498f      	ldr	r1, [pc, #572]	@ (800438c <main+0xc54>)
 800414e:	4613      	mov	r3, r2
 8004150:	00db      	lsls	r3, r3, #3
 8004152:	4413      	add	r3, r2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	440b      	add	r3, r1
 8004158:	331c      	adds	r3, #28
 800415a:	edd3 7a00 	vldr	s15, [r3]
 800415e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004162:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004164:	3b01      	subs	r3, #1
 8004166:	4a8a      	ldr	r2, [pc, #552]	@ (8004390 <main+0xc58>)
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	4413      	add	r3, r2
 800416c:	edd3 7a00 	vldr	s15, [r3]
 8004170:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004174:	e001      	b.n	800417a <main+0xa42>
 8004176:	eddf 7a87 	vldr	s15, [pc, #540]	@ 8004394 <main+0xc5c>
 800417a:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
				        InitTrajectorySegment(&Prismatic[i], start_pris, end_pris, v_max_pris, a_max_pris, t_start_pris);
 800417e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004180:	4613      	mov	r3, r2
 8004182:	00db      	lsls	r3, r3, #3
 8004184:	4413      	add	r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	4a80      	ldr	r2, [pc, #512]	@ (800438c <main+0xc54>)
 800418a:	4413      	add	r3, r2
 800418c:	ed97 2a11 	vldr	s4, [r7, #68]	@ 0x44
 8004190:	eddf 1a81 	vldr	s3, [pc, #516]	@ 8004398 <main+0xc60>
 8004194:	ed9f 1a81 	vldr	s2, [pc, #516]	@ 800439c <main+0xc64>
 8004198:	edd7 0a14 	vldr	s1, [r7, #80]	@ 0x50
 800419c:	ed97 0a15 	vldr	s0, [r7, #84]	@ 0x54
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7fe fe65 	bl	8002e70 <InitTrajectorySegment>
				        delay_pris[i] = 5.5f - Prismatic[i].t_total;
 80041a6:	4979      	ldr	r1, [pc, #484]	@ (800438c <main+0xc54>)
 80041a8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80041aa:	4613      	mov	r3, r2
 80041ac:	00db      	lsls	r3, r3, #3
 80041ae:	4413      	add	r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	440b      	add	r3, r1
 80041b4:	331c      	adds	r3, #28
 80041b6:	edd3 7a00 	vldr	s15, [r3]
 80041ba:	eeb1 7a06 	vmov.f32	s14, #22	@ 0x40b00000  5.5
 80041be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041c2:	4a73      	ldr	r2, [pc, #460]	@ (8004390 <main+0xc58>)
 80041c4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	4413      	add	r3, r2
 80041ca:	edc3 7a00 	vstr	s15, [r3]
				        if (delay_pris[i] < 0.0f) delay_pris[i] = 0.0f;
 80041ce:	4a70      	ldr	r2, [pc, #448]	@ (8004390 <main+0xc58>)
 80041d0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	4413      	add	r3, r2
 80041d6:	edd3 7a00 	vldr	s15, [r3]
 80041da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041e2:	d506      	bpl.n	80041f2 <main+0xaba>
 80041e4:	4a6a      	ldr	r2, [pc, #424]	@ (8004390 <main+0xc58>)
 80041e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	4413      	add	r3, r2
 80041ec:	f04f 0200 	mov.w	r2, #0
 80041f0:	601a      	str	r2, [r3, #0]

				        float t_start_rev = (i == 0) ? 0.0f : Revolute[i - 1].t_start + Revolute[i - 1].t_total + delay_rev[i - 1];
 80041f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d021      	beq.n	800423c <main+0xb04>
 80041f8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80041fa:	1e5a      	subs	r2, r3, #1
 80041fc:	4968      	ldr	r1, [pc, #416]	@ (80043a0 <main+0xc68>)
 80041fe:	4613      	mov	r3, r2
 8004200:	00db      	lsls	r3, r3, #3
 8004202:	4413      	add	r3, r2
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	440b      	add	r3, r1
 8004208:	3320      	adds	r3, #32
 800420a:	ed93 7a00 	vldr	s14, [r3]
 800420e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004210:	1e5a      	subs	r2, r3, #1
 8004212:	4963      	ldr	r1, [pc, #396]	@ (80043a0 <main+0xc68>)
 8004214:	4613      	mov	r3, r2
 8004216:	00db      	lsls	r3, r3, #3
 8004218:	4413      	add	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	440b      	add	r3, r1
 800421e:	331c      	adds	r3, #28
 8004220:	edd3 7a00 	vldr	s15, [r3]
 8004224:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004228:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800422a:	3b01      	subs	r3, #1
 800422c:	4a5d      	ldr	r2, [pc, #372]	@ (80043a4 <main+0xc6c>)
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	4413      	add	r3, r2
 8004232:	edd3 7a00 	vldr	s15, [r3]
 8004236:	ee77 7a27 	vadd.f32	s15, s14, s15
 800423a:	e001      	b.n	8004240 <main+0xb08>
 800423c:	eddf 7a55 	vldr	s15, [pc, #340]	@ 8004394 <main+0xc5c>
 8004240:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
				        InitTrajectorySegment(&Revolute[i], start_rev, end_rev, v_max_rev, a_max_rev, t_start_rev);
 8004244:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004246:	4613      	mov	r3, r2
 8004248:	00db      	lsls	r3, r3, #3
 800424a:	4413      	add	r3, r2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	4a54      	ldr	r2, [pc, #336]	@ (80043a0 <main+0xc68>)
 8004250:	4413      	add	r3, r2
 8004252:	ed97 2a10 	vldr	s4, [r7, #64]	@ 0x40
 8004256:	eddf 1a54 	vldr	s3, [pc, #336]	@ 80043a8 <main+0xc70>
 800425a:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 800425e:	edd7 0a12 	vldr	s1, [r7, #72]	@ 0x48
 8004262:	ed97 0a13 	vldr	s0, [r7, #76]	@ 0x4c
 8004266:	4618      	mov	r0, r3
 8004268:	f7fe fe02 	bl	8002e70 <InitTrajectorySegment>
				        delay_rev[i] = 5.5f - Revolute[i].t_total;
 800426c:	494c      	ldr	r1, [pc, #304]	@ (80043a0 <main+0xc68>)
 800426e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004270:	4613      	mov	r3, r2
 8004272:	00db      	lsls	r3, r3, #3
 8004274:	4413      	add	r3, r2
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	440b      	add	r3, r1
 800427a:	331c      	adds	r3, #28
 800427c:	edd3 7a00 	vldr	s15, [r3]
 8004280:	eeb1 7a06 	vmov.f32	s14, #22	@ 0x40b00000  5.5
 8004284:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004288:	4a46      	ldr	r2, [pc, #280]	@ (80043a4 <main+0xc6c>)
 800428a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	4413      	add	r3, r2
 8004290:	edc3 7a00 	vstr	s15, [r3]
				        if (delay_rev[i] < 0.0f) delay_rev[i] = 0.0f;
 8004294:	4a43      	ldr	r2, [pc, #268]	@ (80043a4 <main+0xc6c>)
 8004296:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	4413      	add	r3, r2
 800429c:	edd3 7a00 	vldr	s15, [r3]
 80042a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80042a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042a8:	d506      	bpl.n	80042b8 <main+0xb80>
 80042aa:	4a3e      	ldr	r2, [pc, #248]	@ (80043a4 <main+0xc6c>)
 80042ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	4413      	add	r3, r2
 80042b2:	f04f 0200 	mov.w	r2, #0
 80042b6:	601a      	str	r2, [r3, #0]
				    for (int i = 0; i < 10; i++) {
 80042b8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80042ba:	3301      	adds	r3, #1
 80042bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80042be:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80042c0:	2b09      	cmp	r3, #9
 80042c2:	f77f af01 	ble.w	80040c8 <main+0x990>
				    }
				    current_segment = 0;
 80042c6:	4b39      	ldr	r3, [pc, #228]	@ (80043ac <main+0xc74>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	601a      	str	r2, [r3, #0]
				}
				prevStart = nowStart;
 80042cc:	4a38      	ldr	r2, [pc, #224]	@ (80043b0 <main+0xc78>)
 80042ce:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 80042d2:	7013      	strb	r3, [r2, #0]

				float t_relative = t_global - traj_start_time;
 80042d4:	4b37      	ldr	r3, [pc, #220]	@ (80043b4 <main+0xc7c>)
 80042d6:	ed93 7a00 	vldr	s14, [r3]
 80042da:	4b37      	ldr	r3, [pc, #220]	@ (80043b8 <main+0xc80>)
 80042dc:	edd3 7a00 	vldr	s15, [r3]
 80042e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042e4:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

				if (current_segment < 10) {
 80042e8:	4b30      	ldr	r3, [pc, #192]	@ (80043ac <main+0xc74>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2b09      	cmp	r3, #9
 80042ee:	dc6d      	bgt.n	80043cc <main+0xc94>
				    pos_pris = GetTrajectoryPosition(&Prismatic[current_segment], t_relative);
 80042f0:	4b2e      	ldr	r3, [pc, #184]	@ (80043ac <main+0xc74>)
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	4613      	mov	r3, r2
 80042f6:	00db      	lsls	r3, r3, #3
 80042f8:	4413      	add	r3, r2
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4a23      	ldr	r2, [pc, #140]	@ (800438c <main+0xc54>)
 80042fe:	4413      	add	r3, r2
 8004300:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 8004304:	4618      	mov	r0, r3
 8004306:	f7fe fe69 	bl	8002fdc <GetTrajectoryPosition>
 800430a:	eef0 7a40 	vmov.f32	s15, s0
 800430e:	4b2b      	ldr	r3, [pc, #172]	@ (80043bc <main+0xc84>)
 8004310:	edc3 7a00 	vstr	s15, [r3]
				    vel_pris = GetTrajectoryVelocity(&Prismatic[current_segment], t_relative);
 8004314:	4b25      	ldr	r3, [pc, #148]	@ (80043ac <main+0xc74>)
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	4613      	mov	r3, r2
 800431a:	00db      	lsls	r3, r3, #3
 800431c:	4413      	add	r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	4a1a      	ldr	r2, [pc, #104]	@ (800438c <main+0xc54>)
 8004322:	4413      	add	r3, r2
 8004324:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 8004328:	4618      	mov	r0, r3
 800432a:	f7fe ff2d 	bl	8003188 <GetTrajectoryVelocity>
 800432e:	eef0 7a40 	vmov.f32	s15, s0
 8004332:	4b23      	ldr	r3, [pc, #140]	@ (80043c0 <main+0xc88>)
 8004334:	edc3 7a00 	vstr	s15, [r3]
				    pos_rev = GetTrajectoryPosition(&Revolute[current_segment], t_relative);
 8004338:	4b1c      	ldr	r3, [pc, #112]	@ (80043ac <main+0xc74>)
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	4613      	mov	r3, r2
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	4413      	add	r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	4a16      	ldr	r2, [pc, #88]	@ (80043a0 <main+0xc68>)
 8004346:	4413      	add	r3, r2
 8004348:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 800434c:	4618      	mov	r0, r3
 800434e:	f7fe fe45 	bl	8002fdc <GetTrajectoryPosition>
 8004352:	eef0 7a40 	vmov.f32	s15, s0
 8004356:	4b1b      	ldr	r3, [pc, #108]	@ (80043c4 <main+0xc8c>)
 8004358:	edc3 7a00 	vstr	s15, [r3]
				    vel_rev = GetTrajectoryVelocity(&Revolute[current_segment], t_relative);
 800435c:	4b13      	ldr	r3, [pc, #76]	@ (80043ac <main+0xc74>)
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	4613      	mov	r3, r2
 8004362:	00db      	lsls	r3, r3, #3
 8004364:	4413      	add	r3, r2
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	4a0d      	ldr	r2, [pc, #52]	@ (80043a0 <main+0xc68>)
 800436a:	4413      	add	r3, r2
 800436c:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 8004370:	4618      	mov	r0, r3
 8004372:	f7fe ff09 	bl	8003188 <GetTrajectoryVelocity>
 8004376:	eef0 7a40 	vmov.f32	s15, s0
 800437a:	4b13      	ldr	r3, [pc, #76]	@ (80043c8 <main+0xc90>)
 800437c:	edc3 7a00 	vstr	s15, [r3]
 8004380:	e036      	b.n	80043f0 <main+0xcb8>
 8004382:	bf00      	nop
 8004384:	20000208 	.word	0x20000208
 8004388:	20000234 	.word	0x20000234
 800438c:	20000448 	.word	0x20000448
 8004390:	200015f0 	.word	0x200015f0
 8004394:	00000000 	.word	0x00000000
 8004398:	437a0000 	.word	0x437a0000
 800439c:	43fa0000 	.word	0x43fa0000
 80043a0:	200005b0 	.word	0x200005b0
 80043a4:	20001618 	.word	0x20001618
 80043a8:	3ecccccd 	.word	0x3ecccccd
 80043ac:	20000444 	.word	0x20000444
 80043b0:	200016ae 	.word	0x200016ae
 80043b4:	20000718 	.word	0x20000718
 80043b8:	2000071c 	.word	0x2000071c
 80043bc:	20000434 	.word	0x20000434
 80043c0:	20000438 	.word	0x20000438
 80043c4:	2000043c 	.word	0x2000043c
 80043c8:	20000440 	.word	0x20000440
				} else {
				    pos_pris = Prismatic[9].end_pos;
 80043cc:	4b67      	ldr	r3, [pc, #412]	@ (800456c <main+0xe34>)
 80043ce:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80043d2:	4a67      	ldr	r2, [pc, #412]	@ (8004570 <main+0xe38>)
 80043d4:	6013      	str	r3, [r2, #0]
				    vel_pris = 0.0f;
 80043d6:	4b67      	ldr	r3, [pc, #412]	@ (8004574 <main+0xe3c>)
 80043d8:	f04f 0200 	mov.w	r2, #0
 80043dc:	601a      	str	r2, [r3, #0]
				    pos_rev = Revolute[9].end_pos;
 80043de:	4b66      	ldr	r3, [pc, #408]	@ (8004578 <main+0xe40>)
 80043e0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80043e4:	4a65      	ldr	r2, [pc, #404]	@ (800457c <main+0xe44>)
 80043e6:	6013      	str	r3, [r2, #0]
				    vel_rev = 0.0f;
 80043e8:	4b65      	ldr	r3, [pc, #404]	@ (8004580 <main+0xe48>)
 80043ea:	f04f 0200 	mov.w	r2, #0
 80043ee:	601a      	str	r2, [r3, #0]
				}

				if (t_relative > Revolute[current_segment].t_start + Revolute[current_segment].t_total) {
 80043f0:	4b64      	ldr	r3, [pc, #400]	@ (8004584 <main+0xe4c>)
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	4960      	ldr	r1, [pc, #384]	@ (8004578 <main+0xe40>)
 80043f6:	4613      	mov	r3, r2
 80043f8:	00db      	lsls	r3, r3, #3
 80043fa:	4413      	add	r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	440b      	add	r3, r1
 8004400:	3320      	adds	r3, #32
 8004402:	ed93 7a00 	vldr	s14, [r3]
 8004406:	4b5f      	ldr	r3, [pc, #380]	@ (8004584 <main+0xe4c>)
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	495b      	ldr	r1, [pc, #364]	@ (8004578 <main+0xe40>)
 800440c:	4613      	mov	r3, r2
 800440e:	00db      	lsls	r3, r3, #3
 8004410:	4413      	add	r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	440b      	add	r3, r1
 8004416:	331c      	adds	r3, #28
 8004418:	edd3 7a00 	vldr	s15, [r3]
 800441c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004420:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8004424:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800442c:	dd08      	ble.n	8004440 <main+0xd08>
				    if (current_segment < 9) current_segment++;
 800442e:	4b55      	ldr	r3, [pc, #340]	@ (8004584 <main+0xe4c>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2b08      	cmp	r3, #8
 8004434:	dc04      	bgt.n	8004440 <main+0xd08>
 8004436:	4b53      	ldr	r3, [pc, #332]	@ (8004584 <main+0xe4c>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	3301      	adds	r3, #1
 800443c:	4a51      	ldr	r2, [pc, #324]	@ (8004584 <main+0xe4c>)
 800443e:	6013      	str	r3, [r2, #0]
				}

				if (plotter == 1) // Pen_Up
 8004440:	4b51      	ldr	r3, [pc, #324]	@ (8004588 <main+0xe50>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2b01      	cmp	r3, #1
 8004446:	d109      	bne.n	800445c <main+0xd24>
				{
					__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 500);
 8004448:	4b50      	ldr	r3, [pc, #320]	@ (800458c <main+0xe54>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8004450:	641a      	str	r2, [r3, #64]	@ 0x40
					modbus_servo_Status(&hmodbus, Limit_Up);
 8004452:	2102      	movs	r1, #2
 8004454:	484e      	ldr	r0, [pc, #312]	@ (8004590 <main+0xe58>)
 8004456:	f7fc ff1d 	bl	8001294 <modbus_servo_Status>
 800445a:	e021      	b.n	80044a0 <main+0xd68>
				} else if (plotter == 2) // Pen_Down
 800445c:	4b4a      	ldr	r3, [pc, #296]	@ (8004588 <main+0xe50>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2b02      	cmp	r3, #2
 8004462:	d119      	bne.n	8004498 <main+0xd60>
				{
					if (status < 2000) {
 8004464:	4b4b      	ldr	r3, [pc, #300]	@ (8004594 <main+0xe5c>)
 8004466:	881b      	ldrh	r3, [r3, #0]
 8004468:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800446c:	d206      	bcs.n	800447c <main+0xd44>
						status += 1;
 800446e:	4b49      	ldr	r3, [pc, #292]	@ (8004594 <main+0xe5c>)
 8004470:	881b      	ldrh	r3, [r3, #0]
 8004472:	3301      	adds	r3, #1
 8004474:	b29a      	uxth	r2, r3
 8004476:	4b47      	ldr	r3, [pc, #284]	@ (8004594 <main+0xe5c>)
 8004478:	801a      	strh	r2, [r3, #0]
 800447a:	e003      	b.n	8004484 <main+0xd4c>
					} else {
						status += 0;
 800447c:	4b45      	ldr	r3, [pc, #276]	@ (8004594 <main+0xe5c>)
 800447e:	881a      	ldrh	r2, [r3, #0]
 8004480:	4b44      	ldr	r3, [pc, #272]	@ (8004594 <main+0xe5c>)
 8004482:	801a      	strh	r2, [r3, #0]
					}
					__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, status);
 8004484:	4b43      	ldr	r3, [pc, #268]	@ (8004594 <main+0xe5c>)
 8004486:	881a      	ldrh	r2, [r3, #0]
 8004488:	4b40      	ldr	r3, [pc, #256]	@ (800458c <main+0xe54>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	641a      	str	r2, [r3, #64]	@ 0x40
					modbus_servo_Status(&hmodbus, Limit_Down);
 800448e:	2101      	movs	r1, #1
 8004490:	483f      	ldr	r0, [pc, #252]	@ (8004590 <main+0xe58>)
 8004492:	f7fc feff 	bl	8001294 <modbus_servo_Status>
 8004496:	e003      	b.n	80044a0 <main+0xd68>
				} else {
					__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 0);
 8004498:	4b3c      	ldr	r3, [pc, #240]	@ (800458c <main+0xe54>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2200      	movs	r2, #0
 800449e:	641a      	str	r2, [r3, #64]	@ 0x40
				}

				if (count == 11 && Num_point <= 9) {  // Set_Target 10 points
 80044a0:	4b3d      	ldr	r3, [pc, #244]	@ (8004598 <main+0xe60>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2b0b      	cmp	r3, #11
 80044a6:	f040 810a 	bne.w	80046be <main+0xf86>
 80044aa:	4b3c      	ldr	r3, [pc, #240]	@ (800459c <main+0xe64>)
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	2b09      	cmp	r3, #9
 80044b0:	f200 8105 	bhi.w	80046be <main+0xf86>
					Coordinate_Robot_to_Base(&Goal_point[Num_point], PrismaticTenPoints[Num_point + 1],
 80044b4:	4b39      	ldr	r3, [pc, #228]	@ (800459c <main+0xe64>)
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	00db      	lsls	r3, r3, #3
 80044ba:	4a39      	ldr	r2, [pc, #228]	@ (80045a0 <main+0xe68>)
 80044bc:	441a      	add	r2, r3
 80044be:	4b37      	ldr	r3, [pc, #220]	@ (800459c <main+0xe64>)
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	3301      	adds	r3, #1
 80044c4:	4937      	ldr	r1, [pc, #220]	@ (80045a4 <main+0xe6c>)
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	440b      	add	r3, r1
 80044ca:	edd3 7a00 	vldr	s15, [r3]
							RevoluteTenPoints[Num_point + 1]);
 80044ce:	4b33      	ldr	r3, [pc, #204]	@ (800459c <main+0xe64>)
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	3301      	adds	r3, #1
					Coordinate_Robot_to_Base(&Goal_point[Num_point], PrismaticTenPoints[Num_point + 1],
 80044d4:	4934      	ldr	r1, [pc, #208]	@ (80045a8 <main+0xe70>)
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	440b      	add	r3, r1
 80044da:	ed93 7a00 	vldr	s14, [r3]
 80044de:	eef0 0a47 	vmov.f32	s1, s14
 80044e2:	eeb0 0a67 	vmov.f32	s0, s15
 80044e6:	4610      	mov	r0, r2
 80044e8:	f7fd f9e6 	bl	80018b8 <Coordinate_Robot_to_Base>
					set_Target_Position_ten_points(&hmodbus, Goal_point[Num_point].r_goal_position,
 80044ec:	4b2b      	ldr	r3, [pc, #172]	@ (800459c <main+0xe64>)
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	4a2b      	ldr	r2, [pc, #172]	@ (80045a0 <main+0xe68>)
 80044f2:	00db      	lsls	r3, r3, #3
 80044f4:	4413      	add	r3, r2
 80044f6:	edd3 7a00 	vldr	s15, [r3]
 80044fa:	4b28      	ldr	r3, [pc, #160]	@ (800459c <main+0xe64>)
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	4a28      	ldr	r2, [pc, #160]	@ (80045a0 <main+0xe68>)
 8004500:	00db      	lsls	r3, r3, #3
 8004502:	4413      	add	r3, r2
 8004504:	3304      	adds	r3, #4
 8004506:	ed93 7a00 	vldr	s14, [r3]
 800450a:	4b24      	ldr	r3, [pc, #144]	@ (800459c <main+0xe64>)
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	4619      	mov	r1, r3
 8004510:	eef0 0a47 	vmov.f32	s1, s14
 8004514:	eeb0 0a67 	vmov.f32	s0, s15
 8004518:	481d      	ldr	r0, [pc, #116]	@ (8004590 <main+0xe58>)
 800451a:	f7fc ff4f 	bl	80013bc <set_Target_Position_ten_points>
							Goal_point[Num_point].theta_goal_position, Num_point);
					Num_point += 1;
 800451e:	4b1f      	ldr	r3, [pc, #124]	@ (800459c <main+0xe64>)
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	3301      	adds	r3, #1
 8004524:	b2da      	uxtb	r2, r3
 8004526:	4b1d      	ldr	r3, [pc, #116]	@ (800459c <main+0xe64>)
 8004528:	701a      	strb	r2, [r3, #0]
 800452a:	e0c8      	b.n	80046be <main+0xf86>
//				} else {
//					__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 2000);
//					modbus_servo_Status(&hmodbus, Limit_Up);
//				}

			} else if (Base_Sysytem_status == Base_Run_Point_mode) {
 800452c:	4b1f      	ldr	r3, [pc, #124]	@ (80045ac <main+0xe74>)
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	2b04      	cmp	r3, #4
 8004532:	d141      	bne.n	80045b8 <main+0xe80>

				Goal_r_position = modbus_set_goal_r_position(&hmodbus);
 8004534:	4816      	ldr	r0, [pc, #88]	@ (8004590 <main+0xe58>)
 8004536:	f7fc ff6b 	bl	8001410 <modbus_set_goal_r_position>
 800453a:	4603      	mov	r3, r0
 800453c:	ee07 3a90 	vmov	s15, r3
 8004540:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004544:	4b1a      	ldr	r3, [pc, #104]	@ (80045b0 <main+0xe78>)
 8004546:	edc3 7a00 	vstr	s15, [r3]
				Goal_theta_position = modbus_set_goal_theta_position(&hmodbus);
 800454a:	4811      	ldr	r0, [pc, #68]	@ (8004590 <main+0xe58>)
 800454c:	f7fc ff78 	bl	8001440 <modbus_set_goal_theta_position>
 8004550:	4603      	mov	r3, r0
 8004552:	ee07 3a90 	vmov	s15, r3
 8004556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800455a:	4b16      	ldr	r3, [pc, #88]	@ (80045b4 <main+0xe7c>)
 800455c:	edc3 7a00 	vstr	s15, [r3]
				R_Theta_moving_Status(&hmodbus, Run_Point_mode);
 8004560:	2104      	movs	r1, #4
 8004562:	480b      	ldr	r0, [pc, #44]	@ (8004590 <main+0xe58>)
 8004564:	f7fc fec8 	bl	80012f8 <R_Theta_moving_Status>
 8004568:	e0a9      	b.n	80046be <main+0xf86>
 800456a:	bf00      	nop
 800456c:	20000448 	.word	0x20000448
 8004570:	20000434 	.word	0x20000434
 8004574:	20000438 	.word	0x20000438
 8004578:	200005b0 	.word	0x200005b0
 800457c:	2000043c 	.word	0x2000043c
 8004580:	20000440 	.word	0x20000440
 8004584:	20000444 	.word	0x20000444
 8004588:	200016a4 	.word	0x200016a4
 800458c:	20001a44 	.word	0x20001a44
 8004590:	20000750 	.word	0x20000750
 8004594:	20000dc4 	.word	0x20000dc4
 8004598:	20000260 	.word	0x20000260
 800459c:	20001640 	.word	0x20001640
 80045a0:	20001644 	.word	0x20001644
 80045a4:	20000208 	.word	0x20000208
 80045a8:	20000234 	.word	0x20000234
 80045ac:	20000db8 	.word	0x20000db8
 80045b0:	20000dbc 	.word	0x20000dbc
 80045b4:	20000dc0 	.word	0x20000dc0

			}

			else if (Base_Sysytem_status == Base_Go_to_Target) {
 80045b8:	4bc9      	ldr	r3, [pc, #804]	@ (80048e0 <main+0x11a8>)
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	2b08      	cmp	r3, #8
 80045be:	d17e      	bne.n	80046be <main+0xf86>

			    R_Theta_moving_Status(&hmodbus, Go_to_Target);
 80045c0:	2108      	movs	r1, #8
 80045c2:	48c8      	ldr	r0, [pc, #800]	@ (80048e4 <main+0x11ac>)
 80045c4:	f7fc fe98 	bl	80012f8 <R_Theta_moving_Status>

			    if (!has_initialized_target_traj) {
 80045c8:	4bc7      	ldr	r3, [pc, #796]	@ (80048e8 <main+0x11b0>)
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d144      	bne.n	800465a <main+0xf22>
			        Coordinate_Base_to_Robot(&Go_to_point, Goal_r_position, Goal_theta_position);
 80045d0:	4bc6      	ldr	r3, [pc, #792]	@ (80048ec <main+0x11b4>)
 80045d2:	edd3 7a00 	vldr	s15, [r3]
 80045d6:	4bc6      	ldr	r3, [pc, #792]	@ (80048f0 <main+0x11b8>)
 80045d8:	ed93 7a00 	vldr	s14, [r3]
 80045dc:	eef0 0a47 	vmov.f32	s1, s14
 80045e0:	eeb0 0a67 	vmov.f32	s0, s15
 80045e4:	48c3      	ldr	r0, [pc, #780]	@ (80048f4 <main+0x11bc>)
 80045e6:	f7fc ff43 	bl	8001470 <Coordinate_Base_to_Robot>

			        traj_start_time_target = HAL_GetTick() / 1000.0f;
 80045ea:	f001 fee5 	bl	80063b8 <HAL_GetTick>
 80045ee:	ee07 0a90 	vmov	s15, r0
 80045f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80045f6:	eddf 6ac0 	vldr	s13, [pc, #768]	@ 80048f8 <main+0x11c0>
 80045fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80045fe:	4bbf      	ldr	r3, [pc, #764]	@ (80048fc <main+0x11c4>)
 8004600:	edc3 7a00 	vstr	s15, [r3]
			        has_initialized_target_traj = 1;
 8004604:	4bb8      	ldr	r3, [pc, #736]	@ (80048e8 <main+0x11b0>)
 8004606:	2201      	movs	r2, #1
 8004608:	701a      	strb	r2, [r3, #0]

			        start_p = Go_to_point.r_goal_position;
 800460a:	4bba      	ldr	r3, [pc, #744]	@ (80048f4 <main+0x11bc>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4abc      	ldr	r2, [pc, #752]	@ (8004900 <main+0x11c8>)
 8004610:	6013      	str	r3, [r2, #0]
			        start_r = Go_to_point.theta_goal_position;
 8004612:	4bb8      	ldr	r3, [pc, #736]	@ (80048f4 <main+0x11bc>)
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	4abb      	ldr	r2, [pc, #748]	@ (8004904 <main+0x11cc>)
 8004618:	6013      	str	r3, [r2, #0]
			        InitTrajectorySegment(&Prismatic[0], 0.0f, start_p, v_max_pris, a_max_pris, 0.0f);
 800461a:	4bb9      	ldr	r3, [pc, #740]	@ (8004900 <main+0x11c8>)
 800461c:	edd3 7a00 	vldr	s15, [r3]
 8004620:	ed9f 2ab9 	vldr	s4, [pc, #740]	@ 8004908 <main+0x11d0>
 8004624:	eddf 1ab9 	vldr	s3, [pc, #740]	@ 800490c <main+0x11d4>
 8004628:	ed9f 1ab9 	vldr	s2, [pc, #740]	@ 8004910 <main+0x11d8>
 800462c:	eef0 0a67 	vmov.f32	s1, s15
 8004630:	ed9f 0ab5 	vldr	s0, [pc, #724]	@ 8004908 <main+0x11d0>
 8004634:	48b7      	ldr	r0, [pc, #732]	@ (8004914 <main+0x11dc>)
 8004636:	f7fe fc1b 	bl	8002e70 <InitTrajectorySegment>
			        InitTrajectorySegment(&Revolute[0], 0.0f, start_r, v_max_rev, a_max_rev, 0.0f);
 800463a:	4bb2      	ldr	r3, [pc, #712]	@ (8004904 <main+0x11cc>)
 800463c:	edd3 7a00 	vldr	s15, [r3]
 8004640:	ed9f 2ab1 	vldr	s4, [pc, #708]	@ 8004908 <main+0x11d0>
 8004644:	eddf 1ab4 	vldr	s3, [pc, #720]	@ 8004918 <main+0x11e0>
 8004648:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 800464c:	eef0 0a67 	vmov.f32	s1, s15
 8004650:	ed9f 0aad 	vldr	s0, [pc, #692]	@ 8004908 <main+0x11d0>
 8004654:	48b1      	ldr	r0, [pc, #708]	@ (800491c <main+0x11e4>)
 8004656:	f7fe fc0b 	bl	8002e70 <InitTrajectorySegment>
			    }

			    float t_rel = t_global - traj_start_time_target;
 800465a:	4bb1      	ldr	r3, [pc, #708]	@ (8004920 <main+0x11e8>)
 800465c:	ed93 7a00 	vldr	s14, [r3]
 8004660:	4ba6      	ldr	r3, [pc, #664]	@ (80048fc <main+0x11c4>)
 8004662:	edd3 7a00 	vldr	s15, [r3]
 8004666:	ee77 7a67 	vsub.f32	s15, s14, s15
 800466a:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
			    pos_pris = GetTrajectoryPosition(&Prismatic[0], t_rel);
 800466e:	ed97 0a17 	vldr	s0, [r7, #92]	@ 0x5c
 8004672:	48a8      	ldr	r0, [pc, #672]	@ (8004914 <main+0x11dc>)
 8004674:	f7fe fcb2 	bl	8002fdc <GetTrajectoryPosition>
 8004678:	eef0 7a40 	vmov.f32	s15, s0
 800467c:	4ba9      	ldr	r3, [pc, #676]	@ (8004924 <main+0x11ec>)
 800467e:	edc3 7a00 	vstr	s15, [r3]
			    vel_pris = GetTrajectoryVelocity(&Prismatic[0], t_rel);
 8004682:	ed97 0a17 	vldr	s0, [r7, #92]	@ 0x5c
 8004686:	48a3      	ldr	r0, [pc, #652]	@ (8004914 <main+0x11dc>)
 8004688:	f7fe fd7e 	bl	8003188 <GetTrajectoryVelocity>
 800468c:	eef0 7a40 	vmov.f32	s15, s0
 8004690:	4ba5      	ldr	r3, [pc, #660]	@ (8004928 <main+0x11f0>)
 8004692:	edc3 7a00 	vstr	s15, [r3]
			    pos_rev = GetTrajectoryPosition(&Revolute[0], t_rel);
 8004696:	ed97 0a17 	vldr	s0, [r7, #92]	@ 0x5c
 800469a:	48a0      	ldr	r0, [pc, #640]	@ (800491c <main+0x11e4>)
 800469c:	f7fe fc9e 	bl	8002fdc <GetTrajectoryPosition>
 80046a0:	eef0 7a40 	vmov.f32	s15, s0
 80046a4:	4ba1      	ldr	r3, [pc, #644]	@ (800492c <main+0x11f4>)
 80046a6:	edc3 7a00 	vstr	s15, [r3]
			    vel_rev = GetTrajectoryVelocity(&Revolute[0], t_rel);
 80046aa:	ed97 0a17 	vldr	s0, [r7, #92]	@ 0x5c
 80046ae:	489b      	ldr	r0, [pc, #620]	@ (800491c <main+0x11e4>)
 80046b0:	f7fe fd6a 	bl	8003188 <GetTrajectoryVelocity>
 80046b4:	eef0 7a40 	vmov.f32	s15, s0
 80046b8:	4b9d      	ldr	r3, [pc, #628]	@ (8004930 <main+0x11f8>)
 80046ba:	edc3 7a00 	vstr	s15, [r3]
//					__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 2000);
//					modbus_servo_Status(&hmodbus, Limit_Up);
//				}
			}

			if (Base_Sysytem_status != Base_Go_to_Target) {
 80046be:	4b88      	ldr	r3, [pc, #544]	@ (80048e0 <main+0x11a8>)
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	2b08      	cmp	r3, #8
 80046c4:	d002      	beq.n	80046cc <main+0xf94>
			    has_initialized_target_traj = 0;
 80046c6:	4b88      	ldr	r3, [pc, #544]	@ (80048e8 <main+0x11b0>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	701a      	strb	r2, [r3, #0]
			}

			Measurement_Pris[0] = Encoder_GetPosition_mm(&encoder1);
 80046cc:	4899      	ldr	r0, [pc, #612]	@ (8004934 <main+0x11fc>)
 80046ce:	f7fd fc99 	bl	8002004 <Encoder_GetPosition_mm>
 80046d2:	eef0 7a40 	vmov.f32	s15, s0
 80046d6:	4b98      	ldr	r3, [pc, #608]	@ (8004938 <main+0x1200>)
 80046d8:	edc3 7a00 	vstr	s15, [r3]
			Measurement_Pris[1] = Encoder_GetVelocity_mm(&encoder1);
 80046dc:	4895      	ldr	r0, [pc, #596]	@ (8004934 <main+0x11fc>)
 80046de:	f7fd fca0 	bl	8002022 <Encoder_GetVelocity_mm>
 80046e2:	eef0 7a40 	vmov.f32	s15, s0
 80046e6:	4b94      	ldr	r3, [pc, #592]	@ (8004938 <main+0x1200>)
 80046e8:	edc3 7a01 	vstr	s15, [r3, #4]
			Measurement_Pris[2] = 0;
 80046ec:	4b92      	ldr	r3, [pc, #584]	@ (8004938 <main+0x1200>)
 80046ee:	f04f 0200 	mov.w	r2, #0
 80046f2:	609a      	str	r2, [r3, #8]
			Measurement_Pris[3] = 0;
 80046f4:	4b90      	ldr	r3, [pc, #576]	@ (8004938 <main+0x1200>)
 80046f6:	f04f 0200 	mov.w	r2, #0
 80046fa:	60da      	str	r2, [r3, #12]

			Kalman_SetInput(&kf_pris, V_pris_velo_PID);
 80046fc:	4b8f      	ldr	r3, [pc, #572]	@ (800493c <main+0x1204>)
 80046fe:	edd3 7a00 	vldr	s15, [r3]
 8004702:	eeb0 0a67 	vmov.f32	s0, s15
 8004706:	488e      	ldr	r0, [pc, #568]	@ (8004940 <main+0x1208>)
 8004708:	f7fd fe7e 	bl	8002408 <Kalman_SetInput>
			Kalman_Predict(&kf_pris);
 800470c:	488c      	ldr	r0, [pc, #560]	@ (8004940 <main+0x1208>)
 800470e:	f7fd fe8b 	bl	8002428 <Kalman_Predict>
			Kalman_Update(&kf_pris, Measurement_Pris);
 8004712:	4989      	ldr	r1, [pc, #548]	@ (8004938 <main+0x1200>)
 8004714:	488a      	ldr	r0, [pc, #552]	@ (8004940 <main+0x1208>)
 8004716:	f7fd fed4 	bl	80024c2 <Kalman_Update>

			Measurement_Rev[0] = Encoder_GetPosition(&encoder2) / (100.0 / 30.0);
 800471a:	488a      	ldr	r0, [pc, #552]	@ (8004944 <main+0x120c>)
 800471c:	f7fd fc36 	bl	8001f8c <Encoder_GetPosition>
 8004720:	ee10 3a10 	vmov	r3, s0
 8004724:	4618      	mov	r0, r3
 8004726:	f7fb fedb 	bl	80004e0 <__aeabi_f2d>
 800472a:	a369      	add	r3, pc, #420	@ (adr r3, 80048d0 <main+0x1198>)
 800472c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004730:	f7fc f858 	bl	80007e4 <__aeabi_ddiv>
 8004734:	4602      	mov	r2, r0
 8004736:	460b      	mov	r3, r1
 8004738:	4610      	mov	r0, r2
 800473a:	4619      	mov	r1, r3
 800473c:	f7fc f9f8 	bl	8000b30 <__aeabi_d2f>
 8004740:	4603      	mov	r3, r0
 8004742:	4a81      	ldr	r2, [pc, #516]	@ (8004948 <main+0x1210>)
 8004744:	6013      	str	r3, [r2, #0]
			Measurement_Rev[1] = Encoder_GetVelocity(&encoder2) / (100.0 / 30.0);
 8004746:	487f      	ldr	r0, [pc, #508]	@ (8004944 <main+0x120c>)
 8004748:	f7fd fc2f 	bl	8001faa <Encoder_GetVelocity>
 800474c:	ee10 3a10 	vmov	r3, s0
 8004750:	4618      	mov	r0, r3
 8004752:	f7fb fec5 	bl	80004e0 <__aeabi_f2d>
 8004756:	a35e      	add	r3, pc, #376	@ (adr r3, 80048d0 <main+0x1198>)
 8004758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800475c:	f7fc f842 	bl	80007e4 <__aeabi_ddiv>
 8004760:	4602      	mov	r2, r0
 8004762:	460b      	mov	r3, r1
 8004764:	4610      	mov	r0, r2
 8004766:	4619      	mov	r1, r3
 8004768:	f7fc f9e2 	bl	8000b30 <__aeabi_d2f>
 800476c:	4603      	mov	r3, r0
 800476e:	4a76      	ldr	r2, [pc, #472]	@ (8004948 <main+0x1210>)
 8004770:	6053      	str	r3, [r2, #4]
			Measurement_Rev[2] = 0;
 8004772:	4b75      	ldr	r3, [pc, #468]	@ (8004948 <main+0x1210>)
 8004774:	f04f 0200 	mov.w	r2, #0
 8004778:	609a      	str	r2, [r3, #8]
			Measurement_Rev[3] = 0;
 800477a:	4b73      	ldr	r3, [pc, #460]	@ (8004948 <main+0x1210>)
 800477c:	f04f 0200 	mov.w	r2, #0
 8004780:	60da      	str	r2, [r3, #12]

			Kalman_SetInput(&kf_rev, V_rev_velo_PID);
 8004782:	4b72      	ldr	r3, [pc, #456]	@ (800494c <main+0x1214>)
 8004784:	edd3 7a00 	vldr	s15, [r3]
 8004788:	eeb0 0a67 	vmov.f32	s0, s15
 800478c:	4870      	ldr	r0, [pc, #448]	@ (8004950 <main+0x1218>)
 800478e:	f7fd fe3b 	bl	8002408 <Kalman_SetInput>
			Kalman_Predict(&kf_rev);
 8004792:	486f      	ldr	r0, [pc, #444]	@ (8004950 <main+0x1218>)
 8004794:	f7fd fe48 	bl	8002428 <Kalman_Predict>
			Kalman_Update(&kf_rev, Measurement_Rev);
 8004798:	496b      	ldr	r1, [pc, #428]	@ (8004948 <main+0x1210>)
 800479a:	486d      	ldr	r0, [pc, #436]	@ (8004950 <main+0x1218>)
 800479c:	f7fd fe91 	bl	80024c2 <Kalman_Update>

			modbus_Update_All(&hmodbus, Encoder_GetPosition_mm(&encoder1), // r_pos
 80047a0:	4864      	ldr	r0, [pc, #400]	@ (8004934 <main+0x11fc>)
 80047a2:	f7fd fc2f 	bl	8002004 <Encoder_GetPosition_mm>
 80047a6:	eeb0 8a40 	vmov.f32	s16, s0
 80047aa:	4866      	ldr	r0, [pc, #408]	@ (8004944 <main+0x120c>)
 80047ac:	f7fd fc1b 	bl	8001fe6 <Encoder_GetDegree>
 80047b0:	eef0 8a40 	vmov.f32	s17, s0
 80047b4:	485f      	ldr	r0, [pc, #380]	@ (8004934 <main+0x11fc>)
 80047b6:	f7fd fc34 	bl	8002022 <Encoder_GetVelocity_mm>
 80047ba:	eeb0 9a40 	vmov.f32	s18, s0
			Encoder_GetDegree(&encoder2), // theta_pos
			Encoder_GetVelocity_mm(&encoder1), // r_velo
			Encoder_GetVelocity(&encoder2) * 180.0 / 3.142, // theta_velo
 80047be:	4861      	ldr	r0, [pc, #388]	@ (8004944 <main+0x120c>)
 80047c0:	f7fd fbf3 	bl	8001faa <Encoder_GetVelocity>
 80047c4:	ee10 3a10 	vmov	r3, s0
 80047c8:	4618      	mov	r0, r3
 80047ca:	f7fb fe89 	bl	80004e0 <__aeabi_f2d>
 80047ce:	f04f 0200 	mov.w	r2, #0
 80047d2:	4b60      	ldr	r3, [pc, #384]	@ (8004954 <main+0x121c>)
 80047d4:	f7fb fedc 	bl	8000590 <__aeabi_dmul>
 80047d8:	4602      	mov	r2, r0
 80047da:	460b      	mov	r3, r1
 80047dc:	4610      	mov	r0, r2
 80047de:	4619      	mov	r1, r3
 80047e0:	a33d      	add	r3, pc, #244	@ (adr r3, 80048d8 <main+0x11a0>)
 80047e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e6:	f7fb fffd 	bl	80007e4 <__aeabi_ddiv>
 80047ea:	4602      	mov	r2, r0
 80047ec:	460b      	mov	r3, r1
			modbus_Update_All(&hmodbus, Encoder_GetPosition_mm(&encoder1), // r_pos
 80047ee:	4610      	mov	r0, r2
 80047f0:	4619      	mov	r1, r3
 80047f2:	f7fc f99d 	bl	8000b30 <__aeabi_d2f>
 80047f6:	4604      	mov	r4, r0
 80047f8:	484e      	ldr	r0, [pc, #312]	@ (8004934 <main+0x11fc>)
 80047fa:	f7fd fc21 	bl	8002040 <Encoder_GetAcceleration_mm>
 80047fe:	eef0 9a40 	vmov.f32	s19, s0
			Encoder_GetAcceleration_mm(&encoder1), // r_accel
			Encoder_GetAcceleration(&encoder2) * 180.0 / 3.142); // theta_accel
 8004802:	4850      	ldr	r0, [pc, #320]	@ (8004944 <main+0x120c>)
 8004804:	f7fd fbe0 	bl	8001fc8 <Encoder_GetAcceleration>
 8004808:	ee10 3a10 	vmov	r3, s0
 800480c:	4618      	mov	r0, r3
 800480e:	f7fb fe67 	bl	80004e0 <__aeabi_f2d>
 8004812:	f04f 0200 	mov.w	r2, #0
 8004816:	4b4f      	ldr	r3, [pc, #316]	@ (8004954 <main+0x121c>)
 8004818:	f7fb feba 	bl	8000590 <__aeabi_dmul>
 800481c:	4602      	mov	r2, r0
 800481e:	460b      	mov	r3, r1
 8004820:	4610      	mov	r0, r2
 8004822:	4619      	mov	r1, r3
 8004824:	a32c      	add	r3, pc, #176	@ (adr r3, 80048d8 <main+0x11a0>)
 8004826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800482a:	f7fb ffdb 	bl	80007e4 <__aeabi_ddiv>
 800482e:	4602      	mov	r2, r0
 8004830:	460b      	mov	r3, r1
			modbus_Update_All(&hmodbus, Encoder_GetPosition_mm(&encoder1), // r_pos
 8004832:	4610      	mov	r0, r2
 8004834:	4619      	mov	r1, r3
 8004836:	f7fc f97b 	bl	8000b30 <__aeabi_d2f>
 800483a:	4603      	mov	r3, r0
 800483c:	ee02 3a90 	vmov	s5, r3
 8004840:	eeb0 2a69 	vmov.f32	s4, s19
 8004844:	ee01 4a90 	vmov	s3, r4
 8004848:	eeb0 1a49 	vmov.f32	s2, s18
 800484c:	eef0 0a68 	vmov.f32	s1, s17
 8004850:	eeb0 0a48 	vmov.f32	s0, s16
 8004854:	4823      	ldr	r0, [pc, #140]	@ (80048e4 <main+0x11ac>)
 8004856:	f7fc fd61 	bl	800131c <modbus_Update_All>

			Revolute_dis();
 800485a:	f000 fd41 	bl	80052e0 <Revolute_dis>
			count_Tim2 += 1;
 800485e:	4b3e      	ldr	r3, [pc, #248]	@ (8004958 <main+0x1220>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	3301      	adds	r3, #1
 8004864:	4a3c      	ldr	r2, [pc, #240]	@ (8004958 <main+0x1220>)
 8004866:	6013      	str	r3, [r2, #0]
			// Velocity Control Prismatic
			velocity_pris = Encoder_GetVelocity_mm(&encoder1);
 8004868:	4832      	ldr	r0, [pc, #200]	@ (8004934 <main+0x11fc>)
 800486a:	f7fd fbda 	bl	8002022 <Encoder_GetVelocity_mm>
 800486e:	eef0 7a40 	vmov.f32	s15, s0
 8004872:	4b3a      	ldr	r3, [pc, #232]	@ (800495c <main+0x1224>)
 8004874:	edc3 7a00 	vstr	s15, [r3]
//			setvelocity_pris = GetTrajectoryVelocity(&Prismatic[current_segment], t_global) + V_pris_posi_PID;
			setvelocity_pris = vel_pris + V_pris_posi_PID;
 8004878:	4b2b      	ldr	r3, [pc, #172]	@ (8004928 <main+0x11f0>)
 800487a:	ed93 7a00 	vldr	s14, [r3]
 800487e:	4b38      	ldr	r3, [pc, #224]	@ (8004960 <main+0x1228>)
 8004880:	edd3 7a00 	vldr	s15, [r3]
 8004884:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004888:	4b36      	ldr	r3, [pc, #216]	@ (8004964 <main+0x122c>)
 800488a:	edc3 7a00 	vstr	s15, [r3]
			delta_velo_pris = setvelocity_pris - velocity_pris;
 800488e:	4b35      	ldr	r3, [pc, #212]	@ (8004964 <main+0x122c>)
 8004890:	ed93 7a00 	vldr	s14, [r3]
 8004894:	4b31      	ldr	r3, [pc, #196]	@ (800495c <main+0x1224>)
 8004896:	edd3 7a00 	vldr	s15, [r3]
 800489a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800489e:	4b32      	ldr	r3, [pc, #200]	@ (8004968 <main+0x1230>)
 80048a0:	edc3 7a00 	vstr	s15, [r3]
//			delta_velo_pris = setvelocity_pris - kf_pris.x_data[1];
			V_pris_velo_PID = Prismatic_velocity_control(delta_velo_pris);
 80048a4:	4b30      	ldr	r3, [pc, #192]	@ (8004968 <main+0x1230>)
 80048a6:	edd3 7a00 	vldr	s15, [r3]
 80048aa:	eeb0 0a67 	vmov.f32	s0, s15
 80048ae:	f000 fb33 	bl	8004f18 <Prismatic_velocity_control>
 80048b2:	eef0 7a40 	vmov.f32	s15, s0
 80048b6:	4b21      	ldr	r3, [pc, #132]	@ (800493c <main+0x1204>)
 80048b8:	edc3 7a00 	vstr	s15, [r3]

			// Velocity Control revolute
			velocity_rev = Encoder_GetVelocity(&encoder2) / (100.0 / 30.0);
 80048bc:	4821      	ldr	r0, [pc, #132]	@ (8004944 <main+0x120c>)
 80048be:	f7fd fb74 	bl	8001faa <Encoder_GetVelocity>
 80048c2:	ee10 3a10 	vmov	r3, s0
 80048c6:	4618      	mov	r0, r3
 80048c8:	e050      	b.n	800496c <main+0x1234>
 80048ca:	bf00      	nop
 80048cc:	f3af 8000 	nop.w
 80048d0:	aaaaaaab 	.word	0xaaaaaaab
 80048d4:	400aaaaa 	.word	0x400aaaaa
 80048d8:	e5604189 	.word	0xe5604189
 80048dc:	400922d0 	.word	0x400922d0
 80048e0:	20000db8 	.word	0x20000db8
 80048e4:	20000750 	.word	0x20000750
 80048e8:	2000072c 	.word	0x2000072c
 80048ec:	20000dbc 	.word	0x20000dbc
 80048f0:	20000dc0 	.word	0x20000dc0
 80048f4:	20001694 	.word	0x20001694
 80048f8:	447a0000 	.word	0x447a0000
 80048fc:	20000728 	.word	0x20000728
 8004900:	20000720 	.word	0x20000720
 8004904:	20000724 	.word	0x20000724
 8004908:	00000000 	.word	0x00000000
 800490c:	437a0000 	.word	0x437a0000
 8004910:	43fa0000 	.word	0x43fa0000
 8004914:	20000448 	.word	0x20000448
 8004918:	3ecccccd 	.word	0x3ecccccd
 800491c:	200005b0 	.word	0x200005b0
 8004920:	20000718 	.word	0x20000718
 8004924:	20000434 	.word	0x20000434
 8004928:	20000438 	.word	0x20000438
 800492c:	2000043c 	.word	0x2000043c
 8004930:	20000440 	.word	0x20000440
 8004934:	200003c4 	.word	0x200003c4
 8004938:	200015a0 	.word	0x200015a0
 800493c:	20000e50 	.word	0x20000e50
 8004940:	20000ee8 	.word	0x20000ee8
 8004944:	200003f8 	.word	0x200003f8
 8004948:	200015b0 	.word	0x200015b0
 800494c:	20000ecc 	.word	0x20000ecc
 8004950:	2000120c 	.word	0x2000120c
 8004954:	40668000 	.word	0x40668000
 8004958:	20000dd4 	.word	0x20000dd4
 800495c:	20000e48 	.word	0x20000e48
 8004960:	20000e10 	.word	0x20000e10
 8004964:	20000e4c 	.word	0x20000e4c
 8004968:	20000e60 	.word	0x20000e60
 800496c:	f7fb fdb8 	bl	80004e0 <__aeabi_f2d>
 8004970:	a3b7      	add	r3, pc, #732	@ (adr r3, 8004c50 <main+0x1518>)
 8004972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004976:	f7fb ff35 	bl	80007e4 <__aeabi_ddiv>
 800497a:	4602      	mov	r2, r0
 800497c:	460b      	mov	r3, r1
 800497e:	4610      	mov	r0, r2
 8004980:	4619      	mov	r1, r3
 8004982:	f7fc f8d5 	bl	8000b30 <__aeabi_d2f>
 8004986:	4603      	mov	r3, r0
 8004988:	4ab3      	ldr	r2, [pc, #716]	@ (8004c58 <main+0x1520>)
 800498a:	6013      	str	r3, [r2, #0]
//			setvelocity_rev = GetTrajectoryVelocity(&Revolute[current_segment], t_global) + V_rev_posi_PID;
			setvelocity_rev = vel_rev + V_rev_posi_PID;
 800498c:	4bb3      	ldr	r3, [pc, #716]	@ (8004c5c <main+0x1524>)
 800498e:	ed93 7a00 	vldr	s14, [r3]
 8004992:	4bb3      	ldr	r3, [pc, #716]	@ (8004c60 <main+0x1528>)
 8004994:	edd3 7a00 	vldr	s15, [r3]
 8004998:	ee77 7a27 	vadd.f32	s15, s14, s15
 800499c:	4bb1      	ldr	r3, [pc, #708]	@ (8004c64 <main+0x152c>)
 800499e:	edc3 7a00 	vstr	s15, [r3]
//			delta_velo_rev = setvelocity_rev - velocity_rev;
			delta_velo_rev = setvelocity_rev - kf_rev.x_data[1];
 80049a2:	4bb0      	ldr	r3, [pc, #704]	@ (8004c64 <main+0x152c>)
 80049a4:	ed93 7a00 	vldr	s14, [r3]
 80049a8:	4baf      	ldr	r3, [pc, #700]	@ (8004c68 <main+0x1530>)
 80049aa:	edd3 7a8e 	vldr	s15, [r3, #568]	@ 0x238
 80049ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049b2:	4bae      	ldr	r3, [pc, #696]	@ (8004c6c <main+0x1534>)
 80049b4:	edc3 7a00 	vstr	s15, [r3]
			V_rev_velo_PID = Revolute_velocity_control(delta_velo_rev);
 80049b8:	4bac      	ldr	r3, [pc, #688]	@ (8004c6c <main+0x1534>)
 80049ba:	edd3 7a00 	vldr	s15, [r3]
 80049be:	eeb0 0a67 	vmov.f32	s0, s15
 80049c2:	f000 fbcf 	bl	8005164 <Revolute_velocity_control>
 80049c6:	eef0 7a40 	vmov.f32	s15, s0
 80049ca:	4ba9      	ldr	r3, [pc, #676]	@ (8004c70 <main+0x1538>)
 80049cc:	edc3 7a00 	vstr	s15, [r3]
			if (count_Tim2 >= 10) {
 80049d0:	4ba8      	ldr	r3, [pc, #672]	@ (8004c74 <main+0x153c>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2b09      	cmp	r3, #9
 80049d6:	f340 80b6 	ble.w	8004b46 <main+0x140e>
				// Position Control Prismatic
				position_pris = Encoder_GetPosition_mm(&encoder1);
 80049da:	48a7      	ldr	r0, [pc, #668]	@ (8004c78 <main+0x1540>)
 80049dc:	f7fd fb12 	bl	8002004 <Encoder_GetPosition_mm>
 80049e0:	eef0 7a40 	vmov.f32	s15, s0
 80049e4:	4ba5      	ldr	r3, [pc, #660]	@ (8004c7c <main+0x1544>)
 80049e6:	edc3 7a00 	vstr	s15, [r3]
//				setposition_pris = GetTrajectoryPosition(&Prismatic[current_segment], t_global);
				setposition_pris = pos_pris;
 80049ea:	4ba5      	ldr	r3, [pc, #660]	@ (8004c80 <main+0x1548>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4aa5      	ldr	r2, [pc, #660]	@ (8004c84 <main+0x154c>)
 80049f0:	6013      	str	r3, [r2, #0]
				delta_posi_pris = setposition_pris - position_pris;
 80049f2:	4ba4      	ldr	r3, [pc, #656]	@ (8004c84 <main+0x154c>)
 80049f4:	ed93 7a00 	vldr	s14, [r3]
 80049f8:	4ba0      	ldr	r3, [pc, #640]	@ (8004c7c <main+0x1544>)
 80049fa:	edd3 7a00 	vldr	s15, [r3]
 80049fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a02:	4ba1      	ldr	r3, [pc, #644]	@ (8004c88 <main+0x1550>)
 8004a04:	edc3 7a00 	vstr	s15, [r3]
				if (delta_posi_pris <= 0.1 && delta_posi_pris >= -0.1) {
 8004a08:	4b9f      	ldr	r3, [pc, #636]	@ (8004c88 <main+0x1550>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f7fb fd67 	bl	80004e0 <__aeabi_f2d>
 8004a12:	a38b      	add	r3, pc, #556	@ (adr r3, 8004c40 <main+0x1508>)
 8004a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a18:	f7fc f836 	bl	8000a88 <__aeabi_dcmple>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d015      	beq.n	8004a4e <main+0x1316>
 8004a22:	4b99      	ldr	r3, [pc, #612]	@ (8004c88 <main+0x1550>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4618      	mov	r0, r3
 8004a28:	f7fb fd5a 	bl	80004e0 <__aeabi_f2d>
 8004a2c:	a386      	add	r3, pc, #536	@ (adr r3, 8004c48 <main+0x1510>)
 8004a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a32:	f7fc f833 	bl	8000a9c <__aeabi_dcmpge>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d008      	beq.n	8004a4e <main+0x1316>
					V_pris_posi_PID = 0;
 8004a3c:	4b93      	ldr	r3, [pc, #588]	@ (8004c8c <main+0x1554>)
 8004a3e:	f04f 0200 	mov.w	r2, #0
 8004a42:	601a      	str	r2, [r3, #0]
					V_pris_velo_PID = 0;
 8004a44:	4b92      	ldr	r3, [pc, #584]	@ (8004c90 <main+0x1558>)
 8004a46:	f04f 0200 	mov.w	r2, #0
 8004a4a:	601a      	str	r2, [r3, #0]
 8004a4c:	e00b      	b.n	8004a66 <main+0x132e>
				} else {
					V_pris_posi_PID = Prismatic_position_control(delta_posi_pris);
 8004a4e:	4b8e      	ldr	r3, [pc, #568]	@ (8004c88 <main+0x1550>)
 8004a50:	edd3 7a00 	vldr	s15, [r3]
 8004a54:	eeb0 0a67 	vmov.f32	s0, s15
 8004a58:	f000 f9e6 	bl	8004e28 <Prismatic_position_control>
 8004a5c:	eef0 7a40 	vmov.f32	s15, s0
 8004a60:	4b8a      	ldr	r3, [pc, #552]	@ (8004c8c <main+0x1554>)
 8004a62:	edc3 7a00 	vstr	s15, [r3]
				}
//				V_pris_posi_PID = Prismatic_position_control(delta_posi_pris);

				// Position Control Revolute
				position_rev = Encoder_GetPosition(&encoder2) / (100.0 / 30.0);
 8004a66:	488b      	ldr	r0, [pc, #556]	@ (8004c94 <main+0x155c>)
 8004a68:	f7fd fa90 	bl	8001f8c <Encoder_GetPosition>
 8004a6c:	ee10 3a10 	vmov	r3, s0
 8004a70:	4618      	mov	r0, r3
 8004a72:	f7fb fd35 	bl	80004e0 <__aeabi_f2d>
 8004a76:	a376      	add	r3, pc, #472	@ (adr r3, 8004c50 <main+0x1518>)
 8004a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a7c:	f7fb feb2 	bl	80007e4 <__aeabi_ddiv>
 8004a80:	4602      	mov	r2, r0
 8004a82:	460b      	mov	r3, r1
 8004a84:	4610      	mov	r0, r2
 8004a86:	4619      	mov	r1, r3
 8004a88:	f7fc f852 	bl	8000b30 <__aeabi_d2f>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	4a82      	ldr	r2, [pc, #520]	@ (8004c98 <main+0x1560>)
 8004a90:	6013      	str	r3, [r2, #0]
//				setposition_rev = GetTrajectoryPosition(&Revolute[current_segment], t_global) + Rev_backlash.backlash_offset;
				setposition_rev = pos_rev + Rev_backlash.backlash_offset;
 8004a92:	4b82      	ldr	r3, [pc, #520]	@ (8004c9c <main+0x1564>)
 8004a94:	ed93 7a01 	vldr	s14, [r3, #4]
 8004a98:	4b81      	ldr	r3, [pc, #516]	@ (8004ca0 <main+0x1568>)
 8004a9a:	edd3 7a00 	vldr	s15, [r3]
 8004a9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004aa2:	4b80      	ldr	r3, [pc, #512]	@ (8004ca4 <main+0x156c>)
 8004aa4:	edc3 7a00 	vstr	s15, [r3]
				Backlash_Update(&Rev_backlash, pos_rev, p2, v2);
 8004aa8:	4b7d      	ldr	r3, [pc, #500]	@ (8004ca0 <main+0x1568>)
 8004aaa:	edd3 7a00 	vldr	s15, [r3]
 8004aae:	4b7e      	ldr	r3, [pc, #504]	@ (8004ca8 <main+0x1570>)
 8004ab0:	ed93 7a00 	vldr	s14, [r3]
 8004ab4:	4b7d      	ldr	r3, [pc, #500]	@ (8004cac <main+0x1574>)
 8004ab6:	edd3 6a00 	vldr	s13, [r3]
 8004aba:	eeb0 1a66 	vmov.f32	s2, s13
 8004abe:	eef0 0a47 	vmov.f32	s1, s14
 8004ac2:	eeb0 0a67 	vmov.f32	s0, s15
 8004ac6:	4875      	ldr	r0, [pc, #468]	@ (8004c9c <main+0x1564>)
 8004ac8:	f7fc fb5e 	bl	8001188 <Backlash_Update>
				delta_posi_rev = setposition_rev - position_rev;
 8004acc:	4b75      	ldr	r3, [pc, #468]	@ (8004ca4 <main+0x156c>)
 8004ace:	ed93 7a00 	vldr	s14, [r3]
 8004ad2:	4b71      	ldr	r3, [pc, #452]	@ (8004c98 <main+0x1560>)
 8004ad4:	edd3 7a00 	vldr	s15, [r3]
 8004ad8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004adc:	4b74      	ldr	r3, [pc, #464]	@ (8004cb0 <main+0x1578>)
 8004ade:	edc3 7a00 	vstr	s15, [r3]
				if (delta_posi_rev <= 0.1 && delta_posi_rev >= -0.1) {
 8004ae2:	4b73      	ldr	r3, [pc, #460]	@ (8004cb0 <main+0x1578>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7fb fcfa 	bl	80004e0 <__aeabi_f2d>
 8004aec:	a354      	add	r3, pc, #336	@ (adr r3, 8004c40 <main+0x1508>)
 8004aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af2:	f7fb ffc9 	bl	8000a88 <__aeabi_dcmple>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d015      	beq.n	8004b28 <main+0x13f0>
 8004afc:	4b6c      	ldr	r3, [pc, #432]	@ (8004cb0 <main+0x1578>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4618      	mov	r0, r3
 8004b02:	f7fb fced 	bl	80004e0 <__aeabi_f2d>
 8004b06:	a350      	add	r3, pc, #320	@ (adr r3, 8004c48 <main+0x1510>)
 8004b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b0c:	f7fb ffc6 	bl	8000a9c <__aeabi_dcmpge>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d008      	beq.n	8004b28 <main+0x13f0>
					V_rev_posi_PID = 0;
 8004b16:	4b52      	ldr	r3, [pc, #328]	@ (8004c60 <main+0x1528>)
 8004b18:	f04f 0200 	mov.w	r2, #0
 8004b1c:	601a      	str	r2, [r3, #0]
					V_rev_velo_PID = 0;
 8004b1e:	4b54      	ldr	r3, [pc, #336]	@ (8004c70 <main+0x1538>)
 8004b20:	f04f 0200 	mov.w	r2, #0
 8004b24:	601a      	str	r2, [r3, #0]
 8004b26:	e00b      	b.n	8004b40 <main+0x1408>
				} else {
					V_rev_posi_PID = Revolute_position_control(delta_posi_rev);
 8004b28:	4b61      	ldr	r3, [pc, #388]	@ (8004cb0 <main+0x1578>)
 8004b2a:	edd3 7a00 	vldr	s15, [r3]
 8004b2e:	eeb0 0a67 	vmov.f32	s0, s15
 8004b32:	f000 fa9f 	bl	8005074 <Revolute_position_control>
 8004b36:	eef0 7a40 	vmov.f32	s15, s0
 8004b3a:	4b49      	ldr	r3, [pc, #292]	@ (8004c60 <main+0x1528>)
 8004b3c:	edc3 7a00 	vstr	s15, [r3]
				}

				count_Tim2 = 0;
 8004b40:	4b4c      	ldr	r3, [pc, #304]	@ (8004c74 <main+0x153c>)
 8004b42:	2200      	movs	r2, #0
 8004b44:	601a      	str	r2, [r3, #0]
			}
		}

		if (V_pris_velo_PID < 0) {
 8004b46:	4b52      	ldr	r3, [pc, #328]	@ (8004c90 <main+0x1558>)
 8004b48:	edd3 7a00 	vldr	s15, [r3]
 8004b4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b54:	d50b      	bpl.n	8004b6e <main+0x1436>
			DIR_24V = 0;
 8004b56:	4b57      	ldr	r3, [pc, #348]	@ (8004cb4 <main+0x157c>)
 8004b58:	2200      	movs	r2, #0
 8004b5a:	601a      	str	r2, [r3, #0]
			V_absoulte_pris = fabsf(V_pris_velo_PID);
 8004b5c:	4b4c      	ldr	r3, [pc, #304]	@ (8004c90 <main+0x1558>)
 8004b5e:	edd3 7a00 	vldr	s15, [r3]
 8004b62:	eef0 7ae7 	vabs.f32	s15, s15
 8004b66:	4b54      	ldr	r3, [pc, #336]	@ (8004cb8 <main+0x1580>)
 8004b68:	edc3 7a00 	vstr	s15, [r3]
 8004b6c:	e00e      	b.n	8004b8c <main+0x1454>
		} else if (V_pris_velo_PID > 0) {
 8004b6e:	4b48      	ldr	r3, [pc, #288]	@ (8004c90 <main+0x1558>)
 8004b70:	edd3 7a00 	vldr	s15, [r3]
 8004b74:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b7c:	dd06      	ble.n	8004b8c <main+0x1454>
			DIR_24V = 1;
 8004b7e:	4b4d      	ldr	r3, [pc, #308]	@ (8004cb4 <main+0x157c>)
 8004b80:	2201      	movs	r2, #1
 8004b82:	601a      	str	r2, [r3, #0]
			V_absoulte_pris = V_pris_velo_PID;
 8004b84:	4b42      	ldr	r3, [pc, #264]	@ (8004c90 <main+0x1558>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a4b      	ldr	r2, [pc, #300]	@ (8004cb8 <main+0x1580>)
 8004b8a:	6013      	str	r3, [r2, #0]
		}
		pwm_pris_velo = voltage_to_pwm(V_absoulte_pris);
 8004b8c:	4b4a      	ldr	r3, [pc, #296]	@ (8004cb8 <main+0x1580>)
 8004b8e:	edd3 7a00 	vldr	s15, [r3]
 8004b92:	eeb0 0a67 	vmov.f32	s0, s15
 8004b96:	f000 fb83 	bl	80052a0 <voltage_to_pwm>
 8004b9a:	eef0 7a40 	vmov.f32	s15, s0
 8004b9e:	4b47      	ldr	r3, [pc, #284]	@ (8004cbc <main+0x1584>)
 8004ba0:	edc3 7a00 	vstr	s15, [r3]
//		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, DIR_24V);
//		__HAL_TIM_SET_COMPARE(&htim20, TIM_CHANNEL_1, pwm_pris_velo);

		if (V_rev_velo_PID < 0) {
 8004ba4:	4b32      	ldr	r3, [pc, #200]	@ (8004c70 <main+0x1538>)
 8004ba6:	edd3 7a00 	vldr	s15, [r3]
 8004baa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bb2:	d50b      	bpl.n	8004bcc <main+0x1494>
			DIR_18V = 0;
 8004bb4:	4b42      	ldr	r3, [pc, #264]	@ (8004cc0 <main+0x1588>)
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	601a      	str	r2, [r3, #0]
			V_absolute_rev = fabsf(V_rev_velo_PID);
 8004bba:	4b2d      	ldr	r3, [pc, #180]	@ (8004c70 <main+0x1538>)
 8004bbc:	edd3 7a00 	vldr	s15, [r3]
 8004bc0:	eef0 7ae7 	vabs.f32	s15, s15
 8004bc4:	4b3f      	ldr	r3, [pc, #252]	@ (8004cc4 <main+0x158c>)
 8004bc6:	edc3 7a00 	vstr	s15, [r3]
 8004bca:	e00e      	b.n	8004bea <main+0x14b2>
		} else if (V_rev_velo_PID > 0) {
 8004bcc:	4b28      	ldr	r3, [pc, #160]	@ (8004c70 <main+0x1538>)
 8004bce:	edd3 7a00 	vldr	s15, [r3]
 8004bd2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bda:	dd06      	ble.n	8004bea <main+0x14b2>
			DIR_18V = 1;
 8004bdc:	4b38      	ldr	r3, [pc, #224]	@ (8004cc0 <main+0x1588>)
 8004bde:	2201      	movs	r2, #1
 8004be0:	601a      	str	r2, [r3, #0]
			V_absolute_rev = V_rev_velo_PID;
 8004be2:	4b23      	ldr	r3, [pc, #140]	@ (8004c70 <main+0x1538>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a37      	ldr	r2, [pc, #220]	@ (8004cc4 <main+0x158c>)
 8004be8:	6013      	str	r3, [r2, #0]
		}
		V_plant = V_absolute_rev + voltage_dis_rev;
 8004bea:	4b36      	ldr	r3, [pc, #216]	@ (8004cc4 <main+0x158c>)
 8004bec:	ed93 7a00 	vldr	s14, [r3]
 8004bf0:	4b35      	ldr	r3, [pc, #212]	@ (8004cc8 <main+0x1590>)
 8004bf2:	edd3 7a00 	vldr	s15, [r3]
 8004bf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bfa:	4b34      	ldr	r3, [pc, #208]	@ (8004ccc <main+0x1594>)
 8004bfc:	edc3 7a00 	vstr	s15, [r3]
		if (V_plant > 18) {
 8004c00:	4b32      	ldr	r3, [pc, #200]	@ (8004ccc <main+0x1594>)
 8004c02:	edd3 7a00 	vldr	s15, [r3]
 8004c06:	eeb3 7a02 	vmov.f32	s14, #50	@ 0x41900000  18.0
 8004c0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c12:	dd02      	ble.n	8004c1a <main+0x14e2>
			V_plant = 18;
 8004c14:	4b2d      	ldr	r3, [pc, #180]	@ (8004ccc <main+0x1594>)
 8004c16:	4a2e      	ldr	r2, [pc, #184]	@ (8004cd0 <main+0x1598>)
 8004c18:	601a      	str	r2, [r3, #0]
		}
		pwm_rev_velo = (V_plant / 18) * 65535;
 8004c1a:	4b2c      	ldr	r3, [pc, #176]	@ (8004ccc <main+0x1594>)
 8004c1c:	ed93 7a00 	vldr	s14, [r3]
 8004c20:	eef3 6a02 	vmov.f32	s13, #50	@ 0x41900000  18.0
 8004c24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004c28:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8004cd4 <main+0x159c>
 8004c2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c30:	4b29      	ldr	r3, [pc, #164]	@ (8004cd8 <main+0x15a0>)
 8004c32:	edc3 7a00 	vstr	s15, [r3]
	while (1) {
 8004c36:	f7ff b805 	b.w	8003c44 <main+0x50c>
 8004c3a:	bf00      	nop
 8004c3c:	f3af 8000 	nop.w
 8004c40:	9999999a 	.word	0x9999999a
 8004c44:	3fb99999 	.word	0x3fb99999
 8004c48:	9999999a 	.word	0x9999999a
 8004c4c:	bfb99999 	.word	0xbfb99999
 8004c50:	aaaaaaab 	.word	0xaaaaaaab
 8004c54:	400aaaaa 	.word	0x400aaaaa
 8004c58:	20000ec4 	.word	0x20000ec4
 8004c5c:	20000440 	.word	0x20000440
 8004c60:	20000e90 	.word	0x20000e90
 8004c64:	20000ec8 	.word	0x20000ec8
 8004c68:	2000120c 	.word	0x2000120c
 8004c6c:	20000edc 	.word	0x20000edc
 8004c70:	20000ecc 	.word	0x20000ecc
 8004c74:	20000dd4 	.word	0x20000dd4
 8004c78:	200003c4 	.word	0x200003c4
 8004c7c:	20000e08 	.word	0x20000e08
 8004c80:	20000434 	.word	0x20000434
 8004c84:	20000e0c 	.word	0x20000e0c
 8004c88:	20000e20 	.word	0x20000e20
 8004c8c:	20000e10 	.word	0x20000e10
 8004c90:	20000e50 	.word	0x20000e50
 8004c94:	200003f8 	.word	0x200003f8
 8004c98:	20000e88 	.word	0x20000e88
 8004c9c:	20000dd8 	.word	0x20000dd8
 8004ca0:	2000043c 	.word	0x2000043c
 8004ca4:	20000e8c 	.word	0x20000e8c
 8004ca8:	2000073c 	.word	0x2000073c
 8004cac:	20000740 	.word	0x20000740
 8004cb0:	20000e9c 	.word	0x20000e9c
 8004cb4:	20000dcc 	.word	0x20000dcc
 8004cb8:	20000e14 	.word	0x20000e14
 8004cbc:	20000e54 	.word	0x20000e54
 8004cc0:	20000dc8 	.word	0x20000dc8
 8004cc4:	20000ee0 	.word	0x20000ee0
 8004cc8:	20000dd0 	.word	0x20000dd0
 8004ccc:	20000ee4 	.word	0x20000ee4
 8004cd0:	41900000 	.word	0x41900000
 8004cd4:	477fff00 	.word	0x477fff00
 8004cd8:	20000ed0 	.word	0x20000ed0

08004cdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b094      	sub	sp, #80	@ 0x50
 8004ce0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004ce2:	f107 0318 	add.w	r3, r7, #24
 8004ce6:	2238      	movs	r2, #56	@ 0x38
 8004ce8:	2100      	movs	r1, #0
 8004cea:	4618      	mov	r0, r3
 8004cec:	f00a fbb2 	bl	800f454 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004cf0:	1d3b      	adds	r3, r7, #4
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	601a      	str	r2, [r3, #0]
 8004cf6:	605a      	str	r2, [r3, #4]
 8004cf8:	609a      	str	r2, [r3, #8]
 8004cfa:	60da      	str	r2, [r3, #12]
 8004cfc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8004cfe:	2000      	movs	r0, #0
 8004d00:	f003 fc24 	bl	800854c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004d04:	2302      	movs	r3, #2
 8004d06:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004d08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004d0c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004d0e:	2340      	movs	r3, #64	@ 0x40
 8004d10:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004d12:	2302      	movs	r3, #2
 8004d14:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004d16:	2302      	movs	r3, #2
 8004d18:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8004d1a:	2304      	movs	r3, #4
 8004d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8004d1e:	2355      	movs	r3, #85	@ 0x55
 8004d20:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004d22:	2302      	movs	r3, #2
 8004d24:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004d26:	2302      	movs	r3, #2
 8004d28:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004d2a:	2302      	movs	r3, #2
 8004d2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004d2e:	f107 0318 	add.w	r3, r7, #24
 8004d32:	4618      	mov	r0, r3
 8004d34:	f003 fcbe 	bl	80086b4 <HAL_RCC_OscConfig>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d001      	beq.n	8004d42 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8004d3e:	f000 fbb9 	bl	80054b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004d42:	230f      	movs	r3, #15
 8004d44:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004d46:	2303      	movs	r3, #3
 8004d48:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004d52:	2300      	movs	r3, #0
 8004d54:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004d56:	1d3b      	adds	r3, r7, #4
 8004d58:	2104      	movs	r1, #4
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f003 ffbc 	bl	8008cd8 <HAL_RCC_ClockConfig>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d001      	beq.n	8004d6a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8004d66:	f000 fba5 	bl	80054b4 <Error_Handler>
  }
}
 8004d6a:	bf00      	nop
 8004d6c:	3750      	adds	r7, #80	@ 0x50
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
	...

08004d74 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_9) { // Back Limit
 8004d7e:	88fb      	ldrh	r3, [r7, #6]
 8004d80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d84:	d103      	bne.n	8004d8e <HAL_GPIO_EXTI_Callback+0x1a>
		State = 9;
 8004d86:	4b20      	ldr	r3, [pc, #128]	@ (8004e08 <HAL_GPIO_EXTI_Callback+0x94>)
 8004d88:	2209      	movs	r2, #9
 8004d8a:	601a      	str	r2, [r3, #0]
	} else if (GPIO_Pin == GPIO_PIN_15) { // Bottom Limit
		State = 15;
		set_home_pris = 1;
		count_pris += 1;
	}
}
 8004d8c:	e036      	b.n	8004dfc <HAL_GPIO_EXTI_Callback+0x88>
	} else if (GPIO_Pin == GPIO_PIN_10) { // Front Limit
 8004d8e:	88fb      	ldrh	r3, [r7, #6]
 8004d90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d94:	d103      	bne.n	8004d9e <HAL_GPIO_EXTI_Callback+0x2a>
		State = 10;
 8004d96:	4b1c      	ldr	r3, [pc, #112]	@ (8004e08 <HAL_GPIO_EXTI_Callback+0x94>)
 8004d98:	220a      	movs	r2, #10
 8004d9a:	601a      	str	r2, [r3, #0]
}
 8004d9c:	e02e      	b.n	8004dfc <HAL_GPIO_EXTI_Callback+0x88>
	} else if (GPIO_Pin == GPIO_PIN_11) { // Emergency
 8004d9e:	88fb      	ldrh	r3, [r7, #6]
 8004da0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004da4:	d103      	bne.n	8004dae <HAL_GPIO_EXTI_Callback+0x3a>
		State = 11;
 8004da6:	4b18      	ldr	r3, [pc, #96]	@ (8004e08 <HAL_GPIO_EXTI_Callback+0x94>)
 8004da8:	220b      	movs	r2, #11
 8004daa:	601a      	str	r2, [r3, #0]
}
 8004dac:	e026      	b.n	8004dfc <HAL_GPIO_EXTI_Callback+0x88>
	} else if (GPIO_Pin == GPIO_PIN_12) { // Right Proximity
 8004dae:	88fb      	ldrh	r3, [r7, #6]
 8004db0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004db4:	d103      	bne.n	8004dbe <HAL_GPIO_EXTI_Callback+0x4a>
		State = 12;
 8004db6:	4b14      	ldr	r3, [pc, #80]	@ (8004e08 <HAL_GPIO_EXTI_Callback+0x94>)
 8004db8:	220c      	movs	r2, #12
 8004dba:	601a      	str	r2, [r3, #0]
}
 8004dbc:	e01e      	b.n	8004dfc <HAL_GPIO_EXTI_Callback+0x88>
	} else if (GPIO_Pin == GPIO_PIN_13) { // Left Proximity
 8004dbe:	88fb      	ldrh	r3, [r7, #6]
 8004dc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dc4:	d103      	bne.n	8004dce <HAL_GPIO_EXTI_Callback+0x5a>
		State = 13;
 8004dc6:	4b10      	ldr	r3, [pc, #64]	@ (8004e08 <HAL_GPIO_EXTI_Callback+0x94>)
 8004dc8:	220d      	movs	r2, #13
 8004dca:	601a      	str	r2, [r3, #0]
}
 8004dcc:	e016      	b.n	8004dfc <HAL_GPIO_EXTI_Callback+0x88>
	} else if (GPIO_Pin == GPIO_PIN_14) { // Upper Limit
 8004dce:	88fb      	ldrh	r3, [r7, #6]
 8004dd0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004dd4:	d103      	bne.n	8004dde <HAL_GPIO_EXTI_Callback+0x6a>
		State = 14;
 8004dd6:	4b0c      	ldr	r3, [pc, #48]	@ (8004e08 <HAL_GPIO_EXTI_Callback+0x94>)
 8004dd8:	220e      	movs	r2, #14
 8004dda:	601a      	str	r2, [r3, #0]
}
 8004ddc:	e00e      	b.n	8004dfc <HAL_GPIO_EXTI_Callback+0x88>
	} else if (GPIO_Pin == GPIO_PIN_15) { // Bottom Limit
 8004dde:	88fb      	ldrh	r3, [r7, #6]
 8004de0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004de4:	d10a      	bne.n	8004dfc <HAL_GPIO_EXTI_Callback+0x88>
		State = 15;
 8004de6:	4b08      	ldr	r3, [pc, #32]	@ (8004e08 <HAL_GPIO_EXTI_Callback+0x94>)
 8004de8:	220f      	movs	r2, #15
 8004dea:	601a      	str	r2, [r3, #0]
		set_home_pris = 1;
 8004dec:	4b07      	ldr	r3, [pc, #28]	@ (8004e0c <HAL_GPIO_EXTI_Callback+0x98>)
 8004dee:	2201      	movs	r2, #1
 8004df0:	601a      	str	r2, [r3, #0]
		count_pris += 1;
 8004df2:	4b07      	ldr	r3, [pc, #28]	@ (8004e10 <HAL_GPIO_EXTI_Callback+0x9c>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	3301      	adds	r3, #1
 8004df8:	4a05      	ldr	r2, [pc, #20]	@ (8004e10 <HAL_GPIO_EXTI_Callback+0x9c>)
 8004dfa:	6013      	str	r3, [r2, #0]
}
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr
 8004e08:	20000748 	.word	0x20000748
 8004e0c:	2000169c 	.word	0x2000169c
 8004e10:	200016a0 	.word	0x200016a0

08004e14 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
//	if (htim == &htim2) {
//		PS2_ReadData();
//	}
}
 8004e1c:	bf00      	nop
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <Prismatic_position_control>:

float Prismatic_position_control(float delta_posi) {
 8004e28:	b480      	push	{r7}
 8004e2a:	b087      	sub	sp, #28
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	ed87 0a01 	vstr	s0, [r7, #4]
	int anti_windup;
	error_posi_pris[0] = delta_posi;
 8004e32:	4a36      	ldr	r2, [pc, #216]	@ (8004f0c <Prismatic_position_control+0xe4>)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6013      	str	r3, [r2, #0]
//	Pris_posi_PID.Kp = 1;
//	Pris_posi_PID.Kd = 1;

	if (error_posi_pris[0] < 0 && error_posi_pris[1] > 0) {
 8004e38:	4b34      	ldr	r3, [pc, #208]	@ (8004f0c <Prismatic_position_control+0xe4>)
 8004e3a:	edd3 7a00 	vldr	s15, [r3]
 8004e3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e46:	d50a      	bpl.n	8004e5e <Prismatic_position_control+0x36>
 8004e48:	4b30      	ldr	r3, [pc, #192]	@ (8004f0c <Prismatic_position_control+0xe4>)
 8004e4a:	edd3 7a01 	vldr	s15, [r3, #4]
 8004e4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e56:	dd02      	ble.n	8004e5e <Prismatic_position_control+0x36>
		anti_windup = 0;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	617b      	str	r3, [r7, #20]
 8004e5c:	e014      	b.n	8004e88 <Prismatic_position_control+0x60>
	} else if (error_posi_pris[0] > 0 && error_posi_pris[1] < 0) {
 8004e5e:	4b2b      	ldr	r3, [pc, #172]	@ (8004f0c <Prismatic_position_control+0xe4>)
 8004e60:	edd3 7a00 	vldr	s15, [r3]
 8004e64:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e6c:	dd0a      	ble.n	8004e84 <Prismatic_position_control+0x5c>
 8004e6e:	4b27      	ldr	r3, [pc, #156]	@ (8004f0c <Prismatic_position_control+0xe4>)
 8004e70:	edd3 7a01 	vldr	s15, [r3, #4]
 8004e74:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e7c:	d502      	bpl.n	8004e84 <Prismatic_position_control+0x5c>
		anti_windup = 0;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	617b      	str	r3, [r7, #20]
 8004e82:	e001      	b.n	8004e88 <Prismatic_position_control+0x60>
	} else {
		anti_windup = 1;
 8004e84:	2301      	movs	r3, #1
 8004e86:	617b      	str	r3, [r7, #20]
 8004e88:	4b21      	ldr	r3, [pc, #132]	@ (8004f10 <Prismatic_position_control+0xe8>)
 8004e8a:	613b      	str	r3, [r7, #16]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	60fb      	str	r3, [r7, #12]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	ed93 7a00 	vldr	s14, [r3]
 8004e96:	edd7 7a03 	vldr	s15, [r7, #12]
 8004e9a:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	edd3 6a01 	vldr	s13, [r3, #4]
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	edd3 7a03 	vldr	s15, [r3, #12]
 8004eaa:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8004eae:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	edd3 6a02 	vldr	s13, [r3, #8]
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	edd3 7a04 	vldr	s15, [r3, #16]
 8004ebe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ec2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8004ecc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ed0:	edc7 7a02 	vstr	s15, [r7, #8]

    /* Update state */
    S->state[1] = S->state[0];
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	68da      	ldr	r2, [r3, #12]
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	68ba      	ldr	r2, [r7, #8]
 8004ee6:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8004ee8:	68bb      	ldr	r3, [r7, #8]
//		Pris_posi_PID.Ki = 0;
//	} else {
//		Pris_posi_PID.Ki = 1;
//	}

	V_pris_posi_PID = arm_pid_f32(&Pris_posi_PID, delta_posi);
 8004eea:	4a0a      	ldr	r2, [pc, #40]	@ (8004f14 <Prismatic_position_control+0xec>)
 8004eec:	6013      	str	r3, [r2, #0]

//	if (V_pris_posi_PID > 24) {
//		V_pris_posi_PID = 24;
//	}

	error_posi_pris[1] = error_posi_pris[0];
 8004eee:	4b07      	ldr	r3, [pc, #28]	@ (8004f0c <Prismatic_position_control+0xe4>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a06      	ldr	r2, [pc, #24]	@ (8004f0c <Prismatic_position_control+0xe4>)
 8004ef4:	6053      	str	r3, [r2, #4]
	return V_pris_posi_PID;
 8004ef6:	4b07      	ldr	r3, [pc, #28]	@ (8004f14 <Prismatic_position_control+0xec>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	ee07 3a90 	vmov	s15, r3
}
 8004efe:	eeb0 0a67 	vmov.f32	s0, s15
 8004f02:	371c      	adds	r7, #28
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr
 8004f0c:	20000e18 	.word	0x20000e18
 8004f10:	20000de4 	.word	0x20000de4
 8004f14:	20000e10 	.word	0x20000e10

08004f18 <Prismatic_velocity_control>:

float Prismatic_velocity_control(float delta_velo) {
 8004f18:	b480      	push	{r7}
 8004f1a:	b087      	sub	sp, #28
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	ed87 0a01 	vstr	s0, [r7, #4]
	int anti_windup;
	error_velo_pris[0] = delta_velo;
 8004f22:	4a4e      	ldr	r2, [pc, #312]	@ (800505c <Prismatic_velocity_control+0x144>)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6013      	str	r3, [r2, #0]
//	Pris_velo_PID.Kp = 0.01;

	if (error_velo_pris[0] < 0 && error_velo_pris[1] > 0) {
 8004f28:	4b4c      	ldr	r3, [pc, #304]	@ (800505c <Prismatic_velocity_control+0x144>)
 8004f2a:	edd3 7a00 	vldr	s15, [r3]
 8004f2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f36:	d50a      	bpl.n	8004f4e <Prismatic_velocity_control+0x36>
 8004f38:	4b48      	ldr	r3, [pc, #288]	@ (800505c <Prismatic_velocity_control+0x144>)
 8004f3a:	edd3 7a01 	vldr	s15, [r3, #4]
 8004f3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f46:	dd02      	ble.n	8004f4e <Prismatic_velocity_control+0x36>
		anti_windup = 0;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	617b      	str	r3, [r7, #20]
 8004f4c:	e014      	b.n	8004f78 <Prismatic_velocity_control+0x60>
	} else if (error_velo_pris[0] > 0 && error_velo_pris[1] < 0) {
 8004f4e:	4b43      	ldr	r3, [pc, #268]	@ (800505c <Prismatic_velocity_control+0x144>)
 8004f50:	edd3 7a00 	vldr	s15, [r3]
 8004f54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f5c:	dd0a      	ble.n	8004f74 <Prismatic_velocity_control+0x5c>
 8004f5e:	4b3f      	ldr	r3, [pc, #252]	@ (800505c <Prismatic_velocity_control+0x144>)
 8004f60:	edd3 7a01 	vldr	s15, [r3, #4]
 8004f64:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f6c:	d502      	bpl.n	8004f74 <Prismatic_velocity_control+0x5c>
		anti_windup = 0;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	617b      	str	r3, [r7, #20]
 8004f72:	e001      	b.n	8004f78 <Prismatic_velocity_control+0x60>
	} else {
		anti_windup = 1;
 8004f74:	2301      	movs	r3, #1
 8004f76:	617b      	str	r3, [r7, #20]
	}

	if (V_pris_velo_PID >= 24 && anti_windup == 0) {
 8004f78:	4b39      	ldr	r3, [pc, #228]	@ (8005060 <Prismatic_velocity_control+0x148>)
 8004f7a:	edd3 7a00 	vldr	s15, [r3]
 8004f7e:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 8004f82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f8a:	db07      	blt.n	8004f9c <Prismatic_velocity_control+0x84>
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d104      	bne.n	8004f9c <Prismatic_velocity_control+0x84>
		Pris_velo_PID.Ki = 0;
 8004f92:	4b34      	ldr	r3, [pc, #208]	@ (8005064 <Prismatic_velocity_control+0x14c>)
 8004f94:	f04f 0200 	mov.w	r2, #0
 8004f98:	61da      	str	r2, [r3, #28]
 8004f9a:	e002      	b.n	8004fa2 <Prismatic_velocity_control+0x8a>
	} else {
		Pris_velo_PID.Ki = 0.001;
 8004f9c:	4b31      	ldr	r3, [pc, #196]	@ (8005064 <Prismatic_velocity_control+0x14c>)
 8004f9e:	4a32      	ldr	r2, [pc, #200]	@ (8005068 <Prismatic_velocity_control+0x150>)
 8004fa0:	61da      	str	r2, [r3, #28]
 8004fa2:	4b30      	ldr	r3, [pc, #192]	@ (8005064 <Prismatic_velocity_control+0x14c>)
 8004fa4:	613b      	str	r3, [r7, #16]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	60fb      	str	r3, [r7, #12]
    out = (S->A0 * in) +
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	ed93 7a00 	vldr	s14, [r3]
 8004fb0:	edd7 7a03 	vldr	s15, [r7, #12]
 8004fb4:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	edd3 6a01 	vldr	s13, [r3, #4]
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	edd3 7a03 	vldr	s15, [r3, #12]
 8004fc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8004fc8:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	edd3 6a02 	vldr	s13, [r3, #8]
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	edd3 7a04 	vldr	s15, [r3, #16]
 8004fd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004fdc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8004fe6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fea:	edc7 7a02 	vstr	s15, [r7, #8]
    S->state[1] = S->state[0];
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	68da      	ldr	r2, [r3, #12]
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	68ba      	ldr	r2, [r7, #8]
 8005000:	615a      	str	r2, [r3, #20]
    return (out);
 8005002:	68bb      	ldr	r3, [r7, #8]
	}

	V_pris_velo_PID = arm_pid_f32(&Pris_velo_PID, delta_velo);
 8005004:	4a16      	ldr	r2, [pc, #88]	@ (8005060 <Prismatic_velocity_control+0x148>)
 8005006:	6013      	str	r3, [r2, #0]

	if (V_pris_velo_PID > 24) {
 8005008:	4b15      	ldr	r3, [pc, #84]	@ (8005060 <Prismatic_velocity_control+0x148>)
 800500a:	edd3 7a00 	vldr	s15, [r3]
 800500e:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 8005012:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800501a:	dd03      	ble.n	8005024 <Prismatic_velocity_control+0x10c>
		V_pris_velo_PID = 24;
 800501c:	4b10      	ldr	r3, [pc, #64]	@ (8005060 <Prismatic_velocity_control+0x148>)
 800501e:	4a13      	ldr	r2, [pc, #76]	@ (800506c <Prismatic_velocity_control+0x154>)
 8005020:	601a      	str	r2, [r3, #0]
 8005022:	e00c      	b.n	800503e <Prismatic_velocity_control+0x126>
	} else if (V_pris_velo_PID < -24) {
 8005024:	4b0e      	ldr	r3, [pc, #56]	@ (8005060 <Prismatic_velocity_control+0x148>)
 8005026:	edd3 7a00 	vldr	s15, [r3]
 800502a:	eebb 7a08 	vmov.f32	s14, #184	@ 0xc1c00000 -24.0
 800502e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005036:	d502      	bpl.n	800503e <Prismatic_velocity_control+0x126>
		V_pris_velo_PID = -24;
 8005038:	4b09      	ldr	r3, [pc, #36]	@ (8005060 <Prismatic_velocity_control+0x148>)
 800503a:	4a0d      	ldr	r2, [pc, #52]	@ (8005070 <Prismatic_velocity_control+0x158>)
 800503c:	601a      	str	r2, [r3, #0]
	}

	error_velo_pris[1] = error_velo_pris[0];
 800503e:	4b07      	ldr	r3, [pc, #28]	@ (800505c <Prismatic_velocity_control+0x144>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a06      	ldr	r2, [pc, #24]	@ (800505c <Prismatic_velocity_control+0x144>)
 8005044:	6053      	str	r3, [r2, #4]
	return V_pris_velo_PID;
 8005046:	4b06      	ldr	r3, [pc, #24]	@ (8005060 <Prismatic_velocity_control+0x148>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	ee07 3a90 	vmov	s15, r3
}
 800504e:	eeb0 0a67 	vmov.f32	s0, s15
 8005052:	371c      	adds	r7, #28
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr
 800505c:	20000e58 	.word	0x20000e58
 8005060:	20000e50 	.word	0x20000e50
 8005064:	20000e24 	.word	0x20000e24
 8005068:	3a83126f 	.word	0x3a83126f
 800506c:	41c00000 	.word	0x41c00000
 8005070:	c1c00000 	.word	0xc1c00000

08005074 <Revolute_position_control>:

float Revolute_position_control(float delta_posi) {
 8005074:	b480      	push	{r7}
 8005076:	b087      	sub	sp, #28
 8005078:	af00      	add	r7, sp, #0
 800507a:	ed87 0a01 	vstr	s0, [r7, #4]
	int anti_windup;
	error_posi_rev[0] = delta_posi;
 800507e:	4a36      	ldr	r2, [pc, #216]	@ (8005158 <Revolute_position_control+0xe4>)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6013      	str	r3, [r2, #0]
//	Rev_posi_PID.Kp = 1;
//	Rev_posi_PID.Kd = 1;

	if (error_posi_rev[0] < 0 && error_posi_rev[1] > 0) {
 8005084:	4b34      	ldr	r3, [pc, #208]	@ (8005158 <Revolute_position_control+0xe4>)
 8005086:	edd3 7a00 	vldr	s15, [r3]
 800508a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800508e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005092:	d50a      	bpl.n	80050aa <Revolute_position_control+0x36>
 8005094:	4b30      	ldr	r3, [pc, #192]	@ (8005158 <Revolute_position_control+0xe4>)
 8005096:	edd3 7a01 	vldr	s15, [r3, #4]
 800509a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800509e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050a2:	dd02      	ble.n	80050aa <Revolute_position_control+0x36>
		anti_windup = 0;
 80050a4:	2300      	movs	r3, #0
 80050a6:	617b      	str	r3, [r7, #20]
 80050a8:	e014      	b.n	80050d4 <Revolute_position_control+0x60>
	} else if (error_posi_rev[0] > 0 && error_posi_rev[1] < 0) {
 80050aa:	4b2b      	ldr	r3, [pc, #172]	@ (8005158 <Revolute_position_control+0xe4>)
 80050ac:	edd3 7a00 	vldr	s15, [r3]
 80050b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80050b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050b8:	dd0a      	ble.n	80050d0 <Revolute_position_control+0x5c>
 80050ba:	4b27      	ldr	r3, [pc, #156]	@ (8005158 <Revolute_position_control+0xe4>)
 80050bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80050c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80050c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050c8:	d502      	bpl.n	80050d0 <Revolute_position_control+0x5c>
		anti_windup = 0;
 80050ca:	2300      	movs	r3, #0
 80050cc:	617b      	str	r3, [r7, #20]
 80050ce:	e001      	b.n	80050d4 <Revolute_position_control+0x60>
	} else {
		anti_windup = 1;
 80050d0:	2301      	movs	r3, #1
 80050d2:	617b      	str	r3, [r7, #20]
 80050d4:	4b21      	ldr	r3, [pc, #132]	@ (800515c <Revolute_position_control+0xe8>)
 80050d6:	613b      	str	r3, [r7, #16]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	60fb      	str	r3, [r7, #12]
    out = (S->A0 * in) +
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	ed93 7a00 	vldr	s14, [r3]
 80050e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80050e6:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	edd3 6a01 	vldr	s13, [r3, #4]
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	edd3 7a03 	vldr	s15, [r3, #12]
 80050f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80050fa:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	edd3 6a02 	vldr	s13, [r3, #8]
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	edd3 7a04 	vldr	s15, [r3, #16]
 800510a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800510e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8005118:	ee77 7a27 	vadd.f32	s15, s14, s15
 800511c:	edc7 7a02 	vstr	s15, [r7, #8]
    S->state[1] = S->state[0];
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	68da      	ldr	r2, [r3, #12]
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	68ba      	ldr	r2, [r7, #8]
 8005132:	615a      	str	r2, [r3, #20]
    return (out);
 8005134:	68bb      	ldr	r3, [r7, #8]
//		Rev_posi_PID.Ki = 0;
//	} else {
//		Rev_posi_PID.Ki = 1;
//	}

	V_rev_posi_PID = arm_pid_f32(&Rev_posi_PID, delta_posi);
 8005136:	4a0a      	ldr	r2, [pc, #40]	@ (8005160 <Revolute_position_control+0xec>)
 8005138:	6013      	str	r3, [r2, #0]

//	if (V_rev_posi_PID > 24) {
//		V_rev_posi_PID = 24;
//	}

	error_posi_rev[1] = error_posi_rev[0];
 800513a:	4b07      	ldr	r3, [pc, #28]	@ (8005158 <Revolute_position_control+0xe4>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a06      	ldr	r2, [pc, #24]	@ (8005158 <Revolute_position_control+0xe4>)
 8005140:	6053      	str	r3, [r2, #4]
	return V_rev_posi_PID;
 8005142:	4b07      	ldr	r3, [pc, #28]	@ (8005160 <Revolute_position_control+0xec>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	ee07 3a90 	vmov	s15, r3
}
 800514a:	eeb0 0a67 	vmov.f32	s0, s15
 800514e:	371c      	adds	r7, #28
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr
 8005158:	20000e94 	.word	0x20000e94
 800515c:	20000e64 	.word	0x20000e64
 8005160:	20000e90 	.word	0x20000e90

08005164 <Revolute_velocity_control>:

float Revolute_velocity_control(float delta_velo) {
 8005164:	b480      	push	{r7}
 8005166:	b087      	sub	sp, #28
 8005168:	af00      	add	r7, sp, #0
 800516a:	ed87 0a01 	vstr	s0, [r7, #4]
	int anti_windup;
	error_velo_rev[0] = delta_velo;
 800516e:	4a47      	ldr	r2, [pc, #284]	@ (800528c <Revolute_velocity_control+0x128>)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6013      	str	r3, [r2, #0]
//	Rev_velo_PID.Kp = 0.01;

	if (error_velo_rev[0] < 0 && error_velo_rev[1] > 0) {
 8005174:	4b45      	ldr	r3, [pc, #276]	@ (800528c <Revolute_velocity_control+0x128>)
 8005176:	edd3 7a00 	vldr	s15, [r3]
 800517a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800517e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005182:	d50a      	bpl.n	800519a <Revolute_velocity_control+0x36>
 8005184:	4b41      	ldr	r3, [pc, #260]	@ (800528c <Revolute_velocity_control+0x128>)
 8005186:	edd3 7a01 	vldr	s15, [r3, #4]
 800518a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800518e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005192:	dd02      	ble.n	800519a <Revolute_velocity_control+0x36>
		anti_windup = 0;
 8005194:	2300      	movs	r3, #0
 8005196:	617b      	str	r3, [r7, #20]
 8005198:	e014      	b.n	80051c4 <Revolute_velocity_control+0x60>
	} else if (error_velo_rev[0] > 0 && error_velo_rev[1] < 0) {
 800519a:	4b3c      	ldr	r3, [pc, #240]	@ (800528c <Revolute_velocity_control+0x128>)
 800519c:	edd3 7a00 	vldr	s15, [r3]
 80051a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80051a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051a8:	dd0a      	ble.n	80051c0 <Revolute_velocity_control+0x5c>
 80051aa:	4b38      	ldr	r3, [pc, #224]	@ (800528c <Revolute_velocity_control+0x128>)
 80051ac:	edd3 7a01 	vldr	s15, [r3, #4]
 80051b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80051b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051b8:	d502      	bpl.n	80051c0 <Revolute_velocity_control+0x5c>
		anti_windup = 0;
 80051ba:	2300      	movs	r3, #0
 80051bc:	617b      	str	r3, [r7, #20]
 80051be:	e001      	b.n	80051c4 <Revolute_velocity_control+0x60>
	} else {
		anti_windup = 1;
 80051c0:	2301      	movs	r3, #1
 80051c2:	617b      	str	r3, [r7, #20]
	}

	if (V_rev_velo_PID >= 18 && anti_windup == 0) {
 80051c4:	4b32      	ldr	r3, [pc, #200]	@ (8005290 <Revolute_velocity_control+0x12c>)
 80051c6:	edd3 7a00 	vldr	s15, [r3]
 80051ca:	eeb3 7a02 	vmov.f32	s14, #50	@ 0x41900000  18.0
 80051ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051d6:	db07      	blt.n	80051e8 <Revolute_velocity_control+0x84>
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d104      	bne.n	80051e8 <Revolute_velocity_control+0x84>
		Rev_velo_PID.Ki = 0;
 80051de:	4b2d      	ldr	r3, [pc, #180]	@ (8005294 <Revolute_velocity_control+0x130>)
 80051e0:	f04f 0200 	mov.w	r2, #0
 80051e4:	61da      	str	r2, [r3, #28]
 80051e6:	e002      	b.n	80051ee <Revolute_velocity_control+0x8a>
	} else {
		Rev_velo_PID.Ki = 0.001;
 80051e8:	4b2a      	ldr	r3, [pc, #168]	@ (8005294 <Revolute_velocity_control+0x130>)
 80051ea:	4a2b      	ldr	r2, [pc, #172]	@ (8005298 <Revolute_velocity_control+0x134>)
 80051ec:	61da      	str	r2, [r3, #28]
	}

	if (V_rev_velo_PID > 18) {
 80051ee:	4b28      	ldr	r3, [pc, #160]	@ (8005290 <Revolute_velocity_control+0x12c>)
 80051f0:	edd3 7a00 	vldr	s15, [r3]
 80051f4:	eeb3 7a02 	vmov.f32	s14, #50	@ 0x41900000  18.0
 80051f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005200:	dd02      	ble.n	8005208 <Revolute_velocity_control+0xa4>
		V_rev_velo_PID = 18;
 8005202:	4b23      	ldr	r3, [pc, #140]	@ (8005290 <Revolute_velocity_control+0x12c>)
 8005204:	4a25      	ldr	r2, [pc, #148]	@ (800529c <Revolute_velocity_control+0x138>)
 8005206:	601a      	str	r2, [r3, #0]
 8005208:	4b22      	ldr	r3, [pc, #136]	@ (8005294 <Revolute_velocity_control+0x130>)
 800520a:	613b      	str	r3, [r7, #16]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	60fb      	str	r3, [r7, #12]
    out = (S->A0 * in) +
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	ed93 7a00 	vldr	s14, [r3]
 8005216:	edd7 7a03 	vldr	s15, [r7, #12]
 800521a:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	edd3 6a01 	vldr	s13, [r3, #4]
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	edd3 7a03 	vldr	s15, [r3, #12]
 800522a:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 800522e:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	edd3 6a02 	vldr	s13, [r3, #8]
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	edd3 7a04 	vldr	s15, [r3, #16]
 800523e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005242:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 800524c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005250:	edc7 7a02 	vstr	s15, [r7, #8]
    S->state[1] = S->state[0];
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	68da      	ldr	r2, [r3, #12]
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	68ba      	ldr	r2, [r7, #8]
 8005266:	615a      	str	r2, [r3, #20]
    return (out);
 8005268:	68bb      	ldr	r3, [r7, #8]
	}

	V_rev_velo_PID = arm_pid_f32(&Rev_velo_PID, delta_velo);
 800526a:	4a09      	ldr	r2, [pc, #36]	@ (8005290 <Revolute_velocity_control+0x12c>)
 800526c:	6013      	str	r3, [r2, #0]
	error_velo_rev[1] = error_velo_rev[0];
 800526e:	4b07      	ldr	r3, [pc, #28]	@ (800528c <Revolute_velocity_control+0x128>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a06      	ldr	r2, [pc, #24]	@ (800528c <Revolute_velocity_control+0x128>)
 8005274:	6053      	str	r3, [r2, #4]
	return V_rev_velo_PID;
 8005276:	4b06      	ldr	r3, [pc, #24]	@ (8005290 <Revolute_velocity_control+0x12c>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	ee07 3a90 	vmov	s15, r3
}
 800527e:	eeb0 0a67 	vmov.f32	s0, s15
 8005282:	371c      	adds	r7, #28
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr
 800528c:	20000ed4 	.word	0x20000ed4
 8005290:	20000ecc 	.word	0x20000ecc
 8005294:	20000ea0 	.word	0x20000ea0
 8005298:	3a83126f 	.word	0x3a83126f
 800529c:	41900000 	.word	0x41900000

080052a0 <voltage_to_pwm>:

float voltage_to_pwm(float voltage) {
 80052a0:	b480      	push	{r7}
 80052a2:	b085      	sub	sp, #20
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	ed87 0a01 	vstr	s0, [r7, #4]
	float pwm = (voltage * 65535) / 24;
 80052aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80052ae:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80052d8 <voltage_to_pwm+0x38>
 80052b2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80052b6:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 80052ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80052be:	edc7 7a03 	vstr	s15, [r7, #12]
	return pwm;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	ee07 3a90 	vmov	s15, r3
}
 80052c8:	eeb0 0a67 	vmov.f32	s0, s15
 80052cc:	3714      	adds	r7, #20
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
 80052d6:	bf00      	nop
 80052d8:	477fff00 	.word	0x477fff00
 80052dc:	00000000 	.word	0x00000000

080052e0 <Revolute_dis>:
//	float load = 0.01 / (2.0 * (22.0/7.0) * 4.0 * motor.Kt_Pri);
//	voltage_dis = (disturbance_feedforward_pri(&motor, load)) * (0.3*9.81) * gain_disturbance; // อย่าลืมคูณ sin(theta)
//	return voltage_dis;
//}

float Revolute_dis() {
 80052e0:	b5b0      	push	{r4, r5, r7, lr}
 80052e2:	af00      	add	r7, sp, #0
	load = (8.2 * 9.81 * 0.45
			* sinf(Encoder_GetPosition(&encoder2) / (100.0 / 30.0)))
 80052e4:	486c      	ldr	r0, [pc, #432]	@ (8005498 <Revolute_dis+0x1b8>)
 80052e6:	f7fc fe51 	bl	8001f8c <Encoder_GetPosition>
 80052ea:	ee10 3a10 	vmov	r3, s0
 80052ee:	4618      	mov	r0, r3
 80052f0:	f7fb f8f6 	bl	80004e0 <__aeabi_f2d>
 80052f4:	a35e      	add	r3, pc, #376	@ (adr r3, 8005470 <Revolute_dis+0x190>)
 80052f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fa:	f7fb fa73 	bl	80007e4 <__aeabi_ddiv>
 80052fe:	4602      	mov	r2, r0
 8005300:	460b      	mov	r3, r1
 8005302:	4610      	mov	r0, r2
 8005304:	4619      	mov	r1, r3
 8005306:	f7fb fc13 	bl	8000b30 <__aeabi_d2f>
 800530a:	4603      	mov	r3, r0
 800530c:	ee00 3a10 	vmov	s0, r3
 8005310:	f00a fa12 	bl	800f738 <sinf>
 8005314:	ee10 3a10 	vmov	r3, s0
 8005318:	4618      	mov	r0, r3
 800531a:	f7fb f8e1 	bl	80004e0 <__aeabi_f2d>
 800531e:	a356      	add	r3, pc, #344	@ (adr r3, 8005478 <Revolute_dis+0x198>)
 8005320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005324:	f7fb f934 	bl	8000590 <__aeabi_dmul>
 8005328:	4602      	mov	r2, r0
 800532a:	460b      	mov	r3, r1
 800532c:	4614      	mov	r4, r2
 800532e:	461d      	mov	r5, r3
			+ (0.3 * 9.81
					* sinf(Encoder_GetPosition(&encoder2) / (100.0 / 30.0))
 8005330:	4859      	ldr	r0, [pc, #356]	@ (8005498 <Revolute_dis+0x1b8>)
 8005332:	f7fc fe2b 	bl	8001f8c <Encoder_GetPosition>
 8005336:	ee10 3a10 	vmov	r3, s0
 800533a:	4618      	mov	r0, r3
 800533c:	f7fb f8d0 	bl	80004e0 <__aeabi_f2d>
 8005340:	a34b      	add	r3, pc, #300	@ (adr r3, 8005470 <Revolute_dis+0x190>)
 8005342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005346:	f7fb fa4d 	bl	80007e4 <__aeabi_ddiv>
 800534a:	4602      	mov	r2, r0
 800534c:	460b      	mov	r3, r1
 800534e:	4610      	mov	r0, r2
 8005350:	4619      	mov	r1, r3
 8005352:	f7fb fbed 	bl	8000b30 <__aeabi_d2f>
 8005356:	4603      	mov	r3, r0
 8005358:	ee00 3a10 	vmov	s0, r3
 800535c:	f00a f9ec 	bl	800f738 <sinf>
 8005360:	ee10 3a10 	vmov	r3, s0
 8005364:	4618      	mov	r0, r3
 8005366:	f7fb f8bb 	bl	80004e0 <__aeabi_f2d>
 800536a:	a345      	add	r3, pc, #276	@ (adr r3, 8005480 <Revolute_dis+0x1a0>)
 800536c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005370:	f7fb f90e 	bl	8000590 <__aeabi_dmul>
 8005374:	4602      	mov	r2, r0
 8005376:	460b      	mov	r3, r1
 8005378:	4610      	mov	r0, r2
 800537a:	4619      	mov	r1, r3
					* 0.4);
 800537c:	a342      	add	r3, pc, #264	@ (adr r3, 8005488 <Revolute_dis+0x1a8>)
 800537e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005382:	f7fb f905 	bl	8000590 <__aeabi_dmul>
 8005386:	4602      	mov	r2, r0
 8005388:	460b      	mov	r3, r1
			+ (0.3 * 9.81
 800538a:	4620      	mov	r0, r4
 800538c:	4629      	mov	r1, r5
 800538e:	f7fa ff49 	bl	8000224 <__adddf3>
 8005392:	4602      	mov	r2, r0
 8005394:	460b      	mov	r3, r1
 8005396:	4610      	mov	r0, r2
 8005398:	4619      	mov	r1, r3
 800539a:	f7fb fbc9 	bl	8000b30 <__aeabi_d2f>
 800539e:	4603      	mov	r3, r0
	load = (8.2 * 9.81 * 0.45
 80053a0:	4a3e      	ldr	r2, [pc, #248]	@ (800549c <Revolute_dis+0x1bc>)
 80053a2:	6013      	str	r3, [r2, #0]
	sine = sinf(Encoder_GetPosition(&encoder2) / (100.0 / 30.0));
 80053a4:	483c      	ldr	r0, [pc, #240]	@ (8005498 <Revolute_dis+0x1b8>)
 80053a6:	f7fc fdf1 	bl	8001f8c <Encoder_GetPosition>
 80053aa:	ee10 3a10 	vmov	r3, s0
 80053ae:	4618      	mov	r0, r3
 80053b0:	f7fb f896 	bl	80004e0 <__aeabi_f2d>
 80053b4:	a32e      	add	r3, pc, #184	@ (adr r3, 8005470 <Revolute_dis+0x190>)
 80053b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ba:	f7fb fa13 	bl	80007e4 <__aeabi_ddiv>
 80053be:	4602      	mov	r2, r0
 80053c0:	460b      	mov	r3, r1
 80053c2:	4610      	mov	r0, r2
 80053c4:	4619      	mov	r1, r3
 80053c6:	f7fb fbb3 	bl	8000b30 <__aeabi_d2f>
 80053ca:	4603      	mov	r3, r0
 80053cc:	ee00 3a10 	vmov	s0, r3
 80053d0:	f00a f9b2 	bl	800f738 <sinf>
 80053d4:	eef0 7a40 	vmov.f32	s15, s0
 80053d8:	4b31      	ldr	r3, [pc, #196]	@ (80054a0 <Revolute_dis+0x1c0>)
 80053da:	edc3 7a00 	vstr	s15, [r3]
	encoder = Encoder_GetPosition(&encoder2) / (100.0 / 30.0);
 80053de:	482e      	ldr	r0, [pc, #184]	@ (8005498 <Revolute_dis+0x1b8>)
 80053e0:	f7fc fdd4 	bl	8001f8c <Encoder_GetPosition>
 80053e4:	ee10 3a10 	vmov	r3, s0
 80053e8:	4618      	mov	r0, r3
 80053ea:	f7fb f879 	bl	80004e0 <__aeabi_f2d>
 80053ee:	a320      	add	r3, pc, #128	@ (adr r3, 8005470 <Revolute_dis+0x190>)
 80053f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f4:	f7fb f9f6 	bl	80007e4 <__aeabi_ddiv>
 80053f8:	4602      	mov	r2, r0
 80053fa:	460b      	mov	r3, r1
 80053fc:	4610      	mov	r0, r2
 80053fe:	4619      	mov	r1, r3
 8005400:	f7fb fb96 	bl	8000b30 <__aeabi_d2f>
 8005404:	4603      	mov	r3, r0
 8005406:	4a27      	ldr	r2, [pc, #156]	@ (80054a4 <Revolute_dis+0x1c4>)
 8005408:	6013      	str	r3, [r2, #0]
//	load = (8.2 * 9.81 * 0.45 * cosf(1.57)) + (0.3 * 9.81 * cosf(1.57) * 0.4);
//	voltage_dis_rev = (disturbance_feedforward(&Rev_motor, load)) * gain_disturbance_rev;
	voltage_dis_rev = (Rev_motor.R_Rev / Rev_motor.Ke_Rev) * kf_rev.x_data[2]
 800540a:	4b27      	ldr	r3, [pc, #156]	@ (80054a8 <Revolute_dis+0x1c8>)
 800540c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8005410:	4b25      	ldr	r3, [pc, #148]	@ (80054a8 <Revolute_dis+0x1c8>)
 8005412:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8005416:	f7fb f9e5 	bl	80007e4 <__aeabi_ddiv>
 800541a:	4602      	mov	r2, r0
 800541c:	460b      	mov	r3, r1
 800541e:	4614      	mov	r4, r2
 8005420:	461d      	mov	r5, r3
 8005422:	4b22      	ldr	r3, [pc, #136]	@ (80054ac <Revolute_dis+0x1cc>)
 8005424:	f8d3 323c 	ldr.w	r3, [r3, #572]	@ 0x23c
 8005428:	4618      	mov	r0, r3
 800542a:	f7fb f859 	bl	80004e0 <__aeabi_f2d>
 800542e:	4602      	mov	r2, r0
 8005430:	460b      	mov	r3, r1
			* 1.0 / 3.3;
 8005432:	4620      	mov	r0, r4
 8005434:	4629      	mov	r1, r5
 8005436:	f7fb f8ab 	bl	8000590 <__aeabi_dmul>
 800543a:	4602      	mov	r2, r0
 800543c:	460b      	mov	r3, r1
 800543e:	4610      	mov	r0, r2
 8005440:	4619      	mov	r1, r3
 8005442:	a313      	add	r3, pc, #76	@ (adr r3, 8005490 <Revolute_dis+0x1b0>)
 8005444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005448:	f7fb f9cc 	bl	80007e4 <__aeabi_ddiv>
 800544c:	4602      	mov	r2, r0
 800544e:	460b      	mov	r3, r1
 8005450:	4610      	mov	r0, r2
 8005452:	4619      	mov	r1, r3
 8005454:	f7fb fb6c 	bl	8000b30 <__aeabi_d2f>
 8005458:	4603      	mov	r3, r0
	voltage_dis_rev = (Rev_motor.R_Rev / Rev_motor.Ke_Rev) * kf_rev.x_data[2]
 800545a:	4a15      	ldr	r2, [pc, #84]	@ (80054b0 <Revolute_dis+0x1d0>)
 800545c:	6013      	str	r3, [r2, #0]
	return voltage_dis_rev;
 800545e:	4b14      	ldr	r3, [pc, #80]	@ (80054b0 <Revolute_dis+0x1d0>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	ee07 3a90 	vmov	s15, r3
}
 8005466:	eeb0 0a67 	vmov.f32	s0, s15
 800546a:	bdb0      	pop	{r4, r5, r7, pc}
 800546c:	f3af 8000 	nop.w
 8005470:	aaaaaaab 	.word	0xaaaaaaab
 8005474:	400aaaaa 	.word	0x400aaaaa
 8005478:	8e219652 	.word	0x8e219652
 800547c:	40421975 	.word	0x40421975
 8005480:	95810625 	.word	0x95810625
 8005484:	40078b43 	.word	0x40078b43
 8005488:	9999999a 	.word	0x9999999a
 800548c:	3fd99999 	.word	0x3fd99999
 8005490:	66666666 	.word	0x66666666
 8005494:	400a6666 	.word	0x400a6666
 8005498:	200003f8 	.word	0x200003f8
 800549c:	200015c0 	.word	0x200015c0
 80054a0:	200015c4 	.word	0x200015c4
 80054a4:	200015c8 	.word	0x200015c8
 80054a8:	20001568 	.word	0x20001568
 80054ac:	2000120c 	.word	0x2000120c
 80054b0:	20000dd0 	.word	0x20000dd0

080054b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80054b4:	b480      	push	{r7}
 80054b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80054b8:	b672      	cpsid	i
}
 80054ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80054bc:	bf00      	nop
 80054be:	e7fd      	b.n	80054bc <Error_Handler+0x8>

080054c0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80054c4:	4b1b      	ldr	r3, [pc, #108]	@ (8005534 <MX_SPI1_Init+0x74>)
 80054c6:	4a1c      	ldr	r2, [pc, #112]	@ (8005538 <MX_SPI1_Init+0x78>)
 80054c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80054ca:	4b1a      	ldr	r3, [pc, #104]	@ (8005534 <MX_SPI1_Init+0x74>)
 80054cc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80054d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80054d2:	4b18      	ldr	r3, [pc, #96]	@ (8005534 <MX_SPI1_Init+0x74>)
 80054d4:	2200      	movs	r2, #0
 80054d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80054d8:	4b16      	ldr	r3, [pc, #88]	@ (8005534 <MX_SPI1_Init+0x74>)
 80054da:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80054de:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80054e0:	4b14      	ldr	r3, [pc, #80]	@ (8005534 <MX_SPI1_Init+0x74>)
 80054e2:	2202      	movs	r2, #2
 80054e4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80054e6:	4b13      	ldr	r3, [pc, #76]	@ (8005534 <MX_SPI1_Init+0x74>)
 80054e8:	2201      	movs	r2, #1
 80054ea:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80054ec:	4b11      	ldr	r3, [pc, #68]	@ (8005534 <MX_SPI1_Init+0x74>)
 80054ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80054f2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80054f4:	4b0f      	ldr	r3, [pc, #60]	@ (8005534 <MX_SPI1_Init+0x74>)
 80054f6:	2238      	movs	r2, #56	@ 0x38
 80054f8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80054fa:	4b0e      	ldr	r3, [pc, #56]	@ (8005534 <MX_SPI1_Init+0x74>)
 80054fc:	2280      	movs	r2, #128	@ 0x80
 80054fe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005500:	4b0c      	ldr	r3, [pc, #48]	@ (8005534 <MX_SPI1_Init+0x74>)
 8005502:	2200      	movs	r2, #0
 8005504:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005506:	4b0b      	ldr	r3, [pc, #44]	@ (8005534 <MX_SPI1_Init+0x74>)
 8005508:	2200      	movs	r2, #0
 800550a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800550c:	4b09      	ldr	r3, [pc, #36]	@ (8005534 <MX_SPI1_Init+0x74>)
 800550e:	2207      	movs	r2, #7
 8005510:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005512:	4b08      	ldr	r3, [pc, #32]	@ (8005534 <MX_SPI1_Init+0x74>)
 8005514:	2200      	movs	r2, #0
 8005516:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8005518:	4b06      	ldr	r3, [pc, #24]	@ (8005534 <MX_SPI1_Init+0x74>)
 800551a:	2200      	movs	r2, #0
 800551c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800551e:	4805      	ldr	r0, [pc, #20]	@ (8005534 <MX_SPI1_Init+0x74>)
 8005520:	f004 f844 	bl	80095ac <HAL_SPI_Init>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d001      	beq.n	800552e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800552a:	f7ff ffc3 	bl	80054b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800552e:	bf00      	nop
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	200016b0 	.word	0x200016b0
 8005538:	40013000 	.word	0x40013000

0800553c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b08a      	sub	sp, #40	@ 0x28
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005544:	f107 0314 	add.w	r3, r7, #20
 8005548:	2200      	movs	r2, #0
 800554a:	601a      	str	r2, [r3, #0]
 800554c:	605a      	str	r2, [r3, #4]
 800554e:	609a      	str	r2, [r3, #8]
 8005550:	60da      	str	r2, [r3, #12]
 8005552:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a25      	ldr	r2, [pc, #148]	@ (80055f0 <HAL_SPI_MspInit+0xb4>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d144      	bne.n	80055e8 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800555e:	4b25      	ldr	r3, [pc, #148]	@ (80055f4 <HAL_SPI_MspInit+0xb8>)
 8005560:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005562:	4a24      	ldr	r2, [pc, #144]	@ (80055f4 <HAL_SPI_MspInit+0xb8>)
 8005564:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005568:	6613      	str	r3, [r2, #96]	@ 0x60
 800556a:	4b22      	ldr	r3, [pc, #136]	@ (80055f4 <HAL_SPI_MspInit+0xb8>)
 800556c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800556e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005572:	613b      	str	r3, [r7, #16]
 8005574:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005576:	4b1f      	ldr	r3, [pc, #124]	@ (80055f4 <HAL_SPI_MspInit+0xb8>)
 8005578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800557a:	4a1e      	ldr	r2, [pc, #120]	@ (80055f4 <HAL_SPI_MspInit+0xb8>)
 800557c:	f043 0301 	orr.w	r3, r3, #1
 8005580:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005582:	4b1c      	ldr	r3, [pc, #112]	@ (80055f4 <HAL_SPI_MspInit+0xb8>)
 8005584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005586:	f003 0301 	and.w	r3, r3, #1
 800558a:	60fb      	str	r3, [r7, #12]
 800558c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800558e:	4b19      	ldr	r3, [pc, #100]	@ (80055f4 <HAL_SPI_MspInit+0xb8>)
 8005590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005592:	4a18      	ldr	r2, [pc, #96]	@ (80055f4 <HAL_SPI_MspInit+0xb8>)
 8005594:	f043 0302 	orr.w	r3, r3, #2
 8005598:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800559a:	4b16      	ldr	r3, [pc, #88]	@ (80055f4 <HAL_SPI_MspInit+0xb8>)
 800559c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800559e:	f003 0302 	and.w	r3, r3, #2
 80055a2:	60bb      	str	r3, [r7, #8]
 80055a4:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80055a6:	2320      	movs	r3, #32
 80055a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055aa:	2302      	movs	r3, #2
 80055ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055ae:	2300      	movs	r3, #0
 80055b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055b2:	2300      	movs	r3, #0
 80055b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80055b6:	2305      	movs	r3, #5
 80055b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055ba:	f107 0314 	add.w	r3, r7, #20
 80055be:	4619      	mov	r1, r3
 80055c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80055c4:	f002 fe10 	bl	80081e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80055c8:	2330      	movs	r3, #48	@ 0x30
 80055ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055cc:	2302      	movs	r3, #2
 80055ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055d0:	2300      	movs	r3, #0
 80055d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055d4:	2300      	movs	r3, #0
 80055d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80055d8:	2305      	movs	r3, #5
 80055da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055dc:	f107 0314 	add.w	r3, r7, #20
 80055e0:	4619      	mov	r1, r3
 80055e2:	4805      	ldr	r0, [pc, #20]	@ (80055f8 <HAL_SPI_MspInit+0xbc>)
 80055e4:	f002 fe00 	bl	80081e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80055e8:	bf00      	nop
 80055ea:	3728      	adds	r7, #40	@ 0x28
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	40013000 	.word	0x40013000
 80055f4:	40021000 	.word	0x40021000
 80055f8:	48000400 	.word	0x48000400

080055fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005602:	4b0f      	ldr	r3, [pc, #60]	@ (8005640 <HAL_MspInit+0x44>)
 8005604:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005606:	4a0e      	ldr	r2, [pc, #56]	@ (8005640 <HAL_MspInit+0x44>)
 8005608:	f043 0301 	orr.w	r3, r3, #1
 800560c:	6613      	str	r3, [r2, #96]	@ 0x60
 800560e:	4b0c      	ldr	r3, [pc, #48]	@ (8005640 <HAL_MspInit+0x44>)
 8005610:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005612:	f003 0301 	and.w	r3, r3, #1
 8005616:	607b      	str	r3, [r7, #4]
 8005618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800561a:	4b09      	ldr	r3, [pc, #36]	@ (8005640 <HAL_MspInit+0x44>)
 800561c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800561e:	4a08      	ldr	r2, [pc, #32]	@ (8005640 <HAL_MspInit+0x44>)
 8005620:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005624:	6593      	str	r3, [r2, #88]	@ 0x58
 8005626:	4b06      	ldr	r3, [pc, #24]	@ (8005640 <HAL_MspInit+0x44>)
 8005628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800562a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800562e:	603b      	str	r3, [r7, #0]
 8005630:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8005632:	f003 f82f 	bl	8008694 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005636:	bf00      	nop
 8005638:	3708      	adds	r7, #8
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	40021000 	.word	0x40021000

08005644 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005644:	b480      	push	{r7}
 8005646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005648:	bf00      	nop
 800564a:	e7fd      	b.n	8005648 <NMI_Handler+0x4>

0800564c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800564c:	b480      	push	{r7}
 800564e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005650:	bf00      	nop
 8005652:	e7fd      	b.n	8005650 <HardFault_Handler+0x4>

08005654 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005654:	b480      	push	{r7}
 8005656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005658:	bf00      	nop
 800565a:	e7fd      	b.n	8005658 <MemManage_Handler+0x4>

0800565c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800565c:	b480      	push	{r7}
 800565e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005660:	bf00      	nop
 8005662:	e7fd      	b.n	8005660 <BusFault_Handler+0x4>

08005664 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005664:	b480      	push	{r7}
 8005666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005668:	bf00      	nop
 800566a:	e7fd      	b.n	8005668 <UsageFault_Handler+0x4>

0800566c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800566c:	b480      	push	{r7}
 800566e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005670:	bf00      	nop
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr

0800567a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800567a:	b480      	push	{r7}
 800567c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800567e:	bf00      	nop
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005688:	b480      	push	{r7}
 800568a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800568c:	bf00      	nop
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr

08005696 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005696:	b580      	push	{r7, lr}
 8005698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800569a:	f000 fe7b 	bl	8006394 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800569e:	bf00      	nop
 80056a0:	bd80      	pop	{r7, pc}
	...

080056a4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80056a8:	4802      	ldr	r0, [pc, #8]	@ (80056b4 <DMA1_Channel1_IRQHandler+0x10>)
 80056aa:	f002 fc42 	bl	8007f32 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80056ae:	bf00      	nop
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	20001d74 	.word	0x20001d74

080056b8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_pen_1_Pin);
 80056bc:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80056c0:	f002 ff2c 	bl	800851c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80056c4:	bf00      	nop
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80056cc:	4802      	ldr	r0, [pc, #8]	@ (80056d8 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80056ce:	f005 f90d 	bl	800a8ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80056d2:	bf00      	nop
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	20001714 	.word	0x20001714

080056dc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80056e0:	4803      	ldr	r0, [pc, #12]	@ (80056f0 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80056e2:	f005 f903 	bl	800a8ec <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80056e6:	4803      	ldr	r0, [pc, #12]	@ (80056f4 <TIM1_UP_TIM16_IRQHandler+0x18>)
 80056e8:	f005 f900 	bl	800a8ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80056ec:	bf00      	nop
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	20001714 	.word	0x20001714
 80056f4:	20001b10 	.word	0x20001b10

080056f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80056fc:	4802      	ldr	r0, [pc, #8]	@ (8005708 <TIM2_IRQHandler+0x10>)
 80056fe:	f005 f8f5 	bl	800a8ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005702:	bf00      	nop
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	200017e0 	.word	0x200017e0

0800570c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005710:	4802      	ldr	r0, [pc, #8]	@ (800571c <USART2_IRQHandler+0x10>)
 8005712:	f006 ffef 	bl	800c6f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005716:	bf00      	nop
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	20001ca8 	.word	0x20001ca8

08005720 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_pen_2_Pin);
 8005724:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8005728:	f002 fef8 	bl	800851c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Emergency_Pin);
 800572c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8005730:	f002 fef4 	bl	800851c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Proximity_sensor_Pin);
 8005734:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8005738:	f002 fef0 	bl	800851c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Proximity_Left_Pin);
 800573c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8005740:	f002 feec 	bl	800851c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_Prismatic1_Pin);
 8005744:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8005748:	f002 fee8 	bl	800851c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_Prismatic2_Pin);
 800574c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8005750:	f002 fee4 	bl	800851c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005754:	bf00      	nop
 8005756:	bd80      	pop	{r7, pc}

08005758 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005758:	b480      	push	{r7}
 800575a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800575c:	4b06      	ldr	r3, [pc, #24]	@ (8005778 <SystemInit+0x20>)
 800575e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005762:	4a05      	ldr	r2, [pc, #20]	@ (8005778 <SystemInit+0x20>)
 8005764:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005768:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800576c:	bf00      	nop
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr
 8005776:	bf00      	nop
 8005778:	e000ed00 	.word	0xe000ed00

0800577c <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim20;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b088      	sub	sp, #32
 8005780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005782:	f107 0310 	add.w	r3, r7, #16
 8005786:	2200      	movs	r2, #0
 8005788:	601a      	str	r2, [r3, #0]
 800578a:	605a      	str	r2, [r3, #4]
 800578c:	609a      	str	r2, [r3, #8]
 800578e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005790:	1d3b      	adds	r3, r7, #4
 8005792:	2200      	movs	r2, #0
 8005794:	601a      	str	r2, [r3, #0]
 8005796:	605a      	str	r2, [r3, #4]
 8005798:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800579a:	4b20      	ldr	r3, [pc, #128]	@ (800581c <MX_TIM1_Init+0xa0>)
 800579c:	4a20      	ldr	r2, [pc, #128]	@ (8005820 <MX_TIM1_Init+0xa4>)
 800579e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80057a0:	4b1e      	ldr	r3, [pc, #120]	@ (800581c <MX_TIM1_Init+0xa0>)
 80057a2:	2200      	movs	r2, #0
 80057a4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80057a6:	4b1d      	ldr	r3, [pc, #116]	@ (800581c <MX_TIM1_Init+0xa0>)
 80057a8:	2200      	movs	r2, #0
 80057aa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000;
 80057ac:	4b1b      	ldr	r3, [pc, #108]	@ (800581c <MX_TIM1_Init+0xa0>)
 80057ae:	f64e 2260 	movw	r2, #60000	@ 0xea60
 80057b2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80057b4:	4b19      	ldr	r3, [pc, #100]	@ (800581c <MX_TIM1_Init+0xa0>)
 80057b6:	2200      	movs	r2, #0
 80057b8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80057ba:	4b18      	ldr	r3, [pc, #96]	@ (800581c <MX_TIM1_Init+0xa0>)
 80057bc:	2200      	movs	r2, #0
 80057be:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80057c0:	4b16      	ldr	r3, [pc, #88]	@ (800581c <MX_TIM1_Init+0xa0>)
 80057c2:	2200      	movs	r2, #0
 80057c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80057c6:	4815      	ldr	r0, [pc, #84]	@ (800581c <MX_TIM1_Init+0xa0>)
 80057c8:	f004 fb1e 	bl	8009e08 <HAL_TIM_Base_Init>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d001      	beq.n	80057d6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80057d2:	f7ff fe6f 	bl	80054b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80057d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80057da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80057dc:	f107 0310 	add.w	r3, r7, #16
 80057e0:	4619      	mov	r1, r3
 80057e2:	480e      	ldr	r0, [pc, #56]	@ (800581c <MX_TIM1_Init+0xa0>)
 80057e4:	f005 fb8a 	bl	800aefc <HAL_TIM_ConfigClockSource>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d001      	beq.n	80057f2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80057ee:	f7ff fe61 	bl	80054b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80057f2:	2300      	movs	r3, #0
 80057f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80057f6:	2300      	movs	r3, #0
 80057f8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80057fa:	2300      	movs	r3, #0
 80057fc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80057fe:	1d3b      	adds	r3, r7, #4
 8005800:	4619      	mov	r1, r3
 8005802:	4806      	ldr	r0, [pc, #24]	@ (800581c <MX_TIM1_Init+0xa0>)
 8005804:	f006 fb60 	bl	800bec8 <HAL_TIMEx_MasterConfigSynchronization>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d001      	beq.n	8005812 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800580e:	f7ff fe51 	bl	80054b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8005812:	bf00      	nop
 8005814:	3720      	adds	r7, #32
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	20001714 	.word	0x20001714
 8005820:	40012c00 	.word	0x40012c00

08005824 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b088      	sub	sp, #32
 8005828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800582a:	f107 0310 	add.w	r3, r7, #16
 800582e:	2200      	movs	r2, #0
 8005830:	601a      	str	r2, [r3, #0]
 8005832:	605a      	str	r2, [r3, #4]
 8005834:	609a      	str	r2, [r3, #8]
 8005836:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005838:	1d3b      	adds	r3, r7, #4
 800583a:	2200      	movs	r2, #0
 800583c:	601a      	str	r2, [r3, #0]
 800583e:	605a      	str	r2, [r3, #4]
 8005840:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005842:	4b1e      	ldr	r3, [pc, #120]	@ (80058bc <MX_TIM2_Init+0x98>)
 8005844:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005848:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 800584a:	4b1c      	ldr	r3, [pc, #112]	@ (80058bc <MX_TIM2_Init+0x98>)
 800584c:	22a9      	movs	r2, #169	@ 0xa9
 800584e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005850:	4b1a      	ldr	r3, [pc, #104]	@ (80058bc <MX_TIM2_Init+0x98>)
 8005852:	2200      	movs	r2, #0
 8005854:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8005856:	4b19      	ldr	r3, [pc, #100]	@ (80058bc <MX_TIM2_Init+0x98>)
 8005858:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800585c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800585e:	4b17      	ldr	r3, [pc, #92]	@ (80058bc <MX_TIM2_Init+0x98>)
 8005860:	2200      	movs	r2, #0
 8005862:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005864:	4b15      	ldr	r3, [pc, #84]	@ (80058bc <MX_TIM2_Init+0x98>)
 8005866:	2200      	movs	r2, #0
 8005868:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800586a:	4814      	ldr	r0, [pc, #80]	@ (80058bc <MX_TIM2_Init+0x98>)
 800586c:	f004 facc 	bl	8009e08 <HAL_TIM_Base_Init>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d001      	beq.n	800587a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8005876:	f7ff fe1d 	bl	80054b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800587a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800587e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005880:	f107 0310 	add.w	r3, r7, #16
 8005884:	4619      	mov	r1, r3
 8005886:	480d      	ldr	r0, [pc, #52]	@ (80058bc <MX_TIM2_Init+0x98>)
 8005888:	f005 fb38 	bl	800aefc <HAL_TIM_ConfigClockSource>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d001      	beq.n	8005896 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8005892:	f7ff fe0f 	bl	80054b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005896:	2300      	movs	r3, #0
 8005898:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800589a:	2300      	movs	r3, #0
 800589c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800589e:	1d3b      	adds	r3, r7, #4
 80058a0:	4619      	mov	r1, r3
 80058a2:	4806      	ldr	r0, [pc, #24]	@ (80058bc <MX_TIM2_Init+0x98>)
 80058a4:	f006 fb10 	bl	800bec8 <HAL_TIMEx_MasterConfigSynchronization>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d001      	beq.n	80058b2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80058ae:	f7ff fe01 	bl	80054b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80058b2:	bf00      	nop
 80058b4:	3720      	adds	r7, #32
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	200017e0 	.word	0x200017e0

080058c0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b08c      	sub	sp, #48	@ 0x30
 80058c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80058c6:	f107 030c 	add.w	r3, r7, #12
 80058ca:	2224      	movs	r2, #36	@ 0x24
 80058cc:	2100      	movs	r1, #0
 80058ce:	4618      	mov	r0, r3
 80058d0:	f009 fdc0 	bl	800f454 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80058d4:	463b      	mov	r3, r7
 80058d6:	2200      	movs	r2, #0
 80058d8:	601a      	str	r2, [r3, #0]
 80058da:	605a      	str	r2, [r3, #4]
 80058dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80058de:	4b21      	ldr	r3, [pc, #132]	@ (8005964 <MX_TIM3_Init+0xa4>)
 80058e0:	4a21      	ldr	r2, [pc, #132]	@ (8005968 <MX_TIM3_Init+0xa8>)
 80058e2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80058e4:	4b1f      	ldr	r3, [pc, #124]	@ (8005964 <MX_TIM3_Init+0xa4>)
 80058e6:	2200      	movs	r2, #0
 80058e8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80058ea:	4b1e      	ldr	r3, [pc, #120]	@ (8005964 <MX_TIM3_Init+0xa4>)
 80058ec:	2200      	movs	r2, #0
 80058ee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 80058f0:	4b1c      	ldr	r3, [pc, #112]	@ (8005964 <MX_TIM3_Init+0xa4>)
 80058f2:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80058f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80058f8:	4b1a      	ldr	r3, [pc, #104]	@ (8005964 <MX_TIM3_Init+0xa4>)
 80058fa:	2200      	movs	r2, #0
 80058fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80058fe:	4b19      	ldr	r3, [pc, #100]	@ (8005964 <MX_TIM3_Init+0xa4>)
 8005900:	2200      	movs	r2, #0
 8005902:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005904:	2303      	movs	r3, #3
 8005906:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005908:	2300      	movs	r3, #0
 800590a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800590c:	2301      	movs	r3, #1
 800590e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005910:	2300      	movs	r3, #0
 8005912:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005914:	2300      	movs	r3, #0
 8005916:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005918:	2300      	movs	r3, #0
 800591a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800591c:	2301      	movs	r3, #1
 800591e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005920:	2300      	movs	r3, #0
 8005922:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8005924:	2300      	movs	r3, #0
 8005926:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8005928:	f107 030c 	add.w	r3, r7, #12
 800592c:	4619      	mov	r1, r3
 800592e:	480d      	ldr	r0, [pc, #52]	@ (8005964 <MX_TIM3_Init+0xa4>)
 8005930:	f004 fe9a 	bl	800a668 <HAL_TIM_Encoder_Init>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d001      	beq.n	800593e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800593a:	f7ff fdbb 	bl	80054b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800593e:	2300      	movs	r3, #0
 8005940:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005942:	2300      	movs	r3, #0
 8005944:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005946:	463b      	mov	r3, r7
 8005948:	4619      	mov	r1, r3
 800594a:	4806      	ldr	r0, [pc, #24]	@ (8005964 <MX_TIM3_Init+0xa4>)
 800594c:	f006 fabc 	bl	800bec8 <HAL_TIMEx_MasterConfigSynchronization>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d001      	beq.n	800595a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8005956:	f7ff fdad 	bl	80054b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800595a:	bf00      	nop
 800595c:	3730      	adds	r7, #48	@ 0x30
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	200018ac 	.word	0x200018ac
 8005968:	40000400 	.word	0x40000400

0800596c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b08c      	sub	sp, #48	@ 0x30
 8005970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005972:	f107 030c 	add.w	r3, r7, #12
 8005976:	2224      	movs	r2, #36	@ 0x24
 8005978:	2100      	movs	r1, #0
 800597a:	4618      	mov	r0, r3
 800597c:	f009 fd6a 	bl	800f454 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005980:	463b      	mov	r3, r7
 8005982:	2200      	movs	r2, #0
 8005984:	601a      	str	r2, [r3, #0]
 8005986:	605a      	str	r2, [r3, #4]
 8005988:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800598a:	4b21      	ldr	r3, [pc, #132]	@ (8005a10 <MX_TIM4_Init+0xa4>)
 800598c:	4a21      	ldr	r2, [pc, #132]	@ (8005a14 <MX_TIM4_Init+0xa8>)
 800598e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8005990:	4b1f      	ldr	r3, [pc, #124]	@ (8005a10 <MX_TIM4_Init+0xa4>)
 8005992:	2200      	movs	r2, #0
 8005994:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005996:	4b1e      	ldr	r3, [pc, #120]	@ (8005a10 <MX_TIM4_Init+0xa4>)
 8005998:	2200      	movs	r2, #0
 800599a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 59999;
 800599c:	4b1c      	ldr	r3, [pc, #112]	@ (8005a10 <MX_TIM4_Init+0xa4>)
 800599e:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80059a2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80059a4:	4b1a      	ldr	r3, [pc, #104]	@ (8005a10 <MX_TIM4_Init+0xa4>)
 80059a6:	2200      	movs	r2, #0
 80059a8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80059aa:	4b19      	ldr	r3, [pc, #100]	@ (8005a10 <MX_TIM4_Init+0xa4>)
 80059ac:	2200      	movs	r2, #0
 80059ae:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80059b0:	2303      	movs	r3, #3
 80059b2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80059b4:	2300      	movs	r3, #0
 80059b6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80059b8:	2301      	movs	r3, #1
 80059ba:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80059bc:	2300      	movs	r3, #0
 80059be:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80059c0:	2300      	movs	r3, #0
 80059c2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80059c4:	2300      	movs	r3, #0
 80059c6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80059c8:	2301      	movs	r3, #1
 80059ca:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80059cc:	2300      	movs	r3, #0
 80059ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80059d0:	2300      	movs	r3, #0
 80059d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80059d4:	f107 030c 	add.w	r3, r7, #12
 80059d8:	4619      	mov	r1, r3
 80059da:	480d      	ldr	r0, [pc, #52]	@ (8005a10 <MX_TIM4_Init+0xa4>)
 80059dc:	f004 fe44 	bl	800a668 <HAL_TIM_Encoder_Init>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d001      	beq.n	80059ea <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80059e6:	f7ff fd65 	bl	80054b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80059ea:	2300      	movs	r3, #0
 80059ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80059ee:	2300      	movs	r3, #0
 80059f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80059f2:	463b      	mov	r3, r7
 80059f4:	4619      	mov	r1, r3
 80059f6:	4806      	ldr	r0, [pc, #24]	@ (8005a10 <MX_TIM4_Init+0xa4>)
 80059f8:	f006 fa66 	bl	800bec8 <HAL_TIMEx_MasterConfigSynchronization>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d001      	beq.n	8005a06 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8005a02:	f7ff fd57 	bl	80054b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8005a06:	bf00      	nop
 8005a08:	3730      	adds	r7, #48	@ 0x30
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	20001978 	.word	0x20001978
 8005a14:	40000800 	.word	0x40000800

08005a18 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b09c      	sub	sp, #112	@ 0x70
 8005a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005a1e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8005a22:	2200      	movs	r2, #0
 8005a24:	601a      	str	r2, [r3, #0]
 8005a26:	605a      	str	r2, [r3, #4]
 8005a28:	609a      	str	r2, [r3, #8]
 8005a2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a2c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005a30:	2200      	movs	r2, #0
 8005a32:	601a      	str	r2, [r3, #0]
 8005a34:	605a      	str	r2, [r3, #4]
 8005a36:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005a38:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	601a      	str	r2, [r3, #0]
 8005a40:	605a      	str	r2, [r3, #4]
 8005a42:	609a      	str	r2, [r3, #8]
 8005a44:	60da      	str	r2, [r3, #12]
 8005a46:	611a      	str	r2, [r3, #16]
 8005a48:	615a      	str	r2, [r3, #20]
 8005a4a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005a4c:	1d3b      	adds	r3, r7, #4
 8005a4e:	2234      	movs	r2, #52	@ 0x34
 8005a50:	2100      	movs	r1, #0
 8005a52:	4618      	mov	r0, r3
 8005a54:	f009 fcfe 	bl	800f454 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8005a58:	4b45      	ldr	r3, [pc, #276]	@ (8005b70 <MX_TIM8_Init+0x158>)
 8005a5a:	4a46      	ldr	r2, [pc, #280]	@ (8005b74 <MX_TIM8_Init+0x15c>)
 8005a5c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 169;
 8005a5e:	4b44      	ldr	r3, [pc, #272]	@ (8005b70 <MX_TIM8_Init+0x158>)
 8005a60:	22a9      	movs	r2, #169	@ 0xa9
 8005a62:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a64:	4b42      	ldr	r3, [pc, #264]	@ (8005b70 <MX_TIM8_Init+0x158>)
 8005a66:	2200      	movs	r2, #0
 8005a68:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19999;
 8005a6a:	4b41      	ldr	r3, [pc, #260]	@ (8005b70 <MX_TIM8_Init+0x158>)
 8005a6c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8005a70:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a72:	4b3f      	ldr	r3, [pc, #252]	@ (8005b70 <MX_TIM8_Init+0x158>)
 8005a74:	2200      	movs	r2, #0
 8005a76:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8005a78:	4b3d      	ldr	r3, [pc, #244]	@ (8005b70 <MX_TIM8_Init+0x158>)
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a7e:	4b3c      	ldr	r3, [pc, #240]	@ (8005b70 <MX_TIM8_Init+0x158>)
 8005a80:	2200      	movs	r2, #0
 8005a82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8005a84:	483a      	ldr	r0, [pc, #232]	@ (8005b70 <MX_TIM8_Init+0x158>)
 8005a86:	f004 f9bf 	bl	8009e08 <HAL_TIM_Base_Init>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d001      	beq.n	8005a94 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8005a90:	f7ff fd10 	bl	80054b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005a94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005a98:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8005a9a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	4833      	ldr	r0, [pc, #204]	@ (8005b70 <MX_TIM8_Init+0x158>)
 8005aa2:	f005 fa2b 	bl	800aefc <HAL_TIM_ConfigClockSource>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d001      	beq.n	8005ab0 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8005aac:	f7ff fd02 	bl	80054b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8005ab0:	482f      	ldr	r0, [pc, #188]	@ (8005b70 <MX_TIM8_Init+0x158>)
 8005ab2:	f004 fb63 	bl	800a17c <HAL_TIM_PWM_Init>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d001      	beq.n	8005ac0 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8005abc:	f7ff fcfa 	bl	80054b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8005acc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	4827      	ldr	r0, [pc, #156]	@ (8005b70 <MX_TIM8_Init+0x158>)
 8005ad4:	f006 f9f8 	bl	800bec8 <HAL_TIMEx_MasterConfigSynchronization>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d001      	beq.n	8005ae2 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8005ade:	f7ff fce9 	bl	80054b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005ae2:	2360      	movs	r3, #96	@ 0x60
 8005ae4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005aea:	2300      	movs	r3, #0
 8005aec:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005aee:	2300      	movs	r3, #0
 8005af0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005af2:	2300      	movs	r3, #0
 8005af4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005af6:	2300      	movs	r3, #0
 8005af8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005afa:	2300      	movs	r3, #0
 8005afc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005afe:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005b02:	220c      	movs	r2, #12
 8005b04:	4619      	mov	r1, r3
 8005b06:	481a      	ldr	r0, [pc, #104]	@ (8005b70 <MX_TIM8_Init+0x158>)
 8005b08:	f005 f8e4 	bl	800acd4 <HAL_TIM_PWM_ConfigChannel>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d001      	beq.n	8005b16 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8005b12:	f7ff fccf 	bl	80054b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005b16:	2300      	movs	r3, #0
 8005b18:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005b22:	2300      	movs	r3, #0
 8005b24:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005b26:	2300      	movs	r3, #0
 8005b28:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005b2a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005b2e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005b30:	2300      	movs	r3, #0
 8005b32:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8005b34:	2300      	movs	r3, #0
 8005b36:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8005b3c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005b40:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8005b42:	2300      	movs	r3, #0
 8005b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8005b46:	2300      	movs	r3, #0
 8005b48:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8005b4e:	1d3b      	adds	r3, r7, #4
 8005b50:	4619      	mov	r1, r3
 8005b52:	4807      	ldr	r0, [pc, #28]	@ (8005b70 <MX_TIM8_Init+0x158>)
 8005b54:	f006 fa4e 	bl	800bff4 <HAL_TIMEx_ConfigBreakDeadTime>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d001      	beq.n	8005b62 <MX_TIM8_Init+0x14a>
  {
    Error_Handler();
 8005b5e:	f7ff fca9 	bl	80054b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8005b62:	4803      	ldr	r0, [pc, #12]	@ (8005b70 <MX_TIM8_Init+0x158>)
 8005b64:	f000 fa44 	bl	8005ff0 <HAL_TIM_MspPostInit>

}
 8005b68:	bf00      	nop
 8005b6a:	3770      	adds	r7, #112	@ 0x70
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	20001a44 	.word	0x20001a44
 8005b74:	40013400 	.word	0x40013400

08005b78 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b094      	sub	sp, #80	@ 0x50
 8005b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8005b7e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005b82:	2200      	movs	r2, #0
 8005b84:	601a      	str	r2, [r3, #0]
 8005b86:	605a      	str	r2, [r3, #4]
 8005b88:	609a      	str	r2, [r3, #8]
 8005b8a:	60da      	str	r2, [r3, #12]
 8005b8c:	611a      	str	r2, [r3, #16]
 8005b8e:	615a      	str	r2, [r3, #20]
 8005b90:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005b92:	463b      	mov	r3, r7
 8005b94:	2234      	movs	r2, #52	@ 0x34
 8005b96:	2100      	movs	r1, #0
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f009 fc5b 	bl	800f454 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8005b9e:	4b34      	ldr	r3, [pc, #208]	@ (8005c70 <MX_TIM16_Init+0xf8>)
 8005ba0:	4a34      	ldr	r2, [pc, #208]	@ (8005c74 <MX_TIM16_Init+0xfc>)
 8005ba2:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8005ba4:	4b32      	ldr	r3, [pc, #200]	@ (8005c70 <MX_TIM16_Init+0xf8>)
 8005ba6:	22a9      	movs	r2, #169	@ 0xa9
 8005ba8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005baa:	4b31      	ldr	r3, [pc, #196]	@ (8005c70 <MX_TIM16_Init+0xf8>)
 8005bac:	2200      	movs	r2, #0
 8005bae:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2005;
 8005bb0:	4b2f      	ldr	r3, [pc, #188]	@ (8005c70 <MX_TIM16_Init+0xf8>)
 8005bb2:	f240 72d5 	movw	r2, #2005	@ 0x7d5
 8005bb6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005bb8:	4b2d      	ldr	r3, [pc, #180]	@ (8005c70 <MX_TIM16_Init+0xf8>)
 8005bba:	2200      	movs	r2, #0
 8005bbc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8005bbe:	4b2c      	ldr	r3, [pc, #176]	@ (8005c70 <MX_TIM16_Init+0xf8>)
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005bc4:	4b2a      	ldr	r3, [pc, #168]	@ (8005c70 <MX_TIM16_Init+0xf8>)
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8005bca:	4829      	ldr	r0, [pc, #164]	@ (8005c70 <MX_TIM16_Init+0xf8>)
 8005bcc:	f004 f91c 	bl	8009e08 <HAL_TIM_Base_Init>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d001      	beq.n	8005bda <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8005bd6:	f7ff fc6d 	bl	80054b4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8005bda:	4825      	ldr	r0, [pc, #148]	@ (8005c70 <MX_TIM16_Init+0xf8>)
 8005bdc:	f004 fa60 	bl	800a0a0 <HAL_TIM_OC_Init>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d001      	beq.n	8005bea <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8005be6:	f7ff fc65 	bl	80054b4 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8005bea:	2108      	movs	r1, #8
 8005bec:	4820      	ldr	r0, [pc, #128]	@ (8005c70 <MX_TIM16_Init+0xf8>)
 8005bee:	f004 fc45 	bl	800a47c <HAL_TIM_OnePulse_Init>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d001      	beq.n	8005bfc <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 8005bf8:	f7ff fc5c 	bl	80054b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8005bfc:	2310      	movs	r3, #16
 8005bfe:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 1433;
 8005c00:	f240 5399 	movw	r3, #1433	@ 0x599
 8005c04:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005c06:	2300      	movs	r3, #0
 8005c08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005c12:	2300      	movs	r3, #0
 8005c14:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005c16:	2300      	movs	r3, #0
 8005c18:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005c1a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005c1e:	2200      	movs	r2, #0
 8005c20:	4619      	mov	r1, r3
 8005c22:	4813      	ldr	r0, [pc, #76]	@ (8005c70 <MX_TIM16_Init+0xf8>)
 8005c24:	f004 ffdc 	bl	800abe0 <HAL_TIM_OC_ConfigChannel>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d001      	beq.n	8005c32 <MX_TIM16_Init+0xba>
  {
    Error_Handler();
 8005c2e:	f7ff fc41 	bl	80054b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005c32:	2300      	movs	r3, #0
 8005c34:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005c36:	2300      	movs	r3, #0
 8005c38:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005c42:	2300      	movs	r3, #0
 8005c44:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005c46:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005c4a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005c50:	2300      	movs	r3, #0
 8005c52:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8005c54:	463b      	mov	r3, r7
 8005c56:	4619      	mov	r1, r3
 8005c58:	4805      	ldr	r0, [pc, #20]	@ (8005c70 <MX_TIM16_Init+0xf8>)
 8005c5a:	f006 f9cb 	bl	800bff4 <HAL_TIMEx_ConfigBreakDeadTime>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d001      	beq.n	8005c68 <MX_TIM16_Init+0xf0>
  {
    Error_Handler();
 8005c64:	f7ff fc26 	bl	80054b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8005c68:	bf00      	nop
 8005c6a:	3750      	adds	r7, #80	@ 0x50
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	20001b10 	.word	0x20001b10
 8005c74:	40014400 	.word	0x40014400

08005c78 <MX_TIM20_Init>:
/* TIM20 init function */
void MX_TIM20_Init(void)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b09c      	sub	sp, #112	@ 0x70
 8005c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005c7e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8005c82:	2200      	movs	r2, #0
 8005c84:	601a      	str	r2, [r3, #0]
 8005c86:	605a      	str	r2, [r3, #4]
 8005c88:	609a      	str	r2, [r3, #8]
 8005c8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005c8c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005c90:	2200      	movs	r2, #0
 8005c92:	601a      	str	r2, [r3, #0]
 8005c94:	605a      	str	r2, [r3, #4]
 8005c96:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005c98:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	601a      	str	r2, [r3, #0]
 8005ca0:	605a      	str	r2, [r3, #4]
 8005ca2:	609a      	str	r2, [r3, #8]
 8005ca4:	60da      	str	r2, [r3, #12]
 8005ca6:	611a      	str	r2, [r3, #16]
 8005ca8:	615a      	str	r2, [r3, #20]
 8005caa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005cac:	1d3b      	adds	r3, r7, #4
 8005cae:	2234      	movs	r2, #52	@ 0x34
 8005cb0:	2100      	movs	r1, #0
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f009 fbce 	bl	800f454 <memset>

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8005cb8:	4b4b      	ldr	r3, [pc, #300]	@ (8005de8 <MX_TIM20_Init+0x170>)
 8005cba:	4a4c      	ldr	r2, [pc, #304]	@ (8005dec <MX_TIM20_Init+0x174>)
 8005cbc:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 8005cbe:	4b4a      	ldr	r3, [pc, #296]	@ (8005de8 <MX_TIM20_Init+0x170>)
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005cc4:	4b48      	ldr	r3, [pc, #288]	@ (8005de8 <MX_TIM20_Init+0x170>)
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 8005cca:	4b47      	ldr	r3, [pc, #284]	@ (8005de8 <MX_TIM20_Init+0x170>)
 8005ccc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005cd0:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005cd2:	4b45      	ldr	r3, [pc, #276]	@ (8005de8 <MX_TIM20_Init+0x170>)
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 8005cd8:	4b43      	ldr	r3, [pc, #268]	@ (8005de8 <MX_TIM20_Init+0x170>)
 8005cda:	2200      	movs	r2, #0
 8005cdc:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005cde:	4b42      	ldr	r3, [pc, #264]	@ (8005de8 <MX_TIM20_Init+0x170>)
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 8005ce4:	4840      	ldr	r0, [pc, #256]	@ (8005de8 <MX_TIM20_Init+0x170>)
 8005ce6:	f004 f88f 	bl	8009e08 <HAL_TIM_Base_Init>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d001      	beq.n	8005cf4 <MX_TIM20_Init+0x7c>
  {
    Error_Handler();
 8005cf0:	f7ff fbe0 	bl	80054b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005cf4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005cf8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 8005cfa:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8005cfe:	4619      	mov	r1, r3
 8005d00:	4839      	ldr	r0, [pc, #228]	@ (8005de8 <MX_TIM20_Init+0x170>)
 8005d02:	f005 f8fb 	bl	800aefc <HAL_TIM_ConfigClockSource>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d001      	beq.n	8005d10 <MX_TIM20_Init+0x98>
  {
    Error_Handler();
 8005d0c:	f7ff fbd2 	bl	80054b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 8005d10:	4835      	ldr	r0, [pc, #212]	@ (8005de8 <MX_TIM20_Init+0x170>)
 8005d12:	f004 fa33 	bl	800a17c <HAL_TIM_PWM_Init>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d001      	beq.n	8005d20 <MX_TIM20_Init+0xa8>
  {
    Error_Handler();
 8005d1c:	f7ff fbca 	bl	80054b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005d20:	2300      	movs	r3, #0
 8005d22:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005d24:	2300      	movs	r3, #0
 8005d26:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8005d2c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005d30:	4619      	mov	r1, r3
 8005d32:	482d      	ldr	r0, [pc, #180]	@ (8005de8 <MX_TIM20_Init+0x170>)
 8005d34:	f006 f8c8 	bl	800bec8 <HAL_TIMEx_MasterConfigSynchronization>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d001      	beq.n	8005d42 <MX_TIM20_Init+0xca>
  {
    Error_Handler();
 8005d3e:	f7ff fbb9 	bl	80054b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005d42:	2360      	movs	r3, #96	@ 0x60
 8005d44:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8005d46:	2300      	movs	r3, #0
 8005d48:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005d52:	2300      	movs	r3, #0
 8005d54:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005d56:	2300      	movs	r3, #0
 8005d58:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005d5e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005d62:	2200      	movs	r2, #0
 8005d64:	4619      	mov	r1, r3
 8005d66:	4820      	ldr	r0, [pc, #128]	@ (8005de8 <MX_TIM20_Init+0x170>)
 8005d68:	f004 ffb4 	bl	800acd4 <HAL_TIM_PWM_ConfigChannel>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d001      	beq.n	8005d76 <MX_TIM20_Init+0xfe>
  {
    Error_Handler();
 8005d72:	f7ff fb9f 	bl	80054b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005d76:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005d7a:	2208      	movs	r2, #8
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	481a      	ldr	r0, [pc, #104]	@ (8005de8 <MX_TIM20_Init+0x170>)
 8005d80:	f004 ffa8 	bl	800acd4 <HAL_TIM_PWM_ConfigChannel>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d001      	beq.n	8005d8e <MX_TIM20_Init+0x116>
  {
    Error_Handler();
 8005d8a:	f7ff fb93 	bl	80054b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005d92:	2300      	movs	r3, #0
 8005d94:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005d96:	2300      	movs	r3, #0
 8005d98:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005da2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005da6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005da8:	2300      	movs	r3, #0
 8005daa:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8005dac:	2300      	movs	r3, #0
 8005dae:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8005db0:	2300      	movs	r3, #0
 8005db2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8005db4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005db8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 8005dc6:	1d3b      	adds	r3, r7, #4
 8005dc8:	4619      	mov	r1, r3
 8005dca:	4807      	ldr	r0, [pc, #28]	@ (8005de8 <MX_TIM20_Init+0x170>)
 8005dcc:	f006 f912 	bl	800bff4 <HAL_TIMEx_ConfigBreakDeadTime>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d001      	beq.n	8005dda <MX_TIM20_Init+0x162>
  {
    Error_Handler();
 8005dd6:	f7ff fb6d 	bl	80054b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */
  HAL_TIM_MspPostInit(&htim20);
 8005dda:	4803      	ldr	r0, [pc, #12]	@ (8005de8 <MX_TIM20_Init+0x170>)
 8005ddc:	f000 f908 	bl	8005ff0 <HAL_TIM_MspPostInit>

}
 8005de0:	bf00      	nop
 8005de2:	3770      	adds	r7, #112	@ 0x70
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	20001bdc 	.word	0x20001bdc
 8005dec:	40015000 	.word	0x40015000

08005df0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b088      	sub	sp, #32
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a3d      	ldr	r2, [pc, #244]	@ (8005ef4 <HAL_TIM_Base_MspInit+0x104>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d11c      	bne.n	8005e3c <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005e02:	4b3d      	ldr	r3, [pc, #244]	@ (8005ef8 <HAL_TIM_Base_MspInit+0x108>)
 8005e04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e06:	4a3c      	ldr	r2, [pc, #240]	@ (8005ef8 <HAL_TIM_Base_MspInit+0x108>)
 8005e08:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005e0c:	6613      	str	r3, [r2, #96]	@ 0x60
 8005e0e:	4b3a      	ldr	r3, [pc, #232]	@ (8005ef8 <HAL_TIM_Base_MspInit+0x108>)
 8005e10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e16:	61fb      	str	r3, [r7, #28]
 8005e18:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	2100      	movs	r1, #0
 8005e1e:	2018      	movs	r0, #24
 8005e20:	f001 fe6f 	bl	8007b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8005e24:	2018      	movs	r0, #24
 8005e26:	f001 fe86 	bl	8007b36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	2100      	movs	r1, #0
 8005e2e:	2019      	movs	r0, #25
 8005e30:	f001 fe67 	bl	8007b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005e34:	2019      	movs	r0, #25
 8005e36:	f001 fe7e 	bl	8007b36 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM20_CLK_ENABLE();
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }
}
 8005e3a:	e056      	b.n	8005eea <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM2)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e44:	d114      	bne.n	8005e70 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005e46:	4b2c      	ldr	r3, [pc, #176]	@ (8005ef8 <HAL_TIM_Base_MspInit+0x108>)
 8005e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e4a:	4a2b      	ldr	r2, [pc, #172]	@ (8005ef8 <HAL_TIM_Base_MspInit+0x108>)
 8005e4c:	f043 0301 	orr.w	r3, r3, #1
 8005e50:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e52:	4b29      	ldr	r3, [pc, #164]	@ (8005ef8 <HAL_TIM_Base_MspInit+0x108>)
 8005e54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e56:	f003 0301 	and.w	r3, r3, #1
 8005e5a:	61bb      	str	r3, [r7, #24]
 8005e5c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005e5e:	2200      	movs	r2, #0
 8005e60:	2100      	movs	r1, #0
 8005e62:	201c      	movs	r0, #28
 8005e64:	f001 fe4d 	bl	8007b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005e68:	201c      	movs	r0, #28
 8005e6a:	f001 fe64 	bl	8007b36 <HAL_NVIC_EnableIRQ>
}
 8005e6e:	e03c      	b.n	8005eea <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM8)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a21      	ldr	r2, [pc, #132]	@ (8005efc <HAL_TIM_Base_MspInit+0x10c>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d10c      	bne.n	8005e94 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005e7a:	4b1f      	ldr	r3, [pc, #124]	@ (8005ef8 <HAL_TIM_Base_MspInit+0x108>)
 8005e7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e7e:	4a1e      	ldr	r2, [pc, #120]	@ (8005ef8 <HAL_TIM_Base_MspInit+0x108>)
 8005e80:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005e84:	6613      	str	r3, [r2, #96]	@ 0x60
 8005e86:	4b1c      	ldr	r3, [pc, #112]	@ (8005ef8 <HAL_TIM_Base_MspInit+0x108>)
 8005e88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e8e:	617b      	str	r3, [r7, #20]
 8005e90:	697b      	ldr	r3, [r7, #20]
}
 8005e92:	e02a      	b.n	8005eea <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM16)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a19      	ldr	r2, [pc, #100]	@ (8005f00 <HAL_TIM_Base_MspInit+0x110>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d114      	bne.n	8005ec8 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005e9e:	4b16      	ldr	r3, [pc, #88]	@ (8005ef8 <HAL_TIM_Base_MspInit+0x108>)
 8005ea0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ea2:	4a15      	ldr	r2, [pc, #84]	@ (8005ef8 <HAL_TIM_Base_MspInit+0x108>)
 8005ea4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ea8:	6613      	str	r3, [r2, #96]	@ 0x60
 8005eaa:	4b13      	ldr	r3, [pc, #76]	@ (8005ef8 <HAL_TIM_Base_MspInit+0x108>)
 8005eac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005eb2:	613b      	str	r3, [r7, #16]
 8005eb4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	2100      	movs	r1, #0
 8005eba:	2019      	movs	r0, #25
 8005ebc:	f001 fe21 	bl	8007b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005ec0:	2019      	movs	r0, #25
 8005ec2:	f001 fe38 	bl	8007b36 <HAL_NVIC_EnableIRQ>
}
 8005ec6:	e010      	b.n	8005eea <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM20)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a0d      	ldr	r2, [pc, #52]	@ (8005f04 <HAL_TIM_Base_MspInit+0x114>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d10b      	bne.n	8005eea <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8005ed2:	4b09      	ldr	r3, [pc, #36]	@ (8005ef8 <HAL_TIM_Base_MspInit+0x108>)
 8005ed4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ed6:	4a08      	ldr	r2, [pc, #32]	@ (8005ef8 <HAL_TIM_Base_MspInit+0x108>)
 8005ed8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005edc:	6613      	str	r3, [r2, #96]	@ 0x60
 8005ede:	4b06      	ldr	r3, [pc, #24]	@ (8005ef8 <HAL_TIM_Base_MspInit+0x108>)
 8005ee0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ee2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ee6:	60fb      	str	r3, [r7, #12]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
}
 8005eea:	bf00      	nop
 8005eec:	3720      	adds	r7, #32
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	40012c00 	.word	0x40012c00
 8005ef8:	40021000 	.word	0x40021000
 8005efc:	40013400 	.word	0x40013400
 8005f00:	40014400 	.word	0x40014400
 8005f04:	40015000 	.word	0x40015000

08005f08 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b08c      	sub	sp, #48	@ 0x30
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f10:	f107 031c 	add.w	r3, r7, #28
 8005f14:	2200      	movs	r2, #0
 8005f16:	601a      	str	r2, [r3, #0]
 8005f18:	605a      	str	r2, [r3, #4]
 8005f1a:	609a      	str	r2, [r3, #8]
 8005f1c:	60da      	str	r2, [r3, #12]
 8005f1e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a2f      	ldr	r2, [pc, #188]	@ (8005fe4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d129      	bne.n	8005f7e <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005f2a:	4b2f      	ldr	r3, [pc, #188]	@ (8005fe8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8005f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f2e:	4a2e      	ldr	r2, [pc, #184]	@ (8005fe8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8005f30:	f043 0302 	orr.w	r3, r3, #2
 8005f34:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f36:	4b2c      	ldr	r3, [pc, #176]	@ (8005fe8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8005f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f3a:	f003 0302 	and.w	r3, r3, #2
 8005f3e:	61bb      	str	r3, [r7, #24]
 8005f40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f42:	4b29      	ldr	r3, [pc, #164]	@ (8005fe8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8005f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f46:	4a28      	ldr	r2, [pc, #160]	@ (8005fe8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8005f48:	f043 0301 	orr.w	r3, r3, #1
 8005f4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005f4e:	4b26      	ldr	r3, [pc, #152]	@ (8005fe8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8005f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f52:	f003 0301 	and.w	r3, r3, #1
 8005f56:	617b      	str	r3, [r7, #20]
 8005f58:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Encoder_1_Pin|Encoder_1A7_Pin;
 8005f5a:	23c0      	movs	r3, #192	@ 0xc0
 8005f5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f5e:	2302      	movs	r3, #2
 8005f60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f62:	2300      	movs	r3, #0
 8005f64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f66:	2300      	movs	r3, #0
 8005f68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005f6a:	2302      	movs	r3, #2
 8005f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f6e:	f107 031c 	add.w	r3, r7, #28
 8005f72:	4619      	mov	r1, r3
 8005f74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005f78:	f002 f936 	bl	80081e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8005f7c:	e02e      	b.n	8005fdc <HAL_TIM_Encoder_MspInit+0xd4>
  else if(tim_encoderHandle->Instance==TIM4)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a1a      	ldr	r2, [pc, #104]	@ (8005fec <HAL_TIM_Encoder_MspInit+0xe4>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d129      	bne.n	8005fdc <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005f88:	4b17      	ldr	r3, [pc, #92]	@ (8005fe8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8005f8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f8c:	4a16      	ldr	r2, [pc, #88]	@ (8005fe8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8005f8e:	f043 0304 	orr.w	r3, r3, #4
 8005f92:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f94:	4b14      	ldr	r3, [pc, #80]	@ (8005fe8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8005f96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f98:	f003 0304 	and.w	r3, r3, #4
 8005f9c:	613b      	str	r3, [r7, #16]
 8005f9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005fa0:	4b11      	ldr	r3, [pc, #68]	@ (8005fe8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8005fa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fa4:	4a10      	ldr	r2, [pc, #64]	@ (8005fe8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8005fa6:	f043 0301 	orr.w	r3, r3, #1
 8005faa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005fac:	4b0e      	ldr	r3, [pc, #56]	@ (8005fe8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8005fae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fb0:	f003 0301 	and.w	r3, r3, #1
 8005fb4:	60fb      	str	r3, [r7, #12]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder_2_Pin|Encoder_2A12_Pin;
 8005fb8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8005fbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fbe:	2302      	movs	r3, #2
 8005fc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8005fca:	230a      	movs	r3, #10
 8005fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fce:	f107 031c 	add.w	r3, r7, #28
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005fd8:	f002 f906 	bl	80081e8 <HAL_GPIO_Init>
}
 8005fdc:	bf00      	nop
 8005fde:	3730      	adds	r7, #48	@ 0x30
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	40000400 	.word	0x40000400
 8005fe8:	40021000 	.word	0x40021000
 8005fec:	40000800 	.word	0x40000800

08005ff0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b08a      	sub	sp, #40	@ 0x28
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ff8:	f107 0314 	add.w	r3, r7, #20
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	601a      	str	r2, [r3, #0]
 8006000:	605a      	str	r2, [r3, #4]
 8006002:	609a      	str	r2, [r3, #8]
 8006004:	60da      	str	r2, [r3, #12]
 8006006:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a31      	ldr	r2, [pc, #196]	@ (80060d4 <HAL_TIM_MspPostInit+0xe4>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d11d      	bne.n	800604e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006012:	4b31      	ldr	r3, [pc, #196]	@ (80060d8 <HAL_TIM_MspPostInit+0xe8>)
 8006014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006016:	4a30      	ldr	r2, [pc, #192]	@ (80060d8 <HAL_TIM_MspPostInit+0xe8>)
 8006018:	f043 0304 	orr.w	r3, r3, #4
 800601c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800601e:	4b2e      	ldr	r3, [pc, #184]	@ (80060d8 <HAL_TIM_MspPostInit+0xe8>)
 8006020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006022:	f003 0304 	and.w	r3, r3, #4
 8006026:	613b      	str	r3, [r7, #16]
 8006028:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = PWM_Servo_Pin;
 800602a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800602e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006030:	2302      	movs	r3, #2
 8006032:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006034:	2300      	movs	r3, #0
 8006036:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006038:	2300      	movs	r3, #0
 800603a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800603c:	2304      	movs	r3, #4
 800603e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_Servo_GPIO_Port, &GPIO_InitStruct);
 8006040:	f107 0314 	add.w	r3, r7, #20
 8006044:	4619      	mov	r1, r3
 8006046:	4825      	ldr	r0, [pc, #148]	@ (80060dc <HAL_TIM_MspPostInit+0xec>)
 8006048:	f002 f8ce 	bl	80081e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM20_MspPostInit 1 */

  /* USER CODE END TIM20_MspPostInit 1 */
  }

}
 800604c:	e03d      	b.n	80060ca <HAL_TIM_MspPostInit+0xda>
  else if(timHandle->Instance==TIM20)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a23      	ldr	r2, [pc, #140]	@ (80060e0 <HAL_TIM_MspPostInit+0xf0>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d138      	bne.n	80060ca <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006058:	4b1f      	ldr	r3, [pc, #124]	@ (80060d8 <HAL_TIM_MspPostInit+0xe8>)
 800605a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800605c:	4a1e      	ldr	r2, [pc, #120]	@ (80060d8 <HAL_TIM_MspPostInit+0xe8>)
 800605e:	f043 0302 	orr.w	r3, r3, #2
 8006062:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006064:	4b1c      	ldr	r3, [pc, #112]	@ (80060d8 <HAL_TIM_MspPostInit+0xe8>)
 8006066:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006068:	f003 0302 	and.w	r3, r3, #2
 800606c:	60fb      	str	r3, [r7, #12]
 800606e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006070:	4b19      	ldr	r3, [pc, #100]	@ (80060d8 <HAL_TIM_MspPostInit+0xe8>)
 8006072:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006074:	4a18      	ldr	r2, [pc, #96]	@ (80060d8 <HAL_TIM_MspPostInit+0xe8>)
 8006076:	f043 0304 	orr.w	r3, r3, #4
 800607a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800607c:	4b16      	ldr	r3, [pc, #88]	@ (80060d8 <HAL_TIM_MspPostInit+0xe8>)
 800607e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006080:	f003 0304 	and.w	r3, r3, #4
 8006084:	60bb      	str	r3, [r7, #8]
 8006086:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_MD20A_24V_Pin;
 8006088:	2304      	movs	r3, #4
 800608a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800608c:	2302      	movs	r3, #2
 800608e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006090:	2300      	movs	r3, #0
 8006092:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006094:	2300      	movs	r3, #0
 8006096:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 8006098:	2303      	movs	r3, #3
 800609a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MD20A_24V_GPIO_Port, &GPIO_InitStruct);
 800609c:	f107 0314 	add.w	r3, r7, #20
 80060a0:	4619      	mov	r1, r3
 80060a2:	4810      	ldr	r0, [pc, #64]	@ (80060e4 <HAL_TIM_MspPostInit+0xf4>)
 80060a4:	f002 f8a0 	bl	80081e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_MD20A_18V_Pin;
 80060a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80060ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060ae:	2302      	movs	r3, #2
 80060b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060b2:	2300      	movs	r3, #0
 80060b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060b6:	2300      	movs	r3, #0
 80060b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM20;
 80060ba:	2306      	movs	r3, #6
 80060bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MD20A_18V_GPIO_Port, &GPIO_InitStruct);
 80060be:	f107 0314 	add.w	r3, r7, #20
 80060c2:	4619      	mov	r1, r3
 80060c4:	4805      	ldr	r0, [pc, #20]	@ (80060dc <HAL_TIM_MspPostInit+0xec>)
 80060c6:	f002 f88f 	bl	80081e8 <HAL_GPIO_Init>
}
 80060ca:	bf00      	nop
 80060cc:	3728      	adds	r7, #40	@ 0x28
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	40013400 	.word	0x40013400
 80060d8:	40021000 	.word	0x40021000
 80060dc:	48000800 	.word	0x48000800
 80060e0:	40015000 	.word	0x40015000
 80060e4:	48000400 	.word	0x48000400

080060e8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80060ec:	4b23      	ldr	r3, [pc, #140]	@ (800617c <MX_USART2_UART_Init+0x94>)
 80060ee:	4a24      	ldr	r2, [pc, #144]	@ (8006180 <MX_USART2_UART_Init+0x98>)
 80060f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80060f2:	4b22      	ldr	r3, [pc, #136]	@ (800617c <MX_USART2_UART_Init+0x94>)
 80060f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80060f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80060fa:	4b20      	ldr	r3, [pc, #128]	@ (800617c <MX_USART2_UART_Init+0x94>)
 80060fc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006100:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006102:	4b1e      	ldr	r3, [pc, #120]	@ (800617c <MX_USART2_UART_Init+0x94>)
 8006104:	2200      	movs	r2, #0
 8006106:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8006108:	4b1c      	ldr	r3, [pc, #112]	@ (800617c <MX_USART2_UART_Init+0x94>)
 800610a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800610e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006110:	4b1a      	ldr	r3, [pc, #104]	@ (800617c <MX_USART2_UART_Init+0x94>)
 8006112:	220c      	movs	r2, #12
 8006114:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006116:	4b19      	ldr	r3, [pc, #100]	@ (800617c <MX_USART2_UART_Init+0x94>)
 8006118:	2200      	movs	r2, #0
 800611a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800611c:	4b17      	ldr	r3, [pc, #92]	@ (800617c <MX_USART2_UART_Init+0x94>)
 800611e:	2200      	movs	r2, #0
 8006120:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006122:	4b16      	ldr	r3, [pc, #88]	@ (800617c <MX_USART2_UART_Init+0x94>)
 8006124:	2200      	movs	r2, #0
 8006126:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006128:	4b14      	ldr	r3, [pc, #80]	@ (800617c <MX_USART2_UART_Init+0x94>)
 800612a:	2200      	movs	r2, #0
 800612c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800612e:	4b13      	ldr	r3, [pc, #76]	@ (800617c <MX_USART2_UART_Init+0x94>)
 8006130:	2200      	movs	r2, #0
 8006132:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006134:	4811      	ldr	r0, [pc, #68]	@ (800617c <MX_USART2_UART_Init+0x94>)
 8006136:	f006 f841 	bl	800c1bc <HAL_UART_Init>
 800613a:	4603      	mov	r3, r0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d001      	beq.n	8006144 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8006140:	f7ff f9b8 	bl	80054b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006144:	2100      	movs	r1, #0
 8006146:	480d      	ldr	r0, [pc, #52]	@ (800617c <MX_USART2_UART_Init+0x94>)
 8006148:	f008 fbc3 	bl	800e8d2 <HAL_UARTEx_SetTxFifoThreshold>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d001      	beq.n	8006156 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8006152:	f7ff f9af 	bl	80054b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006156:	2100      	movs	r1, #0
 8006158:	4808      	ldr	r0, [pc, #32]	@ (800617c <MX_USART2_UART_Init+0x94>)
 800615a:	f008 fbf8 	bl	800e94e <HAL_UARTEx_SetRxFifoThreshold>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d001      	beq.n	8006168 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8006164:	f7ff f9a6 	bl	80054b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8006168:	4804      	ldr	r0, [pc, #16]	@ (800617c <MX_USART2_UART_Init+0x94>)
 800616a:	f008 fb79 	bl	800e860 <HAL_UARTEx_DisableFifoMode>
 800616e:	4603      	mov	r3, r0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d001      	beq.n	8006178 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8006174:	f7ff f99e 	bl	80054b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006178:	bf00      	nop
 800617a:	bd80      	pop	{r7, pc}
 800617c:	20001ca8 	.word	0x20001ca8
 8006180:	40004400 	.word	0x40004400

08006184 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b09e      	sub	sp, #120	@ 0x78
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800618c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8006190:	2200      	movs	r2, #0
 8006192:	601a      	str	r2, [r3, #0]
 8006194:	605a      	str	r2, [r3, #4]
 8006196:	609a      	str	r2, [r3, #8]
 8006198:	60da      	str	r2, [r3, #12]
 800619a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800619c:	f107 0310 	add.w	r3, r7, #16
 80061a0:	2254      	movs	r2, #84	@ 0x54
 80061a2:	2100      	movs	r1, #0
 80061a4:	4618      	mov	r0, r3
 80061a6:	f009 f955 	bl	800f454 <memset>
  if(uartHandle->Instance==USART2)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a37      	ldr	r2, [pc, #220]	@ (800628c <HAL_UART_MspInit+0x108>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d167      	bne.n	8006284 <HAL_UART_MspInit+0x100>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80061b4:	2302      	movs	r3, #2
 80061b6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80061b8:	2300      	movs	r3, #0
 80061ba:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80061bc:	f107 0310 	add.w	r3, r7, #16
 80061c0:	4618      	mov	r0, r3
 80061c2:	f002 ffa5 	bl	8009110 <HAL_RCCEx_PeriphCLKConfig>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d001      	beq.n	80061d0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80061cc:	f7ff f972 	bl	80054b4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80061d0:	4b2f      	ldr	r3, [pc, #188]	@ (8006290 <HAL_UART_MspInit+0x10c>)
 80061d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061d4:	4a2e      	ldr	r2, [pc, #184]	@ (8006290 <HAL_UART_MspInit+0x10c>)
 80061d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061da:	6593      	str	r3, [r2, #88]	@ 0x58
 80061dc:	4b2c      	ldr	r3, [pc, #176]	@ (8006290 <HAL_UART_MspInit+0x10c>)
 80061de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061e4:	60fb      	str	r3, [r7, #12]
 80061e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061e8:	4b29      	ldr	r3, [pc, #164]	@ (8006290 <HAL_UART_MspInit+0x10c>)
 80061ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061ec:	4a28      	ldr	r2, [pc, #160]	@ (8006290 <HAL_UART_MspInit+0x10c>)
 80061ee:	f043 0301 	orr.w	r3, r3, #1
 80061f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80061f4:	4b26      	ldr	r3, [pc, #152]	@ (8006290 <HAL_UART_MspInit+0x10c>)
 80061f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061f8:	f003 0301 	and.w	r3, r3, #1
 80061fc:	60bb      	str	r3, [r7, #8]
 80061fe:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006200:	230c      	movs	r3, #12
 8006202:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006204:	2302      	movs	r3, #2
 8006206:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006208:	2300      	movs	r3, #0
 800620a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800620c:	2300      	movs	r3, #0
 800620e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006210:	2307      	movs	r3, #7
 8006212:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006214:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8006218:	4619      	mov	r1, r3
 800621a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800621e:	f001 ffe3 	bl	80081e8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 8006222:	4b1c      	ldr	r3, [pc, #112]	@ (8006294 <HAL_UART_MspInit+0x110>)
 8006224:	4a1c      	ldr	r2, [pc, #112]	@ (8006298 <HAL_UART_MspInit+0x114>)
 8006226:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8006228:	4b1a      	ldr	r3, [pc, #104]	@ (8006294 <HAL_UART_MspInit+0x110>)
 800622a:	221b      	movs	r2, #27
 800622c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800622e:	4b19      	ldr	r3, [pc, #100]	@ (8006294 <HAL_UART_MspInit+0x110>)
 8006230:	2210      	movs	r2, #16
 8006232:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006234:	4b17      	ldr	r3, [pc, #92]	@ (8006294 <HAL_UART_MspInit+0x110>)
 8006236:	2200      	movs	r2, #0
 8006238:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800623a:	4b16      	ldr	r3, [pc, #88]	@ (8006294 <HAL_UART_MspInit+0x110>)
 800623c:	2280      	movs	r2, #128	@ 0x80
 800623e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006240:	4b14      	ldr	r3, [pc, #80]	@ (8006294 <HAL_UART_MspInit+0x110>)
 8006242:	2200      	movs	r2, #0
 8006244:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006246:	4b13      	ldr	r3, [pc, #76]	@ (8006294 <HAL_UART_MspInit+0x110>)
 8006248:	2200      	movs	r2, #0
 800624a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800624c:	4b11      	ldr	r3, [pc, #68]	@ (8006294 <HAL_UART_MspInit+0x110>)
 800624e:	2200      	movs	r2, #0
 8006250:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006252:	4b10      	ldr	r3, [pc, #64]	@ (8006294 <HAL_UART_MspInit+0x110>)
 8006254:	2200      	movs	r2, #0
 8006256:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8006258:	480e      	ldr	r0, [pc, #56]	@ (8006294 <HAL_UART_MspInit+0x110>)
 800625a:	f001 fc87 	bl	8007b6c <HAL_DMA_Init>
 800625e:	4603      	mov	r3, r0
 8006260:	2b00      	cmp	r3, #0
 8006262:	d001      	beq.n	8006268 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8006264:	f7ff f926 	bl	80054b4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	4a0a      	ldr	r2, [pc, #40]	@ (8006294 <HAL_UART_MspInit+0x110>)
 800626c:	67da      	str	r2, [r3, #124]	@ 0x7c
 800626e:	4a09      	ldr	r2, [pc, #36]	@ (8006294 <HAL_UART_MspInit+0x110>)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006274:	2200      	movs	r2, #0
 8006276:	2100      	movs	r1, #0
 8006278:	2026      	movs	r0, #38	@ 0x26
 800627a:	f001 fc42 	bl	8007b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800627e:	2026      	movs	r0, #38	@ 0x26
 8006280:	f001 fc59 	bl	8007b36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8006284:	bf00      	nop
 8006286:	3778      	adds	r7, #120	@ 0x78
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}
 800628c:	40004400 	.word	0x40004400
 8006290:	40021000 	.word	0x40021000
 8006294:	20001d74 	.word	0x20001d74
 8006298:	40020008 	.word	0x40020008

0800629c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800629c:	480d      	ldr	r0, [pc, #52]	@ (80062d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800629e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80062a0:	f7ff fa5a 	bl	8005758 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80062a4:	480c      	ldr	r0, [pc, #48]	@ (80062d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80062a6:	490d      	ldr	r1, [pc, #52]	@ (80062dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80062a8:	4a0d      	ldr	r2, [pc, #52]	@ (80062e0 <LoopForever+0xe>)
  movs r3, #0
 80062aa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80062ac:	e002      	b.n	80062b4 <LoopCopyDataInit>

080062ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80062ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80062b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80062b2:	3304      	adds	r3, #4

080062b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80062b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80062b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80062b8:	d3f9      	bcc.n	80062ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80062ba:	4a0a      	ldr	r2, [pc, #40]	@ (80062e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80062bc:	4c0a      	ldr	r4, [pc, #40]	@ (80062e8 <LoopForever+0x16>)
  movs r3, #0
 80062be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80062c0:	e001      	b.n	80062c6 <LoopFillZerobss>

080062c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80062c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80062c4:	3204      	adds	r2, #4

080062c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80062c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80062c8:	d3fb      	bcc.n	80062c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80062ca:	f009 f8d1 	bl	800f470 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80062ce:	f7fd fa33 	bl	8003738 <main>

080062d2 <LoopForever>:

LoopForever:
    b LoopForever
 80062d2:	e7fe      	b.n	80062d2 <LoopForever>
  ldr   r0, =_estack
 80062d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80062d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80062dc:	200002c0 	.word	0x200002c0
  ldr r2, =_sidata
 80062e0:	08011630 	.word	0x08011630
  ldr r2, =_sbss
 80062e4:	200002c0 	.word	0x200002c0
  ldr r4, =_ebss
 80062e8:	20001f10 	.word	0x20001f10

080062ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80062ec:	e7fe      	b.n	80062ec <ADC1_2_IRQHandler>

080062ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80062ee:	b580      	push	{r7, lr}
 80062f0:	b082      	sub	sp, #8
 80062f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80062f4:	2300      	movs	r3, #0
 80062f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80062f8:	2003      	movs	r0, #3
 80062fa:	f001 fbf7 	bl	8007aec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80062fe:	2000      	movs	r0, #0
 8006300:	f000 f80e 	bl	8006320 <HAL_InitTick>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d002      	beq.n	8006310 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	71fb      	strb	r3, [r7, #7]
 800630e:	e001      	b.n	8006314 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006310:	f7ff f974 	bl	80055fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006314:	79fb      	ldrb	r3, [r7, #7]

}
 8006316:	4618      	mov	r0, r3
 8006318:	3708      	adds	r7, #8
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
	...

08006320 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006328:	2300      	movs	r3, #0
 800632a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800632c:	4b16      	ldr	r3, [pc, #88]	@ (8006388 <HAL_InitTick+0x68>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d022      	beq.n	800637a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8006334:	4b15      	ldr	r3, [pc, #84]	@ (800638c <HAL_InitTick+0x6c>)
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	4b13      	ldr	r3, [pc, #76]	@ (8006388 <HAL_InitTick+0x68>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8006340:	fbb1 f3f3 	udiv	r3, r1, r3
 8006344:	fbb2 f3f3 	udiv	r3, r2, r3
 8006348:	4618      	mov	r0, r3
 800634a:	f001 fc02 	bl	8007b52 <HAL_SYSTICK_Config>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d10f      	bne.n	8006374 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2b0f      	cmp	r3, #15
 8006358:	d809      	bhi.n	800636e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800635a:	2200      	movs	r2, #0
 800635c:	6879      	ldr	r1, [r7, #4]
 800635e:	f04f 30ff 	mov.w	r0, #4294967295
 8006362:	f001 fbce 	bl	8007b02 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006366:	4a0a      	ldr	r2, [pc, #40]	@ (8006390 <HAL_InitTick+0x70>)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6013      	str	r3, [r2, #0]
 800636c:	e007      	b.n	800637e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	73fb      	strb	r3, [r7, #15]
 8006372:	e004      	b.n	800637e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	73fb      	strb	r3, [r7, #15]
 8006378:	e001      	b.n	800637e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800637e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006380:	4618      	mov	r0, r3
 8006382:	3710      	adds	r7, #16
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}
 8006388:	2000026c 	.word	0x2000026c
 800638c:	20000264 	.word	0x20000264
 8006390:	20000268 	.word	0x20000268

08006394 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006394:	b480      	push	{r7}
 8006396:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006398:	4b05      	ldr	r3, [pc, #20]	@ (80063b0 <HAL_IncTick+0x1c>)
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	4b05      	ldr	r3, [pc, #20]	@ (80063b4 <HAL_IncTick+0x20>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4413      	add	r3, r2
 80063a2:	4a03      	ldr	r2, [pc, #12]	@ (80063b0 <HAL_IncTick+0x1c>)
 80063a4:	6013      	str	r3, [r2, #0]
}
 80063a6:	bf00      	nop
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr
 80063b0:	20001dd4 	.word	0x20001dd4
 80063b4:	2000026c 	.word	0x2000026c

080063b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80063b8:	b480      	push	{r7}
 80063ba:	af00      	add	r7, sp, #0
  return uwTick;
 80063bc:	4b03      	ldr	r3, [pc, #12]	@ (80063cc <HAL_GetTick+0x14>)
 80063be:	681b      	ldr	r3, [r3, #0]
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr
 80063ca:	bf00      	nop
 80063cc:	20001dd4 	.word	0x20001dd4

080063d0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	431a      	orrs	r2, r3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	609a      	str	r2, [r3, #8]
}
 80063ea:	bf00      	nop
 80063ec:	370c      	adds	r7, #12
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr

080063f6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80063f6:	b480      	push	{r7}
 80063f8:	b083      	sub	sp, #12
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
 80063fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	431a      	orrs	r2, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	609a      	str	r2, [r3, #8]
}
 8006410:	bf00      	nop
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800642c:	4618      	mov	r0, r3
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006438:	b480      	push	{r7}
 800643a:	b087      	sub	sp, #28
 800643c:	af00      	add	r7, sp, #0
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	60b9      	str	r1, [r7, #8]
 8006442:	607a      	str	r2, [r7, #4]
 8006444:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	3360      	adds	r3, #96	@ 0x60
 800644a:	461a      	mov	r2, r3
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	4413      	add	r3, r2
 8006452:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	4b08      	ldr	r3, [pc, #32]	@ (800647c <LL_ADC_SetOffset+0x44>)
 800645a:	4013      	ands	r3, r2
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8006462:	683a      	ldr	r2, [r7, #0]
 8006464:	430a      	orrs	r2, r1
 8006466:	4313      	orrs	r3, r2
 8006468:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8006470:	bf00      	nop
 8006472:	371c      	adds	r7, #28
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr
 800647c:	03fff000 	.word	0x03fff000

08006480 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006480:	b480      	push	{r7}
 8006482:	b085      	sub	sp, #20
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	3360      	adds	r3, #96	@ 0x60
 800648e:	461a      	mov	r2, r3
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	4413      	add	r3, r2
 8006496:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3714      	adds	r7, #20
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b087      	sub	sp, #28
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	3360      	adds	r3, #96	@ 0x60
 80064bc:	461a      	mov	r2, r3
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	4413      	add	r3, r2
 80064c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	431a      	orrs	r2, r3
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80064d6:	bf00      	nop
 80064d8:	371c      	adds	r7, #28
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr

080064e2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80064e2:	b480      	push	{r7}
 80064e4:	b087      	sub	sp, #28
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	60f8      	str	r0, [r7, #12]
 80064ea:	60b9      	str	r1, [r7, #8]
 80064ec:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	3360      	adds	r3, #96	@ 0x60
 80064f2:	461a      	mov	r2, r3
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	4413      	add	r3, r2
 80064fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	431a      	orrs	r2, r3
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800650c:	bf00      	nop
 800650e:	371c      	adds	r7, #28
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8006518:	b480      	push	{r7}
 800651a:	b087      	sub	sp, #28
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	3360      	adds	r3, #96	@ 0x60
 8006528:	461a      	mov	r2, r3
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	4413      	add	r3, r2
 8006530:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	431a      	orrs	r2, r3
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8006542:	bf00      	nop
 8006544:	371c      	adds	r7, #28
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr

0800654e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800654e:	b480      	push	{r7}
 8006550:	b083      	sub	sp, #12
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
 8006556:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	695b      	ldr	r3, [r3, #20]
 800655c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	431a      	orrs	r2, r3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	615a      	str	r2, [r3, #20]
}
 8006568:	bf00      	nop
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006574:	b480      	push	{r7}
 8006576:	b087      	sub	sp, #28
 8006578:	af00      	add	r7, sp, #0
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	60b9      	str	r1, [r7, #8]
 800657e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	3330      	adds	r3, #48	@ 0x30
 8006584:	461a      	mov	r2, r3
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	0a1b      	lsrs	r3, r3, #8
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	f003 030c 	and.w	r3, r3, #12
 8006590:	4413      	add	r3, r2
 8006592:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	f003 031f 	and.w	r3, r3, #31
 800659e:	211f      	movs	r1, #31
 80065a0:	fa01 f303 	lsl.w	r3, r1, r3
 80065a4:	43db      	mvns	r3, r3
 80065a6:	401a      	ands	r2, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	0e9b      	lsrs	r3, r3, #26
 80065ac:	f003 011f 	and.w	r1, r3, #31
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	f003 031f 	and.w	r3, r3, #31
 80065b6:	fa01 f303 	lsl.w	r3, r1, r3
 80065ba:	431a      	orrs	r2, r3
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80065c0:	bf00      	nop
 80065c2:	371c      	adds	r7, #28
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b087      	sub	sp, #28
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	60b9      	str	r1, [r7, #8]
 80065d6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	3314      	adds	r3, #20
 80065dc:	461a      	mov	r2, r3
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	0e5b      	lsrs	r3, r3, #25
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	f003 0304 	and.w	r3, r3, #4
 80065e8:	4413      	add	r3, r2
 80065ea:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	0d1b      	lsrs	r3, r3, #20
 80065f4:	f003 031f 	and.w	r3, r3, #31
 80065f8:	2107      	movs	r1, #7
 80065fa:	fa01 f303 	lsl.w	r3, r1, r3
 80065fe:	43db      	mvns	r3, r3
 8006600:	401a      	ands	r2, r3
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	0d1b      	lsrs	r3, r3, #20
 8006606:	f003 031f 	and.w	r3, r3, #31
 800660a:	6879      	ldr	r1, [r7, #4]
 800660c:	fa01 f303 	lsl.w	r3, r1, r3
 8006610:	431a      	orrs	r2, r3
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006616:	bf00      	nop
 8006618:	371c      	adds	r7, #28
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr
	...

08006624 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006624:	b480      	push	{r7}
 8006626:	b085      	sub	sp, #20
 8006628:	af00      	add	r7, sp, #0
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	60b9      	str	r1, [r7, #8]
 800662e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800663c:	43db      	mvns	r3, r3
 800663e:	401a      	ands	r2, r3
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f003 0318 	and.w	r3, r3, #24
 8006646:	4908      	ldr	r1, [pc, #32]	@ (8006668 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006648:	40d9      	lsrs	r1, r3
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	400b      	ands	r3, r1
 800664e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006652:	431a      	orrs	r2, r3
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800665a:	bf00      	nop
 800665c:	3714      	adds	r7, #20
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop
 8006668:	0007ffff 	.word	0x0007ffff

0800666c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	f003 031f 	and.w	r3, r3, #31
}
 800667c:	4618      	mov	r0, r3
 800667e:	370c      	adds	r7, #12
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr

08006688 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8006698:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	6093      	str	r3, [r2, #8]
}
 80066a0:	bf00      	nop
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80066bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066c0:	d101      	bne.n	80066c6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80066c2:	2301      	movs	r3, #1
 80066c4:	e000      	b.n	80066c8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80066e4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80066e8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80066f0:	bf00      	nop
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800670c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006710:	d101      	bne.n	8006716 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006712:	2301      	movs	r3, #1
 8006714:	e000      	b.n	8006718 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	370c      	adds	r7, #12
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006734:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006738:	f043 0201 	orr.w	r2, r3, #1
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006740:	bf00      	nop
 8006742:	370c      	adds	r7, #12
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr

0800674c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	f003 0301 	and.w	r3, r3, #1
 800675c:	2b01      	cmp	r3, #1
 800675e:	d101      	bne.n	8006764 <LL_ADC_IsEnabled+0x18>
 8006760:	2301      	movs	r3, #1
 8006762:	e000      	b.n	8006766 <LL_ADC_IsEnabled+0x1a>
 8006764:	2300      	movs	r3, #0
}
 8006766:	4618      	mov	r0, r3
 8006768:	370c      	adds	r7, #12
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr

08006772 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006772:	b480      	push	{r7}
 8006774:	b083      	sub	sp, #12
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006782:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006786:	f043 0204 	orr.w	r2, r3, #4
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800678e:	bf00      	nop
 8006790:	370c      	adds	r7, #12
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr

0800679a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800679a:	b480      	push	{r7}
 800679c:	b083      	sub	sp, #12
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	f003 0304 	and.w	r3, r3, #4
 80067aa:	2b04      	cmp	r3, #4
 80067ac:	d101      	bne.n	80067b2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80067ae:	2301      	movs	r3, #1
 80067b0:	e000      	b.n	80067b4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80067b2:	2300      	movs	r3, #0
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	f003 0308 	and.w	r3, r3, #8
 80067d0:	2b08      	cmp	r3, #8
 80067d2:	d101      	bne.n	80067d8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80067d4:	2301      	movs	r3, #1
 80067d6:	e000      	b.n	80067da <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	370c      	adds	r7, #12
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr
	...

080067e8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80067e8:	b590      	push	{r4, r7, lr}
 80067ea:	b089      	sub	sp, #36	@ 0x24
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80067f0:	2300      	movs	r3, #0
 80067f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80067f4:	2300      	movs	r3, #0
 80067f6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d101      	bne.n	8006802 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	e1a9      	b.n	8006b56 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	695b      	ldr	r3, [r3, #20]
 8006806:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800680c:	2b00      	cmp	r3, #0
 800680e:	d109      	bne.n	8006824 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f7fc fe07 	bl	8003424 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4618      	mov	r0, r3
 800682a:	f7ff ff3f 	bl	80066ac <LL_ADC_IsDeepPowerDownEnabled>
 800682e:	4603      	mov	r3, r0
 8006830:	2b00      	cmp	r3, #0
 8006832:	d004      	beq.n	800683e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4618      	mov	r0, r3
 800683a:	f7ff ff25 	bl	8006688 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4618      	mov	r0, r3
 8006844:	f7ff ff5a 	bl	80066fc <LL_ADC_IsInternalRegulatorEnabled>
 8006848:	4603      	mov	r3, r0
 800684a:	2b00      	cmp	r3, #0
 800684c:	d115      	bne.n	800687a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4618      	mov	r0, r3
 8006854:	f7ff ff3e 	bl	80066d4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006858:	4b9c      	ldr	r3, [pc, #624]	@ (8006acc <HAL_ADC_Init+0x2e4>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	099b      	lsrs	r3, r3, #6
 800685e:	4a9c      	ldr	r2, [pc, #624]	@ (8006ad0 <HAL_ADC_Init+0x2e8>)
 8006860:	fba2 2303 	umull	r2, r3, r2, r3
 8006864:	099b      	lsrs	r3, r3, #6
 8006866:	3301      	adds	r3, #1
 8006868:	005b      	lsls	r3, r3, #1
 800686a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800686c:	e002      	b.n	8006874 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	3b01      	subs	r3, #1
 8006872:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d1f9      	bne.n	800686e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4618      	mov	r0, r3
 8006880:	f7ff ff3c 	bl	80066fc <LL_ADC_IsInternalRegulatorEnabled>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d10d      	bne.n	80068a6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800688e:	f043 0210 	orr.w	r2, r3, #16
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800689a:	f043 0201 	orr.w	r2, r3, #1
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4618      	mov	r0, r3
 80068ac:	f7ff ff75 	bl	800679a <LL_ADC_REG_IsConversionOngoing>
 80068b0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068b6:	f003 0310 	and.w	r3, r3, #16
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	f040 8142 	bne.w	8006b44 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	f040 813e 	bne.w	8006b44 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068cc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80068d0:	f043 0202 	orr.w	r2, r3, #2
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4618      	mov	r0, r3
 80068de:	f7ff ff35 	bl	800674c <LL_ADC_IsEnabled>
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d141      	bne.n	800696c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80068f0:	d004      	beq.n	80068fc <HAL_ADC_Init+0x114>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a77      	ldr	r2, [pc, #476]	@ (8006ad4 <HAL_ADC_Init+0x2ec>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d10f      	bne.n	800691c <HAL_ADC_Init+0x134>
 80068fc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006900:	f7ff ff24 	bl	800674c <LL_ADC_IsEnabled>
 8006904:	4604      	mov	r4, r0
 8006906:	4873      	ldr	r0, [pc, #460]	@ (8006ad4 <HAL_ADC_Init+0x2ec>)
 8006908:	f7ff ff20 	bl	800674c <LL_ADC_IsEnabled>
 800690c:	4603      	mov	r3, r0
 800690e:	4323      	orrs	r3, r4
 8006910:	2b00      	cmp	r3, #0
 8006912:	bf0c      	ite	eq
 8006914:	2301      	moveq	r3, #1
 8006916:	2300      	movne	r3, #0
 8006918:	b2db      	uxtb	r3, r3
 800691a:	e012      	b.n	8006942 <HAL_ADC_Init+0x15a>
 800691c:	486e      	ldr	r0, [pc, #440]	@ (8006ad8 <HAL_ADC_Init+0x2f0>)
 800691e:	f7ff ff15 	bl	800674c <LL_ADC_IsEnabled>
 8006922:	4604      	mov	r4, r0
 8006924:	486d      	ldr	r0, [pc, #436]	@ (8006adc <HAL_ADC_Init+0x2f4>)
 8006926:	f7ff ff11 	bl	800674c <LL_ADC_IsEnabled>
 800692a:	4603      	mov	r3, r0
 800692c:	431c      	orrs	r4, r3
 800692e:	486c      	ldr	r0, [pc, #432]	@ (8006ae0 <HAL_ADC_Init+0x2f8>)
 8006930:	f7ff ff0c 	bl	800674c <LL_ADC_IsEnabled>
 8006934:	4603      	mov	r3, r0
 8006936:	4323      	orrs	r3, r4
 8006938:	2b00      	cmp	r3, #0
 800693a:	bf0c      	ite	eq
 800693c:	2301      	moveq	r3, #1
 800693e:	2300      	movne	r3, #0
 8006940:	b2db      	uxtb	r3, r3
 8006942:	2b00      	cmp	r3, #0
 8006944:	d012      	beq.n	800696c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800694e:	d004      	beq.n	800695a <HAL_ADC_Init+0x172>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a5f      	ldr	r2, [pc, #380]	@ (8006ad4 <HAL_ADC_Init+0x2ec>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d101      	bne.n	800695e <HAL_ADC_Init+0x176>
 800695a:	4a62      	ldr	r2, [pc, #392]	@ (8006ae4 <HAL_ADC_Init+0x2fc>)
 800695c:	e000      	b.n	8006960 <HAL_ADC_Init+0x178>
 800695e:	4a62      	ldr	r2, [pc, #392]	@ (8006ae8 <HAL_ADC_Init+0x300>)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	4619      	mov	r1, r3
 8006966:	4610      	mov	r0, r2
 8006968:	f7ff fd32 	bl	80063d0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	7f5b      	ldrb	r3, [r3, #29]
 8006970:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006976:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800697c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8006982:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800698a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800698c:	4313      	orrs	r3, r2
 800698e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006996:	2b01      	cmp	r3, #1
 8006998:	d106      	bne.n	80069a8 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800699e:	3b01      	subs	r3, #1
 80069a0:	045b      	lsls	r3, r3, #17
 80069a2:	69ba      	ldr	r2, [r7, #24]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d009      	beq.n	80069c4 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069b4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069bc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80069be:	69ba      	ldr	r2, [r7, #24]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	68da      	ldr	r2, [r3, #12]
 80069ca:	4b48      	ldr	r3, [pc, #288]	@ (8006aec <HAL_ADC_Init+0x304>)
 80069cc:	4013      	ands	r3, r2
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	6812      	ldr	r2, [r2, #0]
 80069d2:	69b9      	ldr	r1, [r7, #24]
 80069d4:	430b      	orrs	r3, r1
 80069d6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	430a      	orrs	r2, r1
 80069ec:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4618      	mov	r0, r3
 80069f4:	f7ff fee4 	bl	80067c0 <LL_ADC_INJ_IsConversionOngoing>
 80069f8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d17f      	bne.n	8006b00 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d17c      	bne.n	8006b00 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8006a0a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006a12:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8006a14:	4313      	orrs	r3, r2
 8006a16:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a22:	f023 0302 	bic.w	r3, r3, #2
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	6812      	ldr	r2, [r2, #0]
 8006a2a:	69b9      	ldr	r1, [r7, #24]
 8006a2c:	430b      	orrs	r3, r1
 8006a2e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	691b      	ldr	r3, [r3, #16]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d017      	beq.n	8006a68 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	691a      	ldr	r2, [r3, #16]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006a46:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006a50:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8006a54:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	6911      	ldr	r1, [r2, #16]
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	6812      	ldr	r2, [r2, #0]
 8006a60:	430b      	orrs	r3, r1
 8006a62:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8006a66:	e013      	b.n	8006a90 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	691a      	ldr	r2, [r3, #16]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006a76:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	6812      	ldr	r2, [r2, #0]
 8006a84:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8006a88:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006a8c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d12a      	bne.n	8006af0 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	691b      	ldr	r3, [r3, #16]
 8006aa0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006aa4:	f023 0304 	bic.w	r3, r3, #4
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006ab0:	4311      	orrs	r1, r2
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006ab6:	4311      	orrs	r1, r2
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006abc:	430a      	orrs	r2, r1
 8006abe:	431a      	orrs	r2, r3
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f042 0201 	orr.w	r2, r2, #1
 8006ac8:	611a      	str	r2, [r3, #16]
 8006aca:	e019      	b.n	8006b00 <HAL_ADC_Init+0x318>
 8006acc:	20000264 	.word	0x20000264
 8006ad0:	053e2d63 	.word	0x053e2d63
 8006ad4:	50000100 	.word	0x50000100
 8006ad8:	50000400 	.word	0x50000400
 8006adc:	50000500 	.word	0x50000500
 8006ae0:	50000600 	.word	0x50000600
 8006ae4:	50000300 	.word	0x50000300
 8006ae8:	50000700 	.word	0x50000700
 8006aec:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	691a      	ldr	r2, [r3, #16]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f022 0201 	bic.w	r2, r2, #1
 8006afe:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	695b      	ldr	r3, [r3, #20]
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d10c      	bne.n	8006b22 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b0e:	f023 010f 	bic.w	r1, r3, #15
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a1b      	ldr	r3, [r3, #32]
 8006b16:	1e5a      	subs	r2, r3, #1
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	430a      	orrs	r2, r1
 8006b1e:	631a      	str	r2, [r3, #48]	@ 0x30
 8006b20:	e007      	b.n	8006b32 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f022 020f 	bic.w	r2, r2, #15
 8006b30:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b36:	f023 0303 	bic.w	r3, r3, #3
 8006b3a:	f043 0201 	orr.w	r2, r3, #1
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006b42:	e007      	b.n	8006b54 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b48:	f043 0210 	orr.w	r2, r3, #16
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006b54:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3724      	adds	r7, #36	@ 0x24
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd90      	pop	{r4, r7, pc}
 8006b5e:	bf00      	nop

08006b60 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b086      	sub	sp, #24
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006b70:	d004      	beq.n	8006b7c <HAL_ADC_Start+0x1c>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a67      	ldr	r2, [pc, #412]	@ (8006d14 <HAL_ADC_Start+0x1b4>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d101      	bne.n	8006b80 <HAL_ADC_Start+0x20>
 8006b7c:	4b66      	ldr	r3, [pc, #408]	@ (8006d18 <HAL_ADC_Start+0x1b8>)
 8006b7e:	e000      	b.n	8006b82 <HAL_ADC_Start+0x22>
 8006b80:	4b66      	ldr	r3, [pc, #408]	@ (8006d1c <HAL_ADC_Start+0x1bc>)
 8006b82:	4618      	mov	r0, r3
 8006b84:	f7ff fd72 	bl	800666c <LL_ADC_GetMultimode>
 8006b88:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f7ff fe03 	bl	800679a <LL_ADC_REG_IsConversionOngoing>
 8006b94:	4603      	mov	r3, r0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	f040 80b4 	bne.w	8006d04 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d101      	bne.n	8006baa <HAL_ADC_Start+0x4a>
 8006ba6:	2302      	movs	r3, #2
 8006ba8:	e0af      	b.n	8006d0a <HAL_ADC_Start+0x1aa>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2201      	movs	r2, #1
 8006bae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 fd06 	bl	80075c4 <ADC_Enable>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006bbc:	7dfb      	ldrb	r3, [r7, #23]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	f040 809b 	bne.w	8006cfa <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bc8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006bcc:	f023 0301 	bic.w	r3, r3, #1
 8006bd0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a4d      	ldr	r2, [pc, #308]	@ (8006d14 <HAL_ADC_Start+0x1b4>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d009      	beq.n	8006bf6 <HAL_ADC_Start+0x96>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a4e      	ldr	r2, [pc, #312]	@ (8006d20 <HAL_ADC_Start+0x1c0>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d002      	beq.n	8006bf2 <HAL_ADC_Start+0x92>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	e003      	b.n	8006bfa <HAL_ADC_Start+0x9a>
 8006bf2:	4b4c      	ldr	r3, [pc, #304]	@ (8006d24 <HAL_ADC_Start+0x1c4>)
 8006bf4:	e001      	b.n	8006bfa <HAL_ADC_Start+0x9a>
 8006bf6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	6812      	ldr	r2, [r2, #0]
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d002      	beq.n	8006c08 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d105      	bne.n	8006c14 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c0c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006c1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c20:	d106      	bne.n	8006c30 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c26:	f023 0206 	bic.w	r2, r3, #6
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	661a      	str	r2, [r3, #96]	@ 0x60
 8006c2e:	e002      	b.n	8006c36 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	221c      	movs	r2, #28
 8006c3c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a32      	ldr	r2, [pc, #200]	@ (8006d14 <HAL_ADC_Start+0x1b4>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d009      	beq.n	8006c64 <HAL_ADC_Start+0x104>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a32      	ldr	r2, [pc, #200]	@ (8006d20 <HAL_ADC_Start+0x1c0>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d002      	beq.n	8006c60 <HAL_ADC_Start+0x100>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	e003      	b.n	8006c68 <HAL_ADC_Start+0x108>
 8006c60:	4b30      	ldr	r3, [pc, #192]	@ (8006d24 <HAL_ADC_Start+0x1c4>)
 8006c62:	e001      	b.n	8006c68 <HAL_ADC_Start+0x108>
 8006c64:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	6812      	ldr	r2, [r2, #0]
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d008      	beq.n	8006c82 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d005      	beq.n	8006c82 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	2b05      	cmp	r3, #5
 8006c7a:	d002      	beq.n	8006c82 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	2b09      	cmp	r3, #9
 8006c80:	d114      	bne.n	8006cac <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d007      	beq.n	8006ca0 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c94:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006c98:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f7ff fd64 	bl	8006772 <LL_ADC_REG_StartConversion>
 8006caa:	e02d      	b.n	8006d08 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cb0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a15      	ldr	r2, [pc, #84]	@ (8006d14 <HAL_ADC_Start+0x1b4>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d009      	beq.n	8006cd6 <HAL_ADC_Start+0x176>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a16      	ldr	r2, [pc, #88]	@ (8006d20 <HAL_ADC_Start+0x1c0>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d002      	beq.n	8006cd2 <HAL_ADC_Start+0x172>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	e003      	b.n	8006cda <HAL_ADC_Start+0x17a>
 8006cd2:	4b14      	ldr	r3, [pc, #80]	@ (8006d24 <HAL_ADC_Start+0x1c4>)
 8006cd4:	e001      	b.n	8006cda <HAL_ADC_Start+0x17a>
 8006cd6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006cda:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d00f      	beq.n	8006d08 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cec:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006cf0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006cf8:	e006      	b.n	8006d08 <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8006d02:	e001      	b.n	8006d08 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006d04:	2302      	movs	r3, #2
 8006d06:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006d08:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3718      	adds	r7, #24
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	50000100 	.word	0x50000100
 8006d18:	50000300 	.word	0x50000300
 8006d1c:	50000700 	.word	0x50000700
 8006d20:	50000500 	.word	0x50000500
 8006d24:	50000400 	.word	0x50000400

08006d28 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	370c      	adds	r7, #12
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr
	...

08006d44 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b0b6      	sub	sp, #216	@ 0xd8
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006d54:	2300      	movs	r3, #0
 8006d56:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d102      	bne.n	8006d68 <HAL_ADC_ConfigChannel+0x24>
 8006d62:	2302      	movs	r3, #2
 8006d64:	f000 bc13 	b.w	800758e <HAL_ADC_ConfigChannel+0x84a>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4618      	mov	r0, r3
 8006d76:	f7ff fd10 	bl	800679a <LL_ADC_REG_IsConversionOngoing>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	f040 83f3 	bne.w	8007568 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6818      	ldr	r0, [r3, #0]
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	6859      	ldr	r1, [r3, #4]
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	461a      	mov	r2, r3
 8006d90:	f7ff fbf0 	bl	8006574 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f7ff fcfe 	bl	800679a <LL_ADC_REG_IsConversionOngoing>
 8006d9e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4618      	mov	r0, r3
 8006da8:	f7ff fd0a 	bl	80067c0 <LL_ADC_INJ_IsConversionOngoing>
 8006dac:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006db0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	f040 81d9 	bne.w	800716c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006dba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	f040 81d4 	bne.w	800716c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006dcc:	d10f      	bne.n	8006dee <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6818      	ldr	r0, [r3, #0]
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	4619      	mov	r1, r3
 8006dda:	f7ff fbf7 	bl	80065cc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8006de6:	4618      	mov	r0, r3
 8006de8:	f7ff fbb1 	bl	800654e <LL_ADC_SetSamplingTimeCommonConfig>
 8006dec:	e00e      	b.n	8006e0c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6818      	ldr	r0, [r3, #0]
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	6819      	ldr	r1, [r3, #0]
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	f7ff fbe6 	bl	80065cc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	2100      	movs	r1, #0
 8006e06:	4618      	mov	r0, r3
 8006e08:	f7ff fba1 	bl	800654e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	695a      	ldr	r2, [r3, #20]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	08db      	lsrs	r3, r3, #3
 8006e18:	f003 0303 	and.w	r3, r3, #3
 8006e1c:	005b      	lsls	r3, r3, #1
 8006e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e22:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	2b04      	cmp	r3, #4
 8006e2c:	d022      	beq.n	8006e74 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6818      	ldr	r0, [r3, #0]
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	6919      	ldr	r1, [r3, #16]
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006e3e:	f7ff fafb 	bl	8006438 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6818      	ldr	r0, [r3, #0]
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	6919      	ldr	r1, [r3, #16]
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	699b      	ldr	r3, [r3, #24]
 8006e4e:	461a      	mov	r2, r3
 8006e50:	f7ff fb47 	bl	80064e2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6818      	ldr	r0, [r3, #0]
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d102      	bne.n	8006e6a <HAL_ADC_ConfigChannel+0x126>
 8006e64:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006e68:	e000      	b.n	8006e6c <HAL_ADC_ConfigChannel+0x128>
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	f7ff fb53 	bl	8006518 <LL_ADC_SetOffsetSaturation>
 8006e72:	e17b      	b.n	800716c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	2100      	movs	r1, #0
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f7ff fb00 	bl	8006480 <LL_ADC_GetOffsetChannel>
 8006e80:	4603      	mov	r3, r0
 8006e82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d10a      	bne.n	8006ea0 <HAL_ADC_ConfigChannel+0x15c>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	2100      	movs	r1, #0
 8006e90:	4618      	mov	r0, r3
 8006e92:	f7ff faf5 	bl	8006480 <LL_ADC_GetOffsetChannel>
 8006e96:	4603      	mov	r3, r0
 8006e98:	0e9b      	lsrs	r3, r3, #26
 8006e9a:	f003 021f 	and.w	r2, r3, #31
 8006e9e:	e01e      	b.n	8006ede <HAL_ADC_ConfigChannel+0x19a>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	2100      	movs	r1, #0
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f7ff faea 	bl	8006480 <LL_ADC_GetOffsetChannel>
 8006eac:	4603      	mov	r3, r0
 8006eae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006eb2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006eb6:	fa93 f3a3 	rbit	r3, r3
 8006eba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006ebe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006ec2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006ec6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d101      	bne.n	8006ed2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8006ece:	2320      	movs	r3, #32
 8006ed0:	e004      	b.n	8006edc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8006ed2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006ed6:	fab3 f383 	clz	r3, r3
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d105      	bne.n	8006ef6 <HAL_ADC_ConfigChannel+0x1b2>
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	0e9b      	lsrs	r3, r3, #26
 8006ef0:	f003 031f 	and.w	r3, r3, #31
 8006ef4:	e018      	b.n	8006f28 <HAL_ADC_ConfigChannel+0x1e4>
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006efe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006f02:	fa93 f3a3 	rbit	r3, r3
 8006f06:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8006f0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f0e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8006f12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d101      	bne.n	8006f1e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8006f1a:	2320      	movs	r3, #32
 8006f1c:	e004      	b.n	8006f28 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8006f1e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006f22:	fab3 f383 	clz	r3, r3
 8006f26:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d106      	bne.n	8006f3a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	2200      	movs	r2, #0
 8006f32:	2100      	movs	r1, #0
 8006f34:	4618      	mov	r0, r3
 8006f36:	f7ff fab9 	bl	80064ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	2101      	movs	r1, #1
 8006f40:	4618      	mov	r0, r3
 8006f42:	f7ff fa9d 	bl	8006480 <LL_ADC_GetOffsetChannel>
 8006f46:	4603      	mov	r3, r0
 8006f48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d10a      	bne.n	8006f66 <HAL_ADC_ConfigChannel+0x222>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2101      	movs	r1, #1
 8006f56:	4618      	mov	r0, r3
 8006f58:	f7ff fa92 	bl	8006480 <LL_ADC_GetOffsetChannel>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	0e9b      	lsrs	r3, r3, #26
 8006f60:	f003 021f 	and.w	r2, r3, #31
 8006f64:	e01e      	b.n	8006fa4 <HAL_ADC_ConfigChannel+0x260>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2101      	movs	r1, #1
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f7ff fa87 	bl	8006480 <LL_ADC_GetOffsetChannel>
 8006f72:	4603      	mov	r3, r0
 8006f74:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f78:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006f7c:	fa93 f3a3 	rbit	r3, r3
 8006f80:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8006f84:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006f88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8006f8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d101      	bne.n	8006f98 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8006f94:	2320      	movs	r3, #32
 8006f96:	e004      	b.n	8006fa2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8006f98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006f9c:	fab3 f383 	clz	r3, r3
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d105      	bne.n	8006fbc <HAL_ADC_ConfigChannel+0x278>
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	0e9b      	lsrs	r3, r3, #26
 8006fb6:	f003 031f 	and.w	r3, r3, #31
 8006fba:	e018      	b.n	8006fee <HAL_ADC_ConfigChannel+0x2aa>
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006fc8:	fa93 f3a3 	rbit	r3, r3
 8006fcc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8006fd0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006fd4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8006fd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d101      	bne.n	8006fe4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8006fe0:	2320      	movs	r3, #32
 8006fe2:	e004      	b.n	8006fee <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8006fe4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006fe8:	fab3 f383 	clz	r3, r3
 8006fec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d106      	bne.n	8007000 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	2101      	movs	r1, #1
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f7ff fa56 	bl	80064ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	2102      	movs	r1, #2
 8007006:	4618      	mov	r0, r3
 8007008:	f7ff fa3a 	bl	8006480 <LL_ADC_GetOffsetChannel>
 800700c:	4603      	mov	r3, r0
 800700e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007012:	2b00      	cmp	r3, #0
 8007014:	d10a      	bne.n	800702c <HAL_ADC_ConfigChannel+0x2e8>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	2102      	movs	r1, #2
 800701c:	4618      	mov	r0, r3
 800701e:	f7ff fa2f 	bl	8006480 <LL_ADC_GetOffsetChannel>
 8007022:	4603      	mov	r3, r0
 8007024:	0e9b      	lsrs	r3, r3, #26
 8007026:	f003 021f 	and.w	r2, r3, #31
 800702a:	e01e      	b.n	800706a <HAL_ADC_ConfigChannel+0x326>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	2102      	movs	r1, #2
 8007032:	4618      	mov	r0, r3
 8007034:	f7ff fa24 	bl	8006480 <LL_ADC_GetOffsetChannel>
 8007038:	4603      	mov	r3, r0
 800703a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800703e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007042:	fa93 f3a3 	rbit	r3, r3
 8007046:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800704a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800704e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8007052:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007056:	2b00      	cmp	r3, #0
 8007058:	d101      	bne.n	800705e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800705a:	2320      	movs	r3, #32
 800705c:	e004      	b.n	8007068 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800705e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007062:	fab3 f383 	clz	r3, r3
 8007066:	b2db      	uxtb	r3, r3
 8007068:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007072:	2b00      	cmp	r3, #0
 8007074:	d105      	bne.n	8007082 <HAL_ADC_ConfigChannel+0x33e>
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	0e9b      	lsrs	r3, r3, #26
 800707c:	f003 031f 	and.w	r3, r3, #31
 8007080:	e016      	b.n	80070b0 <HAL_ADC_ConfigChannel+0x36c>
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800708a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800708e:	fa93 f3a3 	rbit	r3, r3
 8007092:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8007094:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007096:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800709a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d101      	bne.n	80070a6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80070a2:	2320      	movs	r3, #32
 80070a4:	e004      	b.n	80070b0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80070a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80070aa:	fab3 f383 	clz	r3, r3
 80070ae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d106      	bne.n	80070c2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	2200      	movs	r2, #0
 80070ba:	2102      	movs	r1, #2
 80070bc:	4618      	mov	r0, r3
 80070be:	f7ff f9f5 	bl	80064ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	2103      	movs	r1, #3
 80070c8:	4618      	mov	r0, r3
 80070ca:	f7ff f9d9 	bl	8006480 <LL_ADC_GetOffsetChannel>
 80070ce:	4603      	mov	r3, r0
 80070d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d10a      	bne.n	80070ee <HAL_ADC_ConfigChannel+0x3aa>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	2103      	movs	r1, #3
 80070de:	4618      	mov	r0, r3
 80070e0:	f7ff f9ce 	bl	8006480 <LL_ADC_GetOffsetChannel>
 80070e4:	4603      	mov	r3, r0
 80070e6:	0e9b      	lsrs	r3, r3, #26
 80070e8:	f003 021f 	and.w	r2, r3, #31
 80070ec:	e017      	b.n	800711e <HAL_ADC_ConfigChannel+0x3da>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	2103      	movs	r1, #3
 80070f4:	4618      	mov	r0, r3
 80070f6:	f7ff f9c3 	bl	8006480 <LL_ADC_GetOffsetChannel>
 80070fa:	4603      	mov	r3, r0
 80070fc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007100:	fa93 f3a3 	rbit	r3, r3
 8007104:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8007106:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007108:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800710a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800710c:	2b00      	cmp	r3, #0
 800710e:	d101      	bne.n	8007114 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8007110:	2320      	movs	r3, #32
 8007112:	e003      	b.n	800711c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8007114:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007116:	fab3 f383 	clz	r3, r3
 800711a:	b2db      	uxtb	r3, r3
 800711c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007126:	2b00      	cmp	r3, #0
 8007128:	d105      	bne.n	8007136 <HAL_ADC_ConfigChannel+0x3f2>
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	0e9b      	lsrs	r3, r3, #26
 8007130:	f003 031f 	and.w	r3, r3, #31
 8007134:	e011      	b.n	800715a <HAL_ADC_ConfigChannel+0x416>
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800713c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800713e:	fa93 f3a3 	rbit	r3, r3
 8007142:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8007144:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007146:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8007148:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800714a:	2b00      	cmp	r3, #0
 800714c:	d101      	bne.n	8007152 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800714e:	2320      	movs	r3, #32
 8007150:	e003      	b.n	800715a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8007152:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007154:	fab3 f383 	clz	r3, r3
 8007158:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800715a:	429a      	cmp	r2, r3
 800715c:	d106      	bne.n	800716c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2200      	movs	r2, #0
 8007164:	2103      	movs	r1, #3
 8007166:	4618      	mov	r0, r3
 8007168:	f7ff f9a0 	bl	80064ac <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4618      	mov	r0, r3
 8007172:	f7ff faeb 	bl	800674c <LL_ADC_IsEnabled>
 8007176:	4603      	mov	r3, r0
 8007178:	2b00      	cmp	r3, #0
 800717a:	f040 813d 	bne.w	80073f8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6818      	ldr	r0, [r3, #0]
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	6819      	ldr	r1, [r3, #0]
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	461a      	mov	r2, r3
 800718c:	f7ff fa4a 	bl	8006624 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	68db      	ldr	r3, [r3, #12]
 8007194:	4aa2      	ldr	r2, [pc, #648]	@ (8007420 <HAL_ADC_ConfigChannel+0x6dc>)
 8007196:	4293      	cmp	r3, r2
 8007198:	f040 812e 	bne.w	80073f8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d10b      	bne.n	80071c4 <HAL_ADC_ConfigChannel+0x480>
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	0e9b      	lsrs	r3, r3, #26
 80071b2:	3301      	adds	r3, #1
 80071b4:	f003 031f 	and.w	r3, r3, #31
 80071b8:	2b09      	cmp	r3, #9
 80071ba:	bf94      	ite	ls
 80071bc:	2301      	movls	r3, #1
 80071be:	2300      	movhi	r3, #0
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	e019      	b.n	80071f8 <HAL_ADC_ConfigChannel+0x4b4>
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80071cc:	fa93 f3a3 	rbit	r3, r3
 80071d0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80071d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80071d4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80071d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d101      	bne.n	80071e0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80071dc:	2320      	movs	r3, #32
 80071de:	e003      	b.n	80071e8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80071e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80071e2:	fab3 f383 	clz	r3, r3
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	3301      	adds	r3, #1
 80071ea:	f003 031f 	and.w	r3, r3, #31
 80071ee:	2b09      	cmp	r3, #9
 80071f0:	bf94      	ite	ls
 80071f2:	2301      	movls	r3, #1
 80071f4:	2300      	movhi	r3, #0
 80071f6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d079      	beq.n	80072f0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007204:	2b00      	cmp	r3, #0
 8007206:	d107      	bne.n	8007218 <HAL_ADC_ConfigChannel+0x4d4>
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	0e9b      	lsrs	r3, r3, #26
 800720e:	3301      	adds	r3, #1
 8007210:	069b      	lsls	r3, r3, #26
 8007212:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007216:	e015      	b.n	8007244 <HAL_ADC_ConfigChannel+0x500>
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800721e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007220:	fa93 f3a3 	rbit	r3, r3
 8007224:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8007226:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007228:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800722a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800722c:	2b00      	cmp	r3, #0
 800722e:	d101      	bne.n	8007234 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8007230:	2320      	movs	r3, #32
 8007232:	e003      	b.n	800723c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8007234:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007236:	fab3 f383 	clz	r3, r3
 800723a:	b2db      	uxtb	r3, r3
 800723c:	3301      	adds	r3, #1
 800723e:	069b      	lsls	r3, r3, #26
 8007240:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800724c:	2b00      	cmp	r3, #0
 800724e:	d109      	bne.n	8007264 <HAL_ADC_ConfigChannel+0x520>
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	0e9b      	lsrs	r3, r3, #26
 8007256:	3301      	adds	r3, #1
 8007258:	f003 031f 	and.w	r3, r3, #31
 800725c:	2101      	movs	r1, #1
 800725e:	fa01 f303 	lsl.w	r3, r1, r3
 8007262:	e017      	b.n	8007294 <HAL_ADC_ConfigChannel+0x550>
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800726a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800726c:	fa93 f3a3 	rbit	r3, r3
 8007270:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8007272:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007274:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8007276:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007278:	2b00      	cmp	r3, #0
 800727a:	d101      	bne.n	8007280 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800727c:	2320      	movs	r3, #32
 800727e:	e003      	b.n	8007288 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8007280:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007282:	fab3 f383 	clz	r3, r3
 8007286:	b2db      	uxtb	r3, r3
 8007288:	3301      	adds	r3, #1
 800728a:	f003 031f 	and.w	r3, r3, #31
 800728e:	2101      	movs	r1, #1
 8007290:	fa01 f303 	lsl.w	r3, r1, r3
 8007294:	ea42 0103 	orr.w	r1, r2, r3
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d10a      	bne.n	80072ba <HAL_ADC_ConfigChannel+0x576>
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	0e9b      	lsrs	r3, r3, #26
 80072aa:	3301      	adds	r3, #1
 80072ac:	f003 021f 	and.w	r2, r3, #31
 80072b0:	4613      	mov	r3, r2
 80072b2:	005b      	lsls	r3, r3, #1
 80072b4:	4413      	add	r3, r2
 80072b6:	051b      	lsls	r3, r3, #20
 80072b8:	e018      	b.n	80072ec <HAL_ADC_ConfigChannel+0x5a8>
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072c2:	fa93 f3a3 	rbit	r3, r3
 80072c6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80072c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80072cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d101      	bne.n	80072d6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80072d2:	2320      	movs	r3, #32
 80072d4:	e003      	b.n	80072de <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80072d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072d8:	fab3 f383 	clz	r3, r3
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	3301      	adds	r3, #1
 80072e0:	f003 021f 	and.w	r2, r3, #31
 80072e4:	4613      	mov	r3, r2
 80072e6:	005b      	lsls	r3, r3, #1
 80072e8:	4413      	add	r3, r2
 80072ea:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80072ec:	430b      	orrs	r3, r1
 80072ee:	e07e      	b.n	80073ee <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d107      	bne.n	800730c <HAL_ADC_ConfigChannel+0x5c8>
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	0e9b      	lsrs	r3, r3, #26
 8007302:	3301      	adds	r3, #1
 8007304:	069b      	lsls	r3, r3, #26
 8007306:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800730a:	e015      	b.n	8007338 <HAL_ADC_ConfigChannel+0x5f4>
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007314:	fa93 f3a3 	rbit	r3, r3
 8007318:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800731a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800731c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800731e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007320:	2b00      	cmp	r3, #0
 8007322:	d101      	bne.n	8007328 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8007324:	2320      	movs	r3, #32
 8007326:	e003      	b.n	8007330 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8007328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800732a:	fab3 f383 	clz	r3, r3
 800732e:	b2db      	uxtb	r3, r3
 8007330:	3301      	adds	r3, #1
 8007332:	069b      	lsls	r3, r3, #26
 8007334:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007340:	2b00      	cmp	r3, #0
 8007342:	d109      	bne.n	8007358 <HAL_ADC_ConfigChannel+0x614>
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	0e9b      	lsrs	r3, r3, #26
 800734a:	3301      	adds	r3, #1
 800734c:	f003 031f 	and.w	r3, r3, #31
 8007350:	2101      	movs	r1, #1
 8007352:	fa01 f303 	lsl.w	r3, r1, r3
 8007356:	e017      	b.n	8007388 <HAL_ADC_ConfigChannel+0x644>
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800735e:	6a3b      	ldr	r3, [r7, #32]
 8007360:	fa93 f3a3 	rbit	r3, r3
 8007364:	61fb      	str	r3, [r7, #28]
  return result;
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800736a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800736c:	2b00      	cmp	r3, #0
 800736e:	d101      	bne.n	8007374 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8007370:	2320      	movs	r3, #32
 8007372:	e003      	b.n	800737c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8007374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007376:	fab3 f383 	clz	r3, r3
 800737a:	b2db      	uxtb	r3, r3
 800737c:	3301      	adds	r3, #1
 800737e:	f003 031f 	and.w	r3, r3, #31
 8007382:	2101      	movs	r1, #1
 8007384:	fa01 f303 	lsl.w	r3, r1, r3
 8007388:	ea42 0103 	orr.w	r1, r2, r3
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007394:	2b00      	cmp	r3, #0
 8007396:	d10d      	bne.n	80073b4 <HAL_ADC_ConfigChannel+0x670>
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	0e9b      	lsrs	r3, r3, #26
 800739e:	3301      	adds	r3, #1
 80073a0:	f003 021f 	and.w	r2, r3, #31
 80073a4:	4613      	mov	r3, r2
 80073a6:	005b      	lsls	r3, r3, #1
 80073a8:	4413      	add	r3, r2
 80073aa:	3b1e      	subs	r3, #30
 80073ac:	051b      	lsls	r3, r3, #20
 80073ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80073b2:	e01b      	b.n	80073ec <HAL_ADC_ConfigChannel+0x6a8>
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	fa93 f3a3 	rbit	r3, r3
 80073c0:	613b      	str	r3, [r7, #16]
  return result;
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80073c6:	69bb      	ldr	r3, [r7, #24]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d101      	bne.n	80073d0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80073cc:	2320      	movs	r3, #32
 80073ce:	e003      	b.n	80073d8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80073d0:	69bb      	ldr	r3, [r7, #24]
 80073d2:	fab3 f383 	clz	r3, r3
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	3301      	adds	r3, #1
 80073da:	f003 021f 	and.w	r2, r3, #31
 80073de:	4613      	mov	r3, r2
 80073e0:	005b      	lsls	r3, r3, #1
 80073e2:	4413      	add	r3, r2
 80073e4:	3b1e      	subs	r3, #30
 80073e6:	051b      	lsls	r3, r3, #20
 80073e8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80073ec:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80073ee:	683a      	ldr	r2, [r7, #0]
 80073f0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80073f2:	4619      	mov	r1, r3
 80073f4:	f7ff f8ea 	bl	80065cc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	4b09      	ldr	r3, [pc, #36]	@ (8007424 <HAL_ADC_ConfigChannel+0x6e0>)
 80073fe:	4013      	ands	r3, r2
 8007400:	2b00      	cmp	r3, #0
 8007402:	f000 80be 	beq.w	8007582 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800740e:	d004      	beq.n	800741a <HAL_ADC_ConfigChannel+0x6d6>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a04      	ldr	r2, [pc, #16]	@ (8007428 <HAL_ADC_ConfigChannel+0x6e4>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d10a      	bne.n	8007430 <HAL_ADC_ConfigChannel+0x6ec>
 800741a:	4b04      	ldr	r3, [pc, #16]	@ (800742c <HAL_ADC_ConfigChannel+0x6e8>)
 800741c:	e009      	b.n	8007432 <HAL_ADC_ConfigChannel+0x6ee>
 800741e:	bf00      	nop
 8007420:	407f0000 	.word	0x407f0000
 8007424:	80080000 	.word	0x80080000
 8007428:	50000100 	.word	0x50000100
 800742c:	50000300 	.word	0x50000300
 8007430:	4b59      	ldr	r3, [pc, #356]	@ (8007598 <HAL_ADC_ConfigChannel+0x854>)
 8007432:	4618      	mov	r0, r3
 8007434:	f7fe fff2 	bl	800641c <LL_ADC_GetCommonPathInternalCh>
 8007438:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a56      	ldr	r2, [pc, #344]	@ (800759c <HAL_ADC_ConfigChannel+0x858>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d004      	beq.n	8007450 <HAL_ADC_ConfigChannel+0x70c>
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a55      	ldr	r2, [pc, #340]	@ (80075a0 <HAL_ADC_ConfigChannel+0x85c>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d13a      	bne.n	80074c6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007450:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007454:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007458:	2b00      	cmp	r3, #0
 800745a:	d134      	bne.n	80074c6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007464:	d005      	beq.n	8007472 <HAL_ADC_ConfigChannel+0x72e>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a4e      	ldr	r2, [pc, #312]	@ (80075a4 <HAL_ADC_ConfigChannel+0x860>)
 800746c:	4293      	cmp	r3, r2
 800746e:	f040 8085 	bne.w	800757c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800747a:	d004      	beq.n	8007486 <HAL_ADC_ConfigChannel+0x742>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a49      	ldr	r2, [pc, #292]	@ (80075a8 <HAL_ADC_ConfigChannel+0x864>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d101      	bne.n	800748a <HAL_ADC_ConfigChannel+0x746>
 8007486:	4a49      	ldr	r2, [pc, #292]	@ (80075ac <HAL_ADC_ConfigChannel+0x868>)
 8007488:	e000      	b.n	800748c <HAL_ADC_ConfigChannel+0x748>
 800748a:	4a43      	ldr	r2, [pc, #268]	@ (8007598 <HAL_ADC_ConfigChannel+0x854>)
 800748c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007490:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007494:	4619      	mov	r1, r3
 8007496:	4610      	mov	r0, r2
 8007498:	f7fe ffad 	bl	80063f6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800749c:	4b44      	ldr	r3, [pc, #272]	@ (80075b0 <HAL_ADC_ConfigChannel+0x86c>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	099b      	lsrs	r3, r3, #6
 80074a2:	4a44      	ldr	r2, [pc, #272]	@ (80075b4 <HAL_ADC_ConfigChannel+0x870>)
 80074a4:	fba2 2303 	umull	r2, r3, r2, r3
 80074a8:	099b      	lsrs	r3, r3, #6
 80074aa:	1c5a      	adds	r2, r3, #1
 80074ac:	4613      	mov	r3, r2
 80074ae:	005b      	lsls	r3, r3, #1
 80074b0:	4413      	add	r3, r2
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80074b6:	e002      	b.n	80074be <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	3b01      	subs	r3, #1
 80074bc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d1f9      	bne.n	80074b8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80074c4:	e05a      	b.n	800757c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a3b      	ldr	r2, [pc, #236]	@ (80075b8 <HAL_ADC_ConfigChannel+0x874>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d125      	bne.n	800751c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80074d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80074d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d11f      	bne.n	800751c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a31      	ldr	r2, [pc, #196]	@ (80075a8 <HAL_ADC_ConfigChannel+0x864>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d104      	bne.n	80074f0 <HAL_ADC_ConfigChannel+0x7ac>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a34      	ldr	r2, [pc, #208]	@ (80075bc <HAL_ADC_ConfigChannel+0x878>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d047      	beq.n	8007580 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80074f8:	d004      	beq.n	8007504 <HAL_ADC_ConfigChannel+0x7c0>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a2a      	ldr	r2, [pc, #168]	@ (80075a8 <HAL_ADC_ConfigChannel+0x864>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d101      	bne.n	8007508 <HAL_ADC_ConfigChannel+0x7c4>
 8007504:	4a29      	ldr	r2, [pc, #164]	@ (80075ac <HAL_ADC_ConfigChannel+0x868>)
 8007506:	e000      	b.n	800750a <HAL_ADC_ConfigChannel+0x7c6>
 8007508:	4a23      	ldr	r2, [pc, #140]	@ (8007598 <HAL_ADC_ConfigChannel+0x854>)
 800750a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800750e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007512:	4619      	mov	r1, r3
 8007514:	4610      	mov	r0, r2
 8007516:	f7fe ff6e 	bl	80063f6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800751a:	e031      	b.n	8007580 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a27      	ldr	r2, [pc, #156]	@ (80075c0 <HAL_ADC_ConfigChannel+0x87c>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d12d      	bne.n	8007582 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007526:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800752a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800752e:	2b00      	cmp	r3, #0
 8007530:	d127      	bne.n	8007582 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a1c      	ldr	r2, [pc, #112]	@ (80075a8 <HAL_ADC_ConfigChannel+0x864>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d022      	beq.n	8007582 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007544:	d004      	beq.n	8007550 <HAL_ADC_ConfigChannel+0x80c>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a17      	ldr	r2, [pc, #92]	@ (80075a8 <HAL_ADC_ConfigChannel+0x864>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d101      	bne.n	8007554 <HAL_ADC_ConfigChannel+0x810>
 8007550:	4a16      	ldr	r2, [pc, #88]	@ (80075ac <HAL_ADC_ConfigChannel+0x868>)
 8007552:	e000      	b.n	8007556 <HAL_ADC_ConfigChannel+0x812>
 8007554:	4a10      	ldr	r2, [pc, #64]	@ (8007598 <HAL_ADC_ConfigChannel+0x854>)
 8007556:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800755a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800755e:	4619      	mov	r1, r3
 8007560:	4610      	mov	r0, r2
 8007562:	f7fe ff48 	bl	80063f6 <LL_ADC_SetCommonPathInternalCh>
 8007566:	e00c      	b.n	8007582 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800756c:	f043 0220 	orr.w	r2, r3, #32
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8007574:	2301      	movs	r3, #1
 8007576:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800757a:	e002      	b.n	8007582 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800757c:	bf00      	nop
 800757e:	e000      	b.n	8007582 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007580:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800758a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800758e:	4618      	mov	r0, r3
 8007590:	37d8      	adds	r7, #216	@ 0xd8
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop
 8007598:	50000700 	.word	0x50000700
 800759c:	c3210000 	.word	0xc3210000
 80075a0:	90c00010 	.word	0x90c00010
 80075a4:	50000600 	.word	0x50000600
 80075a8:	50000100 	.word	0x50000100
 80075ac:	50000300 	.word	0x50000300
 80075b0:	20000264 	.word	0x20000264
 80075b4:	053e2d63 	.word	0x053e2d63
 80075b8:	c7520000 	.word	0xc7520000
 80075bc:	50000500 	.word	0x50000500
 80075c0:	cb840000 	.word	0xcb840000

080075c4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80075cc:	2300      	movs	r3, #0
 80075ce:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4618      	mov	r0, r3
 80075d6:	f7ff f8b9 	bl	800674c <LL_ADC_IsEnabled>
 80075da:	4603      	mov	r3, r0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d176      	bne.n	80076ce <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	689a      	ldr	r2, [r3, #8]
 80075e6:	4b3c      	ldr	r3, [pc, #240]	@ (80076d8 <ADC_Enable+0x114>)
 80075e8:	4013      	ands	r3, r2
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d00d      	beq.n	800760a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075f2:	f043 0210 	orr.w	r2, r3, #16
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075fe:	f043 0201 	orr.w	r2, r3, #1
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	e062      	b.n	80076d0 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4618      	mov	r0, r3
 8007610:	f7ff f888 	bl	8006724 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800761c:	d004      	beq.n	8007628 <ADC_Enable+0x64>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a2e      	ldr	r2, [pc, #184]	@ (80076dc <ADC_Enable+0x118>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d101      	bne.n	800762c <ADC_Enable+0x68>
 8007628:	4b2d      	ldr	r3, [pc, #180]	@ (80076e0 <ADC_Enable+0x11c>)
 800762a:	e000      	b.n	800762e <ADC_Enable+0x6a>
 800762c:	4b2d      	ldr	r3, [pc, #180]	@ (80076e4 <ADC_Enable+0x120>)
 800762e:	4618      	mov	r0, r3
 8007630:	f7fe fef4 	bl	800641c <LL_ADC_GetCommonPathInternalCh>
 8007634:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8007636:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800763a:	2b00      	cmp	r3, #0
 800763c:	d013      	beq.n	8007666 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800763e:	4b2a      	ldr	r3, [pc, #168]	@ (80076e8 <ADC_Enable+0x124>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	099b      	lsrs	r3, r3, #6
 8007644:	4a29      	ldr	r2, [pc, #164]	@ (80076ec <ADC_Enable+0x128>)
 8007646:	fba2 2303 	umull	r2, r3, r2, r3
 800764a:	099b      	lsrs	r3, r3, #6
 800764c:	1c5a      	adds	r2, r3, #1
 800764e:	4613      	mov	r3, r2
 8007650:	005b      	lsls	r3, r3, #1
 8007652:	4413      	add	r3, r2
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8007658:	e002      	b.n	8007660 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	3b01      	subs	r3, #1
 800765e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d1f9      	bne.n	800765a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8007666:	f7fe fea7 	bl	80063b8 <HAL_GetTick>
 800766a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800766c:	e028      	b.n	80076c0 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4618      	mov	r0, r3
 8007674:	f7ff f86a 	bl	800674c <LL_ADC_IsEnabled>
 8007678:	4603      	mov	r3, r0
 800767a:	2b00      	cmp	r3, #0
 800767c:	d104      	bne.n	8007688 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4618      	mov	r0, r3
 8007684:	f7ff f84e 	bl	8006724 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007688:	f7fe fe96 	bl	80063b8 <HAL_GetTick>
 800768c:	4602      	mov	r2, r0
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	1ad3      	subs	r3, r2, r3
 8007692:	2b02      	cmp	r3, #2
 8007694:	d914      	bls.n	80076c0 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f003 0301 	and.w	r3, r3, #1
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d00d      	beq.n	80076c0 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076a8:	f043 0210 	orr.w	r2, r3, #16
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80076b4:	f043 0201 	orr.w	r2, r3, #1
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80076bc:	2301      	movs	r3, #1
 80076be:	e007      	b.n	80076d0 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f003 0301 	and.w	r3, r3, #1
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d1cf      	bne.n	800766e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80076ce:	2300      	movs	r3, #0
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3710      	adds	r7, #16
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	8000003f 	.word	0x8000003f
 80076dc:	50000100 	.word	0x50000100
 80076e0:	50000300 	.word	0x50000300
 80076e4:	50000700 	.word	0x50000700
 80076e8:	20000264 	.word	0x20000264
 80076ec:	053e2d63 	.word	0x053e2d63

080076f0 <LL_ADC_IsEnabled>:
{
 80076f0:	b480      	push	{r7}
 80076f2:	b083      	sub	sp, #12
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	f003 0301 	and.w	r3, r3, #1
 8007700:	2b01      	cmp	r3, #1
 8007702:	d101      	bne.n	8007708 <LL_ADC_IsEnabled+0x18>
 8007704:	2301      	movs	r3, #1
 8007706:	e000      	b.n	800770a <LL_ADC_IsEnabled+0x1a>
 8007708:	2300      	movs	r3, #0
}
 800770a:	4618      	mov	r0, r3
 800770c:	370c      	adds	r7, #12
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr

08007716 <LL_ADC_REG_IsConversionOngoing>:
{
 8007716:	b480      	push	{r7}
 8007718:	b083      	sub	sp, #12
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	f003 0304 	and.w	r3, r3, #4
 8007726:	2b04      	cmp	r3, #4
 8007728:	d101      	bne.n	800772e <LL_ADC_REG_IsConversionOngoing+0x18>
 800772a:	2301      	movs	r3, #1
 800772c:	e000      	b.n	8007730 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800772e:	2300      	movs	r3, #0
}
 8007730:	4618      	mov	r0, r3
 8007732:	370c      	adds	r7, #12
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr

0800773c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800773c:	b590      	push	{r4, r7, lr}
 800773e:	b0a1      	sub	sp, #132	@ 0x84
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007746:	2300      	movs	r3, #0
 8007748:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8007752:	2b01      	cmp	r3, #1
 8007754:	d101      	bne.n	800775a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8007756:	2302      	movs	r3, #2
 8007758:	e0e7      	b.n	800792a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2201      	movs	r2, #1
 800775e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8007762:	2300      	movs	r3, #0
 8007764:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8007766:	2300      	movs	r3, #0
 8007768:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007772:	d102      	bne.n	800777a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8007774:	4b6f      	ldr	r3, [pc, #444]	@ (8007934 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007776:	60bb      	str	r3, [r7, #8]
 8007778:	e009      	b.n	800778e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a6e      	ldr	r2, [pc, #440]	@ (8007938 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d102      	bne.n	800778a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8007784:	4b6d      	ldr	r3, [pc, #436]	@ (800793c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8007786:	60bb      	str	r3, [r7, #8]
 8007788:	e001      	b.n	800778e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800778a:	2300      	movs	r3, #0
 800778c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d10b      	bne.n	80077ac <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007798:	f043 0220 	orr.w	r2, r3, #32
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2200      	movs	r2, #0
 80077a4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80077a8:	2301      	movs	r3, #1
 80077aa:	e0be      	b.n	800792a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	4618      	mov	r0, r3
 80077b0:	f7ff ffb1 	bl	8007716 <LL_ADC_REG_IsConversionOngoing>
 80077b4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7ff ffab 	bl	8007716 <LL_ADC_REG_IsConversionOngoing>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	f040 80a0 	bne.w	8007908 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80077c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	f040 809c 	bne.w	8007908 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80077d8:	d004      	beq.n	80077e4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a55      	ldr	r2, [pc, #340]	@ (8007934 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d101      	bne.n	80077e8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80077e4:	4b56      	ldr	r3, [pc, #344]	@ (8007940 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80077e6:	e000      	b.n	80077ea <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80077e8:	4b56      	ldr	r3, [pc, #344]	@ (8007944 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80077ea:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d04b      	beq.n	800788c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80077f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	6859      	ldr	r1, [r3, #4]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007806:	035b      	lsls	r3, r3, #13
 8007808:	430b      	orrs	r3, r1
 800780a:	431a      	orrs	r2, r3
 800780c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800780e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007818:	d004      	beq.n	8007824 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a45      	ldr	r2, [pc, #276]	@ (8007934 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d10f      	bne.n	8007844 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8007824:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8007828:	f7ff ff62 	bl	80076f0 <LL_ADC_IsEnabled>
 800782c:	4604      	mov	r4, r0
 800782e:	4841      	ldr	r0, [pc, #260]	@ (8007934 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007830:	f7ff ff5e 	bl	80076f0 <LL_ADC_IsEnabled>
 8007834:	4603      	mov	r3, r0
 8007836:	4323      	orrs	r3, r4
 8007838:	2b00      	cmp	r3, #0
 800783a:	bf0c      	ite	eq
 800783c:	2301      	moveq	r3, #1
 800783e:	2300      	movne	r3, #0
 8007840:	b2db      	uxtb	r3, r3
 8007842:	e012      	b.n	800786a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8007844:	483c      	ldr	r0, [pc, #240]	@ (8007938 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8007846:	f7ff ff53 	bl	80076f0 <LL_ADC_IsEnabled>
 800784a:	4604      	mov	r4, r0
 800784c:	483b      	ldr	r0, [pc, #236]	@ (800793c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800784e:	f7ff ff4f 	bl	80076f0 <LL_ADC_IsEnabled>
 8007852:	4603      	mov	r3, r0
 8007854:	431c      	orrs	r4, r3
 8007856:	483c      	ldr	r0, [pc, #240]	@ (8007948 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8007858:	f7ff ff4a 	bl	80076f0 <LL_ADC_IsEnabled>
 800785c:	4603      	mov	r3, r0
 800785e:	4323      	orrs	r3, r4
 8007860:	2b00      	cmp	r3, #0
 8007862:	bf0c      	ite	eq
 8007864:	2301      	moveq	r3, #1
 8007866:	2300      	movne	r3, #0
 8007868:	b2db      	uxtb	r3, r3
 800786a:	2b00      	cmp	r3, #0
 800786c:	d056      	beq.n	800791c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800786e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8007876:	f023 030f 	bic.w	r3, r3, #15
 800787a:	683a      	ldr	r2, [r7, #0]
 800787c:	6811      	ldr	r1, [r2, #0]
 800787e:	683a      	ldr	r2, [r7, #0]
 8007880:	6892      	ldr	r2, [r2, #8]
 8007882:	430a      	orrs	r2, r1
 8007884:	431a      	orrs	r2, r3
 8007886:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007888:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800788a:	e047      	b.n	800791c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800788c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007894:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007896:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80078a0:	d004      	beq.n	80078ac <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a23      	ldr	r2, [pc, #140]	@ (8007934 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d10f      	bne.n	80078cc <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80078ac:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80078b0:	f7ff ff1e 	bl	80076f0 <LL_ADC_IsEnabled>
 80078b4:	4604      	mov	r4, r0
 80078b6:	481f      	ldr	r0, [pc, #124]	@ (8007934 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80078b8:	f7ff ff1a 	bl	80076f0 <LL_ADC_IsEnabled>
 80078bc:	4603      	mov	r3, r0
 80078be:	4323      	orrs	r3, r4
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	bf0c      	ite	eq
 80078c4:	2301      	moveq	r3, #1
 80078c6:	2300      	movne	r3, #0
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	e012      	b.n	80078f2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80078cc:	481a      	ldr	r0, [pc, #104]	@ (8007938 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80078ce:	f7ff ff0f 	bl	80076f0 <LL_ADC_IsEnabled>
 80078d2:	4604      	mov	r4, r0
 80078d4:	4819      	ldr	r0, [pc, #100]	@ (800793c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80078d6:	f7ff ff0b 	bl	80076f0 <LL_ADC_IsEnabled>
 80078da:	4603      	mov	r3, r0
 80078dc:	431c      	orrs	r4, r3
 80078de:	481a      	ldr	r0, [pc, #104]	@ (8007948 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80078e0:	f7ff ff06 	bl	80076f0 <LL_ADC_IsEnabled>
 80078e4:	4603      	mov	r3, r0
 80078e6:	4323      	orrs	r3, r4
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	bf0c      	ite	eq
 80078ec:	2301      	moveq	r3, #1
 80078ee:	2300      	movne	r3, #0
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d012      	beq.n	800791c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80078f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80078fe:	f023 030f 	bic.w	r3, r3, #15
 8007902:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007904:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007906:	e009      	b.n	800791c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800790c:	f043 0220 	orr.w	r2, r3, #32
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800791a:	e000      	b.n	800791e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800791c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8007926:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800792a:	4618      	mov	r0, r3
 800792c:	3784      	adds	r7, #132	@ 0x84
 800792e:	46bd      	mov	sp, r7
 8007930:	bd90      	pop	{r4, r7, pc}
 8007932:	bf00      	nop
 8007934:	50000100 	.word	0x50000100
 8007938:	50000400 	.word	0x50000400
 800793c:	50000500 	.word	0x50000500
 8007940:	50000300 	.word	0x50000300
 8007944:	50000700 	.word	0x50000700
 8007948:	50000600 	.word	0x50000600

0800794c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800794c:	b480      	push	{r7}
 800794e:	b085      	sub	sp, #20
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f003 0307 	and.w	r3, r3, #7
 800795a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800795c:	4b0c      	ldr	r3, [pc, #48]	@ (8007990 <__NVIC_SetPriorityGrouping+0x44>)
 800795e:	68db      	ldr	r3, [r3, #12]
 8007960:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007962:	68ba      	ldr	r2, [r7, #8]
 8007964:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007968:	4013      	ands	r3, r2
 800796a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007974:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007978:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800797c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800797e:	4a04      	ldr	r2, [pc, #16]	@ (8007990 <__NVIC_SetPriorityGrouping+0x44>)
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	60d3      	str	r3, [r2, #12]
}
 8007984:	bf00      	nop
 8007986:	3714      	adds	r7, #20
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr
 8007990:	e000ed00 	.word	0xe000ed00

08007994 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007994:	b480      	push	{r7}
 8007996:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007998:	4b04      	ldr	r3, [pc, #16]	@ (80079ac <__NVIC_GetPriorityGrouping+0x18>)
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	0a1b      	lsrs	r3, r3, #8
 800799e:	f003 0307 	and.w	r3, r3, #7
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr
 80079ac:	e000ed00 	.word	0xe000ed00

080079b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b083      	sub	sp, #12
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	4603      	mov	r3, r0
 80079b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80079ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	db0b      	blt.n	80079da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80079c2:	79fb      	ldrb	r3, [r7, #7]
 80079c4:	f003 021f 	and.w	r2, r3, #31
 80079c8:	4907      	ldr	r1, [pc, #28]	@ (80079e8 <__NVIC_EnableIRQ+0x38>)
 80079ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079ce:	095b      	lsrs	r3, r3, #5
 80079d0:	2001      	movs	r0, #1
 80079d2:	fa00 f202 	lsl.w	r2, r0, r2
 80079d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80079da:	bf00      	nop
 80079dc:	370c      	adds	r7, #12
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr
 80079e6:	bf00      	nop
 80079e8:	e000e100 	.word	0xe000e100

080079ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b083      	sub	sp, #12
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	4603      	mov	r3, r0
 80079f4:	6039      	str	r1, [r7, #0]
 80079f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80079f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	db0a      	blt.n	8007a16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	b2da      	uxtb	r2, r3
 8007a04:	490c      	ldr	r1, [pc, #48]	@ (8007a38 <__NVIC_SetPriority+0x4c>)
 8007a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a0a:	0112      	lsls	r2, r2, #4
 8007a0c:	b2d2      	uxtb	r2, r2
 8007a0e:	440b      	add	r3, r1
 8007a10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007a14:	e00a      	b.n	8007a2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	b2da      	uxtb	r2, r3
 8007a1a:	4908      	ldr	r1, [pc, #32]	@ (8007a3c <__NVIC_SetPriority+0x50>)
 8007a1c:	79fb      	ldrb	r3, [r7, #7]
 8007a1e:	f003 030f 	and.w	r3, r3, #15
 8007a22:	3b04      	subs	r3, #4
 8007a24:	0112      	lsls	r2, r2, #4
 8007a26:	b2d2      	uxtb	r2, r2
 8007a28:	440b      	add	r3, r1
 8007a2a:	761a      	strb	r2, [r3, #24]
}
 8007a2c:	bf00      	nop
 8007a2e:	370c      	adds	r7, #12
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr
 8007a38:	e000e100 	.word	0xe000e100
 8007a3c:	e000ed00 	.word	0xe000ed00

08007a40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b089      	sub	sp, #36	@ 0x24
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	60b9      	str	r1, [r7, #8]
 8007a4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f003 0307 	and.w	r3, r3, #7
 8007a52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007a54:	69fb      	ldr	r3, [r7, #28]
 8007a56:	f1c3 0307 	rsb	r3, r3, #7
 8007a5a:	2b04      	cmp	r3, #4
 8007a5c:	bf28      	it	cs
 8007a5e:	2304      	movcs	r3, #4
 8007a60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007a62:	69fb      	ldr	r3, [r7, #28]
 8007a64:	3304      	adds	r3, #4
 8007a66:	2b06      	cmp	r3, #6
 8007a68:	d902      	bls.n	8007a70 <NVIC_EncodePriority+0x30>
 8007a6a:	69fb      	ldr	r3, [r7, #28]
 8007a6c:	3b03      	subs	r3, #3
 8007a6e:	e000      	b.n	8007a72 <NVIC_EncodePriority+0x32>
 8007a70:	2300      	movs	r3, #0
 8007a72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a74:	f04f 32ff 	mov.w	r2, #4294967295
 8007a78:	69bb      	ldr	r3, [r7, #24]
 8007a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a7e:	43da      	mvns	r2, r3
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	401a      	ands	r2, r3
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007a88:	f04f 31ff 	mov.w	r1, #4294967295
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8007a92:	43d9      	mvns	r1, r3
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a98:	4313      	orrs	r3, r2
         );
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3724      	adds	r7, #36	@ 0x24
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr
	...

08007aa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	3b01      	subs	r3, #1
 8007ab4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007ab8:	d301      	bcc.n	8007abe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007aba:	2301      	movs	r3, #1
 8007abc:	e00f      	b.n	8007ade <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007abe:	4a0a      	ldr	r2, [pc, #40]	@ (8007ae8 <SysTick_Config+0x40>)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	3b01      	subs	r3, #1
 8007ac4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007ac6:	210f      	movs	r1, #15
 8007ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8007acc:	f7ff ff8e 	bl	80079ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007ad0:	4b05      	ldr	r3, [pc, #20]	@ (8007ae8 <SysTick_Config+0x40>)
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007ad6:	4b04      	ldr	r3, [pc, #16]	@ (8007ae8 <SysTick_Config+0x40>)
 8007ad8:	2207      	movs	r2, #7
 8007ada:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007adc:	2300      	movs	r3, #0
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3708      	adds	r7, #8
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	e000e010 	.word	0xe000e010

08007aec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f7ff ff29 	bl	800794c <__NVIC_SetPriorityGrouping>
}
 8007afa:	bf00      	nop
 8007afc:	3708      	adds	r7, #8
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}

08007b02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007b02:	b580      	push	{r7, lr}
 8007b04:	b086      	sub	sp, #24
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	4603      	mov	r3, r0
 8007b0a:	60b9      	str	r1, [r7, #8]
 8007b0c:	607a      	str	r2, [r7, #4]
 8007b0e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007b10:	f7ff ff40 	bl	8007994 <__NVIC_GetPriorityGrouping>
 8007b14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	68b9      	ldr	r1, [r7, #8]
 8007b1a:	6978      	ldr	r0, [r7, #20]
 8007b1c:	f7ff ff90 	bl	8007a40 <NVIC_EncodePriority>
 8007b20:	4602      	mov	r2, r0
 8007b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b26:	4611      	mov	r1, r2
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f7ff ff5f 	bl	80079ec <__NVIC_SetPriority>
}
 8007b2e:	bf00      	nop
 8007b30:	3718      	adds	r7, #24
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}

08007b36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007b36:	b580      	push	{r7, lr}
 8007b38:	b082      	sub	sp, #8
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b44:	4618      	mov	r0, r3
 8007b46:	f7ff ff33 	bl	80079b0 <__NVIC_EnableIRQ>
}
 8007b4a:	bf00      	nop
 8007b4c:	3708      	adds	r7, #8
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}

08007b52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007b52:	b580      	push	{r7, lr}
 8007b54:	b082      	sub	sp, #8
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f7ff ffa4 	bl	8007aa8 <SysTick_Config>
 8007b60:	4603      	mov	r3, r0
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3708      	adds	r7, #8
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}
	...

08007b6c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d101      	bne.n	8007b7e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	e08d      	b.n	8007c9a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	461a      	mov	r2, r3
 8007b84:	4b47      	ldr	r3, [pc, #284]	@ (8007ca4 <HAL_DMA_Init+0x138>)
 8007b86:	429a      	cmp	r2, r3
 8007b88:	d80f      	bhi.n	8007baa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	461a      	mov	r2, r3
 8007b90:	4b45      	ldr	r3, [pc, #276]	@ (8007ca8 <HAL_DMA_Init+0x13c>)
 8007b92:	4413      	add	r3, r2
 8007b94:	4a45      	ldr	r2, [pc, #276]	@ (8007cac <HAL_DMA_Init+0x140>)
 8007b96:	fba2 2303 	umull	r2, r3, r2, r3
 8007b9a:	091b      	lsrs	r3, r3, #4
 8007b9c:	009a      	lsls	r2, r3, #2
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	4a42      	ldr	r2, [pc, #264]	@ (8007cb0 <HAL_DMA_Init+0x144>)
 8007ba6:	641a      	str	r2, [r3, #64]	@ 0x40
 8007ba8:	e00e      	b.n	8007bc8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	461a      	mov	r2, r3
 8007bb0:	4b40      	ldr	r3, [pc, #256]	@ (8007cb4 <HAL_DMA_Init+0x148>)
 8007bb2:	4413      	add	r3, r2
 8007bb4:	4a3d      	ldr	r2, [pc, #244]	@ (8007cac <HAL_DMA_Init+0x140>)
 8007bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8007bba:	091b      	lsrs	r3, r3, #4
 8007bbc:	009a      	lsls	r2, r3, #2
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	4a3c      	ldr	r2, [pc, #240]	@ (8007cb8 <HAL_DMA_Init+0x14c>)
 8007bc6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2202      	movs	r2, #2
 8007bcc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8007bde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007be2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007bec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	691b      	ldr	r3, [r3, #16]
 8007bf2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007bf8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	699b      	ldr	r3, [r3, #24]
 8007bfe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007c04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6a1b      	ldr	r3, [r3, #32]
 8007c0a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007c0c:	68fa      	ldr	r2, [r7, #12]
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	68fa      	ldr	r2, [r7, #12]
 8007c18:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 fa82 	bl	8008124 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007c28:	d102      	bne.n	8007c30 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	685a      	ldr	r2, [r3, #4]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c38:	b2d2      	uxtb	r2, r2
 8007c3a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007c44:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d010      	beq.n	8007c70 <HAL_DMA_Init+0x104>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	2b04      	cmp	r3, #4
 8007c54:	d80c      	bhi.n	8007c70 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 faa2 	bl	80081a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c60:	2200      	movs	r2, #0
 8007c62:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007c6c:	605a      	str	r2, [r3, #4]
 8007c6e:	e008      	b.n	8007c82 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2200      	movs	r2, #0
 8007c94:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007c98:	2300      	movs	r3, #0
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3710      	adds	r7, #16
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	40020407 	.word	0x40020407
 8007ca8:	bffdfff8 	.word	0xbffdfff8
 8007cac:	cccccccd 	.word	0xcccccccd
 8007cb0:	40020000 	.word	0x40020000
 8007cb4:	bffdfbf8 	.word	0xbffdfbf8
 8007cb8:	40020400 	.word	0x40020400

08007cbc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b086      	sub	sp, #24
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	60b9      	str	r1, [r7, #8]
 8007cc6:	607a      	str	r2, [r7, #4]
 8007cc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d101      	bne.n	8007cdc <HAL_DMA_Start_IT+0x20>
 8007cd8:	2302      	movs	r3, #2
 8007cda:	e066      	b.n	8007daa <HAL_DMA_Start_IT+0xee>
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d155      	bne.n	8007d9c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2202      	movs	r2, #2
 8007cf4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	681a      	ldr	r2, [r3, #0]
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f022 0201 	bic.w	r2, r2, #1
 8007d0c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	68b9      	ldr	r1, [r7, #8]
 8007d14:	68f8      	ldr	r0, [r7, #12]
 8007d16:	f000 f9c7 	bl	80080a8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d008      	beq.n	8007d34 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f042 020e 	orr.w	r2, r2, #14
 8007d30:	601a      	str	r2, [r3, #0]
 8007d32:	e00f      	b.n	8007d54 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f022 0204 	bic.w	r2, r2, #4
 8007d42:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	681a      	ldr	r2, [r3, #0]
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f042 020a 	orr.w	r2, r2, #10
 8007d52:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d007      	beq.n	8007d72 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d66:	681a      	ldr	r2, [r3, #0]
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d6c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007d70:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d007      	beq.n	8007d8a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007d88:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	681a      	ldr	r2, [r3, #0]
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f042 0201 	orr.w	r2, r2, #1
 8007d98:	601a      	str	r2, [r3, #0]
 8007d9a:	e005      	b.n	8007da8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007da4:	2302      	movs	r3, #2
 8007da6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007da8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3718      	adds	r7, #24
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}

08007db2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007db2:	b480      	push	{r7}
 8007db4:	b085      	sub	sp, #20
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	2b02      	cmp	r3, #2
 8007dc8:	d005      	beq.n	8007dd6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2204      	movs	r2, #4
 8007dce:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	73fb      	strb	r3, [r7, #15]
 8007dd4:	e037      	b.n	8007e46 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	681a      	ldr	r2, [r3, #0]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f022 020e 	bic.w	r2, r2, #14
 8007de4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007dea:	681a      	ldr	r2, [r3, #0]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007df0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007df4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f022 0201 	bic.w	r2, r2, #1
 8007e04:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e0a:	f003 021f 	and.w	r2, r3, #31
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e12:	2101      	movs	r1, #1
 8007e14:	fa01 f202 	lsl.w	r2, r1, r2
 8007e18:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e1e:	687a      	ldr	r2, [r7, #4]
 8007e20:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007e22:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d00c      	beq.n	8007e46 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e30:	681a      	ldr	r2, [r3, #0]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e36:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007e3a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007e44:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2201      	movs	r2, #1
 8007e4a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8007e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3714      	adds	r7, #20
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr

08007e64 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b084      	sub	sp, #16
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007e76:	b2db      	uxtb	r3, r3
 8007e78:	2b02      	cmp	r3, #2
 8007e7a:	d00d      	beq.n	8007e98 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2204      	movs	r2, #4
 8007e80:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2201      	movs	r2, #1
 8007e86:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8007e92:	2301      	movs	r3, #1
 8007e94:	73fb      	strb	r3, [r7, #15]
 8007e96:	e047      	b.n	8007f28 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f022 020e 	bic.w	r2, r2, #14
 8007ea6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f022 0201 	bic.w	r2, r2, #1
 8007eb6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ebc:	681a      	ldr	r2, [r3, #0]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ec2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007ec6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ecc:	f003 021f 	and.w	r2, r3, #31
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ed4:	2101      	movs	r1, #1
 8007ed6:	fa01 f202 	lsl.w	r2, r1, r2
 8007eda:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007ee4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d00c      	beq.n	8007f08 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ef8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007efc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f02:	687a      	ldr	r2, [r7, #4]
 8007f04:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007f06:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2200      	movs	r2, #0
 8007f14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d003      	beq.n	8007f28 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	4798      	blx	r3
    }
  }
  return status;
 8007f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3710      	adds	r7, #16
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}

08007f32 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007f32:	b580      	push	{r7, lr}
 8007f34:	b084      	sub	sp, #16
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f4e:	f003 031f 	and.w	r3, r3, #31
 8007f52:	2204      	movs	r2, #4
 8007f54:	409a      	lsls	r2, r3
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	4013      	ands	r3, r2
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d026      	beq.n	8007fac <HAL_DMA_IRQHandler+0x7a>
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	f003 0304 	and.w	r3, r3, #4
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d021      	beq.n	8007fac <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f003 0320 	and.w	r3, r3, #32
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d107      	bne.n	8007f86 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	681a      	ldr	r2, [r3, #0]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f022 0204 	bic.w	r2, r2, #4
 8007f84:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f8a:	f003 021f 	and.w	r2, r3, #31
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f92:	2104      	movs	r1, #4
 8007f94:	fa01 f202 	lsl.w	r2, r1, r2
 8007f98:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d071      	beq.n	8008086 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007faa:	e06c      	b.n	8008086 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fb0:	f003 031f 	and.w	r3, r3, #31
 8007fb4:	2202      	movs	r2, #2
 8007fb6:	409a      	lsls	r2, r3
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	4013      	ands	r3, r2
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d02e      	beq.n	800801e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	f003 0302 	and.w	r3, r3, #2
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d029      	beq.n	800801e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f003 0320 	and.w	r3, r3, #32
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d10b      	bne.n	8007ff0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	681a      	ldr	r2, [r3, #0]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f022 020a 	bic.w	r2, r2, #10
 8007fe6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2201      	movs	r2, #1
 8007fec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ff4:	f003 021f 	and.w	r2, r3, #31
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ffc:	2102      	movs	r1, #2
 8007ffe:	fa01 f202 	lsl.w	r2, r1, r2
 8008002:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2200      	movs	r2, #0
 8008008:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008010:	2b00      	cmp	r3, #0
 8008012:	d038      	beq.n	8008086 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800801c:	e033      	b.n	8008086 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008022:	f003 031f 	and.w	r3, r3, #31
 8008026:	2208      	movs	r2, #8
 8008028:	409a      	lsls	r2, r3
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	4013      	ands	r3, r2
 800802e:	2b00      	cmp	r3, #0
 8008030:	d02a      	beq.n	8008088 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	f003 0308 	and.w	r3, r3, #8
 8008038:	2b00      	cmp	r3, #0
 800803a:	d025      	beq.n	8008088 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	681a      	ldr	r2, [r3, #0]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f022 020e 	bic.w	r2, r2, #14
 800804a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008050:	f003 021f 	and.w	r2, r3, #31
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008058:	2101      	movs	r1, #1
 800805a:	fa01 f202 	lsl.w	r2, r1, r2
 800805e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2201      	movs	r2, #1
 8008064:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2201      	movs	r2, #1
 800806a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2200      	movs	r2, #0
 8008072:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800807a:	2b00      	cmp	r3, #0
 800807c:	d004      	beq.n	8008088 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8008086:	bf00      	nop
 8008088:	bf00      	nop
}
 800808a:	3710      	adds	r7, #16
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008090:	b480      	push	{r7}
 8008092:	b083      	sub	sp, #12
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 800809c:	4618      	mov	r0, r3
 800809e:	370c      	adds	r7, #12
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b085      	sub	sp, #20
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	60b9      	str	r1, [r7, #8]
 80080b2:	607a      	str	r2, [r7, #4]
 80080b4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080ba:	68fa      	ldr	r2, [r7, #12]
 80080bc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80080be:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d004      	beq.n	80080d2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080cc:	68fa      	ldr	r2, [r7, #12]
 80080ce:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80080d0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080d6:	f003 021f 	and.w	r2, r3, #31
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080de:	2101      	movs	r1, #1
 80080e0:	fa01 f202 	lsl.w	r2, r1, r2
 80080e4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	683a      	ldr	r2, [r7, #0]
 80080ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	689b      	ldr	r3, [r3, #8]
 80080f2:	2b10      	cmp	r3, #16
 80080f4:	d108      	bne.n	8008108 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	68ba      	ldr	r2, [r7, #8]
 8008104:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008106:	e007      	b.n	8008118 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	68ba      	ldr	r2, [r7, #8]
 800810e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	60da      	str	r2, [r3, #12]
}
 8008118:	bf00      	nop
 800811a:	3714      	adds	r7, #20
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr

08008124 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008124:	b480      	push	{r7}
 8008126:	b087      	sub	sp, #28
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	461a      	mov	r2, r3
 8008132:	4b16      	ldr	r3, [pc, #88]	@ (800818c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8008134:	429a      	cmp	r2, r3
 8008136:	d802      	bhi.n	800813e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8008138:	4b15      	ldr	r3, [pc, #84]	@ (8008190 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800813a:	617b      	str	r3, [r7, #20]
 800813c:	e001      	b.n	8008142 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800813e:	4b15      	ldr	r3, [pc, #84]	@ (8008194 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8008140:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	b2db      	uxtb	r3, r3
 800814c:	3b08      	subs	r3, #8
 800814e:	4a12      	ldr	r2, [pc, #72]	@ (8008198 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8008150:	fba2 2303 	umull	r2, r3, r2, r3
 8008154:	091b      	lsrs	r3, r3, #4
 8008156:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800815c:	089b      	lsrs	r3, r3, #2
 800815e:	009a      	lsls	r2, r3, #2
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	4413      	add	r3, r2
 8008164:	461a      	mov	r2, r3
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	4a0b      	ldr	r2, [pc, #44]	@ (800819c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800816e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f003 031f 	and.w	r3, r3, #31
 8008176:	2201      	movs	r2, #1
 8008178:	409a      	lsls	r2, r3
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800817e:	bf00      	nop
 8008180:	371c      	adds	r7, #28
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr
 800818a:	bf00      	nop
 800818c:	40020407 	.word	0x40020407
 8008190:	40020800 	.word	0x40020800
 8008194:	40020820 	.word	0x40020820
 8008198:	cccccccd 	.word	0xcccccccd
 800819c:	40020880 	.word	0x40020880

080081a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b085      	sub	sp, #20
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	b2db      	uxtb	r3, r3
 80081ae:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80081b0:	68fa      	ldr	r2, [r7, #12]
 80081b2:	4b0b      	ldr	r3, [pc, #44]	@ (80081e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80081b4:	4413      	add	r3, r2
 80081b6:	009b      	lsls	r3, r3, #2
 80081b8:	461a      	mov	r2, r3
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	4a08      	ldr	r2, [pc, #32]	@ (80081e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80081c2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	3b01      	subs	r3, #1
 80081c8:	f003 031f 	and.w	r3, r3, #31
 80081cc:	2201      	movs	r2, #1
 80081ce:	409a      	lsls	r2, r3
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80081d4:	bf00      	nop
 80081d6:	3714      	adds	r7, #20
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr
 80081e0:	1000823f 	.word	0x1000823f
 80081e4:	40020940 	.word	0x40020940

080081e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b087      	sub	sp, #28
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80081f2:	2300      	movs	r3, #0
 80081f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80081f6:	e15a      	b.n	80084ae <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	2101      	movs	r1, #1
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	fa01 f303 	lsl.w	r3, r1, r3
 8008204:	4013      	ands	r3, r2
 8008206:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2b00      	cmp	r3, #0
 800820c:	f000 814c 	beq.w	80084a8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	f003 0303 	and.w	r3, r3, #3
 8008218:	2b01      	cmp	r3, #1
 800821a:	d005      	beq.n	8008228 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008224:	2b02      	cmp	r3, #2
 8008226:	d130      	bne.n	800828a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	005b      	lsls	r3, r3, #1
 8008232:	2203      	movs	r2, #3
 8008234:	fa02 f303 	lsl.w	r3, r2, r3
 8008238:	43db      	mvns	r3, r3
 800823a:	693a      	ldr	r2, [r7, #16]
 800823c:	4013      	ands	r3, r2
 800823e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	68da      	ldr	r2, [r3, #12]
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	005b      	lsls	r3, r3, #1
 8008248:	fa02 f303 	lsl.w	r3, r2, r3
 800824c:	693a      	ldr	r2, [r7, #16]
 800824e:	4313      	orrs	r3, r2
 8008250:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	693a      	ldr	r2, [r7, #16]
 8008256:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800825e:	2201      	movs	r2, #1
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	fa02 f303 	lsl.w	r3, r2, r3
 8008266:	43db      	mvns	r3, r3
 8008268:	693a      	ldr	r2, [r7, #16]
 800826a:	4013      	ands	r3, r2
 800826c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	091b      	lsrs	r3, r3, #4
 8008274:	f003 0201 	and.w	r2, r3, #1
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	fa02 f303 	lsl.w	r3, r2, r3
 800827e:	693a      	ldr	r2, [r7, #16]
 8008280:	4313      	orrs	r3, r2
 8008282:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	693a      	ldr	r2, [r7, #16]
 8008288:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	f003 0303 	and.w	r3, r3, #3
 8008292:	2b03      	cmp	r3, #3
 8008294:	d017      	beq.n	80082c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	68db      	ldr	r3, [r3, #12]
 800829a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	005b      	lsls	r3, r3, #1
 80082a0:	2203      	movs	r2, #3
 80082a2:	fa02 f303 	lsl.w	r3, r2, r3
 80082a6:	43db      	mvns	r3, r3
 80082a8:	693a      	ldr	r2, [r7, #16]
 80082aa:	4013      	ands	r3, r2
 80082ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	689a      	ldr	r2, [r3, #8]
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	005b      	lsls	r3, r3, #1
 80082b6:	fa02 f303 	lsl.w	r3, r2, r3
 80082ba:	693a      	ldr	r2, [r7, #16]
 80082bc:	4313      	orrs	r3, r2
 80082be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	693a      	ldr	r2, [r7, #16]
 80082c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	f003 0303 	and.w	r3, r3, #3
 80082ce:	2b02      	cmp	r3, #2
 80082d0:	d123      	bne.n	800831a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	08da      	lsrs	r2, r3, #3
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	3208      	adds	r2, #8
 80082da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	f003 0307 	and.w	r3, r3, #7
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	220f      	movs	r2, #15
 80082ea:	fa02 f303 	lsl.w	r3, r2, r3
 80082ee:	43db      	mvns	r3, r3
 80082f0:	693a      	ldr	r2, [r7, #16]
 80082f2:	4013      	ands	r3, r2
 80082f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	691a      	ldr	r2, [r3, #16]
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	f003 0307 	and.w	r3, r3, #7
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	fa02 f303 	lsl.w	r3, r2, r3
 8008306:	693a      	ldr	r2, [r7, #16]
 8008308:	4313      	orrs	r3, r2
 800830a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	08da      	lsrs	r2, r3, #3
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	3208      	adds	r2, #8
 8008314:	6939      	ldr	r1, [r7, #16]
 8008316:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	005b      	lsls	r3, r3, #1
 8008324:	2203      	movs	r2, #3
 8008326:	fa02 f303 	lsl.w	r3, r2, r3
 800832a:	43db      	mvns	r3, r3
 800832c:	693a      	ldr	r2, [r7, #16]
 800832e:	4013      	ands	r3, r2
 8008330:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	f003 0203 	and.w	r2, r3, #3
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	005b      	lsls	r3, r3, #1
 800833e:	fa02 f303 	lsl.w	r3, r2, r3
 8008342:	693a      	ldr	r2, [r7, #16]
 8008344:	4313      	orrs	r3, r2
 8008346:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	693a      	ldr	r2, [r7, #16]
 800834c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008356:	2b00      	cmp	r3, #0
 8008358:	f000 80a6 	beq.w	80084a8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800835c:	4b5b      	ldr	r3, [pc, #364]	@ (80084cc <HAL_GPIO_Init+0x2e4>)
 800835e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008360:	4a5a      	ldr	r2, [pc, #360]	@ (80084cc <HAL_GPIO_Init+0x2e4>)
 8008362:	f043 0301 	orr.w	r3, r3, #1
 8008366:	6613      	str	r3, [r2, #96]	@ 0x60
 8008368:	4b58      	ldr	r3, [pc, #352]	@ (80084cc <HAL_GPIO_Init+0x2e4>)
 800836a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800836c:	f003 0301 	and.w	r3, r3, #1
 8008370:	60bb      	str	r3, [r7, #8]
 8008372:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008374:	4a56      	ldr	r2, [pc, #344]	@ (80084d0 <HAL_GPIO_Init+0x2e8>)
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	089b      	lsrs	r3, r3, #2
 800837a:	3302      	adds	r3, #2
 800837c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008380:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	f003 0303 	and.w	r3, r3, #3
 8008388:	009b      	lsls	r3, r3, #2
 800838a:	220f      	movs	r2, #15
 800838c:	fa02 f303 	lsl.w	r3, r2, r3
 8008390:	43db      	mvns	r3, r3
 8008392:	693a      	ldr	r2, [r7, #16]
 8008394:	4013      	ands	r3, r2
 8008396:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800839e:	d01f      	beq.n	80083e0 <HAL_GPIO_Init+0x1f8>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	4a4c      	ldr	r2, [pc, #304]	@ (80084d4 <HAL_GPIO_Init+0x2ec>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d019      	beq.n	80083dc <HAL_GPIO_Init+0x1f4>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	4a4b      	ldr	r2, [pc, #300]	@ (80084d8 <HAL_GPIO_Init+0x2f0>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d013      	beq.n	80083d8 <HAL_GPIO_Init+0x1f0>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	4a4a      	ldr	r2, [pc, #296]	@ (80084dc <HAL_GPIO_Init+0x2f4>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d00d      	beq.n	80083d4 <HAL_GPIO_Init+0x1ec>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	4a49      	ldr	r2, [pc, #292]	@ (80084e0 <HAL_GPIO_Init+0x2f8>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d007      	beq.n	80083d0 <HAL_GPIO_Init+0x1e8>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	4a48      	ldr	r2, [pc, #288]	@ (80084e4 <HAL_GPIO_Init+0x2fc>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d101      	bne.n	80083cc <HAL_GPIO_Init+0x1e4>
 80083c8:	2305      	movs	r3, #5
 80083ca:	e00a      	b.n	80083e2 <HAL_GPIO_Init+0x1fa>
 80083cc:	2306      	movs	r3, #6
 80083ce:	e008      	b.n	80083e2 <HAL_GPIO_Init+0x1fa>
 80083d0:	2304      	movs	r3, #4
 80083d2:	e006      	b.n	80083e2 <HAL_GPIO_Init+0x1fa>
 80083d4:	2303      	movs	r3, #3
 80083d6:	e004      	b.n	80083e2 <HAL_GPIO_Init+0x1fa>
 80083d8:	2302      	movs	r3, #2
 80083da:	e002      	b.n	80083e2 <HAL_GPIO_Init+0x1fa>
 80083dc:	2301      	movs	r3, #1
 80083de:	e000      	b.n	80083e2 <HAL_GPIO_Init+0x1fa>
 80083e0:	2300      	movs	r3, #0
 80083e2:	697a      	ldr	r2, [r7, #20]
 80083e4:	f002 0203 	and.w	r2, r2, #3
 80083e8:	0092      	lsls	r2, r2, #2
 80083ea:	4093      	lsls	r3, r2
 80083ec:	693a      	ldr	r2, [r7, #16]
 80083ee:	4313      	orrs	r3, r2
 80083f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80083f2:	4937      	ldr	r1, [pc, #220]	@ (80084d0 <HAL_GPIO_Init+0x2e8>)
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	089b      	lsrs	r3, r3, #2
 80083f8:	3302      	adds	r3, #2
 80083fa:	693a      	ldr	r2, [r7, #16]
 80083fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008400:	4b39      	ldr	r3, [pc, #228]	@ (80084e8 <HAL_GPIO_Init+0x300>)
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	43db      	mvns	r3, r3
 800840a:	693a      	ldr	r2, [r7, #16]
 800840c:	4013      	ands	r3, r2
 800840e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008418:	2b00      	cmp	r3, #0
 800841a:	d003      	beq.n	8008424 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800841c:	693a      	ldr	r2, [r7, #16]
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	4313      	orrs	r3, r2
 8008422:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008424:	4a30      	ldr	r2, [pc, #192]	@ (80084e8 <HAL_GPIO_Init+0x300>)
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800842a:	4b2f      	ldr	r3, [pc, #188]	@ (80084e8 <HAL_GPIO_Init+0x300>)
 800842c:	68db      	ldr	r3, [r3, #12]
 800842e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	43db      	mvns	r3, r3
 8008434:	693a      	ldr	r2, [r7, #16]
 8008436:	4013      	ands	r3, r2
 8008438:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008442:	2b00      	cmp	r3, #0
 8008444:	d003      	beq.n	800844e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8008446:	693a      	ldr	r2, [r7, #16]
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	4313      	orrs	r3, r2
 800844c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800844e:	4a26      	ldr	r2, [pc, #152]	@ (80084e8 <HAL_GPIO_Init+0x300>)
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8008454:	4b24      	ldr	r3, [pc, #144]	@ (80084e8 <HAL_GPIO_Init+0x300>)
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	43db      	mvns	r3, r3
 800845e:	693a      	ldr	r2, [r7, #16]
 8008460:	4013      	ands	r3, r2
 8008462:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800846c:	2b00      	cmp	r3, #0
 800846e:	d003      	beq.n	8008478 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8008470:	693a      	ldr	r2, [r7, #16]
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	4313      	orrs	r3, r2
 8008476:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008478:	4a1b      	ldr	r2, [pc, #108]	@ (80084e8 <HAL_GPIO_Init+0x300>)
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800847e:	4b1a      	ldr	r3, [pc, #104]	@ (80084e8 <HAL_GPIO_Init+0x300>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	43db      	mvns	r3, r3
 8008488:	693a      	ldr	r2, [r7, #16]
 800848a:	4013      	ands	r3, r2
 800848c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008496:	2b00      	cmp	r3, #0
 8008498:	d003      	beq.n	80084a2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800849a:	693a      	ldr	r2, [r7, #16]
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	4313      	orrs	r3, r2
 80084a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80084a2:	4a11      	ldr	r2, [pc, #68]	@ (80084e8 <HAL_GPIO_Init+0x300>)
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	3301      	adds	r3, #1
 80084ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	681a      	ldr	r2, [r3, #0]
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	fa22 f303 	lsr.w	r3, r2, r3
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	f47f ae9d 	bne.w	80081f8 <HAL_GPIO_Init+0x10>
  }
}
 80084be:	bf00      	nop
 80084c0:	bf00      	nop
 80084c2:	371c      	adds	r7, #28
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr
 80084cc:	40021000 	.word	0x40021000
 80084d0:	40010000 	.word	0x40010000
 80084d4:	48000400 	.word	0x48000400
 80084d8:	48000800 	.word	0x48000800
 80084dc:	48000c00 	.word	0x48000c00
 80084e0:	48001000 	.word	0x48001000
 80084e4:	48001400 	.word	0x48001400
 80084e8:	40010400 	.word	0x40010400

080084ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b083      	sub	sp, #12
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	460b      	mov	r3, r1
 80084f6:	807b      	strh	r3, [r7, #2]
 80084f8:	4613      	mov	r3, r2
 80084fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80084fc:	787b      	ldrb	r3, [r7, #1]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d003      	beq.n	800850a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008502:	887a      	ldrh	r2, [r7, #2]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008508:	e002      	b.n	8008510 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800850a:	887a      	ldrh	r2, [r7, #2]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008510:	bf00      	nop
 8008512:	370c      	adds	r7, #12
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr

0800851c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b082      	sub	sp, #8
 8008520:	af00      	add	r7, sp, #0
 8008522:	4603      	mov	r3, r0
 8008524:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008526:	4b08      	ldr	r3, [pc, #32]	@ (8008548 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008528:	695a      	ldr	r2, [r3, #20]
 800852a:	88fb      	ldrh	r3, [r7, #6]
 800852c:	4013      	ands	r3, r2
 800852e:	2b00      	cmp	r3, #0
 8008530:	d006      	beq.n	8008540 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008532:	4a05      	ldr	r2, [pc, #20]	@ (8008548 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008534:	88fb      	ldrh	r3, [r7, #6]
 8008536:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008538:	88fb      	ldrh	r3, [r7, #6]
 800853a:	4618      	mov	r0, r3
 800853c:	f7fc fc1a 	bl	8004d74 <HAL_GPIO_EXTI_Callback>
  }
}
 8008540:	bf00      	nop
 8008542:	3708      	adds	r7, #8
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}
 8008548:	40010400 	.word	0x40010400

0800854c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800854c:	b480      	push	{r7}
 800854e:	b085      	sub	sp, #20
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d141      	bne.n	80085de <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800855a:	4b4b      	ldr	r3, [pc, #300]	@ (8008688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008562:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008566:	d131      	bne.n	80085cc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008568:	4b47      	ldr	r3, [pc, #284]	@ (8008688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800856a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800856e:	4a46      	ldr	r2, [pc, #280]	@ (8008688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008570:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008574:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008578:	4b43      	ldr	r3, [pc, #268]	@ (8008688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008580:	4a41      	ldr	r2, [pc, #260]	@ (8008688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008582:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008586:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008588:	4b40      	ldr	r3, [pc, #256]	@ (800868c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	2232      	movs	r2, #50	@ 0x32
 800858e:	fb02 f303 	mul.w	r3, r2, r3
 8008592:	4a3f      	ldr	r2, [pc, #252]	@ (8008690 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008594:	fba2 2303 	umull	r2, r3, r2, r3
 8008598:	0c9b      	lsrs	r3, r3, #18
 800859a:	3301      	adds	r3, #1
 800859c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800859e:	e002      	b.n	80085a6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	3b01      	subs	r3, #1
 80085a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80085a6:	4b38      	ldr	r3, [pc, #224]	@ (8008688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80085a8:	695b      	ldr	r3, [r3, #20]
 80085aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80085ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085b2:	d102      	bne.n	80085ba <HAL_PWREx_ControlVoltageScaling+0x6e>
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d1f2      	bne.n	80085a0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80085ba:	4b33      	ldr	r3, [pc, #204]	@ (8008688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80085bc:	695b      	ldr	r3, [r3, #20]
 80085be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80085c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085c6:	d158      	bne.n	800867a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80085c8:	2303      	movs	r3, #3
 80085ca:	e057      	b.n	800867c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80085cc:	4b2e      	ldr	r3, [pc, #184]	@ (8008688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80085ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085d2:	4a2d      	ldr	r2, [pc, #180]	@ (8008688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80085d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80085d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80085dc:	e04d      	b.n	800867a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085e4:	d141      	bne.n	800866a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80085e6:	4b28      	ldr	r3, [pc, #160]	@ (8008688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80085ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085f2:	d131      	bne.n	8008658 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80085f4:	4b24      	ldr	r3, [pc, #144]	@ (8008688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80085f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085fa:	4a23      	ldr	r2, [pc, #140]	@ (8008688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80085fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008600:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008604:	4b20      	ldr	r3, [pc, #128]	@ (8008688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800860c:	4a1e      	ldr	r2, [pc, #120]	@ (8008688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800860e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008612:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008614:	4b1d      	ldr	r3, [pc, #116]	@ (800868c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	2232      	movs	r2, #50	@ 0x32
 800861a:	fb02 f303 	mul.w	r3, r2, r3
 800861e:	4a1c      	ldr	r2, [pc, #112]	@ (8008690 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008620:	fba2 2303 	umull	r2, r3, r2, r3
 8008624:	0c9b      	lsrs	r3, r3, #18
 8008626:	3301      	adds	r3, #1
 8008628:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800862a:	e002      	b.n	8008632 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	3b01      	subs	r3, #1
 8008630:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008632:	4b15      	ldr	r3, [pc, #84]	@ (8008688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008634:	695b      	ldr	r3, [r3, #20]
 8008636:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800863a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800863e:	d102      	bne.n	8008646 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d1f2      	bne.n	800862c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008646:	4b10      	ldr	r3, [pc, #64]	@ (8008688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008648:	695b      	ldr	r3, [r3, #20]
 800864a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800864e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008652:	d112      	bne.n	800867a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008654:	2303      	movs	r3, #3
 8008656:	e011      	b.n	800867c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008658:	4b0b      	ldr	r3, [pc, #44]	@ (8008688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800865a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800865e:	4a0a      	ldr	r2, [pc, #40]	@ (8008688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008660:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008664:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008668:	e007      	b.n	800867a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800866a:	4b07      	ldr	r3, [pc, #28]	@ (8008688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008672:	4a05      	ldr	r2, [pc, #20]	@ (8008688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008674:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008678:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800867a:	2300      	movs	r3, #0
}
 800867c:	4618      	mov	r0, r3
 800867e:	3714      	adds	r7, #20
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr
 8008688:	40007000 	.word	0x40007000
 800868c:	20000264 	.word	0x20000264
 8008690:	431bde83 	.word	0x431bde83

08008694 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8008694:	b480      	push	{r7}
 8008696:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008698:	4b05      	ldr	r3, [pc, #20]	@ (80086b0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800869a:	689b      	ldr	r3, [r3, #8]
 800869c:	4a04      	ldr	r2, [pc, #16]	@ (80086b0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800869e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80086a2:	6093      	str	r3, [r2, #8]
}
 80086a4:	bf00      	nop
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr
 80086ae:	bf00      	nop
 80086b0:	40007000 	.word	0x40007000

080086b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b088      	sub	sp, #32
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d101      	bne.n	80086c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80086c2:	2301      	movs	r3, #1
 80086c4:	e2fe      	b.n	8008cc4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f003 0301 	and.w	r3, r3, #1
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d075      	beq.n	80087be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80086d2:	4b97      	ldr	r3, [pc, #604]	@ (8008930 <HAL_RCC_OscConfig+0x27c>)
 80086d4:	689b      	ldr	r3, [r3, #8]
 80086d6:	f003 030c 	and.w	r3, r3, #12
 80086da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80086dc:	4b94      	ldr	r3, [pc, #592]	@ (8008930 <HAL_RCC_OscConfig+0x27c>)
 80086de:	68db      	ldr	r3, [r3, #12]
 80086e0:	f003 0303 	and.w	r3, r3, #3
 80086e4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80086e6:	69bb      	ldr	r3, [r7, #24]
 80086e8:	2b0c      	cmp	r3, #12
 80086ea:	d102      	bne.n	80086f2 <HAL_RCC_OscConfig+0x3e>
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	2b03      	cmp	r3, #3
 80086f0:	d002      	beq.n	80086f8 <HAL_RCC_OscConfig+0x44>
 80086f2:	69bb      	ldr	r3, [r7, #24]
 80086f4:	2b08      	cmp	r3, #8
 80086f6:	d10b      	bne.n	8008710 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086f8:	4b8d      	ldr	r3, [pc, #564]	@ (8008930 <HAL_RCC_OscConfig+0x27c>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008700:	2b00      	cmp	r3, #0
 8008702:	d05b      	beq.n	80087bc <HAL_RCC_OscConfig+0x108>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	685b      	ldr	r3, [r3, #4]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d157      	bne.n	80087bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800870c:	2301      	movs	r3, #1
 800870e:	e2d9      	b.n	8008cc4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008718:	d106      	bne.n	8008728 <HAL_RCC_OscConfig+0x74>
 800871a:	4b85      	ldr	r3, [pc, #532]	@ (8008930 <HAL_RCC_OscConfig+0x27c>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a84      	ldr	r2, [pc, #528]	@ (8008930 <HAL_RCC_OscConfig+0x27c>)
 8008720:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008724:	6013      	str	r3, [r2, #0]
 8008726:	e01d      	b.n	8008764 <HAL_RCC_OscConfig+0xb0>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008730:	d10c      	bne.n	800874c <HAL_RCC_OscConfig+0x98>
 8008732:	4b7f      	ldr	r3, [pc, #508]	@ (8008930 <HAL_RCC_OscConfig+0x27c>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4a7e      	ldr	r2, [pc, #504]	@ (8008930 <HAL_RCC_OscConfig+0x27c>)
 8008738:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800873c:	6013      	str	r3, [r2, #0]
 800873e:	4b7c      	ldr	r3, [pc, #496]	@ (8008930 <HAL_RCC_OscConfig+0x27c>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a7b      	ldr	r2, [pc, #492]	@ (8008930 <HAL_RCC_OscConfig+0x27c>)
 8008744:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008748:	6013      	str	r3, [r2, #0]
 800874a:	e00b      	b.n	8008764 <HAL_RCC_OscConfig+0xb0>
 800874c:	4b78      	ldr	r3, [pc, #480]	@ (8008930 <HAL_RCC_OscConfig+0x27c>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a77      	ldr	r2, [pc, #476]	@ (8008930 <HAL_RCC_OscConfig+0x27c>)
 8008752:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008756:	6013      	str	r3, [r2, #0]
 8008758:	4b75      	ldr	r3, [pc, #468]	@ (8008930 <HAL_RCC_OscConfig+0x27c>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a74      	ldr	r2, [pc, #464]	@ (8008930 <HAL_RCC_OscConfig+0x27c>)
 800875e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008762:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d013      	beq.n	8008794 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800876c:	f7fd fe24 	bl	80063b8 <HAL_GetTick>
 8008770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008772:	e008      	b.n	8008786 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008774:	f7fd fe20 	bl	80063b8 <HAL_GetTick>
 8008778:	4602      	mov	r2, r0
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	1ad3      	subs	r3, r2, r3
 800877e:	2b64      	cmp	r3, #100	@ 0x64
 8008780:	d901      	bls.n	8008786 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008782:	2303      	movs	r3, #3
 8008784:	e29e      	b.n	8008cc4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008786:	4b6a      	ldr	r3, [pc, #424]	@ (8008930 <HAL_RCC_OscConfig+0x27c>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800878e:	2b00      	cmp	r3, #0
 8008790:	d0f0      	beq.n	8008774 <HAL_RCC_OscConfig+0xc0>
 8008792:	e014      	b.n	80087be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008794:	f7fd fe10 	bl	80063b8 <HAL_GetTick>
 8008798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800879a:	e008      	b.n	80087ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800879c:	f7fd fe0c 	bl	80063b8 <HAL_GetTick>
 80087a0:	4602      	mov	r2, r0
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	1ad3      	subs	r3, r2, r3
 80087a6:	2b64      	cmp	r3, #100	@ 0x64
 80087a8:	d901      	bls.n	80087ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80087aa:	2303      	movs	r3, #3
 80087ac:	e28a      	b.n	8008cc4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80087ae:	4b60      	ldr	r3, [pc, #384]	@ (8008930 <HAL_RCC_OscConfig+0x27c>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d1f0      	bne.n	800879c <HAL_RCC_OscConfig+0xe8>
 80087ba:	e000      	b.n	80087be <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f003 0302 	and.w	r3, r3, #2
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d075      	beq.n	80088b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80087ca:	4b59      	ldr	r3, [pc, #356]	@ (8008930 <HAL_RCC_OscConfig+0x27c>)
 80087cc:	689b      	ldr	r3, [r3, #8]
 80087ce:	f003 030c 	and.w	r3, r3, #12
 80087d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80087d4:	4b56      	ldr	r3, [pc, #344]	@ (8008930 <HAL_RCC_OscConfig+0x27c>)
 80087d6:	68db      	ldr	r3, [r3, #12]
 80087d8:	f003 0303 	and.w	r3, r3, #3
 80087dc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80087de:	69bb      	ldr	r3, [r7, #24]
 80087e0:	2b0c      	cmp	r3, #12
 80087e2:	d102      	bne.n	80087ea <HAL_RCC_OscConfig+0x136>
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	2b02      	cmp	r3, #2
 80087e8:	d002      	beq.n	80087f0 <HAL_RCC_OscConfig+0x13c>
 80087ea:	69bb      	ldr	r3, [r7, #24]
 80087ec:	2b04      	cmp	r3, #4
 80087ee:	d11f      	bne.n	8008830 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80087f0:	4b4f      	ldr	r3, [pc, #316]	@ (8008930 <HAL_RCC_OscConfig+0x27c>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d005      	beq.n	8008808 <HAL_RCC_OscConfig+0x154>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	68db      	ldr	r3, [r3, #12]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d101      	bne.n	8008808 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8008804:	2301      	movs	r3, #1
 8008806:	e25d      	b.n	8008cc4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008808:	4b49      	ldr	r3, [pc, #292]	@ (8008930 <HAL_RCC_OscConfig+0x27c>)
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	691b      	ldr	r3, [r3, #16]
 8008814:	061b      	lsls	r3, r3, #24
 8008816:	4946      	ldr	r1, [pc, #280]	@ (8008930 <HAL_RCC_OscConfig+0x27c>)
 8008818:	4313      	orrs	r3, r2
 800881a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800881c:	4b45      	ldr	r3, [pc, #276]	@ (8008934 <HAL_RCC_OscConfig+0x280>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4618      	mov	r0, r3
 8008822:	f7fd fd7d 	bl	8006320 <HAL_InitTick>
 8008826:	4603      	mov	r3, r0
 8008828:	2b00      	cmp	r3, #0
 800882a:	d043      	beq.n	80088b4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800882c:	2301      	movs	r3, #1
 800882e:	e249      	b.n	8008cc4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	68db      	ldr	r3, [r3, #12]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d023      	beq.n	8008880 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008838:	4b3d      	ldr	r3, [pc, #244]	@ (8008930 <HAL_RCC_OscConfig+0x27c>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4a3c      	ldr	r2, [pc, #240]	@ (8008930 <HAL_RCC_OscConfig+0x27c>)
 800883e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008842:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008844:	f7fd fdb8 	bl	80063b8 <HAL_GetTick>
 8008848:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800884a:	e008      	b.n	800885e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800884c:	f7fd fdb4 	bl	80063b8 <HAL_GetTick>
 8008850:	4602      	mov	r2, r0
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	1ad3      	subs	r3, r2, r3
 8008856:	2b02      	cmp	r3, #2
 8008858:	d901      	bls.n	800885e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800885a:	2303      	movs	r3, #3
 800885c:	e232      	b.n	8008cc4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800885e:	4b34      	ldr	r3, [pc, #208]	@ (8008930 <HAL_RCC_OscConfig+0x27c>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008866:	2b00      	cmp	r3, #0
 8008868:	d0f0      	beq.n	800884c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800886a:	4b31      	ldr	r3, [pc, #196]	@ (8008930 <HAL_RCC_OscConfig+0x27c>)
 800886c:	685b      	ldr	r3, [r3, #4]
 800886e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	691b      	ldr	r3, [r3, #16]
 8008876:	061b      	lsls	r3, r3, #24
 8008878:	492d      	ldr	r1, [pc, #180]	@ (8008930 <HAL_RCC_OscConfig+0x27c>)
 800887a:	4313      	orrs	r3, r2
 800887c:	604b      	str	r3, [r1, #4]
 800887e:	e01a      	b.n	80088b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008880:	4b2b      	ldr	r3, [pc, #172]	@ (8008930 <HAL_RCC_OscConfig+0x27c>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a2a      	ldr	r2, [pc, #168]	@ (8008930 <HAL_RCC_OscConfig+0x27c>)
 8008886:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800888a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800888c:	f7fd fd94 	bl	80063b8 <HAL_GetTick>
 8008890:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008892:	e008      	b.n	80088a6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008894:	f7fd fd90 	bl	80063b8 <HAL_GetTick>
 8008898:	4602      	mov	r2, r0
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	1ad3      	subs	r3, r2, r3
 800889e:	2b02      	cmp	r3, #2
 80088a0:	d901      	bls.n	80088a6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80088a2:	2303      	movs	r3, #3
 80088a4:	e20e      	b.n	8008cc4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80088a6:	4b22      	ldr	r3, [pc, #136]	@ (8008930 <HAL_RCC_OscConfig+0x27c>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d1f0      	bne.n	8008894 <HAL_RCC_OscConfig+0x1e0>
 80088b2:	e000      	b.n	80088b6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80088b4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f003 0308 	and.w	r3, r3, #8
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d041      	beq.n	8008946 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	695b      	ldr	r3, [r3, #20]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d01c      	beq.n	8008904 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80088ca:	4b19      	ldr	r3, [pc, #100]	@ (8008930 <HAL_RCC_OscConfig+0x27c>)
 80088cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80088d0:	4a17      	ldr	r2, [pc, #92]	@ (8008930 <HAL_RCC_OscConfig+0x27c>)
 80088d2:	f043 0301 	orr.w	r3, r3, #1
 80088d6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088da:	f7fd fd6d 	bl	80063b8 <HAL_GetTick>
 80088de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80088e0:	e008      	b.n	80088f4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80088e2:	f7fd fd69 	bl	80063b8 <HAL_GetTick>
 80088e6:	4602      	mov	r2, r0
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	1ad3      	subs	r3, r2, r3
 80088ec:	2b02      	cmp	r3, #2
 80088ee:	d901      	bls.n	80088f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80088f0:	2303      	movs	r3, #3
 80088f2:	e1e7      	b.n	8008cc4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80088f4:	4b0e      	ldr	r3, [pc, #56]	@ (8008930 <HAL_RCC_OscConfig+0x27c>)
 80088f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80088fa:	f003 0302 	and.w	r3, r3, #2
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d0ef      	beq.n	80088e2 <HAL_RCC_OscConfig+0x22e>
 8008902:	e020      	b.n	8008946 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008904:	4b0a      	ldr	r3, [pc, #40]	@ (8008930 <HAL_RCC_OscConfig+0x27c>)
 8008906:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800890a:	4a09      	ldr	r2, [pc, #36]	@ (8008930 <HAL_RCC_OscConfig+0x27c>)
 800890c:	f023 0301 	bic.w	r3, r3, #1
 8008910:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008914:	f7fd fd50 	bl	80063b8 <HAL_GetTick>
 8008918:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800891a:	e00d      	b.n	8008938 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800891c:	f7fd fd4c 	bl	80063b8 <HAL_GetTick>
 8008920:	4602      	mov	r2, r0
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	1ad3      	subs	r3, r2, r3
 8008926:	2b02      	cmp	r3, #2
 8008928:	d906      	bls.n	8008938 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800892a:	2303      	movs	r3, #3
 800892c:	e1ca      	b.n	8008cc4 <HAL_RCC_OscConfig+0x610>
 800892e:	bf00      	nop
 8008930:	40021000 	.word	0x40021000
 8008934:	20000268 	.word	0x20000268
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008938:	4b8c      	ldr	r3, [pc, #560]	@ (8008b6c <HAL_RCC_OscConfig+0x4b8>)
 800893a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800893e:	f003 0302 	and.w	r3, r3, #2
 8008942:	2b00      	cmp	r3, #0
 8008944:	d1ea      	bne.n	800891c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f003 0304 	and.w	r3, r3, #4
 800894e:	2b00      	cmp	r3, #0
 8008950:	f000 80a6 	beq.w	8008aa0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008954:	2300      	movs	r3, #0
 8008956:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008958:	4b84      	ldr	r3, [pc, #528]	@ (8008b6c <HAL_RCC_OscConfig+0x4b8>)
 800895a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800895c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008960:	2b00      	cmp	r3, #0
 8008962:	d101      	bne.n	8008968 <HAL_RCC_OscConfig+0x2b4>
 8008964:	2301      	movs	r3, #1
 8008966:	e000      	b.n	800896a <HAL_RCC_OscConfig+0x2b6>
 8008968:	2300      	movs	r3, #0
 800896a:	2b00      	cmp	r3, #0
 800896c:	d00d      	beq.n	800898a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800896e:	4b7f      	ldr	r3, [pc, #508]	@ (8008b6c <HAL_RCC_OscConfig+0x4b8>)
 8008970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008972:	4a7e      	ldr	r2, [pc, #504]	@ (8008b6c <HAL_RCC_OscConfig+0x4b8>)
 8008974:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008978:	6593      	str	r3, [r2, #88]	@ 0x58
 800897a:	4b7c      	ldr	r3, [pc, #496]	@ (8008b6c <HAL_RCC_OscConfig+0x4b8>)
 800897c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800897e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008982:	60fb      	str	r3, [r7, #12]
 8008984:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008986:	2301      	movs	r3, #1
 8008988:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800898a:	4b79      	ldr	r3, [pc, #484]	@ (8008b70 <HAL_RCC_OscConfig+0x4bc>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008992:	2b00      	cmp	r3, #0
 8008994:	d118      	bne.n	80089c8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008996:	4b76      	ldr	r3, [pc, #472]	@ (8008b70 <HAL_RCC_OscConfig+0x4bc>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4a75      	ldr	r2, [pc, #468]	@ (8008b70 <HAL_RCC_OscConfig+0x4bc>)
 800899c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80089a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80089a2:	f7fd fd09 	bl	80063b8 <HAL_GetTick>
 80089a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80089a8:	e008      	b.n	80089bc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80089aa:	f7fd fd05 	bl	80063b8 <HAL_GetTick>
 80089ae:	4602      	mov	r2, r0
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	1ad3      	subs	r3, r2, r3
 80089b4:	2b02      	cmp	r3, #2
 80089b6:	d901      	bls.n	80089bc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80089b8:	2303      	movs	r3, #3
 80089ba:	e183      	b.n	8008cc4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80089bc:	4b6c      	ldr	r3, [pc, #432]	@ (8008b70 <HAL_RCC_OscConfig+0x4bc>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d0f0      	beq.n	80089aa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	689b      	ldr	r3, [r3, #8]
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d108      	bne.n	80089e2 <HAL_RCC_OscConfig+0x32e>
 80089d0:	4b66      	ldr	r3, [pc, #408]	@ (8008b6c <HAL_RCC_OscConfig+0x4b8>)
 80089d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089d6:	4a65      	ldr	r2, [pc, #404]	@ (8008b6c <HAL_RCC_OscConfig+0x4b8>)
 80089d8:	f043 0301 	orr.w	r3, r3, #1
 80089dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80089e0:	e024      	b.n	8008a2c <HAL_RCC_OscConfig+0x378>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	689b      	ldr	r3, [r3, #8]
 80089e6:	2b05      	cmp	r3, #5
 80089e8:	d110      	bne.n	8008a0c <HAL_RCC_OscConfig+0x358>
 80089ea:	4b60      	ldr	r3, [pc, #384]	@ (8008b6c <HAL_RCC_OscConfig+0x4b8>)
 80089ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089f0:	4a5e      	ldr	r2, [pc, #376]	@ (8008b6c <HAL_RCC_OscConfig+0x4b8>)
 80089f2:	f043 0304 	orr.w	r3, r3, #4
 80089f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80089fa:	4b5c      	ldr	r3, [pc, #368]	@ (8008b6c <HAL_RCC_OscConfig+0x4b8>)
 80089fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a00:	4a5a      	ldr	r2, [pc, #360]	@ (8008b6c <HAL_RCC_OscConfig+0x4b8>)
 8008a02:	f043 0301 	orr.w	r3, r3, #1
 8008a06:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008a0a:	e00f      	b.n	8008a2c <HAL_RCC_OscConfig+0x378>
 8008a0c:	4b57      	ldr	r3, [pc, #348]	@ (8008b6c <HAL_RCC_OscConfig+0x4b8>)
 8008a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a12:	4a56      	ldr	r2, [pc, #344]	@ (8008b6c <HAL_RCC_OscConfig+0x4b8>)
 8008a14:	f023 0301 	bic.w	r3, r3, #1
 8008a18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008a1c:	4b53      	ldr	r3, [pc, #332]	@ (8008b6c <HAL_RCC_OscConfig+0x4b8>)
 8008a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a22:	4a52      	ldr	r2, [pc, #328]	@ (8008b6c <HAL_RCC_OscConfig+0x4b8>)
 8008a24:	f023 0304 	bic.w	r3, r3, #4
 8008a28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	689b      	ldr	r3, [r3, #8]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d016      	beq.n	8008a62 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a34:	f7fd fcc0 	bl	80063b8 <HAL_GetTick>
 8008a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a3a:	e00a      	b.n	8008a52 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a3c:	f7fd fcbc 	bl	80063b8 <HAL_GetTick>
 8008a40:	4602      	mov	r2, r0
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	1ad3      	subs	r3, r2, r3
 8008a46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d901      	bls.n	8008a52 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008a4e:	2303      	movs	r3, #3
 8008a50:	e138      	b.n	8008cc4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a52:	4b46      	ldr	r3, [pc, #280]	@ (8008b6c <HAL_RCC_OscConfig+0x4b8>)
 8008a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a58:	f003 0302 	and.w	r3, r3, #2
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d0ed      	beq.n	8008a3c <HAL_RCC_OscConfig+0x388>
 8008a60:	e015      	b.n	8008a8e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a62:	f7fd fca9 	bl	80063b8 <HAL_GetTick>
 8008a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008a68:	e00a      	b.n	8008a80 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a6a:	f7fd fca5 	bl	80063b8 <HAL_GetTick>
 8008a6e:	4602      	mov	r2, r0
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	1ad3      	subs	r3, r2, r3
 8008a74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d901      	bls.n	8008a80 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008a7c:	2303      	movs	r3, #3
 8008a7e:	e121      	b.n	8008cc4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008a80:	4b3a      	ldr	r3, [pc, #232]	@ (8008b6c <HAL_RCC_OscConfig+0x4b8>)
 8008a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a86:	f003 0302 	and.w	r3, r3, #2
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d1ed      	bne.n	8008a6a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008a8e:	7ffb      	ldrb	r3, [r7, #31]
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	d105      	bne.n	8008aa0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a94:	4b35      	ldr	r3, [pc, #212]	@ (8008b6c <HAL_RCC_OscConfig+0x4b8>)
 8008a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a98:	4a34      	ldr	r2, [pc, #208]	@ (8008b6c <HAL_RCC_OscConfig+0x4b8>)
 8008a9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008a9e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f003 0320 	and.w	r3, r3, #32
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d03c      	beq.n	8008b26 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	699b      	ldr	r3, [r3, #24]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d01c      	beq.n	8008aee <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008ab4:	4b2d      	ldr	r3, [pc, #180]	@ (8008b6c <HAL_RCC_OscConfig+0x4b8>)
 8008ab6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008aba:	4a2c      	ldr	r2, [pc, #176]	@ (8008b6c <HAL_RCC_OscConfig+0x4b8>)
 8008abc:	f043 0301 	orr.w	r3, r3, #1
 8008ac0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ac4:	f7fd fc78 	bl	80063b8 <HAL_GetTick>
 8008ac8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008aca:	e008      	b.n	8008ade <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008acc:	f7fd fc74 	bl	80063b8 <HAL_GetTick>
 8008ad0:	4602      	mov	r2, r0
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	1ad3      	subs	r3, r2, r3
 8008ad6:	2b02      	cmp	r3, #2
 8008ad8:	d901      	bls.n	8008ade <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8008ada:	2303      	movs	r3, #3
 8008adc:	e0f2      	b.n	8008cc4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008ade:	4b23      	ldr	r3, [pc, #140]	@ (8008b6c <HAL_RCC_OscConfig+0x4b8>)
 8008ae0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008ae4:	f003 0302 	and.w	r3, r3, #2
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d0ef      	beq.n	8008acc <HAL_RCC_OscConfig+0x418>
 8008aec:	e01b      	b.n	8008b26 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008aee:	4b1f      	ldr	r3, [pc, #124]	@ (8008b6c <HAL_RCC_OscConfig+0x4b8>)
 8008af0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008af4:	4a1d      	ldr	r2, [pc, #116]	@ (8008b6c <HAL_RCC_OscConfig+0x4b8>)
 8008af6:	f023 0301 	bic.w	r3, r3, #1
 8008afa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008afe:	f7fd fc5b 	bl	80063b8 <HAL_GetTick>
 8008b02:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008b04:	e008      	b.n	8008b18 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008b06:	f7fd fc57 	bl	80063b8 <HAL_GetTick>
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	1ad3      	subs	r3, r2, r3
 8008b10:	2b02      	cmp	r3, #2
 8008b12:	d901      	bls.n	8008b18 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008b14:	2303      	movs	r3, #3
 8008b16:	e0d5      	b.n	8008cc4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008b18:	4b14      	ldr	r3, [pc, #80]	@ (8008b6c <HAL_RCC_OscConfig+0x4b8>)
 8008b1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008b1e:	f003 0302 	and.w	r3, r3, #2
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d1ef      	bne.n	8008b06 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	69db      	ldr	r3, [r3, #28]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	f000 80c9 	beq.w	8008cc2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008b30:	4b0e      	ldr	r3, [pc, #56]	@ (8008b6c <HAL_RCC_OscConfig+0x4b8>)
 8008b32:	689b      	ldr	r3, [r3, #8]
 8008b34:	f003 030c 	and.w	r3, r3, #12
 8008b38:	2b0c      	cmp	r3, #12
 8008b3a:	f000 8083 	beq.w	8008c44 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	69db      	ldr	r3, [r3, #28]
 8008b42:	2b02      	cmp	r3, #2
 8008b44:	d15e      	bne.n	8008c04 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b46:	4b09      	ldr	r3, [pc, #36]	@ (8008b6c <HAL_RCC_OscConfig+0x4b8>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a08      	ldr	r2, [pc, #32]	@ (8008b6c <HAL_RCC_OscConfig+0x4b8>)
 8008b4c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008b50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b52:	f7fd fc31 	bl	80063b8 <HAL_GetTick>
 8008b56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008b58:	e00c      	b.n	8008b74 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b5a:	f7fd fc2d 	bl	80063b8 <HAL_GetTick>
 8008b5e:	4602      	mov	r2, r0
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	1ad3      	subs	r3, r2, r3
 8008b64:	2b02      	cmp	r3, #2
 8008b66:	d905      	bls.n	8008b74 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008b68:	2303      	movs	r3, #3
 8008b6a:	e0ab      	b.n	8008cc4 <HAL_RCC_OscConfig+0x610>
 8008b6c:	40021000 	.word	0x40021000
 8008b70:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008b74:	4b55      	ldr	r3, [pc, #340]	@ (8008ccc <HAL_RCC_OscConfig+0x618>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d1ec      	bne.n	8008b5a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008b80:	4b52      	ldr	r3, [pc, #328]	@ (8008ccc <HAL_RCC_OscConfig+0x618>)
 8008b82:	68da      	ldr	r2, [r3, #12]
 8008b84:	4b52      	ldr	r3, [pc, #328]	@ (8008cd0 <HAL_RCC_OscConfig+0x61c>)
 8008b86:	4013      	ands	r3, r2
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	6a11      	ldr	r1, [r2, #32]
 8008b8c:	687a      	ldr	r2, [r7, #4]
 8008b8e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008b90:	3a01      	subs	r2, #1
 8008b92:	0112      	lsls	r2, r2, #4
 8008b94:	4311      	orrs	r1, r2
 8008b96:	687a      	ldr	r2, [r7, #4]
 8008b98:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008b9a:	0212      	lsls	r2, r2, #8
 8008b9c:	4311      	orrs	r1, r2
 8008b9e:	687a      	ldr	r2, [r7, #4]
 8008ba0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008ba2:	0852      	lsrs	r2, r2, #1
 8008ba4:	3a01      	subs	r2, #1
 8008ba6:	0552      	lsls	r2, r2, #21
 8008ba8:	4311      	orrs	r1, r2
 8008baa:	687a      	ldr	r2, [r7, #4]
 8008bac:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008bae:	0852      	lsrs	r2, r2, #1
 8008bb0:	3a01      	subs	r2, #1
 8008bb2:	0652      	lsls	r2, r2, #25
 8008bb4:	4311      	orrs	r1, r2
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008bba:	06d2      	lsls	r2, r2, #27
 8008bbc:	430a      	orrs	r2, r1
 8008bbe:	4943      	ldr	r1, [pc, #268]	@ (8008ccc <HAL_RCC_OscConfig+0x618>)
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008bc4:	4b41      	ldr	r3, [pc, #260]	@ (8008ccc <HAL_RCC_OscConfig+0x618>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4a40      	ldr	r2, [pc, #256]	@ (8008ccc <HAL_RCC_OscConfig+0x618>)
 8008bca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008bce:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008bd0:	4b3e      	ldr	r3, [pc, #248]	@ (8008ccc <HAL_RCC_OscConfig+0x618>)
 8008bd2:	68db      	ldr	r3, [r3, #12]
 8008bd4:	4a3d      	ldr	r2, [pc, #244]	@ (8008ccc <HAL_RCC_OscConfig+0x618>)
 8008bd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008bda:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bdc:	f7fd fbec 	bl	80063b8 <HAL_GetTick>
 8008be0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008be2:	e008      	b.n	8008bf6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008be4:	f7fd fbe8 	bl	80063b8 <HAL_GetTick>
 8008be8:	4602      	mov	r2, r0
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	1ad3      	subs	r3, r2, r3
 8008bee:	2b02      	cmp	r3, #2
 8008bf0:	d901      	bls.n	8008bf6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8008bf2:	2303      	movs	r3, #3
 8008bf4:	e066      	b.n	8008cc4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008bf6:	4b35      	ldr	r3, [pc, #212]	@ (8008ccc <HAL_RCC_OscConfig+0x618>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d0f0      	beq.n	8008be4 <HAL_RCC_OscConfig+0x530>
 8008c02:	e05e      	b.n	8008cc2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c04:	4b31      	ldr	r3, [pc, #196]	@ (8008ccc <HAL_RCC_OscConfig+0x618>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4a30      	ldr	r2, [pc, #192]	@ (8008ccc <HAL_RCC_OscConfig+0x618>)
 8008c0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008c0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c10:	f7fd fbd2 	bl	80063b8 <HAL_GetTick>
 8008c14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008c16:	e008      	b.n	8008c2a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c18:	f7fd fbce 	bl	80063b8 <HAL_GetTick>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	1ad3      	subs	r3, r2, r3
 8008c22:	2b02      	cmp	r3, #2
 8008c24:	d901      	bls.n	8008c2a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8008c26:	2303      	movs	r3, #3
 8008c28:	e04c      	b.n	8008cc4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008c2a:	4b28      	ldr	r3, [pc, #160]	@ (8008ccc <HAL_RCC_OscConfig+0x618>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d1f0      	bne.n	8008c18 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008c36:	4b25      	ldr	r3, [pc, #148]	@ (8008ccc <HAL_RCC_OscConfig+0x618>)
 8008c38:	68da      	ldr	r2, [r3, #12]
 8008c3a:	4924      	ldr	r1, [pc, #144]	@ (8008ccc <HAL_RCC_OscConfig+0x618>)
 8008c3c:	4b25      	ldr	r3, [pc, #148]	@ (8008cd4 <HAL_RCC_OscConfig+0x620>)
 8008c3e:	4013      	ands	r3, r2
 8008c40:	60cb      	str	r3, [r1, #12]
 8008c42:	e03e      	b.n	8008cc2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	69db      	ldr	r3, [r3, #28]
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	d101      	bne.n	8008c50 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	e039      	b.n	8008cc4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008c50:	4b1e      	ldr	r3, [pc, #120]	@ (8008ccc <HAL_RCC_OscConfig+0x618>)
 8008c52:	68db      	ldr	r3, [r3, #12]
 8008c54:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	f003 0203 	and.w	r2, r3, #3
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6a1b      	ldr	r3, [r3, #32]
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d12c      	bne.n	8008cbe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c6e:	3b01      	subs	r3, #1
 8008c70:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d123      	bne.n	8008cbe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c80:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d11b      	bne.n	8008cbe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c90:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d113      	bne.n	8008cbe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ca0:	085b      	lsrs	r3, r3, #1
 8008ca2:	3b01      	subs	r3, #1
 8008ca4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d109      	bne.n	8008cbe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cb4:	085b      	lsrs	r3, r3, #1
 8008cb6:	3b01      	subs	r3, #1
 8008cb8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d001      	beq.n	8008cc2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	e000      	b.n	8008cc4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8008cc2:	2300      	movs	r3, #0
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3720      	adds	r7, #32
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}
 8008ccc:	40021000 	.word	0x40021000
 8008cd0:	019f800c 	.word	0x019f800c
 8008cd4:	feeefffc 	.word	0xfeeefffc

08008cd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b086      	sub	sp, #24
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d101      	bne.n	8008cf0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008cec:	2301      	movs	r3, #1
 8008cee:	e11e      	b.n	8008f2e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008cf0:	4b91      	ldr	r3, [pc, #580]	@ (8008f38 <HAL_RCC_ClockConfig+0x260>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f003 030f 	and.w	r3, r3, #15
 8008cf8:	683a      	ldr	r2, [r7, #0]
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	d910      	bls.n	8008d20 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008cfe:	4b8e      	ldr	r3, [pc, #568]	@ (8008f38 <HAL_RCC_ClockConfig+0x260>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f023 020f 	bic.w	r2, r3, #15
 8008d06:	498c      	ldr	r1, [pc, #560]	@ (8008f38 <HAL_RCC_ClockConfig+0x260>)
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d0e:	4b8a      	ldr	r3, [pc, #552]	@ (8008f38 <HAL_RCC_ClockConfig+0x260>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f003 030f 	and.w	r3, r3, #15
 8008d16:	683a      	ldr	r2, [r7, #0]
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d001      	beq.n	8008d20 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	e106      	b.n	8008f2e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f003 0301 	and.w	r3, r3, #1
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d073      	beq.n	8008e14 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	2b03      	cmp	r3, #3
 8008d32:	d129      	bne.n	8008d88 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008d34:	4b81      	ldr	r3, [pc, #516]	@ (8008f3c <HAL_RCC_ClockConfig+0x264>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d101      	bne.n	8008d44 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008d40:	2301      	movs	r3, #1
 8008d42:	e0f4      	b.n	8008f2e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008d44:	f000 f99e 	bl	8009084 <RCC_GetSysClockFreqFromPLLSource>
 8008d48:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	4a7c      	ldr	r2, [pc, #496]	@ (8008f40 <HAL_RCC_ClockConfig+0x268>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d93f      	bls.n	8008dd2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008d52:	4b7a      	ldr	r3, [pc, #488]	@ (8008f3c <HAL_RCC_ClockConfig+0x264>)
 8008d54:	689b      	ldr	r3, [r3, #8]
 8008d56:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d009      	beq.n	8008d72 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d033      	beq.n	8008dd2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d12f      	bne.n	8008dd2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008d72:	4b72      	ldr	r3, [pc, #456]	@ (8008f3c <HAL_RCC_ClockConfig+0x264>)
 8008d74:	689b      	ldr	r3, [r3, #8]
 8008d76:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008d7a:	4a70      	ldr	r2, [pc, #448]	@ (8008f3c <HAL_RCC_ClockConfig+0x264>)
 8008d7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d80:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008d82:	2380      	movs	r3, #128	@ 0x80
 8008d84:	617b      	str	r3, [r7, #20]
 8008d86:	e024      	b.n	8008dd2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	2b02      	cmp	r3, #2
 8008d8e:	d107      	bne.n	8008da0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008d90:	4b6a      	ldr	r3, [pc, #424]	@ (8008f3c <HAL_RCC_ClockConfig+0x264>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d109      	bne.n	8008db0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	e0c6      	b.n	8008f2e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008da0:	4b66      	ldr	r3, [pc, #408]	@ (8008f3c <HAL_RCC_ClockConfig+0x264>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d101      	bne.n	8008db0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008dac:	2301      	movs	r3, #1
 8008dae:	e0be      	b.n	8008f2e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008db0:	f000 f8ce 	bl	8008f50 <HAL_RCC_GetSysClockFreq>
 8008db4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008db6:	693b      	ldr	r3, [r7, #16]
 8008db8:	4a61      	ldr	r2, [pc, #388]	@ (8008f40 <HAL_RCC_ClockConfig+0x268>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d909      	bls.n	8008dd2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008dbe:	4b5f      	ldr	r3, [pc, #380]	@ (8008f3c <HAL_RCC_ClockConfig+0x264>)
 8008dc0:	689b      	ldr	r3, [r3, #8]
 8008dc2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008dc6:	4a5d      	ldr	r2, [pc, #372]	@ (8008f3c <HAL_RCC_ClockConfig+0x264>)
 8008dc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008dcc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008dce:	2380      	movs	r3, #128	@ 0x80
 8008dd0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008dd2:	4b5a      	ldr	r3, [pc, #360]	@ (8008f3c <HAL_RCC_ClockConfig+0x264>)
 8008dd4:	689b      	ldr	r3, [r3, #8]
 8008dd6:	f023 0203 	bic.w	r2, r3, #3
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	685b      	ldr	r3, [r3, #4]
 8008dde:	4957      	ldr	r1, [pc, #348]	@ (8008f3c <HAL_RCC_ClockConfig+0x264>)
 8008de0:	4313      	orrs	r3, r2
 8008de2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008de4:	f7fd fae8 	bl	80063b8 <HAL_GetTick>
 8008de8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008dea:	e00a      	b.n	8008e02 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008dec:	f7fd fae4 	bl	80063b8 <HAL_GetTick>
 8008df0:	4602      	mov	r2, r0
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	1ad3      	subs	r3, r2, r3
 8008df6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d901      	bls.n	8008e02 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8008dfe:	2303      	movs	r3, #3
 8008e00:	e095      	b.n	8008f2e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e02:	4b4e      	ldr	r3, [pc, #312]	@ (8008f3c <HAL_RCC_ClockConfig+0x264>)
 8008e04:	689b      	ldr	r3, [r3, #8]
 8008e06:	f003 020c 	and.w	r2, r3, #12
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	009b      	lsls	r3, r3, #2
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d1eb      	bne.n	8008dec <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f003 0302 	and.w	r3, r3, #2
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d023      	beq.n	8008e68 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f003 0304 	and.w	r3, r3, #4
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d005      	beq.n	8008e38 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008e2c:	4b43      	ldr	r3, [pc, #268]	@ (8008f3c <HAL_RCC_ClockConfig+0x264>)
 8008e2e:	689b      	ldr	r3, [r3, #8]
 8008e30:	4a42      	ldr	r2, [pc, #264]	@ (8008f3c <HAL_RCC_ClockConfig+0x264>)
 8008e32:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008e36:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f003 0308 	and.w	r3, r3, #8
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d007      	beq.n	8008e54 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008e44:	4b3d      	ldr	r3, [pc, #244]	@ (8008f3c <HAL_RCC_ClockConfig+0x264>)
 8008e46:	689b      	ldr	r3, [r3, #8]
 8008e48:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008e4c:	4a3b      	ldr	r2, [pc, #236]	@ (8008f3c <HAL_RCC_ClockConfig+0x264>)
 8008e4e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008e52:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e54:	4b39      	ldr	r3, [pc, #228]	@ (8008f3c <HAL_RCC_ClockConfig+0x264>)
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	689b      	ldr	r3, [r3, #8]
 8008e60:	4936      	ldr	r1, [pc, #216]	@ (8008f3c <HAL_RCC_ClockConfig+0x264>)
 8008e62:	4313      	orrs	r3, r2
 8008e64:	608b      	str	r3, [r1, #8]
 8008e66:	e008      	b.n	8008e7a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	2b80      	cmp	r3, #128	@ 0x80
 8008e6c:	d105      	bne.n	8008e7a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008e6e:	4b33      	ldr	r3, [pc, #204]	@ (8008f3c <HAL_RCC_ClockConfig+0x264>)
 8008e70:	689b      	ldr	r3, [r3, #8]
 8008e72:	4a32      	ldr	r2, [pc, #200]	@ (8008f3c <HAL_RCC_ClockConfig+0x264>)
 8008e74:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008e78:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008e7a:	4b2f      	ldr	r3, [pc, #188]	@ (8008f38 <HAL_RCC_ClockConfig+0x260>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f003 030f 	and.w	r3, r3, #15
 8008e82:	683a      	ldr	r2, [r7, #0]
 8008e84:	429a      	cmp	r2, r3
 8008e86:	d21d      	bcs.n	8008ec4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e88:	4b2b      	ldr	r3, [pc, #172]	@ (8008f38 <HAL_RCC_ClockConfig+0x260>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f023 020f 	bic.w	r2, r3, #15
 8008e90:	4929      	ldr	r1, [pc, #164]	@ (8008f38 <HAL_RCC_ClockConfig+0x260>)
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	4313      	orrs	r3, r2
 8008e96:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008e98:	f7fd fa8e 	bl	80063b8 <HAL_GetTick>
 8008e9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e9e:	e00a      	b.n	8008eb6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ea0:	f7fd fa8a 	bl	80063b8 <HAL_GetTick>
 8008ea4:	4602      	mov	r2, r0
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	1ad3      	subs	r3, r2, r3
 8008eaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d901      	bls.n	8008eb6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008eb2:	2303      	movs	r3, #3
 8008eb4:	e03b      	b.n	8008f2e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008eb6:	4b20      	ldr	r3, [pc, #128]	@ (8008f38 <HAL_RCC_ClockConfig+0x260>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f003 030f 	and.w	r3, r3, #15
 8008ebe:	683a      	ldr	r2, [r7, #0]
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d1ed      	bne.n	8008ea0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f003 0304 	and.w	r3, r3, #4
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d008      	beq.n	8008ee2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008ed0:	4b1a      	ldr	r3, [pc, #104]	@ (8008f3c <HAL_RCC_ClockConfig+0x264>)
 8008ed2:	689b      	ldr	r3, [r3, #8]
 8008ed4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	68db      	ldr	r3, [r3, #12]
 8008edc:	4917      	ldr	r1, [pc, #92]	@ (8008f3c <HAL_RCC_ClockConfig+0x264>)
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f003 0308 	and.w	r3, r3, #8
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d009      	beq.n	8008f02 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008eee:	4b13      	ldr	r3, [pc, #76]	@ (8008f3c <HAL_RCC_ClockConfig+0x264>)
 8008ef0:	689b      	ldr	r3, [r3, #8]
 8008ef2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	691b      	ldr	r3, [r3, #16]
 8008efa:	00db      	lsls	r3, r3, #3
 8008efc:	490f      	ldr	r1, [pc, #60]	@ (8008f3c <HAL_RCC_ClockConfig+0x264>)
 8008efe:	4313      	orrs	r3, r2
 8008f00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008f02:	f000 f825 	bl	8008f50 <HAL_RCC_GetSysClockFreq>
 8008f06:	4602      	mov	r2, r0
 8008f08:	4b0c      	ldr	r3, [pc, #48]	@ (8008f3c <HAL_RCC_ClockConfig+0x264>)
 8008f0a:	689b      	ldr	r3, [r3, #8]
 8008f0c:	091b      	lsrs	r3, r3, #4
 8008f0e:	f003 030f 	and.w	r3, r3, #15
 8008f12:	490c      	ldr	r1, [pc, #48]	@ (8008f44 <HAL_RCC_ClockConfig+0x26c>)
 8008f14:	5ccb      	ldrb	r3, [r1, r3]
 8008f16:	f003 031f 	and.w	r3, r3, #31
 8008f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8008f1e:	4a0a      	ldr	r2, [pc, #40]	@ (8008f48 <HAL_RCC_ClockConfig+0x270>)
 8008f20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008f22:	4b0a      	ldr	r3, [pc, #40]	@ (8008f4c <HAL_RCC_ClockConfig+0x274>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	4618      	mov	r0, r3
 8008f28:	f7fd f9fa 	bl	8006320 <HAL_InitTick>
 8008f2c:	4603      	mov	r3, r0
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3718      	adds	r7, #24
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}
 8008f36:	bf00      	nop
 8008f38:	40022000 	.word	0x40022000
 8008f3c:	40021000 	.word	0x40021000
 8008f40:	04c4b400 	.word	0x04c4b400
 8008f44:	080111c8 	.word	0x080111c8
 8008f48:	20000264 	.word	0x20000264
 8008f4c:	20000268 	.word	0x20000268

08008f50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b087      	sub	sp, #28
 8008f54:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008f56:	4b2c      	ldr	r3, [pc, #176]	@ (8009008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008f58:	689b      	ldr	r3, [r3, #8]
 8008f5a:	f003 030c 	and.w	r3, r3, #12
 8008f5e:	2b04      	cmp	r3, #4
 8008f60:	d102      	bne.n	8008f68 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008f62:	4b2a      	ldr	r3, [pc, #168]	@ (800900c <HAL_RCC_GetSysClockFreq+0xbc>)
 8008f64:	613b      	str	r3, [r7, #16]
 8008f66:	e047      	b.n	8008ff8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008f68:	4b27      	ldr	r3, [pc, #156]	@ (8009008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008f6a:	689b      	ldr	r3, [r3, #8]
 8008f6c:	f003 030c 	and.w	r3, r3, #12
 8008f70:	2b08      	cmp	r3, #8
 8008f72:	d102      	bne.n	8008f7a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008f74:	4b26      	ldr	r3, [pc, #152]	@ (8009010 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008f76:	613b      	str	r3, [r7, #16]
 8008f78:	e03e      	b.n	8008ff8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008f7a:	4b23      	ldr	r3, [pc, #140]	@ (8009008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008f7c:	689b      	ldr	r3, [r3, #8]
 8008f7e:	f003 030c 	and.w	r3, r3, #12
 8008f82:	2b0c      	cmp	r3, #12
 8008f84:	d136      	bne.n	8008ff4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008f86:	4b20      	ldr	r3, [pc, #128]	@ (8009008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008f88:	68db      	ldr	r3, [r3, #12]
 8008f8a:	f003 0303 	and.w	r3, r3, #3
 8008f8e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008f90:	4b1d      	ldr	r3, [pc, #116]	@ (8009008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008f92:	68db      	ldr	r3, [r3, #12]
 8008f94:	091b      	lsrs	r3, r3, #4
 8008f96:	f003 030f 	and.w	r3, r3, #15
 8008f9a:	3301      	adds	r3, #1
 8008f9c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2b03      	cmp	r3, #3
 8008fa2:	d10c      	bne.n	8008fbe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008fa4:	4a1a      	ldr	r2, [pc, #104]	@ (8009010 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fac:	4a16      	ldr	r2, [pc, #88]	@ (8009008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008fae:	68d2      	ldr	r2, [r2, #12]
 8008fb0:	0a12      	lsrs	r2, r2, #8
 8008fb2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008fb6:	fb02 f303 	mul.w	r3, r2, r3
 8008fba:	617b      	str	r3, [r7, #20]
      break;
 8008fbc:	e00c      	b.n	8008fd8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008fbe:	4a13      	ldr	r2, [pc, #76]	@ (800900c <HAL_RCC_GetSysClockFreq+0xbc>)
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fc6:	4a10      	ldr	r2, [pc, #64]	@ (8009008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008fc8:	68d2      	ldr	r2, [r2, #12]
 8008fca:	0a12      	lsrs	r2, r2, #8
 8008fcc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008fd0:	fb02 f303 	mul.w	r3, r2, r3
 8008fd4:	617b      	str	r3, [r7, #20]
      break;
 8008fd6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8009008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008fda:	68db      	ldr	r3, [r3, #12]
 8008fdc:	0e5b      	lsrs	r3, r3, #25
 8008fde:	f003 0303 	and.w	r3, r3, #3
 8008fe2:	3301      	adds	r3, #1
 8008fe4:	005b      	lsls	r3, r3, #1
 8008fe6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008fe8:	697a      	ldr	r2, [r7, #20]
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ff0:	613b      	str	r3, [r7, #16]
 8008ff2:	e001      	b.n	8008ff8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008ff8:	693b      	ldr	r3, [r7, #16]
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	371c      	adds	r7, #28
 8008ffe:	46bd      	mov	sp, r7
 8009000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009004:	4770      	bx	lr
 8009006:	bf00      	nop
 8009008:	40021000 	.word	0x40021000
 800900c:	00f42400 	.word	0x00f42400
 8009010:	016e3600 	.word	0x016e3600

08009014 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009014:	b480      	push	{r7}
 8009016:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009018:	4b03      	ldr	r3, [pc, #12]	@ (8009028 <HAL_RCC_GetHCLKFreq+0x14>)
 800901a:	681b      	ldr	r3, [r3, #0]
}
 800901c:	4618      	mov	r0, r3
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr
 8009026:	bf00      	nop
 8009028:	20000264 	.word	0x20000264

0800902c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009030:	f7ff fff0 	bl	8009014 <HAL_RCC_GetHCLKFreq>
 8009034:	4602      	mov	r2, r0
 8009036:	4b06      	ldr	r3, [pc, #24]	@ (8009050 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009038:	689b      	ldr	r3, [r3, #8]
 800903a:	0a1b      	lsrs	r3, r3, #8
 800903c:	f003 0307 	and.w	r3, r3, #7
 8009040:	4904      	ldr	r1, [pc, #16]	@ (8009054 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009042:	5ccb      	ldrb	r3, [r1, r3]
 8009044:	f003 031f 	and.w	r3, r3, #31
 8009048:	fa22 f303 	lsr.w	r3, r2, r3
}
 800904c:	4618      	mov	r0, r3
 800904e:	bd80      	pop	{r7, pc}
 8009050:	40021000 	.word	0x40021000
 8009054:	080111d8 	.word	0x080111d8

08009058 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800905c:	f7ff ffda 	bl	8009014 <HAL_RCC_GetHCLKFreq>
 8009060:	4602      	mov	r2, r0
 8009062:	4b06      	ldr	r3, [pc, #24]	@ (800907c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009064:	689b      	ldr	r3, [r3, #8]
 8009066:	0adb      	lsrs	r3, r3, #11
 8009068:	f003 0307 	and.w	r3, r3, #7
 800906c:	4904      	ldr	r1, [pc, #16]	@ (8009080 <HAL_RCC_GetPCLK2Freq+0x28>)
 800906e:	5ccb      	ldrb	r3, [r1, r3]
 8009070:	f003 031f 	and.w	r3, r3, #31
 8009074:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009078:	4618      	mov	r0, r3
 800907a:	bd80      	pop	{r7, pc}
 800907c:	40021000 	.word	0x40021000
 8009080:	080111d8 	.word	0x080111d8

08009084 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009084:	b480      	push	{r7}
 8009086:	b087      	sub	sp, #28
 8009088:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800908a:	4b1e      	ldr	r3, [pc, #120]	@ (8009104 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800908c:	68db      	ldr	r3, [r3, #12]
 800908e:	f003 0303 	and.w	r3, r3, #3
 8009092:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009094:	4b1b      	ldr	r3, [pc, #108]	@ (8009104 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009096:	68db      	ldr	r3, [r3, #12]
 8009098:	091b      	lsrs	r3, r3, #4
 800909a:	f003 030f 	and.w	r3, r3, #15
 800909e:	3301      	adds	r3, #1
 80090a0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	2b03      	cmp	r3, #3
 80090a6:	d10c      	bne.n	80090c2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80090a8:	4a17      	ldr	r2, [pc, #92]	@ (8009108 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80090b0:	4a14      	ldr	r2, [pc, #80]	@ (8009104 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80090b2:	68d2      	ldr	r2, [r2, #12]
 80090b4:	0a12      	lsrs	r2, r2, #8
 80090b6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80090ba:	fb02 f303 	mul.w	r3, r2, r3
 80090be:	617b      	str	r3, [r7, #20]
    break;
 80090c0:	e00c      	b.n	80090dc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80090c2:	4a12      	ldr	r2, [pc, #72]	@ (800910c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80090ca:	4a0e      	ldr	r2, [pc, #56]	@ (8009104 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80090cc:	68d2      	ldr	r2, [r2, #12]
 80090ce:	0a12      	lsrs	r2, r2, #8
 80090d0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80090d4:	fb02 f303 	mul.w	r3, r2, r3
 80090d8:	617b      	str	r3, [r7, #20]
    break;
 80090da:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80090dc:	4b09      	ldr	r3, [pc, #36]	@ (8009104 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80090de:	68db      	ldr	r3, [r3, #12]
 80090e0:	0e5b      	lsrs	r3, r3, #25
 80090e2:	f003 0303 	and.w	r3, r3, #3
 80090e6:	3301      	adds	r3, #1
 80090e8:	005b      	lsls	r3, r3, #1
 80090ea:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80090ec:	697a      	ldr	r2, [r7, #20]
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80090f4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80090f6:	687b      	ldr	r3, [r7, #4]
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	371c      	adds	r7, #28
 80090fc:	46bd      	mov	sp, r7
 80090fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009102:	4770      	bx	lr
 8009104:	40021000 	.word	0x40021000
 8009108:	016e3600 	.word	0x016e3600
 800910c:	00f42400 	.word	0x00f42400

08009110 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b086      	sub	sp, #24
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009118:	2300      	movs	r3, #0
 800911a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800911c:	2300      	movs	r3, #0
 800911e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009128:	2b00      	cmp	r3, #0
 800912a:	f000 8098 	beq.w	800925e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800912e:	2300      	movs	r3, #0
 8009130:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009132:	4b43      	ldr	r3, [pc, #268]	@ (8009240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009134:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009136:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800913a:	2b00      	cmp	r3, #0
 800913c:	d10d      	bne.n	800915a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800913e:	4b40      	ldr	r3, [pc, #256]	@ (8009240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009142:	4a3f      	ldr	r2, [pc, #252]	@ (8009240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009144:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009148:	6593      	str	r3, [r2, #88]	@ 0x58
 800914a:	4b3d      	ldr	r3, [pc, #244]	@ (8009240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800914c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800914e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009152:	60bb      	str	r3, [r7, #8]
 8009154:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009156:	2301      	movs	r3, #1
 8009158:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800915a:	4b3a      	ldr	r3, [pc, #232]	@ (8009244 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	4a39      	ldr	r2, [pc, #228]	@ (8009244 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009160:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009164:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009166:	f7fd f927 	bl	80063b8 <HAL_GetTick>
 800916a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800916c:	e009      	b.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800916e:	f7fd f923 	bl	80063b8 <HAL_GetTick>
 8009172:	4602      	mov	r2, r0
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	1ad3      	subs	r3, r2, r3
 8009178:	2b02      	cmp	r3, #2
 800917a:	d902      	bls.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800917c:	2303      	movs	r3, #3
 800917e:	74fb      	strb	r3, [r7, #19]
        break;
 8009180:	e005      	b.n	800918e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009182:	4b30      	ldr	r3, [pc, #192]	@ (8009244 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800918a:	2b00      	cmp	r3, #0
 800918c:	d0ef      	beq.n	800916e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800918e:	7cfb      	ldrb	r3, [r7, #19]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d159      	bne.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009194:	4b2a      	ldr	r3, [pc, #168]	@ (8009240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800919a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800919e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d01e      	beq.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091aa:	697a      	ldr	r2, [r7, #20]
 80091ac:	429a      	cmp	r2, r3
 80091ae:	d019      	beq.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80091b0:	4b23      	ldr	r3, [pc, #140]	@ (8009240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80091b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80091ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80091bc:	4b20      	ldr	r3, [pc, #128]	@ (8009240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80091be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091c2:	4a1f      	ldr	r2, [pc, #124]	@ (8009240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80091c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80091c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80091cc:	4b1c      	ldr	r3, [pc, #112]	@ (8009240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80091ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091d2:	4a1b      	ldr	r2, [pc, #108]	@ (8009240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80091d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80091d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80091dc:	4a18      	ldr	r2, [pc, #96]	@ (8009240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	f003 0301 	and.w	r3, r3, #1
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d016      	beq.n	800921c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091ee:	f7fd f8e3 	bl	80063b8 <HAL_GetTick>
 80091f2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80091f4:	e00b      	b.n	800920e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80091f6:	f7fd f8df 	bl	80063b8 <HAL_GetTick>
 80091fa:	4602      	mov	r2, r0
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	1ad3      	subs	r3, r2, r3
 8009200:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009204:	4293      	cmp	r3, r2
 8009206:	d902      	bls.n	800920e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8009208:	2303      	movs	r3, #3
 800920a:	74fb      	strb	r3, [r7, #19]
            break;
 800920c:	e006      	b.n	800921c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800920e:	4b0c      	ldr	r3, [pc, #48]	@ (8009240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009210:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009214:	f003 0302 	and.w	r3, r3, #2
 8009218:	2b00      	cmp	r3, #0
 800921a:	d0ec      	beq.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800921c:	7cfb      	ldrb	r3, [r7, #19]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d10b      	bne.n	800923a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009222:	4b07      	ldr	r3, [pc, #28]	@ (8009240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009224:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009228:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009230:	4903      	ldr	r1, [pc, #12]	@ (8009240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009232:	4313      	orrs	r3, r2
 8009234:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8009238:	e008      	b.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800923a:	7cfb      	ldrb	r3, [r7, #19]
 800923c:	74bb      	strb	r3, [r7, #18]
 800923e:	e005      	b.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8009240:	40021000 	.word	0x40021000
 8009244:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009248:	7cfb      	ldrb	r3, [r7, #19]
 800924a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800924c:	7c7b      	ldrb	r3, [r7, #17]
 800924e:	2b01      	cmp	r3, #1
 8009250:	d105      	bne.n	800925e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009252:	4ba7      	ldr	r3, [pc, #668]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009256:	4aa6      	ldr	r2, [pc, #664]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009258:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800925c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f003 0301 	and.w	r3, r3, #1
 8009266:	2b00      	cmp	r3, #0
 8009268:	d00a      	beq.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800926a:	4ba1      	ldr	r3, [pc, #644]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800926c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009270:	f023 0203 	bic.w	r2, r3, #3
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	499d      	ldr	r1, [pc, #628]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800927a:	4313      	orrs	r3, r2
 800927c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f003 0302 	and.w	r3, r3, #2
 8009288:	2b00      	cmp	r3, #0
 800928a:	d00a      	beq.n	80092a2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800928c:	4b98      	ldr	r3, [pc, #608]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800928e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009292:	f023 020c 	bic.w	r2, r3, #12
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	689b      	ldr	r3, [r3, #8]
 800929a:	4995      	ldr	r1, [pc, #596]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800929c:	4313      	orrs	r3, r2
 800929e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f003 0304 	and.w	r3, r3, #4
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d00a      	beq.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80092ae:	4b90      	ldr	r3, [pc, #576]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092b4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	68db      	ldr	r3, [r3, #12]
 80092bc:	498c      	ldr	r1, [pc, #560]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092be:	4313      	orrs	r3, r2
 80092c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f003 0308 	and.w	r3, r3, #8
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d00a      	beq.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80092d0:	4b87      	ldr	r3, [pc, #540]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092d6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	691b      	ldr	r3, [r3, #16]
 80092de:	4984      	ldr	r1, [pc, #528]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092e0:	4313      	orrs	r3, r2
 80092e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f003 0310 	and.w	r3, r3, #16
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d00a      	beq.n	8009308 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80092f2:	4b7f      	ldr	r3, [pc, #508]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	695b      	ldr	r3, [r3, #20]
 8009300:	497b      	ldr	r1, [pc, #492]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009302:	4313      	orrs	r3, r2
 8009304:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f003 0320 	and.w	r3, r3, #32
 8009310:	2b00      	cmp	r3, #0
 8009312:	d00a      	beq.n	800932a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009314:	4b76      	ldr	r3, [pc, #472]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009316:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800931a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	699b      	ldr	r3, [r3, #24]
 8009322:	4973      	ldr	r1, [pc, #460]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009324:	4313      	orrs	r3, r2
 8009326:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009332:	2b00      	cmp	r3, #0
 8009334:	d00a      	beq.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009336:	4b6e      	ldr	r3, [pc, #440]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009338:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800933c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	69db      	ldr	r3, [r3, #28]
 8009344:	496a      	ldr	r1, [pc, #424]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009346:	4313      	orrs	r3, r2
 8009348:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009354:	2b00      	cmp	r3, #0
 8009356:	d00a      	beq.n	800936e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009358:	4b65      	ldr	r3, [pc, #404]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800935a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800935e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6a1b      	ldr	r3, [r3, #32]
 8009366:	4962      	ldr	r1, [pc, #392]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009368:	4313      	orrs	r3, r2
 800936a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009376:	2b00      	cmp	r3, #0
 8009378:	d00a      	beq.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800937a:	4b5d      	ldr	r3, [pc, #372]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800937c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009380:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009388:	4959      	ldr	r1, [pc, #356]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800938a:	4313      	orrs	r3, r2
 800938c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009398:	2b00      	cmp	r3, #0
 800939a:	d00a      	beq.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800939c:	4b54      	ldr	r3, [pc, #336]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800939e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80093a2:	f023 0203 	bic.w	r2, r3, #3
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093aa:	4951      	ldr	r1, [pc, #324]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093ac:	4313      	orrs	r3, r2
 80093ae:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d00a      	beq.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80093be:	4b4c      	ldr	r3, [pc, #304]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093c4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093cc:	4948      	ldr	r1, [pc, #288]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093ce:	4313      	orrs	r3, r2
 80093d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d015      	beq.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80093e0:	4b43      	ldr	r3, [pc, #268]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093ee:	4940      	ldr	r1, [pc, #256]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093f0:	4313      	orrs	r3, r2
 80093f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80093fe:	d105      	bne.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009400:	4b3b      	ldr	r3, [pc, #236]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009402:	68db      	ldr	r3, [r3, #12]
 8009404:	4a3a      	ldr	r2, [pc, #232]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009406:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800940a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009414:	2b00      	cmp	r3, #0
 8009416:	d015      	beq.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009418:	4b35      	ldr	r3, [pc, #212]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800941a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800941e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009426:	4932      	ldr	r1, [pc, #200]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009428:	4313      	orrs	r3, r2
 800942a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009432:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009436:	d105      	bne.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009438:	4b2d      	ldr	r3, [pc, #180]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800943a:	68db      	ldr	r3, [r3, #12]
 800943c:	4a2c      	ldr	r2, [pc, #176]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800943e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009442:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800944c:	2b00      	cmp	r3, #0
 800944e:	d015      	beq.n	800947c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009450:	4b27      	ldr	r3, [pc, #156]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009452:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009456:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800945e:	4924      	ldr	r1, [pc, #144]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009460:	4313      	orrs	r3, r2
 8009462:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800946a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800946e:	d105      	bne.n	800947c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009470:	4b1f      	ldr	r3, [pc, #124]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009472:	68db      	ldr	r3, [r3, #12]
 8009474:	4a1e      	ldr	r2, [pc, #120]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009476:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800947a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009484:	2b00      	cmp	r3, #0
 8009486:	d015      	beq.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009488:	4b19      	ldr	r3, [pc, #100]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800948a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800948e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009496:	4916      	ldr	r1, [pc, #88]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009498:	4313      	orrs	r3, r2
 800949a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80094a6:	d105      	bne.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80094a8:	4b11      	ldr	r3, [pc, #68]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094aa:	68db      	ldr	r3, [r3, #12]
 80094ac:	4a10      	ldr	r2, [pc, #64]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80094b2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d019      	beq.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80094c0:	4b0b      	ldr	r3, [pc, #44]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094c6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094ce:	4908      	ldr	r1, [pc, #32]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094d0:	4313      	orrs	r3, r2
 80094d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80094de:	d109      	bne.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80094e0:	4b03      	ldr	r3, [pc, #12]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094e2:	68db      	ldr	r3, [r3, #12]
 80094e4:	4a02      	ldr	r2, [pc, #8]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80094ea:	60d3      	str	r3, [r2, #12]
 80094ec:	e002      	b.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80094ee:	bf00      	nop
 80094f0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d015      	beq.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009500:	4b29      	ldr	r3, [pc, #164]	@ (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009502:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009506:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800950e:	4926      	ldr	r1, [pc, #152]	@ (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009510:	4313      	orrs	r3, r2
 8009512:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800951a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800951e:	d105      	bne.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009520:	4b21      	ldr	r3, [pc, #132]	@ (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009522:	68db      	ldr	r3, [r3, #12]
 8009524:	4a20      	ldr	r2, [pc, #128]	@ (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009526:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800952a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009534:	2b00      	cmp	r3, #0
 8009536:	d015      	beq.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8009538:	4b1b      	ldr	r3, [pc, #108]	@ (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800953a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800953e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009546:	4918      	ldr	r1, [pc, #96]	@ (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009548:	4313      	orrs	r3, r2
 800954a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009552:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009556:	d105      	bne.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009558:	4b13      	ldr	r3, [pc, #76]	@ (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800955a:	68db      	ldr	r3, [r3, #12]
 800955c:	4a12      	ldr	r2, [pc, #72]	@ (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800955e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009562:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800956c:	2b00      	cmp	r3, #0
 800956e:	d015      	beq.n	800959c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009570:	4b0d      	ldr	r3, [pc, #52]	@ (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009572:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009576:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800957e:	490a      	ldr	r1, [pc, #40]	@ (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009580:	4313      	orrs	r3, r2
 8009582:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800958a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800958e:	d105      	bne.n	800959c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009590:	4b05      	ldr	r3, [pc, #20]	@ (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009592:	68db      	ldr	r3, [r3, #12]
 8009594:	4a04      	ldr	r2, [pc, #16]	@ (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009596:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800959a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800959c:	7cbb      	ldrb	r3, [r7, #18]
}
 800959e:	4618      	mov	r0, r3
 80095a0:	3718      	adds	r7, #24
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}
 80095a6:	bf00      	nop
 80095a8:	40021000 	.word	0x40021000

080095ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b084      	sub	sp, #16
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d101      	bne.n	80095be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80095ba:	2301      	movs	r3, #1
 80095bc:	e09d      	b.n	80096fa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d108      	bne.n	80095d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	685b      	ldr	r3, [r3, #4]
 80095ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80095ce:	d009      	beq.n	80095e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2200      	movs	r2, #0
 80095d4:	61da      	str	r2, [r3, #28]
 80095d6:	e005      	b.n	80095e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2200      	movs	r2, #0
 80095dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2200      	movs	r2, #0
 80095e2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2200      	movs	r2, #0
 80095e8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80095f0:	b2db      	uxtb	r3, r3
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d106      	bne.n	8009604 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2200      	movs	r2, #0
 80095fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f7fb ff9c 	bl	800553c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2202      	movs	r2, #2
 8009608:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	681a      	ldr	r2, [r3, #0]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800961a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	68db      	ldr	r3, [r3, #12]
 8009620:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009624:	d902      	bls.n	800962c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009626:	2300      	movs	r3, #0
 8009628:	60fb      	str	r3, [r7, #12]
 800962a:	e002      	b.n	8009632 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800962c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009630:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	68db      	ldr	r3, [r3, #12]
 8009636:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800963a:	d007      	beq.n	800964c <HAL_SPI_Init+0xa0>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	68db      	ldr	r3, [r3, #12]
 8009640:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009644:	d002      	beq.n	800964c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2200      	movs	r2, #0
 800964a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	689b      	ldr	r3, [r3, #8]
 8009658:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800965c:	431a      	orrs	r2, r3
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	691b      	ldr	r3, [r3, #16]
 8009662:	f003 0302 	and.w	r3, r3, #2
 8009666:	431a      	orrs	r2, r3
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	695b      	ldr	r3, [r3, #20]
 800966c:	f003 0301 	and.w	r3, r3, #1
 8009670:	431a      	orrs	r2, r3
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	699b      	ldr	r3, [r3, #24]
 8009676:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800967a:	431a      	orrs	r2, r3
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	69db      	ldr	r3, [r3, #28]
 8009680:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009684:	431a      	orrs	r2, r3
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6a1b      	ldr	r3, [r3, #32]
 800968a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800968e:	ea42 0103 	orr.w	r1, r2, r3
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009696:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	430a      	orrs	r2, r1
 80096a0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	699b      	ldr	r3, [r3, #24]
 80096a6:	0c1b      	lsrs	r3, r3, #16
 80096a8:	f003 0204 	and.w	r2, r3, #4
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096b0:	f003 0310 	and.w	r3, r3, #16
 80096b4:	431a      	orrs	r2, r3
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096ba:	f003 0308 	and.w	r3, r3, #8
 80096be:	431a      	orrs	r2, r3
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	68db      	ldr	r3, [r3, #12]
 80096c4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80096c8:	ea42 0103 	orr.w	r1, r2, r3
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	430a      	orrs	r2, r1
 80096d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	69da      	ldr	r2, [r3, #28]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80096e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2200      	movs	r2, #0
 80096ee:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2201      	movs	r2, #1
 80096f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80096f8:	2300      	movs	r3, #0
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3710      	adds	r7, #16
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}

08009702 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8009702:	b580      	push	{r7, lr}
 8009704:	b08a      	sub	sp, #40	@ 0x28
 8009706:	af00      	add	r7, sp, #0
 8009708:	60f8      	str	r0, [r7, #12]
 800970a:	60b9      	str	r1, [r7, #8]
 800970c:	607a      	str	r2, [r7, #4]
 800970e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009710:	2301      	movs	r3, #1
 8009712:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009714:	f7fc fe50 	bl	80063b8 <HAL_GetTick>
 8009718:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009720:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	685b      	ldr	r3, [r3, #4]
 8009726:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8009728:	887b      	ldrh	r3, [r7, #2]
 800972a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800972c:	887b      	ldrh	r3, [r7, #2]
 800972e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009730:	7ffb      	ldrb	r3, [r7, #31]
 8009732:	2b01      	cmp	r3, #1
 8009734:	d00c      	beq.n	8009750 <HAL_SPI_TransmitReceive+0x4e>
 8009736:	69bb      	ldr	r3, [r7, #24]
 8009738:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800973c:	d106      	bne.n	800974c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	689b      	ldr	r3, [r3, #8]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d102      	bne.n	800974c <HAL_SPI_TransmitReceive+0x4a>
 8009746:	7ffb      	ldrb	r3, [r7, #31]
 8009748:	2b04      	cmp	r3, #4
 800974a:	d001      	beq.n	8009750 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800974c:	2302      	movs	r3, #2
 800974e:	e1f3      	b.n	8009b38 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d005      	beq.n	8009762 <HAL_SPI_TransmitReceive+0x60>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d002      	beq.n	8009762 <HAL_SPI_TransmitReceive+0x60>
 800975c:	887b      	ldrh	r3, [r7, #2]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d101      	bne.n	8009766 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8009762:	2301      	movs	r3, #1
 8009764:	e1e8      	b.n	8009b38 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800976c:	2b01      	cmp	r3, #1
 800976e:	d101      	bne.n	8009774 <HAL_SPI_TransmitReceive+0x72>
 8009770:	2302      	movs	r3, #2
 8009772:	e1e1      	b.n	8009b38 <HAL_SPI_TransmitReceive+0x436>
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	2201      	movs	r2, #1
 8009778:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009782:	b2db      	uxtb	r3, r3
 8009784:	2b04      	cmp	r3, #4
 8009786:	d003      	beq.n	8009790 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	2205      	movs	r2, #5
 800978c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	2200      	movs	r2, #0
 8009794:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	887a      	ldrh	r2, [r7, #2]
 80097a0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	887a      	ldrh	r2, [r7, #2]
 80097a8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	68ba      	ldr	r2, [r7, #8]
 80097b0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	887a      	ldrh	r2, [r7, #2]
 80097b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	887a      	ldrh	r2, [r7, #2]
 80097bc:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	2200      	movs	r2, #0
 80097c2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	2200      	movs	r2, #0
 80097c8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	68db      	ldr	r3, [r3, #12]
 80097ce:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80097d2:	d802      	bhi.n	80097da <HAL_SPI_TransmitReceive+0xd8>
 80097d4:	8abb      	ldrh	r3, [r7, #20]
 80097d6:	2b01      	cmp	r3, #1
 80097d8:	d908      	bls.n	80097ec <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	685a      	ldr	r2, [r3, #4]
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80097e8:	605a      	str	r2, [r3, #4]
 80097ea:	e007      	b.n	80097fc <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	685a      	ldr	r2, [r3, #4]
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80097fa:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009806:	2b40      	cmp	r3, #64	@ 0x40
 8009808:	d007      	beq.n	800981a <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	681a      	ldr	r2, [r3, #0]
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009818:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	68db      	ldr	r3, [r3, #12]
 800981e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009822:	f240 8083 	bls.w	800992c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	685b      	ldr	r3, [r3, #4]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d002      	beq.n	8009834 <HAL_SPI_TransmitReceive+0x132>
 800982e:	8afb      	ldrh	r3, [r7, #22]
 8009830:	2b01      	cmp	r3, #1
 8009832:	d16f      	bne.n	8009914 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009838:	881a      	ldrh	r2, [r3, #0]
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009844:	1c9a      	adds	r2, r3, #2
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800984e:	b29b      	uxth	r3, r3
 8009850:	3b01      	subs	r3, #1
 8009852:	b29a      	uxth	r2, r3
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009858:	e05c      	b.n	8009914 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	689b      	ldr	r3, [r3, #8]
 8009860:	f003 0302 	and.w	r3, r3, #2
 8009864:	2b02      	cmp	r3, #2
 8009866:	d11b      	bne.n	80098a0 <HAL_SPI_TransmitReceive+0x19e>
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800986c:	b29b      	uxth	r3, r3
 800986e:	2b00      	cmp	r3, #0
 8009870:	d016      	beq.n	80098a0 <HAL_SPI_TransmitReceive+0x19e>
 8009872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009874:	2b01      	cmp	r3, #1
 8009876:	d113      	bne.n	80098a0 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800987c:	881a      	ldrh	r2, [r3, #0]
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009888:	1c9a      	adds	r2, r3, #2
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009892:	b29b      	uxth	r3, r3
 8009894:	3b01      	subs	r3, #1
 8009896:	b29a      	uxth	r2, r3
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800989c:	2300      	movs	r3, #0
 800989e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	689b      	ldr	r3, [r3, #8]
 80098a6:	f003 0301 	and.w	r3, r3, #1
 80098aa:	2b01      	cmp	r3, #1
 80098ac:	d11c      	bne.n	80098e8 <HAL_SPI_TransmitReceive+0x1e6>
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80098b4:	b29b      	uxth	r3, r3
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d016      	beq.n	80098e8 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	68da      	ldr	r2, [r3, #12]
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098c4:	b292      	uxth	r2, r2
 80098c6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098cc:	1c9a      	adds	r2, r3, #2
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80098d8:	b29b      	uxth	r3, r3
 80098da:	3b01      	subs	r3, #1
 80098dc:	b29a      	uxth	r2, r3
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80098e4:	2301      	movs	r3, #1
 80098e6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80098e8:	f7fc fd66 	bl	80063b8 <HAL_GetTick>
 80098ec:	4602      	mov	r2, r0
 80098ee:	6a3b      	ldr	r3, [r7, #32]
 80098f0:	1ad3      	subs	r3, r2, r3
 80098f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d80d      	bhi.n	8009914 <HAL_SPI_TransmitReceive+0x212>
 80098f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098fe:	d009      	beq.n	8009914 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	2201      	movs	r2, #1
 8009904:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2200      	movs	r2, #0
 800990c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8009910:	2303      	movs	r3, #3
 8009912:	e111      	b.n	8009b38 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009918:	b29b      	uxth	r3, r3
 800991a:	2b00      	cmp	r3, #0
 800991c:	d19d      	bne.n	800985a <HAL_SPI_TransmitReceive+0x158>
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009924:	b29b      	uxth	r3, r3
 8009926:	2b00      	cmp	r3, #0
 8009928:	d197      	bne.n	800985a <HAL_SPI_TransmitReceive+0x158>
 800992a:	e0e5      	b.n	8009af8 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	685b      	ldr	r3, [r3, #4]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d003      	beq.n	800993c <HAL_SPI_TransmitReceive+0x23a>
 8009934:	8afb      	ldrh	r3, [r7, #22]
 8009936:	2b01      	cmp	r3, #1
 8009938:	f040 80d1 	bne.w	8009ade <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009940:	b29b      	uxth	r3, r3
 8009942:	2b01      	cmp	r3, #1
 8009944:	d912      	bls.n	800996c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800994a:	881a      	ldrh	r2, [r3, #0]
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009956:	1c9a      	adds	r2, r3, #2
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009960:	b29b      	uxth	r3, r3
 8009962:	3b02      	subs	r3, #2
 8009964:	b29a      	uxth	r2, r3
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800996a:	e0b8      	b.n	8009ade <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	330c      	adds	r3, #12
 8009976:	7812      	ldrb	r2, [r2, #0]
 8009978:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800997e:	1c5a      	adds	r2, r3, #1
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009988:	b29b      	uxth	r3, r3
 800998a:	3b01      	subs	r3, #1
 800998c:	b29a      	uxth	r2, r3
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009992:	e0a4      	b.n	8009ade <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	689b      	ldr	r3, [r3, #8]
 800999a:	f003 0302 	and.w	r3, r3, #2
 800999e:	2b02      	cmp	r3, #2
 80099a0:	d134      	bne.n	8009a0c <HAL_SPI_TransmitReceive+0x30a>
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80099a6:	b29b      	uxth	r3, r3
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d02f      	beq.n	8009a0c <HAL_SPI_TransmitReceive+0x30a>
 80099ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ae:	2b01      	cmp	r3, #1
 80099b0:	d12c      	bne.n	8009a0c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80099b6:	b29b      	uxth	r3, r3
 80099b8:	2b01      	cmp	r3, #1
 80099ba:	d912      	bls.n	80099e2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099c0:	881a      	ldrh	r2, [r3, #0]
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099cc:	1c9a      	adds	r2, r3, #2
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80099d6:	b29b      	uxth	r3, r3
 80099d8:	3b02      	subs	r3, #2
 80099da:	b29a      	uxth	r2, r3
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80099e0:	e012      	b.n	8009a08 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	330c      	adds	r3, #12
 80099ec:	7812      	ldrb	r2, [r2, #0]
 80099ee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099f4:	1c5a      	adds	r2, r3, #1
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80099fe:	b29b      	uxth	r3, r3
 8009a00:	3b01      	subs	r3, #1
 8009a02:	b29a      	uxth	r2, r3
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	689b      	ldr	r3, [r3, #8]
 8009a12:	f003 0301 	and.w	r3, r3, #1
 8009a16:	2b01      	cmp	r3, #1
 8009a18:	d148      	bne.n	8009aac <HAL_SPI_TransmitReceive+0x3aa>
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009a20:	b29b      	uxth	r3, r3
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d042      	beq.n	8009aac <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009a2c:	b29b      	uxth	r3, r3
 8009a2e:	2b01      	cmp	r3, #1
 8009a30:	d923      	bls.n	8009a7a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	68da      	ldr	r2, [r3, #12]
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a3c:	b292      	uxth	r2, r2
 8009a3e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a44:	1c9a      	adds	r2, r3, #2
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009a50:	b29b      	uxth	r3, r3
 8009a52:	3b02      	subs	r3, #2
 8009a54:	b29a      	uxth	r2, r3
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009a62:	b29b      	uxth	r3, r3
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	d81f      	bhi.n	8009aa8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	685a      	ldr	r2, [r3, #4]
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009a76:	605a      	str	r2, [r3, #4]
 8009a78:	e016      	b.n	8009aa8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f103 020c 	add.w	r2, r3, #12
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a86:	7812      	ldrb	r2, [r2, #0]
 8009a88:	b2d2      	uxtb	r2, r2
 8009a8a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a90:	1c5a      	adds	r2, r3, #1
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009a9c:	b29b      	uxth	r3, r3
 8009a9e:	3b01      	subs	r3, #1
 8009aa0:	b29a      	uxth	r2, r3
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009aac:	f7fc fc84 	bl	80063b8 <HAL_GetTick>
 8009ab0:	4602      	mov	r2, r0
 8009ab2:	6a3b      	ldr	r3, [r7, #32]
 8009ab4:	1ad3      	subs	r3, r2, r3
 8009ab6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ab8:	429a      	cmp	r2, r3
 8009aba:	d803      	bhi.n	8009ac4 <HAL_SPI_TransmitReceive+0x3c2>
 8009abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ac2:	d102      	bne.n	8009aca <HAL_SPI_TransmitReceive+0x3c8>
 8009ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d109      	bne.n	8009ade <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2201      	movs	r2, #1
 8009ace:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8009ada:	2303      	movs	r3, #3
 8009adc:	e02c      	b.n	8009b38 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009ae2:	b29b      	uxth	r3, r3
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	f47f af55 	bne.w	8009994 <HAL_SPI_TransmitReceive+0x292>
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009af0:	b29b      	uxth	r3, r3
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	f47f af4e 	bne.w	8009994 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009af8:	6a3a      	ldr	r2, [r7, #32]
 8009afa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009afc:	68f8      	ldr	r0, [r7, #12]
 8009afe:	f000 f93d 	bl	8009d7c <SPI_EndRxTxTransaction>
 8009b02:	4603      	mov	r3, r0
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d008      	beq.n	8009b1a <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	2220      	movs	r2, #32
 8009b0c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	2200      	movs	r2, #0
 8009b12:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8009b16:	2301      	movs	r3, #1
 8009b18:	e00e      	b.n	8009b38 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	2201      	movs	r2, #1
 8009b1e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	2200      	movs	r2, #0
 8009b26:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d001      	beq.n	8009b36 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8009b32:	2301      	movs	r3, #1
 8009b34:	e000      	b.n	8009b38 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8009b36:	2300      	movs	r3, #0
  }
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3728      	adds	r7, #40	@ 0x28
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}

08009b40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b088      	sub	sp, #32
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	60f8      	str	r0, [r7, #12]
 8009b48:	60b9      	str	r1, [r7, #8]
 8009b4a:	603b      	str	r3, [r7, #0]
 8009b4c:	4613      	mov	r3, r2
 8009b4e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009b50:	f7fc fc32 	bl	80063b8 <HAL_GetTick>
 8009b54:	4602      	mov	r2, r0
 8009b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b58:	1a9b      	subs	r3, r3, r2
 8009b5a:	683a      	ldr	r2, [r7, #0]
 8009b5c:	4413      	add	r3, r2
 8009b5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009b60:	f7fc fc2a 	bl	80063b8 <HAL_GetTick>
 8009b64:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009b66:	4b39      	ldr	r3, [pc, #228]	@ (8009c4c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	015b      	lsls	r3, r3, #5
 8009b6c:	0d1b      	lsrs	r3, r3, #20
 8009b6e:	69fa      	ldr	r2, [r7, #28]
 8009b70:	fb02 f303 	mul.w	r3, r2, r3
 8009b74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009b76:	e054      	b.n	8009c22 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b7e:	d050      	beq.n	8009c22 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009b80:	f7fc fc1a 	bl	80063b8 <HAL_GetTick>
 8009b84:	4602      	mov	r2, r0
 8009b86:	69bb      	ldr	r3, [r7, #24]
 8009b88:	1ad3      	subs	r3, r2, r3
 8009b8a:	69fa      	ldr	r2, [r7, #28]
 8009b8c:	429a      	cmp	r2, r3
 8009b8e:	d902      	bls.n	8009b96 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009b90:	69fb      	ldr	r3, [r7, #28]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d13d      	bne.n	8009c12 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	685a      	ldr	r2, [r3, #4]
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009ba4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	685b      	ldr	r3, [r3, #4]
 8009baa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009bae:	d111      	bne.n	8009bd4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	689b      	ldr	r3, [r3, #8]
 8009bb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009bb8:	d004      	beq.n	8009bc4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	689b      	ldr	r3, [r3, #8]
 8009bbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009bc2:	d107      	bne.n	8009bd4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	681a      	ldr	r2, [r3, #0]
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009bd2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009bdc:	d10f      	bne.n	8009bfe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	681a      	ldr	r2, [r3, #0]
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009bec:	601a      	str	r2, [r3, #0]
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	681a      	ldr	r2, [r3, #0]
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009bfc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	2201      	movs	r2, #1
 8009c02:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2200      	movs	r2, #0
 8009c0a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009c0e:	2303      	movs	r3, #3
 8009c10:	e017      	b.n	8009c42 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d101      	bne.n	8009c1c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	3b01      	subs	r3, #1
 8009c20:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	689a      	ldr	r2, [r3, #8]
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	4013      	ands	r3, r2
 8009c2c:	68ba      	ldr	r2, [r7, #8]
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	bf0c      	ite	eq
 8009c32:	2301      	moveq	r3, #1
 8009c34:	2300      	movne	r3, #0
 8009c36:	b2db      	uxtb	r3, r3
 8009c38:	461a      	mov	r2, r3
 8009c3a:	79fb      	ldrb	r3, [r7, #7]
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d19b      	bne.n	8009b78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009c40:	2300      	movs	r3, #0
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3720      	adds	r7, #32
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}
 8009c4a:	bf00      	nop
 8009c4c:	20000264 	.word	0x20000264

08009c50 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b08a      	sub	sp, #40	@ 0x28
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	60f8      	str	r0, [r7, #12]
 8009c58:	60b9      	str	r1, [r7, #8]
 8009c5a:	607a      	str	r2, [r7, #4]
 8009c5c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009c62:	f7fc fba9 	bl	80063b8 <HAL_GetTick>
 8009c66:	4602      	mov	r2, r0
 8009c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c6a:	1a9b      	subs	r3, r3, r2
 8009c6c:	683a      	ldr	r2, [r7, #0]
 8009c6e:	4413      	add	r3, r2
 8009c70:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8009c72:	f7fc fba1 	bl	80063b8 <HAL_GetTick>
 8009c76:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	330c      	adds	r3, #12
 8009c7e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009c80:	4b3d      	ldr	r3, [pc, #244]	@ (8009d78 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009c82:	681a      	ldr	r2, [r3, #0]
 8009c84:	4613      	mov	r3, r2
 8009c86:	009b      	lsls	r3, r3, #2
 8009c88:	4413      	add	r3, r2
 8009c8a:	00da      	lsls	r2, r3, #3
 8009c8c:	1ad3      	subs	r3, r2, r3
 8009c8e:	0d1b      	lsrs	r3, r3, #20
 8009c90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c92:	fb02 f303 	mul.w	r3, r2, r3
 8009c96:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009c98:	e060      	b.n	8009d5c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009ca0:	d107      	bne.n	8009cb2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d104      	bne.n	8009cb2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009ca8:	69fb      	ldr	r3, [r7, #28]
 8009caa:	781b      	ldrb	r3, [r3, #0]
 8009cac:	b2db      	uxtb	r3, r3
 8009cae:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009cb0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cb8:	d050      	beq.n	8009d5c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009cba:	f7fc fb7d 	bl	80063b8 <HAL_GetTick>
 8009cbe:	4602      	mov	r2, r0
 8009cc0:	6a3b      	ldr	r3, [r7, #32]
 8009cc2:	1ad3      	subs	r3, r2, r3
 8009cc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	d902      	bls.n	8009cd0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d13d      	bne.n	8009d4c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	685a      	ldr	r2, [r3, #4]
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009cde:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	685b      	ldr	r3, [r3, #4]
 8009ce4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009ce8:	d111      	bne.n	8009d0e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	689b      	ldr	r3, [r3, #8]
 8009cee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009cf2:	d004      	beq.n	8009cfe <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	689b      	ldr	r3, [r3, #8]
 8009cf8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009cfc:	d107      	bne.n	8009d0e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	681a      	ldr	r2, [r3, #0]
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009d0c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d16:	d10f      	bne.n	8009d38 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	681a      	ldr	r2, [r3, #0]
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009d26:	601a      	str	r2, [r3, #0]
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	681a      	ldr	r2, [r3, #0]
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009d36:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	2200      	movs	r2, #0
 8009d44:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009d48:	2303      	movs	r3, #3
 8009d4a:	e010      	b.n	8009d6e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009d4c:	69bb      	ldr	r3, [r7, #24]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d101      	bne.n	8009d56 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009d52:	2300      	movs	r3, #0
 8009d54:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8009d56:	69bb      	ldr	r3, [r7, #24]
 8009d58:	3b01      	subs	r3, #1
 8009d5a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	689a      	ldr	r2, [r3, #8]
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	4013      	ands	r3, r2
 8009d66:	687a      	ldr	r2, [r7, #4]
 8009d68:	429a      	cmp	r2, r3
 8009d6a:	d196      	bne.n	8009c9a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009d6c:	2300      	movs	r3, #0
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3728      	adds	r7, #40	@ 0x28
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}
 8009d76:	bf00      	nop
 8009d78:	20000264 	.word	0x20000264

08009d7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b086      	sub	sp, #24
 8009d80:	af02      	add	r7, sp, #8
 8009d82:	60f8      	str	r0, [r7, #12]
 8009d84:	60b9      	str	r1, [r7, #8]
 8009d86:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	9300      	str	r3, [sp, #0]
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8009d94:	68f8      	ldr	r0, [r7, #12]
 8009d96:	f7ff ff5b 	bl	8009c50 <SPI_WaitFifoStateUntilTimeout>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d007      	beq.n	8009db0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009da4:	f043 0220 	orr.w	r2, r3, #32
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009dac:	2303      	movs	r3, #3
 8009dae:	e027      	b.n	8009e00 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	9300      	str	r3, [sp, #0]
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	2200      	movs	r2, #0
 8009db8:	2180      	movs	r1, #128	@ 0x80
 8009dba:	68f8      	ldr	r0, [r7, #12]
 8009dbc:	f7ff fec0 	bl	8009b40 <SPI_WaitFlagStateUntilTimeout>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d007      	beq.n	8009dd6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009dca:	f043 0220 	orr.w	r2, r3, #32
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009dd2:	2303      	movs	r3, #3
 8009dd4:	e014      	b.n	8009e00 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	9300      	str	r3, [sp, #0]
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009de2:	68f8      	ldr	r0, [r7, #12]
 8009de4:	f7ff ff34 	bl	8009c50 <SPI_WaitFifoStateUntilTimeout>
 8009de8:	4603      	mov	r3, r0
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d007      	beq.n	8009dfe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009df2:	f043 0220 	orr.w	r2, r3, #32
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009dfa:	2303      	movs	r3, #3
 8009dfc:	e000      	b.n	8009e00 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009dfe:	2300      	movs	r3, #0
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3710      	adds	r7, #16
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}

08009e08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b082      	sub	sp, #8
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d101      	bne.n	8009e1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009e16:	2301      	movs	r3, #1
 8009e18:	e054      	b.n	8009ec4 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e20:	b2db      	uxtb	r3, r3
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d111      	bne.n	8009e4a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f001 ffd4 	bl	800bddc <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d102      	bne.n	8009e42 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	4a23      	ldr	r2, [pc, #140]	@ (8009ecc <HAL_TIM_Base_Init+0xc4>)
 8009e40:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2202      	movs	r2, #2
 8009e4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681a      	ldr	r2, [r3, #0]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	3304      	adds	r3, #4
 8009e5a:	4619      	mov	r1, r3
 8009e5c:	4610      	mov	r0, r2
 8009e5e:	f001 fb1d 	bl	800b49c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2201      	movs	r2, #1
 8009e66:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2201      	movs	r2, #1
 8009e6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2201      	movs	r2, #1
 8009e76:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2201      	movs	r2, #1
 8009e7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2201      	movs	r2, #1
 8009e86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2201      	movs	r2, #1
 8009e8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2201      	movs	r2, #1
 8009e96:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2201      	movs	r2, #1
 8009e9e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	2201      	movs	r2, #1
 8009ea6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2201      	movs	r2, #1
 8009eae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2201      	movs	r2, #1
 8009eb6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2201      	movs	r2, #1
 8009ebe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009ec2:	2300      	movs	r3, #0
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	3708      	adds	r7, #8
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}
 8009ecc:	08005df1 	.word	0x08005df1

08009ed0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b085      	sub	sp, #20
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009ede:	b2db      	uxtb	r3, r3
 8009ee0:	2b01      	cmp	r3, #1
 8009ee2:	d001      	beq.n	8009ee8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	e04c      	b.n	8009f82 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2202      	movs	r2, #2
 8009eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	4a26      	ldr	r2, [pc, #152]	@ (8009f90 <HAL_TIM_Base_Start+0xc0>)
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	d022      	beq.n	8009f40 <HAL_TIM_Base_Start+0x70>
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f02:	d01d      	beq.n	8009f40 <HAL_TIM_Base_Start+0x70>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	4a22      	ldr	r2, [pc, #136]	@ (8009f94 <HAL_TIM_Base_Start+0xc4>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d018      	beq.n	8009f40 <HAL_TIM_Base_Start+0x70>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	4a21      	ldr	r2, [pc, #132]	@ (8009f98 <HAL_TIM_Base_Start+0xc8>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d013      	beq.n	8009f40 <HAL_TIM_Base_Start+0x70>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	4a1f      	ldr	r2, [pc, #124]	@ (8009f9c <HAL_TIM_Base_Start+0xcc>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d00e      	beq.n	8009f40 <HAL_TIM_Base_Start+0x70>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	4a1e      	ldr	r2, [pc, #120]	@ (8009fa0 <HAL_TIM_Base_Start+0xd0>)
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	d009      	beq.n	8009f40 <HAL_TIM_Base_Start+0x70>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4a1c      	ldr	r2, [pc, #112]	@ (8009fa4 <HAL_TIM_Base_Start+0xd4>)
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d004      	beq.n	8009f40 <HAL_TIM_Base_Start+0x70>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4a1b      	ldr	r2, [pc, #108]	@ (8009fa8 <HAL_TIM_Base_Start+0xd8>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d115      	bne.n	8009f6c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	689a      	ldr	r2, [r3, #8]
 8009f46:	4b19      	ldr	r3, [pc, #100]	@ (8009fac <HAL_TIM_Base_Start+0xdc>)
 8009f48:	4013      	ands	r3, r2
 8009f4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	2b06      	cmp	r3, #6
 8009f50:	d015      	beq.n	8009f7e <HAL_TIM_Base_Start+0xae>
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f58:	d011      	beq.n	8009f7e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	681a      	ldr	r2, [r3, #0]
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f042 0201 	orr.w	r2, r2, #1
 8009f68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f6a:	e008      	b.n	8009f7e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	681a      	ldr	r2, [r3, #0]
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f042 0201 	orr.w	r2, r2, #1
 8009f7a:	601a      	str	r2, [r3, #0]
 8009f7c:	e000      	b.n	8009f80 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f7e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009f80:	2300      	movs	r3, #0
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3714      	adds	r7, #20
 8009f86:	46bd      	mov	sp, r7
 8009f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8c:	4770      	bx	lr
 8009f8e:	bf00      	nop
 8009f90:	40012c00 	.word	0x40012c00
 8009f94:	40000400 	.word	0x40000400
 8009f98:	40000800 	.word	0x40000800
 8009f9c:	40000c00 	.word	0x40000c00
 8009fa0:	40013400 	.word	0x40013400
 8009fa4:	40014000 	.word	0x40014000
 8009fa8:	40015000 	.word	0x40015000
 8009fac:	00010007 	.word	0x00010007

08009fb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	b085      	sub	sp, #20
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009fbe:	b2db      	uxtb	r3, r3
 8009fc0:	2b01      	cmp	r3, #1
 8009fc2:	d001      	beq.n	8009fc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	e054      	b.n	800a072 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2202      	movs	r2, #2
 8009fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	68da      	ldr	r2, [r3, #12]
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	f042 0201 	orr.w	r2, r2, #1
 8009fde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	4a26      	ldr	r2, [pc, #152]	@ (800a080 <HAL_TIM_Base_Start_IT+0xd0>)
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	d022      	beq.n	800a030 <HAL_TIM_Base_Start_IT+0x80>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ff2:	d01d      	beq.n	800a030 <HAL_TIM_Base_Start_IT+0x80>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	4a22      	ldr	r2, [pc, #136]	@ (800a084 <HAL_TIM_Base_Start_IT+0xd4>)
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d018      	beq.n	800a030 <HAL_TIM_Base_Start_IT+0x80>
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	4a21      	ldr	r2, [pc, #132]	@ (800a088 <HAL_TIM_Base_Start_IT+0xd8>)
 800a004:	4293      	cmp	r3, r2
 800a006:	d013      	beq.n	800a030 <HAL_TIM_Base_Start_IT+0x80>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	4a1f      	ldr	r2, [pc, #124]	@ (800a08c <HAL_TIM_Base_Start_IT+0xdc>)
 800a00e:	4293      	cmp	r3, r2
 800a010:	d00e      	beq.n	800a030 <HAL_TIM_Base_Start_IT+0x80>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	4a1e      	ldr	r2, [pc, #120]	@ (800a090 <HAL_TIM_Base_Start_IT+0xe0>)
 800a018:	4293      	cmp	r3, r2
 800a01a:	d009      	beq.n	800a030 <HAL_TIM_Base_Start_IT+0x80>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	4a1c      	ldr	r2, [pc, #112]	@ (800a094 <HAL_TIM_Base_Start_IT+0xe4>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d004      	beq.n	800a030 <HAL_TIM_Base_Start_IT+0x80>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	4a1b      	ldr	r2, [pc, #108]	@ (800a098 <HAL_TIM_Base_Start_IT+0xe8>)
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d115      	bne.n	800a05c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	689a      	ldr	r2, [r3, #8]
 800a036:	4b19      	ldr	r3, [pc, #100]	@ (800a09c <HAL_TIM_Base_Start_IT+0xec>)
 800a038:	4013      	ands	r3, r2
 800a03a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	2b06      	cmp	r3, #6
 800a040:	d015      	beq.n	800a06e <HAL_TIM_Base_Start_IT+0xbe>
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a048:	d011      	beq.n	800a06e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	681a      	ldr	r2, [r3, #0]
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f042 0201 	orr.w	r2, r2, #1
 800a058:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a05a:	e008      	b.n	800a06e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	681a      	ldr	r2, [r3, #0]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f042 0201 	orr.w	r2, r2, #1
 800a06a:	601a      	str	r2, [r3, #0]
 800a06c:	e000      	b.n	800a070 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a06e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a070:	2300      	movs	r3, #0
}
 800a072:	4618      	mov	r0, r3
 800a074:	3714      	adds	r7, #20
 800a076:	46bd      	mov	sp, r7
 800a078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07c:	4770      	bx	lr
 800a07e:	bf00      	nop
 800a080:	40012c00 	.word	0x40012c00
 800a084:	40000400 	.word	0x40000400
 800a088:	40000800 	.word	0x40000800
 800a08c:	40000c00 	.word	0x40000c00
 800a090:	40013400 	.word	0x40013400
 800a094:	40014000 	.word	0x40014000
 800a098:	40015000 	.word	0x40015000
 800a09c:	00010007 	.word	0x00010007

0800a0a0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b082      	sub	sp, #8
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d101      	bne.n	800a0b2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	e054      	b.n	800a15c <HAL_TIM_OC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a0b8:	b2db      	uxtb	r3, r3
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d111      	bne.n	800a0e2 <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f001 fe88 	bl	800bddc <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d102      	bne.n	800a0da <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	4a23      	ldr	r2, [pc, #140]	@ (800a164 <HAL_TIM_OC_Init+0xc4>)
 800a0d8:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2202      	movs	r2, #2
 800a0e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681a      	ldr	r2, [r3, #0]
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	3304      	adds	r3, #4
 800a0f2:	4619      	mov	r1, r3
 800a0f4:	4610      	mov	r0, r2
 800a0f6:	f001 f9d1 	bl	800b49c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2201      	movs	r2, #1
 800a0fe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2201      	movs	r2, #1
 800a106:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2201      	movs	r2, #1
 800a10e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2201      	movs	r2, #1
 800a116:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2201      	movs	r2, #1
 800a11e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2201      	movs	r2, #1
 800a126:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2201      	movs	r2, #1
 800a12e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2201      	movs	r2, #1
 800a136:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2201      	movs	r2, #1
 800a13e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2201      	movs	r2, #1
 800a146:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2201      	movs	r2, #1
 800a14e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2201      	movs	r2, #1
 800a156:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a15a:	2300      	movs	r3, #0
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3708      	adds	r7, #8
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}
 800a164:	0800a169 	.word	0x0800a169

0800a168 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800a168:	b480      	push	{r7}
 800a16a:	b083      	sub	sp, #12
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800a170:	bf00      	nop
 800a172:	370c      	adds	r7, #12
 800a174:	46bd      	mov	sp, r7
 800a176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17a:	4770      	bx	lr

0800a17c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b082      	sub	sp, #8
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d101      	bne.n	800a18e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a18a:	2301      	movs	r3, #1
 800a18c:	e054      	b.n	800a238 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a194:	b2db      	uxtb	r3, r3
 800a196:	2b00      	cmp	r3, #0
 800a198:	d111      	bne.n	800a1be <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2200      	movs	r2, #0
 800a19e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f001 fe1a 	bl	800bddc <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d102      	bne.n	800a1b6 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	4a23      	ldr	r2, [pc, #140]	@ (800a240 <HAL_TIM_PWM_Init+0xc4>)
 800a1b4:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2202      	movs	r2, #2
 800a1c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681a      	ldr	r2, [r3, #0]
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	3304      	adds	r3, #4
 800a1ce:	4619      	mov	r1, r3
 800a1d0:	4610      	mov	r0, r2
 800a1d2:	f001 f963 	bl	800b49c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2201      	movs	r2, #1
 800a1da:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2201      	movs	r2, #1
 800a1e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2201      	movs	r2, #1
 800a1ea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2201      	movs	r2, #1
 800a1f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2201      	movs	r2, #1
 800a1fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2201      	movs	r2, #1
 800a202:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2201      	movs	r2, #1
 800a20a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2201      	movs	r2, #1
 800a212:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2201      	movs	r2, #1
 800a21a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2201      	movs	r2, #1
 800a222:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2201      	movs	r2, #1
 800a22a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2201      	movs	r2, #1
 800a232:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a236:	2300      	movs	r3, #0
}
 800a238:	4618      	mov	r0, r3
 800a23a:	3708      	adds	r7, #8
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}
 800a240:	0800a245 	.word	0x0800a245

0800a244 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a244:	b480      	push	{r7}
 800a246:	b083      	sub	sp, #12
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a24c:	bf00      	nop
 800a24e:	370c      	adds	r7, #12
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr

0800a258 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b084      	sub	sp, #16
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
 800a260:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d109      	bne.n	800a27c <HAL_TIM_PWM_Start+0x24>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a26e:	b2db      	uxtb	r3, r3
 800a270:	2b01      	cmp	r3, #1
 800a272:	bf14      	ite	ne
 800a274:	2301      	movne	r3, #1
 800a276:	2300      	moveq	r3, #0
 800a278:	b2db      	uxtb	r3, r3
 800a27a:	e03c      	b.n	800a2f6 <HAL_TIM_PWM_Start+0x9e>
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	2b04      	cmp	r3, #4
 800a280:	d109      	bne.n	800a296 <HAL_TIM_PWM_Start+0x3e>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a288:	b2db      	uxtb	r3, r3
 800a28a:	2b01      	cmp	r3, #1
 800a28c:	bf14      	ite	ne
 800a28e:	2301      	movne	r3, #1
 800a290:	2300      	moveq	r3, #0
 800a292:	b2db      	uxtb	r3, r3
 800a294:	e02f      	b.n	800a2f6 <HAL_TIM_PWM_Start+0x9e>
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	2b08      	cmp	r3, #8
 800a29a:	d109      	bne.n	800a2b0 <HAL_TIM_PWM_Start+0x58>
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a2a2:	b2db      	uxtb	r3, r3
 800a2a4:	2b01      	cmp	r3, #1
 800a2a6:	bf14      	ite	ne
 800a2a8:	2301      	movne	r3, #1
 800a2aa:	2300      	moveq	r3, #0
 800a2ac:	b2db      	uxtb	r3, r3
 800a2ae:	e022      	b.n	800a2f6 <HAL_TIM_PWM_Start+0x9e>
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	2b0c      	cmp	r3, #12
 800a2b4:	d109      	bne.n	800a2ca <HAL_TIM_PWM_Start+0x72>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a2bc:	b2db      	uxtb	r3, r3
 800a2be:	2b01      	cmp	r3, #1
 800a2c0:	bf14      	ite	ne
 800a2c2:	2301      	movne	r3, #1
 800a2c4:	2300      	moveq	r3, #0
 800a2c6:	b2db      	uxtb	r3, r3
 800a2c8:	e015      	b.n	800a2f6 <HAL_TIM_PWM_Start+0x9e>
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	2b10      	cmp	r3, #16
 800a2ce:	d109      	bne.n	800a2e4 <HAL_TIM_PWM_Start+0x8c>
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a2d6:	b2db      	uxtb	r3, r3
 800a2d8:	2b01      	cmp	r3, #1
 800a2da:	bf14      	ite	ne
 800a2dc:	2301      	movne	r3, #1
 800a2de:	2300      	moveq	r3, #0
 800a2e0:	b2db      	uxtb	r3, r3
 800a2e2:	e008      	b.n	800a2f6 <HAL_TIM_PWM_Start+0x9e>
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a2ea:	b2db      	uxtb	r3, r3
 800a2ec:	2b01      	cmp	r3, #1
 800a2ee:	bf14      	ite	ne
 800a2f0:	2301      	movne	r3, #1
 800a2f2:	2300      	moveq	r3, #0
 800a2f4:	b2db      	uxtb	r3, r3
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d001      	beq.n	800a2fe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	e0a6      	b.n	800a44c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d104      	bne.n	800a30e <HAL_TIM_PWM_Start+0xb6>
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2202      	movs	r2, #2
 800a308:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a30c:	e023      	b.n	800a356 <HAL_TIM_PWM_Start+0xfe>
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	2b04      	cmp	r3, #4
 800a312:	d104      	bne.n	800a31e <HAL_TIM_PWM_Start+0xc6>
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2202      	movs	r2, #2
 800a318:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a31c:	e01b      	b.n	800a356 <HAL_TIM_PWM_Start+0xfe>
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	2b08      	cmp	r3, #8
 800a322:	d104      	bne.n	800a32e <HAL_TIM_PWM_Start+0xd6>
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2202      	movs	r2, #2
 800a328:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a32c:	e013      	b.n	800a356 <HAL_TIM_PWM_Start+0xfe>
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	2b0c      	cmp	r3, #12
 800a332:	d104      	bne.n	800a33e <HAL_TIM_PWM_Start+0xe6>
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2202      	movs	r2, #2
 800a338:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a33c:	e00b      	b.n	800a356 <HAL_TIM_PWM_Start+0xfe>
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	2b10      	cmp	r3, #16
 800a342:	d104      	bne.n	800a34e <HAL_TIM_PWM_Start+0xf6>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2202      	movs	r2, #2
 800a348:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a34c:	e003      	b.n	800a356 <HAL_TIM_PWM_Start+0xfe>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2202      	movs	r2, #2
 800a352:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	2201      	movs	r2, #1
 800a35c:	6839      	ldr	r1, [r7, #0]
 800a35e:	4618      	mov	r0, r3
 800a360:	f001 fd16 	bl	800bd90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	4a3a      	ldr	r2, [pc, #232]	@ (800a454 <HAL_TIM_PWM_Start+0x1fc>)
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d018      	beq.n	800a3a0 <HAL_TIM_PWM_Start+0x148>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	4a39      	ldr	r2, [pc, #228]	@ (800a458 <HAL_TIM_PWM_Start+0x200>)
 800a374:	4293      	cmp	r3, r2
 800a376:	d013      	beq.n	800a3a0 <HAL_TIM_PWM_Start+0x148>
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	4a37      	ldr	r2, [pc, #220]	@ (800a45c <HAL_TIM_PWM_Start+0x204>)
 800a37e:	4293      	cmp	r3, r2
 800a380:	d00e      	beq.n	800a3a0 <HAL_TIM_PWM_Start+0x148>
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	4a36      	ldr	r2, [pc, #216]	@ (800a460 <HAL_TIM_PWM_Start+0x208>)
 800a388:	4293      	cmp	r3, r2
 800a38a:	d009      	beq.n	800a3a0 <HAL_TIM_PWM_Start+0x148>
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	4a34      	ldr	r2, [pc, #208]	@ (800a464 <HAL_TIM_PWM_Start+0x20c>)
 800a392:	4293      	cmp	r3, r2
 800a394:	d004      	beq.n	800a3a0 <HAL_TIM_PWM_Start+0x148>
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	4a33      	ldr	r2, [pc, #204]	@ (800a468 <HAL_TIM_PWM_Start+0x210>)
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d101      	bne.n	800a3a4 <HAL_TIM_PWM_Start+0x14c>
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	e000      	b.n	800a3a6 <HAL_TIM_PWM_Start+0x14e>
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d007      	beq.n	800a3ba <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a3b8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	4a25      	ldr	r2, [pc, #148]	@ (800a454 <HAL_TIM_PWM_Start+0x1fc>)
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d022      	beq.n	800a40a <HAL_TIM_PWM_Start+0x1b2>
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3cc:	d01d      	beq.n	800a40a <HAL_TIM_PWM_Start+0x1b2>
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	4a26      	ldr	r2, [pc, #152]	@ (800a46c <HAL_TIM_PWM_Start+0x214>)
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	d018      	beq.n	800a40a <HAL_TIM_PWM_Start+0x1b2>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	4a24      	ldr	r2, [pc, #144]	@ (800a470 <HAL_TIM_PWM_Start+0x218>)
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	d013      	beq.n	800a40a <HAL_TIM_PWM_Start+0x1b2>
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	4a23      	ldr	r2, [pc, #140]	@ (800a474 <HAL_TIM_PWM_Start+0x21c>)
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	d00e      	beq.n	800a40a <HAL_TIM_PWM_Start+0x1b2>
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	4a19      	ldr	r2, [pc, #100]	@ (800a458 <HAL_TIM_PWM_Start+0x200>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d009      	beq.n	800a40a <HAL_TIM_PWM_Start+0x1b2>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	4a18      	ldr	r2, [pc, #96]	@ (800a45c <HAL_TIM_PWM_Start+0x204>)
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d004      	beq.n	800a40a <HAL_TIM_PWM_Start+0x1b2>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	4a18      	ldr	r2, [pc, #96]	@ (800a468 <HAL_TIM_PWM_Start+0x210>)
 800a406:	4293      	cmp	r3, r2
 800a408:	d115      	bne.n	800a436 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	689a      	ldr	r2, [r3, #8]
 800a410:	4b19      	ldr	r3, [pc, #100]	@ (800a478 <HAL_TIM_PWM_Start+0x220>)
 800a412:	4013      	ands	r3, r2
 800a414:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2b06      	cmp	r3, #6
 800a41a:	d015      	beq.n	800a448 <HAL_TIM_PWM_Start+0x1f0>
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a422:	d011      	beq.n	800a448 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	681a      	ldr	r2, [r3, #0]
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f042 0201 	orr.w	r2, r2, #1
 800a432:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a434:	e008      	b.n	800a448 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	681a      	ldr	r2, [r3, #0]
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f042 0201 	orr.w	r2, r2, #1
 800a444:	601a      	str	r2, [r3, #0]
 800a446:	e000      	b.n	800a44a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a448:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a44a:	2300      	movs	r3, #0
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	3710      	adds	r7, #16
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}
 800a454:	40012c00 	.word	0x40012c00
 800a458:	40013400 	.word	0x40013400
 800a45c:	40014000 	.word	0x40014000
 800a460:	40014400 	.word	0x40014400
 800a464:	40014800 	.word	0x40014800
 800a468:	40015000 	.word	0x40015000
 800a46c:	40000400 	.word	0x40000400
 800a470:	40000800 	.word	0x40000800
 800a474:	40000c00 	.word	0x40000c00
 800a478:	00010007 	.word	0x00010007

0800a47c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b082      	sub	sp, #8
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
 800a484:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d101      	bne.n	800a490 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800a48c:	2301      	movs	r3, #1
 800a48e:	e04c      	b.n	800a52a <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a496:	b2db      	uxtb	r3, r3
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d111      	bne.n	800a4c0 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f001 fc99 	bl	800bddc <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d102      	bne.n	800a4b8 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	4a1f      	ldr	r2, [pc, #124]	@ (800a534 <HAL_TIM_OnePulse_Init+0xb8>)
 800a4b6:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2202      	movs	r2, #2
 800a4c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681a      	ldr	r2, [r3, #0]
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	3304      	adds	r3, #4
 800a4d0:	4619      	mov	r1, r3
 800a4d2:	4610      	mov	r0, r2
 800a4d4:	f000 ffe2 	bl	800b49c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	681a      	ldr	r2, [r3, #0]
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	f022 0208 	bic.w	r2, r2, #8
 800a4e6:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	6819      	ldr	r1, [r3, #0]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	683a      	ldr	r2, [r7, #0]
 800a4f4:	430a      	orrs	r2, r1
 800a4f6:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2201      	movs	r2, #1
 800a4fc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2201      	movs	r2, #1
 800a504:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2201      	movs	r2, #1
 800a50c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2201      	movs	r2, #1
 800a514:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2201      	movs	r2, #1
 800a51c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2201      	movs	r2, #1
 800a524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a528:	2300      	movs	r3, #0
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	3708      	adds	r7, #8
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}
 800a532:	bf00      	nop
 800a534:	0800a539 	.word	0x0800a539

0800a538 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800a538:	b480      	push	{r7}
 800a53a:	b083      	sub	sp, #12
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800a540:	bf00      	nop
 800a542:	370c      	adds	r7, #12
 800a544:	46bd      	mov	sp, r7
 800a546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54a:	4770      	bx	lr

0800a54c <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b084      	sub	sp, #16
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a55c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a564:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a56c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a574:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a576:	7bfb      	ldrb	r3, [r7, #15]
 800a578:	2b01      	cmp	r3, #1
 800a57a:	d108      	bne.n	800a58e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a57c:	7bbb      	ldrb	r3, [r7, #14]
 800a57e:	2b01      	cmp	r3, #1
 800a580:	d105      	bne.n	800a58e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a582:	7b7b      	ldrb	r3, [r7, #13]
 800a584:	2b01      	cmp	r3, #1
 800a586:	d102      	bne.n	800a58e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a588:	7b3b      	ldrb	r3, [r7, #12]
 800a58a:	2b01      	cmp	r3, #1
 800a58c:	d001      	beq.n	800a592 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800a58e:	2301      	movs	r3, #1
 800a590:	e059      	b.n	800a646 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2202      	movs	r2, #2
 800a596:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2202      	movs	r2, #2
 800a59e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2202      	movs	r2, #2
 800a5a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2202      	movs	r2, #2
 800a5ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	68da      	ldr	r2, [r3, #12]
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f042 0202 	orr.w	r2, r2, #2
 800a5c0:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	68da      	ldr	r2, [r3, #12]
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f042 0204 	orr.w	r2, r2, #4
 800a5d0:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	2100      	movs	r1, #0
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f001 fbd8 	bl	800bd90 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	2201      	movs	r2, #1
 800a5e6:	2104      	movs	r1, #4
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	f001 fbd1 	bl	800bd90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	4a17      	ldr	r2, [pc, #92]	@ (800a650 <HAL_TIM_OnePulse_Start_IT+0x104>)
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d018      	beq.n	800a62a <HAL_TIM_OnePulse_Start_IT+0xde>
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	4a15      	ldr	r2, [pc, #84]	@ (800a654 <HAL_TIM_OnePulse_Start_IT+0x108>)
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d013      	beq.n	800a62a <HAL_TIM_OnePulse_Start_IT+0xde>
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	4a14      	ldr	r2, [pc, #80]	@ (800a658 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 800a608:	4293      	cmp	r3, r2
 800a60a:	d00e      	beq.n	800a62a <HAL_TIM_OnePulse_Start_IT+0xde>
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	4a12      	ldr	r2, [pc, #72]	@ (800a65c <HAL_TIM_OnePulse_Start_IT+0x110>)
 800a612:	4293      	cmp	r3, r2
 800a614:	d009      	beq.n	800a62a <HAL_TIM_OnePulse_Start_IT+0xde>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	4a11      	ldr	r2, [pc, #68]	@ (800a660 <HAL_TIM_OnePulse_Start_IT+0x114>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d004      	beq.n	800a62a <HAL_TIM_OnePulse_Start_IT+0xde>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	4a0f      	ldr	r2, [pc, #60]	@ (800a664 <HAL_TIM_OnePulse_Start_IT+0x118>)
 800a626:	4293      	cmp	r3, r2
 800a628:	d101      	bne.n	800a62e <HAL_TIM_OnePulse_Start_IT+0xe2>
 800a62a:	2301      	movs	r3, #1
 800a62c:	e000      	b.n	800a630 <HAL_TIM_OnePulse_Start_IT+0xe4>
 800a62e:	2300      	movs	r3, #0
 800a630:	2b00      	cmp	r3, #0
 800a632:	d007      	beq.n	800a644 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a642:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800a644:	2300      	movs	r3, #0
}
 800a646:	4618      	mov	r0, r3
 800a648:	3710      	adds	r7, #16
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}
 800a64e:	bf00      	nop
 800a650:	40012c00 	.word	0x40012c00
 800a654:	40013400 	.word	0x40013400
 800a658:	40014000 	.word	0x40014000
 800a65c:	40014400 	.word	0x40014400
 800a660:	40014800 	.word	0x40014800
 800a664:	40015000 	.word	0x40015000

0800a668 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b086      	sub	sp, #24
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
 800a670:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d101      	bne.n	800a67c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a678:	2301      	movs	r3, #1
 800a67a:	e0a2      	b.n	800a7c2 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a682:	b2db      	uxtb	r3, r3
 800a684:	2b00      	cmp	r3, #0
 800a686:	d111      	bne.n	800a6ac <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2200      	movs	r2, #0
 800a68c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f001 fba3 	bl	800bddc <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d102      	bne.n	800a6a4 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	4a4a      	ldr	r2, [pc, #296]	@ (800a7cc <HAL_TIM_Encoder_Init+0x164>)
 800a6a2:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2202      	movs	r2, #2
 800a6b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	689b      	ldr	r3, [r3, #8]
 800a6ba:	687a      	ldr	r2, [r7, #4]
 800a6bc:	6812      	ldr	r2, [r2, #0]
 800a6be:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800a6c2:	f023 0307 	bic.w	r3, r3, #7
 800a6c6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681a      	ldr	r2, [r3, #0]
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	3304      	adds	r3, #4
 800a6d0:	4619      	mov	r1, r3
 800a6d2:	4610      	mov	r0, r2
 800a6d4:	f000 fee2 	bl	800b49c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	689b      	ldr	r3, [r3, #8]
 800a6de:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	699b      	ldr	r3, [r3, #24]
 800a6e6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	6a1b      	ldr	r3, [r3, #32]
 800a6ee:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	697a      	ldr	r2, [r7, #20]
 800a6f6:	4313      	orrs	r3, r2
 800a6f8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a700:	f023 0303 	bic.w	r3, r3, #3
 800a704:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	689a      	ldr	r2, [r3, #8]
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	699b      	ldr	r3, [r3, #24]
 800a70e:	021b      	lsls	r3, r3, #8
 800a710:	4313      	orrs	r3, r2
 800a712:	693a      	ldr	r2, [r7, #16]
 800a714:	4313      	orrs	r3, r2
 800a716:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800a71e:	f023 030c 	bic.w	r3, r3, #12
 800a722:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a72a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a72e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	68da      	ldr	r2, [r3, #12]
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	69db      	ldr	r3, [r3, #28]
 800a738:	021b      	lsls	r3, r3, #8
 800a73a:	4313      	orrs	r3, r2
 800a73c:	693a      	ldr	r2, [r7, #16]
 800a73e:	4313      	orrs	r3, r2
 800a740:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	691b      	ldr	r3, [r3, #16]
 800a746:	011a      	lsls	r2, r3, #4
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	6a1b      	ldr	r3, [r3, #32]
 800a74c:	031b      	lsls	r3, r3, #12
 800a74e:	4313      	orrs	r3, r2
 800a750:	693a      	ldr	r2, [r7, #16]
 800a752:	4313      	orrs	r3, r2
 800a754:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800a75c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800a764:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	685a      	ldr	r2, [r3, #4]
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	695b      	ldr	r3, [r3, #20]
 800a76e:	011b      	lsls	r3, r3, #4
 800a770:	4313      	orrs	r3, r2
 800a772:	68fa      	ldr	r2, [r7, #12]
 800a774:	4313      	orrs	r3, r2
 800a776:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	697a      	ldr	r2, [r7, #20]
 800a77e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	693a      	ldr	r2, [r7, #16]
 800a786:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	68fa      	ldr	r2, [r7, #12]
 800a78e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2201      	movs	r2, #1
 800a794:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2201      	movs	r2, #1
 800a79c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2201      	movs	r2, #1
 800a7a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2201      	movs	r2, #1
 800a7ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2201      	movs	r2, #1
 800a7bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a7c0:	2300      	movs	r3, #0
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	3718      	adds	r7, #24
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}
 800a7ca:	bf00      	nop
 800a7cc:	08005f09 	.word	0x08005f09

0800a7d0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b084      	sub	sp, #16
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
 800a7d8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a7e0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a7e8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a7f0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a7f8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d110      	bne.n	800a822 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a800:	7bfb      	ldrb	r3, [r7, #15]
 800a802:	2b01      	cmp	r3, #1
 800a804:	d102      	bne.n	800a80c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800a806:	7b7b      	ldrb	r3, [r7, #13]
 800a808:	2b01      	cmp	r3, #1
 800a80a:	d001      	beq.n	800a810 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800a80c:	2301      	movs	r3, #1
 800a80e:	e069      	b.n	800a8e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2202      	movs	r2, #2
 800a814:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2202      	movs	r2, #2
 800a81c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a820:	e031      	b.n	800a886 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	2b04      	cmp	r3, #4
 800a826:	d110      	bne.n	800a84a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a828:	7bbb      	ldrb	r3, [r7, #14]
 800a82a:	2b01      	cmp	r3, #1
 800a82c:	d102      	bne.n	800a834 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a82e:	7b3b      	ldrb	r3, [r7, #12]
 800a830:	2b01      	cmp	r3, #1
 800a832:	d001      	beq.n	800a838 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800a834:	2301      	movs	r3, #1
 800a836:	e055      	b.n	800a8e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2202      	movs	r2, #2
 800a83c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2202      	movs	r2, #2
 800a844:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a848:	e01d      	b.n	800a886 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a84a:	7bfb      	ldrb	r3, [r7, #15]
 800a84c:	2b01      	cmp	r3, #1
 800a84e:	d108      	bne.n	800a862 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a850:	7bbb      	ldrb	r3, [r7, #14]
 800a852:	2b01      	cmp	r3, #1
 800a854:	d105      	bne.n	800a862 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a856:	7b7b      	ldrb	r3, [r7, #13]
 800a858:	2b01      	cmp	r3, #1
 800a85a:	d102      	bne.n	800a862 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a85c:	7b3b      	ldrb	r3, [r7, #12]
 800a85e:	2b01      	cmp	r3, #1
 800a860:	d001      	beq.n	800a866 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800a862:	2301      	movs	r3, #1
 800a864:	e03e      	b.n	800a8e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2202      	movs	r2, #2
 800a86a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2202      	movs	r2, #2
 800a872:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2202      	movs	r2, #2
 800a87a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2202      	movs	r2, #2
 800a882:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d003      	beq.n	800a894 <HAL_TIM_Encoder_Start+0xc4>
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	2b04      	cmp	r3, #4
 800a890:	d008      	beq.n	800a8a4 <HAL_TIM_Encoder_Start+0xd4>
 800a892:	e00f      	b.n	800a8b4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	2201      	movs	r2, #1
 800a89a:	2100      	movs	r1, #0
 800a89c:	4618      	mov	r0, r3
 800a89e:	f001 fa77 	bl	800bd90 <TIM_CCxChannelCmd>
      break;
 800a8a2:	e016      	b.n	800a8d2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	2201      	movs	r2, #1
 800a8aa:	2104      	movs	r1, #4
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	f001 fa6f 	bl	800bd90 <TIM_CCxChannelCmd>
      break;
 800a8b2:	e00e      	b.n	800a8d2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	2201      	movs	r2, #1
 800a8ba:	2100      	movs	r1, #0
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f001 fa67 	bl	800bd90 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	2201      	movs	r2, #1
 800a8c8:	2104      	movs	r1, #4
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f001 fa60 	bl	800bd90 <TIM_CCxChannelCmd>
      break;
 800a8d0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	681a      	ldr	r2, [r3, #0]
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f042 0201 	orr.w	r2, r2, #1
 800a8e0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a8e2:	2300      	movs	r3, #0
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3710      	adds	r7, #16
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}

0800a8ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b084      	sub	sp, #16
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	68db      	ldr	r3, [r3, #12]
 800a8fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	691b      	ldr	r3, [r3, #16]
 800a902:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	f003 0302 	and.w	r3, r3, #2
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d026      	beq.n	800a95c <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	f003 0302 	and.w	r3, r3, #2
 800a914:	2b00      	cmp	r3, #0
 800a916:	d021      	beq.n	800a95c <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f06f 0202 	mvn.w	r2, #2
 800a920:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2201      	movs	r2, #1
 800a926:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	699b      	ldr	r3, [r3, #24]
 800a92e:	f003 0303 	and.w	r3, r3, #3
 800a932:	2b00      	cmp	r3, #0
 800a934:	d005      	beq.n	800a942 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	4798      	blx	r3
 800a940:	e009      	b.n	800a956 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2200      	movs	r2, #0
 800a95a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	f003 0304 	and.w	r3, r3, #4
 800a962:	2b00      	cmp	r3, #0
 800a964:	d026      	beq.n	800a9b4 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	f003 0304 	and.w	r3, r3, #4
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d021      	beq.n	800a9b4 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	f06f 0204 	mvn.w	r2, #4
 800a978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2202      	movs	r2, #2
 800a97e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	699b      	ldr	r3, [r3, #24]
 800a986:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d005      	beq.n	800a99a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	4798      	blx	r3
 800a998:	e009      	b.n	800a9ae <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	f003 0308 	and.w	r3, r3, #8
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d026      	beq.n	800aa0c <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	f003 0308 	and.w	r3, r3, #8
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d021      	beq.n	800aa0c <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f06f 0208 	mvn.w	r2, #8
 800a9d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2204      	movs	r2, #4
 800a9d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	69db      	ldr	r3, [r3, #28]
 800a9de:	f003 0303 	and.w	r3, r3, #3
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d005      	beq.n	800a9f2 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	4798      	blx	r3
 800a9f0:	e009      	b.n	800aa06 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	f003 0310 	and.w	r3, r3, #16
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d026      	beq.n	800aa64 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	f003 0310 	and.w	r3, r3, #16
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d021      	beq.n	800aa64 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	f06f 0210 	mvn.w	r2, #16
 800aa28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	2208      	movs	r2, #8
 800aa2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	69db      	ldr	r3, [r3, #28]
 800aa36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d005      	beq.n	800aa4a <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	4798      	blx	r3
 800aa48:	e009      	b.n	800aa5e <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2200      	movs	r2, #0
 800aa62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	f003 0301 	and.w	r3, r3, #1
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d00e      	beq.n	800aa8c <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	f003 0301 	and.w	r3, r3, #1
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d009      	beq.n	800aa8c <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f06f 0201 	mvn.w	r2, #1
 800aa80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d104      	bne.n	800aaa0 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d00e      	beq.n	800aabe <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d009      	beq.n	800aabe <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800aab2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d00e      	beq.n	800aae6 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d009      	beq.n	800aae6 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800aada:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d00e      	beq.n	800ab0e <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d009      	beq.n	800ab0e <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ab02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ab0e:	68bb      	ldr	r3, [r7, #8]
 800ab10:	f003 0320 	and.w	r3, r3, #32
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d00e      	beq.n	800ab36 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f003 0320 	and.w	r3, r3, #32
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d009      	beq.n	800ab36 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f06f 0220 	mvn.w	r2, #32
 800ab2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d00e      	beq.n	800ab5e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d009      	beq.n	800ab5e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800ab52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d00e      	beq.n	800ab86 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d009      	beq.n	800ab86 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800ab7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d00e      	beq.n	800abae <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d009      	beq.n	800abae <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800aba2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d00e      	beq.n	800abd6 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d009      	beq.n	800abd6 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800abca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800abd6:	bf00      	nop
 800abd8:	3710      	adds	r7, #16
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}
	...

0800abe0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b086      	sub	sp, #24
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	60f8      	str	r0, [r7, #12]
 800abe8:	60b9      	str	r1, [r7, #8]
 800abea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800abec:	2300      	movs	r3, #0
 800abee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800abf6:	2b01      	cmp	r3, #1
 800abf8:	d101      	bne.n	800abfe <HAL_TIM_OC_ConfigChannel+0x1e>
 800abfa:	2302      	movs	r3, #2
 800abfc:	e066      	b.n	800accc <HAL_TIM_OC_ConfigChannel+0xec>
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	2201      	movs	r2, #1
 800ac02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2b14      	cmp	r3, #20
 800ac0a:	d857      	bhi.n	800acbc <HAL_TIM_OC_ConfigChannel+0xdc>
 800ac0c:	a201      	add	r2, pc, #4	@ (adr r2, 800ac14 <HAL_TIM_OC_ConfigChannel+0x34>)
 800ac0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac12:	bf00      	nop
 800ac14:	0800ac69 	.word	0x0800ac69
 800ac18:	0800acbd 	.word	0x0800acbd
 800ac1c:	0800acbd 	.word	0x0800acbd
 800ac20:	0800acbd 	.word	0x0800acbd
 800ac24:	0800ac77 	.word	0x0800ac77
 800ac28:	0800acbd 	.word	0x0800acbd
 800ac2c:	0800acbd 	.word	0x0800acbd
 800ac30:	0800acbd 	.word	0x0800acbd
 800ac34:	0800ac85 	.word	0x0800ac85
 800ac38:	0800acbd 	.word	0x0800acbd
 800ac3c:	0800acbd 	.word	0x0800acbd
 800ac40:	0800acbd 	.word	0x0800acbd
 800ac44:	0800ac93 	.word	0x0800ac93
 800ac48:	0800acbd 	.word	0x0800acbd
 800ac4c:	0800acbd 	.word	0x0800acbd
 800ac50:	0800acbd 	.word	0x0800acbd
 800ac54:	0800aca1 	.word	0x0800aca1
 800ac58:	0800acbd 	.word	0x0800acbd
 800ac5c:	0800acbd 	.word	0x0800acbd
 800ac60:	0800acbd 	.word	0x0800acbd
 800ac64:	0800acaf 	.word	0x0800acaf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	68b9      	ldr	r1, [r7, #8]
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f000 fcc8 	bl	800b604 <TIM_OC1_SetConfig>
      break;
 800ac74:	e025      	b.n	800acc2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	68b9      	ldr	r1, [r7, #8]
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	f000 fd5b 	bl	800b738 <TIM_OC2_SetConfig>
      break;
 800ac82:	e01e      	b.n	800acc2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	68b9      	ldr	r1, [r7, #8]
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f000 fde8 	bl	800b860 <TIM_OC3_SetConfig>
      break;
 800ac90:	e017      	b.n	800acc2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	68b9      	ldr	r1, [r7, #8]
 800ac98:	4618      	mov	r0, r3
 800ac9a:	f000 fe73 	bl	800b984 <TIM_OC4_SetConfig>
      break;
 800ac9e:	e010      	b.n	800acc2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	68b9      	ldr	r1, [r7, #8]
 800aca6:	4618      	mov	r0, r3
 800aca8:	f000 ff00 	bl	800baac <TIM_OC5_SetConfig>
      break;
 800acac:	e009      	b.n	800acc2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	68b9      	ldr	r1, [r7, #8]
 800acb4:	4618      	mov	r0, r3
 800acb6:	f000 ff63 	bl	800bb80 <TIM_OC6_SetConfig>
      break;
 800acba:	e002      	b.n	800acc2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800acbc:	2301      	movs	r3, #1
 800acbe:	75fb      	strb	r3, [r7, #23]
      break;
 800acc0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	2200      	movs	r2, #0
 800acc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800acca:	7dfb      	ldrb	r3, [r7, #23]
}
 800accc:	4618      	mov	r0, r3
 800acce:	3718      	adds	r7, #24
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}

0800acd4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b086      	sub	sp, #24
 800acd8:	af00      	add	r7, sp, #0
 800acda:	60f8      	str	r0, [r7, #12]
 800acdc:	60b9      	str	r1, [r7, #8]
 800acde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ace0:	2300      	movs	r3, #0
 800ace2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800acea:	2b01      	cmp	r3, #1
 800acec:	d101      	bne.n	800acf2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800acee:	2302      	movs	r3, #2
 800acf0:	e0ff      	b.n	800aef2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	2201      	movs	r2, #1
 800acf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2b14      	cmp	r3, #20
 800acfe:	f200 80f0 	bhi.w	800aee2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ad02:	a201      	add	r2, pc, #4	@ (adr r2, 800ad08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ad04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad08:	0800ad5d 	.word	0x0800ad5d
 800ad0c:	0800aee3 	.word	0x0800aee3
 800ad10:	0800aee3 	.word	0x0800aee3
 800ad14:	0800aee3 	.word	0x0800aee3
 800ad18:	0800ad9d 	.word	0x0800ad9d
 800ad1c:	0800aee3 	.word	0x0800aee3
 800ad20:	0800aee3 	.word	0x0800aee3
 800ad24:	0800aee3 	.word	0x0800aee3
 800ad28:	0800addf 	.word	0x0800addf
 800ad2c:	0800aee3 	.word	0x0800aee3
 800ad30:	0800aee3 	.word	0x0800aee3
 800ad34:	0800aee3 	.word	0x0800aee3
 800ad38:	0800ae1f 	.word	0x0800ae1f
 800ad3c:	0800aee3 	.word	0x0800aee3
 800ad40:	0800aee3 	.word	0x0800aee3
 800ad44:	0800aee3 	.word	0x0800aee3
 800ad48:	0800ae61 	.word	0x0800ae61
 800ad4c:	0800aee3 	.word	0x0800aee3
 800ad50:	0800aee3 	.word	0x0800aee3
 800ad54:	0800aee3 	.word	0x0800aee3
 800ad58:	0800aea1 	.word	0x0800aea1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	68b9      	ldr	r1, [r7, #8]
 800ad62:	4618      	mov	r0, r3
 800ad64:	f000 fc4e 	bl	800b604 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	699a      	ldr	r2, [r3, #24]
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f042 0208 	orr.w	r2, r2, #8
 800ad76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	699a      	ldr	r2, [r3, #24]
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	f022 0204 	bic.w	r2, r2, #4
 800ad86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	6999      	ldr	r1, [r3, #24]
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	691a      	ldr	r2, [r3, #16]
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	430a      	orrs	r2, r1
 800ad98:	619a      	str	r2, [r3, #24]
      break;
 800ad9a:	e0a5      	b.n	800aee8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	68b9      	ldr	r1, [r7, #8]
 800ada2:	4618      	mov	r0, r3
 800ada4:	f000 fcc8 	bl	800b738 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	699a      	ldr	r2, [r3, #24]
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800adb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	699a      	ldr	r2, [r3, #24]
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800adc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	6999      	ldr	r1, [r3, #24]
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	691b      	ldr	r3, [r3, #16]
 800add2:	021a      	lsls	r2, r3, #8
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	430a      	orrs	r2, r1
 800adda:	619a      	str	r2, [r3, #24]
      break;
 800addc:	e084      	b.n	800aee8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	68b9      	ldr	r1, [r7, #8]
 800ade4:	4618      	mov	r0, r3
 800ade6:	f000 fd3b 	bl	800b860 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	69da      	ldr	r2, [r3, #28]
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	f042 0208 	orr.w	r2, r2, #8
 800adf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	69da      	ldr	r2, [r3, #28]
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	f022 0204 	bic.w	r2, r2, #4
 800ae08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	69d9      	ldr	r1, [r3, #28]
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	691a      	ldr	r2, [r3, #16]
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	430a      	orrs	r2, r1
 800ae1a:	61da      	str	r2, [r3, #28]
      break;
 800ae1c:	e064      	b.n	800aee8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	68b9      	ldr	r1, [r7, #8]
 800ae24:	4618      	mov	r0, r3
 800ae26:	f000 fdad 	bl	800b984 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	69da      	ldr	r2, [r3, #28]
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ae38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	69da      	ldr	r2, [r3, #28]
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ae48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	69d9      	ldr	r1, [r3, #28]
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	691b      	ldr	r3, [r3, #16]
 800ae54:	021a      	lsls	r2, r3, #8
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	430a      	orrs	r2, r1
 800ae5c:	61da      	str	r2, [r3, #28]
      break;
 800ae5e:	e043      	b.n	800aee8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	68b9      	ldr	r1, [r7, #8]
 800ae66:	4618      	mov	r0, r3
 800ae68:	f000 fe20 	bl	800baac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f042 0208 	orr.w	r2, r2, #8
 800ae7a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f022 0204 	bic.w	r2, r2, #4
 800ae8a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	691a      	ldr	r2, [r3, #16]
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	430a      	orrs	r2, r1
 800ae9c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800ae9e:	e023      	b.n	800aee8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	68b9      	ldr	r1, [r7, #8]
 800aea6:	4618      	mov	r0, r3
 800aea8:	f000 fe6a 	bl	800bb80 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800aeba:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aeca:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	691b      	ldr	r3, [r3, #16]
 800aed6:	021a      	lsls	r2, r3, #8
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	430a      	orrs	r2, r1
 800aede:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800aee0:	e002      	b.n	800aee8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800aee2:	2301      	movs	r3, #1
 800aee4:	75fb      	strb	r3, [r7, #23]
      break;
 800aee6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	2200      	movs	r2, #0
 800aeec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800aef0:	7dfb      	ldrb	r3, [r7, #23]
}
 800aef2:	4618      	mov	r0, r3
 800aef4:	3718      	adds	r7, #24
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}
 800aefa:	bf00      	nop

0800aefc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b084      	sub	sp, #16
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
 800af04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800af06:	2300      	movs	r3, #0
 800af08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800af10:	2b01      	cmp	r3, #1
 800af12:	d101      	bne.n	800af18 <HAL_TIM_ConfigClockSource+0x1c>
 800af14:	2302      	movs	r3, #2
 800af16:	e0f6      	b.n	800b106 <HAL_TIM_ConfigClockSource+0x20a>
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2201      	movs	r2, #1
 800af1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2202      	movs	r2, #2
 800af24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	689b      	ldr	r3, [r3, #8]
 800af2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800af30:	68bb      	ldr	r3, [r7, #8]
 800af32:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800af36:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800af3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800af42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	68ba      	ldr	r2, [r7, #8]
 800af4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	4a6f      	ldr	r2, [pc, #444]	@ (800b110 <HAL_TIM_ConfigClockSource+0x214>)
 800af52:	4293      	cmp	r3, r2
 800af54:	f000 80c1 	beq.w	800b0da <HAL_TIM_ConfigClockSource+0x1de>
 800af58:	4a6d      	ldr	r2, [pc, #436]	@ (800b110 <HAL_TIM_ConfigClockSource+0x214>)
 800af5a:	4293      	cmp	r3, r2
 800af5c:	f200 80c6 	bhi.w	800b0ec <HAL_TIM_ConfigClockSource+0x1f0>
 800af60:	4a6c      	ldr	r2, [pc, #432]	@ (800b114 <HAL_TIM_ConfigClockSource+0x218>)
 800af62:	4293      	cmp	r3, r2
 800af64:	f000 80b9 	beq.w	800b0da <HAL_TIM_ConfigClockSource+0x1de>
 800af68:	4a6a      	ldr	r2, [pc, #424]	@ (800b114 <HAL_TIM_ConfigClockSource+0x218>)
 800af6a:	4293      	cmp	r3, r2
 800af6c:	f200 80be 	bhi.w	800b0ec <HAL_TIM_ConfigClockSource+0x1f0>
 800af70:	4a69      	ldr	r2, [pc, #420]	@ (800b118 <HAL_TIM_ConfigClockSource+0x21c>)
 800af72:	4293      	cmp	r3, r2
 800af74:	f000 80b1 	beq.w	800b0da <HAL_TIM_ConfigClockSource+0x1de>
 800af78:	4a67      	ldr	r2, [pc, #412]	@ (800b118 <HAL_TIM_ConfigClockSource+0x21c>)
 800af7a:	4293      	cmp	r3, r2
 800af7c:	f200 80b6 	bhi.w	800b0ec <HAL_TIM_ConfigClockSource+0x1f0>
 800af80:	4a66      	ldr	r2, [pc, #408]	@ (800b11c <HAL_TIM_ConfigClockSource+0x220>)
 800af82:	4293      	cmp	r3, r2
 800af84:	f000 80a9 	beq.w	800b0da <HAL_TIM_ConfigClockSource+0x1de>
 800af88:	4a64      	ldr	r2, [pc, #400]	@ (800b11c <HAL_TIM_ConfigClockSource+0x220>)
 800af8a:	4293      	cmp	r3, r2
 800af8c:	f200 80ae 	bhi.w	800b0ec <HAL_TIM_ConfigClockSource+0x1f0>
 800af90:	4a63      	ldr	r2, [pc, #396]	@ (800b120 <HAL_TIM_ConfigClockSource+0x224>)
 800af92:	4293      	cmp	r3, r2
 800af94:	f000 80a1 	beq.w	800b0da <HAL_TIM_ConfigClockSource+0x1de>
 800af98:	4a61      	ldr	r2, [pc, #388]	@ (800b120 <HAL_TIM_ConfigClockSource+0x224>)
 800af9a:	4293      	cmp	r3, r2
 800af9c:	f200 80a6 	bhi.w	800b0ec <HAL_TIM_ConfigClockSource+0x1f0>
 800afa0:	4a60      	ldr	r2, [pc, #384]	@ (800b124 <HAL_TIM_ConfigClockSource+0x228>)
 800afa2:	4293      	cmp	r3, r2
 800afa4:	f000 8099 	beq.w	800b0da <HAL_TIM_ConfigClockSource+0x1de>
 800afa8:	4a5e      	ldr	r2, [pc, #376]	@ (800b124 <HAL_TIM_ConfigClockSource+0x228>)
 800afaa:	4293      	cmp	r3, r2
 800afac:	f200 809e 	bhi.w	800b0ec <HAL_TIM_ConfigClockSource+0x1f0>
 800afb0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800afb4:	f000 8091 	beq.w	800b0da <HAL_TIM_ConfigClockSource+0x1de>
 800afb8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800afbc:	f200 8096 	bhi.w	800b0ec <HAL_TIM_ConfigClockSource+0x1f0>
 800afc0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800afc4:	f000 8089 	beq.w	800b0da <HAL_TIM_ConfigClockSource+0x1de>
 800afc8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800afcc:	f200 808e 	bhi.w	800b0ec <HAL_TIM_ConfigClockSource+0x1f0>
 800afd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800afd4:	d03e      	beq.n	800b054 <HAL_TIM_ConfigClockSource+0x158>
 800afd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800afda:	f200 8087 	bhi.w	800b0ec <HAL_TIM_ConfigClockSource+0x1f0>
 800afde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800afe2:	f000 8086 	beq.w	800b0f2 <HAL_TIM_ConfigClockSource+0x1f6>
 800afe6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800afea:	d87f      	bhi.n	800b0ec <HAL_TIM_ConfigClockSource+0x1f0>
 800afec:	2b70      	cmp	r3, #112	@ 0x70
 800afee:	d01a      	beq.n	800b026 <HAL_TIM_ConfigClockSource+0x12a>
 800aff0:	2b70      	cmp	r3, #112	@ 0x70
 800aff2:	d87b      	bhi.n	800b0ec <HAL_TIM_ConfigClockSource+0x1f0>
 800aff4:	2b60      	cmp	r3, #96	@ 0x60
 800aff6:	d050      	beq.n	800b09a <HAL_TIM_ConfigClockSource+0x19e>
 800aff8:	2b60      	cmp	r3, #96	@ 0x60
 800affa:	d877      	bhi.n	800b0ec <HAL_TIM_ConfigClockSource+0x1f0>
 800affc:	2b50      	cmp	r3, #80	@ 0x50
 800affe:	d03c      	beq.n	800b07a <HAL_TIM_ConfigClockSource+0x17e>
 800b000:	2b50      	cmp	r3, #80	@ 0x50
 800b002:	d873      	bhi.n	800b0ec <HAL_TIM_ConfigClockSource+0x1f0>
 800b004:	2b40      	cmp	r3, #64	@ 0x40
 800b006:	d058      	beq.n	800b0ba <HAL_TIM_ConfigClockSource+0x1be>
 800b008:	2b40      	cmp	r3, #64	@ 0x40
 800b00a:	d86f      	bhi.n	800b0ec <HAL_TIM_ConfigClockSource+0x1f0>
 800b00c:	2b30      	cmp	r3, #48	@ 0x30
 800b00e:	d064      	beq.n	800b0da <HAL_TIM_ConfigClockSource+0x1de>
 800b010:	2b30      	cmp	r3, #48	@ 0x30
 800b012:	d86b      	bhi.n	800b0ec <HAL_TIM_ConfigClockSource+0x1f0>
 800b014:	2b20      	cmp	r3, #32
 800b016:	d060      	beq.n	800b0da <HAL_TIM_ConfigClockSource+0x1de>
 800b018:	2b20      	cmp	r3, #32
 800b01a:	d867      	bhi.n	800b0ec <HAL_TIM_ConfigClockSource+0x1f0>
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d05c      	beq.n	800b0da <HAL_TIM_ConfigClockSource+0x1de>
 800b020:	2b10      	cmp	r3, #16
 800b022:	d05a      	beq.n	800b0da <HAL_TIM_ConfigClockSource+0x1de>
 800b024:	e062      	b.n	800b0ec <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b036:	f000 fe8b 	bl	800bd50 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	689b      	ldr	r3, [r3, #8]
 800b040:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b048:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	68ba      	ldr	r2, [r7, #8]
 800b050:	609a      	str	r2, [r3, #8]
      break;
 800b052:	e04f      	b.n	800b0f4 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b064:	f000 fe74 	bl	800bd50 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	689a      	ldr	r2, [r3, #8]
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b076:	609a      	str	r2, [r3, #8]
      break;
 800b078:	e03c      	b.n	800b0f4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b086:	461a      	mov	r2, r3
 800b088:	f000 fde6 	bl	800bc58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	2150      	movs	r1, #80	@ 0x50
 800b092:	4618      	mov	r0, r3
 800b094:	f000 fe3f 	bl	800bd16 <TIM_ITRx_SetConfig>
      break;
 800b098:	e02c      	b.n	800b0f4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b0a6:	461a      	mov	r2, r3
 800b0a8:	f000 fe05 	bl	800bcb6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	2160      	movs	r1, #96	@ 0x60
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	f000 fe2f 	bl	800bd16 <TIM_ITRx_SetConfig>
      break;
 800b0b8:	e01c      	b.n	800b0f4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b0c6:	461a      	mov	r2, r3
 800b0c8:	f000 fdc6 	bl	800bc58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	2140      	movs	r1, #64	@ 0x40
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f000 fe1f 	bl	800bd16 <TIM_ITRx_SetConfig>
      break;
 800b0d8:	e00c      	b.n	800b0f4 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681a      	ldr	r2, [r3, #0]
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	4619      	mov	r1, r3
 800b0e4:	4610      	mov	r0, r2
 800b0e6:	f000 fe16 	bl	800bd16 <TIM_ITRx_SetConfig>
      break;
 800b0ea:	e003      	b.n	800b0f4 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	73fb      	strb	r3, [r7, #15]
      break;
 800b0f0:	e000      	b.n	800b0f4 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800b0f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2201      	movs	r2, #1
 800b0f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2200      	movs	r2, #0
 800b100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b104:	7bfb      	ldrb	r3, [r7, #15]
}
 800b106:	4618      	mov	r0, r3
 800b108:	3710      	adds	r7, #16
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}
 800b10e:	bf00      	nop
 800b110:	00100070 	.word	0x00100070
 800b114:	00100060 	.word	0x00100060
 800b118:	00100050 	.word	0x00100050
 800b11c:	00100040 	.word	0x00100040
 800b120:	00100030 	.word	0x00100030
 800b124:	00100020 	.word	0x00100020

0800b128 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b128:	b480      	push	{r7}
 800b12a:	b083      	sub	sp, #12
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800b130:	bf00      	nop
 800b132:	370c      	adds	r7, #12
 800b134:	46bd      	mov	sp, r7
 800b136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13a:	4770      	bx	lr

0800b13c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b13c:	b480      	push	{r7}
 800b13e:	b083      	sub	sp, #12
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b144:	bf00      	nop
 800b146:	370c      	adds	r7, #12
 800b148:	46bd      	mov	sp, r7
 800b14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14e:	4770      	bx	lr

0800b150 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b150:	b480      	push	{r7}
 800b152:	b083      	sub	sp, #12
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b158:	bf00      	nop
 800b15a:	370c      	adds	r7, #12
 800b15c:	46bd      	mov	sp, r7
 800b15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b162:	4770      	bx	lr

0800b164 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b164:	b480      	push	{r7}
 800b166:	b083      	sub	sp, #12
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800b16c:	bf00      	nop
 800b16e:	370c      	adds	r7, #12
 800b170:	46bd      	mov	sp, r7
 800b172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b176:	4770      	bx	lr

0800b178 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b178:	b480      	push	{r7}
 800b17a:	b083      	sub	sp, #12
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b180:	bf00      	nop
 800b182:	370c      	adds	r7, #12
 800b184:	46bd      	mov	sp, r7
 800b186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18a:	4770      	bx	lr

0800b18c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b18c:	b480      	push	{r7}
 800b18e:	b083      	sub	sp, #12
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800b194:	bf00      	nop
 800b196:	370c      	adds	r7, #12
 800b198:	46bd      	mov	sp, r7
 800b19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19e:	4770      	bx	lr

0800b1a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b1a0:	b480      	push	{r7}
 800b1a2:	b083      	sub	sp, #12
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b1a8:	bf00      	nop
 800b1aa:	370c      	adds	r7, #12
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b2:	4770      	bx	lr

0800b1b4 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b083      	sub	sp, #12
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800b1bc:	bf00      	nop
 800b1be:	370c      	adds	r7, #12
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c6:	4770      	bx	lr

0800b1c8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800b1c8:	b480      	push	{r7}
 800b1ca:	b083      	sub	sp, #12
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800b1d0:	bf00      	nop
 800b1d2:	370c      	adds	r7, #12
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1da:	4770      	bx	lr

0800b1dc <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800b1dc:	b480      	push	{r7}
 800b1de:	b087      	sub	sp, #28
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	60f8      	str	r0, [r7, #12]
 800b1e4:	460b      	mov	r3, r1
 800b1e6:	607a      	str	r2, [r7, #4]
 800b1e8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d101      	bne.n	800b1f8 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	e14a      	b.n	800b48e <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b1fe:	b2db      	uxtb	r3, r3
 800b200:	2b01      	cmp	r3, #1
 800b202:	f040 80dd 	bne.w	800b3c0 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800b206:	7afb      	ldrb	r3, [r7, #11]
 800b208:	2b1f      	cmp	r3, #31
 800b20a:	f200 80d6 	bhi.w	800b3ba <HAL_TIM_RegisterCallback+0x1de>
 800b20e:	a201      	add	r2, pc, #4	@ (adr r2, 800b214 <HAL_TIM_RegisterCallback+0x38>)
 800b210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b214:	0800b295 	.word	0x0800b295
 800b218:	0800b29d 	.word	0x0800b29d
 800b21c:	0800b2a5 	.word	0x0800b2a5
 800b220:	0800b2ad 	.word	0x0800b2ad
 800b224:	0800b2b5 	.word	0x0800b2b5
 800b228:	0800b2bd 	.word	0x0800b2bd
 800b22c:	0800b2c5 	.word	0x0800b2c5
 800b230:	0800b2cd 	.word	0x0800b2cd
 800b234:	0800b2d5 	.word	0x0800b2d5
 800b238:	0800b2dd 	.word	0x0800b2dd
 800b23c:	0800b2e5 	.word	0x0800b2e5
 800b240:	0800b2ed 	.word	0x0800b2ed
 800b244:	0800b2f5 	.word	0x0800b2f5
 800b248:	0800b2fd 	.word	0x0800b2fd
 800b24c:	0800b307 	.word	0x0800b307
 800b250:	0800b311 	.word	0x0800b311
 800b254:	0800b31b 	.word	0x0800b31b
 800b258:	0800b325 	.word	0x0800b325
 800b25c:	0800b32f 	.word	0x0800b32f
 800b260:	0800b339 	.word	0x0800b339
 800b264:	0800b343 	.word	0x0800b343
 800b268:	0800b34d 	.word	0x0800b34d
 800b26c:	0800b357 	.word	0x0800b357
 800b270:	0800b361 	.word	0x0800b361
 800b274:	0800b36b 	.word	0x0800b36b
 800b278:	0800b375 	.word	0x0800b375
 800b27c:	0800b37f 	.word	0x0800b37f
 800b280:	0800b389 	.word	0x0800b389
 800b284:	0800b393 	.word	0x0800b393
 800b288:	0800b39d 	.word	0x0800b39d
 800b28c:	0800b3a7 	.word	0x0800b3a7
 800b290:	0800b3b1 	.word	0x0800b3b1
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	687a      	ldr	r2, [r7, #4]
 800b298:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800b29a:	e0f7      	b.n	800b48c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	687a      	ldr	r2, [r7, #4]
 800b2a0:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800b2a2:	e0f3      	b.n	800b48c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	687a      	ldr	r2, [r7, #4]
 800b2a8:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800b2aa:	e0ef      	b.n	800b48c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	687a      	ldr	r2, [r7, #4]
 800b2b0:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800b2b2:	e0eb      	b.n	800b48c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	687a      	ldr	r2, [r7, #4]
 800b2b8:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800b2ba:	e0e7      	b.n	800b48c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	687a      	ldr	r2, [r7, #4]
 800b2c0:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800b2c2:	e0e3      	b.n	800b48c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	687a      	ldr	r2, [r7, #4]
 800b2c8:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800b2ca:	e0df      	b.n	800b48c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	687a      	ldr	r2, [r7, #4]
 800b2d0:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800b2d2:	e0db      	b.n	800b48c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	687a      	ldr	r2, [r7, #4]
 800b2d8:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800b2da:	e0d7      	b.n	800b48c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	687a      	ldr	r2, [r7, #4]
 800b2e0:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800b2e2:	e0d3      	b.n	800b48c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	687a      	ldr	r2, [r7, #4]
 800b2e8:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800b2ea:	e0cf      	b.n	800b48c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	687a      	ldr	r2, [r7, #4]
 800b2f0:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800b2f2:	e0cb      	b.n	800b48c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	687a      	ldr	r2, [r7, #4]
 800b2f8:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800b2fa:	e0c7      	b.n	800b48c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	687a      	ldr	r2, [r7, #4]
 800b300:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800b304:	e0c2      	b.n	800b48c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	687a      	ldr	r2, [r7, #4]
 800b30a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800b30e:	e0bd      	b.n	800b48c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	687a      	ldr	r2, [r7, #4]
 800b314:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 800b318:	e0b8      	b.n	800b48c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	687a      	ldr	r2, [r7, #4]
 800b31e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800b322:	e0b3      	b.n	800b48c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	687a      	ldr	r2, [r7, #4]
 800b328:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 800b32c:	e0ae      	b.n	800b48c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	687a      	ldr	r2, [r7, #4]
 800b332:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800b336:	e0a9      	b.n	800b48c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	687a      	ldr	r2, [r7, #4]
 800b33c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800b340:	e0a4      	b.n	800b48c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	687a      	ldr	r2, [r7, #4]
 800b346:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800b34a:	e09f      	b.n	800b48c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	687a      	ldr	r2, [r7, #4]
 800b350:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800b354:	e09a      	b.n	800b48c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	687a      	ldr	r2, [r7, #4]
 800b35a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800b35e:	e095      	b.n	800b48c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	687a      	ldr	r2, [r7, #4]
 800b364:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800b368:	e090      	b.n	800b48c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	687a      	ldr	r2, [r7, #4]
 800b36e:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800b372:	e08b      	b.n	800b48c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	687a      	ldr	r2, [r7, #4]
 800b378:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800b37c:	e086      	b.n	800b48c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	687a      	ldr	r2, [r7, #4]
 800b382:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800b386:	e081      	b.n	800b48c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	687a      	ldr	r2, [r7, #4]
 800b38c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800b390:	e07c      	b.n	800b48c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	687a      	ldr	r2, [r7, #4]
 800b396:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800b39a:	e077      	b.n	800b48c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	687a      	ldr	r2, [r7, #4]
 800b3a0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 800b3a4:	e072      	b.n	800b48c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	687a      	ldr	r2, [r7, #4]
 800b3aa:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800b3ae:	e06d      	b.n	800b48c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	687a      	ldr	r2, [r7, #4]
 800b3b4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800b3b8:	e068      	b.n	800b48c <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	75fb      	strb	r3, [r7, #23]
        break;
 800b3be:	e065      	b.n	800b48c <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b3c6:	b2db      	uxtb	r3, r3
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d15d      	bne.n	800b488 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 800b3cc:	7afb      	ldrb	r3, [r7, #11]
 800b3ce:	2b0d      	cmp	r3, #13
 800b3d0:	d857      	bhi.n	800b482 <HAL_TIM_RegisterCallback+0x2a6>
 800b3d2:	a201      	add	r2, pc, #4	@ (adr r2, 800b3d8 <HAL_TIM_RegisterCallback+0x1fc>)
 800b3d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3d8:	0800b411 	.word	0x0800b411
 800b3dc:	0800b419 	.word	0x0800b419
 800b3e0:	0800b421 	.word	0x0800b421
 800b3e4:	0800b429 	.word	0x0800b429
 800b3e8:	0800b431 	.word	0x0800b431
 800b3ec:	0800b439 	.word	0x0800b439
 800b3f0:	0800b441 	.word	0x0800b441
 800b3f4:	0800b449 	.word	0x0800b449
 800b3f8:	0800b451 	.word	0x0800b451
 800b3fc:	0800b459 	.word	0x0800b459
 800b400:	0800b461 	.word	0x0800b461
 800b404:	0800b469 	.word	0x0800b469
 800b408:	0800b471 	.word	0x0800b471
 800b40c:	0800b479 	.word	0x0800b479
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	687a      	ldr	r2, [r7, #4]
 800b414:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800b416:	e039      	b.n	800b48c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	687a      	ldr	r2, [r7, #4]
 800b41c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800b41e:	e035      	b.n	800b48c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	687a      	ldr	r2, [r7, #4]
 800b424:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800b426:	e031      	b.n	800b48c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	687a      	ldr	r2, [r7, #4]
 800b42c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800b42e:	e02d      	b.n	800b48c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	687a      	ldr	r2, [r7, #4]
 800b434:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800b436:	e029      	b.n	800b48c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	687a      	ldr	r2, [r7, #4]
 800b43c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800b43e:	e025      	b.n	800b48c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	687a      	ldr	r2, [r7, #4]
 800b444:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800b446:	e021      	b.n	800b48c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	687a      	ldr	r2, [r7, #4]
 800b44c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800b44e:	e01d      	b.n	800b48c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	687a      	ldr	r2, [r7, #4]
 800b454:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800b456:	e019      	b.n	800b48c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	687a      	ldr	r2, [r7, #4]
 800b45c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800b45e:	e015      	b.n	800b48c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	687a      	ldr	r2, [r7, #4]
 800b464:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800b466:	e011      	b.n	800b48c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	687a      	ldr	r2, [r7, #4]
 800b46c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800b46e:	e00d      	b.n	800b48c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	687a      	ldr	r2, [r7, #4]
 800b474:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800b476:	e009      	b.n	800b48c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	687a      	ldr	r2, [r7, #4]
 800b47c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800b480:	e004      	b.n	800b48c <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800b482:	2301      	movs	r3, #1
 800b484:	75fb      	strb	r3, [r7, #23]
        break;
 800b486:	e001      	b.n	800b48c <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800b488:	2301      	movs	r3, #1
 800b48a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800b48c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b48e:	4618      	mov	r0, r3
 800b490:	371c      	adds	r7, #28
 800b492:	46bd      	mov	sp, r7
 800b494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b498:	4770      	bx	lr
 800b49a:	bf00      	nop

0800b49c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b49c:	b480      	push	{r7}
 800b49e:	b085      	sub	sp, #20
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
 800b4a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	4a4c      	ldr	r2, [pc, #304]	@ (800b5e0 <TIM_Base_SetConfig+0x144>)
 800b4b0:	4293      	cmp	r3, r2
 800b4b2:	d017      	beq.n	800b4e4 <TIM_Base_SetConfig+0x48>
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4ba:	d013      	beq.n	800b4e4 <TIM_Base_SetConfig+0x48>
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	4a49      	ldr	r2, [pc, #292]	@ (800b5e4 <TIM_Base_SetConfig+0x148>)
 800b4c0:	4293      	cmp	r3, r2
 800b4c2:	d00f      	beq.n	800b4e4 <TIM_Base_SetConfig+0x48>
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	4a48      	ldr	r2, [pc, #288]	@ (800b5e8 <TIM_Base_SetConfig+0x14c>)
 800b4c8:	4293      	cmp	r3, r2
 800b4ca:	d00b      	beq.n	800b4e4 <TIM_Base_SetConfig+0x48>
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	4a47      	ldr	r2, [pc, #284]	@ (800b5ec <TIM_Base_SetConfig+0x150>)
 800b4d0:	4293      	cmp	r3, r2
 800b4d2:	d007      	beq.n	800b4e4 <TIM_Base_SetConfig+0x48>
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	4a46      	ldr	r2, [pc, #280]	@ (800b5f0 <TIM_Base_SetConfig+0x154>)
 800b4d8:	4293      	cmp	r3, r2
 800b4da:	d003      	beq.n	800b4e4 <TIM_Base_SetConfig+0x48>
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	4a45      	ldr	r2, [pc, #276]	@ (800b5f4 <TIM_Base_SetConfig+0x158>)
 800b4e0:	4293      	cmp	r3, r2
 800b4e2:	d108      	bne.n	800b4f6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b4ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	685b      	ldr	r3, [r3, #4]
 800b4f0:	68fa      	ldr	r2, [r7, #12]
 800b4f2:	4313      	orrs	r3, r2
 800b4f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	4a39      	ldr	r2, [pc, #228]	@ (800b5e0 <TIM_Base_SetConfig+0x144>)
 800b4fa:	4293      	cmp	r3, r2
 800b4fc:	d023      	beq.n	800b546 <TIM_Base_SetConfig+0xaa>
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b504:	d01f      	beq.n	800b546 <TIM_Base_SetConfig+0xaa>
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	4a36      	ldr	r2, [pc, #216]	@ (800b5e4 <TIM_Base_SetConfig+0x148>)
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d01b      	beq.n	800b546 <TIM_Base_SetConfig+0xaa>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	4a35      	ldr	r2, [pc, #212]	@ (800b5e8 <TIM_Base_SetConfig+0x14c>)
 800b512:	4293      	cmp	r3, r2
 800b514:	d017      	beq.n	800b546 <TIM_Base_SetConfig+0xaa>
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	4a34      	ldr	r2, [pc, #208]	@ (800b5ec <TIM_Base_SetConfig+0x150>)
 800b51a:	4293      	cmp	r3, r2
 800b51c:	d013      	beq.n	800b546 <TIM_Base_SetConfig+0xaa>
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	4a33      	ldr	r2, [pc, #204]	@ (800b5f0 <TIM_Base_SetConfig+0x154>)
 800b522:	4293      	cmp	r3, r2
 800b524:	d00f      	beq.n	800b546 <TIM_Base_SetConfig+0xaa>
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	4a33      	ldr	r2, [pc, #204]	@ (800b5f8 <TIM_Base_SetConfig+0x15c>)
 800b52a:	4293      	cmp	r3, r2
 800b52c:	d00b      	beq.n	800b546 <TIM_Base_SetConfig+0xaa>
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	4a32      	ldr	r2, [pc, #200]	@ (800b5fc <TIM_Base_SetConfig+0x160>)
 800b532:	4293      	cmp	r3, r2
 800b534:	d007      	beq.n	800b546 <TIM_Base_SetConfig+0xaa>
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	4a31      	ldr	r2, [pc, #196]	@ (800b600 <TIM_Base_SetConfig+0x164>)
 800b53a:	4293      	cmp	r3, r2
 800b53c:	d003      	beq.n	800b546 <TIM_Base_SetConfig+0xaa>
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	4a2c      	ldr	r2, [pc, #176]	@ (800b5f4 <TIM_Base_SetConfig+0x158>)
 800b542:	4293      	cmp	r3, r2
 800b544:	d108      	bne.n	800b558 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b54c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	68db      	ldr	r3, [r3, #12]
 800b552:	68fa      	ldr	r2, [r7, #12]
 800b554:	4313      	orrs	r3, r2
 800b556:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	695b      	ldr	r3, [r3, #20]
 800b562:	4313      	orrs	r3, r2
 800b564:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	68fa      	ldr	r2, [r7, #12]
 800b56a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	689a      	ldr	r2, [r3, #8]
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	681a      	ldr	r2, [r3, #0]
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	4a18      	ldr	r2, [pc, #96]	@ (800b5e0 <TIM_Base_SetConfig+0x144>)
 800b580:	4293      	cmp	r3, r2
 800b582:	d013      	beq.n	800b5ac <TIM_Base_SetConfig+0x110>
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	4a1a      	ldr	r2, [pc, #104]	@ (800b5f0 <TIM_Base_SetConfig+0x154>)
 800b588:	4293      	cmp	r3, r2
 800b58a:	d00f      	beq.n	800b5ac <TIM_Base_SetConfig+0x110>
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	4a1a      	ldr	r2, [pc, #104]	@ (800b5f8 <TIM_Base_SetConfig+0x15c>)
 800b590:	4293      	cmp	r3, r2
 800b592:	d00b      	beq.n	800b5ac <TIM_Base_SetConfig+0x110>
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	4a19      	ldr	r2, [pc, #100]	@ (800b5fc <TIM_Base_SetConfig+0x160>)
 800b598:	4293      	cmp	r3, r2
 800b59a:	d007      	beq.n	800b5ac <TIM_Base_SetConfig+0x110>
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	4a18      	ldr	r2, [pc, #96]	@ (800b600 <TIM_Base_SetConfig+0x164>)
 800b5a0:	4293      	cmp	r3, r2
 800b5a2:	d003      	beq.n	800b5ac <TIM_Base_SetConfig+0x110>
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	4a13      	ldr	r2, [pc, #76]	@ (800b5f4 <TIM_Base_SetConfig+0x158>)
 800b5a8:	4293      	cmp	r3, r2
 800b5aa:	d103      	bne.n	800b5b4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	691a      	ldr	r2, [r3, #16]
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2201      	movs	r2, #1
 800b5b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	691b      	ldr	r3, [r3, #16]
 800b5be:	f003 0301 	and.w	r3, r3, #1
 800b5c2:	2b01      	cmp	r3, #1
 800b5c4:	d105      	bne.n	800b5d2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	691b      	ldr	r3, [r3, #16]
 800b5ca:	f023 0201 	bic.w	r2, r3, #1
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	611a      	str	r2, [r3, #16]
  }
}
 800b5d2:	bf00      	nop
 800b5d4:	3714      	adds	r7, #20
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5dc:	4770      	bx	lr
 800b5de:	bf00      	nop
 800b5e0:	40012c00 	.word	0x40012c00
 800b5e4:	40000400 	.word	0x40000400
 800b5e8:	40000800 	.word	0x40000800
 800b5ec:	40000c00 	.word	0x40000c00
 800b5f0:	40013400 	.word	0x40013400
 800b5f4:	40015000 	.word	0x40015000
 800b5f8:	40014000 	.word	0x40014000
 800b5fc:	40014400 	.word	0x40014400
 800b600:	40014800 	.word	0x40014800

0800b604 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b604:	b480      	push	{r7}
 800b606:	b087      	sub	sp, #28
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
 800b60c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6a1b      	ldr	r3, [r3, #32]
 800b612:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	6a1b      	ldr	r3, [r3, #32]
 800b618:	f023 0201 	bic.w	r2, r3, #1
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	685b      	ldr	r3, [r3, #4]
 800b624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	699b      	ldr	r3, [r3, #24]
 800b62a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b632:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b636:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	f023 0303 	bic.w	r3, r3, #3
 800b63e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	68fa      	ldr	r2, [r7, #12]
 800b646:	4313      	orrs	r3, r2
 800b648:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b64a:	697b      	ldr	r3, [r7, #20]
 800b64c:	f023 0302 	bic.w	r3, r3, #2
 800b650:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	689b      	ldr	r3, [r3, #8]
 800b656:	697a      	ldr	r2, [r7, #20]
 800b658:	4313      	orrs	r3, r2
 800b65a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	4a30      	ldr	r2, [pc, #192]	@ (800b720 <TIM_OC1_SetConfig+0x11c>)
 800b660:	4293      	cmp	r3, r2
 800b662:	d013      	beq.n	800b68c <TIM_OC1_SetConfig+0x88>
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	4a2f      	ldr	r2, [pc, #188]	@ (800b724 <TIM_OC1_SetConfig+0x120>)
 800b668:	4293      	cmp	r3, r2
 800b66a:	d00f      	beq.n	800b68c <TIM_OC1_SetConfig+0x88>
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	4a2e      	ldr	r2, [pc, #184]	@ (800b728 <TIM_OC1_SetConfig+0x124>)
 800b670:	4293      	cmp	r3, r2
 800b672:	d00b      	beq.n	800b68c <TIM_OC1_SetConfig+0x88>
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	4a2d      	ldr	r2, [pc, #180]	@ (800b72c <TIM_OC1_SetConfig+0x128>)
 800b678:	4293      	cmp	r3, r2
 800b67a:	d007      	beq.n	800b68c <TIM_OC1_SetConfig+0x88>
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	4a2c      	ldr	r2, [pc, #176]	@ (800b730 <TIM_OC1_SetConfig+0x12c>)
 800b680:	4293      	cmp	r3, r2
 800b682:	d003      	beq.n	800b68c <TIM_OC1_SetConfig+0x88>
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	4a2b      	ldr	r2, [pc, #172]	@ (800b734 <TIM_OC1_SetConfig+0x130>)
 800b688:	4293      	cmp	r3, r2
 800b68a:	d10c      	bne.n	800b6a6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b68c:	697b      	ldr	r3, [r7, #20]
 800b68e:	f023 0308 	bic.w	r3, r3, #8
 800b692:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	68db      	ldr	r3, [r3, #12]
 800b698:	697a      	ldr	r2, [r7, #20]
 800b69a:	4313      	orrs	r3, r2
 800b69c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b69e:	697b      	ldr	r3, [r7, #20]
 800b6a0:	f023 0304 	bic.w	r3, r3, #4
 800b6a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	4a1d      	ldr	r2, [pc, #116]	@ (800b720 <TIM_OC1_SetConfig+0x11c>)
 800b6aa:	4293      	cmp	r3, r2
 800b6ac:	d013      	beq.n	800b6d6 <TIM_OC1_SetConfig+0xd2>
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	4a1c      	ldr	r2, [pc, #112]	@ (800b724 <TIM_OC1_SetConfig+0x120>)
 800b6b2:	4293      	cmp	r3, r2
 800b6b4:	d00f      	beq.n	800b6d6 <TIM_OC1_SetConfig+0xd2>
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	4a1b      	ldr	r2, [pc, #108]	@ (800b728 <TIM_OC1_SetConfig+0x124>)
 800b6ba:	4293      	cmp	r3, r2
 800b6bc:	d00b      	beq.n	800b6d6 <TIM_OC1_SetConfig+0xd2>
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	4a1a      	ldr	r2, [pc, #104]	@ (800b72c <TIM_OC1_SetConfig+0x128>)
 800b6c2:	4293      	cmp	r3, r2
 800b6c4:	d007      	beq.n	800b6d6 <TIM_OC1_SetConfig+0xd2>
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	4a19      	ldr	r2, [pc, #100]	@ (800b730 <TIM_OC1_SetConfig+0x12c>)
 800b6ca:	4293      	cmp	r3, r2
 800b6cc:	d003      	beq.n	800b6d6 <TIM_OC1_SetConfig+0xd2>
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	4a18      	ldr	r2, [pc, #96]	@ (800b734 <TIM_OC1_SetConfig+0x130>)
 800b6d2:	4293      	cmp	r3, r2
 800b6d4:	d111      	bne.n	800b6fa <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b6d6:	693b      	ldr	r3, [r7, #16]
 800b6d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b6dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b6de:	693b      	ldr	r3, [r7, #16]
 800b6e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b6e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	695b      	ldr	r3, [r3, #20]
 800b6ea:	693a      	ldr	r2, [r7, #16]
 800b6ec:	4313      	orrs	r3, r2
 800b6ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	699b      	ldr	r3, [r3, #24]
 800b6f4:	693a      	ldr	r2, [r7, #16]
 800b6f6:	4313      	orrs	r3, r2
 800b6f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	693a      	ldr	r2, [r7, #16]
 800b6fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	68fa      	ldr	r2, [r7, #12]
 800b704:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	685a      	ldr	r2, [r3, #4]
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	697a      	ldr	r2, [r7, #20]
 800b712:	621a      	str	r2, [r3, #32]
}
 800b714:	bf00      	nop
 800b716:	371c      	adds	r7, #28
 800b718:	46bd      	mov	sp, r7
 800b71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71e:	4770      	bx	lr
 800b720:	40012c00 	.word	0x40012c00
 800b724:	40013400 	.word	0x40013400
 800b728:	40014000 	.word	0x40014000
 800b72c:	40014400 	.word	0x40014400
 800b730:	40014800 	.word	0x40014800
 800b734:	40015000 	.word	0x40015000

0800b738 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b738:	b480      	push	{r7}
 800b73a:	b087      	sub	sp, #28
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
 800b740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6a1b      	ldr	r3, [r3, #32]
 800b746:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	6a1b      	ldr	r3, [r3, #32]
 800b74c:	f023 0210 	bic.w	r2, r3, #16
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	685b      	ldr	r3, [r3, #4]
 800b758:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	699b      	ldr	r3, [r3, #24]
 800b75e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b766:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b76a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b772:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	021b      	lsls	r3, r3, #8
 800b77a:	68fa      	ldr	r2, [r7, #12]
 800b77c:	4313      	orrs	r3, r2
 800b77e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b780:	697b      	ldr	r3, [r7, #20]
 800b782:	f023 0320 	bic.w	r3, r3, #32
 800b786:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	689b      	ldr	r3, [r3, #8]
 800b78c:	011b      	lsls	r3, r3, #4
 800b78e:	697a      	ldr	r2, [r7, #20]
 800b790:	4313      	orrs	r3, r2
 800b792:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	4a2c      	ldr	r2, [pc, #176]	@ (800b848 <TIM_OC2_SetConfig+0x110>)
 800b798:	4293      	cmp	r3, r2
 800b79a:	d007      	beq.n	800b7ac <TIM_OC2_SetConfig+0x74>
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	4a2b      	ldr	r2, [pc, #172]	@ (800b84c <TIM_OC2_SetConfig+0x114>)
 800b7a0:	4293      	cmp	r3, r2
 800b7a2:	d003      	beq.n	800b7ac <TIM_OC2_SetConfig+0x74>
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	4a2a      	ldr	r2, [pc, #168]	@ (800b850 <TIM_OC2_SetConfig+0x118>)
 800b7a8:	4293      	cmp	r3, r2
 800b7aa:	d10d      	bne.n	800b7c8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b7ac:	697b      	ldr	r3, [r7, #20]
 800b7ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b7b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	68db      	ldr	r3, [r3, #12]
 800b7b8:	011b      	lsls	r3, r3, #4
 800b7ba:	697a      	ldr	r2, [r7, #20]
 800b7bc:	4313      	orrs	r3, r2
 800b7be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b7c0:	697b      	ldr	r3, [r7, #20]
 800b7c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b7c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	4a1f      	ldr	r2, [pc, #124]	@ (800b848 <TIM_OC2_SetConfig+0x110>)
 800b7cc:	4293      	cmp	r3, r2
 800b7ce:	d013      	beq.n	800b7f8 <TIM_OC2_SetConfig+0xc0>
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	4a1e      	ldr	r2, [pc, #120]	@ (800b84c <TIM_OC2_SetConfig+0x114>)
 800b7d4:	4293      	cmp	r3, r2
 800b7d6:	d00f      	beq.n	800b7f8 <TIM_OC2_SetConfig+0xc0>
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	4a1e      	ldr	r2, [pc, #120]	@ (800b854 <TIM_OC2_SetConfig+0x11c>)
 800b7dc:	4293      	cmp	r3, r2
 800b7de:	d00b      	beq.n	800b7f8 <TIM_OC2_SetConfig+0xc0>
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	4a1d      	ldr	r2, [pc, #116]	@ (800b858 <TIM_OC2_SetConfig+0x120>)
 800b7e4:	4293      	cmp	r3, r2
 800b7e6:	d007      	beq.n	800b7f8 <TIM_OC2_SetConfig+0xc0>
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	4a1c      	ldr	r2, [pc, #112]	@ (800b85c <TIM_OC2_SetConfig+0x124>)
 800b7ec:	4293      	cmp	r3, r2
 800b7ee:	d003      	beq.n	800b7f8 <TIM_OC2_SetConfig+0xc0>
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	4a17      	ldr	r2, [pc, #92]	@ (800b850 <TIM_OC2_SetConfig+0x118>)
 800b7f4:	4293      	cmp	r3, r2
 800b7f6:	d113      	bne.n	800b820 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b7f8:	693b      	ldr	r3, [r7, #16]
 800b7fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b7fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b800:	693b      	ldr	r3, [r7, #16]
 800b802:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b806:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	695b      	ldr	r3, [r3, #20]
 800b80c:	009b      	lsls	r3, r3, #2
 800b80e:	693a      	ldr	r2, [r7, #16]
 800b810:	4313      	orrs	r3, r2
 800b812:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	699b      	ldr	r3, [r3, #24]
 800b818:	009b      	lsls	r3, r3, #2
 800b81a:	693a      	ldr	r2, [r7, #16]
 800b81c:	4313      	orrs	r3, r2
 800b81e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	693a      	ldr	r2, [r7, #16]
 800b824:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	68fa      	ldr	r2, [r7, #12]
 800b82a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	685a      	ldr	r2, [r3, #4]
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	697a      	ldr	r2, [r7, #20]
 800b838:	621a      	str	r2, [r3, #32]
}
 800b83a:	bf00      	nop
 800b83c:	371c      	adds	r7, #28
 800b83e:	46bd      	mov	sp, r7
 800b840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b844:	4770      	bx	lr
 800b846:	bf00      	nop
 800b848:	40012c00 	.word	0x40012c00
 800b84c:	40013400 	.word	0x40013400
 800b850:	40015000 	.word	0x40015000
 800b854:	40014000 	.word	0x40014000
 800b858:	40014400 	.word	0x40014400
 800b85c:	40014800 	.word	0x40014800

0800b860 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b860:	b480      	push	{r7}
 800b862:	b087      	sub	sp, #28
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
 800b868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6a1b      	ldr	r3, [r3, #32]
 800b86e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	6a1b      	ldr	r3, [r3, #32]
 800b874:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	685b      	ldr	r3, [r3, #4]
 800b880:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	69db      	ldr	r3, [r3, #28]
 800b886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b88e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	f023 0303 	bic.w	r3, r3, #3
 800b89a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	68fa      	ldr	r2, [r7, #12]
 800b8a2:	4313      	orrs	r3, r2
 800b8a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b8a6:	697b      	ldr	r3, [r7, #20]
 800b8a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b8ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	689b      	ldr	r3, [r3, #8]
 800b8b2:	021b      	lsls	r3, r3, #8
 800b8b4:	697a      	ldr	r2, [r7, #20]
 800b8b6:	4313      	orrs	r3, r2
 800b8b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	4a2b      	ldr	r2, [pc, #172]	@ (800b96c <TIM_OC3_SetConfig+0x10c>)
 800b8be:	4293      	cmp	r3, r2
 800b8c0:	d007      	beq.n	800b8d2 <TIM_OC3_SetConfig+0x72>
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	4a2a      	ldr	r2, [pc, #168]	@ (800b970 <TIM_OC3_SetConfig+0x110>)
 800b8c6:	4293      	cmp	r3, r2
 800b8c8:	d003      	beq.n	800b8d2 <TIM_OC3_SetConfig+0x72>
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	4a29      	ldr	r2, [pc, #164]	@ (800b974 <TIM_OC3_SetConfig+0x114>)
 800b8ce:	4293      	cmp	r3, r2
 800b8d0:	d10d      	bne.n	800b8ee <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b8d2:	697b      	ldr	r3, [r7, #20]
 800b8d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b8d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b8da:	683b      	ldr	r3, [r7, #0]
 800b8dc:	68db      	ldr	r3, [r3, #12]
 800b8de:	021b      	lsls	r3, r3, #8
 800b8e0:	697a      	ldr	r2, [r7, #20]
 800b8e2:	4313      	orrs	r3, r2
 800b8e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b8e6:	697b      	ldr	r3, [r7, #20]
 800b8e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b8ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	4a1e      	ldr	r2, [pc, #120]	@ (800b96c <TIM_OC3_SetConfig+0x10c>)
 800b8f2:	4293      	cmp	r3, r2
 800b8f4:	d013      	beq.n	800b91e <TIM_OC3_SetConfig+0xbe>
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	4a1d      	ldr	r2, [pc, #116]	@ (800b970 <TIM_OC3_SetConfig+0x110>)
 800b8fa:	4293      	cmp	r3, r2
 800b8fc:	d00f      	beq.n	800b91e <TIM_OC3_SetConfig+0xbe>
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	4a1d      	ldr	r2, [pc, #116]	@ (800b978 <TIM_OC3_SetConfig+0x118>)
 800b902:	4293      	cmp	r3, r2
 800b904:	d00b      	beq.n	800b91e <TIM_OC3_SetConfig+0xbe>
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	4a1c      	ldr	r2, [pc, #112]	@ (800b97c <TIM_OC3_SetConfig+0x11c>)
 800b90a:	4293      	cmp	r3, r2
 800b90c:	d007      	beq.n	800b91e <TIM_OC3_SetConfig+0xbe>
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	4a1b      	ldr	r2, [pc, #108]	@ (800b980 <TIM_OC3_SetConfig+0x120>)
 800b912:	4293      	cmp	r3, r2
 800b914:	d003      	beq.n	800b91e <TIM_OC3_SetConfig+0xbe>
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	4a16      	ldr	r2, [pc, #88]	@ (800b974 <TIM_OC3_SetConfig+0x114>)
 800b91a:	4293      	cmp	r3, r2
 800b91c:	d113      	bne.n	800b946 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b91e:	693b      	ldr	r3, [r7, #16]
 800b920:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b924:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b926:	693b      	ldr	r3, [r7, #16]
 800b928:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b92c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	695b      	ldr	r3, [r3, #20]
 800b932:	011b      	lsls	r3, r3, #4
 800b934:	693a      	ldr	r2, [r7, #16]
 800b936:	4313      	orrs	r3, r2
 800b938:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	699b      	ldr	r3, [r3, #24]
 800b93e:	011b      	lsls	r3, r3, #4
 800b940:	693a      	ldr	r2, [r7, #16]
 800b942:	4313      	orrs	r3, r2
 800b944:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	693a      	ldr	r2, [r7, #16]
 800b94a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	68fa      	ldr	r2, [r7, #12]
 800b950:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	685a      	ldr	r2, [r3, #4]
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	697a      	ldr	r2, [r7, #20]
 800b95e:	621a      	str	r2, [r3, #32]
}
 800b960:	bf00      	nop
 800b962:	371c      	adds	r7, #28
 800b964:	46bd      	mov	sp, r7
 800b966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96a:	4770      	bx	lr
 800b96c:	40012c00 	.word	0x40012c00
 800b970:	40013400 	.word	0x40013400
 800b974:	40015000 	.word	0x40015000
 800b978:	40014000 	.word	0x40014000
 800b97c:	40014400 	.word	0x40014400
 800b980:	40014800 	.word	0x40014800

0800b984 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b984:	b480      	push	{r7}
 800b986:	b087      	sub	sp, #28
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
 800b98c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6a1b      	ldr	r3, [r3, #32]
 800b992:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6a1b      	ldr	r3, [r3, #32]
 800b998:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	685b      	ldr	r3, [r3, #4]
 800b9a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	69db      	ldr	r3, [r3, #28]
 800b9aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b9b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b9b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b9be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	021b      	lsls	r3, r3, #8
 800b9c6:	68fa      	ldr	r2, [r7, #12]
 800b9c8:	4313      	orrs	r3, r2
 800b9ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b9cc:	697b      	ldr	r3, [r7, #20]
 800b9ce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b9d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	689b      	ldr	r3, [r3, #8]
 800b9d8:	031b      	lsls	r3, r3, #12
 800b9da:	697a      	ldr	r2, [r7, #20]
 800b9dc:	4313      	orrs	r3, r2
 800b9de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	4a2c      	ldr	r2, [pc, #176]	@ (800ba94 <TIM_OC4_SetConfig+0x110>)
 800b9e4:	4293      	cmp	r3, r2
 800b9e6:	d007      	beq.n	800b9f8 <TIM_OC4_SetConfig+0x74>
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	4a2b      	ldr	r2, [pc, #172]	@ (800ba98 <TIM_OC4_SetConfig+0x114>)
 800b9ec:	4293      	cmp	r3, r2
 800b9ee:	d003      	beq.n	800b9f8 <TIM_OC4_SetConfig+0x74>
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	4a2a      	ldr	r2, [pc, #168]	@ (800ba9c <TIM_OC4_SetConfig+0x118>)
 800b9f4:	4293      	cmp	r3, r2
 800b9f6:	d10d      	bne.n	800ba14 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800b9f8:	697b      	ldr	r3, [r7, #20]
 800b9fa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b9fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	68db      	ldr	r3, [r3, #12]
 800ba04:	031b      	lsls	r3, r3, #12
 800ba06:	697a      	ldr	r2, [r7, #20]
 800ba08:	4313      	orrs	r3, r2
 800ba0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800ba0c:	697b      	ldr	r3, [r7, #20]
 800ba0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ba12:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	4a1f      	ldr	r2, [pc, #124]	@ (800ba94 <TIM_OC4_SetConfig+0x110>)
 800ba18:	4293      	cmp	r3, r2
 800ba1a:	d013      	beq.n	800ba44 <TIM_OC4_SetConfig+0xc0>
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	4a1e      	ldr	r2, [pc, #120]	@ (800ba98 <TIM_OC4_SetConfig+0x114>)
 800ba20:	4293      	cmp	r3, r2
 800ba22:	d00f      	beq.n	800ba44 <TIM_OC4_SetConfig+0xc0>
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	4a1e      	ldr	r2, [pc, #120]	@ (800baa0 <TIM_OC4_SetConfig+0x11c>)
 800ba28:	4293      	cmp	r3, r2
 800ba2a:	d00b      	beq.n	800ba44 <TIM_OC4_SetConfig+0xc0>
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	4a1d      	ldr	r2, [pc, #116]	@ (800baa4 <TIM_OC4_SetConfig+0x120>)
 800ba30:	4293      	cmp	r3, r2
 800ba32:	d007      	beq.n	800ba44 <TIM_OC4_SetConfig+0xc0>
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	4a1c      	ldr	r2, [pc, #112]	@ (800baa8 <TIM_OC4_SetConfig+0x124>)
 800ba38:	4293      	cmp	r3, r2
 800ba3a:	d003      	beq.n	800ba44 <TIM_OC4_SetConfig+0xc0>
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	4a17      	ldr	r2, [pc, #92]	@ (800ba9c <TIM_OC4_SetConfig+0x118>)
 800ba40:	4293      	cmp	r3, r2
 800ba42:	d113      	bne.n	800ba6c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ba44:	693b      	ldr	r3, [r7, #16]
 800ba46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ba4a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800ba4c:	693b      	ldr	r3, [r7, #16]
 800ba4e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ba52:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	695b      	ldr	r3, [r3, #20]
 800ba58:	019b      	lsls	r3, r3, #6
 800ba5a:	693a      	ldr	r2, [r7, #16]
 800ba5c:	4313      	orrs	r3, r2
 800ba5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	699b      	ldr	r3, [r3, #24]
 800ba64:	019b      	lsls	r3, r3, #6
 800ba66:	693a      	ldr	r2, [r7, #16]
 800ba68:	4313      	orrs	r3, r2
 800ba6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	693a      	ldr	r2, [r7, #16]
 800ba70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	68fa      	ldr	r2, [r7, #12]
 800ba76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	685a      	ldr	r2, [r3, #4]
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	697a      	ldr	r2, [r7, #20]
 800ba84:	621a      	str	r2, [r3, #32]
}
 800ba86:	bf00      	nop
 800ba88:	371c      	adds	r7, #28
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba90:	4770      	bx	lr
 800ba92:	bf00      	nop
 800ba94:	40012c00 	.word	0x40012c00
 800ba98:	40013400 	.word	0x40013400
 800ba9c:	40015000 	.word	0x40015000
 800baa0:	40014000 	.word	0x40014000
 800baa4:	40014400 	.word	0x40014400
 800baa8:	40014800 	.word	0x40014800

0800baac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800baac:	b480      	push	{r7}
 800baae:	b087      	sub	sp, #28
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
 800bab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	6a1b      	ldr	r3, [r3, #32]
 800baba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	6a1b      	ldr	r3, [r3, #32]
 800bac0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	685b      	ldr	r3, [r3, #4]
 800bacc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bada:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bade:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	68fa      	ldr	r2, [r7, #12]
 800bae6:	4313      	orrs	r3, r2
 800bae8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800baea:	693b      	ldr	r3, [r7, #16]
 800baec:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800baf0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	689b      	ldr	r3, [r3, #8]
 800baf6:	041b      	lsls	r3, r3, #16
 800baf8:	693a      	ldr	r2, [r7, #16]
 800bafa:	4313      	orrs	r3, r2
 800bafc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	4a19      	ldr	r2, [pc, #100]	@ (800bb68 <TIM_OC5_SetConfig+0xbc>)
 800bb02:	4293      	cmp	r3, r2
 800bb04:	d013      	beq.n	800bb2e <TIM_OC5_SetConfig+0x82>
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	4a18      	ldr	r2, [pc, #96]	@ (800bb6c <TIM_OC5_SetConfig+0xc0>)
 800bb0a:	4293      	cmp	r3, r2
 800bb0c:	d00f      	beq.n	800bb2e <TIM_OC5_SetConfig+0x82>
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	4a17      	ldr	r2, [pc, #92]	@ (800bb70 <TIM_OC5_SetConfig+0xc4>)
 800bb12:	4293      	cmp	r3, r2
 800bb14:	d00b      	beq.n	800bb2e <TIM_OC5_SetConfig+0x82>
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	4a16      	ldr	r2, [pc, #88]	@ (800bb74 <TIM_OC5_SetConfig+0xc8>)
 800bb1a:	4293      	cmp	r3, r2
 800bb1c:	d007      	beq.n	800bb2e <TIM_OC5_SetConfig+0x82>
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	4a15      	ldr	r2, [pc, #84]	@ (800bb78 <TIM_OC5_SetConfig+0xcc>)
 800bb22:	4293      	cmp	r3, r2
 800bb24:	d003      	beq.n	800bb2e <TIM_OC5_SetConfig+0x82>
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	4a14      	ldr	r2, [pc, #80]	@ (800bb7c <TIM_OC5_SetConfig+0xd0>)
 800bb2a:	4293      	cmp	r3, r2
 800bb2c:	d109      	bne.n	800bb42 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bb2e:	697b      	ldr	r3, [r7, #20]
 800bb30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bb34:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	695b      	ldr	r3, [r3, #20]
 800bb3a:	021b      	lsls	r3, r3, #8
 800bb3c:	697a      	ldr	r2, [r7, #20]
 800bb3e:	4313      	orrs	r3, r2
 800bb40:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	697a      	ldr	r2, [r7, #20]
 800bb46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	68fa      	ldr	r2, [r7, #12]
 800bb4c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	685a      	ldr	r2, [r3, #4]
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	693a      	ldr	r2, [r7, #16]
 800bb5a:	621a      	str	r2, [r3, #32]
}
 800bb5c:	bf00      	nop
 800bb5e:	371c      	adds	r7, #28
 800bb60:	46bd      	mov	sp, r7
 800bb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb66:	4770      	bx	lr
 800bb68:	40012c00 	.word	0x40012c00
 800bb6c:	40013400 	.word	0x40013400
 800bb70:	40014000 	.word	0x40014000
 800bb74:	40014400 	.word	0x40014400
 800bb78:	40014800 	.word	0x40014800
 800bb7c:	40015000 	.word	0x40015000

0800bb80 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bb80:	b480      	push	{r7}
 800bb82:	b087      	sub	sp, #28
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
 800bb88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	6a1b      	ldr	r3, [r3, #32]
 800bb8e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	6a1b      	ldr	r3, [r3, #32]
 800bb94:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	685b      	ldr	r3, [r3, #4]
 800bba0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bbae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bbb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	021b      	lsls	r3, r3, #8
 800bbba:	68fa      	ldr	r2, [r7, #12]
 800bbbc:	4313      	orrs	r3, r2
 800bbbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bbc0:	693b      	ldr	r3, [r7, #16]
 800bbc2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bbc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	689b      	ldr	r3, [r3, #8]
 800bbcc:	051b      	lsls	r3, r3, #20
 800bbce:	693a      	ldr	r2, [r7, #16]
 800bbd0:	4313      	orrs	r3, r2
 800bbd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	4a1a      	ldr	r2, [pc, #104]	@ (800bc40 <TIM_OC6_SetConfig+0xc0>)
 800bbd8:	4293      	cmp	r3, r2
 800bbda:	d013      	beq.n	800bc04 <TIM_OC6_SetConfig+0x84>
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	4a19      	ldr	r2, [pc, #100]	@ (800bc44 <TIM_OC6_SetConfig+0xc4>)
 800bbe0:	4293      	cmp	r3, r2
 800bbe2:	d00f      	beq.n	800bc04 <TIM_OC6_SetConfig+0x84>
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	4a18      	ldr	r2, [pc, #96]	@ (800bc48 <TIM_OC6_SetConfig+0xc8>)
 800bbe8:	4293      	cmp	r3, r2
 800bbea:	d00b      	beq.n	800bc04 <TIM_OC6_SetConfig+0x84>
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	4a17      	ldr	r2, [pc, #92]	@ (800bc4c <TIM_OC6_SetConfig+0xcc>)
 800bbf0:	4293      	cmp	r3, r2
 800bbf2:	d007      	beq.n	800bc04 <TIM_OC6_SetConfig+0x84>
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	4a16      	ldr	r2, [pc, #88]	@ (800bc50 <TIM_OC6_SetConfig+0xd0>)
 800bbf8:	4293      	cmp	r3, r2
 800bbfa:	d003      	beq.n	800bc04 <TIM_OC6_SetConfig+0x84>
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	4a15      	ldr	r2, [pc, #84]	@ (800bc54 <TIM_OC6_SetConfig+0xd4>)
 800bc00:	4293      	cmp	r3, r2
 800bc02:	d109      	bne.n	800bc18 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bc04:	697b      	ldr	r3, [r7, #20]
 800bc06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bc0a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	695b      	ldr	r3, [r3, #20]
 800bc10:	029b      	lsls	r3, r3, #10
 800bc12:	697a      	ldr	r2, [r7, #20]
 800bc14:	4313      	orrs	r3, r2
 800bc16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	697a      	ldr	r2, [r7, #20]
 800bc1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	68fa      	ldr	r2, [r7, #12]
 800bc22:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	685a      	ldr	r2, [r3, #4]
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	693a      	ldr	r2, [r7, #16]
 800bc30:	621a      	str	r2, [r3, #32]
}
 800bc32:	bf00      	nop
 800bc34:	371c      	adds	r7, #28
 800bc36:	46bd      	mov	sp, r7
 800bc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3c:	4770      	bx	lr
 800bc3e:	bf00      	nop
 800bc40:	40012c00 	.word	0x40012c00
 800bc44:	40013400 	.word	0x40013400
 800bc48:	40014000 	.word	0x40014000
 800bc4c:	40014400 	.word	0x40014400
 800bc50:	40014800 	.word	0x40014800
 800bc54:	40015000 	.word	0x40015000

0800bc58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bc58:	b480      	push	{r7}
 800bc5a:	b087      	sub	sp, #28
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	60f8      	str	r0, [r7, #12]
 800bc60:	60b9      	str	r1, [r7, #8]
 800bc62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	6a1b      	ldr	r3, [r3, #32]
 800bc68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	6a1b      	ldr	r3, [r3, #32]
 800bc6e:	f023 0201 	bic.w	r2, r3, #1
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	699b      	ldr	r3, [r3, #24]
 800bc7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bc7c:	693b      	ldr	r3, [r7, #16]
 800bc7e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bc82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	011b      	lsls	r3, r3, #4
 800bc88:	693a      	ldr	r2, [r7, #16]
 800bc8a:	4313      	orrs	r3, r2
 800bc8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bc8e:	697b      	ldr	r3, [r7, #20]
 800bc90:	f023 030a 	bic.w	r3, r3, #10
 800bc94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bc96:	697a      	ldr	r2, [r7, #20]
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	4313      	orrs	r3, r2
 800bc9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	693a      	ldr	r2, [r7, #16]
 800bca2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	697a      	ldr	r2, [r7, #20]
 800bca8:	621a      	str	r2, [r3, #32]
}
 800bcaa:	bf00      	nop
 800bcac:	371c      	adds	r7, #28
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb4:	4770      	bx	lr

0800bcb6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bcb6:	b480      	push	{r7}
 800bcb8:	b087      	sub	sp, #28
 800bcba:	af00      	add	r7, sp, #0
 800bcbc:	60f8      	str	r0, [r7, #12]
 800bcbe:	60b9      	str	r1, [r7, #8]
 800bcc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	6a1b      	ldr	r3, [r3, #32]
 800bcc6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	6a1b      	ldr	r3, [r3, #32]
 800bccc:	f023 0210 	bic.w	r2, r3, #16
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	699b      	ldr	r3, [r3, #24]
 800bcd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bcda:	693b      	ldr	r3, [r7, #16]
 800bcdc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800bce0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	031b      	lsls	r3, r3, #12
 800bce6:	693a      	ldr	r2, [r7, #16]
 800bce8:	4313      	orrs	r3, r2
 800bcea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bcec:	697b      	ldr	r3, [r7, #20]
 800bcee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800bcf2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bcf4:	68bb      	ldr	r3, [r7, #8]
 800bcf6:	011b      	lsls	r3, r3, #4
 800bcf8:	697a      	ldr	r2, [r7, #20]
 800bcfa:	4313      	orrs	r3, r2
 800bcfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	693a      	ldr	r2, [r7, #16]
 800bd02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	697a      	ldr	r2, [r7, #20]
 800bd08:	621a      	str	r2, [r3, #32]
}
 800bd0a:	bf00      	nop
 800bd0c:	371c      	adds	r7, #28
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd14:	4770      	bx	lr

0800bd16 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bd16:	b480      	push	{r7}
 800bd18:	b085      	sub	sp, #20
 800bd1a:	af00      	add	r7, sp, #0
 800bd1c:	6078      	str	r0, [r7, #4]
 800bd1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	689b      	ldr	r3, [r3, #8]
 800bd24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800bd2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bd30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bd32:	683a      	ldr	r2, [r7, #0]
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	4313      	orrs	r3, r2
 800bd38:	f043 0307 	orr.w	r3, r3, #7
 800bd3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	68fa      	ldr	r2, [r7, #12]
 800bd42:	609a      	str	r2, [r3, #8]
}
 800bd44:	bf00      	nop
 800bd46:	3714      	adds	r7, #20
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4e:	4770      	bx	lr

0800bd50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bd50:	b480      	push	{r7}
 800bd52:	b087      	sub	sp, #28
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	60f8      	str	r0, [r7, #12]
 800bd58:	60b9      	str	r1, [r7, #8]
 800bd5a:	607a      	str	r2, [r7, #4]
 800bd5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	689b      	ldr	r3, [r3, #8]
 800bd62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bd64:	697b      	ldr	r3, [r7, #20]
 800bd66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bd6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	021a      	lsls	r2, r3, #8
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	431a      	orrs	r2, r3
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	4313      	orrs	r3, r2
 800bd78:	697a      	ldr	r2, [r7, #20]
 800bd7a:	4313      	orrs	r3, r2
 800bd7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	697a      	ldr	r2, [r7, #20]
 800bd82:	609a      	str	r2, [r3, #8]
}
 800bd84:	bf00      	nop
 800bd86:	371c      	adds	r7, #28
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8e:	4770      	bx	lr

0800bd90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bd90:	b480      	push	{r7}
 800bd92:	b087      	sub	sp, #28
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	60f8      	str	r0, [r7, #12]
 800bd98:	60b9      	str	r1, [r7, #8]
 800bd9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bd9c:	68bb      	ldr	r3, [r7, #8]
 800bd9e:	f003 031f 	and.w	r3, r3, #31
 800bda2:	2201      	movs	r2, #1
 800bda4:	fa02 f303 	lsl.w	r3, r2, r3
 800bda8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	6a1a      	ldr	r2, [r3, #32]
 800bdae:	697b      	ldr	r3, [r7, #20]
 800bdb0:	43db      	mvns	r3, r3
 800bdb2:	401a      	ands	r2, r3
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	6a1a      	ldr	r2, [r3, #32]
 800bdbc:	68bb      	ldr	r3, [r7, #8]
 800bdbe:	f003 031f 	and.w	r3, r3, #31
 800bdc2:	6879      	ldr	r1, [r7, #4]
 800bdc4:	fa01 f303 	lsl.w	r3, r1, r3
 800bdc8:	431a      	orrs	r2, r3
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	621a      	str	r2, [r3, #32]
}
 800bdce:	bf00      	nop
 800bdd0:	371c      	adds	r7, #28
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd8:	4770      	bx	lr
	...

0800bddc <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800bddc:	b480      	push	{r7}
 800bdde:	b083      	sub	sp, #12
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	4a26      	ldr	r2, [pc, #152]	@ (800be80 <TIM_ResetCallback+0xa4>)
 800bde8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	4a25      	ldr	r2, [pc, #148]	@ (800be84 <TIM_ResetCallback+0xa8>)
 800bdf0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	4a24      	ldr	r2, [pc, #144]	@ (800be88 <TIM_ResetCallback+0xac>)
 800bdf8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	4a23      	ldr	r2, [pc, #140]	@ (800be8c <TIM_ResetCallback+0xb0>)
 800be00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	4a22      	ldr	r2, [pc, #136]	@ (800be90 <TIM_ResetCallback+0xb4>)
 800be08:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	4a21      	ldr	r2, [pc, #132]	@ (800be94 <TIM_ResetCallback+0xb8>)
 800be10:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	4a20      	ldr	r2, [pc, #128]	@ (800be98 <TIM_ResetCallback+0xbc>)
 800be18:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	4a1f      	ldr	r2, [pc, #124]	@ (800be9c <TIM_ResetCallback+0xc0>)
 800be20:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	4a1e      	ldr	r2, [pc, #120]	@ (800bea0 <TIM_ResetCallback+0xc4>)
 800be28:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	4a1d      	ldr	r2, [pc, #116]	@ (800bea4 <TIM_ResetCallback+0xc8>)
 800be30:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	4a1c      	ldr	r2, [pc, #112]	@ (800bea8 <TIM_ResetCallback+0xcc>)
 800be38:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	4a1b      	ldr	r2, [pc, #108]	@ (800beac <TIM_ResetCallback+0xd0>)
 800be40:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	4a1a      	ldr	r2, [pc, #104]	@ (800beb0 <TIM_ResetCallback+0xd4>)
 800be48:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	4a19      	ldr	r2, [pc, #100]	@ (800beb4 <TIM_ResetCallback+0xd8>)
 800be50:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	4a18      	ldr	r2, [pc, #96]	@ (800beb8 <TIM_ResetCallback+0xdc>)
 800be58:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	4a17      	ldr	r2, [pc, #92]	@ (800bebc <TIM_ResetCallback+0xe0>)
 800be60:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	4a16      	ldr	r2, [pc, #88]	@ (800bec0 <TIM_ResetCallback+0xe4>)
 800be68:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	4a15      	ldr	r2, [pc, #84]	@ (800bec4 <TIM_ResetCallback+0xe8>)
 800be70:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800be74:	bf00      	nop
 800be76:	370c      	adds	r7, #12
 800be78:	46bd      	mov	sp, r7
 800be7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7e:	4770      	bx	lr
 800be80:	08004e15 	.word	0x08004e15
 800be84:	0800b129 	.word	0x0800b129
 800be88:	0800b1a1 	.word	0x0800b1a1
 800be8c:	0800b1b5 	.word	0x0800b1b5
 800be90:	0800b151 	.word	0x0800b151
 800be94:	0800b165 	.word	0x0800b165
 800be98:	0800b13d 	.word	0x0800b13d
 800be9c:	0800b179 	.word	0x0800b179
 800bea0:	0800b18d 	.word	0x0800b18d
 800bea4:	0800b1c9 	.word	0x0800b1c9
 800bea8:	0800c11d 	.word	0x0800c11d
 800beac:	0800c131 	.word	0x0800c131
 800beb0:	0800c145 	.word	0x0800c145
 800beb4:	0800c159 	.word	0x0800c159
 800beb8:	0800c16d 	.word	0x0800c16d
 800bebc:	0800c181 	.word	0x0800c181
 800bec0:	0800c195 	.word	0x0800c195
 800bec4:	0800c1a9 	.word	0x0800c1a9

0800bec8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bec8:	b480      	push	{r7}
 800beca:	b085      	sub	sp, #20
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
 800bed0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bed8:	2b01      	cmp	r3, #1
 800beda:	d101      	bne.n	800bee0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bedc:	2302      	movs	r3, #2
 800bede:	e074      	b.n	800bfca <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2201      	movs	r2, #1
 800bee4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2202      	movs	r2, #2
 800beec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	685b      	ldr	r3, [r3, #4]
 800bef6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	689b      	ldr	r3, [r3, #8]
 800befe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	4a34      	ldr	r2, [pc, #208]	@ (800bfd8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bf06:	4293      	cmp	r3, r2
 800bf08:	d009      	beq.n	800bf1e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	4a33      	ldr	r2, [pc, #204]	@ (800bfdc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bf10:	4293      	cmp	r3, r2
 800bf12:	d004      	beq.n	800bf1e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	4a31      	ldr	r2, [pc, #196]	@ (800bfe0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bf1a:	4293      	cmp	r3, r2
 800bf1c:	d108      	bne.n	800bf30 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800bf24:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	685b      	ldr	r3, [r3, #4]
 800bf2a:	68fa      	ldr	r2, [r7, #12]
 800bf2c:	4313      	orrs	r3, r2
 800bf2e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800bf36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	68fa      	ldr	r2, [r7, #12]
 800bf42:	4313      	orrs	r3, r2
 800bf44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	68fa      	ldr	r2, [r7, #12]
 800bf4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	4a21      	ldr	r2, [pc, #132]	@ (800bfd8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bf54:	4293      	cmp	r3, r2
 800bf56:	d022      	beq.n	800bf9e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf60:	d01d      	beq.n	800bf9e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	4a1f      	ldr	r2, [pc, #124]	@ (800bfe4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800bf68:	4293      	cmp	r3, r2
 800bf6a:	d018      	beq.n	800bf9e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	4a1d      	ldr	r2, [pc, #116]	@ (800bfe8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800bf72:	4293      	cmp	r3, r2
 800bf74:	d013      	beq.n	800bf9e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	4a1c      	ldr	r2, [pc, #112]	@ (800bfec <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800bf7c:	4293      	cmp	r3, r2
 800bf7e:	d00e      	beq.n	800bf9e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	4a15      	ldr	r2, [pc, #84]	@ (800bfdc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bf86:	4293      	cmp	r3, r2
 800bf88:	d009      	beq.n	800bf9e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	4a18      	ldr	r2, [pc, #96]	@ (800bff0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800bf90:	4293      	cmp	r3, r2
 800bf92:	d004      	beq.n	800bf9e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	4a11      	ldr	r2, [pc, #68]	@ (800bfe0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bf9a:	4293      	cmp	r3, r2
 800bf9c:	d10c      	bne.n	800bfb8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bf9e:	68bb      	ldr	r3, [r7, #8]
 800bfa0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bfa4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	689b      	ldr	r3, [r3, #8]
 800bfaa:	68ba      	ldr	r2, [r7, #8]
 800bfac:	4313      	orrs	r3, r2
 800bfae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	68ba      	ldr	r2, [r7, #8]
 800bfb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2201      	movs	r2, #1
 800bfbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bfc8:	2300      	movs	r3, #0
}
 800bfca:	4618      	mov	r0, r3
 800bfcc:	3714      	adds	r7, #20
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd4:	4770      	bx	lr
 800bfd6:	bf00      	nop
 800bfd8:	40012c00 	.word	0x40012c00
 800bfdc:	40013400 	.word	0x40013400
 800bfe0:	40015000 	.word	0x40015000
 800bfe4:	40000400 	.word	0x40000400
 800bfe8:	40000800 	.word	0x40000800
 800bfec:	40000c00 	.word	0x40000c00
 800bff0:	40014000 	.word	0x40014000

0800bff4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bff4:	b480      	push	{r7}
 800bff6:	b085      	sub	sp, #20
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
 800bffc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bffe:	2300      	movs	r3, #0
 800c000:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c008:	2b01      	cmp	r3, #1
 800c00a:	d101      	bne.n	800c010 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c00c:	2302      	movs	r3, #2
 800c00e:	e078      	b.n	800c102 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2201      	movs	r2, #1
 800c014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	68db      	ldr	r3, [r3, #12]
 800c022:	4313      	orrs	r3, r2
 800c024:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	689b      	ldr	r3, [r3, #8]
 800c030:	4313      	orrs	r3, r2
 800c032:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	685b      	ldr	r3, [r3, #4]
 800c03e:	4313      	orrs	r3, r2
 800c040:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	4313      	orrs	r3, r2
 800c04e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	691b      	ldr	r3, [r3, #16]
 800c05a:	4313      	orrs	r3, r2
 800c05c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	695b      	ldr	r3, [r3, #20]
 800c068:	4313      	orrs	r3, r2
 800c06a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c076:	4313      	orrs	r3, r2
 800c078:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	699b      	ldr	r3, [r3, #24]
 800c084:	041b      	lsls	r3, r3, #16
 800c086:	4313      	orrs	r3, r2
 800c088:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	69db      	ldr	r3, [r3, #28]
 800c094:	4313      	orrs	r3, r2
 800c096:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	4a1c      	ldr	r2, [pc, #112]	@ (800c110 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800c09e:	4293      	cmp	r3, r2
 800c0a0:	d009      	beq.n	800c0b6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	4a1b      	ldr	r2, [pc, #108]	@ (800c114 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800c0a8:	4293      	cmp	r3, r2
 800c0aa:	d004      	beq.n	800c0b6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	4a19      	ldr	r2, [pc, #100]	@ (800c118 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800c0b2:	4293      	cmp	r3, r2
 800c0b4:	d11c      	bne.n	800c0f0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0c0:	051b      	lsls	r3, r3, #20
 800c0c2:	4313      	orrs	r3, r2
 800c0c4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800c0cc:	683b      	ldr	r3, [r7, #0]
 800c0ce:	6a1b      	ldr	r3, [r3, #32]
 800c0d0:	4313      	orrs	r3, r2
 800c0d2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0de:	4313      	orrs	r3, r2
 800c0e0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0ec:	4313      	orrs	r3, r2
 800c0ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	68fa      	ldr	r2, [r7, #12]
 800c0f6:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c100:	2300      	movs	r3, #0
}
 800c102:	4618      	mov	r0, r3
 800c104:	3714      	adds	r7, #20
 800c106:	46bd      	mov	sp, r7
 800c108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10c:	4770      	bx	lr
 800c10e:	bf00      	nop
 800c110:	40012c00 	.word	0x40012c00
 800c114:	40013400 	.word	0x40013400
 800c118:	40015000 	.word	0x40015000

0800c11c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c11c:	b480      	push	{r7}
 800c11e:	b083      	sub	sp, #12
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c124:	bf00      	nop
 800c126:	370c      	adds	r7, #12
 800c128:	46bd      	mov	sp, r7
 800c12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12e:	4770      	bx	lr

0800c130 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800c130:	b480      	push	{r7}
 800c132:	b083      	sub	sp, #12
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800c138:	bf00      	nop
 800c13a:	370c      	adds	r7, #12
 800c13c:	46bd      	mov	sp, r7
 800c13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c142:	4770      	bx	lr

0800c144 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c144:	b480      	push	{r7}
 800c146:	b083      	sub	sp, #12
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c14c:	bf00      	nop
 800c14e:	370c      	adds	r7, #12
 800c150:	46bd      	mov	sp, r7
 800c152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c156:	4770      	bx	lr

0800c158 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c158:	b480      	push	{r7}
 800c15a:	b083      	sub	sp, #12
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c160:	bf00      	nop
 800c162:	370c      	adds	r7, #12
 800c164:	46bd      	mov	sp, r7
 800c166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16a:	4770      	bx	lr

0800c16c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800c16c:	b480      	push	{r7}
 800c16e:	b083      	sub	sp, #12
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800c174:	bf00      	nop
 800c176:	370c      	adds	r7, #12
 800c178:	46bd      	mov	sp, r7
 800c17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17e:	4770      	bx	lr

0800c180 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800c180:	b480      	push	{r7}
 800c182:	b083      	sub	sp, #12
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800c188:	bf00      	nop
 800c18a:	370c      	adds	r7, #12
 800c18c:	46bd      	mov	sp, r7
 800c18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c192:	4770      	bx	lr

0800c194 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800c194:	b480      	push	{r7}
 800c196:	b083      	sub	sp, #12
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800c19c:	bf00      	nop
 800c19e:	370c      	adds	r7, #12
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a6:	4770      	bx	lr

0800c1a8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800c1a8:	b480      	push	{r7}
 800c1aa:	b083      	sub	sp, #12
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800c1b0:	bf00      	nop
 800c1b2:	370c      	adds	r7, #12
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ba:	4770      	bx	lr

0800c1bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b082      	sub	sp, #8
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d101      	bne.n	800c1ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c1ca:	2301      	movs	r3, #1
 800c1cc:	e050      	b.n	800c270 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d114      	bne.n	800c202 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2200      	movs	r2, #0
 800c1dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800c1e0:	6878      	ldr	r0, [r7, #4]
 800c1e2:	f000 fe37 	bl	800ce54 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d103      	bne.n	800c1f8 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	4a21      	ldr	r2, [pc, #132]	@ (800c278 <HAL_UART_Init+0xbc>)
 800c1f4:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800c1fe:	6878      	ldr	r0, [r7, #4]
 800c200:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2224      	movs	r2, #36	@ 0x24
 800c206:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	681a      	ldr	r2, [r3, #0]
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	f022 0201 	bic.w	r2, r2, #1
 800c218:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d002      	beq.n	800c228 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800c222:	6878      	ldr	r0, [r7, #4]
 800c224:	f001 f964 	bl	800d4f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	f000 fe65 	bl	800cef8 <UART_SetConfig>
 800c22e:	4603      	mov	r3, r0
 800c230:	2b01      	cmp	r3, #1
 800c232:	d101      	bne.n	800c238 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800c234:	2301      	movs	r3, #1
 800c236:	e01b      	b.n	800c270 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	685a      	ldr	r2, [r3, #4]
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c246:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	689a      	ldr	r2, [r3, #8]
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c256:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	681a      	ldr	r2, [r3, #0]
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	f042 0201 	orr.w	r2, r2, #1
 800c266:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c268:	6878      	ldr	r0, [r7, #4]
 800c26a:	f001 f9e3 	bl	800d634 <UART_CheckIdleState>
 800c26e:	4603      	mov	r3, r0
}
 800c270:	4618      	mov	r0, r3
 800c272:	3708      	adds	r7, #8
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}
 800c278:	08006185 	.word	0x08006185

0800c27c <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800c27c:	b480      	push	{r7}
 800c27e:	b087      	sub	sp, #28
 800c280:	af00      	add	r7, sp, #0
 800c282:	60f8      	str	r0, [r7, #12]
 800c284:	460b      	mov	r3, r1
 800c286:	607a      	str	r2, [r7, #4]
 800c288:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800c28a:	2300      	movs	r3, #0
 800c28c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d109      	bne.n	800c2a8 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c29a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800c2a4:	2301      	movs	r3, #1
 800c2a6:	e09c      	b.n	800c3e2 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c2ae:	2b20      	cmp	r3, #32
 800c2b0:	d16c      	bne.n	800c38c <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800c2b2:	7afb      	ldrb	r3, [r7, #11]
 800c2b4:	2b0c      	cmp	r3, #12
 800c2b6:	d85e      	bhi.n	800c376 <HAL_UART_RegisterCallback+0xfa>
 800c2b8:	a201      	add	r2, pc, #4	@ (adr r2, 800c2c0 <HAL_UART_RegisterCallback+0x44>)
 800c2ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2be:	bf00      	nop
 800c2c0:	0800c2f5 	.word	0x0800c2f5
 800c2c4:	0800c2ff 	.word	0x0800c2ff
 800c2c8:	0800c309 	.word	0x0800c309
 800c2cc:	0800c313 	.word	0x0800c313
 800c2d0:	0800c31d 	.word	0x0800c31d
 800c2d4:	0800c327 	.word	0x0800c327
 800c2d8:	0800c331 	.word	0x0800c331
 800c2dc:	0800c33b 	.word	0x0800c33b
 800c2e0:	0800c345 	.word	0x0800c345
 800c2e4:	0800c34f 	.word	0x0800c34f
 800c2e8:	0800c359 	.word	0x0800c359
 800c2ec:	0800c363 	.word	0x0800c363
 800c2f0:	0800c36d 	.word	0x0800c36d
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	687a      	ldr	r2, [r7, #4]
 800c2f8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800c2fc:	e070      	b.n	800c3e0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	687a      	ldr	r2, [r7, #4]
 800c302:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800c306:	e06b      	b.n	800c3e0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	687a      	ldr	r2, [r7, #4]
 800c30c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800c310:	e066      	b.n	800c3e0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	687a      	ldr	r2, [r7, #4]
 800c316:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800c31a:	e061      	b.n	800c3e0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	687a      	ldr	r2, [r7, #4]
 800c320:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800c324:	e05c      	b.n	800c3e0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	687a      	ldr	r2, [r7, #4]
 800c32a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800c32e:	e057      	b.n	800c3e0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	687a      	ldr	r2, [r7, #4]
 800c334:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800c338:	e052      	b.n	800c3e0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	687a      	ldr	r2, [r7, #4]
 800c33e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800c342:	e04d      	b.n	800c3e0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	687a      	ldr	r2, [r7, #4]
 800c348:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800c34c:	e048      	b.n	800c3e0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	687a      	ldr	r2, [r7, #4]
 800c352:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800c356:	e043      	b.n	800c3e0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	687a      	ldr	r2, [r7, #4]
 800c35c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800c360:	e03e      	b.n	800c3e0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	687a      	ldr	r2, [r7, #4]
 800c366:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800c36a:	e039      	b.n	800c3e0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	687a      	ldr	r2, [r7, #4]
 800c370:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800c374:	e034      	b.n	800c3e0 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c37c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800c386:	2301      	movs	r3, #1
 800c388:	75fb      	strb	r3, [r7, #23]
        break;
 800c38a:	e029      	b.n	800c3e0 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c392:	2b00      	cmp	r3, #0
 800c394:	d11a      	bne.n	800c3cc <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800c396:	7afb      	ldrb	r3, [r7, #11]
 800c398:	2b0b      	cmp	r3, #11
 800c39a:	d002      	beq.n	800c3a2 <HAL_UART_RegisterCallback+0x126>
 800c39c:	2b0c      	cmp	r3, #12
 800c39e:	d005      	beq.n	800c3ac <HAL_UART_RegisterCallback+0x130>
 800c3a0:	e009      	b.n	800c3b6 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	687a      	ldr	r2, [r7, #4]
 800c3a6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800c3aa:	e019      	b.n	800c3e0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	687a      	ldr	r2, [r7, #4]
 800c3b0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800c3b4:	e014      	b.n	800c3e0 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c3bc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800c3c6:	2301      	movs	r3, #1
 800c3c8:	75fb      	strb	r3, [r7, #23]
        break;
 800c3ca:	e009      	b.n	800c3e0 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c3d2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800c3dc:	2301      	movs	r3, #1
 800c3de:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800c3e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	371c      	adds	r7, #28
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ec:	4770      	bx	lr
 800c3ee:	bf00      	nop

0800c3f0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b08a      	sub	sp, #40	@ 0x28
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	60f8      	str	r0, [r7, #12]
 800c3f8:	60b9      	str	r1, [r7, #8]
 800c3fa:	4613      	mov	r3, r2
 800c3fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c404:	2b20      	cmp	r3, #32
 800c406:	d137      	bne.n	800c478 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800c408:	68bb      	ldr	r3, [r7, #8]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d002      	beq.n	800c414 <HAL_UART_Receive_IT+0x24>
 800c40e:	88fb      	ldrh	r3, [r7, #6]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d101      	bne.n	800c418 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800c414:	2301      	movs	r3, #1
 800c416:	e030      	b.n	800c47a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	2200      	movs	r2, #0
 800c41c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	4a18      	ldr	r2, [pc, #96]	@ (800c484 <HAL_UART_Receive_IT+0x94>)
 800c424:	4293      	cmp	r3, r2
 800c426:	d01f      	beq.n	800c468 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	685b      	ldr	r3, [r3, #4]
 800c42e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c432:	2b00      	cmp	r3, #0
 800c434:	d018      	beq.n	800c468 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c43c:	697b      	ldr	r3, [r7, #20]
 800c43e:	e853 3f00 	ldrex	r3, [r3]
 800c442:	613b      	str	r3, [r7, #16]
   return(result);
 800c444:	693b      	ldr	r3, [r7, #16]
 800c446:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c44a:	627b      	str	r3, [r7, #36]	@ 0x24
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	461a      	mov	r2, r3
 800c452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c454:	623b      	str	r3, [r7, #32]
 800c456:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c458:	69f9      	ldr	r1, [r7, #28]
 800c45a:	6a3a      	ldr	r2, [r7, #32]
 800c45c:	e841 2300 	strex	r3, r2, [r1]
 800c460:	61bb      	str	r3, [r7, #24]
   return(result);
 800c462:	69bb      	ldr	r3, [r7, #24]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d1e6      	bne.n	800c436 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c468:	88fb      	ldrh	r3, [r7, #6]
 800c46a:	461a      	mov	r2, r3
 800c46c:	68b9      	ldr	r1, [r7, #8]
 800c46e:	68f8      	ldr	r0, [r7, #12]
 800c470:	f001 f9f8 	bl	800d864 <UART_Start_Receive_IT>
 800c474:	4603      	mov	r3, r0
 800c476:	e000      	b.n	800c47a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c478:	2302      	movs	r3, #2
  }
}
 800c47a:	4618      	mov	r0, r3
 800c47c:	3728      	adds	r7, #40	@ 0x28
 800c47e:	46bd      	mov	sp, r7
 800c480:	bd80      	pop	{r7, pc}
 800c482:	bf00      	nop
 800c484:	40008000 	.word	0x40008000

0800c488 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b08a      	sub	sp, #40	@ 0x28
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	60f8      	str	r0, [r7, #12]
 800c490:	60b9      	str	r1, [r7, #8]
 800c492:	4613      	mov	r3, r2
 800c494:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c49c:	2b20      	cmp	r3, #32
 800c49e:	d167      	bne.n	800c570 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800c4a0:	68bb      	ldr	r3, [r7, #8]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d002      	beq.n	800c4ac <HAL_UART_Transmit_DMA+0x24>
 800c4a6:	88fb      	ldrh	r3, [r7, #6]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d101      	bne.n	800c4b0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800c4ac:	2301      	movs	r3, #1
 800c4ae:	e060      	b.n	800c572 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	68ba      	ldr	r2, [r7, #8]
 800c4b4:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	88fa      	ldrh	r2, [r7, #6]
 800c4ba:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	88fa      	ldrh	r2, [r7, #6]
 800c4c2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	2221      	movs	r2, #33	@ 0x21
 800c4d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d028      	beq.n	800c530 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c4e2:	4a26      	ldr	r2, [pc, #152]	@ (800c57c <HAL_UART_Transmit_DMA+0xf4>)
 800c4e4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c4ea:	4a25      	ldr	r2, [pc, #148]	@ (800c580 <HAL_UART_Transmit_DMA+0xf8>)
 800c4ec:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c4f2:	4a24      	ldr	r2, [pc, #144]	@ (800c584 <HAL_UART_Transmit_DMA+0xfc>)
 800c4f4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c506:	4619      	mov	r1, r3
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	3328      	adds	r3, #40	@ 0x28
 800c50e:	461a      	mov	r2, r3
 800c510:	88fb      	ldrh	r3, [r7, #6]
 800c512:	f7fb fbd3 	bl	8007cbc <HAL_DMA_Start_IT>
 800c516:	4603      	mov	r3, r0
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d009      	beq.n	800c530 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	2210      	movs	r2, #16
 800c520:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	2220      	movs	r2, #32
 800c528:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800c52c:	2301      	movs	r3, #1
 800c52e:	e020      	b.n	800c572 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	2240      	movs	r2, #64	@ 0x40
 800c536:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	3308      	adds	r3, #8
 800c53e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c540:	697b      	ldr	r3, [r7, #20]
 800c542:	e853 3f00 	ldrex	r3, [r3]
 800c546:	613b      	str	r3, [r7, #16]
   return(result);
 800c548:	693b      	ldr	r3, [r7, #16]
 800c54a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c54e:	627b      	str	r3, [r7, #36]	@ 0x24
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	3308      	adds	r3, #8
 800c556:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c558:	623a      	str	r2, [r7, #32]
 800c55a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c55c:	69f9      	ldr	r1, [r7, #28]
 800c55e:	6a3a      	ldr	r2, [r7, #32]
 800c560:	e841 2300 	strex	r3, r2, [r1]
 800c564:	61bb      	str	r3, [r7, #24]
   return(result);
 800c566:	69bb      	ldr	r3, [r7, #24]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d1e5      	bne.n	800c538 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800c56c:	2300      	movs	r3, #0
 800c56e:	e000      	b.n	800c572 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800c570:	2302      	movs	r3, #2
  }
}
 800c572:	4618      	mov	r0, r3
 800c574:	3728      	adds	r7, #40	@ 0x28
 800c576:	46bd      	mov	sp, r7
 800c578:	bd80      	pop	{r7, pc}
 800c57a:	bf00      	nop
 800c57c:	0800dbf7 	.word	0x0800dbf7
 800c580:	0800dc95 	.word	0x0800dc95
 800c584:	0800dcb5 	.word	0x0800dcb5

0800c588 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b09a      	sub	sp, #104	@ 0x68
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c596:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c598:	e853 3f00 	ldrex	r3, [r3]
 800c59c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c59e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c5a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c5a4:	667b      	str	r3, [r7, #100]	@ 0x64
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	461a      	mov	r2, r3
 800c5ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c5ae:	657b      	str	r3, [r7, #84]	@ 0x54
 800c5b0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5b2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c5b4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c5b6:	e841 2300 	strex	r3, r2, [r1]
 800c5ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c5bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d1e6      	bne.n	800c590 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	3308      	adds	r3, #8
 800c5c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5cc:	e853 3f00 	ldrex	r3, [r3]
 800c5d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c5d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c5d8:	f023 0301 	bic.w	r3, r3, #1
 800c5dc:	663b      	str	r3, [r7, #96]	@ 0x60
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	3308      	adds	r3, #8
 800c5e4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c5e6:	643a      	str	r2, [r7, #64]	@ 0x40
 800c5e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5ea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c5ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c5ee:	e841 2300 	strex	r3, r2, [r1]
 800c5f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c5f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d1e3      	bne.n	800c5c2 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c5fe:	2b01      	cmp	r3, #1
 800c600:	d118      	bne.n	800c634 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c608:	6a3b      	ldr	r3, [r7, #32]
 800c60a:	e853 3f00 	ldrex	r3, [r3]
 800c60e:	61fb      	str	r3, [r7, #28]
   return(result);
 800c610:	69fb      	ldr	r3, [r7, #28]
 800c612:	f023 0310 	bic.w	r3, r3, #16
 800c616:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	461a      	mov	r2, r3
 800c61e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c620:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c622:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c624:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c626:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c628:	e841 2300 	strex	r3, r2, [r1]
 800c62c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c62e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c630:	2b00      	cmp	r3, #0
 800c632:	d1e6      	bne.n	800c602 <HAL_UART_AbortReceive+0x7a>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	689b      	ldr	r3, [r3, #8]
 800c63a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c63e:	2b40      	cmp	r3, #64	@ 0x40
 800c640:	d13b      	bne.n	800c6ba <HAL_UART_AbortReceive+0x132>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	3308      	adds	r3, #8
 800c648:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	e853 3f00 	ldrex	r3, [r3]
 800c650:	60bb      	str	r3, [r7, #8]
   return(result);
 800c652:	68bb      	ldr	r3, [r7, #8]
 800c654:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c658:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	3308      	adds	r3, #8
 800c660:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c662:	61ba      	str	r2, [r7, #24]
 800c664:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c666:	6979      	ldr	r1, [r7, #20]
 800c668:	69ba      	ldr	r2, [r7, #24]
 800c66a:	e841 2300 	strex	r3, r2, [r1]
 800c66e:	613b      	str	r3, [r7, #16]
   return(result);
 800c670:	693b      	ldr	r3, [r7, #16]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d1e5      	bne.n	800c642 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d01c      	beq.n	800c6ba <HAL_UART_AbortReceive+0x132>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c686:	2200      	movs	r2, #0
 800c688:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c690:	4618      	mov	r0, r3
 800c692:	f7fb fb8e 	bl	8007db2 <HAL_DMA_Abort>
 800c696:	4603      	mov	r3, r0
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d00e      	beq.n	800c6ba <HAL_UART_AbortReceive+0x132>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	f7fb fcf4 	bl	8008090 <HAL_DMA_GetError>
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	2b20      	cmp	r3, #32
 800c6ac:	d105      	bne.n	800c6ba <HAL_UART_AbortReceive+0x132>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	2210      	movs	r2, #16
 800c6b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800c6b6:	2303      	movs	r3, #3
 800c6b8:	e017      	b.n	800c6ea <HAL_UART_AbortReceive+0x162>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	2200      	movs	r2, #0
 800c6be:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	220f      	movs	r2, #15
 800c6c8:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	699a      	ldr	r2, [r3, #24]
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	f042 0208 	orr.w	r2, r2, #8
 800c6d8:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	2220      	movs	r2, #32
 800c6de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 800c6e8:	2300      	movs	r3, #0
}
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	3768      	adds	r7, #104	@ 0x68
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bd80      	pop	{r7, pc}
	...

0800c6f4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b0ba      	sub	sp, #232	@ 0xe8
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	69db      	ldr	r3, [r3, #28]
 800c702:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	689b      	ldr	r3, [r3, #8]
 800c716:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c71a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800c71e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800c722:	4013      	ands	r3, r2
 800c724:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800c728:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d11b      	bne.n	800c768 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c734:	f003 0320 	and.w	r3, r3, #32
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d015      	beq.n	800c768 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c73c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c740:	f003 0320 	and.w	r3, r3, #32
 800c744:	2b00      	cmp	r3, #0
 800c746:	d105      	bne.n	800c754 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c748:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c74c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c750:	2b00      	cmp	r3, #0
 800c752:	d009      	beq.n	800c768 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c758:	2b00      	cmp	r3, #0
 800c75a:	f000 8312 	beq.w	800cd82 <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c762:	6878      	ldr	r0, [r7, #4]
 800c764:	4798      	blx	r3
      }
      return;
 800c766:	e30c      	b.n	800cd82 <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c768:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	f000 8129 	beq.w	800c9c4 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c772:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c776:	4b90      	ldr	r3, [pc, #576]	@ (800c9b8 <HAL_UART_IRQHandler+0x2c4>)
 800c778:	4013      	ands	r3, r2
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d106      	bne.n	800c78c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c77e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c782:	4b8e      	ldr	r3, [pc, #568]	@ (800c9bc <HAL_UART_IRQHandler+0x2c8>)
 800c784:	4013      	ands	r3, r2
 800c786:	2b00      	cmp	r3, #0
 800c788:	f000 811c 	beq.w	800c9c4 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c78c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c790:	f003 0301 	and.w	r3, r3, #1
 800c794:	2b00      	cmp	r3, #0
 800c796:	d011      	beq.n	800c7bc <HAL_UART_IRQHandler+0xc8>
 800c798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c79c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d00b      	beq.n	800c7bc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	2201      	movs	r2, #1
 800c7aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c7b2:	f043 0201 	orr.w	r2, r3, #1
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c7bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7c0:	f003 0302 	and.w	r3, r3, #2
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d011      	beq.n	800c7ec <HAL_UART_IRQHandler+0xf8>
 800c7c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c7cc:	f003 0301 	and.w	r3, r3, #1
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d00b      	beq.n	800c7ec <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	2202      	movs	r2, #2
 800c7da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c7e2:	f043 0204 	orr.w	r2, r3, #4
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c7ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7f0:	f003 0304 	and.w	r3, r3, #4
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d011      	beq.n	800c81c <HAL_UART_IRQHandler+0x128>
 800c7f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c7fc:	f003 0301 	and.w	r3, r3, #1
 800c800:	2b00      	cmp	r3, #0
 800c802:	d00b      	beq.n	800c81c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	2204      	movs	r2, #4
 800c80a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c812:	f043 0202 	orr.w	r2, r3, #2
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c81c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c820:	f003 0308 	and.w	r3, r3, #8
 800c824:	2b00      	cmp	r3, #0
 800c826:	d017      	beq.n	800c858 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c82c:	f003 0320 	and.w	r3, r3, #32
 800c830:	2b00      	cmp	r3, #0
 800c832:	d105      	bne.n	800c840 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c834:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c838:	4b5f      	ldr	r3, [pc, #380]	@ (800c9b8 <HAL_UART_IRQHandler+0x2c4>)
 800c83a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d00b      	beq.n	800c858 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	2208      	movs	r2, #8
 800c846:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c84e:	f043 0208 	orr.w	r2, r3, #8
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c85c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c860:	2b00      	cmp	r3, #0
 800c862:	d012      	beq.n	800c88a <HAL_UART_IRQHandler+0x196>
 800c864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c868:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d00c      	beq.n	800c88a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c878:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c880:	f043 0220 	orr.w	r2, r3, #32
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c890:	2b00      	cmp	r3, #0
 800c892:	f000 8278 	beq.w	800cd86 <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c89a:	f003 0320 	and.w	r3, r3, #32
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d013      	beq.n	800c8ca <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c8a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c8a6:	f003 0320 	and.w	r3, r3, #32
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d105      	bne.n	800c8ba <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c8ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c8b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d007      	beq.n	800c8ca <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d003      	beq.n	800c8ca <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c8c6:	6878      	ldr	r0, [r7, #4]
 800c8c8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c8d0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	689b      	ldr	r3, [r3, #8]
 800c8da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8de:	2b40      	cmp	r3, #64	@ 0x40
 800c8e0:	d005      	beq.n	800c8ee <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c8e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c8e6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d058      	beq.n	800c9a0 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	f001 f91b 	bl	800db2a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	689b      	ldr	r3, [r3, #8]
 800c8fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8fe:	2b40      	cmp	r3, #64	@ 0x40
 800c900:	d148      	bne.n	800c994 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	3308      	adds	r3, #8
 800c908:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c90c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c910:	e853 3f00 	ldrex	r3, [r3]
 800c914:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c918:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c91c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c920:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	3308      	adds	r3, #8
 800c92a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c92e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c932:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c936:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c93a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c93e:	e841 2300 	strex	r3, r2, [r1]
 800c942:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c946:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d1d9      	bne.n	800c902 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c954:	2b00      	cmp	r3, #0
 800c956:	d017      	beq.n	800c988 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c95e:	4a18      	ldr	r2, [pc, #96]	@ (800c9c0 <HAL_UART_IRQHandler+0x2cc>)
 800c960:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c968:	4618      	mov	r0, r3
 800c96a:	f7fb fa7b 	bl	8007e64 <HAL_DMA_Abort_IT>
 800c96e:	4603      	mov	r3, r0
 800c970:	2b00      	cmp	r3, #0
 800c972:	d01f      	beq.n	800c9b4 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c97a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c97c:	687a      	ldr	r2, [r7, #4]
 800c97e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800c982:	4610      	mov	r0, r2
 800c984:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c986:	e015      	b.n	800c9b4 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c98e:	6878      	ldr	r0, [r7, #4]
 800c990:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c992:	e00f      	b.n	800c9b4 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c99a:	6878      	ldr	r0, [r7, #4]
 800c99c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c99e:	e009      	b.n	800c9b4 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c9a6:	6878      	ldr	r0, [r7, #4]
 800c9a8:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800c9b2:	e1e8      	b.n	800cd86 <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c9b4:	bf00      	nop
    return;
 800c9b6:	e1e6      	b.n	800cd86 <HAL_UART_IRQHandler+0x692>
 800c9b8:	10000001 	.word	0x10000001
 800c9bc:	04000120 	.word	0x04000120
 800c9c0:	0800dd39 	.word	0x0800dd39

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c9c8:	2b01      	cmp	r3, #1
 800c9ca:	f040 8176 	bne.w	800ccba <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c9ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c9d2:	f003 0310 	and.w	r3, r3, #16
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	f000 816f 	beq.w	800ccba <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c9dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c9e0:	f003 0310 	and.w	r3, r3, #16
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	f000 8168 	beq.w	800ccba <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	2210      	movs	r2, #16
 800c9f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	689b      	ldr	r3, [r3, #8]
 800c9f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9fc:	2b40      	cmp	r3, #64	@ 0x40
 800c9fe:	f040 80dc 	bne.w	800cbba <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	685b      	ldr	r3, [r3, #4]
 800ca0c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ca10:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	f000 80b1 	beq.w	800cb7c <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ca20:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ca24:	429a      	cmp	r2, r3
 800ca26:	f080 80a9 	bcs.w	800cb7c <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ca30:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	f003 0320 	and.w	r3, r3, #32
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	f040 8087 	bne.w	800cb56 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca50:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ca54:	e853 3f00 	ldrex	r3, [r3]
 800ca58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800ca5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ca60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ca64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	461a      	mov	r2, r3
 800ca6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ca72:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ca76:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca7a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800ca7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ca82:	e841 2300 	strex	r3, r2, [r1]
 800ca86:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800ca8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d1da      	bne.n	800ca48 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	3308      	adds	r3, #8
 800ca98:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ca9c:	e853 3f00 	ldrex	r3, [r3]
 800caa0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800caa2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800caa4:	f023 0301 	bic.w	r3, r3, #1
 800caa8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	3308      	adds	r3, #8
 800cab2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800cab6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800caba:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cabc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800cabe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800cac2:	e841 2300 	strex	r3, r2, [r1]
 800cac6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800cac8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d1e1      	bne.n	800ca92 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	3308      	adds	r3, #8
 800cad4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cad6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cad8:	e853 3f00 	ldrex	r3, [r3]
 800cadc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800cade:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cae0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cae4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	3308      	adds	r3, #8
 800caee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800caf2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800caf4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caf6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800caf8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800cafa:	e841 2300 	strex	r3, r2, [r1]
 800cafe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800cb00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d1e3      	bne.n	800cace <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2220      	movs	r2, #32
 800cb0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	2200      	movs	r2, #0
 800cb12:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb1c:	e853 3f00 	ldrex	r3, [r3]
 800cb20:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800cb22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cb24:	f023 0310 	bic.w	r3, r3, #16
 800cb28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	461a      	mov	r2, r3
 800cb32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb36:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cb38:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb3a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cb3c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cb3e:	e841 2300 	strex	r3, r2, [r1]
 800cb42:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cb44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d1e4      	bne.n	800cb14 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb50:	4618      	mov	r0, r3
 800cb52:	f7fb f92e 	bl	8007db2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	2202      	movs	r2, #2
 800cb5a:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800cb62:	687a      	ldr	r2, [r7, #4]
 800cb64:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800cb68:	687a      	ldr	r2, [r7, #4]
 800cb6a:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800cb6e:	b292      	uxth	r2, r2
 800cb70:	1a8a      	subs	r2, r1, r2
 800cb72:	b292      	uxth	r2, r2
 800cb74:	4611      	mov	r1, r2
 800cb76:	6878      	ldr	r0, [r7, #4]
 800cb78:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800cb7a:	e106      	b.n	800cd8a <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cb82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cb86:	429a      	cmp	r2, r3
 800cb88:	f040 80ff 	bne.w	800cd8a <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	f003 0320 	and.w	r3, r3, #32
 800cb9a:	2b20      	cmp	r3, #32
 800cb9c:	f040 80f5 	bne.w	800cd8a <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2202      	movs	r2, #2
 800cba4:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800cbac:	687a      	ldr	r2, [r7, #4]
 800cbae:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800cbb2:	4611      	mov	r1, r2
 800cbb4:	6878      	ldr	r0, [r7, #4]
 800cbb6:	4798      	blx	r3
      return;
 800cbb8:	e0e7      	b.n	800cd8a <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cbc6:	b29b      	uxth	r3, r3
 800cbc8:	1ad3      	subs	r3, r2, r3
 800cbca:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cbd4:	b29b      	uxth	r3, r3
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	f000 80d9 	beq.w	800cd8e <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 800cbdc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	f000 80d4 	beq.w	800cd8e <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbee:	e853 3f00 	ldrex	r3, [r3]
 800cbf2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cbf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbf6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cbfa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	461a      	mov	r2, r3
 800cc04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800cc08:	647b      	str	r3, [r7, #68]	@ 0x44
 800cc0a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cc0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cc10:	e841 2300 	strex	r3, r2, [r1]
 800cc14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cc16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d1e4      	bne.n	800cbe6 <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	3308      	adds	r3, #8
 800cc22:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc26:	e853 3f00 	ldrex	r3, [r3]
 800cc2a:	623b      	str	r3, [r7, #32]
   return(result);
 800cc2c:	6a3b      	ldr	r3, [r7, #32]
 800cc2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cc32:	f023 0301 	bic.w	r3, r3, #1
 800cc36:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	3308      	adds	r3, #8
 800cc40:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800cc44:	633a      	str	r2, [r7, #48]	@ 0x30
 800cc46:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc48:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cc4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cc4c:	e841 2300 	strex	r3, r2, [r1]
 800cc50:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cc52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d1e1      	bne.n	800cc1c <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	2220      	movs	r2, #32
 800cc5c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	2200      	movs	r2, #0
 800cc64:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	2200      	movs	r2, #0
 800cc6a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc72:	693b      	ldr	r3, [r7, #16]
 800cc74:	e853 3f00 	ldrex	r3, [r3]
 800cc78:	60fb      	str	r3, [r7, #12]
   return(result);
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	f023 0310 	bic.w	r3, r3, #16
 800cc80:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	461a      	mov	r2, r3
 800cc8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800cc8e:	61fb      	str	r3, [r7, #28]
 800cc90:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc92:	69b9      	ldr	r1, [r7, #24]
 800cc94:	69fa      	ldr	r2, [r7, #28]
 800cc96:	e841 2300 	strex	r3, r2, [r1]
 800cc9a:	617b      	str	r3, [r7, #20]
   return(result);
 800cc9c:	697b      	ldr	r3, [r7, #20]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d1e4      	bne.n	800cc6c <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	2202      	movs	r2, #2
 800cca6:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ccae:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800ccb2:	4611      	mov	r1, r2
 800ccb4:	6878      	ldr	r0, [r7, #4]
 800ccb6:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ccb8:	e069      	b.n	800cd8e <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ccba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ccbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d010      	beq.n	800cce8 <HAL_UART_IRQHandler+0x5f4>
 800ccc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ccca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d00a      	beq.n	800cce8 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800ccda:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800cce2:	6878      	ldr	r0, [r7, #4]
 800cce4:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cce6:	e055      	b.n	800cd94 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800cce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ccec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d014      	beq.n	800cd1e <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ccf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ccf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d105      	bne.n	800cd0c <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800cd00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cd04:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d008      	beq.n	800cd1e <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d03e      	beq.n	800cd92 <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cd18:	6878      	ldr	r0, [r7, #4]
 800cd1a:	4798      	blx	r3
    }
    return;
 800cd1c:	e039      	b.n	800cd92 <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cd1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cd22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d009      	beq.n	800cd3e <HAL_UART_IRQHandler+0x64a>
 800cd2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cd2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d003      	beq.n	800cd3e <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800cd36:	6878      	ldr	r0, [r7, #4]
 800cd38:	f001 f812 	bl	800dd60 <UART_EndTransmit_IT>
    return;
 800cd3c:	e02a      	b.n	800cd94 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800cd3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cd42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d00b      	beq.n	800cd62 <HAL_UART_IRQHandler+0x66e>
 800cd4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cd4e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d005      	beq.n	800cd62 <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800cd5c:	6878      	ldr	r0, [r7, #4]
 800cd5e:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cd60:	e018      	b.n	800cd94 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800cd62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cd66:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d012      	beq.n	800cd94 <HAL_UART_IRQHandler+0x6a0>
 800cd6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	da0e      	bge.n	800cd94 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800cd7c:	6878      	ldr	r0, [r7, #4]
 800cd7e:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cd80:	e008      	b.n	800cd94 <HAL_UART_IRQHandler+0x6a0>
      return;
 800cd82:	bf00      	nop
 800cd84:	e006      	b.n	800cd94 <HAL_UART_IRQHandler+0x6a0>
    return;
 800cd86:	bf00      	nop
 800cd88:	e004      	b.n	800cd94 <HAL_UART_IRQHandler+0x6a0>
      return;
 800cd8a:	bf00      	nop
 800cd8c:	e002      	b.n	800cd94 <HAL_UART_IRQHandler+0x6a0>
      return;
 800cd8e:	bf00      	nop
 800cd90:	e000      	b.n	800cd94 <HAL_UART_IRQHandler+0x6a0>
    return;
 800cd92:	bf00      	nop
  }
}
 800cd94:	37e8      	adds	r7, #232	@ 0xe8
 800cd96:	46bd      	mov	sp, r7
 800cd98:	bd80      	pop	{r7, pc}
 800cd9a:	bf00      	nop

0800cd9c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cd9c:	b480      	push	{r7}
 800cd9e:	b083      	sub	sp, #12
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800cda4:	bf00      	nop
 800cda6:	370c      	adds	r7, #12
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdae:	4770      	bx	lr

0800cdb0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cdb0:	b480      	push	{r7}
 800cdb2:	b083      	sub	sp, #12
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800cdb8:	bf00      	nop
 800cdba:	370c      	adds	r7, #12
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc2:	4770      	bx	lr

0800cdc4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800cdc4:	b480      	push	{r7}
 800cdc6:	b083      	sub	sp, #12
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800cdcc:	bf00      	nop
 800cdce:	370c      	adds	r7, #12
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd6:	4770      	bx	lr

0800cdd8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cdd8:	b480      	push	{r7}
 800cdda:	b083      	sub	sp, #12
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800cde0:	bf00      	nop
 800cde2:	370c      	adds	r7, #12
 800cde4:	46bd      	mov	sp, r7
 800cde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdea:	4770      	bx	lr

0800cdec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cdec:	b480      	push	{r7}
 800cdee:	b083      	sub	sp, #12
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800cdf4:	bf00      	nop
 800cdf6:	370c      	adds	r7, #12
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfe:	4770      	bx	lr

0800ce00 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800ce00:	b480      	push	{r7}
 800ce02:	b083      	sub	sp, #12
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800ce08:	bf00      	nop
 800ce0a:	370c      	adds	r7, #12
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce12:	4770      	bx	lr

0800ce14 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800ce14:	b480      	push	{r7}
 800ce16:	b083      	sub	sp, #12
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800ce1c:	bf00      	nop
 800ce1e:	370c      	adds	r7, #12
 800ce20:	46bd      	mov	sp, r7
 800ce22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce26:	4770      	bx	lr

0800ce28 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800ce28:	b480      	push	{r7}
 800ce2a:	b083      	sub	sp, #12
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800ce30:	bf00      	nop
 800ce32:	370c      	adds	r7, #12
 800ce34:	46bd      	mov	sp, r7
 800ce36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3a:	4770      	bx	lr

0800ce3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ce3c:	b480      	push	{r7}
 800ce3e:	b083      	sub	sp, #12
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
 800ce44:	460b      	mov	r3, r1
 800ce46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ce48:	bf00      	nop
 800ce4a:	370c      	adds	r7, #12
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce52:	4770      	bx	lr

0800ce54 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800ce54:	b480      	push	{r7}
 800ce56:	b083      	sub	sp, #12
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	4a1a      	ldr	r2, [pc, #104]	@ (800cec8 <UART_InitCallbacksToDefault+0x74>)
 800ce60:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	4a19      	ldr	r2, [pc, #100]	@ (800cecc <UART_InitCallbacksToDefault+0x78>)
 800ce68:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	4a18      	ldr	r2, [pc, #96]	@ (800ced0 <UART_InitCallbacksToDefault+0x7c>)
 800ce70:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	4a17      	ldr	r2, [pc, #92]	@ (800ced4 <UART_InitCallbacksToDefault+0x80>)
 800ce78:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	4a16      	ldr	r2, [pc, #88]	@ (800ced8 <UART_InitCallbacksToDefault+0x84>)
 800ce80:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	4a15      	ldr	r2, [pc, #84]	@ (800cedc <UART_InitCallbacksToDefault+0x88>)
 800ce88:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	4a14      	ldr	r2, [pc, #80]	@ (800cee0 <UART_InitCallbacksToDefault+0x8c>)
 800ce90:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	4a13      	ldr	r2, [pc, #76]	@ (800cee4 <UART_InitCallbacksToDefault+0x90>)
 800ce98:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	4a12      	ldr	r2, [pc, #72]	@ (800cee8 <UART_InitCallbacksToDefault+0x94>)
 800cea0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	4a11      	ldr	r2, [pc, #68]	@ (800ceec <UART_InitCallbacksToDefault+0x98>)
 800cea8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	4a10      	ldr	r2, [pc, #64]	@ (800cef0 <UART_InitCallbacksToDefault+0x9c>)
 800ceb0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	4a0f      	ldr	r2, [pc, #60]	@ (800cef4 <UART_InitCallbacksToDefault+0xa0>)
 800ceb8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800cebc:	bf00      	nop
 800cebe:	370c      	adds	r7, #12
 800cec0:	46bd      	mov	sp, r7
 800cec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec6:	4770      	bx	lr
 800cec8:	0800cdb1 	.word	0x0800cdb1
 800cecc:	0800cd9d 	.word	0x0800cd9d
 800ced0:	0800cdd9 	.word	0x0800cdd9
 800ced4:	0800cdc5 	.word	0x0800cdc5
 800ced8:	0800cded 	.word	0x0800cded
 800cedc:	0800ce01 	.word	0x0800ce01
 800cee0:	0800ce15 	.word	0x0800ce15
 800cee4:	0800ce29 	.word	0x0800ce29
 800cee8:	0800e825 	.word	0x0800e825
 800ceec:	0800e839 	.word	0x0800e839
 800cef0:	0800e84d 	.word	0x0800e84d
 800cef4:	0800ce3d 	.word	0x0800ce3d

0800cef8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cef8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cefc:	b08c      	sub	sp, #48	@ 0x30
 800cefe:	af00      	add	r7, sp, #0
 800cf00:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cf02:	2300      	movs	r3, #0
 800cf04:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cf08:	697b      	ldr	r3, [r7, #20]
 800cf0a:	689a      	ldr	r2, [r3, #8]
 800cf0c:	697b      	ldr	r3, [r7, #20]
 800cf0e:	691b      	ldr	r3, [r3, #16]
 800cf10:	431a      	orrs	r2, r3
 800cf12:	697b      	ldr	r3, [r7, #20]
 800cf14:	695b      	ldr	r3, [r3, #20]
 800cf16:	431a      	orrs	r2, r3
 800cf18:	697b      	ldr	r3, [r7, #20]
 800cf1a:	69db      	ldr	r3, [r3, #28]
 800cf1c:	4313      	orrs	r3, r2
 800cf1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cf20:	697b      	ldr	r3, [r7, #20]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	681a      	ldr	r2, [r3, #0]
 800cf26:	4baa      	ldr	r3, [pc, #680]	@ (800d1d0 <UART_SetConfig+0x2d8>)
 800cf28:	4013      	ands	r3, r2
 800cf2a:	697a      	ldr	r2, [r7, #20]
 800cf2c:	6812      	ldr	r2, [r2, #0]
 800cf2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cf30:	430b      	orrs	r3, r1
 800cf32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cf34:	697b      	ldr	r3, [r7, #20]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	685b      	ldr	r3, [r3, #4]
 800cf3a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800cf3e:	697b      	ldr	r3, [r7, #20]
 800cf40:	68da      	ldr	r2, [r3, #12]
 800cf42:	697b      	ldr	r3, [r7, #20]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	430a      	orrs	r2, r1
 800cf48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cf4a:	697b      	ldr	r3, [r7, #20]
 800cf4c:	699b      	ldr	r3, [r3, #24]
 800cf4e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cf50:	697b      	ldr	r3, [r7, #20]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	4a9f      	ldr	r2, [pc, #636]	@ (800d1d4 <UART_SetConfig+0x2dc>)
 800cf56:	4293      	cmp	r3, r2
 800cf58:	d004      	beq.n	800cf64 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cf5a:	697b      	ldr	r3, [r7, #20]
 800cf5c:	6a1b      	ldr	r3, [r3, #32]
 800cf5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cf60:	4313      	orrs	r3, r2
 800cf62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cf64:	697b      	ldr	r3, [r7, #20]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	689b      	ldr	r3, [r3, #8]
 800cf6a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800cf6e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800cf72:	697a      	ldr	r2, [r7, #20]
 800cf74:	6812      	ldr	r2, [r2, #0]
 800cf76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cf78:	430b      	orrs	r3, r1
 800cf7a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cf7c:	697b      	ldr	r3, [r7, #20]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf82:	f023 010f 	bic.w	r1, r3, #15
 800cf86:	697b      	ldr	r3, [r7, #20]
 800cf88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cf8a:	697b      	ldr	r3, [r7, #20]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	430a      	orrs	r2, r1
 800cf90:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cf92:	697b      	ldr	r3, [r7, #20]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	4a90      	ldr	r2, [pc, #576]	@ (800d1d8 <UART_SetConfig+0x2e0>)
 800cf98:	4293      	cmp	r3, r2
 800cf9a:	d125      	bne.n	800cfe8 <UART_SetConfig+0xf0>
 800cf9c:	4b8f      	ldr	r3, [pc, #572]	@ (800d1dc <UART_SetConfig+0x2e4>)
 800cf9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cfa2:	f003 0303 	and.w	r3, r3, #3
 800cfa6:	2b03      	cmp	r3, #3
 800cfa8:	d81a      	bhi.n	800cfe0 <UART_SetConfig+0xe8>
 800cfaa:	a201      	add	r2, pc, #4	@ (adr r2, 800cfb0 <UART_SetConfig+0xb8>)
 800cfac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfb0:	0800cfc1 	.word	0x0800cfc1
 800cfb4:	0800cfd1 	.word	0x0800cfd1
 800cfb8:	0800cfc9 	.word	0x0800cfc9
 800cfbc:	0800cfd9 	.word	0x0800cfd9
 800cfc0:	2301      	movs	r3, #1
 800cfc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cfc6:	e116      	b.n	800d1f6 <UART_SetConfig+0x2fe>
 800cfc8:	2302      	movs	r3, #2
 800cfca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cfce:	e112      	b.n	800d1f6 <UART_SetConfig+0x2fe>
 800cfd0:	2304      	movs	r3, #4
 800cfd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cfd6:	e10e      	b.n	800d1f6 <UART_SetConfig+0x2fe>
 800cfd8:	2308      	movs	r3, #8
 800cfda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cfde:	e10a      	b.n	800d1f6 <UART_SetConfig+0x2fe>
 800cfe0:	2310      	movs	r3, #16
 800cfe2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cfe6:	e106      	b.n	800d1f6 <UART_SetConfig+0x2fe>
 800cfe8:	697b      	ldr	r3, [r7, #20]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	4a7c      	ldr	r2, [pc, #496]	@ (800d1e0 <UART_SetConfig+0x2e8>)
 800cfee:	4293      	cmp	r3, r2
 800cff0:	d138      	bne.n	800d064 <UART_SetConfig+0x16c>
 800cff2:	4b7a      	ldr	r3, [pc, #488]	@ (800d1dc <UART_SetConfig+0x2e4>)
 800cff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cff8:	f003 030c 	and.w	r3, r3, #12
 800cffc:	2b0c      	cmp	r3, #12
 800cffe:	d82d      	bhi.n	800d05c <UART_SetConfig+0x164>
 800d000:	a201      	add	r2, pc, #4	@ (adr r2, 800d008 <UART_SetConfig+0x110>)
 800d002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d006:	bf00      	nop
 800d008:	0800d03d 	.word	0x0800d03d
 800d00c:	0800d05d 	.word	0x0800d05d
 800d010:	0800d05d 	.word	0x0800d05d
 800d014:	0800d05d 	.word	0x0800d05d
 800d018:	0800d04d 	.word	0x0800d04d
 800d01c:	0800d05d 	.word	0x0800d05d
 800d020:	0800d05d 	.word	0x0800d05d
 800d024:	0800d05d 	.word	0x0800d05d
 800d028:	0800d045 	.word	0x0800d045
 800d02c:	0800d05d 	.word	0x0800d05d
 800d030:	0800d05d 	.word	0x0800d05d
 800d034:	0800d05d 	.word	0x0800d05d
 800d038:	0800d055 	.word	0x0800d055
 800d03c:	2300      	movs	r3, #0
 800d03e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d042:	e0d8      	b.n	800d1f6 <UART_SetConfig+0x2fe>
 800d044:	2302      	movs	r3, #2
 800d046:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d04a:	e0d4      	b.n	800d1f6 <UART_SetConfig+0x2fe>
 800d04c:	2304      	movs	r3, #4
 800d04e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d052:	e0d0      	b.n	800d1f6 <UART_SetConfig+0x2fe>
 800d054:	2308      	movs	r3, #8
 800d056:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d05a:	e0cc      	b.n	800d1f6 <UART_SetConfig+0x2fe>
 800d05c:	2310      	movs	r3, #16
 800d05e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d062:	e0c8      	b.n	800d1f6 <UART_SetConfig+0x2fe>
 800d064:	697b      	ldr	r3, [r7, #20]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	4a5e      	ldr	r2, [pc, #376]	@ (800d1e4 <UART_SetConfig+0x2ec>)
 800d06a:	4293      	cmp	r3, r2
 800d06c:	d125      	bne.n	800d0ba <UART_SetConfig+0x1c2>
 800d06e:	4b5b      	ldr	r3, [pc, #364]	@ (800d1dc <UART_SetConfig+0x2e4>)
 800d070:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d074:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800d078:	2b30      	cmp	r3, #48	@ 0x30
 800d07a:	d016      	beq.n	800d0aa <UART_SetConfig+0x1b2>
 800d07c:	2b30      	cmp	r3, #48	@ 0x30
 800d07e:	d818      	bhi.n	800d0b2 <UART_SetConfig+0x1ba>
 800d080:	2b20      	cmp	r3, #32
 800d082:	d00a      	beq.n	800d09a <UART_SetConfig+0x1a2>
 800d084:	2b20      	cmp	r3, #32
 800d086:	d814      	bhi.n	800d0b2 <UART_SetConfig+0x1ba>
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d002      	beq.n	800d092 <UART_SetConfig+0x19a>
 800d08c:	2b10      	cmp	r3, #16
 800d08e:	d008      	beq.n	800d0a2 <UART_SetConfig+0x1aa>
 800d090:	e00f      	b.n	800d0b2 <UART_SetConfig+0x1ba>
 800d092:	2300      	movs	r3, #0
 800d094:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d098:	e0ad      	b.n	800d1f6 <UART_SetConfig+0x2fe>
 800d09a:	2302      	movs	r3, #2
 800d09c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d0a0:	e0a9      	b.n	800d1f6 <UART_SetConfig+0x2fe>
 800d0a2:	2304      	movs	r3, #4
 800d0a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d0a8:	e0a5      	b.n	800d1f6 <UART_SetConfig+0x2fe>
 800d0aa:	2308      	movs	r3, #8
 800d0ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d0b0:	e0a1      	b.n	800d1f6 <UART_SetConfig+0x2fe>
 800d0b2:	2310      	movs	r3, #16
 800d0b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d0b8:	e09d      	b.n	800d1f6 <UART_SetConfig+0x2fe>
 800d0ba:	697b      	ldr	r3, [r7, #20]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	4a4a      	ldr	r2, [pc, #296]	@ (800d1e8 <UART_SetConfig+0x2f0>)
 800d0c0:	4293      	cmp	r3, r2
 800d0c2:	d125      	bne.n	800d110 <UART_SetConfig+0x218>
 800d0c4:	4b45      	ldr	r3, [pc, #276]	@ (800d1dc <UART_SetConfig+0x2e4>)
 800d0c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d0ca:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800d0ce:	2bc0      	cmp	r3, #192	@ 0xc0
 800d0d0:	d016      	beq.n	800d100 <UART_SetConfig+0x208>
 800d0d2:	2bc0      	cmp	r3, #192	@ 0xc0
 800d0d4:	d818      	bhi.n	800d108 <UART_SetConfig+0x210>
 800d0d6:	2b80      	cmp	r3, #128	@ 0x80
 800d0d8:	d00a      	beq.n	800d0f0 <UART_SetConfig+0x1f8>
 800d0da:	2b80      	cmp	r3, #128	@ 0x80
 800d0dc:	d814      	bhi.n	800d108 <UART_SetConfig+0x210>
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d002      	beq.n	800d0e8 <UART_SetConfig+0x1f0>
 800d0e2:	2b40      	cmp	r3, #64	@ 0x40
 800d0e4:	d008      	beq.n	800d0f8 <UART_SetConfig+0x200>
 800d0e6:	e00f      	b.n	800d108 <UART_SetConfig+0x210>
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d0ee:	e082      	b.n	800d1f6 <UART_SetConfig+0x2fe>
 800d0f0:	2302      	movs	r3, #2
 800d0f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d0f6:	e07e      	b.n	800d1f6 <UART_SetConfig+0x2fe>
 800d0f8:	2304      	movs	r3, #4
 800d0fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d0fe:	e07a      	b.n	800d1f6 <UART_SetConfig+0x2fe>
 800d100:	2308      	movs	r3, #8
 800d102:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d106:	e076      	b.n	800d1f6 <UART_SetConfig+0x2fe>
 800d108:	2310      	movs	r3, #16
 800d10a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d10e:	e072      	b.n	800d1f6 <UART_SetConfig+0x2fe>
 800d110:	697b      	ldr	r3, [r7, #20]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	4a35      	ldr	r2, [pc, #212]	@ (800d1ec <UART_SetConfig+0x2f4>)
 800d116:	4293      	cmp	r3, r2
 800d118:	d12a      	bne.n	800d170 <UART_SetConfig+0x278>
 800d11a:	4b30      	ldr	r3, [pc, #192]	@ (800d1dc <UART_SetConfig+0x2e4>)
 800d11c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d120:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d124:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d128:	d01a      	beq.n	800d160 <UART_SetConfig+0x268>
 800d12a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d12e:	d81b      	bhi.n	800d168 <UART_SetConfig+0x270>
 800d130:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d134:	d00c      	beq.n	800d150 <UART_SetConfig+0x258>
 800d136:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d13a:	d815      	bhi.n	800d168 <UART_SetConfig+0x270>
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d003      	beq.n	800d148 <UART_SetConfig+0x250>
 800d140:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d144:	d008      	beq.n	800d158 <UART_SetConfig+0x260>
 800d146:	e00f      	b.n	800d168 <UART_SetConfig+0x270>
 800d148:	2300      	movs	r3, #0
 800d14a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d14e:	e052      	b.n	800d1f6 <UART_SetConfig+0x2fe>
 800d150:	2302      	movs	r3, #2
 800d152:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d156:	e04e      	b.n	800d1f6 <UART_SetConfig+0x2fe>
 800d158:	2304      	movs	r3, #4
 800d15a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d15e:	e04a      	b.n	800d1f6 <UART_SetConfig+0x2fe>
 800d160:	2308      	movs	r3, #8
 800d162:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d166:	e046      	b.n	800d1f6 <UART_SetConfig+0x2fe>
 800d168:	2310      	movs	r3, #16
 800d16a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d16e:	e042      	b.n	800d1f6 <UART_SetConfig+0x2fe>
 800d170:	697b      	ldr	r3, [r7, #20]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	4a17      	ldr	r2, [pc, #92]	@ (800d1d4 <UART_SetConfig+0x2dc>)
 800d176:	4293      	cmp	r3, r2
 800d178:	d13a      	bne.n	800d1f0 <UART_SetConfig+0x2f8>
 800d17a:	4b18      	ldr	r3, [pc, #96]	@ (800d1dc <UART_SetConfig+0x2e4>)
 800d17c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d180:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800d184:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d188:	d01a      	beq.n	800d1c0 <UART_SetConfig+0x2c8>
 800d18a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d18e:	d81b      	bhi.n	800d1c8 <UART_SetConfig+0x2d0>
 800d190:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d194:	d00c      	beq.n	800d1b0 <UART_SetConfig+0x2b8>
 800d196:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d19a:	d815      	bhi.n	800d1c8 <UART_SetConfig+0x2d0>
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d003      	beq.n	800d1a8 <UART_SetConfig+0x2b0>
 800d1a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d1a4:	d008      	beq.n	800d1b8 <UART_SetConfig+0x2c0>
 800d1a6:	e00f      	b.n	800d1c8 <UART_SetConfig+0x2d0>
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d1ae:	e022      	b.n	800d1f6 <UART_SetConfig+0x2fe>
 800d1b0:	2302      	movs	r3, #2
 800d1b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d1b6:	e01e      	b.n	800d1f6 <UART_SetConfig+0x2fe>
 800d1b8:	2304      	movs	r3, #4
 800d1ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d1be:	e01a      	b.n	800d1f6 <UART_SetConfig+0x2fe>
 800d1c0:	2308      	movs	r3, #8
 800d1c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d1c6:	e016      	b.n	800d1f6 <UART_SetConfig+0x2fe>
 800d1c8:	2310      	movs	r3, #16
 800d1ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d1ce:	e012      	b.n	800d1f6 <UART_SetConfig+0x2fe>
 800d1d0:	cfff69f3 	.word	0xcfff69f3
 800d1d4:	40008000 	.word	0x40008000
 800d1d8:	40013800 	.word	0x40013800
 800d1dc:	40021000 	.word	0x40021000
 800d1e0:	40004400 	.word	0x40004400
 800d1e4:	40004800 	.word	0x40004800
 800d1e8:	40004c00 	.word	0x40004c00
 800d1ec:	40005000 	.word	0x40005000
 800d1f0:	2310      	movs	r3, #16
 800d1f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d1f6:	697b      	ldr	r3, [r7, #20]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	4aae      	ldr	r2, [pc, #696]	@ (800d4b4 <UART_SetConfig+0x5bc>)
 800d1fc:	4293      	cmp	r3, r2
 800d1fe:	f040 8097 	bne.w	800d330 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d202:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d206:	2b08      	cmp	r3, #8
 800d208:	d823      	bhi.n	800d252 <UART_SetConfig+0x35a>
 800d20a:	a201      	add	r2, pc, #4	@ (adr r2, 800d210 <UART_SetConfig+0x318>)
 800d20c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d210:	0800d235 	.word	0x0800d235
 800d214:	0800d253 	.word	0x0800d253
 800d218:	0800d23d 	.word	0x0800d23d
 800d21c:	0800d253 	.word	0x0800d253
 800d220:	0800d243 	.word	0x0800d243
 800d224:	0800d253 	.word	0x0800d253
 800d228:	0800d253 	.word	0x0800d253
 800d22c:	0800d253 	.word	0x0800d253
 800d230:	0800d24b 	.word	0x0800d24b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d234:	f7fb fefa 	bl	800902c <HAL_RCC_GetPCLK1Freq>
 800d238:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d23a:	e010      	b.n	800d25e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d23c:	4b9e      	ldr	r3, [pc, #632]	@ (800d4b8 <UART_SetConfig+0x5c0>)
 800d23e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d240:	e00d      	b.n	800d25e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d242:	f7fb fe85 	bl	8008f50 <HAL_RCC_GetSysClockFreq>
 800d246:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d248:	e009      	b.n	800d25e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d24a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d24e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d250:	e005      	b.n	800d25e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800d252:	2300      	movs	r3, #0
 800d254:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d256:	2301      	movs	r3, #1
 800d258:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d25c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d25e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d260:	2b00      	cmp	r3, #0
 800d262:	f000 8130 	beq.w	800d4c6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d266:	697b      	ldr	r3, [r7, #20]
 800d268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d26a:	4a94      	ldr	r2, [pc, #592]	@ (800d4bc <UART_SetConfig+0x5c4>)
 800d26c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d270:	461a      	mov	r2, r3
 800d272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d274:	fbb3 f3f2 	udiv	r3, r3, r2
 800d278:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d27a:	697b      	ldr	r3, [r7, #20]
 800d27c:	685a      	ldr	r2, [r3, #4]
 800d27e:	4613      	mov	r3, r2
 800d280:	005b      	lsls	r3, r3, #1
 800d282:	4413      	add	r3, r2
 800d284:	69ba      	ldr	r2, [r7, #24]
 800d286:	429a      	cmp	r2, r3
 800d288:	d305      	bcc.n	800d296 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d28a:	697b      	ldr	r3, [r7, #20]
 800d28c:	685b      	ldr	r3, [r3, #4]
 800d28e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d290:	69ba      	ldr	r2, [r7, #24]
 800d292:	429a      	cmp	r2, r3
 800d294:	d903      	bls.n	800d29e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800d296:	2301      	movs	r3, #1
 800d298:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d29c:	e113      	b.n	800d4c6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d29e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	60bb      	str	r3, [r7, #8]
 800d2a4:	60fa      	str	r2, [r7, #12]
 800d2a6:	697b      	ldr	r3, [r7, #20]
 800d2a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2aa:	4a84      	ldr	r2, [pc, #528]	@ (800d4bc <UART_SetConfig+0x5c4>)
 800d2ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d2b0:	b29b      	uxth	r3, r3
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	603b      	str	r3, [r7, #0]
 800d2b6:	607a      	str	r2, [r7, #4]
 800d2b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d2bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d2c0:	f7f3 fd94 	bl	8000dec <__aeabi_uldivmod>
 800d2c4:	4602      	mov	r2, r0
 800d2c6:	460b      	mov	r3, r1
 800d2c8:	4610      	mov	r0, r2
 800d2ca:	4619      	mov	r1, r3
 800d2cc:	f04f 0200 	mov.w	r2, #0
 800d2d0:	f04f 0300 	mov.w	r3, #0
 800d2d4:	020b      	lsls	r3, r1, #8
 800d2d6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d2da:	0202      	lsls	r2, r0, #8
 800d2dc:	6979      	ldr	r1, [r7, #20]
 800d2de:	6849      	ldr	r1, [r1, #4]
 800d2e0:	0849      	lsrs	r1, r1, #1
 800d2e2:	2000      	movs	r0, #0
 800d2e4:	460c      	mov	r4, r1
 800d2e6:	4605      	mov	r5, r0
 800d2e8:	eb12 0804 	adds.w	r8, r2, r4
 800d2ec:	eb43 0905 	adc.w	r9, r3, r5
 800d2f0:	697b      	ldr	r3, [r7, #20]
 800d2f2:	685b      	ldr	r3, [r3, #4]
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	469a      	mov	sl, r3
 800d2f8:	4693      	mov	fp, r2
 800d2fa:	4652      	mov	r2, sl
 800d2fc:	465b      	mov	r3, fp
 800d2fe:	4640      	mov	r0, r8
 800d300:	4649      	mov	r1, r9
 800d302:	f7f3 fd73 	bl	8000dec <__aeabi_uldivmod>
 800d306:	4602      	mov	r2, r0
 800d308:	460b      	mov	r3, r1
 800d30a:	4613      	mov	r3, r2
 800d30c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d30e:	6a3b      	ldr	r3, [r7, #32]
 800d310:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d314:	d308      	bcc.n	800d328 <UART_SetConfig+0x430>
 800d316:	6a3b      	ldr	r3, [r7, #32]
 800d318:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d31c:	d204      	bcs.n	800d328 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800d31e:	697b      	ldr	r3, [r7, #20]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	6a3a      	ldr	r2, [r7, #32]
 800d324:	60da      	str	r2, [r3, #12]
 800d326:	e0ce      	b.n	800d4c6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800d328:	2301      	movs	r3, #1
 800d32a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d32e:	e0ca      	b.n	800d4c6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d330:	697b      	ldr	r3, [r7, #20]
 800d332:	69db      	ldr	r3, [r3, #28]
 800d334:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d338:	d166      	bne.n	800d408 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800d33a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d33e:	2b08      	cmp	r3, #8
 800d340:	d827      	bhi.n	800d392 <UART_SetConfig+0x49a>
 800d342:	a201      	add	r2, pc, #4	@ (adr r2, 800d348 <UART_SetConfig+0x450>)
 800d344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d348:	0800d36d 	.word	0x0800d36d
 800d34c:	0800d375 	.word	0x0800d375
 800d350:	0800d37d 	.word	0x0800d37d
 800d354:	0800d393 	.word	0x0800d393
 800d358:	0800d383 	.word	0x0800d383
 800d35c:	0800d393 	.word	0x0800d393
 800d360:	0800d393 	.word	0x0800d393
 800d364:	0800d393 	.word	0x0800d393
 800d368:	0800d38b 	.word	0x0800d38b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d36c:	f7fb fe5e 	bl	800902c <HAL_RCC_GetPCLK1Freq>
 800d370:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d372:	e014      	b.n	800d39e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d374:	f7fb fe70 	bl	8009058 <HAL_RCC_GetPCLK2Freq>
 800d378:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d37a:	e010      	b.n	800d39e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d37c:	4b4e      	ldr	r3, [pc, #312]	@ (800d4b8 <UART_SetConfig+0x5c0>)
 800d37e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d380:	e00d      	b.n	800d39e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d382:	f7fb fde5 	bl	8008f50 <HAL_RCC_GetSysClockFreq>
 800d386:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d388:	e009      	b.n	800d39e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d38a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d38e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d390:	e005      	b.n	800d39e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800d392:	2300      	movs	r3, #0
 800d394:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d396:	2301      	movs	r3, #1
 800d398:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d39c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d39e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	f000 8090 	beq.w	800d4c6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d3a6:	697b      	ldr	r3, [r7, #20]
 800d3a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3aa:	4a44      	ldr	r2, [pc, #272]	@ (800d4bc <UART_SetConfig+0x5c4>)
 800d3ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d3b0:	461a      	mov	r2, r3
 800d3b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3b4:	fbb3 f3f2 	udiv	r3, r3, r2
 800d3b8:	005a      	lsls	r2, r3, #1
 800d3ba:	697b      	ldr	r3, [r7, #20]
 800d3bc:	685b      	ldr	r3, [r3, #4]
 800d3be:	085b      	lsrs	r3, r3, #1
 800d3c0:	441a      	add	r2, r3
 800d3c2:	697b      	ldr	r3, [r7, #20]
 800d3c4:	685b      	ldr	r3, [r3, #4]
 800d3c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3ca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d3cc:	6a3b      	ldr	r3, [r7, #32]
 800d3ce:	2b0f      	cmp	r3, #15
 800d3d0:	d916      	bls.n	800d400 <UART_SetConfig+0x508>
 800d3d2:	6a3b      	ldr	r3, [r7, #32]
 800d3d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d3d8:	d212      	bcs.n	800d400 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d3da:	6a3b      	ldr	r3, [r7, #32]
 800d3dc:	b29b      	uxth	r3, r3
 800d3de:	f023 030f 	bic.w	r3, r3, #15
 800d3e2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d3e4:	6a3b      	ldr	r3, [r7, #32]
 800d3e6:	085b      	lsrs	r3, r3, #1
 800d3e8:	b29b      	uxth	r3, r3
 800d3ea:	f003 0307 	and.w	r3, r3, #7
 800d3ee:	b29a      	uxth	r2, r3
 800d3f0:	8bfb      	ldrh	r3, [r7, #30]
 800d3f2:	4313      	orrs	r3, r2
 800d3f4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800d3f6:	697b      	ldr	r3, [r7, #20]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	8bfa      	ldrh	r2, [r7, #30]
 800d3fc:	60da      	str	r2, [r3, #12]
 800d3fe:	e062      	b.n	800d4c6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800d400:	2301      	movs	r3, #1
 800d402:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d406:	e05e      	b.n	800d4c6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d408:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d40c:	2b08      	cmp	r3, #8
 800d40e:	d828      	bhi.n	800d462 <UART_SetConfig+0x56a>
 800d410:	a201      	add	r2, pc, #4	@ (adr r2, 800d418 <UART_SetConfig+0x520>)
 800d412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d416:	bf00      	nop
 800d418:	0800d43d 	.word	0x0800d43d
 800d41c:	0800d445 	.word	0x0800d445
 800d420:	0800d44d 	.word	0x0800d44d
 800d424:	0800d463 	.word	0x0800d463
 800d428:	0800d453 	.word	0x0800d453
 800d42c:	0800d463 	.word	0x0800d463
 800d430:	0800d463 	.word	0x0800d463
 800d434:	0800d463 	.word	0x0800d463
 800d438:	0800d45b 	.word	0x0800d45b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d43c:	f7fb fdf6 	bl	800902c <HAL_RCC_GetPCLK1Freq>
 800d440:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d442:	e014      	b.n	800d46e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d444:	f7fb fe08 	bl	8009058 <HAL_RCC_GetPCLK2Freq>
 800d448:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d44a:	e010      	b.n	800d46e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d44c:	4b1a      	ldr	r3, [pc, #104]	@ (800d4b8 <UART_SetConfig+0x5c0>)
 800d44e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d450:	e00d      	b.n	800d46e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d452:	f7fb fd7d 	bl	8008f50 <HAL_RCC_GetSysClockFreq>
 800d456:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d458:	e009      	b.n	800d46e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d45a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d45e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d460:	e005      	b.n	800d46e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800d462:	2300      	movs	r3, #0
 800d464:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d466:	2301      	movs	r3, #1
 800d468:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d46c:	bf00      	nop
    }

    if (pclk != 0U)
 800d46e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d470:	2b00      	cmp	r3, #0
 800d472:	d028      	beq.n	800d4c6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d474:	697b      	ldr	r3, [r7, #20]
 800d476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d478:	4a10      	ldr	r2, [pc, #64]	@ (800d4bc <UART_SetConfig+0x5c4>)
 800d47a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d47e:	461a      	mov	r2, r3
 800d480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d482:	fbb3 f2f2 	udiv	r2, r3, r2
 800d486:	697b      	ldr	r3, [r7, #20]
 800d488:	685b      	ldr	r3, [r3, #4]
 800d48a:	085b      	lsrs	r3, r3, #1
 800d48c:	441a      	add	r2, r3
 800d48e:	697b      	ldr	r3, [r7, #20]
 800d490:	685b      	ldr	r3, [r3, #4]
 800d492:	fbb2 f3f3 	udiv	r3, r2, r3
 800d496:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d498:	6a3b      	ldr	r3, [r7, #32]
 800d49a:	2b0f      	cmp	r3, #15
 800d49c:	d910      	bls.n	800d4c0 <UART_SetConfig+0x5c8>
 800d49e:	6a3b      	ldr	r3, [r7, #32]
 800d4a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d4a4:	d20c      	bcs.n	800d4c0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d4a6:	6a3b      	ldr	r3, [r7, #32]
 800d4a8:	b29a      	uxth	r2, r3
 800d4aa:	697b      	ldr	r3, [r7, #20]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	60da      	str	r2, [r3, #12]
 800d4b0:	e009      	b.n	800d4c6 <UART_SetConfig+0x5ce>
 800d4b2:	bf00      	nop
 800d4b4:	40008000 	.word	0x40008000
 800d4b8:	00f42400 	.word	0x00f42400
 800d4bc:	080111e0 	.word	0x080111e0
      }
      else
      {
        ret = HAL_ERROR;
 800d4c0:	2301      	movs	r3, #1
 800d4c2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d4c6:	697b      	ldr	r3, [r7, #20]
 800d4c8:	2201      	movs	r2, #1
 800d4ca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d4ce:	697b      	ldr	r3, [r7, #20]
 800d4d0:	2201      	movs	r2, #1
 800d4d2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d4d6:	697b      	ldr	r3, [r7, #20]
 800d4d8:	2200      	movs	r2, #0
 800d4da:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d4dc:	697b      	ldr	r3, [r7, #20]
 800d4de:	2200      	movs	r2, #0
 800d4e0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d4e2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	3730      	adds	r7, #48	@ 0x30
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800d4f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d4f0:	b480      	push	{r7}
 800d4f2:	b083      	sub	sp, #12
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4fc:	f003 0308 	and.w	r3, r3, #8
 800d500:	2b00      	cmp	r3, #0
 800d502:	d00a      	beq.n	800d51a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	685b      	ldr	r3, [r3, #4]
 800d50a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	430a      	orrs	r2, r1
 800d518:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d51e:	f003 0301 	and.w	r3, r3, #1
 800d522:	2b00      	cmp	r3, #0
 800d524:	d00a      	beq.n	800d53c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	685b      	ldr	r3, [r3, #4]
 800d52c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	430a      	orrs	r2, r1
 800d53a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d540:	f003 0302 	and.w	r3, r3, #2
 800d544:	2b00      	cmp	r3, #0
 800d546:	d00a      	beq.n	800d55e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	685b      	ldr	r3, [r3, #4]
 800d54e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	430a      	orrs	r2, r1
 800d55c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d562:	f003 0304 	and.w	r3, r3, #4
 800d566:	2b00      	cmp	r3, #0
 800d568:	d00a      	beq.n	800d580 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	685b      	ldr	r3, [r3, #4]
 800d570:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	430a      	orrs	r2, r1
 800d57e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d584:	f003 0310 	and.w	r3, r3, #16
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d00a      	beq.n	800d5a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	689b      	ldr	r3, [r3, #8]
 800d592:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	430a      	orrs	r2, r1
 800d5a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5a6:	f003 0320 	and.w	r3, r3, #32
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d00a      	beq.n	800d5c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	689b      	ldr	r3, [r3, #8]
 800d5b4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	430a      	orrs	r2, r1
 800d5c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d01a      	beq.n	800d606 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	685b      	ldr	r3, [r3, #4]
 800d5d6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	430a      	orrs	r2, r1
 800d5e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d5ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d5ee:	d10a      	bne.n	800d606 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	685b      	ldr	r3, [r3, #4]
 800d5f6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	430a      	orrs	r2, r1
 800d604:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d60a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d00a      	beq.n	800d628 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	685b      	ldr	r3, [r3, #4]
 800d618:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	430a      	orrs	r2, r1
 800d626:	605a      	str	r2, [r3, #4]
  }
}
 800d628:	bf00      	nop
 800d62a:	370c      	adds	r7, #12
 800d62c:	46bd      	mov	sp, r7
 800d62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d632:	4770      	bx	lr

0800d634 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d634:	b580      	push	{r7, lr}
 800d636:	b098      	sub	sp, #96	@ 0x60
 800d638:	af02      	add	r7, sp, #8
 800d63a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	2200      	movs	r2, #0
 800d640:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d644:	f7f8 feb8 	bl	80063b8 <HAL_GetTick>
 800d648:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	f003 0308 	and.w	r3, r3, #8
 800d654:	2b08      	cmp	r3, #8
 800d656:	d12f      	bne.n	800d6b8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d658:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d65c:	9300      	str	r3, [sp, #0]
 800d65e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d660:	2200      	movs	r2, #0
 800d662:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d666:	6878      	ldr	r0, [r7, #4]
 800d668:	f000 f88e 	bl	800d788 <UART_WaitOnFlagUntilTimeout>
 800d66c:	4603      	mov	r3, r0
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d022      	beq.n	800d6b8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d67a:	e853 3f00 	ldrex	r3, [r3]
 800d67e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d682:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d686:	653b      	str	r3, [r7, #80]	@ 0x50
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	461a      	mov	r2, r3
 800d68e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d690:	647b      	str	r3, [r7, #68]	@ 0x44
 800d692:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d694:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d696:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d698:	e841 2300 	strex	r3, r2, [r1]
 800d69c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d69e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d1e6      	bne.n	800d672 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	2220      	movs	r2, #32
 800d6a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d6b4:	2303      	movs	r3, #3
 800d6b6:	e063      	b.n	800d780 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	f003 0304 	and.w	r3, r3, #4
 800d6c2:	2b04      	cmp	r3, #4
 800d6c4:	d149      	bne.n	800d75a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d6c6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d6ca:	9300      	str	r3, [sp, #0]
 800d6cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d6d4:	6878      	ldr	r0, [r7, #4]
 800d6d6:	f000 f857 	bl	800d788 <UART_WaitOnFlagUntilTimeout>
 800d6da:	4603      	mov	r3, r0
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d03c      	beq.n	800d75a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6e8:	e853 3f00 	ldrex	r3, [r3]
 800d6ec:	623b      	str	r3, [r7, #32]
   return(result);
 800d6ee:	6a3b      	ldr	r3, [r7, #32]
 800d6f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d6f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	461a      	mov	r2, r3
 800d6fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d6fe:	633b      	str	r3, [r7, #48]	@ 0x30
 800d700:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d702:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d704:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d706:	e841 2300 	strex	r3, r2, [r1]
 800d70a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d70c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d1e6      	bne.n	800d6e0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	3308      	adds	r3, #8
 800d718:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d71a:	693b      	ldr	r3, [r7, #16]
 800d71c:	e853 3f00 	ldrex	r3, [r3]
 800d720:	60fb      	str	r3, [r7, #12]
   return(result);
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	f023 0301 	bic.w	r3, r3, #1
 800d728:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	3308      	adds	r3, #8
 800d730:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d732:	61fa      	str	r2, [r7, #28]
 800d734:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d736:	69b9      	ldr	r1, [r7, #24]
 800d738:	69fa      	ldr	r2, [r7, #28]
 800d73a:	e841 2300 	strex	r3, r2, [r1]
 800d73e:	617b      	str	r3, [r7, #20]
   return(result);
 800d740:	697b      	ldr	r3, [r7, #20]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d1e5      	bne.n	800d712 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	2220      	movs	r2, #32
 800d74a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	2200      	movs	r2, #0
 800d752:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d756:	2303      	movs	r3, #3
 800d758:	e012      	b.n	800d780 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	2220      	movs	r2, #32
 800d75e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	2220      	movs	r2, #32
 800d766:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	2200      	movs	r2, #0
 800d76e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	2200      	movs	r2, #0
 800d774:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	2200      	movs	r2, #0
 800d77a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d77e:	2300      	movs	r3, #0
}
 800d780:	4618      	mov	r0, r3
 800d782:	3758      	adds	r7, #88	@ 0x58
 800d784:	46bd      	mov	sp, r7
 800d786:	bd80      	pop	{r7, pc}

0800d788 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b084      	sub	sp, #16
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	60f8      	str	r0, [r7, #12]
 800d790:	60b9      	str	r1, [r7, #8]
 800d792:	603b      	str	r3, [r7, #0]
 800d794:	4613      	mov	r3, r2
 800d796:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d798:	e04f      	b.n	800d83a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d79a:	69bb      	ldr	r3, [r7, #24]
 800d79c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7a0:	d04b      	beq.n	800d83a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d7a2:	f7f8 fe09 	bl	80063b8 <HAL_GetTick>
 800d7a6:	4602      	mov	r2, r0
 800d7a8:	683b      	ldr	r3, [r7, #0]
 800d7aa:	1ad3      	subs	r3, r2, r3
 800d7ac:	69ba      	ldr	r2, [r7, #24]
 800d7ae:	429a      	cmp	r2, r3
 800d7b0:	d302      	bcc.n	800d7b8 <UART_WaitOnFlagUntilTimeout+0x30>
 800d7b2:	69bb      	ldr	r3, [r7, #24]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d101      	bne.n	800d7bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d7b8:	2303      	movs	r3, #3
 800d7ba:	e04e      	b.n	800d85a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	f003 0304 	and.w	r3, r3, #4
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d037      	beq.n	800d83a <UART_WaitOnFlagUntilTimeout+0xb2>
 800d7ca:	68bb      	ldr	r3, [r7, #8]
 800d7cc:	2b80      	cmp	r3, #128	@ 0x80
 800d7ce:	d034      	beq.n	800d83a <UART_WaitOnFlagUntilTimeout+0xb2>
 800d7d0:	68bb      	ldr	r3, [r7, #8]
 800d7d2:	2b40      	cmp	r3, #64	@ 0x40
 800d7d4:	d031      	beq.n	800d83a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	69db      	ldr	r3, [r3, #28]
 800d7dc:	f003 0308 	and.w	r3, r3, #8
 800d7e0:	2b08      	cmp	r3, #8
 800d7e2:	d110      	bne.n	800d806 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	2208      	movs	r2, #8
 800d7ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d7ec:	68f8      	ldr	r0, [r7, #12]
 800d7ee:	f000 f99c 	bl	800db2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	2208      	movs	r2, #8
 800d7f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d802:	2301      	movs	r3, #1
 800d804:	e029      	b.n	800d85a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	69db      	ldr	r3, [r3, #28]
 800d80c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d810:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d814:	d111      	bne.n	800d83a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d81e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d820:	68f8      	ldr	r0, [r7, #12]
 800d822:	f000 f982 	bl	800db2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	2220      	movs	r2, #32
 800d82a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	2200      	movs	r2, #0
 800d832:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d836:	2303      	movs	r3, #3
 800d838:	e00f      	b.n	800d85a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	69da      	ldr	r2, [r3, #28]
 800d840:	68bb      	ldr	r3, [r7, #8]
 800d842:	4013      	ands	r3, r2
 800d844:	68ba      	ldr	r2, [r7, #8]
 800d846:	429a      	cmp	r2, r3
 800d848:	bf0c      	ite	eq
 800d84a:	2301      	moveq	r3, #1
 800d84c:	2300      	movne	r3, #0
 800d84e:	b2db      	uxtb	r3, r3
 800d850:	461a      	mov	r2, r3
 800d852:	79fb      	ldrb	r3, [r7, #7]
 800d854:	429a      	cmp	r2, r3
 800d856:	d0a0      	beq.n	800d79a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d858:	2300      	movs	r3, #0
}
 800d85a:	4618      	mov	r0, r3
 800d85c:	3710      	adds	r7, #16
 800d85e:	46bd      	mov	sp, r7
 800d860:	bd80      	pop	{r7, pc}
	...

0800d864 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d864:	b480      	push	{r7}
 800d866:	b0a3      	sub	sp, #140	@ 0x8c
 800d868:	af00      	add	r7, sp, #0
 800d86a:	60f8      	str	r0, [r7, #12]
 800d86c:	60b9      	str	r1, [r7, #8]
 800d86e:	4613      	mov	r3, r2
 800d870:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	68ba      	ldr	r2, [r7, #8]
 800d876:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	88fa      	ldrh	r2, [r7, #6]
 800d87c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	88fa      	ldrh	r2, [r7, #6]
 800d884:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	2200      	movs	r2, #0
 800d88c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	689b      	ldr	r3, [r3, #8]
 800d892:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d896:	d10e      	bne.n	800d8b6 <UART_Start_Receive_IT+0x52>
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	691b      	ldr	r3, [r3, #16]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d105      	bne.n	800d8ac <UART_Start_Receive_IT+0x48>
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800d8a6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d8aa:	e02d      	b.n	800d908 <UART_Start_Receive_IT+0xa4>
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	22ff      	movs	r2, #255	@ 0xff
 800d8b0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d8b4:	e028      	b.n	800d908 <UART_Start_Receive_IT+0xa4>
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	689b      	ldr	r3, [r3, #8]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d10d      	bne.n	800d8da <UART_Start_Receive_IT+0x76>
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	691b      	ldr	r3, [r3, #16]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d104      	bne.n	800d8d0 <UART_Start_Receive_IT+0x6c>
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	22ff      	movs	r2, #255	@ 0xff
 800d8ca:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d8ce:	e01b      	b.n	800d908 <UART_Start_Receive_IT+0xa4>
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	227f      	movs	r2, #127	@ 0x7f
 800d8d4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d8d8:	e016      	b.n	800d908 <UART_Start_Receive_IT+0xa4>
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	689b      	ldr	r3, [r3, #8]
 800d8de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d8e2:	d10d      	bne.n	800d900 <UART_Start_Receive_IT+0x9c>
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	691b      	ldr	r3, [r3, #16]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d104      	bne.n	800d8f6 <UART_Start_Receive_IT+0x92>
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	227f      	movs	r2, #127	@ 0x7f
 800d8f0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d8f4:	e008      	b.n	800d908 <UART_Start_Receive_IT+0xa4>
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	223f      	movs	r2, #63	@ 0x3f
 800d8fa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d8fe:	e003      	b.n	800d908 <UART_Start_Receive_IT+0xa4>
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	2200      	movs	r2, #0
 800d904:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	2200      	movs	r2, #0
 800d90c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	2222      	movs	r2, #34	@ 0x22
 800d914:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	3308      	adds	r3, #8
 800d91e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d920:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d922:	e853 3f00 	ldrex	r3, [r3]
 800d926:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800d928:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d92a:	f043 0301 	orr.w	r3, r3, #1
 800d92e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	3308      	adds	r3, #8
 800d938:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800d93c:	673a      	str	r2, [r7, #112]	@ 0x70
 800d93e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d940:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800d942:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800d944:	e841 2300 	strex	r3, r2, [r1]
 800d948:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800d94a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d1e3      	bne.n	800d918 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d954:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d958:	d14f      	bne.n	800d9fa <UART_Start_Receive_IT+0x196>
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d960:	88fa      	ldrh	r2, [r7, #6]
 800d962:	429a      	cmp	r2, r3
 800d964:	d349      	bcc.n	800d9fa <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	689b      	ldr	r3, [r3, #8]
 800d96a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d96e:	d107      	bne.n	800d980 <UART_Start_Receive_IT+0x11c>
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	691b      	ldr	r3, [r3, #16]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d103      	bne.n	800d980 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	4a47      	ldr	r2, [pc, #284]	@ (800da98 <UART_Start_Receive_IT+0x234>)
 800d97c:	675a      	str	r2, [r3, #116]	@ 0x74
 800d97e:	e002      	b.n	800d986 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	4a46      	ldr	r2, [pc, #280]	@ (800da9c <UART_Start_Receive_IT+0x238>)
 800d984:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	691b      	ldr	r3, [r3, #16]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d01a      	beq.n	800d9c4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d994:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d996:	e853 3f00 	ldrex	r3, [r3]
 800d99a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800d99c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d99e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d9a2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	461a      	mov	r2, r3
 800d9ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d9b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d9b2:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9b4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d9b6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d9b8:	e841 2300 	strex	r3, r2, [r1]
 800d9bc:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800d9be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d1e4      	bne.n	800d98e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	3308      	adds	r3, #8
 800d9ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9ce:	e853 3f00 	ldrex	r3, [r3]
 800d9d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d9d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d9da:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	3308      	adds	r3, #8
 800d9e2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800d9e4:	64ba      	str	r2, [r7, #72]	@ 0x48
 800d9e6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9e8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d9ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d9ec:	e841 2300 	strex	r3, r2, [r1]
 800d9f0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800d9f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d1e5      	bne.n	800d9c4 <UART_Start_Receive_IT+0x160>
 800d9f8:	e046      	b.n	800da88 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	689b      	ldr	r3, [r3, #8]
 800d9fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800da02:	d107      	bne.n	800da14 <UART_Start_Receive_IT+0x1b0>
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	691b      	ldr	r3, [r3, #16]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d103      	bne.n	800da14 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	4a24      	ldr	r2, [pc, #144]	@ (800daa0 <UART_Start_Receive_IT+0x23c>)
 800da10:	675a      	str	r2, [r3, #116]	@ 0x74
 800da12:	e002      	b.n	800da1a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	4a23      	ldr	r2, [pc, #140]	@ (800daa4 <UART_Start_Receive_IT+0x240>)
 800da18:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	691b      	ldr	r3, [r3, #16]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d019      	beq.n	800da56 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da2a:	e853 3f00 	ldrex	r3, [r3]
 800da2e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800da30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da32:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800da36:	677b      	str	r3, [r7, #116]	@ 0x74
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	461a      	mov	r2, r3
 800da3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800da40:	637b      	str	r3, [r7, #52]	@ 0x34
 800da42:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da44:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800da46:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800da48:	e841 2300 	strex	r3, r2, [r1]
 800da4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800da4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da50:	2b00      	cmp	r3, #0
 800da52:	d1e6      	bne.n	800da22 <UART_Start_Receive_IT+0x1be>
 800da54:	e018      	b.n	800da88 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da5c:	697b      	ldr	r3, [r7, #20]
 800da5e:	e853 3f00 	ldrex	r3, [r3]
 800da62:	613b      	str	r3, [r7, #16]
   return(result);
 800da64:	693b      	ldr	r3, [r7, #16]
 800da66:	f043 0320 	orr.w	r3, r3, #32
 800da6a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	461a      	mov	r2, r3
 800da72:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800da74:	623b      	str	r3, [r7, #32]
 800da76:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da78:	69f9      	ldr	r1, [r7, #28]
 800da7a:	6a3a      	ldr	r2, [r7, #32]
 800da7c:	e841 2300 	strex	r3, r2, [r1]
 800da80:	61bb      	str	r3, [r7, #24]
   return(result);
 800da82:	69bb      	ldr	r3, [r7, #24]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d1e6      	bne.n	800da56 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800da88:	2300      	movs	r3, #0
}
 800da8a:	4618      	mov	r0, r3
 800da8c:	378c      	adds	r7, #140	@ 0x8c
 800da8e:	46bd      	mov	sp, r7
 800da90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da94:	4770      	bx	lr
 800da96:	bf00      	nop
 800da98:	0800e4ad 	.word	0x0800e4ad
 800da9c:	0800e13d 	.word	0x0800e13d
 800daa0:	0800df7d 	.word	0x0800df7d
 800daa4:	0800ddbd 	.word	0x0800ddbd

0800daa8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800daa8:	b480      	push	{r7}
 800daaa:	b08f      	sub	sp, #60	@ 0x3c
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dab6:	6a3b      	ldr	r3, [r7, #32]
 800dab8:	e853 3f00 	ldrex	r3, [r3]
 800dabc:	61fb      	str	r3, [r7, #28]
   return(result);
 800dabe:	69fb      	ldr	r3, [r7, #28]
 800dac0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800dac4:	637b      	str	r3, [r7, #52]	@ 0x34
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	461a      	mov	r2, r3
 800dacc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dace:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dad0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dad2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dad4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dad6:	e841 2300 	strex	r3, r2, [r1]
 800dada:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dadc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d1e6      	bne.n	800dab0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	3308      	adds	r3, #8
 800dae8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	e853 3f00 	ldrex	r3, [r3]
 800daf0:	60bb      	str	r3, [r7, #8]
   return(result);
 800daf2:	68bb      	ldr	r3, [r7, #8]
 800daf4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800daf8:	633b      	str	r3, [r7, #48]	@ 0x30
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	3308      	adds	r3, #8
 800db00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800db02:	61ba      	str	r2, [r7, #24]
 800db04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db06:	6979      	ldr	r1, [r7, #20]
 800db08:	69ba      	ldr	r2, [r7, #24]
 800db0a:	e841 2300 	strex	r3, r2, [r1]
 800db0e:	613b      	str	r3, [r7, #16]
   return(result);
 800db10:	693b      	ldr	r3, [r7, #16]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d1e5      	bne.n	800dae2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	2220      	movs	r2, #32
 800db1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800db1e:	bf00      	nop
 800db20:	373c      	adds	r7, #60	@ 0x3c
 800db22:	46bd      	mov	sp, r7
 800db24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db28:	4770      	bx	lr

0800db2a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800db2a:	b480      	push	{r7}
 800db2c:	b095      	sub	sp, #84	@ 0x54
 800db2e:	af00      	add	r7, sp, #0
 800db30:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db3a:	e853 3f00 	ldrex	r3, [r3]
 800db3e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800db40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800db46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	461a      	mov	r2, r3
 800db4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800db50:	643b      	str	r3, [r7, #64]	@ 0x40
 800db52:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db54:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800db56:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800db58:	e841 2300 	strex	r3, r2, [r1]
 800db5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800db5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db60:	2b00      	cmp	r3, #0
 800db62:	d1e6      	bne.n	800db32 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	3308      	adds	r3, #8
 800db6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db6c:	6a3b      	ldr	r3, [r7, #32]
 800db6e:	e853 3f00 	ldrex	r3, [r3]
 800db72:	61fb      	str	r3, [r7, #28]
   return(result);
 800db74:	69fb      	ldr	r3, [r7, #28]
 800db76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800db7a:	f023 0301 	bic.w	r3, r3, #1
 800db7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	3308      	adds	r3, #8
 800db86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800db88:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800db8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800db8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800db90:	e841 2300 	strex	r3, r2, [r1]
 800db94:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800db96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d1e3      	bne.n	800db64 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dba0:	2b01      	cmp	r3, #1
 800dba2:	d118      	bne.n	800dbd6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	e853 3f00 	ldrex	r3, [r3]
 800dbb0:	60bb      	str	r3, [r7, #8]
   return(result);
 800dbb2:	68bb      	ldr	r3, [r7, #8]
 800dbb4:	f023 0310 	bic.w	r3, r3, #16
 800dbb8:	647b      	str	r3, [r7, #68]	@ 0x44
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	461a      	mov	r2, r3
 800dbc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dbc2:	61bb      	str	r3, [r7, #24]
 800dbc4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbc6:	6979      	ldr	r1, [r7, #20]
 800dbc8:	69ba      	ldr	r2, [r7, #24]
 800dbca:	e841 2300 	strex	r3, r2, [r1]
 800dbce:	613b      	str	r3, [r7, #16]
   return(result);
 800dbd0:	693b      	ldr	r3, [r7, #16]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d1e6      	bne.n	800dba4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	2220      	movs	r2, #32
 800dbda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800dbea:	bf00      	nop
 800dbec:	3754      	adds	r7, #84	@ 0x54
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf4:	4770      	bx	lr

0800dbf6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800dbf6:	b580      	push	{r7, lr}
 800dbf8:	b090      	sub	sp, #64	@ 0x40
 800dbfa:	af00      	add	r7, sp, #0
 800dbfc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc02:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	f003 0320 	and.w	r3, r3, #32
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d137      	bne.n	800dc82 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800dc12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc14:	2200      	movs	r2, #0
 800dc16:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800dc1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	3308      	adds	r3, #8
 800dc20:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc24:	e853 3f00 	ldrex	r3, [r3]
 800dc28:	623b      	str	r3, [r7, #32]
   return(result);
 800dc2a:	6a3b      	ldr	r3, [r7, #32]
 800dc2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dc30:	63bb      	str	r3, [r7, #56]	@ 0x38
 800dc32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	3308      	adds	r3, #8
 800dc38:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dc3a:	633a      	str	r2, [r7, #48]	@ 0x30
 800dc3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dc40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dc42:	e841 2300 	strex	r3, r2, [r1]
 800dc46:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800dc48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d1e5      	bne.n	800dc1a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dc4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc54:	693b      	ldr	r3, [r7, #16]
 800dc56:	e853 3f00 	ldrex	r3, [r3]
 800dc5a:	60fb      	str	r3, [r7, #12]
   return(result);
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dc62:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	461a      	mov	r2, r3
 800dc6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc6c:	61fb      	str	r3, [r7, #28]
 800dc6e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc70:	69b9      	ldr	r1, [r7, #24]
 800dc72:	69fa      	ldr	r2, [r7, #28]
 800dc74:	e841 2300 	strex	r3, r2, [r1]
 800dc78:	617b      	str	r3, [r7, #20]
   return(result);
 800dc7a:	697b      	ldr	r3, [r7, #20]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d1e6      	bne.n	800dc4e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800dc80:	e004      	b.n	800dc8c <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800dc82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc84:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800dc88:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800dc8a:	4798      	blx	r3
}
 800dc8c:	bf00      	nop
 800dc8e:	3740      	adds	r7, #64	@ 0x40
 800dc90:	46bd      	mov	sp, r7
 800dc92:	bd80      	pop	{r7, pc}

0800dc94 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b084      	sub	sp, #16
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dca0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800dca8:	68f8      	ldr	r0, [r7, #12]
 800dcaa:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dcac:	bf00      	nop
 800dcae:	3710      	adds	r7, #16
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	bd80      	pop	{r7, pc}

0800dcb4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b086      	sub	sp, #24
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dcc0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800dcc2:	697b      	ldr	r3, [r7, #20]
 800dcc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dcc8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800dcca:	697b      	ldr	r3, [r7, #20]
 800dccc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800dcd0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800dcd2:	697b      	ldr	r3, [r7, #20]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	689b      	ldr	r3, [r3, #8]
 800dcd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dcdc:	2b80      	cmp	r3, #128	@ 0x80
 800dcde:	d109      	bne.n	800dcf4 <UART_DMAError+0x40>
 800dce0:	693b      	ldr	r3, [r7, #16]
 800dce2:	2b21      	cmp	r3, #33	@ 0x21
 800dce4:	d106      	bne.n	800dcf4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800dce6:	697b      	ldr	r3, [r7, #20]
 800dce8:	2200      	movs	r2, #0
 800dcea:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800dcee:	6978      	ldr	r0, [r7, #20]
 800dcf0:	f7ff feda 	bl	800daa8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800dcf4:	697b      	ldr	r3, [r7, #20]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	689b      	ldr	r3, [r3, #8]
 800dcfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dcfe:	2b40      	cmp	r3, #64	@ 0x40
 800dd00:	d109      	bne.n	800dd16 <UART_DMAError+0x62>
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	2b22      	cmp	r3, #34	@ 0x22
 800dd06:	d106      	bne.n	800dd16 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800dd08:	697b      	ldr	r3, [r7, #20]
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800dd10:	6978      	ldr	r0, [r7, #20]
 800dd12:	f7ff ff0a 	bl	800db2a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800dd16:	697b      	ldr	r3, [r7, #20]
 800dd18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dd1c:	f043 0210 	orr.w	r2, r3, #16
 800dd20:	697b      	ldr	r3, [r7, #20]
 800dd22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800dd26:	697b      	ldr	r3, [r7, #20]
 800dd28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800dd2c:	6978      	ldr	r0, [r7, #20]
 800dd2e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dd30:	bf00      	nop
 800dd32:	3718      	adds	r7, #24
 800dd34:	46bd      	mov	sp, r7
 800dd36:	bd80      	pop	{r7, pc}

0800dd38 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b084      	sub	sp, #16
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	2200      	movs	r2, #0
 800dd4a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800dd54:	68f8      	ldr	r0, [r7, #12]
 800dd56:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dd58:	bf00      	nop
 800dd5a:	3710      	adds	r7, #16
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	bd80      	pop	{r7, pc}

0800dd60 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b088      	sub	sp, #32
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	e853 3f00 	ldrex	r3, [r3]
 800dd74:	60bb      	str	r3, [r7, #8]
   return(result);
 800dd76:	68bb      	ldr	r3, [r7, #8]
 800dd78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dd7c:	61fb      	str	r3, [r7, #28]
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	461a      	mov	r2, r3
 800dd84:	69fb      	ldr	r3, [r7, #28]
 800dd86:	61bb      	str	r3, [r7, #24]
 800dd88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd8a:	6979      	ldr	r1, [r7, #20]
 800dd8c:	69ba      	ldr	r2, [r7, #24]
 800dd8e:	e841 2300 	strex	r3, r2, [r1]
 800dd92:	613b      	str	r3, [r7, #16]
   return(result);
 800dd94:	693b      	ldr	r3, [r7, #16]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d1e6      	bne.n	800dd68 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	2220      	movs	r2, #32
 800dd9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	2200      	movs	r2, #0
 800dda6:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ddae:	6878      	ldr	r0, [r7, #4]
 800ddb0:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ddb2:	bf00      	nop
 800ddb4:	3720      	adds	r7, #32
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	bd80      	pop	{r7, pc}
	...

0800ddbc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	b09c      	sub	sp, #112	@ 0x70
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ddca:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ddd4:	2b22      	cmp	r3, #34	@ 0x22
 800ddd6:	f040 80c2 	bne.w	800df5e <UART_RxISR_8BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dde0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800dde4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800dde8:	b2d9      	uxtb	r1, r3
 800ddea:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800ddee:	b2da      	uxtb	r2, r3
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ddf4:	400a      	ands	r2, r1
 800ddf6:	b2d2      	uxtb	r2, r2
 800ddf8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ddfe:	1c5a      	adds	r2, r3, #1
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800de0a:	b29b      	uxth	r3, r3
 800de0c:	3b01      	subs	r3, #1
 800de0e:	b29a      	uxth	r2, r3
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800de1c:	b29b      	uxth	r3, r3
 800de1e:	2b00      	cmp	r3, #0
 800de20:	f040 80a5 	bne.w	800df6e <UART_RxISR_8BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800de2c:	e853 3f00 	ldrex	r3, [r3]
 800de30:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800de32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800de34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800de38:	66bb      	str	r3, [r7, #104]	@ 0x68
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	461a      	mov	r2, r3
 800de40:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800de42:	65bb      	str	r3, [r7, #88]	@ 0x58
 800de44:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de46:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800de48:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800de4a:	e841 2300 	strex	r3, r2, [r1]
 800de4e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800de50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800de52:	2b00      	cmp	r3, #0
 800de54:	d1e6      	bne.n	800de24 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	3308      	adds	r3, #8
 800de5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de60:	e853 3f00 	ldrex	r3, [r3]
 800de64:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800de66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de68:	f023 0301 	bic.w	r3, r3, #1
 800de6c:	667b      	str	r3, [r7, #100]	@ 0x64
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	3308      	adds	r3, #8
 800de74:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800de76:	647a      	str	r2, [r7, #68]	@ 0x44
 800de78:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de7a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800de7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800de7e:	e841 2300 	strex	r3, r2, [r1]
 800de82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800de84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de86:	2b00      	cmp	r3, #0
 800de88:	d1e5      	bne.n	800de56 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	2220      	movs	r2, #32
 800de8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	2200      	movs	r2, #0
 800de96:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	2200      	movs	r2, #0
 800de9c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	4a35      	ldr	r2, [pc, #212]	@ (800df78 <UART_RxISR_8BIT+0x1bc>)
 800dea4:	4293      	cmp	r3, r2
 800dea6:	d01f      	beq.n	800dee8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	685b      	ldr	r3, [r3, #4]
 800deae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d018      	beq.n	800dee8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800debc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800debe:	e853 3f00 	ldrex	r3, [r3]
 800dec2:	623b      	str	r3, [r7, #32]
   return(result);
 800dec4:	6a3b      	ldr	r3, [r7, #32]
 800dec6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800deca:	663b      	str	r3, [r7, #96]	@ 0x60
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	461a      	mov	r2, r3
 800ded2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ded4:	633b      	str	r3, [r7, #48]	@ 0x30
 800ded6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ded8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800deda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dedc:	e841 2300 	strex	r3, r2, [r1]
 800dee0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800dee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d1e6      	bne.n	800deb6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800deec:	2b01      	cmp	r3, #1
 800deee:	d130      	bne.n	800df52 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	2200      	movs	r2, #0
 800def4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800defc:	693b      	ldr	r3, [r7, #16]
 800defe:	e853 3f00 	ldrex	r3, [r3]
 800df02:	60fb      	str	r3, [r7, #12]
   return(result);
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	f023 0310 	bic.w	r3, r3, #16
 800df0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	461a      	mov	r2, r3
 800df12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800df14:	61fb      	str	r3, [r7, #28]
 800df16:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df18:	69b9      	ldr	r1, [r7, #24]
 800df1a:	69fa      	ldr	r2, [r7, #28]
 800df1c:	e841 2300 	strex	r3, r2, [r1]
 800df20:	617b      	str	r3, [r7, #20]
   return(result);
 800df22:	697b      	ldr	r3, [r7, #20]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d1e6      	bne.n	800def6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	69db      	ldr	r3, [r3, #28]
 800df2e:	f003 0310 	and.w	r3, r3, #16
 800df32:	2b10      	cmp	r3, #16
 800df34:	d103      	bne.n	800df3e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	2210      	movs	r2, #16
 800df3c:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800df44:	687a      	ldr	r2, [r7, #4]
 800df46:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800df4a:	4611      	mov	r1, r2
 800df4c:	6878      	ldr	r0, [r7, #4]
 800df4e:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800df50:	e00d      	b.n	800df6e <UART_RxISR_8BIT+0x1b2>
        huart->RxCpltCallback(huart);
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800df58:	6878      	ldr	r0, [r7, #4]
 800df5a:	4798      	blx	r3
}
 800df5c:	e007      	b.n	800df6e <UART_RxISR_8BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	699a      	ldr	r2, [r3, #24]
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	f042 0208 	orr.w	r2, r2, #8
 800df6c:	619a      	str	r2, [r3, #24]
}
 800df6e:	bf00      	nop
 800df70:	3770      	adds	r7, #112	@ 0x70
 800df72:	46bd      	mov	sp, r7
 800df74:	bd80      	pop	{r7, pc}
 800df76:	bf00      	nop
 800df78:	40008000 	.word	0x40008000

0800df7c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b09c      	sub	sp, #112	@ 0x70
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800df8a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800df94:	2b22      	cmp	r3, #34	@ 0x22
 800df96:	f040 80c2 	bne.w	800e11e <UART_RxISR_16BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dfa0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dfa8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800dfaa:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800dfae:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800dfb2:	4013      	ands	r3, r2
 800dfb4:	b29a      	uxth	r2, r3
 800dfb6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dfb8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dfbe:	1c9a      	adds	r2, r3, #2
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800dfca:	b29b      	uxth	r3, r3
 800dfcc:	3b01      	subs	r3, #1
 800dfce:	b29a      	uxth	r2, r3
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800dfdc:	b29b      	uxth	r3, r3
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	f040 80a5 	bne.w	800e12e <UART_RxISR_16BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dfec:	e853 3f00 	ldrex	r3, [r3]
 800dff0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800dff2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dff4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dff8:	667b      	str	r3, [r7, #100]	@ 0x64
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	461a      	mov	r2, r3
 800e000:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e002:	657b      	str	r3, [r7, #84]	@ 0x54
 800e004:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e006:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e008:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e00a:	e841 2300 	strex	r3, r2, [r1]
 800e00e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800e010:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e012:	2b00      	cmp	r3, #0
 800e014:	d1e6      	bne.n	800dfe4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	3308      	adds	r3, #8
 800e01c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e01e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e020:	e853 3f00 	ldrex	r3, [r3]
 800e024:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e028:	f023 0301 	bic.w	r3, r3, #1
 800e02c:	663b      	str	r3, [r7, #96]	@ 0x60
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	3308      	adds	r3, #8
 800e034:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e036:	643a      	str	r2, [r7, #64]	@ 0x40
 800e038:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e03a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e03c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e03e:	e841 2300 	strex	r3, r2, [r1]
 800e042:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e046:	2b00      	cmp	r3, #0
 800e048:	d1e5      	bne.n	800e016 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	2220      	movs	r2, #32
 800e04e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	2200      	movs	r2, #0
 800e056:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	2200      	movs	r2, #0
 800e05c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	4a35      	ldr	r2, [pc, #212]	@ (800e138 <UART_RxISR_16BIT+0x1bc>)
 800e064:	4293      	cmp	r3, r2
 800e066:	d01f      	beq.n	800e0a8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	685b      	ldr	r3, [r3, #4]
 800e06e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e072:	2b00      	cmp	r3, #0
 800e074:	d018      	beq.n	800e0a8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e07c:	6a3b      	ldr	r3, [r7, #32]
 800e07e:	e853 3f00 	ldrex	r3, [r3]
 800e082:	61fb      	str	r3, [r7, #28]
   return(result);
 800e084:	69fb      	ldr	r3, [r7, #28]
 800e086:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e08a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	461a      	mov	r2, r3
 800e092:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e094:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e096:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e098:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e09a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e09c:	e841 2300 	strex	r3, r2, [r1]
 800e0a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e0a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d1e6      	bne.n	800e076 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e0ac:	2b01      	cmp	r3, #1
 800e0ae:	d130      	bne.n	800e112 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	e853 3f00 	ldrex	r3, [r3]
 800e0c2:	60bb      	str	r3, [r7, #8]
   return(result);
 800e0c4:	68bb      	ldr	r3, [r7, #8]
 800e0c6:	f023 0310 	bic.w	r3, r3, #16
 800e0ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	461a      	mov	r2, r3
 800e0d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e0d4:	61bb      	str	r3, [r7, #24]
 800e0d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0d8:	6979      	ldr	r1, [r7, #20]
 800e0da:	69ba      	ldr	r2, [r7, #24]
 800e0dc:	e841 2300 	strex	r3, r2, [r1]
 800e0e0:	613b      	str	r3, [r7, #16]
   return(result);
 800e0e2:	693b      	ldr	r3, [r7, #16]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d1e6      	bne.n	800e0b6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	69db      	ldr	r3, [r3, #28]
 800e0ee:	f003 0310 	and.w	r3, r3, #16
 800e0f2:	2b10      	cmp	r3, #16
 800e0f4:	d103      	bne.n	800e0fe <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	2210      	movs	r2, #16
 800e0fc:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800e104:	687a      	ldr	r2, [r7, #4]
 800e106:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800e10a:	4611      	mov	r1, r2
 800e10c:	6878      	ldr	r0, [r7, #4]
 800e10e:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e110:	e00d      	b.n	800e12e <UART_RxISR_16BIT+0x1b2>
        huart->RxCpltCallback(huart);
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e118:	6878      	ldr	r0, [r7, #4]
 800e11a:	4798      	blx	r3
}
 800e11c:	e007      	b.n	800e12e <UART_RxISR_16BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	699a      	ldr	r2, [r3, #24]
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	f042 0208 	orr.w	r2, r2, #8
 800e12c:	619a      	str	r2, [r3, #24]
}
 800e12e:	bf00      	nop
 800e130:	3770      	adds	r7, #112	@ 0x70
 800e132:	46bd      	mov	sp, r7
 800e134:	bd80      	pop	{r7, pc}
 800e136:	bf00      	nop
 800e138:	40008000 	.word	0x40008000

0800e13c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e13c:	b580      	push	{r7, lr}
 800e13e:	b0ac      	sub	sp, #176	@ 0xb0
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e14a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	69db      	ldr	r3, [r3, #28]
 800e154:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	689b      	ldr	r3, [r3, #8]
 800e168:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e172:	2b22      	cmp	r3, #34	@ 0x22
 800e174:	f040 8189 	bne.w	800e48a <UART_RxISR_8BIT_FIFOEN+0x34e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e17e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e182:	e12c      	b.n	800e3de <UART_RxISR_8BIT_FIFOEN+0x2a2>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e18a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e18e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800e192:	b2d9      	uxtb	r1, r3
 800e194:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800e198:	b2da      	uxtb	r2, r3
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e19e:	400a      	ands	r2, r1
 800e1a0:	b2d2      	uxtb	r2, r2
 800e1a2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e1a8:	1c5a      	adds	r2, r3, #1
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e1b4:	b29b      	uxth	r3, r3
 800e1b6:	3b01      	subs	r3, #1
 800e1b8:	b29a      	uxth	r2, r3
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	69db      	ldr	r3, [r3, #28]
 800e1c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e1ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e1ce:	f003 0307 	and.w	r3, r3, #7
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d055      	beq.n	800e282 <UART_RxISR_8BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e1d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e1da:	f003 0301 	and.w	r3, r3, #1
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d011      	beq.n	800e206 <UART_RxISR_8BIT_FIFOEN+0xca>
 800e1e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e1e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d00b      	beq.n	800e206 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	2201      	movs	r2, #1
 800e1f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e1fc:	f043 0201 	orr.w	r2, r3, #1
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e206:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e20a:	f003 0302 	and.w	r3, r3, #2
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d011      	beq.n	800e236 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800e212:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e216:	f003 0301 	and.w	r3, r3, #1
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d00b      	beq.n	800e236 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	2202      	movs	r2, #2
 800e224:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e22c:	f043 0204 	orr.w	r2, r3, #4
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e236:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e23a:	f003 0304 	and.w	r3, r3, #4
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d011      	beq.n	800e266 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800e242:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e246:	f003 0301 	and.w	r3, r3, #1
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d00b      	beq.n	800e266 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	2204      	movs	r2, #4
 800e254:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e25c:	f043 0202 	orr.w	r2, r3, #2
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d008      	beq.n	800e282 <UART_RxISR_8BIT_FIFOEN+0x146>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e276:	6878      	ldr	r0, [r7, #4]
 800e278:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	2200      	movs	r2, #0
 800e27e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e288:	b29b      	uxth	r3, r3
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	f040 80a7 	bne.w	800e3de <UART_RxISR_8BIT_FIFOEN+0x2a2>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e296:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e298:	e853 3f00 	ldrex	r3, [r3]
 800e29c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800e29e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e2a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e2a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	461a      	mov	r2, r3
 800e2ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e2b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e2b4:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2b6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800e2b8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800e2ba:	e841 2300 	strex	r3, r2, [r1]
 800e2be:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800e2c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d1e4      	bne.n	800e290 <UART_RxISR_8BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	3308      	adds	r3, #8
 800e2cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e2d0:	e853 3f00 	ldrex	r3, [r3]
 800e2d4:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800e2d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e2d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e2dc:	f023 0301 	bic.w	r3, r3, #1
 800e2e0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	3308      	adds	r3, #8
 800e2ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800e2ee:	66ba      	str	r2, [r7, #104]	@ 0x68
 800e2f0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2f2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800e2f4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e2f6:	e841 2300 	strex	r3, r2, [r1]
 800e2fa:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800e2fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d1e1      	bne.n	800e2c6 <UART_RxISR_8BIT_FIFOEN+0x18a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	2220      	movs	r2, #32
 800e306:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	2200      	movs	r2, #0
 800e30e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	2200      	movs	r2, #0
 800e314:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	4a62      	ldr	r2, [pc, #392]	@ (800e4a4 <UART_RxISR_8BIT_FIFOEN+0x368>)
 800e31c:	4293      	cmp	r3, r2
 800e31e:	d021      	beq.n	800e364 <UART_RxISR_8BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	685b      	ldr	r3, [r3, #4]
 800e326:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d01a      	beq.n	800e364 <UART_RxISR_8BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e334:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e336:	e853 3f00 	ldrex	r3, [r3]
 800e33a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800e33c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e33e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e342:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	461a      	mov	r2, r3
 800e34c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e350:	657b      	str	r3, [r7, #84]	@ 0x54
 800e352:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e354:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e356:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e358:	e841 2300 	strex	r3, r2, [r1]
 800e35c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800e35e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e360:	2b00      	cmp	r3, #0
 800e362:	d1e4      	bne.n	800e32e <UART_RxISR_8BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e368:	2b01      	cmp	r3, #1
 800e36a:	d132      	bne.n	800e3d2 <UART_RxISR_8BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	2200      	movs	r2, #0
 800e370:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e378:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e37a:	e853 3f00 	ldrex	r3, [r3]
 800e37e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e382:	f023 0310 	bic.w	r3, r3, #16
 800e386:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	461a      	mov	r2, r3
 800e390:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e394:	643b      	str	r3, [r7, #64]	@ 0x40
 800e396:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e398:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e39a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e39c:	e841 2300 	strex	r3, r2, [r1]
 800e3a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e3a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d1e4      	bne.n	800e372 <UART_RxISR_8BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	69db      	ldr	r3, [r3, #28]
 800e3ae:	f003 0310 	and.w	r3, r3, #16
 800e3b2:	2b10      	cmp	r3, #16
 800e3b4:	d103      	bne.n	800e3be <UART_RxISR_8BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	2210      	movs	r2, #16
 800e3bc:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800e3c4:	687a      	ldr	r2, [r7, #4]
 800e3c6:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800e3ca:	4611      	mov	r1, r2
 800e3cc:	6878      	ldr	r0, [r7, #4]
 800e3ce:	4798      	blx	r3
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800e3d0:	e010      	b.n	800e3f4 <UART_RxISR_8BIT_FIFOEN+0x2b8>
          huart->RxCpltCallback(huart);
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e3d8:	6878      	ldr	r0, [r7, #4]
 800e3da:	4798      	blx	r3
        break;
 800e3dc:	e00a      	b.n	800e3f4 <UART_RxISR_8BIT_FIFOEN+0x2b8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e3de:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d006      	beq.n	800e3f4 <UART_RxISR_8BIT_FIFOEN+0x2b8>
 800e3e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e3ea:	f003 0320 	and.w	r3, r3, #32
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	f47f aec8 	bne.w	800e184 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e3fa:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e3fe:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e402:	2b00      	cmp	r3, #0
 800e404:	d049      	beq.n	800e49a <UART_RxISR_8BIT_FIFOEN+0x35e>
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e40c:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800e410:	429a      	cmp	r2, r3
 800e412:	d242      	bcs.n	800e49a <UART_RxISR_8BIT_FIFOEN+0x35e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	3308      	adds	r3, #8
 800e41a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e41c:	6a3b      	ldr	r3, [r7, #32]
 800e41e:	e853 3f00 	ldrex	r3, [r3]
 800e422:	61fb      	str	r3, [r7, #28]
   return(result);
 800e424:	69fb      	ldr	r3, [r7, #28]
 800e426:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e42a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	3308      	adds	r3, #8
 800e434:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800e438:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e43a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e43c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e43e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e440:	e841 2300 	strex	r3, r2, [r1]
 800e444:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d1e3      	bne.n	800e414 <UART_RxISR_8BIT_FIFOEN+0x2d8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	4a16      	ldr	r2, [pc, #88]	@ (800e4a8 <UART_RxISR_8BIT_FIFOEN+0x36c>)
 800e450:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	e853 3f00 	ldrex	r3, [r3]
 800e45e:	60bb      	str	r3, [r7, #8]
   return(result);
 800e460:	68bb      	ldr	r3, [r7, #8]
 800e462:	f043 0320 	orr.w	r3, r3, #32
 800e466:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	461a      	mov	r2, r3
 800e470:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e474:	61bb      	str	r3, [r7, #24]
 800e476:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e478:	6979      	ldr	r1, [r7, #20]
 800e47a:	69ba      	ldr	r2, [r7, #24]
 800e47c:	e841 2300 	strex	r3, r2, [r1]
 800e480:	613b      	str	r3, [r7, #16]
   return(result);
 800e482:	693b      	ldr	r3, [r7, #16]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d1e4      	bne.n	800e452 <UART_RxISR_8BIT_FIFOEN+0x316>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e488:	e007      	b.n	800e49a <UART_RxISR_8BIT_FIFOEN+0x35e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	699a      	ldr	r2, [r3, #24]
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	f042 0208 	orr.w	r2, r2, #8
 800e498:	619a      	str	r2, [r3, #24]
}
 800e49a:	bf00      	nop
 800e49c:	37b0      	adds	r7, #176	@ 0xb0
 800e49e:	46bd      	mov	sp, r7
 800e4a0:	bd80      	pop	{r7, pc}
 800e4a2:	bf00      	nop
 800e4a4:	40008000 	.word	0x40008000
 800e4a8:	0800ddbd 	.word	0x0800ddbd

0800e4ac <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e4ac:	b580      	push	{r7, lr}
 800e4ae:	b0ae      	sub	sp, #184	@ 0xb8
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e4ba:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	69db      	ldr	r3, [r3, #28]
 800e4c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	689b      	ldr	r3, [r3, #8]
 800e4d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e4e2:	2b22      	cmp	r3, #34	@ 0x22
 800e4e4:	f040 818d 	bne.w	800e802 <UART_RxISR_16BIT_FIFOEN+0x356>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e4ee:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e4f2:	e130      	b.n	800e756 <UART_RxISR_16BIT_FIFOEN+0x2aa>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4fa:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e502:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800e506:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800e50a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800e50e:	4013      	ands	r3, r2
 800e510:	b29a      	uxth	r2, r3
 800e512:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e516:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e51c:	1c9a      	adds	r2, r3, #2
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e528:	b29b      	uxth	r3, r3
 800e52a:	3b01      	subs	r3, #1
 800e52c:	b29a      	uxth	r2, r3
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	69db      	ldr	r3, [r3, #28]
 800e53a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e53e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e542:	f003 0307 	and.w	r3, r3, #7
 800e546:	2b00      	cmp	r3, #0
 800e548:	d055      	beq.n	800e5f6 <UART_RxISR_16BIT_FIFOEN+0x14a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e54a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e54e:	f003 0301 	and.w	r3, r3, #1
 800e552:	2b00      	cmp	r3, #0
 800e554:	d011      	beq.n	800e57a <UART_RxISR_16BIT_FIFOEN+0xce>
 800e556:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e55a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d00b      	beq.n	800e57a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	2201      	movs	r2, #1
 800e568:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e570:	f043 0201 	orr.w	r2, r3, #1
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e57a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e57e:	f003 0302 	and.w	r3, r3, #2
 800e582:	2b00      	cmp	r3, #0
 800e584:	d011      	beq.n	800e5aa <UART_RxISR_16BIT_FIFOEN+0xfe>
 800e586:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e58a:	f003 0301 	and.w	r3, r3, #1
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d00b      	beq.n	800e5aa <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	2202      	movs	r2, #2
 800e598:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e5a0:	f043 0204 	orr.w	r2, r3, #4
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e5aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e5ae:	f003 0304 	and.w	r3, r3, #4
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d011      	beq.n	800e5da <UART_RxISR_16BIT_FIFOEN+0x12e>
 800e5b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e5ba:	f003 0301 	and.w	r3, r3, #1
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d00b      	beq.n	800e5da <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	2204      	movs	r2, #4
 800e5c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e5d0:	f043 0202 	orr.w	r2, r3, #2
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d008      	beq.n	800e5f6 <UART_RxISR_16BIT_FIFOEN+0x14a>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e5ea:	6878      	ldr	r0, [r7, #4]
 800e5ec:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	2200      	movs	r2, #0
 800e5f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e5fc:	b29b      	uxth	r3, r3
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	f040 80a9 	bne.w	800e756 <UART_RxISR_16BIT_FIFOEN+0x2aa>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e60a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e60c:	e853 3f00 	ldrex	r3, [r3]
 800e610:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800e612:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e614:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e618:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	461a      	mov	r2, r3
 800e622:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e626:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e62a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e62c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800e62e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e632:	e841 2300 	strex	r3, r2, [r1]
 800e636:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800e638:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d1e2      	bne.n	800e604 <UART_RxISR_16BIT_FIFOEN+0x158>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	3308      	adds	r3, #8
 800e644:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e646:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e648:	e853 3f00 	ldrex	r3, [r3]
 800e64c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800e64e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e650:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e654:	f023 0301 	bic.w	r3, r3, #1
 800e658:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	3308      	adds	r3, #8
 800e662:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800e666:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e668:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e66a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e66c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e66e:	e841 2300 	strex	r3, r2, [r1]
 800e672:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800e674:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e676:	2b00      	cmp	r3, #0
 800e678:	d1e1      	bne.n	800e63e <UART_RxISR_16BIT_FIFOEN+0x192>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	2220      	movs	r2, #32
 800e67e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	2200      	movs	r2, #0
 800e686:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	2200      	movs	r2, #0
 800e68c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	4a62      	ldr	r2, [pc, #392]	@ (800e81c <UART_RxISR_16BIT_FIFOEN+0x370>)
 800e694:	4293      	cmp	r3, r2
 800e696:	d021      	beq.n	800e6dc <UART_RxISR_16BIT_FIFOEN+0x230>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	685b      	ldr	r3, [r3, #4]
 800e69e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d01a      	beq.n	800e6dc <UART_RxISR_16BIT_FIFOEN+0x230>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e6ae:	e853 3f00 	ldrex	r3, [r3]
 800e6b2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e6b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e6b6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e6ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	461a      	mov	r2, r3
 800e6c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800e6c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e6ca:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6cc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e6ce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e6d0:	e841 2300 	strex	r3, r2, [r1]
 800e6d4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e6d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d1e4      	bne.n	800e6a6 <UART_RxISR_16BIT_FIFOEN+0x1fa>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e6e0:	2b01      	cmp	r3, #1
 800e6e2:	d132      	bne.n	800e74a <UART_RxISR_16BIT_FIFOEN+0x29e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6f2:	e853 3f00 	ldrex	r3, [r3]
 800e6f6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e6f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e6fa:	f023 0310 	bic.w	r3, r3, #16
 800e6fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	461a      	mov	r2, r3
 800e708:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e70c:	647b      	str	r3, [r7, #68]	@ 0x44
 800e70e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e710:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e712:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e714:	e841 2300 	strex	r3, r2, [r1]
 800e718:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e71a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d1e4      	bne.n	800e6ea <UART_RxISR_16BIT_FIFOEN+0x23e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	69db      	ldr	r3, [r3, #28]
 800e726:	f003 0310 	and.w	r3, r3, #16
 800e72a:	2b10      	cmp	r3, #16
 800e72c:	d103      	bne.n	800e736 <UART_RxISR_16BIT_FIFOEN+0x28a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	2210      	movs	r2, #16
 800e734:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800e73c:	687a      	ldr	r2, [r7, #4]
 800e73e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800e742:	4611      	mov	r1, r2
 800e744:	6878      	ldr	r0, [r7, #4]
 800e746:	4798      	blx	r3
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800e748:	e010      	b.n	800e76c <UART_RxISR_16BIT_FIFOEN+0x2c0>
          huart->RxCpltCallback(huart);
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e750:	6878      	ldr	r0, [r7, #4]
 800e752:	4798      	blx	r3
        break;
 800e754:	e00a      	b.n	800e76c <UART_RxISR_16BIT_FIFOEN+0x2c0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e756:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d006      	beq.n	800e76c <UART_RxISR_16BIT_FIFOEN+0x2c0>
 800e75e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e762:	f003 0320 	and.w	r3, r3, #32
 800e766:	2b00      	cmp	r3, #0
 800e768:	f47f aec4 	bne.w	800e4f4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e772:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e776:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d049      	beq.n	800e812 <UART_RxISR_16BIT_FIFOEN+0x366>
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e784:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800e788:	429a      	cmp	r2, r3
 800e78a:	d242      	bcs.n	800e812 <UART_RxISR_16BIT_FIFOEN+0x366>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	3308      	adds	r3, #8
 800e792:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e796:	e853 3f00 	ldrex	r3, [r3]
 800e79a:	623b      	str	r3, [r7, #32]
   return(result);
 800e79c:	6a3b      	ldr	r3, [r7, #32]
 800e79e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e7a2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	3308      	adds	r3, #8
 800e7ac:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800e7b0:	633a      	str	r2, [r7, #48]	@ 0x30
 800e7b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e7b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e7b8:	e841 2300 	strex	r3, r2, [r1]
 800e7bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e7be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d1e3      	bne.n	800e78c <UART_RxISR_16BIT_FIFOEN+0x2e0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	4a16      	ldr	r2, [pc, #88]	@ (800e820 <UART_RxISR_16BIT_FIFOEN+0x374>)
 800e7c8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7d0:	693b      	ldr	r3, [r7, #16]
 800e7d2:	e853 3f00 	ldrex	r3, [r3]
 800e7d6:	60fb      	str	r3, [r7, #12]
   return(result);
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	f043 0320 	orr.w	r3, r3, #32
 800e7de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	461a      	mov	r2, r3
 800e7e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e7ec:	61fb      	str	r3, [r7, #28]
 800e7ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7f0:	69b9      	ldr	r1, [r7, #24]
 800e7f2:	69fa      	ldr	r2, [r7, #28]
 800e7f4:	e841 2300 	strex	r3, r2, [r1]
 800e7f8:	617b      	str	r3, [r7, #20]
   return(result);
 800e7fa:	697b      	ldr	r3, [r7, #20]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d1e4      	bne.n	800e7ca <UART_RxISR_16BIT_FIFOEN+0x31e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e800:	e007      	b.n	800e812 <UART_RxISR_16BIT_FIFOEN+0x366>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	699a      	ldr	r2, [r3, #24]
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	f042 0208 	orr.w	r2, r2, #8
 800e810:	619a      	str	r2, [r3, #24]
}
 800e812:	bf00      	nop
 800e814:	37b8      	adds	r7, #184	@ 0xb8
 800e816:	46bd      	mov	sp, r7
 800e818:	bd80      	pop	{r7, pc}
 800e81a:	bf00      	nop
 800e81c:	40008000 	.word	0x40008000
 800e820:	0800df7d 	.word	0x0800df7d

0800e824 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e824:	b480      	push	{r7}
 800e826:	b083      	sub	sp, #12
 800e828:	af00      	add	r7, sp, #0
 800e82a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e82c:	bf00      	nop
 800e82e:	370c      	adds	r7, #12
 800e830:	46bd      	mov	sp, r7
 800e832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e836:	4770      	bx	lr

0800e838 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e838:	b480      	push	{r7}
 800e83a:	b083      	sub	sp, #12
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e840:	bf00      	nop
 800e842:	370c      	adds	r7, #12
 800e844:	46bd      	mov	sp, r7
 800e846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84a:	4770      	bx	lr

0800e84c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e84c:	b480      	push	{r7}
 800e84e:	b083      	sub	sp, #12
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e854:	bf00      	nop
 800e856:	370c      	adds	r7, #12
 800e858:	46bd      	mov	sp, r7
 800e85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e85e:	4770      	bx	lr

0800e860 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e860:	b480      	push	{r7}
 800e862:	b085      	sub	sp, #20
 800e864:	af00      	add	r7, sp, #0
 800e866:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e86e:	2b01      	cmp	r3, #1
 800e870:	d101      	bne.n	800e876 <HAL_UARTEx_DisableFifoMode+0x16>
 800e872:	2302      	movs	r3, #2
 800e874:	e027      	b.n	800e8c6 <HAL_UARTEx_DisableFifoMode+0x66>
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	2201      	movs	r2, #1
 800e87a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	2224      	movs	r2, #36	@ 0x24
 800e882:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	681a      	ldr	r2, [r3, #0]
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	f022 0201 	bic.w	r2, r2, #1
 800e89c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e8a4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	68fa      	ldr	r2, [r7, #12]
 800e8b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	2220      	movs	r2, #32
 800e8b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	2200      	movs	r2, #0
 800e8c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e8c4:	2300      	movs	r3, #0
}
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	3714      	adds	r7, #20
 800e8ca:	46bd      	mov	sp, r7
 800e8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d0:	4770      	bx	lr

0800e8d2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e8d2:	b580      	push	{r7, lr}
 800e8d4:	b084      	sub	sp, #16
 800e8d6:	af00      	add	r7, sp, #0
 800e8d8:	6078      	str	r0, [r7, #4]
 800e8da:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e8e2:	2b01      	cmp	r3, #1
 800e8e4:	d101      	bne.n	800e8ea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e8e6:	2302      	movs	r3, #2
 800e8e8:	e02d      	b.n	800e946 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	2201      	movs	r2, #1
 800e8ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	2224      	movs	r2, #36	@ 0x24
 800e8f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	681a      	ldr	r2, [r3, #0]
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	f022 0201 	bic.w	r2, r2, #1
 800e910:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	689b      	ldr	r3, [r3, #8]
 800e918:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	683a      	ldr	r2, [r7, #0]
 800e922:	430a      	orrs	r2, r1
 800e924:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e926:	6878      	ldr	r0, [r7, #4]
 800e928:	f000 f850 	bl	800e9cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	68fa      	ldr	r2, [r7, #12]
 800e932:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	2220      	movs	r2, #32
 800e938:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	2200      	movs	r2, #0
 800e940:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e944:	2300      	movs	r3, #0
}
 800e946:	4618      	mov	r0, r3
 800e948:	3710      	adds	r7, #16
 800e94a:	46bd      	mov	sp, r7
 800e94c:	bd80      	pop	{r7, pc}

0800e94e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e94e:	b580      	push	{r7, lr}
 800e950:	b084      	sub	sp, #16
 800e952:	af00      	add	r7, sp, #0
 800e954:	6078      	str	r0, [r7, #4]
 800e956:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e95e:	2b01      	cmp	r3, #1
 800e960:	d101      	bne.n	800e966 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e962:	2302      	movs	r3, #2
 800e964:	e02d      	b.n	800e9c2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	2201      	movs	r2, #1
 800e96a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	2224      	movs	r2, #36	@ 0x24
 800e972:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	681a      	ldr	r2, [r3, #0]
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	f022 0201 	bic.w	r2, r2, #1
 800e98c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	689b      	ldr	r3, [r3, #8]
 800e994:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	683a      	ldr	r2, [r7, #0]
 800e99e:	430a      	orrs	r2, r1
 800e9a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e9a2:	6878      	ldr	r0, [r7, #4]
 800e9a4:	f000 f812 	bl	800e9cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	68fa      	ldr	r2, [r7, #12]
 800e9ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	2220      	movs	r2, #32
 800e9b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e9c0:	2300      	movs	r3, #0
}
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	3710      	adds	r7, #16
 800e9c6:	46bd      	mov	sp, r7
 800e9c8:	bd80      	pop	{r7, pc}
	...

0800e9cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e9cc:	b480      	push	{r7}
 800e9ce:	b085      	sub	sp, #20
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d108      	bne.n	800e9ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	2201      	movs	r2, #1
 800e9e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	2201      	movs	r2, #1
 800e9e8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e9ec:	e031      	b.n	800ea52 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e9ee:	2308      	movs	r3, #8
 800e9f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e9f2:	2308      	movs	r3, #8
 800e9f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	689b      	ldr	r3, [r3, #8]
 800e9fc:	0e5b      	lsrs	r3, r3, #25
 800e9fe:	b2db      	uxtb	r3, r3
 800ea00:	f003 0307 	and.w	r3, r3, #7
 800ea04:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	689b      	ldr	r3, [r3, #8]
 800ea0c:	0f5b      	lsrs	r3, r3, #29
 800ea0e:	b2db      	uxtb	r3, r3
 800ea10:	f003 0307 	and.w	r3, r3, #7
 800ea14:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ea16:	7bbb      	ldrb	r3, [r7, #14]
 800ea18:	7b3a      	ldrb	r2, [r7, #12]
 800ea1a:	4911      	ldr	r1, [pc, #68]	@ (800ea60 <UARTEx_SetNbDataToProcess+0x94>)
 800ea1c:	5c8a      	ldrb	r2, [r1, r2]
 800ea1e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ea22:	7b3a      	ldrb	r2, [r7, #12]
 800ea24:	490f      	ldr	r1, [pc, #60]	@ (800ea64 <UARTEx_SetNbDataToProcess+0x98>)
 800ea26:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ea28:	fb93 f3f2 	sdiv	r3, r3, r2
 800ea2c:	b29a      	uxth	r2, r3
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ea34:	7bfb      	ldrb	r3, [r7, #15]
 800ea36:	7b7a      	ldrb	r2, [r7, #13]
 800ea38:	4909      	ldr	r1, [pc, #36]	@ (800ea60 <UARTEx_SetNbDataToProcess+0x94>)
 800ea3a:	5c8a      	ldrb	r2, [r1, r2]
 800ea3c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ea40:	7b7a      	ldrb	r2, [r7, #13]
 800ea42:	4908      	ldr	r1, [pc, #32]	@ (800ea64 <UARTEx_SetNbDataToProcess+0x98>)
 800ea44:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ea46:	fb93 f3f2 	sdiv	r3, r3, r2
 800ea4a:	b29a      	uxth	r2, r3
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ea52:	bf00      	nop
 800ea54:	3714      	adds	r7, #20
 800ea56:	46bd      	mov	sp, r7
 800ea58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5c:	4770      	bx	lr
 800ea5e:	bf00      	nop
 800ea60:	080111f8 	.word	0x080111f8
 800ea64:	08011200 	.word	0x08011200

0800ea68 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b082      	sub	sp, #8
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]
 800ea70:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	ed93 7a06 	vldr	s14, [r3, #24]
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	edd3 7a07 	vldr	s15, [r3, #28]
 800ea7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	edd3 7a08 	vldr	s15, [r3, #32]
 800ea88:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	edd3 7a06 	vldr	s15, [r3, #24]
 800ea98:	eeb1 7a67 	vneg.f32	s14, s15
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	edd3 7a08 	vldr	s15, [r3, #32]
 800eaa2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800eaa6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	6a1a      	ldr	r2, [r3, #32]
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800eab8:	683b      	ldr	r3, [r7, #0]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d006      	beq.n	800eacc <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	330c      	adds	r3, #12
 800eac2:	220c      	movs	r2, #12
 800eac4:	2100      	movs	r1, #0
 800eac6:	4618      	mov	r0, r3
 800eac8:	f000 fcc4 	bl	800f454 <memset>
  }

}
 800eacc:	bf00      	nop
 800eace:	3708      	adds	r7, #8
 800ead0:	46bd      	mov	sp, r7
 800ead2:	bd80      	pop	{r7, pc}

0800ead4 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800ead4:	b480      	push	{r7}
 800ead6:	b08b      	sub	sp, #44	@ 0x2c
 800ead8:	af00      	add	r7, sp, #0
 800eada:	60f8      	str	r0, [r7, #12]
 800eadc:	60b9      	str	r1, [r7, #8]
 800eade:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	685b      	ldr	r3, [r3, #4]
 800eae4:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800eae6:	68bb      	ldr	r3, [r7, #8]
 800eae8:	685b      	ldr	r3, [r3, #4]
 800eaea:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	685b      	ldr	r3, [r3, #4]
 800eaf0:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	881b      	ldrh	r3, [r3, #0]
 800eaf6:	461a      	mov	r2, r3
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	885b      	ldrh	r3, [r3, #2]
 800eafc:	fb02 f303 	mul.w	r3, r2, r3
 800eb00:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800eb02:	697b      	ldr	r3, [r7, #20]
 800eb04:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800eb06:	e013      	b.n	800eb30 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 800eb08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb0a:	1d1a      	adds	r2, r3, #4
 800eb0c:	627a      	str	r2, [r7, #36]	@ 0x24
 800eb0e:	ed93 7a00 	vldr	s14, [r3]
 800eb12:	6a3b      	ldr	r3, [r7, #32]
 800eb14:	1d1a      	adds	r2, r3, #4
 800eb16:	623a      	str	r2, [r7, #32]
 800eb18:	edd3 7a00 	vldr	s15, [r3]
 800eb1c:	69fb      	ldr	r3, [r7, #28]
 800eb1e:	1d1a      	adds	r2, r3, #4
 800eb20:	61fa      	str	r2, [r7, #28]
 800eb22:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eb26:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800eb2a:	69bb      	ldr	r3, [r7, #24]
 800eb2c:	3b01      	subs	r3, #1
 800eb2e:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800eb30:	69bb      	ldr	r3, [r7, #24]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d1e8      	bne.n	800eb08 <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800eb36:	2300      	movs	r3, #0
 800eb38:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800eb3a:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800eb3e:	4618      	mov	r0, r3
 800eb40:	372c      	adds	r7, #44	@ 0x2c
 800eb42:	46bd      	mov	sp, r7
 800eb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb48:	4770      	bx	lr

0800eb4a <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800eb4a:	b480      	push	{r7}
 800eb4c:	b085      	sub	sp, #20
 800eb4e:	af00      	add	r7, sp, #0
 800eb50:	60f8      	str	r0, [r7, #12]
 800eb52:	607b      	str	r3, [r7, #4]
 800eb54:	460b      	mov	r3, r1
 800eb56:	817b      	strh	r3, [r7, #10]
 800eb58:	4613      	mov	r3, r2
 800eb5a:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	897a      	ldrh	r2, [r7, #10]
 800eb60:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	893a      	ldrh	r2, [r7, #8]
 800eb66:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	687a      	ldr	r2, [r7, #4]
 800eb6c:	605a      	str	r2, [r3, #4]
}
 800eb6e:	bf00      	nop
 800eb70:	3714      	adds	r7, #20
 800eb72:	46bd      	mov	sp, r7
 800eb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb78:	4770      	bx	lr

0800eb7a <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800eb7a:	b480      	push	{r7}
 800eb7c:	b0bb      	sub	sp, #236	@ 0xec
 800eb7e:	af00      	add	r7, sp, #0
 800eb80:	6078      	str	r0, [r7, #4]
 800eb82:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	685b      	ldr	r3, [r3, #4]
 800eb88:	667b      	str	r3, [r7, #100]	@ 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800eb8a:	683b      	ldr	r3, [r7, #0]
 800eb8c:	685b      	ldr	r3, [r3, #4]
 800eb8e:	663b      	str	r3, [r7, #96]	@ 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	881b      	ldrh	r3, [r3, #0]
 800eb94:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	885b      	ldrh	r3, [r3, #2]
 800eb9a:	65bb      	str	r3, [r7, #88]	@ 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 800eb9c:	f04f 0300 	mov.w	r3, #0
 800eba0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800eba4:	f04f 0300 	mov.w	r3, #0
 800eba8:	657b      	str	r3, [r7, #84]	@ 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 800ebaa:	2300      	movs	r3, #0
 800ebac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 800ebb0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ebb2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 800ebb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ebb8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 800ebbc:	e03b      	b.n	800ec36 <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 800ebbe:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ebc0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ebc4:	1ad3      	subs	r3, r2, r3
 800ebc6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800ebca:	e00c      	b.n	800ebe6 <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 800ebcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ebd0:	1d1a      	adds	r2, r3, #4
 800ebd2:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800ebd6:	f04f 0200 	mov.w	r2, #0
 800ebda:	601a      	str	r2, [r3, #0]
        j--;
 800ebdc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ebe0:	3b01      	subs	r3, #1
 800ebe2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800ebe6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d1ee      	bne.n	800ebcc <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 800ebee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ebf2:	1d1a      	adds	r2, r3, #4
 800ebf4:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800ebf8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800ebfc:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 800ebfe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ec02:	3b01      	subs	r3, #1
 800ec04:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800ec08:	e00c      	b.n	800ec24 <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 800ec0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ec0e:	1d1a      	adds	r2, r3, #4
 800ec10:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800ec14:	f04f 0200 	mov.w	r2, #0
 800ec18:	601a      	str	r2, [r3, #0]
        j--;
 800ec1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ec1e:	3b01      	subs	r3, #1
 800ec20:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800ec24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d1ee      	bne.n	800ec0a <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 800ec2c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ec30:	3b01      	subs	r3, #1
 800ec32:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    while (rowCnt > 0U)
 800ec36:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d1bf      	bne.n	800ebbe <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 800ec3e:	2300      	movs	r3, #0
 800ec40:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ec44:	e2c7      	b.n	800f1d6 <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 800ec46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ec4a:	653b      	str	r3, [r7, #80]	@ 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	685a      	ldr	r2, [r3, #4]
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	885b      	ldrh	r3, [r3, #2]
 800ec54:	3301      	adds	r3, #1
 800ec56:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 800ec5a:	fb01 f303 	mul.w	r3, r1, r3
 800ec5e:	009b      	lsls	r3, r3, #2
 800ec60:	4413      	add	r3, r2
 800ec62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      pivot = *pTmp;
 800ec66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      selectedRow = column;
 800ec70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ec74:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800ec78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ec7c:	3301      	adds	r3, #1
 800ec7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ec82:	e02c      	b.n	800ecde <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	685a      	ldr	r2, [r3, #4]
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	885b      	ldrh	r3, [r3, #2]
 800ec8c:	4619      	mov	r1, r3
 800ec8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ec92:	fb03 f101 	mul.w	r1, r3, r1
 800ec96:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ec9a:	440b      	add	r3, r1
 800ec9c:	009b      	lsls	r3, r3, #2
 800ec9e:	4413      	add	r3, r2
 800eca0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          newPivot = *pTmp;
 800eca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	657b      	str	r3, [r7, #84]	@ 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 800ecac:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800ecb0:	eeb0 7ae7 	vabs.f32	s14, s15
 800ecb4:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800ecb8:	eef0 7ae7 	vabs.f32	s15, s15
 800ecbc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ecc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecc4:	dd06      	ble.n	800ecd4 <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 800ecc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ecca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            pivot = newPivot;
 800ecce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ecd0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800ecd4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ecd8:	3301      	adds	r3, #1
 800ecda:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ecde:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800ece2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ece4:	429a      	cmp	r2, r3
 800ece6:	d3cd      	bcc.n	800ec84 <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 800ece8:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800ecec:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ecf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecf4:	f000 809b 	beq.w	800ee2e <arm_mat_inverse_f32+0x2b4>
 800ecf8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ecfc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ed00:	429a      	cmp	r2, r3
 800ed02:	f000 8094 	beq.w	800ee2e <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	685b      	ldr	r3, [r3, #4]
 800ed0a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	685b      	ldr	r3, [r3, #4]
 800ed12:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	885b      	ldrh	r3, [r3, #2]
 800ed1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ed1c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ed1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ed22:	1ad3      	subs	r3, r2, r3
 800ed24:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ed26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ed28:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ed2a:	fb03 f202 	mul.w	r2, r3, r2
 800ed2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ed32:	4413      	add	r3, r2
 800ed34:	009b      	lsls	r3, r3, #2
 800ed36:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800ed3a:	4413      	add	r3, r2
 800ed3c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ed40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ed42:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ed46:	fb03 f202 	mul.w	r2, r3, r2
 800ed4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ed4e:	4413      	add	r3, r2
 800ed50:	009b      	lsls	r3, r3, #2
 800ed52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ed56:	4413      	add	r3, r2
 800ed58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800ed62:	e018      	b.n	800ed96 <arm_mat_inverse_f32+0x21c>
 800ed64:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ed6c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ed70:	1d1a      	adds	r2, r3, #4
 800ed72:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 800ed76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ed7a:	6812      	ldr	r2, [r2, #0]
 800ed7c:	601a      	str	r2, [r3, #0]
 800ed7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ed82:	1d1a      	adds	r2, r3, #4
 800ed84:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800ed88:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ed8a:	601a      	str	r2, [r3, #0]
 800ed8c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800ed90:	3301      	adds	r3, #1
 800ed92:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800ed96:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800ed9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ed9c:	429a      	cmp	r2, r3
 800ed9e:	dbe1      	blt.n	800ed64 <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 800eda0:	683b      	ldr	r3, [r7, #0]
 800eda2:	685b      	ldr	r3, [r3, #4]
 800eda4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800eda8:	683b      	ldr	r3, [r7, #0]
 800edaa:	685b      	ldr	r3, [r3, #4]
 800edac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800edb0:	683b      	ldr	r3, [r7, #0]
 800edb2:	885b      	ldrh	r3, [r3, #2]
 800edb4:	647b      	str	r3, [r7, #68]	@ 0x44
 800edb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800edb8:	643b      	str	r3, [r7, #64]	@ 0x40
 800edba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800edbc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800edbe:	fb02 f303 	mul.w	r3, r2, r3
 800edc2:	009b      	lsls	r3, r3, #2
 800edc4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800edc8:	4413      	add	r3, r2
 800edca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800edce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800edd0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800edd4:	fb02 f303 	mul.w	r3, r2, r3
 800edd8:	009b      	lsls	r3, r3, #2
 800edda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800edde:	4413      	add	r3, r2
 800ede0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ede4:	2300      	movs	r3, #0
 800ede6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800edea:	e018      	b.n	800ee1e <arm_mat_inverse_f32+0x2a4>
 800edec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800edf4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800edf8:	1d1a      	adds	r2, r3, #4
 800edfa:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800edfe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ee02:	6812      	ldr	r2, [r2, #0]
 800ee04:	601a      	str	r2, [r3, #0]
 800ee06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ee0a:	1d1a      	adds	r2, r3, #4
 800ee0c:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ee10:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ee12:	601a      	str	r2, [r3, #0]
 800ee14:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800ee18:	3301      	adds	r3, #1
 800ee1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ee1e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ee22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ee24:	429a      	cmp	r2, r3
 800ee26:	dbe1      	blt.n	800edec <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 800ee28:	2301      	movs	r3, #1
 800ee2a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 800ee2e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ee32:	2b01      	cmp	r3, #1
 800ee34:	d009      	beq.n	800ee4a <arm_mat_inverse_f32+0x2d0>
 800ee36:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800ee3a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ee3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee42:	d102      	bne.n	800ee4a <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 800ee44:	f06f 0304 	mvn.w	r3, #4
 800ee48:	e208      	b.n	800f25c <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 800ee4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ee4e:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 800ee52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ee56:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	685b      	ldr	r3, [r3, #4]
 800ee5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	885b      	ldrh	r3, [r3, #2]
 800ee66:	637b      	str	r3, [r7, #52]	@ 0x34
 800ee68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ee6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ee6e:	1ad3      	subs	r3, r2, r3
 800ee70:	633b      	str	r3, [r7, #48]	@ 0x30
 800ee72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ee74:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ee76:	fb03 f202 	mul.w	r2, r3, r2
 800ee7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ee7e:	4413      	add	r3, r2
 800ee80:	009b      	lsls	r3, r3, #2
 800ee82:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800ee86:	4413      	add	r3, r2
 800ee88:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ee92:	e011      	b.n	800eeb8 <arm_mat_inverse_f32+0x33e>
 800ee94:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ee98:	1d1a      	adds	r2, r3, #4
 800ee9a:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 800ee9e:	ed93 7a00 	vldr	s14, [r3]
 800eea2:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800eea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eeaa:	edc3 7a00 	vstr	s15, [r3]
 800eeae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800eeb2:	3301      	adds	r3, #1
 800eeb4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800eeb8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800eebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eebe:	429a      	cmp	r2, r3
 800eec0:	dbe8      	blt.n	800ee94 <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 800eec2:	683b      	ldr	r3, [r7, #0]
 800eec4:	685b      	ldr	r3, [r3, #4]
 800eec6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800eeca:	683b      	ldr	r3, [r7, #0]
 800eecc:	885b      	ldrh	r3, [r3, #2]
 800eece:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800eed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eed2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800eed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eed6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800eed8:	fb02 f303 	mul.w	r3, r2, r3
 800eedc:	009b      	lsls	r3, r3, #2
 800eede:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800eee2:	4413      	add	r3, r2
 800eee4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800eee8:	2300      	movs	r3, #0
 800eeea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800eeee:	e011      	b.n	800ef14 <arm_mat_inverse_f32+0x39a>
 800eef0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800eef4:	1d1a      	adds	r2, r3, #4
 800eef6:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 800eefa:	ed93 7a00 	vldr	s14, [r3]
 800eefe:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800ef02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef06:	edc3 7a00 	vstr	s15, [r3]
 800ef0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ef0e:	3301      	adds	r3, #1
 800ef10:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ef14:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800ef18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef1a:	429a      	cmp	r2, r3
 800ef1c:	dbe8      	blt.n	800eef0 <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 800ef1e:	2300      	movs	r3, #0
 800ef20:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      for (;rowNb < pivotRow; rowNb++)
 800ef24:	e0ae      	b.n	800f084 <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	685a      	ldr	r2, [r3, #4]
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	885b      	ldrh	r3, [r3, #2]
 800ef2e:	4619      	mov	r1, r3
 800ef30:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ef34:	fb03 f101 	mul.w	r1, r3, r1
 800ef38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ef3c:	440b      	add	r3, r1
 800ef3e:	009b      	lsls	r3, r3, #2
 800ef40:	4413      	add	r3, r2
 800ef42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800ef46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	685b      	ldr	r3, [r3, #4]
 800ef54:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	685b      	ldr	r3, [r3, #4]
 800ef5c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	885b      	ldrh	r3, [r3, #2]
 800ef64:	617b      	str	r3, [r7, #20]
 800ef66:	697a      	ldr	r2, [r7, #20]
 800ef68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ef6c:	1ad3      	subs	r3, r2, r3
 800ef6e:	613b      	str	r3, [r7, #16]
 800ef70:	697b      	ldr	r3, [r7, #20]
 800ef72:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800ef76:	fb03 f202 	mul.w	r2, r3, r2
 800ef7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ef7e:	4413      	add	r3, r2
 800ef80:	009b      	lsls	r3, r3, #2
 800ef82:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800ef86:	4413      	add	r3, r2
 800ef88:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ef8c:	697b      	ldr	r3, [r7, #20]
 800ef8e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ef90:	fb03 f202 	mul.w	r2, r3, r2
 800ef94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ef98:	4413      	add	r3, r2
 800ef9a:	009b      	lsls	r3, r3, #2
 800ef9c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800efa0:	4413      	add	r3, r2
 800efa2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800efa6:	2300      	movs	r3, #0
 800efa8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800efac:	e01a      	b.n	800efe4 <arm_mat_inverse_f32+0x46a>
 800efae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800efb2:	1d1a      	adds	r2, r3, #4
 800efb4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800efb8:	ed93 7a00 	vldr	s14, [r3]
 800efbc:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800efc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800efc4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800efc8:	1d1a      	adds	r2, r3, #4
 800efca:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800efce:	ed93 7a00 	vldr	s14, [r3]
 800efd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800efd6:	edc3 7a00 	vstr	s15, [r3]
 800efda:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800efde:	3301      	adds	r3, #1
 800efe0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800efe4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800efe8:	693b      	ldr	r3, [r7, #16]
 800efea:	429a      	cmp	r2, r3
 800efec:	dbdf      	blt.n	800efae <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800efee:	683b      	ldr	r3, [r7, #0]
 800eff0:	685b      	ldr	r3, [r3, #4]
 800eff2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800eff6:	683b      	ldr	r3, [r7, #0]
 800eff8:	685b      	ldr	r3, [r3, #4]
 800effa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800effe:	683b      	ldr	r3, [r7, #0]
 800f000:	885b      	ldrh	r3, [r3, #2]
 800f002:	60fb      	str	r3, [r7, #12]
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	60bb      	str	r3, [r7, #8]
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800f00e:	fb02 f303 	mul.w	r3, r2, r3
 800f012:	009b      	lsls	r3, r3, #2
 800f014:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800f018:	4413      	add	r3, r2
 800f01a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f022:	fb02 f303 	mul.w	r3, r2, r3
 800f026:	009b      	lsls	r3, r3, #2
 800f028:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f02c:	4413      	add	r3, r2
 800f02e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f032:	2300      	movs	r3, #0
 800f034:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800f038:	e01a      	b.n	800f070 <arm_mat_inverse_f32+0x4f6>
 800f03a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800f03e:	1d1a      	adds	r2, r3, #4
 800f040:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800f044:	ed93 7a00 	vldr	s14, [r3]
 800f048:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800f04c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f050:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f054:	1d1a      	adds	r2, r3, #4
 800f056:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800f05a:	ed93 7a00 	vldr	s14, [r3]
 800f05e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f062:	edc3 7a00 	vstr	s15, [r3]
 800f066:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f06a:	3301      	adds	r3, #1
 800f06c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800f070:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800f074:	68bb      	ldr	r3, [r7, #8]
 800f076:	429a      	cmp	r2, r3
 800f078:	dbdf      	blt.n	800f03a <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 800f07a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f07e:	3301      	adds	r3, #1
 800f080:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800f084:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800f088:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f08a:	429a      	cmp	r2, r3
 800f08c:	f4ff af4b 	bcc.w	800ef26 <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800f090:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f092:	3301      	adds	r3, #1
 800f094:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800f098:	e092      	b.n	800f1c0 <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	685a      	ldr	r2, [r3, #4]
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	885b      	ldrh	r3, [r3, #2]
 800f0a2:	4619      	mov	r1, r3
 800f0a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f0a8:	fb03 f101 	mul.w	r1, r3, r1
 800f0ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f0b0:	440b      	add	r3, r1
 800f0b2:	009b      	lsls	r3, r3, #2
 800f0b4:	4413      	add	r3, r2
 800f0b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800f0ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	685b      	ldr	r3, [r3, #4]
 800f0c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	685b      	ldr	r3, [r3, #4]
 800f0ce:	677b      	str	r3, [r7, #116]	@ 0x74
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	885b      	ldrh	r3, [r3, #2]
 800f0d4:	627b      	str	r3, [r7, #36]	@ 0x24
 800f0d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f0d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f0dc:	1ad3      	subs	r3, r2, r3
 800f0de:	623b      	str	r3, [r7, #32]
 800f0e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0e2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800f0e6:	fb03 f202 	mul.w	r2, r3, r2
 800f0ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f0ee:	4413      	add	r3, r2
 800f0f0:	009b      	lsls	r3, r3, #2
 800f0f2:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800f0f4:	4413      	add	r3, r2
 800f0f6:	67bb      	str	r3, [r7, #120]	@ 0x78
 800f0f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0fa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f0fc:	fb03 f202 	mul.w	r2, r3, r2
 800f100:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f104:	4413      	add	r3, r2
 800f106:	009b      	lsls	r3, r3, #2
 800f108:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800f10a:	4413      	add	r3, r2
 800f10c:	677b      	str	r3, [r7, #116]	@ 0x74
 800f10e:	2300      	movs	r3, #0
 800f110:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f112:	e014      	b.n	800f13e <arm_mat_inverse_f32+0x5c4>
 800f114:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f116:	1d1a      	adds	r2, r3, #4
 800f118:	677a      	str	r2, [r7, #116]	@ 0x74
 800f11a:	ed93 7a00 	vldr	s14, [r3]
 800f11e:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800f122:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f126:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f128:	1d1a      	adds	r2, r3, #4
 800f12a:	67ba      	str	r2, [r7, #120]	@ 0x78
 800f12c:	ed93 7a00 	vldr	s14, [r3]
 800f130:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f134:	edc3 7a00 	vstr	s15, [r3]
 800f138:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f13a:	3301      	adds	r3, #1
 800f13c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f13e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800f140:	6a3b      	ldr	r3, [r7, #32]
 800f142:	429a      	cmp	r2, r3
 800f144:	dbe6      	blt.n	800f114 <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800f146:	683b      	ldr	r3, [r7, #0]
 800f148:	685b      	ldr	r3, [r3, #4]
 800f14a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f14c:	683b      	ldr	r3, [r7, #0]
 800f14e:	685b      	ldr	r3, [r3, #4]
 800f150:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f152:	683b      	ldr	r3, [r7, #0]
 800f154:	885b      	ldrh	r3, [r3, #2]
 800f156:	61fb      	str	r3, [r7, #28]
 800f158:	69fb      	ldr	r3, [r7, #28]
 800f15a:	61bb      	str	r3, [r7, #24]
 800f15c:	69fb      	ldr	r3, [r7, #28]
 800f15e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800f162:	fb02 f303 	mul.w	r3, r2, r3
 800f166:	009b      	lsls	r3, r3, #2
 800f168:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f16a:	4413      	add	r3, r2
 800f16c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f16e:	69fb      	ldr	r3, [r7, #28]
 800f170:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f172:	fb02 f303 	mul.w	r3, r2, r3
 800f176:	009b      	lsls	r3, r3, #2
 800f178:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800f17a:	4413      	add	r3, r2
 800f17c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f17e:	2300      	movs	r3, #0
 800f180:	673b      	str	r3, [r7, #112]	@ 0x70
 800f182:	e014      	b.n	800f1ae <arm_mat_inverse_f32+0x634>
 800f184:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f186:	1d1a      	adds	r2, r3, #4
 800f188:	66ba      	str	r2, [r7, #104]	@ 0x68
 800f18a:	ed93 7a00 	vldr	s14, [r3]
 800f18e:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800f192:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f196:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f198:	1d1a      	adds	r2, r3, #4
 800f19a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f19c:	ed93 7a00 	vldr	s14, [r3]
 800f1a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f1a4:	edc3 7a00 	vstr	s15, [r3]
 800f1a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f1aa:	3301      	adds	r3, #1
 800f1ac:	673b      	str	r3, [r7, #112]	@ 0x70
 800f1ae:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800f1b0:	69bb      	ldr	r3, [r7, #24]
 800f1b2:	429a      	cmp	r2, r3
 800f1b4:	dbe6      	blt.n	800f184 <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800f1b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f1ba:	3301      	adds	r3, #1
 800f1bc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800f1c0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800f1c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f1c6:	429a      	cmp	r2, r3
 800f1c8:	f4ff af67 	bcc.w	800f09a <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 800f1cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f1d0:	3301      	adds	r3, #1
 800f1d2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800f1d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800f1da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f1dc:	429a      	cmp	r2, r3
 800f1de:	f4ff ad32 	bcc.w	800ec46 <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 800f1e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800f1ec:	2b01      	cmp	r3, #1
 800f1ee:	d033      	beq.n	800f258 <arm_mat_inverse_f32+0x6de>
 800f1f0:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800f1f4:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f1f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1fc:	d12c      	bne.n	800f258 <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	685b      	ldr	r3, [r3, #4]
 800f202:	667b      	str	r3, [r7, #100]	@ 0x64
      for (i = 0; i < numRows * numCols; i++)
 800f204:	2300      	movs	r3, #0
 800f206:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800f20a:	e010      	b.n	800f22e <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 800f20c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f210:	009b      	lsls	r3, r3, #2
 800f212:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f214:	4413      	add	r3, r2
 800f216:	edd3 7a00 	vldr	s15, [r3]
 800f21a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f21e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f222:	d10d      	bne.n	800f240 <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 800f224:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f228:	3301      	adds	r3, #1
 800f22a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800f22e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f230:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f232:	fb02 f303 	mul.w	r3, r2, r3
 800f236:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800f23a:	429a      	cmp	r2, r3
 800f23c:	d3e6      	bcc.n	800f20c <arm_mat_inverse_f32+0x692>
 800f23e:	e000      	b.n	800f242 <arm_mat_inverse_f32+0x6c8>
            break;
 800f240:	bf00      	nop
      }

      if (i == numRows * numCols)
 800f242:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f244:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f246:	fb02 f303 	mul.w	r3, r2, r3
 800f24a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800f24e:	429a      	cmp	r2, r3
 800f250:	d102      	bne.n	800f258 <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 800f252:	23fb      	movs	r3, #251	@ 0xfb
 800f254:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
    }
  }

  /* Return to application */
  return (status);
 800f258:	f997 30c3 	ldrsb.w	r3, [r7, #195]	@ 0xc3
}
 800f25c:	4618      	mov	r0, r3
 800f25e:	37ec      	adds	r7, #236	@ 0xec
 800f260:	46bd      	mov	sp, r7
 800f262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f266:	4770      	bx	lr

0800f268 <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800f268:	b480      	push	{r7}
 800f26a:	b093      	sub	sp, #76	@ 0x4c
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	60f8      	str	r0, [r7, #12]
 800f270:	60b9      	str	r1, [r7, #8]
 800f272:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	685b      	ldr	r3, [r3, #4]
 800f278:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 800f27a:	68bb      	ldr	r3, [r7, #8]
 800f27c:	685b      	ldr	r3, [r3, #4]
 800f27e:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	685b      	ldr	r3, [r3, #4]
 800f284:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 800f286:	68bb      	ldr	r3, [r7, #8]
 800f288:	685b      	ldr	r3, [r3, #4]
 800f28a:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	685b      	ldr	r3, [r3, #4]
 800f290:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	881b      	ldrh	r3, [r3, #0]
 800f296:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 800f298:	68bb      	ldr	r3, [r7, #8]
 800f29a:	885b      	ldrh	r3, [r3, #2]
 800f29c:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	885b      	ldrh	r3, [r3, #2]
 800f2a2:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f2a8:	8b7b      	ldrh	r3, [r7, #26]
 800f2aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 800f2ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2ae:	009b      	lsls	r3, r3, #2
 800f2b0:	69fa      	ldr	r2, [r7, #28]
 800f2b2:	4413      	add	r3, r2
 800f2b4:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 800f2b6:	8b3b      	ldrh	r3, [r7, #24]
 800f2b8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 800f2ba:	68bb      	ldr	r3, [r7, #8]
 800f2bc:	685b      	ldr	r3, [r3, #4]
 800f2be:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 800f2c0:	f04f 0300 	mov.w	r3, #0
 800f2c4:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 800f2c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f2c8:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 800f2ca:	8afb      	ldrh	r3, [r7, #22]
 800f2cc:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 800f2ce:	e017      	b.n	800f300 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 800f2d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f2d2:	1d1a      	adds	r2, r3, #4
 800f2d4:	647a      	str	r2, [r7, #68]	@ 0x44
 800f2d6:	ed93 7a00 	vldr	s14, [r3]
 800f2da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f2dc:	edd3 7a00 	vldr	s15, [r3]
 800f2e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f2e4:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800f2e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f2ec:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 800f2f0:	8b3b      	ldrh	r3, [r7, #24]
 800f2f2:	009b      	lsls	r3, r3, #2
 800f2f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f2f6:	4413      	add	r3, r2
 800f2f8:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 800f2fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2fc:	3b01      	subs	r3, #1
 800f2fe:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 800f300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f302:	2b00      	cmp	r3, #0
 800f304:	d1e4      	bne.n	800f2d0 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 800f306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f308:	1d1a      	adds	r2, r3, #4
 800f30a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800f30c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f30e:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 800f310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f312:	3b01      	subs	r3, #1
 800f314:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 800f316:	8b3a      	ldrh	r2, [r7, #24]
 800f318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f31a:	1ad3      	subs	r3, r2, r3
 800f31c:	009b      	lsls	r3, r3, #2
 800f31e:	6a3a      	ldr	r2, [r7, #32]
 800f320:	4413      	add	r3, r2
 800f322:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 800f324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f326:	2b00      	cmp	r3, #0
 800f328:	d1ca      	bne.n	800f2c0 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 800f32a:	8b3b      	ldrh	r3, [r7, #24]
 800f32c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f32e:	4413      	add	r3, r2
 800f330:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 800f332:	8afb      	ldrh	r3, [r7, #22]
 800f334:	009b      	lsls	r3, r3, #2
 800f336:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f338:	4413      	add	r3, r2
 800f33a:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 800f33c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f33e:	3b01      	subs	r3, #1
 800f340:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 800f342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f344:	2b00      	cmp	r3, #0
 800f346:	d1b1      	bne.n	800f2ac <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800f348:	2300      	movs	r3, #0
 800f34a:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 800f34c:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800f350:	4618      	mov	r0, r3
 800f352:	374c      	adds	r7, #76	@ 0x4c
 800f354:	46bd      	mov	sp, r7
 800f356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f35a:	4770      	bx	lr

0800f35c <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800f35c:	b480      	push	{r7}
 800f35e:	b08b      	sub	sp, #44	@ 0x2c
 800f360:	af00      	add	r7, sp, #0
 800f362:	60f8      	str	r0, [r7, #12]
 800f364:	60b9      	str	r1, [r7, #8]
 800f366:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	685b      	ldr	r3, [r3, #4]
 800f36c:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800f36e:	68bb      	ldr	r3, [r7, #8]
 800f370:	685b      	ldr	r3, [r3, #4]
 800f372:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	685b      	ldr	r3, [r3, #4]
 800f378:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	881b      	ldrh	r3, [r3, #0]
 800f37e:	461a      	mov	r2, r3
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	885b      	ldrh	r3, [r3, #2]
 800f384:	fb02 f303 	mul.w	r3, r2, r3
 800f388:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800f38a:	697b      	ldr	r3, [r7, #20]
 800f38c:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800f38e:	e013      	b.n	800f3b8 <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 800f390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f392:	1d1a      	adds	r2, r3, #4
 800f394:	627a      	str	r2, [r7, #36]	@ 0x24
 800f396:	ed93 7a00 	vldr	s14, [r3]
 800f39a:	6a3b      	ldr	r3, [r7, #32]
 800f39c:	1d1a      	adds	r2, r3, #4
 800f39e:	623a      	str	r2, [r7, #32]
 800f3a0:	edd3 7a00 	vldr	s15, [r3]
 800f3a4:	69fb      	ldr	r3, [r7, #28]
 800f3a6:	1d1a      	adds	r2, r3, #4
 800f3a8:	61fa      	str	r2, [r7, #28]
 800f3aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f3ae:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800f3b2:	69bb      	ldr	r3, [r7, #24]
 800f3b4:	3b01      	subs	r3, #1
 800f3b6:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800f3b8:	69bb      	ldr	r3, [r7, #24]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d1e8      	bne.n	800f390 <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800f3be:	2300      	movs	r3, #0
 800f3c0:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800f3c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	372c      	adds	r7, #44	@ 0x2c
 800f3ca:	46bd      	mov	sp, r7
 800f3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d0:	4770      	bx	lr

0800f3d2 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800f3d2:	b480      	push	{r7}
 800f3d4:	b08b      	sub	sp, #44	@ 0x2c
 800f3d6:	af00      	add	r7, sp, #0
 800f3d8:	6078      	str	r0, [r7, #4]
 800f3da:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	685b      	ldr	r3, [r3, #4]
 800f3e0:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800f3e2:	683b      	ldr	r3, [r7, #0]
 800f3e4:	685b      	ldr	r3, [r3, #4]
 800f3e6:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	881b      	ldrh	r3, [r3, #0]
 800f3ec:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	885b      	ldrh	r3, [r3, #2]
 800f3f2:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 800f3f4:	89fb      	ldrh	r3, [r7, #14]
 800f3f6:	61bb      	str	r3, [r7, #24]
 800f3f8:	2300      	movs	r3, #0
 800f3fa:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 800f3fc:	697b      	ldr	r3, [r7, #20]
 800f3fe:	009b      	lsls	r3, r3, #2
 800f400:	693a      	ldr	r2, [r7, #16]
 800f402:	4413      	add	r3, r2
 800f404:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 800f406:	89bb      	ldrh	r3, [r7, #12]
 800f408:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 800f40a:	e00d      	b.n	800f428 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 800f40c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f40e:	1d1a      	adds	r2, r3, #4
 800f410:	627a      	str	r2, [r7, #36]	@ 0x24
 800f412:	681a      	ldr	r2, [r3, #0]
 800f414:	6a3b      	ldr	r3, [r7, #32]
 800f416:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 800f418:	89fb      	ldrh	r3, [r7, #14]
 800f41a:	009b      	lsls	r3, r3, #2
 800f41c:	6a3a      	ldr	r2, [r7, #32]
 800f41e:	4413      	add	r3, r2
 800f420:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 800f422:	69fb      	ldr	r3, [r7, #28]
 800f424:	3b01      	subs	r3, #1
 800f426:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 800f428:	69fb      	ldr	r3, [r7, #28]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d1ee      	bne.n	800f40c <arm_mat_trans_f32+0x3a>
      }

      i++;
 800f42e:	697b      	ldr	r3, [r7, #20]
 800f430:	3301      	adds	r3, #1
 800f432:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 800f434:	69bb      	ldr	r3, [r7, #24]
 800f436:	3b01      	subs	r3, #1
 800f438:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 800f43a:	69bb      	ldr	r3, [r7, #24]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d1dd      	bne.n	800f3fc <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800f440:	2300      	movs	r3, #0
 800f442:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 800f444:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f448:	4618      	mov	r0, r3
 800f44a:	372c      	adds	r7, #44	@ 0x2c
 800f44c:	46bd      	mov	sp, r7
 800f44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f452:	4770      	bx	lr

0800f454 <memset>:
 800f454:	4402      	add	r2, r0
 800f456:	4603      	mov	r3, r0
 800f458:	4293      	cmp	r3, r2
 800f45a:	d100      	bne.n	800f45e <memset+0xa>
 800f45c:	4770      	bx	lr
 800f45e:	f803 1b01 	strb.w	r1, [r3], #1
 800f462:	e7f9      	b.n	800f458 <memset+0x4>

0800f464 <__errno>:
 800f464:	4b01      	ldr	r3, [pc, #4]	@ (800f46c <__errno+0x8>)
 800f466:	6818      	ldr	r0, [r3, #0]
 800f468:	4770      	bx	lr
 800f46a:	bf00      	nop
 800f46c:	20000270 	.word	0x20000270

0800f470 <__libc_init_array>:
 800f470:	b570      	push	{r4, r5, r6, lr}
 800f472:	4d0d      	ldr	r5, [pc, #52]	@ (800f4a8 <__libc_init_array+0x38>)
 800f474:	4c0d      	ldr	r4, [pc, #52]	@ (800f4ac <__libc_init_array+0x3c>)
 800f476:	1b64      	subs	r4, r4, r5
 800f478:	10a4      	asrs	r4, r4, #2
 800f47a:	2600      	movs	r6, #0
 800f47c:	42a6      	cmp	r6, r4
 800f47e:	d109      	bne.n	800f494 <__libc_init_array+0x24>
 800f480:	4d0b      	ldr	r5, [pc, #44]	@ (800f4b0 <__libc_init_array+0x40>)
 800f482:	4c0c      	ldr	r4, [pc, #48]	@ (800f4b4 <__libc_init_array+0x44>)
 800f484:	f001 fe92 	bl	80111ac <_init>
 800f488:	1b64      	subs	r4, r4, r5
 800f48a:	10a4      	asrs	r4, r4, #2
 800f48c:	2600      	movs	r6, #0
 800f48e:	42a6      	cmp	r6, r4
 800f490:	d105      	bne.n	800f49e <__libc_init_array+0x2e>
 800f492:	bd70      	pop	{r4, r5, r6, pc}
 800f494:	f855 3b04 	ldr.w	r3, [r5], #4
 800f498:	4798      	blx	r3
 800f49a:	3601      	adds	r6, #1
 800f49c:	e7ee      	b.n	800f47c <__libc_init_array+0xc>
 800f49e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f4a2:	4798      	blx	r3
 800f4a4:	3601      	adds	r6, #1
 800f4a6:	e7f2      	b.n	800f48e <__libc_init_array+0x1e>
 800f4a8:	08011628 	.word	0x08011628
 800f4ac:	08011628 	.word	0x08011628
 800f4b0:	08011628 	.word	0x08011628
 800f4b4:	0801162c 	.word	0x0801162c

0800f4b8 <memcpy>:
 800f4b8:	440a      	add	r2, r1
 800f4ba:	4291      	cmp	r1, r2
 800f4bc:	f100 33ff 	add.w	r3, r0, #4294967295
 800f4c0:	d100      	bne.n	800f4c4 <memcpy+0xc>
 800f4c2:	4770      	bx	lr
 800f4c4:	b510      	push	{r4, lr}
 800f4c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f4ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f4ce:	4291      	cmp	r1, r2
 800f4d0:	d1f9      	bne.n	800f4c6 <memcpy+0xe>
 800f4d2:	bd10      	pop	{r4, pc}

0800f4d4 <pow>:
 800f4d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4d6:	ed2d 8b02 	vpush	{d8}
 800f4da:	eeb0 8a40 	vmov.f32	s16, s0
 800f4de:	eef0 8a60 	vmov.f32	s17, s1
 800f4e2:	ec55 4b11 	vmov	r4, r5, d1
 800f4e6:	f000 fa7f 	bl	800f9e8 <__ieee754_pow>
 800f4ea:	4622      	mov	r2, r4
 800f4ec:	462b      	mov	r3, r5
 800f4ee:	4620      	mov	r0, r4
 800f4f0:	4629      	mov	r1, r5
 800f4f2:	ec57 6b10 	vmov	r6, r7, d0
 800f4f6:	f7f1 fae5 	bl	8000ac4 <__aeabi_dcmpun>
 800f4fa:	2800      	cmp	r0, #0
 800f4fc:	d13b      	bne.n	800f576 <pow+0xa2>
 800f4fe:	ec51 0b18 	vmov	r0, r1, d8
 800f502:	2200      	movs	r2, #0
 800f504:	2300      	movs	r3, #0
 800f506:	f7f1 faab 	bl	8000a60 <__aeabi_dcmpeq>
 800f50a:	b1b8      	cbz	r0, 800f53c <pow+0x68>
 800f50c:	2200      	movs	r2, #0
 800f50e:	2300      	movs	r3, #0
 800f510:	4620      	mov	r0, r4
 800f512:	4629      	mov	r1, r5
 800f514:	f7f1 faa4 	bl	8000a60 <__aeabi_dcmpeq>
 800f518:	2800      	cmp	r0, #0
 800f51a:	d146      	bne.n	800f5aa <pow+0xd6>
 800f51c:	ec45 4b10 	vmov	d0, r4, r5
 800f520:	f000 f950 	bl	800f7c4 <finite>
 800f524:	b338      	cbz	r0, 800f576 <pow+0xa2>
 800f526:	2200      	movs	r2, #0
 800f528:	2300      	movs	r3, #0
 800f52a:	4620      	mov	r0, r4
 800f52c:	4629      	mov	r1, r5
 800f52e:	f7f1 faa1 	bl	8000a74 <__aeabi_dcmplt>
 800f532:	b300      	cbz	r0, 800f576 <pow+0xa2>
 800f534:	f7ff ff96 	bl	800f464 <__errno>
 800f538:	2322      	movs	r3, #34	@ 0x22
 800f53a:	e01b      	b.n	800f574 <pow+0xa0>
 800f53c:	ec47 6b10 	vmov	d0, r6, r7
 800f540:	f000 f940 	bl	800f7c4 <finite>
 800f544:	b9e0      	cbnz	r0, 800f580 <pow+0xac>
 800f546:	eeb0 0a48 	vmov.f32	s0, s16
 800f54a:	eef0 0a68 	vmov.f32	s1, s17
 800f54e:	f000 f939 	bl	800f7c4 <finite>
 800f552:	b1a8      	cbz	r0, 800f580 <pow+0xac>
 800f554:	ec45 4b10 	vmov	d0, r4, r5
 800f558:	f000 f934 	bl	800f7c4 <finite>
 800f55c:	b180      	cbz	r0, 800f580 <pow+0xac>
 800f55e:	4632      	mov	r2, r6
 800f560:	463b      	mov	r3, r7
 800f562:	4630      	mov	r0, r6
 800f564:	4639      	mov	r1, r7
 800f566:	f7f1 faad 	bl	8000ac4 <__aeabi_dcmpun>
 800f56a:	2800      	cmp	r0, #0
 800f56c:	d0e2      	beq.n	800f534 <pow+0x60>
 800f56e:	f7ff ff79 	bl	800f464 <__errno>
 800f572:	2321      	movs	r3, #33	@ 0x21
 800f574:	6003      	str	r3, [r0, #0]
 800f576:	ecbd 8b02 	vpop	{d8}
 800f57a:	ec47 6b10 	vmov	d0, r6, r7
 800f57e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f580:	2200      	movs	r2, #0
 800f582:	2300      	movs	r3, #0
 800f584:	4630      	mov	r0, r6
 800f586:	4639      	mov	r1, r7
 800f588:	f7f1 fa6a 	bl	8000a60 <__aeabi_dcmpeq>
 800f58c:	2800      	cmp	r0, #0
 800f58e:	d0f2      	beq.n	800f576 <pow+0xa2>
 800f590:	eeb0 0a48 	vmov.f32	s0, s16
 800f594:	eef0 0a68 	vmov.f32	s1, s17
 800f598:	f000 f914 	bl	800f7c4 <finite>
 800f59c:	2800      	cmp	r0, #0
 800f59e:	d0ea      	beq.n	800f576 <pow+0xa2>
 800f5a0:	ec45 4b10 	vmov	d0, r4, r5
 800f5a4:	f000 f90e 	bl	800f7c4 <finite>
 800f5a8:	e7c3      	b.n	800f532 <pow+0x5e>
 800f5aa:	4f01      	ldr	r7, [pc, #4]	@ (800f5b0 <pow+0xdc>)
 800f5ac:	2600      	movs	r6, #0
 800f5ae:	e7e2      	b.n	800f576 <pow+0xa2>
 800f5b0:	3ff00000 	.word	0x3ff00000

0800f5b4 <sqrt>:
 800f5b4:	b538      	push	{r3, r4, r5, lr}
 800f5b6:	ed2d 8b02 	vpush	{d8}
 800f5ba:	ec55 4b10 	vmov	r4, r5, d0
 800f5be:	f000 f913 	bl	800f7e8 <__ieee754_sqrt>
 800f5c2:	4622      	mov	r2, r4
 800f5c4:	462b      	mov	r3, r5
 800f5c6:	4620      	mov	r0, r4
 800f5c8:	4629      	mov	r1, r5
 800f5ca:	eeb0 8a40 	vmov.f32	s16, s0
 800f5ce:	eef0 8a60 	vmov.f32	s17, s1
 800f5d2:	f7f1 fa77 	bl	8000ac4 <__aeabi_dcmpun>
 800f5d6:	b990      	cbnz	r0, 800f5fe <sqrt+0x4a>
 800f5d8:	2200      	movs	r2, #0
 800f5da:	2300      	movs	r3, #0
 800f5dc:	4620      	mov	r0, r4
 800f5de:	4629      	mov	r1, r5
 800f5e0:	f7f1 fa48 	bl	8000a74 <__aeabi_dcmplt>
 800f5e4:	b158      	cbz	r0, 800f5fe <sqrt+0x4a>
 800f5e6:	f7ff ff3d 	bl	800f464 <__errno>
 800f5ea:	2321      	movs	r3, #33	@ 0x21
 800f5ec:	6003      	str	r3, [r0, #0]
 800f5ee:	2200      	movs	r2, #0
 800f5f0:	2300      	movs	r3, #0
 800f5f2:	4610      	mov	r0, r2
 800f5f4:	4619      	mov	r1, r3
 800f5f6:	f7f1 f8f5 	bl	80007e4 <__aeabi_ddiv>
 800f5fa:	ec41 0b18 	vmov	d8, r0, r1
 800f5fe:	eeb0 0a48 	vmov.f32	s0, s16
 800f602:	eef0 0a68 	vmov.f32	s1, s17
 800f606:	ecbd 8b02 	vpop	{d8}
 800f60a:	bd38      	pop	{r3, r4, r5, pc}

0800f60c <acosf>:
 800f60c:	b508      	push	{r3, lr}
 800f60e:	ed2d 8b02 	vpush	{d8}
 800f612:	eeb0 8a40 	vmov.f32	s16, s0
 800f616:	f000 ffd9 	bl	80105cc <__ieee754_acosf>
 800f61a:	eeb4 8a48 	vcmp.f32	s16, s16
 800f61e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f622:	eef0 8a40 	vmov.f32	s17, s0
 800f626:	d615      	bvs.n	800f654 <acosf+0x48>
 800f628:	eeb0 0a48 	vmov.f32	s0, s16
 800f62c:	f000 f87c 	bl	800f728 <fabsf>
 800f630:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f634:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800f638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f63c:	dd0a      	ble.n	800f654 <acosf+0x48>
 800f63e:	f7ff ff11 	bl	800f464 <__errno>
 800f642:	ecbd 8b02 	vpop	{d8}
 800f646:	2321      	movs	r3, #33	@ 0x21
 800f648:	6003      	str	r3, [r0, #0]
 800f64a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800f64e:	4804      	ldr	r0, [pc, #16]	@ (800f660 <acosf+0x54>)
 800f650:	f000 b8c4 	b.w	800f7dc <nanf>
 800f654:	eeb0 0a68 	vmov.f32	s0, s17
 800f658:	ecbd 8b02 	vpop	{d8}
 800f65c:	bd08      	pop	{r3, pc}
 800f65e:	bf00      	nop
 800f660:	08011208 	.word	0x08011208

0800f664 <sqrtf>:
 800f664:	b508      	push	{r3, lr}
 800f666:	ed2d 8b02 	vpush	{d8}
 800f66a:	eeb0 8a40 	vmov.f32	s16, s0
 800f66e:	f000 f991 	bl	800f994 <__ieee754_sqrtf>
 800f672:	eeb4 8a48 	vcmp.f32	s16, s16
 800f676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f67a:	d60c      	bvs.n	800f696 <sqrtf+0x32>
 800f67c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800f69c <sqrtf+0x38>
 800f680:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f688:	d505      	bpl.n	800f696 <sqrtf+0x32>
 800f68a:	f7ff feeb 	bl	800f464 <__errno>
 800f68e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800f692:	2321      	movs	r3, #33	@ 0x21
 800f694:	6003      	str	r3, [r0, #0]
 800f696:	ecbd 8b02 	vpop	{d8}
 800f69a:	bd08      	pop	{r3, pc}
 800f69c:	00000000 	.word	0x00000000

0800f6a0 <cosf>:
 800f6a0:	ee10 3a10 	vmov	r3, s0
 800f6a4:	b507      	push	{r0, r1, r2, lr}
 800f6a6:	4a1e      	ldr	r2, [pc, #120]	@ (800f720 <cosf+0x80>)
 800f6a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f6ac:	4293      	cmp	r3, r2
 800f6ae:	d806      	bhi.n	800f6be <cosf+0x1e>
 800f6b0:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800f724 <cosf+0x84>
 800f6b4:	b003      	add	sp, #12
 800f6b6:	f85d eb04 	ldr.w	lr, [sp], #4
 800f6ba:	f000 bee7 	b.w	801048c <__kernel_cosf>
 800f6be:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f6c2:	d304      	bcc.n	800f6ce <cosf+0x2e>
 800f6c4:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f6c8:	b003      	add	sp, #12
 800f6ca:	f85d fb04 	ldr.w	pc, [sp], #4
 800f6ce:	4668      	mov	r0, sp
 800f6d0:	f001 f872 	bl	80107b8 <__ieee754_rem_pio2f>
 800f6d4:	f000 0003 	and.w	r0, r0, #3
 800f6d8:	2801      	cmp	r0, #1
 800f6da:	d009      	beq.n	800f6f0 <cosf+0x50>
 800f6dc:	2802      	cmp	r0, #2
 800f6de:	d010      	beq.n	800f702 <cosf+0x62>
 800f6e0:	b9b0      	cbnz	r0, 800f710 <cosf+0x70>
 800f6e2:	eddd 0a01 	vldr	s1, [sp, #4]
 800f6e6:	ed9d 0a00 	vldr	s0, [sp]
 800f6ea:	f000 fecf 	bl	801048c <__kernel_cosf>
 800f6ee:	e7eb      	b.n	800f6c8 <cosf+0x28>
 800f6f0:	eddd 0a01 	vldr	s1, [sp, #4]
 800f6f4:	ed9d 0a00 	vldr	s0, [sp]
 800f6f8:	f000 ff20 	bl	801053c <__kernel_sinf>
 800f6fc:	eeb1 0a40 	vneg.f32	s0, s0
 800f700:	e7e2      	b.n	800f6c8 <cosf+0x28>
 800f702:	eddd 0a01 	vldr	s1, [sp, #4]
 800f706:	ed9d 0a00 	vldr	s0, [sp]
 800f70a:	f000 febf 	bl	801048c <__kernel_cosf>
 800f70e:	e7f5      	b.n	800f6fc <cosf+0x5c>
 800f710:	eddd 0a01 	vldr	s1, [sp, #4]
 800f714:	ed9d 0a00 	vldr	s0, [sp]
 800f718:	2001      	movs	r0, #1
 800f71a:	f000 ff0f 	bl	801053c <__kernel_sinf>
 800f71e:	e7d3      	b.n	800f6c8 <cosf+0x28>
 800f720:	3f490fd8 	.word	0x3f490fd8
 800f724:	00000000 	.word	0x00000000

0800f728 <fabsf>:
 800f728:	ee10 3a10 	vmov	r3, s0
 800f72c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f730:	ee00 3a10 	vmov	s0, r3
 800f734:	4770      	bx	lr
	...

0800f738 <sinf>:
 800f738:	ee10 3a10 	vmov	r3, s0
 800f73c:	b507      	push	{r0, r1, r2, lr}
 800f73e:	4a1f      	ldr	r2, [pc, #124]	@ (800f7bc <sinf+0x84>)
 800f740:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f744:	4293      	cmp	r3, r2
 800f746:	d807      	bhi.n	800f758 <sinf+0x20>
 800f748:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800f7c0 <sinf+0x88>
 800f74c:	2000      	movs	r0, #0
 800f74e:	b003      	add	sp, #12
 800f750:	f85d eb04 	ldr.w	lr, [sp], #4
 800f754:	f000 bef2 	b.w	801053c <__kernel_sinf>
 800f758:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f75c:	d304      	bcc.n	800f768 <sinf+0x30>
 800f75e:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f762:	b003      	add	sp, #12
 800f764:	f85d fb04 	ldr.w	pc, [sp], #4
 800f768:	4668      	mov	r0, sp
 800f76a:	f001 f825 	bl	80107b8 <__ieee754_rem_pio2f>
 800f76e:	f000 0003 	and.w	r0, r0, #3
 800f772:	2801      	cmp	r0, #1
 800f774:	d00a      	beq.n	800f78c <sinf+0x54>
 800f776:	2802      	cmp	r0, #2
 800f778:	d00f      	beq.n	800f79a <sinf+0x62>
 800f77a:	b9c0      	cbnz	r0, 800f7ae <sinf+0x76>
 800f77c:	eddd 0a01 	vldr	s1, [sp, #4]
 800f780:	ed9d 0a00 	vldr	s0, [sp]
 800f784:	2001      	movs	r0, #1
 800f786:	f000 fed9 	bl	801053c <__kernel_sinf>
 800f78a:	e7ea      	b.n	800f762 <sinf+0x2a>
 800f78c:	eddd 0a01 	vldr	s1, [sp, #4]
 800f790:	ed9d 0a00 	vldr	s0, [sp]
 800f794:	f000 fe7a 	bl	801048c <__kernel_cosf>
 800f798:	e7e3      	b.n	800f762 <sinf+0x2a>
 800f79a:	eddd 0a01 	vldr	s1, [sp, #4]
 800f79e:	ed9d 0a00 	vldr	s0, [sp]
 800f7a2:	2001      	movs	r0, #1
 800f7a4:	f000 feca 	bl	801053c <__kernel_sinf>
 800f7a8:	eeb1 0a40 	vneg.f32	s0, s0
 800f7ac:	e7d9      	b.n	800f762 <sinf+0x2a>
 800f7ae:	eddd 0a01 	vldr	s1, [sp, #4]
 800f7b2:	ed9d 0a00 	vldr	s0, [sp]
 800f7b6:	f000 fe69 	bl	801048c <__kernel_cosf>
 800f7ba:	e7f5      	b.n	800f7a8 <sinf+0x70>
 800f7bc:	3f490fd8 	.word	0x3f490fd8
 800f7c0:	00000000 	.word	0x00000000

0800f7c4 <finite>:
 800f7c4:	b082      	sub	sp, #8
 800f7c6:	ed8d 0b00 	vstr	d0, [sp]
 800f7ca:	9801      	ldr	r0, [sp, #4]
 800f7cc:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800f7d0:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800f7d4:	0fc0      	lsrs	r0, r0, #31
 800f7d6:	b002      	add	sp, #8
 800f7d8:	4770      	bx	lr
	...

0800f7dc <nanf>:
 800f7dc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f7e4 <nanf+0x8>
 800f7e0:	4770      	bx	lr
 800f7e2:	bf00      	nop
 800f7e4:	7fc00000 	.word	0x7fc00000

0800f7e8 <__ieee754_sqrt>:
 800f7e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7ec:	4a66      	ldr	r2, [pc, #408]	@ (800f988 <__ieee754_sqrt+0x1a0>)
 800f7ee:	ec55 4b10 	vmov	r4, r5, d0
 800f7f2:	43aa      	bics	r2, r5
 800f7f4:	462b      	mov	r3, r5
 800f7f6:	4621      	mov	r1, r4
 800f7f8:	d110      	bne.n	800f81c <__ieee754_sqrt+0x34>
 800f7fa:	4622      	mov	r2, r4
 800f7fc:	4620      	mov	r0, r4
 800f7fe:	4629      	mov	r1, r5
 800f800:	f7f0 fec6 	bl	8000590 <__aeabi_dmul>
 800f804:	4602      	mov	r2, r0
 800f806:	460b      	mov	r3, r1
 800f808:	4620      	mov	r0, r4
 800f80a:	4629      	mov	r1, r5
 800f80c:	f7f0 fd0a 	bl	8000224 <__adddf3>
 800f810:	4604      	mov	r4, r0
 800f812:	460d      	mov	r5, r1
 800f814:	ec45 4b10 	vmov	d0, r4, r5
 800f818:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f81c:	2d00      	cmp	r5, #0
 800f81e:	dc0e      	bgt.n	800f83e <__ieee754_sqrt+0x56>
 800f820:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800f824:	4322      	orrs	r2, r4
 800f826:	d0f5      	beq.n	800f814 <__ieee754_sqrt+0x2c>
 800f828:	b19d      	cbz	r5, 800f852 <__ieee754_sqrt+0x6a>
 800f82a:	4622      	mov	r2, r4
 800f82c:	4620      	mov	r0, r4
 800f82e:	4629      	mov	r1, r5
 800f830:	f7f0 fcf6 	bl	8000220 <__aeabi_dsub>
 800f834:	4602      	mov	r2, r0
 800f836:	460b      	mov	r3, r1
 800f838:	f7f0 ffd4 	bl	80007e4 <__aeabi_ddiv>
 800f83c:	e7e8      	b.n	800f810 <__ieee754_sqrt+0x28>
 800f83e:	152a      	asrs	r2, r5, #20
 800f840:	d115      	bne.n	800f86e <__ieee754_sqrt+0x86>
 800f842:	2000      	movs	r0, #0
 800f844:	e009      	b.n	800f85a <__ieee754_sqrt+0x72>
 800f846:	0acb      	lsrs	r3, r1, #11
 800f848:	3a15      	subs	r2, #21
 800f84a:	0549      	lsls	r1, r1, #21
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d0fa      	beq.n	800f846 <__ieee754_sqrt+0x5e>
 800f850:	e7f7      	b.n	800f842 <__ieee754_sqrt+0x5a>
 800f852:	462a      	mov	r2, r5
 800f854:	e7fa      	b.n	800f84c <__ieee754_sqrt+0x64>
 800f856:	005b      	lsls	r3, r3, #1
 800f858:	3001      	adds	r0, #1
 800f85a:	02dc      	lsls	r4, r3, #11
 800f85c:	d5fb      	bpl.n	800f856 <__ieee754_sqrt+0x6e>
 800f85e:	1e44      	subs	r4, r0, #1
 800f860:	1b12      	subs	r2, r2, r4
 800f862:	f1c0 0420 	rsb	r4, r0, #32
 800f866:	fa21 f404 	lsr.w	r4, r1, r4
 800f86a:	4323      	orrs	r3, r4
 800f86c:	4081      	lsls	r1, r0
 800f86e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f872:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800f876:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f87a:	07d2      	lsls	r2, r2, #31
 800f87c:	bf5c      	itt	pl
 800f87e:	005b      	lslpl	r3, r3, #1
 800f880:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800f884:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f888:	bf58      	it	pl
 800f88a:	0049      	lslpl	r1, r1, #1
 800f88c:	2600      	movs	r6, #0
 800f88e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800f892:	107f      	asrs	r7, r7, #1
 800f894:	0049      	lsls	r1, r1, #1
 800f896:	2016      	movs	r0, #22
 800f898:	4632      	mov	r2, r6
 800f89a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800f89e:	1915      	adds	r5, r2, r4
 800f8a0:	429d      	cmp	r5, r3
 800f8a2:	bfde      	ittt	le
 800f8a4:	192a      	addle	r2, r5, r4
 800f8a6:	1b5b      	suble	r3, r3, r5
 800f8a8:	1936      	addle	r6, r6, r4
 800f8aa:	0fcd      	lsrs	r5, r1, #31
 800f8ac:	3801      	subs	r0, #1
 800f8ae:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800f8b2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f8b6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800f8ba:	d1f0      	bne.n	800f89e <__ieee754_sqrt+0xb6>
 800f8bc:	4605      	mov	r5, r0
 800f8be:	2420      	movs	r4, #32
 800f8c0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800f8c4:	4293      	cmp	r3, r2
 800f8c6:	eb0c 0e00 	add.w	lr, ip, r0
 800f8ca:	dc02      	bgt.n	800f8d2 <__ieee754_sqrt+0xea>
 800f8cc:	d113      	bne.n	800f8f6 <__ieee754_sqrt+0x10e>
 800f8ce:	458e      	cmp	lr, r1
 800f8d0:	d811      	bhi.n	800f8f6 <__ieee754_sqrt+0x10e>
 800f8d2:	f1be 0f00 	cmp.w	lr, #0
 800f8d6:	eb0e 000c 	add.w	r0, lr, ip
 800f8da:	da3f      	bge.n	800f95c <__ieee754_sqrt+0x174>
 800f8dc:	2800      	cmp	r0, #0
 800f8de:	db3d      	blt.n	800f95c <__ieee754_sqrt+0x174>
 800f8e0:	f102 0801 	add.w	r8, r2, #1
 800f8e4:	1a9b      	subs	r3, r3, r2
 800f8e6:	458e      	cmp	lr, r1
 800f8e8:	bf88      	it	hi
 800f8ea:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800f8ee:	eba1 010e 	sub.w	r1, r1, lr
 800f8f2:	4465      	add	r5, ip
 800f8f4:	4642      	mov	r2, r8
 800f8f6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800f8fa:	3c01      	subs	r4, #1
 800f8fc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800f900:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f904:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800f908:	d1dc      	bne.n	800f8c4 <__ieee754_sqrt+0xdc>
 800f90a:	4319      	orrs	r1, r3
 800f90c:	d01b      	beq.n	800f946 <__ieee754_sqrt+0x15e>
 800f90e:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800f98c <__ieee754_sqrt+0x1a4>
 800f912:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 800f990 <__ieee754_sqrt+0x1a8>
 800f916:	e9da 0100 	ldrd	r0, r1, [sl]
 800f91a:	e9db 2300 	ldrd	r2, r3, [fp]
 800f91e:	f7f0 fc7f 	bl	8000220 <__aeabi_dsub>
 800f922:	e9da 8900 	ldrd	r8, r9, [sl]
 800f926:	4602      	mov	r2, r0
 800f928:	460b      	mov	r3, r1
 800f92a:	4640      	mov	r0, r8
 800f92c:	4649      	mov	r1, r9
 800f92e:	f7f1 f8ab 	bl	8000a88 <__aeabi_dcmple>
 800f932:	b140      	cbz	r0, 800f946 <__ieee754_sqrt+0x15e>
 800f934:	f1b5 3fff 	cmp.w	r5, #4294967295
 800f938:	e9da 0100 	ldrd	r0, r1, [sl]
 800f93c:	e9db 2300 	ldrd	r2, r3, [fp]
 800f940:	d10e      	bne.n	800f960 <__ieee754_sqrt+0x178>
 800f942:	3601      	adds	r6, #1
 800f944:	4625      	mov	r5, r4
 800f946:	1073      	asrs	r3, r6, #1
 800f948:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800f94c:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800f950:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800f954:	086b      	lsrs	r3, r5, #1
 800f956:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 800f95a:	e759      	b.n	800f810 <__ieee754_sqrt+0x28>
 800f95c:	4690      	mov	r8, r2
 800f95e:	e7c1      	b.n	800f8e4 <__ieee754_sqrt+0xfc>
 800f960:	f7f0 fc60 	bl	8000224 <__adddf3>
 800f964:	e9da 8900 	ldrd	r8, r9, [sl]
 800f968:	4602      	mov	r2, r0
 800f96a:	460b      	mov	r3, r1
 800f96c:	4640      	mov	r0, r8
 800f96e:	4649      	mov	r1, r9
 800f970:	f7f1 f880 	bl	8000a74 <__aeabi_dcmplt>
 800f974:	b120      	cbz	r0, 800f980 <__ieee754_sqrt+0x198>
 800f976:	1cab      	adds	r3, r5, #2
 800f978:	bf08      	it	eq
 800f97a:	3601      	addeq	r6, #1
 800f97c:	3502      	adds	r5, #2
 800f97e:	e7e2      	b.n	800f946 <__ieee754_sqrt+0x15e>
 800f980:	1c6b      	adds	r3, r5, #1
 800f982:	f023 0501 	bic.w	r5, r3, #1
 800f986:	e7de      	b.n	800f946 <__ieee754_sqrt+0x15e>
 800f988:	7ff00000 	.word	0x7ff00000
 800f98c:	08011218 	.word	0x08011218
 800f990:	08011210 	.word	0x08011210

0800f994 <__ieee754_sqrtf>:
 800f994:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f998:	4770      	bx	lr
	...

0800f99c <roundf>:
 800f99c:	ee10 0a10 	vmov	r0, s0
 800f9a0:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800f9a4:	3a7f      	subs	r2, #127	@ 0x7f
 800f9a6:	2a16      	cmp	r2, #22
 800f9a8:	dc15      	bgt.n	800f9d6 <roundf+0x3a>
 800f9aa:	2a00      	cmp	r2, #0
 800f9ac:	da08      	bge.n	800f9c0 <roundf+0x24>
 800f9ae:	3201      	adds	r2, #1
 800f9b0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800f9b4:	d101      	bne.n	800f9ba <roundf+0x1e>
 800f9b6:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 800f9ba:	ee00 3a10 	vmov	s0, r3
 800f9be:	4770      	bx	lr
 800f9c0:	4907      	ldr	r1, [pc, #28]	@ (800f9e0 <roundf+0x44>)
 800f9c2:	4111      	asrs	r1, r2
 800f9c4:	4201      	tst	r1, r0
 800f9c6:	d0fa      	beq.n	800f9be <roundf+0x22>
 800f9c8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800f9cc:	4113      	asrs	r3, r2
 800f9ce:	4403      	add	r3, r0
 800f9d0:	ea23 0301 	bic.w	r3, r3, r1
 800f9d4:	e7f1      	b.n	800f9ba <roundf+0x1e>
 800f9d6:	2a80      	cmp	r2, #128	@ 0x80
 800f9d8:	d1f1      	bne.n	800f9be <roundf+0x22>
 800f9da:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f9de:	4770      	bx	lr
 800f9e0:	007fffff 	.word	0x007fffff
 800f9e4:	00000000 	.word	0x00000000

0800f9e8 <__ieee754_pow>:
 800f9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9ec:	b091      	sub	sp, #68	@ 0x44
 800f9ee:	ed8d 1b00 	vstr	d1, [sp]
 800f9f2:	e9dd 1900 	ldrd	r1, r9, [sp]
 800f9f6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800f9fa:	ea5a 0001 	orrs.w	r0, sl, r1
 800f9fe:	ec57 6b10 	vmov	r6, r7, d0
 800fa02:	d113      	bne.n	800fa2c <__ieee754_pow+0x44>
 800fa04:	19b3      	adds	r3, r6, r6
 800fa06:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800fa0a:	4152      	adcs	r2, r2
 800fa0c:	4298      	cmp	r0, r3
 800fa0e:	4b9a      	ldr	r3, [pc, #616]	@ (800fc78 <__ieee754_pow+0x290>)
 800fa10:	4193      	sbcs	r3, r2
 800fa12:	f080 84ee 	bcs.w	80103f2 <__ieee754_pow+0xa0a>
 800fa16:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fa1a:	4630      	mov	r0, r6
 800fa1c:	4639      	mov	r1, r7
 800fa1e:	f7f0 fc01 	bl	8000224 <__adddf3>
 800fa22:	ec41 0b10 	vmov	d0, r0, r1
 800fa26:	b011      	add	sp, #68	@ 0x44
 800fa28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa2c:	4a93      	ldr	r2, [pc, #588]	@ (800fc7c <__ieee754_pow+0x294>)
 800fa2e:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 800fa32:	4295      	cmp	r5, r2
 800fa34:	46b8      	mov	r8, r7
 800fa36:	4633      	mov	r3, r6
 800fa38:	d80a      	bhi.n	800fa50 <__ieee754_pow+0x68>
 800fa3a:	d104      	bne.n	800fa46 <__ieee754_pow+0x5e>
 800fa3c:	2e00      	cmp	r6, #0
 800fa3e:	d1ea      	bne.n	800fa16 <__ieee754_pow+0x2e>
 800fa40:	45aa      	cmp	sl, r5
 800fa42:	d8e8      	bhi.n	800fa16 <__ieee754_pow+0x2e>
 800fa44:	e001      	b.n	800fa4a <__ieee754_pow+0x62>
 800fa46:	4592      	cmp	sl, r2
 800fa48:	d802      	bhi.n	800fa50 <__ieee754_pow+0x68>
 800fa4a:	4592      	cmp	sl, r2
 800fa4c:	d10f      	bne.n	800fa6e <__ieee754_pow+0x86>
 800fa4e:	b171      	cbz	r1, 800fa6e <__ieee754_pow+0x86>
 800fa50:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800fa54:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800fa58:	ea58 0803 	orrs.w	r8, r8, r3
 800fa5c:	d1db      	bne.n	800fa16 <__ieee754_pow+0x2e>
 800fa5e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fa62:	18db      	adds	r3, r3, r3
 800fa64:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800fa68:	4152      	adcs	r2, r2
 800fa6a:	4598      	cmp	r8, r3
 800fa6c:	e7cf      	b.n	800fa0e <__ieee754_pow+0x26>
 800fa6e:	f1b8 0f00 	cmp.w	r8, #0
 800fa72:	46ab      	mov	fp, r5
 800fa74:	da43      	bge.n	800fafe <__ieee754_pow+0x116>
 800fa76:	4a82      	ldr	r2, [pc, #520]	@ (800fc80 <__ieee754_pow+0x298>)
 800fa78:	4592      	cmp	sl, r2
 800fa7a:	d856      	bhi.n	800fb2a <__ieee754_pow+0x142>
 800fa7c:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800fa80:	4592      	cmp	sl, r2
 800fa82:	f240 84c5 	bls.w	8010410 <__ieee754_pow+0xa28>
 800fa86:	ea4f 522a 	mov.w	r2, sl, asr #20
 800fa8a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800fa8e:	2a14      	cmp	r2, #20
 800fa90:	dd18      	ble.n	800fac4 <__ieee754_pow+0xdc>
 800fa92:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800fa96:	fa21 f402 	lsr.w	r4, r1, r2
 800fa9a:	fa04 f202 	lsl.w	r2, r4, r2
 800fa9e:	428a      	cmp	r2, r1
 800faa0:	f040 84b6 	bne.w	8010410 <__ieee754_pow+0xa28>
 800faa4:	f004 0401 	and.w	r4, r4, #1
 800faa8:	f1c4 0402 	rsb	r4, r4, #2
 800faac:	2900      	cmp	r1, #0
 800faae:	d159      	bne.n	800fb64 <__ieee754_pow+0x17c>
 800fab0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800fab4:	d148      	bne.n	800fb48 <__ieee754_pow+0x160>
 800fab6:	4632      	mov	r2, r6
 800fab8:	463b      	mov	r3, r7
 800faba:	4630      	mov	r0, r6
 800fabc:	4639      	mov	r1, r7
 800fabe:	f7f0 fd67 	bl	8000590 <__aeabi_dmul>
 800fac2:	e7ae      	b.n	800fa22 <__ieee754_pow+0x3a>
 800fac4:	2900      	cmp	r1, #0
 800fac6:	d14c      	bne.n	800fb62 <__ieee754_pow+0x17a>
 800fac8:	f1c2 0214 	rsb	r2, r2, #20
 800facc:	fa4a f402 	asr.w	r4, sl, r2
 800fad0:	fa04 f202 	lsl.w	r2, r4, r2
 800fad4:	4552      	cmp	r2, sl
 800fad6:	f040 8498 	bne.w	801040a <__ieee754_pow+0xa22>
 800fada:	f004 0401 	and.w	r4, r4, #1
 800fade:	f1c4 0402 	rsb	r4, r4, #2
 800fae2:	4a68      	ldr	r2, [pc, #416]	@ (800fc84 <__ieee754_pow+0x29c>)
 800fae4:	4592      	cmp	sl, r2
 800fae6:	d1e3      	bne.n	800fab0 <__ieee754_pow+0xc8>
 800fae8:	f1b9 0f00 	cmp.w	r9, #0
 800faec:	f280 8489 	bge.w	8010402 <__ieee754_pow+0xa1a>
 800faf0:	4964      	ldr	r1, [pc, #400]	@ (800fc84 <__ieee754_pow+0x29c>)
 800faf2:	4632      	mov	r2, r6
 800faf4:	463b      	mov	r3, r7
 800faf6:	2000      	movs	r0, #0
 800faf8:	f7f0 fe74 	bl	80007e4 <__aeabi_ddiv>
 800fafc:	e791      	b.n	800fa22 <__ieee754_pow+0x3a>
 800fafe:	2400      	movs	r4, #0
 800fb00:	bb81      	cbnz	r1, 800fb64 <__ieee754_pow+0x17c>
 800fb02:	4a5e      	ldr	r2, [pc, #376]	@ (800fc7c <__ieee754_pow+0x294>)
 800fb04:	4592      	cmp	sl, r2
 800fb06:	d1ec      	bne.n	800fae2 <__ieee754_pow+0xfa>
 800fb08:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 800fb0c:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800fb10:	431a      	orrs	r2, r3
 800fb12:	f000 846e 	beq.w	80103f2 <__ieee754_pow+0xa0a>
 800fb16:	4b5c      	ldr	r3, [pc, #368]	@ (800fc88 <__ieee754_pow+0x2a0>)
 800fb18:	429d      	cmp	r5, r3
 800fb1a:	d908      	bls.n	800fb2e <__ieee754_pow+0x146>
 800fb1c:	f1b9 0f00 	cmp.w	r9, #0
 800fb20:	f280 846b 	bge.w	80103fa <__ieee754_pow+0xa12>
 800fb24:	2000      	movs	r0, #0
 800fb26:	2100      	movs	r1, #0
 800fb28:	e77b      	b.n	800fa22 <__ieee754_pow+0x3a>
 800fb2a:	2402      	movs	r4, #2
 800fb2c:	e7e8      	b.n	800fb00 <__ieee754_pow+0x118>
 800fb2e:	f1b9 0f00 	cmp.w	r9, #0
 800fb32:	f04f 0000 	mov.w	r0, #0
 800fb36:	f04f 0100 	mov.w	r1, #0
 800fb3a:	f6bf af72 	bge.w	800fa22 <__ieee754_pow+0x3a>
 800fb3e:	e9dd 0300 	ldrd	r0, r3, [sp]
 800fb42:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800fb46:	e76c      	b.n	800fa22 <__ieee754_pow+0x3a>
 800fb48:	4a50      	ldr	r2, [pc, #320]	@ (800fc8c <__ieee754_pow+0x2a4>)
 800fb4a:	4591      	cmp	r9, r2
 800fb4c:	d10a      	bne.n	800fb64 <__ieee754_pow+0x17c>
 800fb4e:	f1b8 0f00 	cmp.w	r8, #0
 800fb52:	db07      	blt.n	800fb64 <__ieee754_pow+0x17c>
 800fb54:	ec47 6b10 	vmov	d0, r6, r7
 800fb58:	b011      	add	sp, #68	@ 0x44
 800fb5a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb5e:	f7ff be43 	b.w	800f7e8 <__ieee754_sqrt>
 800fb62:	2400      	movs	r4, #0
 800fb64:	ec47 6b10 	vmov	d0, r6, r7
 800fb68:	9302      	str	r3, [sp, #8]
 800fb6a:	f000 fc87 	bl	801047c <fabs>
 800fb6e:	9b02      	ldr	r3, [sp, #8]
 800fb70:	ec51 0b10 	vmov	r0, r1, d0
 800fb74:	bb43      	cbnz	r3, 800fbc8 <__ieee754_pow+0x1e0>
 800fb76:	4b43      	ldr	r3, [pc, #268]	@ (800fc84 <__ieee754_pow+0x29c>)
 800fb78:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 800fb7c:	429a      	cmp	r2, r3
 800fb7e:	d000      	beq.n	800fb82 <__ieee754_pow+0x19a>
 800fb80:	bb15      	cbnz	r5, 800fbc8 <__ieee754_pow+0x1e0>
 800fb82:	f1b9 0f00 	cmp.w	r9, #0
 800fb86:	da05      	bge.n	800fb94 <__ieee754_pow+0x1ac>
 800fb88:	4602      	mov	r2, r0
 800fb8a:	460b      	mov	r3, r1
 800fb8c:	2000      	movs	r0, #0
 800fb8e:	493d      	ldr	r1, [pc, #244]	@ (800fc84 <__ieee754_pow+0x29c>)
 800fb90:	f7f0 fe28 	bl	80007e4 <__aeabi_ddiv>
 800fb94:	f1b8 0f00 	cmp.w	r8, #0
 800fb98:	f6bf af43 	bge.w	800fa22 <__ieee754_pow+0x3a>
 800fb9c:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800fba0:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800fba4:	4325      	orrs	r5, r4
 800fba6:	d108      	bne.n	800fbba <__ieee754_pow+0x1d2>
 800fba8:	4602      	mov	r2, r0
 800fbaa:	460b      	mov	r3, r1
 800fbac:	4610      	mov	r0, r2
 800fbae:	4619      	mov	r1, r3
 800fbb0:	f7f0 fb36 	bl	8000220 <__aeabi_dsub>
 800fbb4:	4602      	mov	r2, r0
 800fbb6:	460b      	mov	r3, r1
 800fbb8:	e79e      	b.n	800faf8 <__ieee754_pow+0x110>
 800fbba:	2c01      	cmp	r4, #1
 800fbbc:	f47f af31 	bne.w	800fa22 <__ieee754_pow+0x3a>
 800fbc0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fbc4:	4619      	mov	r1, r3
 800fbc6:	e72c      	b.n	800fa22 <__ieee754_pow+0x3a>
 800fbc8:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 800fbcc:	3b01      	subs	r3, #1
 800fbce:	ea53 0204 	orrs.w	r2, r3, r4
 800fbd2:	d102      	bne.n	800fbda <__ieee754_pow+0x1f2>
 800fbd4:	4632      	mov	r2, r6
 800fbd6:	463b      	mov	r3, r7
 800fbd8:	e7e8      	b.n	800fbac <__ieee754_pow+0x1c4>
 800fbda:	3c01      	subs	r4, #1
 800fbdc:	431c      	orrs	r4, r3
 800fbde:	d016      	beq.n	800fc0e <__ieee754_pow+0x226>
 800fbe0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800fc68 <__ieee754_pow+0x280>
 800fbe4:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800fbe8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fbec:	f240 8110 	bls.w	800fe10 <__ieee754_pow+0x428>
 800fbf0:	4b27      	ldr	r3, [pc, #156]	@ (800fc90 <__ieee754_pow+0x2a8>)
 800fbf2:	459a      	cmp	sl, r3
 800fbf4:	4b24      	ldr	r3, [pc, #144]	@ (800fc88 <__ieee754_pow+0x2a0>)
 800fbf6:	d916      	bls.n	800fc26 <__ieee754_pow+0x23e>
 800fbf8:	429d      	cmp	r5, r3
 800fbfa:	d80b      	bhi.n	800fc14 <__ieee754_pow+0x22c>
 800fbfc:	f1b9 0f00 	cmp.w	r9, #0
 800fc00:	da0b      	bge.n	800fc1a <__ieee754_pow+0x232>
 800fc02:	2000      	movs	r0, #0
 800fc04:	b011      	add	sp, #68	@ 0x44
 800fc06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc0a:	f000 bfb5 	b.w	8010b78 <__math_oflow>
 800fc0e:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 800fc70 <__ieee754_pow+0x288>
 800fc12:	e7e7      	b.n	800fbe4 <__ieee754_pow+0x1fc>
 800fc14:	f1b9 0f00 	cmp.w	r9, #0
 800fc18:	dcf3      	bgt.n	800fc02 <__ieee754_pow+0x21a>
 800fc1a:	2000      	movs	r0, #0
 800fc1c:	b011      	add	sp, #68	@ 0x44
 800fc1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc22:	f000 bfa1 	b.w	8010b68 <__math_uflow>
 800fc26:	429d      	cmp	r5, r3
 800fc28:	d20c      	bcs.n	800fc44 <__ieee754_pow+0x25c>
 800fc2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fc2e:	2200      	movs	r2, #0
 800fc30:	2300      	movs	r3, #0
 800fc32:	f7f0 ff1f 	bl	8000a74 <__aeabi_dcmplt>
 800fc36:	3800      	subs	r0, #0
 800fc38:	bf18      	it	ne
 800fc3a:	2001      	movne	r0, #1
 800fc3c:	f1b9 0f00 	cmp.w	r9, #0
 800fc40:	daec      	bge.n	800fc1c <__ieee754_pow+0x234>
 800fc42:	e7df      	b.n	800fc04 <__ieee754_pow+0x21c>
 800fc44:	4b0f      	ldr	r3, [pc, #60]	@ (800fc84 <__ieee754_pow+0x29c>)
 800fc46:	429d      	cmp	r5, r3
 800fc48:	f04f 0200 	mov.w	r2, #0
 800fc4c:	d922      	bls.n	800fc94 <__ieee754_pow+0x2ac>
 800fc4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fc52:	2300      	movs	r3, #0
 800fc54:	f7f0 ff0e 	bl	8000a74 <__aeabi_dcmplt>
 800fc58:	3800      	subs	r0, #0
 800fc5a:	bf18      	it	ne
 800fc5c:	2001      	movne	r0, #1
 800fc5e:	f1b9 0f00 	cmp.w	r9, #0
 800fc62:	dccf      	bgt.n	800fc04 <__ieee754_pow+0x21c>
 800fc64:	e7da      	b.n	800fc1c <__ieee754_pow+0x234>
 800fc66:	bf00      	nop
 800fc68:	00000000 	.word	0x00000000
 800fc6c:	3ff00000 	.word	0x3ff00000
 800fc70:	00000000 	.word	0x00000000
 800fc74:	bff00000 	.word	0xbff00000
 800fc78:	fff00000 	.word	0xfff00000
 800fc7c:	7ff00000 	.word	0x7ff00000
 800fc80:	433fffff 	.word	0x433fffff
 800fc84:	3ff00000 	.word	0x3ff00000
 800fc88:	3fefffff 	.word	0x3fefffff
 800fc8c:	3fe00000 	.word	0x3fe00000
 800fc90:	43f00000 	.word	0x43f00000
 800fc94:	4b5a      	ldr	r3, [pc, #360]	@ (800fe00 <__ieee754_pow+0x418>)
 800fc96:	f7f0 fac3 	bl	8000220 <__aeabi_dsub>
 800fc9a:	a351      	add	r3, pc, #324	@ (adr r3, 800fde0 <__ieee754_pow+0x3f8>)
 800fc9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fca0:	4604      	mov	r4, r0
 800fca2:	460d      	mov	r5, r1
 800fca4:	f7f0 fc74 	bl	8000590 <__aeabi_dmul>
 800fca8:	a34f      	add	r3, pc, #316	@ (adr r3, 800fde8 <__ieee754_pow+0x400>)
 800fcaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcae:	4606      	mov	r6, r0
 800fcb0:	460f      	mov	r7, r1
 800fcb2:	4620      	mov	r0, r4
 800fcb4:	4629      	mov	r1, r5
 800fcb6:	f7f0 fc6b 	bl	8000590 <__aeabi_dmul>
 800fcba:	4b52      	ldr	r3, [pc, #328]	@ (800fe04 <__ieee754_pow+0x41c>)
 800fcbc:	4682      	mov	sl, r0
 800fcbe:	468b      	mov	fp, r1
 800fcc0:	2200      	movs	r2, #0
 800fcc2:	4620      	mov	r0, r4
 800fcc4:	4629      	mov	r1, r5
 800fcc6:	f7f0 fc63 	bl	8000590 <__aeabi_dmul>
 800fcca:	4602      	mov	r2, r0
 800fccc:	460b      	mov	r3, r1
 800fcce:	a148      	add	r1, pc, #288	@ (adr r1, 800fdf0 <__ieee754_pow+0x408>)
 800fcd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fcd4:	f7f0 faa4 	bl	8000220 <__aeabi_dsub>
 800fcd8:	4622      	mov	r2, r4
 800fcda:	462b      	mov	r3, r5
 800fcdc:	f7f0 fc58 	bl	8000590 <__aeabi_dmul>
 800fce0:	4602      	mov	r2, r0
 800fce2:	460b      	mov	r3, r1
 800fce4:	2000      	movs	r0, #0
 800fce6:	4948      	ldr	r1, [pc, #288]	@ (800fe08 <__ieee754_pow+0x420>)
 800fce8:	f7f0 fa9a 	bl	8000220 <__aeabi_dsub>
 800fcec:	4622      	mov	r2, r4
 800fcee:	4680      	mov	r8, r0
 800fcf0:	4689      	mov	r9, r1
 800fcf2:	462b      	mov	r3, r5
 800fcf4:	4620      	mov	r0, r4
 800fcf6:	4629      	mov	r1, r5
 800fcf8:	f7f0 fc4a 	bl	8000590 <__aeabi_dmul>
 800fcfc:	4602      	mov	r2, r0
 800fcfe:	460b      	mov	r3, r1
 800fd00:	4640      	mov	r0, r8
 800fd02:	4649      	mov	r1, r9
 800fd04:	f7f0 fc44 	bl	8000590 <__aeabi_dmul>
 800fd08:	a33b      	add	r3, pc, #236	@ (adr r3, 800fdf8 <__ieee754_pow+0x410>)
 800fd0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd0e:	f7f0 fc3f 	bl	8000590 <__aeabi_dmul>
 800fd12:	4602      	mov	r2, r0
 800fd14:	460b      	mov	r3, r1
 800fd16:	4650      	mov	r0, sl
 800fd18:	4659      	mov	r1, fp
 800fd1a:	f7f0 fa81 	bl	8000220 <__aeabi_dsub>
 800fd1e:	4602      	mov	r2, r0
 800fd20:	460b      	mov	r3, r1
 800fd22:	4680      	mov	r8, r0
 800fd24:	4689      	mov	r9, r1
 800fd26:	4630      	mov	r0, r6
 800fd28:	4639      	mov	r1, r7
 800fd2a:	f7f0 fa7b 	bl	8000224 <__adddf3>
 800fd2e:	2400      	movs	r4, #0
 800fd30:	4632      	mov	r2, r6
 800fd32:	463b      	mov	r3, r7
 800fd34:	4620      	mov	r0, r4
 800fd36:	460d      	mov	r5, r1
 800fd38:	f7f0 fa72 	bl	8000220 <__aeabi_dsub>
 800fd3c:	4602      	mov	r2, r0
 800fd3e:	460b      	mov	r3, r1
 800fd40:	4640      	mov	r0, r8
 800fd42:	4649      	mov	r1, r9
 800fd44:	f7f0 fa6c 	bl	8000220 <__aeabi_dsub>
 800fd48:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fd4c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fd50:	2300      	movs	r3, #0
 800fd52:	9304      	str	r3, [sp, #16]
 800fd54:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800fd58:	4606      	mov	r6, r0
 800fd5a:	460f      	mov	r7, r1
 800fd5c:	465b      	mov	r3, fp
 800fd5e:	4652      	mov	r2, sl
 800fd60:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fd64:	f7f0 fa5c 	bl	8000220 <__aeabi_dsub>
 800fd68:	4622      	mov	r2, r4
 800fd6a:	462b      	mov	r3, r5
 800fd6c:	f7f0 fc10 	bl	8000590 <__aeabi_dmul>
 800fd70:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fd74:	4680      	mov	r8, r0
 800fd76:	4689      	mov	r9, r1
 800fd78:	4630      	mov	r0, r6
 800fd7a:	4639      	mov	r1, r7
 800fd7c:	f7f0 fc08 	bl	8000590 <__aeabi_dmul>
 800fd80:	4602      	mov	r2, r0
 800fd82:	460b      	mov	r3, r1
 800fd84:	4640      	mov	r0, r8
 800fd86:	4649      	mov	r1, r9
 800fd88:	f7f0 fa4c 	bl	8000224 <__adddf3>
 800fd8c:	465b      	mov	r3, fp
 800fd8e:	4606      	mov	r6, r0
 800fd90:	460f      	mov	r7, r1
 800fd92:	4652      	mov	r2, sl
 800fd94:	4620      	mov	r0, r4
 800fd96:	4629      	mov	r1, r5
 800fd98:	f7f0 fbfa 	bl	8000590 <__aeabi_dmul>
 800fd9c:	460b      	mov	r3, r1
 800fd9e:	4602      	mov	r2, r0
 800fda0:	4680      	mov	r8, r0
 800fda2:	4689      	mov	r9, r1
 800fda4:	4630      	mov	r0, r6
 800fda6:	4639      	mov	r1, r7
 800fda8:	f7f0 fa3c 	bl	8000224 <__adddf3>
 800fdac:	4b17      	ldr	r3, [pc, #92]	@ (800fe0c <__ieee754_pow+0x424>)
 800fdae:	4299      	cmp	r1, r3
 800fdb0:	4604      	mov	r4, r0
 800fdb2:	460d      	mov	r5, r1
 800fdb4:	468b      	mov	fp, r1
 800fdb6:	f340 820b 	ble.w	80101d0 <__ieee754_pow+0x7e8>
 800fdba:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800fdbe:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800fdc2:	4303      	orrs	r3, r0
 800fdc4:	f000 81ea 	beq.w	801019c <__ieee754_pow+0x7b4>
 800fdc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fdcc:	2200      	movs	r2, #0
 800fdce:	2300      	movs	r3, #0
 800fdd0:	f7f0 fe50 	bl	8000a74 <__aeabi_dcmplt>
 800fdd4:	3800      	subs	r0, #0
 800fdd6:	bf18      	it	ne
 800fdd8:	2001      	movne	r0, #1
 800fdda:	e713      	b.n	800fc04 <__ieee754_pow+0x21c>
 800fddc:	f3af 8000 	nop.w
 800fde0:	60000000 	.word	0x60000000
 800fde4:	3ff71547 	.word	0x3ff71547
 800fde8:	f85ddf44 	.word	0xf85ddf44
 800fdec:	3e54ae0b 	.word	0x3e54ae0b
 800fdf0:	55555555 	.word	0x55555555
 800fdf4:	3fd55555 	.word	0x3fd55555
 800fdf8:	652b82fe 	.word	0x652b82fe
 800fdfc:	3ff71547 	.word	0x3ff71547
 800fe00:	3ff00000 	.word	0x3ff00000
 800fe04:	3fd00000 	.word	0x3fd00000
 800fe08:	3fe00000 	.word	0x3fe00000
 800fe0c:	408fffff 	.word	0x408fffff
 800fe10:	4bd5      	ldr	r3, [pc, #852]	@ (8010168 <__ieee754_pow+0x780>)
 800fe12:	ea08 0303 	and.w	r3, r8, r3
 800fe16:	2200      	movs	r2, #0
 800fe18:	b92b      	cbnz	r3, 800fe26 <__ieee754_pow+0x43e>
 800fe1a:	4bd4      	ldr	r3, [pc, #848]	@ (801016c <__ieee754_pow+0x784>)
 800fe1c:	f7f0 fbb8 	bl	8000590 <__aeabi_dmul>
 800fe20:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800fe24:	468b      	mov	fp, r1
 800fe26:	ea4f 532b 	mov.w	r3, fp, asr #20
 800fe2a:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800fe2e:	4413      	add	r3, r2
 800fe30:	930a      	str	r3, [sp, #40]	@ 0x28
 800fe32:	4bcf      	ldr	r3, [pc, #828]	@ (8010170 <__ieee754_pow+0x788>)
 800fe34:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800fe38:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800fe3c:	459b      	cmp	fp, r3
 800fe3e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800fe42:	dd08      	ble.n	800fe56 <__ieee754_pow+0x46e>
 800fe44:	4bcb      	ldr	r3, [pc, #812]	@ (8010174 <__ieee754_pow+0x78c>)
 800fe46:	459b      	cmp	fp, r3
 800fe48:	f340 81a5 	ble.w	8010196 <__ieee754_pow+0x7ae>
 800fe4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fe4e:	3301      	adds	r3, #1
 800fe50:	930a      	str	r3, [sp, #40]	@ 0x28
 800fe52:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800fe56:	f04f 0a00 	mov.w	sl, #0
 800fe5a:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800fe5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fe60:	4bc5      	ldr	r3, [pc, #788]	@ (8010178 <__ieee754_pow+0x790>)
 800fe62:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800fe66:	ed93 7b00 	vldr	d7, [r3]
 800fe6a:	4629      	mov	r1, r5
 800fe6c:	ec53 2b17 	vmov	r2, r3, d7
 800fe70:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fe74:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fe78:	f7f0 f9d2 	bl	8000220 <__aeabi_dsub>
 800fe7c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800fe80:	4606      	mov	r6, r0
 800fe82:	460f      	mov	r7, r1
 800fe84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fe88:	f7f0 f9cc 	bl	8000224 <__adddf3>
 800fe8c:	4602      	mov	r2, r0
 800fe8e:	460b      	mov	r3, r1
 800fe90:	2000      	movs	r0, #0
 800fe92:	49ba      	ldr	r1, [pc, #744]	@ (801017c <__ieee754_pow+0x794>)
 800fe94:	f7f0 fca6 	bl	80007e4 <__aeabi_ddiv>
 800fe98:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800fe9c:	4602      	mov	r2, r0
 800fe9e:	460b      	mov	r3, r1
 800fea0:	4630      	mov	r0, r6
 800fea2:	4639      	mov	r1, r7
 800fea4:	f7f0 fb74 	bl	8000590 <__aeabi_dmul>
 800fea8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800feac:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800feb0:	106d      	asrs	r5, r5, #1
 800feb2:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800feb6:	f04f 0b00 	mov.w	fp, #0
 800feba:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800febe:	4661      	mov	r1, ip
 800fec0:	2200      	movs	r2, #0
 800fec2:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800fec6:	4658      	mov	r0, fp
 800fec8:	46e1      	mov	r9, ip
 800feca:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800fece:	4614      	mov	r4, r2
 800fed0:	461d      	mov	r5, r3
 800fed2:	f7f0 fb5d 	bl	8000590 <__aeabi_dmul>
 800fed6:	4602      	mov	r2, r0
 800fed8:	460b      	mov	r3, r1
 800feda:	4630      	mov	r0, r6
 800fedc:	4639      	mov	r1, r7
 800fede:	f7f0 f99f 	bl	8000220 <__aeabi_dsub>
 800fee2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fee6:	4606      	mov	r6, r0
 800fee8:	460f      	mov	r7, r1
 800feea:	4620      	mov	r0, r4
 800feec:	4629      	mov	r1, r5
 800feee:	f7f0 f997 	bl	8000220 <__aeabi_dsub>
 800fef2:	4602      	mov	r2, r0
 800fef4:	460b      	mov	r3, r1
 800fef6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fefa:	f7f0 f991 	bl	8000220 <__aeabi_dsub>
 800fefe:	465a      	mov	r2, fp
 800ff00:	464b      	mov	r3, r9
 800ff02:	f7f0 fb45 	bl	8000590 <__aeabi_dmul>
 800ff06:	4602      	mov	r2, r0
 800ff08:	460b      	mov	r3, r1
 800ff0a:	4630      	mov	r0, r6
 800ff0c:	4639      	mov	r1, r7
 800ff0e:	f7f0 f987 	bl	8000220 <__aeabi_dsub>
 800ff12:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ff16:	f7f0 fb3b 	bl	8000590 <__aeabi_dmul>
 800ff1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ff1e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ff22:	4610      	mov	r0, r2
 800ff24:	4619      	mov	r1, r3
 800ff26:	f7f0 fb33 	bl	8000590 <__aeabi_dmul>
 800ff2a:	a37d      	add	r3, pc, #500	@ (adr r3, 8010120 <__ieee754_pow+0x738>)
 800ff2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff30:	4604      	mov	r4, r0
 800ff32:	460d      	mov	r5, r1
 800ff34:	f7f0 fb2c 	bl	8000590 <__aeabi_dmul>
 800ff38:	a37b      	add	r3, pc, #492	@ (adr r3, 8010128 <__ieee754_pow+0x740>)
 800ff3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff3e:	f7f0 f971 	bl	8000224 <__adddf3>
 800ff42:	4622      	mov	r2, r4
 800ff44:	462b      	mov	r3, r5
 800ff46:	f7f0 fb23 	bl	8000590 <__aeabi_dmul>
 800ff4a:	a379      	add	r3, pc, #484	@ (adr r3, 8010130 <__ieee754_pow+0x748>)
 800ff4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff50:	f7f0 f968 	bl	8000224 <__adddf3>
 800ff54:	4622      	mov	r2, r4
 800ff56:	462b      	mov	r3, r5
 800ff58:	f7f0 fb1a 	bl	8000590 <__aeabi_dmul>
 800ff5c:	a376      	add	r3, pc, #472	@ (adr r3, 8010138 <__ieee754_pow+0x750>)
 800ff5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff62:	f7f0 f95f 	bl	8000224 <__adddf3>
 800ff66:	4622      	mov	r2, r4
 800ff68:	462b      	mov	r3, r5
 800ff6a:	f7f0 fb11 	bl	8000590 <__aeabi_dmul>
 800ff6e:	a374      	add	r3, pc, #464	@ (adr r3, 8010140 <__ieee754_pow+0x758>)
 800ff70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff74:	f7f0 f956 	bl	8000224 <__adddf3>
 800ff78:	4622      	mov	r2, r4
 800ff7a:	462b      	mov	r3, r5
 800ff7c:	f7f0 fb08 	bl	8000590 <__aeabi_dmul>
 800ff80:	a371      	add	r3, pc, #452	@ (adr r3, 8010148 <__ieee754_pow+0x760>)
 800ff82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff86:	f7f0 f94d 	bl	8000224 <__adddf3>
 800ff8a:	4622      	mov	r2, r4
 800ff8c:	4606      	mov	r6, r0
 800ff8e:	460f      	mov	r7, r1
 800ff90:	462b      	mov	r3, r5
 800ff92:	4620      	mov	r0, r4
 800ff94:	4629      	mov	r1, r5
 800ff96:	f7f0 fafb 	bl	8000590 <__aeabi_dmul>
 800ff9a:	4602      	mov	r2, r0
 800ff9c:	460b      	mov	r3, r1
 800ff9e:	4630      	mov	r0, r6
 800ffa0:	4639      	mov	r1, r7
 800ffa2:	f7f0 faf5 	bl	8000590 <__aeabi_dmul>
 800ffa6:	465a      	mov	r2, fp
 800ffa8:	4604      	mov	r4, r0
 800ffaa:	460d      	mov	r5, r1
 800ffac:	464b      	mov	r3, r9
 800ffae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ffb2:	f7f0 f937 	bl	8000224 <__adddf3>
 800ffb6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ffba:	f7f0 fae9 	bl	8000590 <__aeabi_dmul>
 800ffbe:	4622      	mov	r2, r4
 800ffc0:	462b      	mov	r3, r5
 800ffc2:	f7f0 f92f 	bl	8000224 <__adddf3>
 800ffc6:	465a      	mov	r2, fp
 800ffc8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ffcc:	464b      	mov	r3, r9
 800ffce:	4658      	mov	r0, fp
 800ffd0:	4649      	mov	r1, r9
 800ffd2:	f7f0 fadd 	bl	8000590 <__aeabi_dmul>
 800ffd6:	4b6a      	ldr	r3, [pc, #424]	@ (8010180 <__ieee754_pow+0x798>)
 800ffd8:	2200      	movs	r2, #0
 800ffda:	4606      	mov	r6, r0
 800ffdc:	460f      	mov	r7, r1
 800ffde:	f7f0 f921 	bl	8000224 <__adddf3>
 800ffe2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ffe6:	f7f0 f91d 	bl	8000224 <__adddf3>
 800ffea:	46d8      	mov	r8, fp
 800ffec:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800fff0:	460d      	mov	r5, r1
 800fff2:	465a      	mov	r2, fp
 800fff4:	460b      	mov	r3, r1
 800fff6:	4640      	mov	r0, r8
 800fff8:	4649      	mov	r1, r9
 800fffa:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800fffe:	f7f0 fac7 	bl	8000590 <__aeabi_dmul>
 8010002:	465c      	mov	r4, fp
 8010004:	4680      	mov	r8, r0
 8010006:	4689      	mov	r9, r1
 8010008:	4b5d      	ldr	r3, [pc, #372]	@ (8010180 <__ieee754_pow+0x798>)
 801000a:	2200      	movs	r2, #0
 801000c:	4620      	mov	r0, r4
 801000e:	4629      	mov	r1, r5
 8010010:	f7f0 f906 	bl	8000220 <__aeabi_dsub>
 8010014:	4632      	mov	r2, r6
 8010016:	463b      	mov	r3, r7
 8010018:	f7f0 f902 	bl	8000220 <__aeabi_dsub>
 801001c:	4602      	mov	r2, r0
 801001e:	460b      	mov	r3, r1
 8010020:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010024:	f7f0 f8fc 	bl	8000220 <__aeabi_dsub>
 8010028:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801002c:	f7f0 fab0 	bl	8000590 <__aeabi_dmul>
 8010030:	4622      	mov	r2, r4
 8010032:	4606      	mov	r6, r0
 8010034:	460f      	mov	r7, r1
 8010036:	462b      	mov	r3, r5
 8010038:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801003c:	f7f0 faa8 	bl	8000590 <__aeabi_dmul>
 8010040:	4602      	mov	r2, r0
 8010042:	460b      	mov	r3, r1
 8010044:	4630      	mov	r0, r6
 8010046:	4639      	mov	r1, r7
 8010048:	f7f0 f8ec 	bl	8000224 <__adddf3>
 801004c:	4606      	mov	r6, r0
 801004e:	460f      	mov	r7, r1
 8010050:	4602      	mov	r2, r0
 8010052:	460b      	mov	r3, r1
 8010054:	4640      	mov	r0, r8
 8010056:	4649      	mov	r1, r9
 8010058:	f7f0 f8e4 	bl	8000224 <__adddf3>
 801005c:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8010060:	a33b      	add	r3, pc, #236	@ (adr r3, 8010150 <__ieee754_pow+0x768>)
 8010062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010066:	4658      	mov	r0, fp
 8010068:	e9cd bc08 	strd	fp, ip, [sp, #32]
 801006c:	460d      	mov	r5, r1
 801006e:	f7f0 fa8f 	bl	8000590 <__aeabi_dmul>
 8010072:	465c      	mov	r4, fp
 8010074:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010078:	4642      	mov	r2, r8
 801007a:	464b      	mov	r3, r9
 801007c:	4620      	mov	r0, r4
 801007e:	4629      	mov	r1, r5
 8010080:	f7f0 f8ce 	bl	8000220 <__aeabi_dsub>
 8010084:	4602      	mov	r2, r0
 8010086:	460b      	mov	r3, r1
 8010088:	4630      	mov	r0, r6
 801008a:	4639      	mov	r1, r7
 801008c:	f7f0 f8c8 	bl	8000220 <__aeabi_dsub>
 8010090:	a331      	add	r3, pc, #196	@ (adr r3, 8010158 <__ieee754_pow+0x770>)
 8010092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010096:	f7f0 fa7b 	bl	8000590 <__aeabi_dmul>
 801009a:	a331      	add	r3, pc, #196	@ (adr r3, 8010160 <__ieee754_pow+0x778>)
 801009c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100a0:	4606      	mov	r6, r0
 80100a2:	460f      	mov	r7, r1
 80100a4:	4620      	mov	r0, r4
 80100a6:	4629      	mov	r1, r5
 80100a8:	f7f0 fa72 	bl	8000590 <__aeabi_dmul>
 80100ac:	4602      	mov	r2, r0
 80100ae:	460b      	mov	r3, r1
 80100b0:	4630      	mov	r0, r6
 80100b2:	4639      	mov	r1, r7
 80100b4:	f7f0 f8b6 	bl	8000224 <__adddf3>
 80100b8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80100ba:	4b32      	ldr	r3, [pc, #200]	@ (8010184 <__ieee754_pow+0x79c>)
 80100bc:	4413      	add	r3, r2
 80100be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100c2:	f7f0 f8af 	bl	8000224 <__adddf3>
 80100c6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80100ca:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80100cc:	f7f0 f9f6 	bl	80004bc <__aeabi_i2d>
 80100d0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80100d2:	4b2d      	ldr	r3, [pc, #180]	@ (8010188 <__ieee754_pow+0x7a0>)
 80100d4:	4413      	add	r3, r2
 80100d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80100da:	4606      	mov	r6, r0
 80100dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80100e0:	460f      	mov	r7, r1
 80100e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80100e6:	f7f0 f89d 	bl	8000224 <__adddf3>
 80100ea:	4642      	mov	r2, r8
 80100ec:	464b      	mov	r3, r9
 80100ee:	f7f0 f899 	bl	8000224 <__adddf3>
 80100f2:	4632      	mov	r2, r6
 80100f4:	463b      	mov	r3, r7
 80100f6:	f7f0 f895 	bl	8000224 <__adddf3>
 80100fa:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80100fe:	4632      	mov	r2, r6
 8010100:	463b      	mov	r3, r7
 8010102:	4658      	mov	r0, fp
 8010104:	460d      	mov	r5, r1
 8010106:	f7f0 f88b 	bl	8000220 <__aeabi_dsub>
 801010a:	4642      	mov	r2, r8
 801010c:	464b      	mov	r3, r9
 801010e:	f7f0 f887 	bl	8000220 <__aeabi_dsub>
 8010112:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010116:	f7f0 f883 	bl	8000220 <__aeabi_dsub>
 801011a:	465c      	mov	r4, fp
 801011c:	e036      	b.n	801018c <__ieee754_pow+0x7a4>
 801011e:	bf00      	nop
 8010120:	4a454eef 	.word	0x4a454eef
 8010124:	3fca7e28 	.word	0x3fca7e28
 8010128:	93c9db65 	.word	0x93c9db65
 801012c:	3fcd864a 	.word	0x3fcd864a
 8010130:	a91d4101 	.word	0xa91d4101
 8010134:	3fd17460 	.word	0x3fd17460
 8010138:	518f264d 	.word	0x518f264d
 801013c:	3fd55555 	.word	0x3fd55555
 8010140:	db6fabff 	.word	0xdb6fabff
 8010144:	3fdb6db6 	.word	0x3fdb6db6
 8010148:	33333303 	.word	0x33333303
 801014c:	3fe33333 	.word	0x3fe33333
 8010150:	e0000000 	.word	0xe0000000
 8010154:	3feec709 	.word	0x3feec709
 8010158:	dc3a03fd 	.word	0xdc3a03fd
 801015c:	3feec709 	.word	0x3feec709
 8010160:	145b01f5 	.word	0x145b01f5
 8010164:	be3e2fe0 	.word	0xbe3e2fe0
 8010168:	7ff00000 	.word	0x7ff00000
 801016c:	43400000 	.word	0x43400000
 8010170:	0003988e 	.word	0x0003988e
 8010174:	000bb679 	.word	0x000bb679
 8010178:	08011240 	.word	0x08011240
 801017c:	3ff00000 	.word	0x3ff00000
 8010180:	40080000 	.word	0x40080000
 8010184:	08011220 	.word	0x08011220
 8010188:	08011230 	.word	0x08011230
 801018c:	4602      	mov	r2, r0
 801018e:	460b      	mov	r3, r1
 8010190:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010194:	e5d6      	b.n	800fd44 <__ieee754_pow+0x35c>
 8010196:	f04f 0a01 	mov.w	sl, #1
 801019a:	e65e      	b.n	800fe5a <__ieee754_pow+0x472>
 801019c:	a3b5      	add	r3, pc, #724	@ (adr r3, 8010474 <__ieee754_pow+0xa8c>)
 801019e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101a2:	4630      	mov	r0, r6
 80101a4:	4639      	mov	r1, r7
 80101a6:	f7f0 f83d 	bl	8000224 <__adddf3>
 80101aa:	4642      	mov	r2, r8
 80101ac:	e9cd 0100 	strd	r0, r1, [sp]
 80101b0:	464b      	mov	r3, r9
 80101b2:	4620      	mov	r0, r4
 80101b4:	4629      	mov	r1, r5
 80101b6:	f7f0 f833 	bl	8000220 <__aeabi_dsub>
 80101ba:	4602      	mov	r2, r0
 80101bc:	460b      	mov	r3, r1
 80101be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80101c2:	f7f0 fc75 	bl	8000ab0 <__aeabi_dcmpgt>
 80101c6:	2800      	cmp	r0, #0
 80101c8:	f47f adfe 	bne.w	800fdc8 <__ieee754_pow+0x3e0>
 80101cc:	4ba2      	ldr	r3, [pc, #648]	@ (8010458 <__ieee754_pow+0xa70>)
 80101ce:	e022      	b.n	8010216 <__ieee754_pow+0x82e>
 80101d0:	4ca2      	ldr	r4, [pc, #648]	@ (801045c <__ieee754_pow+0xa74>)
 80101d2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80101d6:	42a3      	cmp	r3, r4
 80101d8:	d919      	bls.n	801020e <__ieee754_pow+0x826>
 80101da:	4ba1      	ldr	r3, [pc, #644]	@ (8010460 <__ieee754_pow+0xa78>)
 80101dc:	440b      	add	r3, r1
 80101de:	4303      	orrs	r3, r0
 80101e0:	d009      	beq.n	80101f6 <__ieee754_pow+0x80e>
 80101e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80101e6:	2200      	movs	r2, #0
 80101e8:	2300      	movs	r3, #0
 80101ea:	f7f0 fc43 	bl	8000a74 <__aeabi_dcmplt>
 80101ee:	3800      	subs	r0, #0
 80101f0:	bf18      	it	ne
 80101f2:	2001      	movne	r0, #1
 80101f4:	e512      	b.n	800fc1c <__ieee754_pow+0x234>
 80101f6:	4642      	mov	r2, r8
 80101f8:	464b      	mov	r3, r9
 80101fa:	f7f0 f811 	bl	8000220 <__aeabi_dsub>
 80101fe:	4632      	mov	r2, r6
 8010200:	463b      	mov	r3, r7
 8010202:	f7f0 fc4b 	bl	8000a9c <__aeabi_dcmpge>
 8010206:	2800      	cmp	r0, #0
 8010208:	d1eb      	bne.n	80101e2 <__ieee754_pow+0x7fa>
 801020a:	4b96      	ldr	r3, [pc, #600]	@ (8010464 <__ieee754_pow+0xa7c>)
 801020c:	e003      	b.n	8010216 <__ieee754_pow+0x82e>
 801020e:	4a96      	ldr	r2, [pc, #600]	@ (8010468 <__ieee754_pow+0xa80>)
 8010210:	4293      	cmp	r3, r2
 8010212:	f240 80e7 	bls.w	80103e4 <__ieee754_pow+0x9fc>
 8010216:	151b      	asrs	r3, r3, #20
 8010218:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 801021c:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 8010220:	fa4a fa03 	asr.w	sl, sl, r3
 8010224:	44da      	add	sl, fp
 8010226:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801022a:	4890      	ldr	r0, [pc, #576]	@ (801046c <__ieee754_pow+0xa84>)
 801022c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8010230:	4108      	asrs	r0, r1
 8010232:	ea00 030a 	and.w	r3, r0, sl
 8010236:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801023a:	f1c1 0114 	rsb	r1, r1, #20
 801023e:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8010242:	fa4a fa01 	asr.w	sl, sl, r1
 8010246:	f1bb 0f00 	cmp.w	fp, #0
 801024a:	4640      	mov	r0, r8
 801024c:	4649      	mov	r1, r9
 801024e:	f04f 0200 	mov.w	r2, #0
 8010252:	bfb8      	it	lt
 8010254:	f1ca 0a00 	rsblt	sl, sl, #0
 8010258:	f7ef ffe2 	bl	8000220 <__aeabi_dsub>
 801025c:	4680      	mov	r8, r0
 801025e:	4689      	mov	r9, r1
 8010260:	4632      	mov	r2, r6
 8010262:	463b      	mov	r3, r7
 8010264:	4640      	mov	r0, r8
 8010266:	4649      	mov	r1, r9
 8010268:	f7ef ffdc 	bl	8000224 <__adddf3>
 801026c:	2400      	movs	r4, #0
 801026e:	a36a      	add	r3, pc, #424	@ (adr r3, 8010418 <__ieee754_pow+0xa30>)
 8010270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010274:	4620      	mov	r0, r4
 8010276:	460d      	mov	r5, r1
 8010278:	f7f0 f98a 	bl	8000590 <__aeabi_dmul>
 801027c:	4642      	mov	r2, r8
 801027e:	e9cd 0100 	strd	r0, r1, [sp]
 8010282:	464b      	mov	r3, r9
 8010284:	4620      	mov	r0, r4
 8010286:	4629      	mov	r1, r5
 8010288:	f7ef ffca 	bl	8000220 <__aeabi_dsub>
 801028c:	4602      	mov	r2, r0
 801028e:	460b      	mov	r3, r1
 8010290:	4630      	mov	r0, r6
 8010292:	4639      	mov	r1, r7
 8010294:	f7ef ffc4 	bl	8000220 <__aeabi_dsub>
 8010298:	a361      	add	r3, pc, #388	@ (adr r3, 8010420 <__ieee754_pow+0xa38>)
 801029a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801029e:	f7f0 f977 	bl	8000590 <__aeabi_dmul>
 80102a2:	a361      	add	r3, pc, #388	@ (adr r3, 8010428 <__ieee754_pow+0xa40>)
 80102a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102a8:	4680      	mov	r8, r0
 80102aa:	4689      	mov	r9, r1
 80102ac:	4620      	mov	r0, r4
 80102ae:	4629      	mov	r1, r5
 80102b0:	f7f0 f96e 	bl	8000590 <__aeabi_dmul>
 80102b4:	4602      	mov	r2, r0
 80102b6:	460b      	mov	r3, r1
 80102b8:	4640      	mov	r0, r8
 80102ba:	4649      	mov	r1, r9
 80102bc:	f7ef ffb2 	bl	8000224 <__adddf3>
 80102c0:	4604      	mov	r4, r0
 80102c2:	460d      	mov	r5, r1
 80102c4:	4602      	mov	r2, r0
 80102c6:	460b      	mov	r3, r1
 80102c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80102cc:	f7ef ffaa 	bl	8000224 <__adddf3>
 80102d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80102d4:	4680      	mov	r8, r0
 80102d6:	4689      	mov	r9, r1
 80102d8:	f7ef ffa2 	bl	8000220 <__aeabi_dsub>
 80102dc:	4602      	mov	r2, r0
 80102de:	460b      	mov	r3, r1
 80102e0:	4620      	mov	r0, r4
 80102e2:	4629      	mov	r1, r5
 80102e4:	f7ef ff9c 	bl	8000220 <__aeabi_dsub>
 80102e8:	4642      	mov	r2, r8
 80102ea:	4606      	mov	r6, r0
 80102ec:	460f      	mov	r7, r1
 80102ee:	464b      	mov	r3, r9
 80102f0:	4640      	mov	r0, r8
 80102f2:	4649      	mov	r1, r9
 80102f4:	f7f0 f94c 	bl	8000590 <__aeabi_dmul>
 80102f8:	a34d      	add	r3, pc, #308	@ (adr r3, 8010430 <__ieee754_pow+0xa48>)
 80102fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102fe:	4604      	mov	r4, r0
 8010300:	460d      	mov	r5, r1
 8010302:	f7f0 f945 	bl	8000590 <__aeabi_dmul>
 8010306:	a34c      	add	r3, pc, #304	@ (adr r3, 8010438 <__ieee754_pow+0xa50>)
 8010308:	e9d3 2300 	ldrd	r2, r3, [r3]
 801030c:	f7ef ff88 	bl	8000220 <__aeabi_dsub>
 8010310:	4622      	mov	r2, r4
 8010312:	462b      	mov	r3, r5
 8010314:	f7f0 f93c 	bl	8000590 <__aeabi_dmul>
 8010318:	a349      	add	r3, pc, #292	@ (adr r3, 8010440 <__ieee754_pow+0xa58>)
 801031a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801031e:	f7ef ff81 	bl	8000224 <__adddf3>
 8010322:	4622      	mov	r2, r4
 8010324:	462b      	mov	r3, r5
 8010326:	f7f0 f933 	bl	8000590 <__aeabi_dmul>
 801032a:	a347      	add	r3, pc, #284	@ (adr r3, 8010448 <__ieee754_pow+0xa60>)
 801032c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010330:	f7ef ff76 	bl	8000220 <__aeabi_dsub>
 8010334:	4622      	mov	r2, r4
 8010336:	462b      	mov	r3, r5
 8010338:	f7f0 f92a 	bl	8000590 <__aeabi_dmul>
 801033c:	a344      	add	r3, pc, #272	@ (adr r3, 8010450 <__ieee754_pow+0xa68>)
 801033e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010342:	f7ef ff6f 	bl	8000224 <__adddf3>
 8010346:	4622      	mov	r2, r4
 8010348:	462b      	mov	r3, r5
 801034a:	f7f0 f921 	bl	8000590 <__aeabi_dmul>
 801034e:	4602      	mov	r2, r0
 8010350:	460b      	mov	r3, r1
 8010352:	4640      	mov	r0, r8
 8010354:	4649      	mov	r1, r9
 8010356:	f7ef ff63 	bl	8000220 <__aeabi_dsub>
 801035a:	4604      	mov	r4, r0
 801035c:	460d      	mov	r5, r1
 801035e:	4602      	mov	r2, r0
 8010360:	460b      	mov	r3, r1
 8010362:	4640      	mov	r0, r8
 8010364:	4649      	mov	r1, r9
 8010366:	f7f0 f913 	bl	8000590 <__aeabi_dmul>
 801036a:	2200      	movs	r2, #0
 801036c:	e9cd 0100 	strd	r0, r1, [sp]
 8010370:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8010374:	4620      	mov	r0, r4
 8010376:	4629      	mov	r1, r5
 8010378:	f7ef ff52 	bl	8000220 <__aeabi_dsub>
 801037c:	4602      	mov	r2, r0
 801037e:	460b      	mov	r3, r1
 8010380:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010384:	f7f0 fa2e 	bl	80007e4 <__aeabi_ddiv>
 8010388:	4632      	mov	r2, r6
 801038a:	4604      	mov	r4, r0
 801038c:	460d      	mov	r5, r1
 801038e:	463b      	mov	r3, r7
 8010390:	4640      	mov	r0, r8
 8010392:	4649      	mov	r1, r9
 8010394:	f7f0 f8fc 	bl	8000590 <__aeabi_dmul>
 8010398:	4632      	mov	r2, r6
 801039a:	463b      	mov	r3, r7
 801039c:	f7ef ff42 	bl	8000224 <__adddf3>
 80103a0:	4602      	mov	r2, r0
 80103a2:	460b      	mov	r3, r1
 80103a4:	4620      	mov	r0, r4
 80103a6:	4629      	mov	r1, r5
 80103a8:	f7ef ff3a 	bl	8000220 <__aeabi_dsub>
 80103ac:	4642      	mov	r2, r8
 80103ae:	464b      	mov	r3, r9
 80103b0:	f7ef ff36 	bl	8000220 <__aeabi_dsub>
 80103b4:	460b      	mov	r3, r1
 80103b6:	4602      	mov	r2, r0
 80103b8:	492d      	ldr	r1, [pc, #180]	@ (8010470 <__ieee754_pow+0xa88>)
 80103ba:	2000      	movs	r0, #0
 80103bc:	f7ef ff30 	bl	8000220 <__aeabi_dsub>
 80103c0:	ec41 0b10 	vmov	d0, r0, r1
 80103c4:	ee10 3a90 	vmov	r3, s1
 80103c8:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80103cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80103d0:	da0b      	bge.n	80103ea <__ieee754_pow+0xa02>
 80103d2:	4650      	mov	r0, sl
 80103d4:	f000 fb20 	bl	8010a18 <scalbn>
 80103d8:	ec51 0b10 	vmov	r0, r1, d0
 80103dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80103e0:	f7ff bb6d 	b.w	800fabe <__ieee754_pow+0xd6>
 80103e4:	f8dd a010 	ldr.w	sl, [sp, #16]
 80103e8:	e73a      	b.n	8010260 <__ieee754_pow+0x878>
 80103ea:	ec51 0b10 	vmov	r0, r1, d0
 80103ee:	4619      	mov	r1, r3
 80103f0:	e7f4      	b.n	80103dc <__ieee754_pow+0x9f4>
 80103f2:	491f      	ldr	r1, [pc, #124]	@ (8010470 <__ieee754_pow+0xa88>)
 80103f4:	2000      	movs	r0, #0
 80103f6:	f7ff bb14 	b.w	800fa22 <__ieee754_pow+0x3a>
 80103fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80103fe:	f7ff bb10 	b.w	800fa22 <__ieee754_pow+0x3a>
 8010402:	4630      	mov	r0, r6
 8010404:	4639      	mov	r1, r7
 8010406:	f7ff bb0c 	b.w	800fa22 <__ieee754_pow+0x3a>
 801040a:	460c      	mov	r4, r1
 801040c:	f7ff bb69 	b.w	800fae2 <__ieee754_pow+0xfa>
 8010410:	2400      	movs	r4, #0
 8010412:	f7ff bb4b 	b.w	800faac <__ieee754_pow+0xc4>
 8010416:	bf00      	nop
 8010418:	00000000 	.word	0x00000000
 801041c:	3fe62e43 	.word	0x3fe62e43
 8010420:	fefa39ef 	.word	0xfefa39ef
 8010424:	3fe62e42 	.word	0x3fe62e42
 8010428:	0ca86c39 	.word	0x0ca86c39
 801042c:	be205c61 	.word	0xbe205c61
 8010430:	72bea4d0 	.word	0x72bea4d0
 8010434:	3e663769 	.word	0x3e663769
 8010438:	c5d26bf1 	.word	0xc5d26bf1
 801043c:	3ebbbd41 	.word	0x3ebbbd41
 8010440:	af25de2c 	.word	0xaf25de2c
 8010444:	3f11566a 	.word	0x3f11566a
 8010448:	16bebd93 	.word	0x16bebd93
 801044c:	3f66c16c 	.word	0x3f66c16c
 8010450:	5555553e 	.word	0x5555553e
 8010454:	3fc55555 	.word	0x3fc55555
 8010458:	40900000 	.word	0x40900000
 801045c:	4090cbff 	.word	0x4090cbff
 8010460:	3f6f3400 	.word	0x3f6f3400
 8010464:	4090cc00 	.word	0x4090cc00
 8010468:	3fe00000 	.word	0x3fe00000
 801046c:	fff00000 	.word	0xfff00000
 8010470:	3ff00000 	.word	0x3ff00000
 8010474:	652b82fe 	.word	0x652b82fe
 8010478:	3c971547 	.word	0x3c971547

0801047c <fabs>:
 801047c:	ec51 0b10 	vmov	r0, r1, d0
 8010480:	4602      	mov	r2, r0
 8010482:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010486:	ec43 2b10 	vmov	d0, r2, r3
 801048a:	4770      	bx	lr

0801048c <__kernel_cosf>:
 801048c:	ee10 3a10 	vmov	r3, s0
 8010490:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010494:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8010498:	eef0 6a40 	vmov.f32	s13, s0
 801049c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80104a0:	d204      	bcs.n	80104ac <__kernel_cosf+0x20>
 80104a2:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80104a6:	ee17 2a90 	vmov	r2, s15
 80104aa:	b342      	cbz	r2, 80104fe <__kernel_cosf+0x72>
 80104ac:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80104b0:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 801051c <__kernel_cosf+0x90>
 80104b4:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8010520 <__kernel_cosf+0x94>
 80104b8:	4a1a      	ldr	r2, [pc, #104]	@ (8010524 <__kernel_cosf+0x98>)
 80104ba:	eea7 6a27 	vfma.f32	s12, s14, s15
 80104be:	4293      	cmp	r3, r2
 80104c0:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8010528 <__kernel_cosf+0x9c>
 80104c4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80104c8:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 801052c <__kernel_cosf+0xa0>
 80104cc:	eea7 6a87 	vfma.f32	s12, s15, s14
 80104d0:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8010530 <__kernel_cosf+0xa4>
 80104d4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80104d8:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8010534 <__kernel_cosf+0xa8>
 80104dc:	eea7 6a87 	vfma.f32	s12, s15, s14
 80104e0:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 80104e4:	ee26 6a07 	vmul.f32	s12, s12, s14
 80104e8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80104ec:	eee7 0a06 	vfma.f32	s1, s14, s12
 80104f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80104f4:	d804      	bhi.n	8010500 <__kernel_cosf+0x74>
 80104f6:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80104fa:	ee30 0a67 	vsub.f32	s0, s0, s15
 80104fe:	4770      	bx	lr
 8010500:	4a0d      	ldr	r2, [pc, #52]	@ (8010538 <__kernel_cosf+0xac>)
 8010502:	4293      	cmp	r3, r2
 8010504:	bf9a      	itte	ls
 8010506:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 801050a:	ee07 3a10 	vmovls	s14, r3
 801050e:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8010512:	ee30 0a47 	vsub.f32	s0, s0, s14
 8010516:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801051a:	e7ec      	b.n	80104f6 <__kernel_cosf+0x6a>
 801051c:	ad47d74e 	.word	0xad47d74e
 8010520:	310f74f6 	.word	0x310f74f6
 8010524:	3e999999 	.word	0x3e999999
 8010528:	b493f27c 	.word	0xb493f27c
 801052c:	37d00d01 	.word	0x37d00d01
 8010530:	bab60b61 	.word	0xbab60b61
 8010534:	3d2aaaab 	.word	0x3d2aaaab
 8010538:	3f480000 	.word	0x3f480000

0801053c <__kernel_sinf>:
 801053c:	ee10 3a10 	vmov	r3, s0
 8010540:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010544:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8010548:	d204      	bcs.n	8010554 <__kernel_sinf+0x18>
 801054a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801054e:	ee17 3a90 	vmov	r3, s15
 8010552:	b35b      	cbz	r3, 80105ac <__kernel_sinf+0x70>
 8010554:	ee20 7a00 	vmul.f32	s14, s0, s0
 8010558:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80105b0 <__kernel_sinf+0x74>
 801055c:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 80105b4 <__kernel_sinf+0x78>
 8010560:	eea7 6a27 	vfma.f32	s12, s14, s15
 8010564:	eddf 7a14 	vldr	s15, [pc, #80]	@ 80105b8 <__kernel_sinf+0x7c>
 8010568:	eee6 7a07 	vfma.f32	s15, s12, s14
 801056c:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 80105bc <__kernel_sinf+0x80>
 8010570:	eea7 6a87 	vfma.f32	s12, s15, s14
 8010574:	eddf 7a12 	vldr	s15, [pc, #72]	@ 80105c0 <__kernel_sinf+0x84>
 8010578:	ee60 6a07 	vmul.f32	s13, s0, s14
 801057c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8010580:	b930      	cbnz	r0, 8010590 <__kernel_sinf+0x54>
 8010582:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 80105c4 <__kernel_sinf+0x88>
 8010586:	eea7 6a27 	vfma.f32	s12, s14, s15
 801058a:	eea6 0a26 	vfma.f32	s0, s12, s13
 801058e:	4770      	bx	lr
 8010590:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8010594:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8010598:	eee0 7a86 	vfma.f32	s15, s1, s12
 801059c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80105a0:	eddf 7a09 	vldr	s15, [pc, #36]	@ 80105c8 <__kernel_sinf+0x8c>
 80105a4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80105a8:	ee30 0a60 	vsub.f32	s0, s0, s1
 80105ac:	4770      	bx	lr
 80105ae:	bf00      	nop
 80105b0:	2f2ec9d3 	.word	0x2f2ec9d3
 80105b4:	b2d72f34 	.word	0xb2d72f34
 80105b8:	3638ef1b 	.word	0x3638ef1b
 80105bc:	b9500d01 	.word	0xb9500d01
 80105c0:	3c088889 	.word	0x3c088889
 80105c4:	be2aaaab 	.word	0xbe2aaaab
 80105c8:	3e2aaaab 	.word	0x3e2aaaab

080105cc <__ieee754_acosf>:
 80105cc:	b508      	push	{r3, lr}
 80105ce:	ee10 3a10 	vmov	r3, s0
 80105d2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80105d6:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 80105da:	ed2d 8b0c 	vpush	{d8-d13}
 80105de:	d10a      	bne.n	80105f6 <__ieee754_acosf+0x2a>
 80105e0:	ed9f 0a64 	vldr	s0, [pc, #400]	@ 8010774 <__ieee754_acosf+0x1a8>
 80105e4:	eddf 7a64 	vldr	s15, [pc, #400]	@ 8010778 <__ieee754_acosf+0x1ac>
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	bfc8      	it	gt
 80105ec:	eeb0 0a67 	vmovgt.f32	s0, s15
 80105f0:	ecbd 8b0c 	vpop	{d8-d13}
 80105f4:	bd08      	pop	{r3, pc}
 80105f6:	d904      	bls.n	8010602 <__ieee754_acosf+0x36>
 80105f8:	ee30 8a40 	vsub.f32	s16, s0, s0
 80105fc:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8010600:	e7f6      	b.n	80105f0 <__ieee754_acosf+0x24>
 8010602:	f1b2 5f7c 	cmp.w	r2, #1056964608	@ 0x3f000000
 8010606:	d23c      	bcs.n	8010682 <__ieee754_acosf+0xb6>
 8010608:	f1b2 5f0c 	cmp.w	r2, #587202560	@ 0x23000000
 801060c:	f240 80af 	bls.w	801076e <__ieee754_acosf+0x1a2>
 8010610:	ee60 7a00 	vmul.f32	s15, s0, s0
 8010614:	eddf 6a59 	vldr	s13, [pc, #356]	@ 801077c <__ieee754_acosf+0x1b0>
 8010618:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8010780 <__ieee754_acosf+0x1b4>
 801061c:	ed9f 6a59 	vldr	s12, [pc, #356]	@ 8010784 <__ieee754_acosf+0x1b8>
 8010620:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8010624:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8010788 <__ieee754_acosf+0x1bc>
 8010628:	eee7 6a27 	vfma.f32	s13, s14, s15
 801062c:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 801078c <__ieee754_acosf+0x1c0>
 8010630:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010634:	eddf 6a56 	vldr	s13, [pc, #344]	@ 8010790 <__ieee754_acosf+0x1c4>
 8010638:	eee7 6a27 	vfma.f32	s13, s14, s15
 801063c:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8010794 <__ieee754_acosf+0x1c8>
 8010640:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010644:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8010798 <__ieee754_acosf+0x1cc>
 8010648:	eea7 6aa6 	vfma.f32	s12, s15, s13
 801064c:	eddf 6a53 	vldr	s13, [pc, #332]	@ 801079c <__ieee754_acosf+0x1d0>
 8010650:	eee6 6a27 	vfma.f32	s13, s12, s15
 8010654:	ed9f 6a52 	vldr	s12, [pc, #328]	@ 80107a0 <__ieee754_acosf+0x1d4>
 8010658:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801065c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010660:	eee6 6a27 	vfma.f32	s13, s12, s15
 8010664:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010668:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 80107a4 <__ieee754_acosf+0x1d8>
 801066c:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8010670:	eee0 7a46 	vfms.f32	s15, s0, s12
 8010674:	ee70 7a67 	vsub.f32	s15, s0, s15
 8010678:	ed9f 0a4b 	vldr	s0, [pc, #300]	@ 80107a8 <__ieee754_acosf+0x1dc>
 801067c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010680:	e7b6      	b.n	80105f0 <__ieee754_acosf+0x24>
 8010682:	2b00      	cmp	r3, #0
 8010684:	eddf da3d 	vldr	s27, [pc, #244]	@ 801077c <__ieee754_acosf+0x1b0>
 8010688:	eddf ca3d 	vldr	s25, [pc, #244]	@ 8010780 <__ieee754_acosf+0x1b4>
 801068c:	ed9f ca3e 	vldr	s24, [pc, #248]	@ 8010788 <__ieee754_acosf+0x1bc>
 8010690:	eddf ba3e 	vldr	s23, [pc, #248]	@ 801078c <__ieee754_acosf+0x1c0>
 8010694:	ed9f ba3e 	vldr	s22, [pc, #248]	@ 8010790 <__ieee754_acosf+0x1c4>
 8010698:	eddf 8a3e 	vldr	s17, [pc, #248]	@ 8010794 <__ieee754_acosf+0x1c8>
 801069c:	ed9f da3e 	vldr	s26, [pc, #248]	@ 8010798 <__ieee754_acosf+0x1cc>
 80106a0:	eddf aa38 	vldr	s21, [pc, #224]	@ 8010784 <__ieee754_acosf+0x1b8>
 80106a4:	ed9f aa3d 	vldr	s20, [pc, #244]	@ 801079c <__ieee754_acosf+0x1d0>
 80106a8:	eddf 9a3d 	vldr	s19, [pc, #244]	@ 80107a0 <__ieee754_acosf+0x1d4>
 80106ac:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 80106b0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80106b4:	da28      	bge.n	8010708 <__ieee754_acosf+0x13c>
 80106b6:	ee30 8a09 	vadd.f32	s16, s0, s18
 80106ba:	ee28 0a27 	vmul.f32	s0, s16, s15
 80106be:	eee0 ca2d 	vfma.f32	s25, s0, s27
 80106c2:	eee0 aa0d 	vfma.f32	s21, s0, s26
 80106c6:	eeac ca80 	vfma.f32	s24, s25, s0
 80106ca:	eeaa aa80 	vfma.f32	s20, s21, s0
 80106ce:	eeec ba00 	vfma.f32	s23, s24, s0
 80106d2:	eeea 9a00 	vfma.f32	s19, s20, s0
 80106d6:	eeab ba80 	vfma.f32	s22, s23, s0
 80106da:	eea9 9a80 	vfma.f32	s18, s19, s0
 80106de:	eeeb 8a00 	vfma.f32	s17, s22, s0
 80106e2:	ee68 8a80 	vmul.f32	s17, s17, s0
 80106e6:	f7ff f955 	bl	800f994 <__ieee754_sqrtf>
 80106ea:	ee88 7a89 	vdiv.f32	s14, s17, s18
 80106ee:	eddf 7a2f 	vldr	s15, [pc, #188]	@ 80107ac <__ieee754_acosf+0x1e0>
 80106f2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80106f6:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80106fa:	ee77 7a80 	vadd.f32	s15, s15, s0
 80106fe:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 80107b0 <__ieee754_acosf+0x1e4>
 8010702:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8010706:	e773      	b.n	80105f0 <__ieee754_acosf+0x24>
 8010708:	ee39 8a40 	vsub.f32	s16, s18, s0
 801070c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8010710:	eeb0 0a48 	vmov.f32	s0, s16
 8010714:	f7ff f93e 	bl	800f994 <__ieee754_sqrtf>
 8010718:	eee8 ca2d 	vfma.f32	s25, s16, s27
 801071c:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8010720:	eeac ca88 	vfma.f32	s24, s25, s16
 8010724:	eeaa aa88 	vfma.f32	s20, s21, s16
 8010728:	eeec ba08 	vfma.f32	s23, s24, s16
 801072c:	ee10 3a10 	vmov	r3, s0
 8010730:	eeab ba88 	vfma.f32	s22, s23, s16
 8010734:	f36f 030b 	bfc	r3, #0, #12
 8010738:	eeea 9a08 	vfma.f32	s19, s20, s16
 801073c:	ee07 3a90 	vmov	s15, r3
 8010740:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8010744:	eeb0 6a48 	vmov.f32	s12, s16
 8010748:	eea7 6ae7 	vfms.f32	s12, s15, s15
 801074c:	eea9 9a88 	vfma.f32	s18, s19, s16
 8010750:	ee70 6a27 	vadd.f32	s13, s0, s15
 8010754:	ee68 8a88 	vmul.f32	s17, s17, s16
 8010758:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801075c:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8010760:	eea0 7a26 	vfma.f32	s14, s0, s13
 8010764:	ee37 0a87 	vadd.f32	s0, s15, s14
 8010768:	ee30 0a00 	vadd.f32	s0, s0, s0
 801076c:	e740      	b.n	80105f0 <__ieee754_acosf+0x24>
 801076e:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 80107b4 <__ieee754_acosf+0x1e8>
 8010772:	e73d      	b.n	80105f0 <__ieee754_acosf+0x24>
 8010774:	40490fdb 	.word	0x40490fdb
 8010778:	00000000 	.word	0x00000000
 801077c:	3811ef08 	.word	0x3811ef08
 8010780:	3a4f7f04 	.word	0x3a4f7f04
 8010784:	bf303361 	.word	0xbf303361
 8010788:	bd241146 	.word	0xbd241146
 801078c:	3e4e0aa8 	.word	0x3e4e0aa8
 8010790:	bea6b090 	.word	0xbea6b090
 8010794:	3e2aaaab 	.word	0x3e2aaaab
 8010798:	3d9dc62e 	.word	0x3d9dc62e
 801079c:	4001572d 	.word	0x4001572d
 80107a0:	c019d139 	.word	0xc019d139
 80107a4:	33a22168 	.word	0x33a22168
 80107a8:	3fc90fda 	.word	0x3fc90fda
 80107ac:	b3a22168 	.word	0xb3a22168
 80107b0:	40490fda 	.word	0x40490fda
 80107b4:	3fc90fdb 	.word	0x3fc90fdb

080107b8 <__ieee754_rem_pio2f>:
 80107b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80107ba:	ee10 6a10 	vmov	r6, s0
 80107be:	4b88      	ldr	r3, [pc, #544]	@ (80109e0 <__ieee754_rem_pio2f+0x228>)
 80107c0:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 80107c4:	429d      	cmp	r5, r3
 80107c6:	b087      	sub	sp, #28
 80107c8:	4604      	mov	r4, r0
 80107ca:	d805      	bhi.n	80107d8 <__ieee754_rem_pio2f+0x20>
 80107cc:	2300      	movs	r3, #0
 80107ce:	ed80 0a00 	vstr	s0, [r0]
 80107d2:	6043      	str	r3, [r0, #4]
 80107d4:	2000      	movs	r0, #0
 80107d6:	e022      	b.n	801081e <__ieee754_rem_pio2f+0x66>
 80107d8:	4b82      	ldr	r3, [pc, #520]	@ (80109e4 <__ieee754_rem_pio2f+0x22c>)
 80107da:	429d      	cmp	r5, r3
 80107dc:	d83a      	bhi.n	8010854 <__ieee754_rem_pio2f+0x9c>
 80107de:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80107e2:	2e00      	cmp	r6, #0
 80107e4:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 80109e8 <__ieee754_rem_pio2f+0x230>
 80107e8:	4a80      	ldr	r2, [pc, #512]	@ (80109ec <__ieee754_rem_pio2f+0x234>)
 80107ea:	f023 030f 	bic.w	r3, r3, #15
 80107ee:	dd18      	ble.n	8010822 <__ieee754_rem_pio2f+0x6a>
 80107f0:	4293      	cmp	r3, r2
 80107f2:	ee70 7a47 	vsub.f32	s15, s0, s14
 80107f6:	bf09      	itett	eq
 80107f8:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 80109f0 <__ieee754_rem_pio2f+0x238>
 80107fc:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 80109f4 <__ieee754_rem_pio2f+0x23c>
 8010800:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 80109f8 <__ieee754_rem_pio2f+0x240>
 8010804:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8010808:	ee37 7ae6 	vsub.f32	s14, s15, s13
 801080c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010810:	ed80 7a00 	vstr	s14, [r0]
 8010814:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010818:	edc0 7a01 	vstr	s15, [r0, #4]
 801081c:	2001      	movs	r0, #1
 801081e:	b007      	add	sp, #28
 8010820:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010822:	4293      	cmp	r3, r2
 8010824:	ee70 7a07 	vadd.f32	s15, s0, s14
 8010828:	bf09      	itett	eq
 801082a:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 80109f0 <__ieee754_rem_pio2f+0x238>
 801082e:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 80109f4 <__ieee754_rem_pio2f+0x23c>
 8010832:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 80109f8 <__ieee754_rem_pio2f+0x240>
 8010836:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801083a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801083e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010842:	ed80 7a00 	vstr	s14, [r0]
 8010846:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801084a:	edc0 7a01 	vstr	s15, [r0, #4]
 801084e:	f04f 30ff 	mov.w	r0, #4294967295
 8010852:	e7e4      	b.n	801081e <__ieee754_rem_pio2f+0x66>
 8010854:	4b69      	ldr	r3, [pc, #420]	@ (80109fc <__ieee754_rem_pio2f+0x244>)
 8010856:	429d      	cmp	r5, r3
 8010858:	d873      	bhi.n	8010942 <__ieee754_rem_pio2f+0x18a>
 801085a:	f7fe ff65 	bl	800f728 <fabsf>
 801085e:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8010a00 <__ieee754_rem_pio2f+0x248>
 8010862:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010866:	eee0 7a07 	vfma.f32	s15, s0, s14
 801086a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801086e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010872:	ee17 0a90 	vmov	r0, s15
 8010876:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80109e8 <__ieee754_rem_pio2f+0x230>
 801087a:	eea7 0a67 	vfms.f32	s0, s14, s15
 801087e:	281f      	cmp	r0, #31
 8010880:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80109f4 <__ieee754_rem_pio2f+0x23c>
 8010884:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010888:	eeb1 6a47 	vneg.f32	s12, s14
 801088c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8010890:	ee16 1a90 	vmov	r1, s13
 8010894:	dc09      	bgt.n	80108aa <__ieee754_rem_pio2f+0xf2>
 8010896:	4a5b      	ldr	r2, [pc, #364]	@ (8010a04 <__ieee754_rem_pio2f+0x24c>)
 8010898:	1e47      	subs	r7, r0, #1
 801089a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801089e:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 80108a2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80108a6:	4293      	cmp	r3, r2
 80108a8:	d107      	bne.n	80108ba <__ieee754_rem_pio2f+0x102>
 80108aa:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 80108ae:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 80108b2:	2a08      	cmp	r2, #8
 80108b4:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80108b8:	dc14      	bgt.n	80108e4 <__ieee754_rem_pio2f+0x12c>
 80108ba:	6021      	str	r1, [r4, #0]
 80108bc:	ed94 7a00 	vldr	s14, [r4]
 80108c0:	ee30 0a47 	vsub.f32	s0, s0, s14
 80108c4:	2e00      	cmp	r6, #0
 80108c6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80108ca:	ed84 0a01 	vstr	s0, [r4, #4]
 80108ce:	daa6      	bge.n	801081e <__ieee754_rem_pio2f+0x66>
 80108d0:	eeb1 7a47 	vneg.f32	s14, s14
 80108d4:	eeb1 0a40 	vneg.f32	s0, s0
 80108d8:	ed84 7a00 	vstr	s14, [r4]
 80108dc:	ed84 0a01 	vstr	s0, [r4, #4]
 80108e0:	4240      	negs	r0, r0
 80108e2:	e79c      	b.n	801081e <__ieee754_rem_pio2f+0x66>
 80108e4:	eddf 5a42 	vldr	s11, [pc, #264]	@ 80109f0 <__ieee754_rem_pio2f+0x238>
 80108e8:	eef0 6a40 	vmov.f32	s13, s0
 80108ec:	eee6 6a25 	vfma.f32	s13, s12, s11
 80108f0:	ee70 7a66 	vsub.f32	s15, s0, s13
 80108f4:	eee6 7a25 	vfma.f32	s15, s12, s11
 80108f8:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80109f8 <__ieee754_rem_pio2f+0x240>
 80108fc:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8010900:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8010904:	ee15 2a90 	vmov	r2, s11
 8010908:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801090c:	1a5b      	subs	r3, r3, r1
 801090e:	2b19      	cmp	r3, #25
 8010910:	dc04      	bgt.n	801091c <__ieee754_rem_pio2f+0x164>
 8010912:	edc4 5a00 	vstr	s11, [r4]
 8010916:	eeb0 0a66 	vmov.f32	s0, s13
 801091a:	e7cf      	b.n	80108bc <__ieee754_rem_pio2f+0x104>
 801091c:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8010a08 <__ieee754_rem_pio2f+0x250>
 8010920:	eeb0 0a66 	vmov.f32	s0, s13
 8010924:	eea6 0a25 	vfma.f32	s0, s12, s11
 8010928:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801092c:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8010a0c <__ieee754_rem_pio2f+0x254>
 8010930:	eee6 7a25 	vfma.f32	s15, s12, s11
 8010934:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8010938:	ee30 7a67 	vsub.f32	s14, s0, s15
 801093c:	ed84 7a00 	vstr	s14, [r4]
 8010940:	e7bc      	b.n	80108bc <__ieee754_rem_pio2f+0x104>
 8010942:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8010946:	d306      	bcc.n	8010956 <__ieee754_rem_pio2f+0x19e>
 8010948:	ee70 7a40 	vsub.f32	s15, s0, s0
 801094c:	edc0 7a01 	vstr	s15, [r0, #4]
 8010950:	edc0 7a00 	vstr	s15, [r0]
 8010954:	e73e      	b.n	80107d4 <__ieee754_rem_pio2f+0x1c>
 8010956:	15ea      	asrs	r2, r5, #23
 8010958:	3a86      	subs	r2, #134	@ 0x86
 801095a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801095e:	ee07 3a90 	vmov	s15, r3
 8010962:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8010966:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8010a10 <__ieee754_rem_pio2f+0x258>
 801096a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801096e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010972:	ed8d 7a03 	vstr	s14, [sp, #12]
 8010976:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801097a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801097e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010982:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010986:	ed8d 7a04 	vstr	s14, [sp, #16]
 801098a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801098e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010996:	edcd 7a05 	vstr	s15, [sp, #20]
 801099a:	d11e      	bne.n	80109da <__ieee754_rem_pio2f+0x222>
 801099c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80109a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109a4:	bf0c      	ite	eq
 80109a6:	2301      	moveq	r3, #1
 80109a8:	2302      	movne	r3, #2
 80109aa:	491a      	ldr	r1, [pc, #104]	@ (8010a14 <__ieee754_rem_pio2f+0x25c>)
 80109ac:	9101      	str	r1, [sp, #4]
 80109ae:	2102      	movs	r1, #2
 80109b0:	9100      	str	r1, [sp, #0]
 80109b2:	a803      	add	r0, sp, #12
 80109b4:	4621      	mov	r1, r4
 80109b6:	f000 f94d 	bl	8010c54 <__kernel_rem_pio2f>
 80109ba:	2e00      	cmp	r6, #0
 80109bc:	f6bf af2f 	bge.w	801081e <__ieee754_rem_pio2f+0x66>
 80109c0:	edd4 7a00 	vldr	s15, [r4]
 80109c4:	eef1 7a67 	vneg.f32	s15, s15
 80109c8:	edc4 7a00 	vstr	s15, [r4]
 80109cc:	edd4 7a01 	vldr	s15, [r4, #4]
 80109d0:	eef1 7a67 	vneg.f32	s15, s15
 80109d4:	edc4 7a01 	vstr	s15, [r4, #4]
 80109d8:	e782      	b.n	80108e0 <__ieee754_rem_pio2f+0x128>
 80109da:	2303      	movs	r3, #3
 80109dc:	e7e5      	b.n	80109aa <__ieee754_rem_pio2f+0x1f2>
 80109de:	bf00      	nop
 80109e0:	3f490fd8 	.word	0x3f490fd8
 80109e4:	4016cbe3 	.word	0x4016cbe3
 80109e8:	3fc90f80 	.word	0x3fc90f80
 80109ec:	3fc90fd0 	.word	0x3fc90fd0
 80109f0:	37354400 	.word	0x37354400
 80109f4:	37354443 	.word	0x37354443
 80109f8:	2e85a308 	.word	0x2e85a308
 80109fc:	43490f80 	.word	0x43490f80
 8010a00:	3f22f984 	.word	0x3f22f984
 8010a04:	08011250 	.word	0x08011250
 8010a08:	2e85a300 	.word	0x2e85a300
 8010a0c:	248d3132 	.word	0x248d3132
 8010a10:	43800000 	.word	0x43800000
 8010a14:	080112d0 	.word	0x080112d0

08010a18 <scalbn>:
 8010a18:	b570      	push	{r4, r5, r6, lr}
 8010a1a:	ec55 4b10 	vmov	r4, r5, d0
 8010a1e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8010a22:	4606      	mov	r6, r0
 8010a24:	462b      	mov	r3, r5
 8010a26:	b991      	cbnz	r1, 8010a4e <scalbn+0x36>
 8010a28:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8010a2c:	4323      	orrs	r3, r4
 8010a2e:	d03b      	beq.n	8010aa8 <scalbn+0x90>
 8010a30:	4b33      	ldr	r3, [pc, #204]	@ (8010b00 <scalbn+0xe8>)
 8010a32:	4620      	mov	r0, r4
 8010a34:	4629      	mov	r1, r5
 8010a36:	2200      	movs	r2, #0
 8010a38:	f7ef fdaa 	bl	8000590 <__aeabi_dmul>
 8010a3c:	4b31      	ldr	r3, [pc, #196]	@ (8010b04 <scalbn+0xec>)
 8010a3e:	429e      	cmp	r6, r3
 8010a40:	4604      	mov	r4, r0
 8010a42:	460d      	mov	r5, r1
 8010a44:	da0f      	bge.n	8010a66 <scalbn+0x4e>
 8010a46:	a326      	add	r3, pc, #152	@ (adr r3, 8010ae0 <scalbn+0xc8>)
 8010a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a4c:	e01e      	b.n	8010a8c <scalbn+0x74>
 8010a4e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8010a52:	4291      	cmp	r1, r2
 8010a54:	d10b      	bne.n	8010a6e <scalbn+0x56>
 8010a56:	4622      	mov	r2, r4
 8010a58:	4620      	mov	r0, r4
 8010a5a:	4629      	mov	r1, r5
 8010a5c:	f7ef fbe2 	bl	8000224 <__adddf3>
 8010a60:	4604      	mov	r4, r0
 8010a62:	460d      	mov	r5, r1
 8010a64:	e020      	b.n	8010aa8 <scalbn+0x90>
 8010a66:	460b      	mov	r3, r1
 8010a68:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8010a6c:	3936      	subs	r1, #54	@ 0x36
 8010a6e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8010a72:	4296      	cmp	r6, r2
 8010a74:	dd0d      	ble.n	8010a92 <scalbn+0x7a>
 8010a76:	2d00      	cmp	r5, #0
 8010a78:	a11b      	add	r1, pc, #108	@ (adr r1, 8010ae8 <scalbn+0xd0>)
 8010a7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010a7e:	da02      	bge.n	8010a86 <scalbn+0x6e>
 8010a80:	a11b      	add	r1, pc, #108	@ (adr r1, 8010af0 <scalbn+0xd8>)
 8010a82:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010a86:	a318      	add	r3, pc, #96	@ (adr r3, 8010ae8 <scalbn+0xd0>)
 8010a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a8c:	f7ef fd80 	bl	8000590 <__aeabi_dmul>
 8010a90:	e7e6      	b.n	8010a60 <scalbn+0x48>
 8010a92:	1872      	adds	r2, r6, r1
 8010a94:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8010a98:	428a      	cmp	r2, r1
 8010a9a:	dcec      	bgt.n	8010a76 <scalbn+0x5e>
 8010a9c:	2a00      	cmp	r2, #0
 8010a9e:	dd06      	ble.n	8010aae <scalbn+0x96>
 8010aa0:	f36f 531e 	bfc	r3, #20, #11
 8010aa4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010aa8:	ec45 4b10 	vmov	d0, r4, r5
 8010aac:	bd70      	pop	{r4, r5, r6, pc}
 8010aae:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8010ab2:	da08      	bge.n	8010ac6 <scalbn+0xae>
 8010ab4:	2d00      	cmp	r5, #0
 8010ab6:	a10a      	add	r1, pc, #40	@ (adr r1, 8010ae0 <scalbn+0xc8>)
 8010ab8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010abc:	dac3      	bge.n	8010a46 <scalbn+0x2e>
 8010abe:	a10e      	add	r1, pc, #56	@ (adr r1, 8010af8 <scalbn+0xe0>)
 8010ac0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010ac4:	e7bf      	b.n	8010a46 <scalbn+0x2e>
 8010ac6:	3236      	adds	r2, #54	@ 0x36
 8010ac8:	f36f 531e 	bfc	r3, #20, #11
 8010acc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010ad0:	4620      	mov	r0, r4
 8010ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8010b08 <scalbn+0xf0>)
 8010ad4:	4629      	mov	r1, r5
 8010ad6:	2200      	movs	r2, #0
 8010ad8:	e7d8      	b.n	8010a8c <scalbn+0x74>
 8010ada:	bf00      	nop
 8010adc:	f3af 8000 	nop.w
 8010ae0:	c2f8f359 	.word	0xc2f8f359
 8010ae4:	01a56e1f 	.word	0x01a56e1f
 8010ae8:	8800759c 	.word	0x8800759c
 8010aec:	7e37e43c 	.word	0x7e37e43c
 8010af0:	8800759c 	.word	0x8800759c
 8010af4:	fe37e43c 	.word	0xfe37e43c
 8010af8:	c2f8f359 	.word	0xc2f8f359
 8010afc:	81a56e1f 	.word	0x81a56e1f
 8010b00:	43500000 	.word	0x43500000
 8010b04:	ffff3cb0 	.word	0xffff3cb0
 8010b08:	3c900000 	.word	0x3c900000

08010b0c <with_errno>:
 8010b0c:	b510      	push	{r4, lr}
 8010b0e:	ed2d 8b02 	vpush	{d8}
 8010b12:	eeb0 8a40 	vmov.f32	s16, s0
 8010b16:	eef0 8a60 	vmov.f32	s17, s1
 8010b1a:	4604      	mov	r4, r0
 8010b1c:	f7fe fca2 	bl	800f464 <__errno>
 8010b20:	eeb0 0a48 	vmov.f32	s0, s16
 8010b24:	eef0 0a68 	vmov.f32	s1, s17
 8010b28:	ecbd 8b02 	vpop	{d8}
 8010b2c:	6004      	str	r4, [r0, #0]
 8010b2e:	bd10      	pop	{r4, pc}

08010b30 <xflow>:
 8010b30:	4603      	mov	r3, r0
 8010b32:	b507      	push	{r0, r1, r2, lr}
 8010b34:	ec51 0b10 	vmov	r0, r1, d0
 8010b38:	b183      	cbz	r3, 8010b5c <xflow+0x2c>
 8010b3a:	4602      	mov	r2, r0
 8010b3c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010b40:	e9cd 2300 	strd	r2, r3, [sp]
 8010b44:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010b48:	f7ef fd22 	bl	8000590 <__aeabi_dmul>
 8010b4c:	ec41 0b10 	vmov	d0, r0, r1
 8010b50:	2022      	movs	r0, #34	@ 0x22
 8010b52:	b003      	add	sp, #12
 8010b54:	f85d eb04 	ldr.w	lr, [sp], #4
 8010b58:	f7ff bfd8 	b.w	8010b0c <with_errno>
 8010b5c:	4602      	mov	r2, r0
 8010b5e:	460b      	mov	r3, r1
 8010b60:	e7ee      	b.n	8010b40 <xflow+0x10>
 8010b62:	0000      	movs	r0, r0
 8010b64:	0000      	movs	r0, r0
	...

08010b68 <__math_uflow>:
 8010b68:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010b70 <__math_uflow+0x8>
 8010b6c:	f7ff bfe0 	b.w	8010b30 <xflow>
 8010b70:	00000000 	.word	0x00000000
 8010b74:	10000000 	.word	0x10000000

08010b78 <__math_oflow>:
 8010b78:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010b80 <__math_oflow+0x8>
 8010b7c:	f7ff bfd8 	b.w	8010b30 <xflow>
 8010b80:	00000000 	.word	0x00000000
 8010b84:	70000000 	.word	0x70000000

08010b88 <scalbnf>:
 8010b88:	ee10 3a10 	vmov	r3, s0
 8010b8c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8010b90:	d02b      	beq.n	8010bea <scalbnf+0x62>
 8010b92:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8010b96:	d302      	bcc.n	8010b9e <scalbnf+0x16>
 8010b98:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010b9c:	4770      	bx	lr
 8010b9e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8010ba2:	d123      	bne.n	8010bec <scalbnf+0x64>
 8010ba4:	4b24      	ldr	r3, [pc, #144]	@ (8010c38 <scalbnf+0xb0>)
 8010ba6:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8010c3c <scalbnf+0xb4>
 8010baa:	4298      	cmp	r0, r3
 8010bac:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010bb0:	db17      	blt.n	8010be2 <scalbnf+0x5a>
 8010bb2:	ee10 3a10 	vmov	r3, s0
 8010bb6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010bba:	3a19      	subs	r2, #25
 8010bbc:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8010bc0:	4288      	cmp	r0, r1
 8010bc2:	dd15      	ble.n	8010bf0 <scalbnf+0x68>
 8010bc4:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8010c40 <scalbnf+0xb8>
 8010bc8:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8010c44 <scalbnf+0xbc>
 8010bcc:	ee10 3a10 	vmov	r3, s0
 8010bd0:	eeb0 7a67 	vmov.f32	s14, s15
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	bfb8      	it	lt
 8010bd8:	eef0 7a66 	vmovlt.f32	s15, s13
 8010bdc:	ee27 0a87 	vmul.f32	s0, s15, s14
 8010be0:	4770      	bx	lr
 8010be2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8010c48 <scalbnf+0xc0>
 8010be6:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010bea:	4770      	bx	lr
 8010bec:	0dd2      	lsrs	r2, r2, #23
 8010bee:	e7e5      	b.n	8010bbc <scalbnf+0x34>
 8010bf0:	4410      	add	r0, r2
 8010bf2:	28fe      	cmp	r0, #254	@ 0xfe
 8010bf4:	dce6      	bgt.n	8010bc4 <scalbnf+0x3c>
 8010bf6:	2800      	cmp	r0, #0
 8010bf8:	dd06      	ble.n	8010c08 <scalbnf+0x80>
 8010bfa:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010bfe:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8010c02:	ee00 3a10 	vmov	s0, r3
 8010c06:	4770      	bx	lr
 8010c08:	f110 0f16 	cmn.w	r0, #22
 8010c0c:	da09      	bge.n	8010c22 <scalbnf+0x9a>
 8010c0e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8010c48 <scalbnf+0xc0>
 8010c12:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8010c4c <scalbnf+0xc4>
 8010c16:	ee10 3a10 	vmov	r3, s0
 8010c1a:	eeb0 7a67 	vmov.f32	s14, s15
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	e7d9      	b.n	8010bd6 <scalbnf+0x4e>
 8010c22:	3019      	adds	r0, #25
 8010c24:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010c28:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8010c2c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8010c50 <scalbnf+0xc8>
 8010c30:	ee07 3a90 	vmov	s15, r3
 8010c34:	e7d7      	b.n	8010be6 <scalbnf+0x5e>
 8010c36:	bf00      	nop
 8010c38:	ffff3cb0 	.word	0xffff3cb0
 8010c3c:	4c000000 	.word	0x4c000000
 8010c40:	7149f2ca 	.word	0x7149f2ca
 8010c44:	f149f2ca 	.word	0xf149f2ca
 8010c48:	0da24260 	.word	0x0da24260
 8010c4c:	8da24260 	.word	0x8da24260
 8010c50:	33000000 	.word	0x33000000

08010c54 <__kernel_rem_pio2f>:
 8010c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c58:	ed2d 8b04 	vpush	{d8-d9}
 8010c5c:	b0d9      	sub	sp, #356	@ 0x164
 8010c5e:	4690      	mov	r8, r2
 8010c60:	9001      	str	r0, [sp, #4]
 8010c62:	4ab6      	ldr	r2, [pc, #728]	@ (8010f3c <__kernel_rem_pio2f+0x2e8>)
 8010c64:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8010c66:	f118 0f04 	cmn.w	r8, #4
 8010c6a:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8010c6e:	460f      	mov	r7, r1
 8010c70:	f103 3bff 	add.w	fp, r3, #4294967295
 8010c74:	db26      	blt.n	8010cc4 <__kernel_rem_pio2f+0x70>
 8010c76:	f1b8 0203 	subs.w	r2, r8, #3
 8010c7a:	bf48      	it	mi
 8010c7c:	f108 0204 	addmi.w	r2, r8, #4
 8010c80:	10d2      	asrs	r2, r2, #3
 8010c82:	1c55      	adds	r5, r2, #1
 8010c84:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8010c86:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8010f4c <__kernel_rem_pio2f+0x2f8>
 8010c8a:	00e8      	lsls	r0, r5, #3
 8010c8c:	eba2 060b 	sub.w	r6, r2, fp
 8010c90:	9002      	str	r0, [sp, #8]
 8010c92:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8010c96:	eb0a 0c0b 	add.w	ip, sl, fp
 8010c9a:	ac1c      	add	r4, sp, #112	@ 0x70
 8010c9c:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8010ca0:	2000      	movs	r0, #0
 8010ca2:	4560      	cmp	r0, ip
 8010ca4:	dd10      	ble.n	8010cc8 <__kernel_rem_pio2f+0x74>
 8010ca6:	a91c      	add	r1, sp, #112	@ 0x70
 8010ca8:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8010cac:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8010cb0:	2600      	movs	r6, #0
 8010cb2:	4556      	cmp	r6, sl
 8010cb4:	dc24      	bgt.n	8010d00 <__kernel_rem_pio2f+0xac>
 8010cb6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010cba:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8010f4c <__kernel_rem_pio2f+0x2f8>
 8010cbe:	4684      	mov	ip, r0
 8010cc0:	2400      	movs	r4, #0
 8010cc2:	e016      	b.n	8010cf2 <__kernel_rem_pio2f+0x9e>
 8010cc4:	2200      	movs	r2, #0
 8010cc6:	e7dc      	b.n	8010c82 <__kernel_rem_pio2f+0x2e>
 8010cc8:	42c6      	cmn	r6, r0
 8010cca:	bf5d      	ittte	pl
 8010ccc:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8010cd0:	ee07 1a90 	vmovpl	s15, r1
 8010cd4:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8010cd8:	eef0 7a47 	vmovmi.f32	s15, s14
 8010cdc:	ece4 7a01 	vstmia	r4!, {s15}
 8010ce0:	3001      	adds	r0, #1
 8010ce2:	e7de      	b.n	8010ca2 <__kernel_rem_pio2f+0x4e>
 8010ce4:	ecfe 6a01 	vldmia	lr!, {s13}
 8010ce8:	ed3c 7a01 	vldmdb	ip!, {s14}
 8010cec:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010cf0:	3401      	adds	r4, #1
 8010cf2:	455c      	cmp	r4, fp
 8010cf4:	ddf6      	ble.n	8010ce4 <__kernel_rem_pio2f+0x90>
 8010cf6:	ece9 7a01 	vstmia	r9!, {s15}
 8010cfa:	3601      	adds	r6, #1
 8010cfc:	3004      	adds	r0, #4
 8010cfe:	e7d8      	b.n	8010cb2 <__kernel_rem_pio2f+0x5e>
 8010d00:	a908      	add	r1, sp, #32
 8010d02:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010d06:	9104      	str	r1, [sp, #16]
 8010d08:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8010d0a:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8010f48 <__kernel_rem_pio2f+0x2f4>
 8010d0e:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8010f44 <__kernel_rem_pio2f+0x2f0>
 8010d12:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8010d16:	9203      	str	r2, [sp, #12]
 8010d18:	4654      	mov	r4, sl
 8010d1a:	00a2      	lsls	r2, r4, #2
 8010d1c:	9205      	str	r2, [sp, #20]
 8010d1e:	aa58      	add	r2, sp, #352	@ 0x160
 8010d20:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8010d24:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8010d28:	a944      	add	r1, sp, #272	@ 0x110
 8010d2a:	aa08      	add	r2, sp, #32
 8010d2c:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8010d30:	4694      	mov	ip, r2
 8010d32:	4626      	mov	r6, r4
 8010d34:	2e00      	cmp	r6, #0
 8010d36:	dc4c      	bgt.n	8010dd2 <__kernel_rem_pio2f+0x17e>
 8010d38:	4628      	mov	r0, r5
 8010d3a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010d3e:	f7ff ff23 	bl	8010b88 <scalbnf>
 8010d42:	eeb0 8a40 	vmov.f32	s16, s0
 8010d46:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8010d4a:	ee28 0a00 	vmul.f32	s0, s16, s0
 8010d4e:	f000 f9e9 	bl	8011124 <floorf>
 8010d52:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8010d56:	eea0 8a67 	vfms.f32	s16, s0, s15
 8010d5a:	2d00      	cmp	r5, #0
 8010d5c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010d60:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8010d64:	ee17 9a90 	vmov	r9, s15
 8010d68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010d6c:	ee38 8a67 	vsub.f32	s16, s16, s15
 8010d70:	dd41      	ble.n	8010df6 <__kernel_rem_pio2f+0x1a2>
 8010d72:	f104 3cff 	add.w	ip, r4, #4294967295
 8010d76:	a908      	add	r1, sp, #32
 8010d78:	f1c5 0e08 	rsb	lr, r5, #8
 8010d7c:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8010d80:	fa46 f00e 	asr.w	r0, r6, lr
 8010d84:	4481      	add	r9, r0
 8010d86:	fa00 f00e 	lsl.w	r0, r0, lr
 8010d8a:	1a36      	subs	r6, r6, r0
 8010d8c:	f1c5 0007 	rsb	r0, r5, #7
 8010d90:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8010d94:	4106      	asrs	r6, r0
 8010d96:	2e00      	cmp	r6, #0
 8010d98:	dd3c      	ble.n	8010e14 <__kernel_rem_pio2f+0x1c0>
 8010d9a:	f04f 0e00 	mov.w	lr, #0
 8010d9e:	f109 0901 	add.w	r9, r9, #1
 8010da2:	4670      	mov	r0, lr
 8010da4:	4574      	cmp	r4, lr
 8010da6:	dc68      	bgt.n	8010e7a <__kernel_rem_pio2f+0x226>
 8010da8:	2d00      	cmp	r5, #0
 8010daa:	dd03      	ble.n	8010db4 <__kernel_rem_pio2f+0x160>
 8010dac:	2d01      	cmp	r5, #1
 8010dae:	d074      	beq.n	8010e9a <__kernel_rem_pio2f+0x246>
 8010db0:	2d02      	cmp	r5, #2
 8010db2:	d07d      	beq.n	8010eb0 <__kernel_rem_pio2f+0x25c>
 8010db4:	2e02      	cmp	r6, #2
 8010db6:	d12d      	bne.n	8010e14 <__kernel_rem_pio2f+0x1c0>
 8010db8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8010dbc:	ee30 8a48 	vsub.f32	s16, s0, s16
 8010dc0:	b340      	cbz	r0, 8010e14 <__kernel_rem_pio2f+0x1c0>
 8010dc2:	4628      	mov	r0, r5
 8010dc4:	9306      	str	r3, [sp, #24]
 8010dc6:	f7ff fedf 	bl	8010b88 <scalbnf>
 8010dca:	9b06      	ldr	r3, [sp, #24]
 8010dcc:	ee38 8a40 	vsub.f32	s16, s16, s0
 8010dd0:	e020      	b.n	8010e14 <__kernel_rem_pio2f+0x1c0>
 8010dd2:	ee60 7a28 	vmul.f32	s15, s0, s17
 8010dd6:	3e01      	subs	r6, #1
 8010dd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010ddc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010de0:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8010de4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8010de8:	ecac 0a01 	vstmia	ip!, {s0}
 8010dec:	ed30 0a01 	vldmdb	r0!, {s0}
 8010df0:	ee37 0a80 	vadd.f32	s0, s15, s0
 8010df4:	e79e      	b.n	8010d34 <__kernel_rem_pio2f+0xe0>
 8010df6:	d105      	bne.n	8010e04 <__kernel_rem_pio2f+0x1b0>
 8010df8:	1e60      	subs	r0, r4, #1
 8010dfa:	a908      	add	r1, sp, #32
 8010dfc:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8010e00:	11f6      	asrs	r6, r6, #7
 8010e02:	e7c8      	b.n	8010d96 <__kernel_rem_pio2f+0x142>
 8010e04:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010e08:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8010e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e10:	da31      	bge.n	8010e76 <__kernel_rem_pio2f+0x222>
 8010e12:	2600      	movs	r6, #0
 8010e14:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8010e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e1c:	f040 8098 	bne.w	8010f50 <__kernel_rem_pio2f+0x2fc>
 8010e20:	1e60      	subs	r0, r4, #1
 8010e22:	2200      	movs	r2, #0
 8010e24:	4550      	cmp	r0, sl
 8010e26:	da4b      	bge.n	8010ec0 <__kernel_rem_pio2f+0x26c>
 8010e28:	2a00      	cmp	r2, #0
 8010e2a:	d065      	beq.n	8010ef8 <__kernel_rem_pio2f+0x2a4>
 8010e2c:	3c01      	subs	r4, #1
 8010e2e:	ab08      	add	r3, sp, #32
 8010e30:	3d08      	subs	r5, #8
 8010e32:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d0f8      	beq.n	8010e2c <__kernel_rem_pio2f+0x1d8>
 8010e3a:	4628      	mov	r0, r5
 8010e3c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8010e40:	f7ff fea2 	bl	8010b88 <scalbnf>
 8010e44:	1c63      	adds	r3, r4, #1
 8010e46:	aa44      	add	r2, sp, #272	@ 0x110
 8010e48:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8010f48 <__kernel_rem_pio2f+0x2f4>
 8010e4c:	0099      	lsls	r1, r3, #2
 8010e4e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010e52:	4623      	mov	r3, r4
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	f280 80a9 	bge.w	8010fac <__kernel_rem_pio2f+0x358>
 8010e5a:	4623      	mov	r3, r4
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	f2c0 80c7 	blt.w	8010ff0 <__kernel_rem_pio2f+0x39c>
 8010e62:	aa44      	add	r2, sp, #272	@ 0x110
 8010e64:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8010e68:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8010f40 <__kernel_rem_pio2f+0x2ec>
 8010e6c:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8010f4c <__kernel_rem_pio2f+0x2f8>
 8010e70:	2000      	movs	r0, #0
 8010e72:	1ae2      	subs	r2, r4, r3
 8010e74:	e0b1      	b.n	8010fda <__kernel_rem_pio2f+0x386>
 8010e76:	2602      	movs	r6, #2
 8010e78:	e78f      	b.n	8010d9a <__kernel_rem_pio2f+0x146>
 8010e7a:	f852 1b04 	ldr.w	r1, [r2], #4
 8010e7e:	b948      	cbnz	r0, 8010e94 <__kernel_rem_pio2f+0x240>
 8010e80:	b121      	cbz	r1, 8010e8c <__kernel_rem_pio2f+0x238>
 8010e82:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8010e86:	f842 1c04 	str.w	r1, [r2, #-4]
 8010e8a:	2101      	movs	r1, #1
 8010e8c:	f10e 0e01 	add.w	lr, lr, #1
 8010e90:	4608      	mov	r0, r1
 8010e92:	e787      	b.n	8010da4 <__kernel_rem_pio2f+0x150>
 8010e94:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8010e98:	e7f5      	b.n	8010e86 <__kernel_rem_pio2f+0x232>
 8010e9a:	f104 3cff 	add.w	ip, r4, #4294967295
 8010e9e:	aa08      	add	r2, sp, #32
 8010ea0:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8010ea4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8010ea8:	a908      	add	r1, sp, #32
 8010eaa:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8010eae:	e781      	b.n	8010db4 <__kernel_rem_pio2f+0x160>
 8010eb0:	f104 3cff 	add.w	ip, r4, #4294967295
 8010eb4:	aa08      	add	r2, sp, #32
 8010eb6:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8010eba:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8010ebe:	e7f3      	b.n	8010ea8 <__kernel_rem_pio2f+0x254>
 8010ec0:	a908      	add	r1, sp, #32
 8010ec2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8010ec6:	3801      	subs	r0, #1
 8010ec8:	430a      	orrs	r2, r1
 8010eca:	e7ab      	b.n	8010e24 <__kernel_rem_pio2f+0x1d0>
 8010ecc:	3201      	adds	r2, #1
 8010ece:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8010ed2:	2e00      	cmp	r6, #0
 8010ed4:	d0fa      	beq.n	8010ecc <__kernel_rem_pio2f+0x278>
 8010ed6:	9905      	ldr	r1, [sp, #20]
 8010ed8:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8010edc:	eb0d 0001 	add.w	r0, sp, r1
 8010ee0:	18e6      	adds	r6, r4, r3
 8010ee2:	a91c      	add	r1, sp, #112	@ 0x70
 8010ee4:	f104 0c01 	add.w	ip, r4, #1
 8010ee8:	384c      	subs	r0, #76	@ 0x4c
 8010eea:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8010eee:	4422      	add	r2, r4
 8010ef0:	4562      	cmp	r2, ip
 8010ef2:	da04      	bge.n	8010efe <__kernel_rem_pio2f+0x2aa>
 8010ef4:	4614      	mov	r4, r2
 8010ef6:	e710      	b.n	8010d1a <__kernel_rem_pio2f+0xc6>
 8010ef8:	9804      	ldr	r0, [sp, #16]
 8010efa:	2201      	movs	r2, #1
 8010efc:	e7e7      	b.n	8010ece <__kernel_rem_pio2f+0x27a>
 8010efe:	9903      	ldr	r1, [sp, #12]
 8010f00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010f04:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8010f08:	9105      	str	r1, [sp, #20]
 8010f0a:	ee07 1a90 	vmov	s15, r1
 8010f0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010f12:	2400      	movs	r4, #0
 8010f14:	ece6 7a01 	vstmia	r6!, {s15}
 8010f18:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8010f4c <__kernel_rem_pio2f+0x2f8>
 8010f1c:	46b1      	mov	r9, r6
 8010f1e:	455c      	cmp	r4, fp
 8010f20:	dd04      	ble.n	8010f2c <__kernel_rem_pio2f+0x2d8>
 8010f22:	ece0 7a01 	vstmia	r0!, {s15}
 8010f26:	f10c 0c01 	add.w	ip, ip, #1
 8010f2a:	e7e1      	b.n	8010ef0 <__kernel_rem_pio2f+0x29c>
 8010f2c:	ecfe 6a01 	vldmia	lr!, {s13}
 8010f30:	ed39 7a01 	vldmdb	r9!, {s14}
 8010f34:	3401      	adds	r4, #1
 8010f36:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010f3a:	e7f0      	b.n	8010f1e <__kernel_rem_pio2f+0x2ca>
 8010f3c:	08011614 	.word	0x08011614
 8010f40:	080115e8 	.word	0x080115e8
 8010f44:	43800000 	.word	0x43800000
 8010f48:	3b800000 	.word	0x3b800000
 8010f4c:	00000000 	.word	0x00000000
 8010f50:	9b02      	ldr	r3, [sp, #8]
 8010f52:	eeb0 0a48 	vmov.f32	s0, s16
 8010f56:	eba3 0008 	sub.w	r0, r3, r8
 8010f5a:	f7ff fe15 	bl	8010b88 <scalbnf>
 8010f5e:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8010f44 <__kernel_rem_pio2f+0x2f0>
 8010f62:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8010f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f6a:	db19      	blt.n	8010fa0 <__kernel_rem_pio2f+0x34c>
 8010f6c:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8010f48 <__kernel_rem_pio2f+0x2f4>
 8010f70:	ee60 7a27 	vmul.f32	s15, s0, s15
 8010f74:	aa08      	add	r2, sp, #32
 8010f76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010f7a:	3508      	adds	r5, #8
 8010f7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010f80:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8010f84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010f88:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8010f8c:	ee10 3a10 	vmov	r3, s0
 8010f90:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8010f94:	ee17 3a90 	vmov	r3, s15
 8010f98:	3401      	adds	r4, #1
 8010f9a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8010f9e:	e74c      	b.n	8010e3a <__kernel_rem_pio2f+0x1e6>
 8010fa0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8010fa4:	aa08      	add	r2, sp, #32
 8010fa6:	ee10 3a10 	vmov	r3, s0
 8010faa:	e7f6      	b.n	8010f9a <__kernel_rem_pio2f+0x346>
 8010fac:	a808      	add	r0, sp, #32
 8010fae:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8010fb2:	9001      	str	r0, [sp, #4]
 8010fb4:	ee07 0a90 	vmov	s15, r0
 8010fb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010fbc:	3b01      	subs	r3, #1
 8010fbe:	ee67 7a80 	vmul.f32	s15, s15, s0
 8010fc2:	ee20 0a07 	vmul.f32	s0, s0, s14
 8010fc6:	ed62 7a01 	vstmdb	r2!, {s15}
 8010fca:	e743      	b.n	8010e54 <__kernel_rem_pio2f+0x200>
 8010fcc:	ecfc 6a01 	vldmia	ip!, {s13}
 8010fd0:	ecb5 7a01 	vldmia	r5!, {s14}
 8010fd4:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010fd8:	3001      	adds	r0, #1
 8010fda:	4550      	cmp	r0, sl
 8010fdc:	dc01      	bgt.n	8010fe2 <__kernel_rem_pio2f+0x38e>
 8010fde:	4290      	cmp	r0, r2
 8010fe0:	ddf4      	ble.n	8010fcc <__kernel_rem_pio2f+0x378>
 8010fe2:	a858      	add	r0, sp, #352	@ 0x160
 8010fe4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8010fe8:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8010fec:	3b01      	subs	r3, #1
 8010fee:	e735      	b.n	8010e5c <__kernel_rem_pio2f+0x208>
 8010ff0:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8010ff2:	2b02      	cmp	r3, #2
 8010ff4:	dc09      	bgt.n	801100a <__kernel_rem_pio2f+0x3b6>
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	dc27      	bgt.n	801104a <__kernel_rem_pio2f+0x3f6>
 8010ffa:	d040      	beq.n	801107e <__kernel_rem_pio2f+0x42a>
 8010ffc:	f009 0007 	and.w	r0, r9, #7
 8011000:	b059      	add	sp, #356	@ 0x164
 8011002:	ecbd 8b04 	vpop	{d8-d9}
 8011006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801100a:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801100c:	2b03      	cmp	r3, #3
 801100e:	d1f5      	bne.n	8010ffc <__kernel_rem_pio2f+0x3a8>
 8011010:	aa30      	add	r2, sp, #192	@ 0xc0
 8011012:	1f0b      	subs	r3, r1, #4
 8011014:	4413      	add	r3, r2
 8011016:	461a      	mov	r2, r3
 8011018:	4620      	mov	r0, r4
 801101a:	2800      	cmp	r0, #0
 801101c:	dc50      	bgt.n	80110c0 <__kernel_rem_pio2f+0x46c>
 801101e:	4622      	mov	r2, r4
 8011020:	2a01      	cmp	r2, #1
 8011022:	dc5d      	bgt.n	80110e0 <__kernel_rem_pio2f+0x48c>
 8011024:	ab30      	add	r3, sp, #192	@ 0xc0
 8011026:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8010f4c <__kernel_rem_pio2f+0x2f8>
 801102a:	440b      	add	r3, r1
 801102c:	2c01      	cmp	r4, #1
 801102e:	dc67      	bgt.n	8011100 <__kernel_rem_pio2f+0x4ac>
 8011030:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8011034:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8011038:	2e00      	cmp	r6, #0
 801103a:	d167      	bne.n	801110c <__kernel_rem_pio2f+0x4b8>
 801103c:	edc7 6a00 	vstr	s13, [r7]
 8011040:	ed87 7a01 	vstr	s14, [r7, #4]
 8011044:	edc7 7a02 	vstr	s15, [r7, #8]
 8011048:	e7d8      	b.n	8010ffc <__kernel_rem_pio2f+0x3a8>
 801104a:	ab30      	add	r3, sp, #192	@ 0xc0
 801104c:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8010f4c <__kernel_rem_pio2f+0x2f8>
 8011050:	440b      	add	r3, r1
 8011052:	4622      	mov	r2, r4
 8011054:	2a00      	cmp	r2, #0
 8011056:	da24      	bge.n	80110a2 <__kernel_rem_pio2f+0x44e>
 8011058:	b34e      	cbz	r6, 80110ae <__kernel_rem_pio2f+0x45a>
 801105a:	eef1 7a47 	vneg.f32	s15, s14
 801105e:	edc7 7a00 	vstr	s15, [r7]
 8011062:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8011066:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801106a:	aa31      	add	r2, sp, #196	@ 0xc4
 801106c:	2301      	movs	r3, #1
 801106e:	429c      	cmp	r4, r3
 8011070:	da20      	bge.n	80110b4 <__kernel_rem_pio2f+0x460>
 8011072:	b10e      	cbz	r6, 8011078 <__kernel_rem_pio2f+0x424>
 8011074:	eef1 7a67 	vneg.f32	s15, s15
 8011078:	edc7 7a01 	vstr	s15, [r7, #4]
 801107c:	e7be      	b.n	8010ffc <__kernel_rem_pio2f+0x3a8>
 801107e:	ab30      	add	r3, sp, #192	@ 0xc0
 8011080:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8010f4c <__kernel_rem_pio2f+0x2f8>
 8011084:	440b      	add	r3, r1
 8011086:	2c00      	cmp	r4, #0
 8011088:	da05      	bge.n	8011096 <__kernel_rem_pio2f+0x442>
 801108a:	b10e      	cbz	r6, 8011090 <__kernel_rem_pio2f+0x43c>
 801108c:	eef1 7a67 	vneg.f32	s15, s15
 8011090:	edc7 7a00 	vstr	s15, [r7]
 8011094:	e7b2      	b.n	8010ffc <__kernel_rem_pio2f+0x3a8>
 8011096:	ed33 7a01 	vldmdb	r3!, {s14}
 801109a:	3c01      	subs	r4, #1
 801109c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80110a0:	e7f1      	b.n	8011086 <__kernel_rem_pio2f+0x432>
 80110a2:	ed73 7a01 	vldmdb	r3!, {s15}
 80110a6:	3a01      	subs	r2, #1
 80110a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80110ac:	e7d2      	b.n	8011054 <__kernel_rem_pio2f+0x400>
 80110ae:	eef0 7a47 	vmov.f32	s15, s14
 80110b2:	e7d4      	b.n	801105e <__kernel_rem_pio2f+0x40a>
 80110b4:	ecb2 7a01 	vldmia	r2!, {s14}
 80110b8:	3301      	adds	r3, #1
 80110ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80110be:	e7d6      	b.n	801106e <__kernel_rem_pio2f+0x41a>
 80110c0:	ed72 7a01 	vldmdb	r2!, {s15}
 80110c4:	edd2 6a01 	vldr	s13, [r2, #4]
 80110c8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80110cc:	3801      	subs	r0, #1
 80110ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80110d2:	ed82 7a00 	vstr	s14, [r2]
 80110d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80110da:	edc2 7a01 	vstr	s15, [r2, #4]
 80110de:	e79c      	b.n	801101a <__kernel_rem_pio2f+0x3c6>
 80110e0:	ed73 7a01 	vldmdb	r3!, {s15}
 80110e4:	edd3 6a01 	vldr	s13, [r3, #4]
 80110e8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80110ec:	3a01      	subs	r2, #1
 80110ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80110f2:	ed83 7a00 	vstr	s14, [r3]
 80110f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80110fa:	edc3 7a01 	vstr	s15, [r3, #4]
 80110fe:	e78f      	b.n	8011020 <__kernel_rem_pio2f+0x3cc>
 8011100:	ed33 7a01 	vldmdb	r3!, {s14}
 8011104:	3c01      	subs	r4, #1
 8011106:	ee77 7a87 	vadd.f32	s15, s15, s14
 801110a:	e78f      	b.n	801102c <__kernel_rem_pio2f+0x3d8>
 801110c:	eef1 6a66 	vneg.f32	s13, s13
 8011110:	eeb1 7a47 	vneg.f32	s14, s14
 8011114:	edc7 6a00 	vstr	s13, [r7]
 8011118:	ed87 7a01 	vstr	s14, [r7, #4]
 801111c:	eef1 7a67 	vneg.f32	s15, s15
 8011120:	e790      	b.n	8011044 <__kernel_rem_pio2f+0x3f0>
 8011122:	bf00      	nop

08011124 <floorf>:
 8011124:	ee10 3a10 	vmov	r3, s0
 8011128:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801112c:	3a7f      	subs	r2, #127	@ 0x7f
 801112e:	2a16      	cmp	r2, #22
 8011130:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8011134:	dc2b      	bgt.n	801118e <floorf+0x6a>
 8011136:	2a00      	cmp	r2, #0
 8011138:	da12      	bge.n	8011160 <floorf+0x3c>
 801113a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80111a0 <floorf+0x7c>
 801113e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011142:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8011146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801114a:	dd06      	ble.n	801115a <floorf+0x36>
 801114c:	2b00      	cmp	r3, #0
 801114e:	da24      	bge.n	801119a <floorf+0x76>
 8011150:	2900      	cmp	r1, #0
 8011152:	4b14      	ldr	r3, [pc, #80]	@ (80111a4 <floorf+0x80>)
 8011154:	bf08      	it	eq
 8011156:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801115a:	ee00 3a10 	vmov	s0, r3
 801115e:	4770      	bx	lr
 8011160:	4911      	ldr	r1, [pc, #68]	@ (80111a8 <floorf+0x84>)
 8011162:	4111      	asrs	r1, r2
 8011164:	420b      	tst	r3, r1
 8011166:	d0fa      	beq.n	801115e <floorf+0x3a>
 8011168:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 80111a0 <floorf+0x7c>
 801116c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011170:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8011174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011178:	ddef      	ble.n	801115a <floorf+0x36>
 801117a:	2b00      	cmp	r3, #0
 801117c:	bfbe      	ittt	lt
 801117e:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8011182:	fa40 f202 	asrlt.w	r2, r0, r2
 8011186:	189b      	addlt	r3, r3, r2
 8011188:	ea23 0301 	bic.w	r3, r3, r1
 801118c:	e7e5      	b.n	801115a <floorf+0x36>
 801118e:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8011192:	d3e4      	bcc.n	801115e <floorf+0x3a>
 8011194:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011198:	4770      	bx	lr
 801119a:	2300      	movs	r3, #0
 801119c:	e7dd      	b.n	801115a <floorf+0x36>
 801119e:	bf00      	nop
 80111a0:	7149f2ca 	.word	0x7149f2ca
 80111a4:	bf800000 	.word	0xbf800000
 80111a8:	007fffff 	.word	0x007fffff

080111ac <_init>:
 80111ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111ae:	bf00      	nop
 80111b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80111b2:	bc08      	pop	{r3}
 80111b4:	469e      	mov	lr, r3
 80111b6:	4770      	bx	lr

080111b8 <_fini>:
 80111b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111ba:	bf00      	nop
 80111bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80111be:	bc08      	pop	{r3}
 80111c0:	469e      	mov	lr, r3
 80111c2:	4770      	bx	lr
