
STU3_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a950  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800ab28  0800ab28  0000bb28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab68  0800ab68  0000c26c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ab68  0800ab68  0000bb68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab70  0800ab70  0000c26c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab70  0800ab70  0000bb70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ab74  0800ab74  0000bb74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000026c  20000000  0800ab78  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001118  2000026c  0800ade4  0000c26c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001384  0800ade4  0000c384  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c26c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f075  00000000  00000000  0000c29c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000386b  00000000  00000000  0002b311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018e8  00000000  00000000  0002eb80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000136b  00000000  00000000  00030468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028f01  00000000  00000000  000317d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d418  00000000  00000000  0005a6d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011661b  00000000  00000000  00077aec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018e107  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d70  00000000  00000000  0018e14c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00194ebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000026c 	.word	0x2000026c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800ab10 	.word	0x0800ab10

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000270 	.word	0x20000270
 8000214:	0800ab10 	.word	0x0800ab10

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <modbus_Update_All>:
void modbus_theta_acceleration(ModbusHandleTypedef *hmodbus, float theta_accel) {
	hmodbus->RegisterAddress[0x16].U16 = theta_accel;
}
void modbus_Update_All(ModbusHandleTypedef *hmodbus, float r_pos,
		float theta_pos, float r_Velo, float theta_Velo, float r_accel,
		float theta_accel) {
 8000544:	b480      	push	{r7}
 8000546:	b089      	sub	sp, #36	@ 0x24
 8000548:	af00      	add	r7, sp, #0
 800054a:	61f8      	str	r0, [r7, #28]
 800054c:	ed87 0a06 	vstr	s0, [r7, #24]
 8000550:	edc7 0a05 	vstr	s1, [r7, #20]
 8000554:	ed87 1a04 	vstr	s2, [r7, #16]
 8000558:	edc7 1a03 	vstr	s3, [r7, #12]
 800055c:	ed87 2a02 	vstr	s4, [r7, #8]
 8000560:	edc7 2a01 	vstr	s5, [r7, #4]
	hmodbus->RegisterAddress[0x11].U16 = r_pos;
 8000564:	69fb      	ldr	r3, [r7, #28]
 8000566:	685b      	ldr	r3, [r3, #4]
 8000568:	3322      	adds	r3, #34	@ 0x22
 800056a:	edd7 7a06 	vldr	s15, [r7, #24]
 800056e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000572:	ee17 2a90 	vmov	r2, s15
 8000576:	b292      	uxth	r2, r2
 8000578:	801a      	strh	r2, [r3, #0]
	hmodbus->RegisterAddress[0x12].U16 = theta_pos;
 800057a:	69fb      	ldr	r3, [r7, #28]
 800057c:	685b      	ldr	r3, [r3, #4]
 800057e:	3324      	adds	r3, #36	@ 0x24
 8000580:	edd7 7a05 	vldr	s15, [r7, #20]
 8000584:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000588:	ee17 2a90 	vmov	r2, s15
 800058c:	b292      	uxth	r2, r2
 800058e:	801a      	strh	r2, [r3, #0]
	hmodbus->RegisterAddress[0x13].U16 = r_Velo;
 8000590:	69fb      	ldr	r3, [r7, #28]
 8000592:	685b      	ldr	r3, [r3, #4]
 8000594:	3326      	adds	r3, #38	@ 0x26
 8000596:	edd7 7a04 	vldr	s15, [r7, #16]
 800059a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800059e:	ee17 2a90 	vmov	r2, s15
 80005a2:	b292      	uxth	r2, r2
 80005a4:	801a      	strh	r2, [r3, #0]
	hmodbus->RegisterAddress[0x14].U16 = theta_Velo;
 80005a6:	69fb      	ldr	r3, [r7, #28]
 80005a8:	685b      	ldr	r3, [r3, #4]
 80005aa:	3328      	adds	r3, #40	@ 0x28
 80005ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80005b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005b4:	ee17 2a90 	vmov	r2, s15
 80005b8:	b292      	uxth	r2, r2
 80005ba:	801a      	strh	r2, [r3, #0]
	hmodbus->RegisterAddress[0x15].U16 = r_accel;
 80005bc:	69fb      	ldr	r3, [r7, #28]
 80005be:	685b      	ldr	r3, [r3, #4]
 80005c0:	332a      	adds	r3, #42	@ 0x2a
 80005c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80005c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005ca:	ee17 2a90 	vmov	r2, s15
 80005ce:	b292      	uxth	r2, r2
 80005d0:	801a      	strh	r2, [r3, #0]
	hmodbus->RegisterAddress[0x16].U16 = theta_accel;
 80005d2:	69fb      	ldr	r3, [r7, #28]
 80005d4:	685b      	ldr	r3, [r3, #4]
 80005d6:	332c      	adds	r3, #44	@ 0x2c
 80005d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80005dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005e0:	ee17 2a90 	vmov	r2, s15
 80005e4:	b292      	uxth	r2, r2
 80005e6:	801a      	strh	r2, [r3, #0]
}
 80005e8:	bf00      	nop
 80005ea:	3724      	adds	r7, #36	@ 0x24
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr

080005f4 <set_Target_Position_ten_points>:

void set_Target_Position_ten_points(ModbusHandleTypedef *hmodbus, float point,
		uint8_t index) {
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	60f8      	str	r0, [r7, #12]
 80005fc:	ed87 0a02 	vstr	s0, [r7, #8]
 8000600:	460b      	mov	r3, r1
 8000602:	71fb      	strb	r3, [r7, #7]
	hmodbus->RegisterAddress[0x20 + index].U16 = point;
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	685a      	ldr	r2, [r3, #4]
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	3320      	adds	r3, #32
 800060c:	005b      	lsls	r3, r3, #1
 800060e:	4413      	add	r3, r2
 8000610:	edd7 7a02 	vldr	s15, [r7, #8]
 8000614:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000618:	ee17 2a90 	vmov	r2, s15
 800061c:	b292      	uxth	r2, r2
 800061e:	801a      	strh	r2, [r3, #0]
}
 8000620:	bf00      	nop
 8000622:	3714      	adds	r7, #20
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr

0800062c <modbus_set_goal_r_position>:
uint16_t modbus_set_goal_r_position(ModbusHandleTypedef *hmodbus) {
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	uint16_t goal_r_position = hmodbus->RegisterAddress[0x30].U16;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	685b      	ldr	r3, [r3, #4]
 8000638:	3360      	adds	r3, #96	@ 0x60
 800063a:	881b      	ldrh	r3, [r3, #0]
 800063c:	81fb      	strh	r3, [r7, #14]
	return goal_r_position;
 800063e:	89fb      	ldrh	r3, [r7, #14]
}
 8000640:	4618      	mov	r0, r3
 8000642:	3714      	adds	r7, #20
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr

0800064c <modbus_set_goal_theta_position>:
uint16_t modbus_set_goal_theta_position(ModbusHandleTypedef *hmodbus) {
 800064c:	b480      	push	{r7}
 800064e:	b085      	sub	sp, #20
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
	uint16_t goal_theta_position = hmodbus->RegisterAddress[0x31].U16;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	685b      	ldr	r3, [r3, #4]
 8000658:	3362      	adds	r3, #98	@ 0x62
 800065a:	881b      	ldrh	r3, [r3, #0]
 800065c:	81fb      	strh	r3, [r7, #14]
	return goal_theta_position;
 800065e:	89fb      	ldrh	r3, [r7, #14]
}
 8000660:	4618      	mov	r0, r3
 8000662:	3714      	adds	r7, #20
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr

0800066c <Encoder_Init>:
#include "Encoder.h"

#define Count_PER_REV 12000.0f
#define TWO_PI 6.283185f

void Encoder_Init(Encoder *enc, TIM_HandleTypeDef *htim) {
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	6039      	str	r1, [r7, #0]
    enc->htim = htim;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	683a      	ldr	r2, [r7, #0]
 800067a:	601a      	str	r2, [r3, #0]
    HAL_TIM_Encoder_Start(htim, TIM_CHANNEL_ALL);
 800067c:	213c      	movs	r1, #60	@ 0x3c
 800067e:	6838      	ldr	r0, [r7, #0]
 8000680:	f006 f88e 	bl	80067a0 <HAL_TIM_Encoder_Start>

    enc->lastRawPosition = __HAL_TIM_GET_COUNTER(htim);
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800068a:	461a      	mov	r2, r3
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	605a      	str	r2, [r3, #4]
    enc->position = 0;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	f04f 0200 	mov.w	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
    enc->velocity = 0;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	f04f 0200 	mov.w	r2, #0
 800069e:	60da      	str	r2, [r3, #12]
    enc->acceleration = 0;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	f04f 0200 	mov.w	r2, #0
 80006a6:	611a      	str	r2, [r3, #16]
    enc->lastPosition = 0;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	f04f 0200 	mov.w	r2, #0
 80006ae:	615a      	str	r2, [r3, #20]
    enc->lastVelocity = 0;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	f04f 0200 	mov.w	r2, #0
 80006b6:	619a      	str	r2, [r3, #24]
}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <Encoder_setLimit>:
    enc->lastPosition = enc->position;
    enc->lastVelocity = enc->velocity;
}

void Encoder_setLimit(Encoder *enc, float limit)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	ed87 0a00 	vstr	s0, [r7]
		enc->position = limit;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	683a      	ldr	r2, [r7, #0]
 80006d0:	609a      	str	r2, [r3, #8]
}
 80006d2:	bf00      	nop
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
	...

080006e0 <PS2_ReadData>:
uint8_t SPIRx[PS2_DATA_LENGTH];

#define PS2_CS_PORT GPIOC
#define PS2_CS_PIN  GPIO_PIN_10

void PS2_ReadData() {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af02      	add	r7, sp, #8
	HAL_Delay(1);
 80006e6:	2001      	movs	r0, #1
 80006e8:	f002 f978 	bl	80029dc <HAL_Delay>
	HAL_GPIO_WritePin(PS2_CS_PORT, PS2_CS_PIN, GPIO_PIN_RESET);
 80006ec:	2200      	movs	r2, #0
 80006ee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006f2:	4814      	ldr	r0, [pc, #80]	@ (8000744 <PS2_ReadData+0x64>)
 80006f4:	f004 f864 	bl	80047c0 <HAL_GPIO_WritePin>

	for (int i = 0; i < PS2_DATA_LENGTH; i++) {
 80006f8:	2300      	movs	r3, #0
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	e012      	b.n	8000724 <PS2_ReadData+0x44>
		HAL_SPI_TransmitReceive(&hspi1, &SPITx[i], &SPIRx[i], 1, HAL_MAX_DELAY);
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4a11      	ldr	r2, [pc, #68]	@ (8000748 <PS2_ReadData+0x68>)
 8000702:	1899      	adds	r1, r3, r2
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	4a11      	ldr	r2, [pc, #68]	@ (800074c <PS2_ReadData+0x6c>)
 8000708:	441a      	add	r2, r3
 800070a:	f04f 33ff 	mov.w	r3, #4294967295
 800070e:	9300      	str	r3, [sp, #0]
 8000710:	2301      	movs	r3, #1
 8000712:	480f      	ldr	r0, [pc, #60]	@ (8000750 <PS2_ReadData+0x70>)
 8000714:	f005 f95f 	bl	80059d6 <HAL_SPI_TransmitReceive>
		HAL_Delay(1);  // delay เล็กๆ เพื่อให้จอยตอบกลับได้ทัน
 8000718:	2001      	movs	r0, #1
 800071a:	f002 f95f 	bl	80029dc <HAL_Delay>
	for (int i = 0; i < PS2_DATA_LENGTH; i++) {
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	3301      	adds	r3, #1
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2b07      	cmp	r3, #7
 8000728:	dde9      	ble.n	80006fe <PS2_ReadData+0x1e>
	}

	HAL_GPIO_WritePin(PS2_CS_PORT, PS2_CS_PIN, GPIO_PIN_SET);
 800072a:	2201      	movs	r2, #1
 800072c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000730:	4804      	ldr	r0, [pc, #16]	@ (8000744 <PS2_ReadData+0x64>)
 8000732:	f004 f845 	bl	80047c0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000736:	2001      	movs	r0, #1
 8000738:	f002 f950 	bl	80029dc <HAL_Delay>
}
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	48000800 	.word	0x48000800
 8000748:	20000000 	.word	0x20000000
 800074c:	20000288 	.word	0x20000288
 8000750:	20000300 	.word	0x20000300

08000754 <PS2_ButtonCircle>:

uint8_t PS2_ButtonCircle() {
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x20);
 8000758:	4b06      	ldr	r3, [pc, #24]	@ (8000774 <PS2_ButtonCircle+0x20>)
 800075a:	791b      	ldrb	r3, [r3, #4]
 800075c:	f003 0320 	and.w	r3, r3, #32
 8000760:	2b00      	cmp	r3, #0
 8000762:	bf0c      	ite	eq
 8000764:	2301      	moveq	r3, #1
 8000766:	2300      	movne	r3, #0
 8000768:	b2db      	uxtb	r3, r3
}
 800076a:	4618      	mov	r0, r3
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	20000288 	.word	0x20000288

08000778 <PS2_ButtonSquare>:

uint8_t PS2_ButtonSquare() {
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x80);
 800077c:	4b05      	ldr	r3, [pc, #20]	@ (8000794 <PS2_ButtonSquare+0x1c>)
 800077e:	791b      	ldrb	r3, [r3, #4]
 8000780:	b25b      	sxtb	r3, r3
 8000782:	43db      	mvns	r3, r3
 8000784:	b2db      	uxtb	r3, r3
 8000786:	09db      	lsrs	r3, r3, #7
 8000788:	b2db      	uxtb	r3, r3
}
 800078a:	4618      	mov	r0, r3
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr
 8000794:	20000288 	.word	0x20000288

08000798 <PS2_ButtonTriangle>:

uint8_t PS2_ButtonTriangle() {
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x10);
 800079c:	4b06      	ldr	r3, [pc, #24]	@ (80007b8 <PS2_ButtonTriangle+0x20>)
 800079e:	791b      	ldrb	r3, [r3, #4]
 80007a0:	f003 0310 	and.w	r3, r3, #16
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	bf0c      	ite	eq
 80007a8:	2301      	moveq	r3, #1
 80007aa:	2300      	movne	r3, #0
 80007ac:	b2db      	uxtb	r3, r3
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr
 80007b8:	20000288 	.word	0x20000288

080007bc <PS2_ButtonCross>:

uint8_t PS2_ButtonCross() {
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x40);
 80007c0:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <PS2_ButtonCross+0x20>)
 80007c2:	791b      	ldrb	r3, [r3, #4]
 80007c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	bf0c      	ite	eq
 80007cc:	2301      	moveq	r3, #1
 80007ce:	2300      	movne	r3, #0
 80007d0:	b2db      	uxtb	r3, r3
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr
 80007dc:	20000288 	.word	0x20000288

080007e0 <PS2_ButtonR1>:

uint8_t PS2_ButtonR1() {
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x08);
 80007e4:	4b06      	ldr	r3, [pc, #24]	@ (8000800 <PS2_ButtonR1+0x20>)
 80007e6:	791b      	ldrb	r3, [r3, #4]
 80007e8:	f003 0308 	and.w	r3, r3, #8
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	bf0c      	ite	eq
 80007f0:	2301      	moveq	r3, #1
 80007f2:	2300      	movne	r3, #0
 80007f4:	b2db      	uxtb	r3, r3
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr
 8000800:	20000288 	.word	0x20000288

08000804 <PS2_ButtonR2>:

uint8_t PS2_ButtonR2() {
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x02);
 8000808:	4b06      	ldr	r3, [pc, #24]	@ (8000824 <PS2_ButtonR2+0x20>)
 800080a:	791b      	ldrb	r3, [r3, #4]
 800080c:	f003 0302 	and.w	r3, r3, #2
 8000810:	2b00      	cmp	r3, #0
 8000812:	bf0c      	ite	eq
 8000814:	2301      	moveq	r3, #1
 8000816:	2300      	movne	r3, #0
 8000818:	b2db      	uxtb	r3, r3
}
 800081a:	4618      	mov	r0, r3
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	20000288 	.word	0x20000288

08000828 <PS2_ButtonSelect>:

uint8_t PS2_ButtonSelect() {
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
	return !(SPIRx[3] & 0x01);
 800082c:	4b06      	ldr	r3, [pc, #24]	@ (8000848 <PS2_ButtonSelect+0x20>)
 800082e:	78db      	ldrb	r3, [r3, #3]
 8000830:	f003 0301 	and.w	r3, r3, #1
 8000834:	2b00      	cmp	r3, #0
 8000836:	bf0c      	ite	eq
 8000838:	2301      	moveq	r3, #1
 800083a:	2300      	movne	r3, #0
 800083c:	b2db      	uxtb	r3, r3
}
 800083e:	4618      	mov	r0, r3
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	20000288 	.word	0x20000288

0800084c <PS2_ButtonStart>:

uint8_t PS2_ButtonStart() {
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
	return !(SPIRx[3] & 0x08);
 8000850:	4b06      	ldr	r3, [pc, #24]	@ (800086c <PS2_ButtonStart+0x20>)
 8000852:	78db      	ldrb	r3, [r3, #3]
 8000854:	f003 0308 	and.w	r3, r3, #8
 8000858:	2b00      	cmp	r3, #0
 800085a:	bf0c      	ite	eq
 800085c:	2301      	moveq	r3, #1
 800085e:	2300      	movne	r3, #0
 8000860:	b2db      	uxtb	r3, r3
}
 8000862:	4618      	mov	r0, r3
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr
 800086c:	20000288 	.word	0x20000288

08000870 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000878:	4b04      	ldr	r3, [pc, #16]	@ (800088c <modbus_1t5_Timeout+0x1c>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2201      	movs	r2, #1
 800087e:	751a      	strb	r2, [r3, #20]
}
 8000880:	bf00      	nop
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr
 800088c:	20000290 	.word	0x20000290

08000890 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000898:	4b04      	ldr	r3, [pc, #16]	@ (80008ac <modbus_3t5_Timeout+0x1c>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2201      	movs	r2, #1
 800089e:	755a      	strb	r2, [r3, #21]
}
 80008a0:	bf00      	nop
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr
 80008ac:	20000290 	.word	0x20000290

080008b0 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 80008ba:	4b15      	ldr	r3, [pc, #84]	@ (8000910 <modbus_UART_Recived+0x60>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	2201      	movs	r2, #1
 80008c0:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 80008c2:	4b13      	ldr	r3, [pc, #76]	@ (8000910 <modbus_UART_Recived+0x60>)
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	@ 0x3a2
 80008ca:	1c59      	adds	r1, r3, #1
 80008cc:	b289      	uxth	r1, r1
 80008ce:	f8a2 13a2 	strh.w	r1, [r2, #930]	@ 0x3a2
 80008d2:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80008d6:	d210      	bcs.n	80008fa <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80008d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000910 <modbus_UART_Recived+0x60>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	68d8      	ldr	r0, [r3, #12]
 80008de:	4b0c      	ldr	r3, [pc, #48]	@ (8000910 <modbus_UART_Recived+0x60>)
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000910 <modbus_UART_Recived+0x60>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80008ea:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80008ee:	4413      	add	r3, r2
 80008f0:	3302      	adds	r3, #2
 80008f2:	2201      	movs	r2, #1
 80008f4:	4619      	mov	r1, r3
 80008f6:	f007 fd6d 	bl	80083d4 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 80008fa:	4b05      	ldr	r3, [pc, #20]	@ (8000910 <modbus_UART_Recived+0x60>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	691b      	ldr	r3, [r3, #16]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	2200      	movs	r2, #0
 8000904:	625a      	str	r2, [r3, #36]	@ 0x24

}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20000290 	.word	0x20000290

08000914 <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 800091e:	4a24      	ldr	r2, [pc, #144]	@ (80009b0 <Modbus_init+0x9c>)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000924:	4b22      	ldr	r3, [pc, #136]	@ (80009b0 <Modbus_init+0x9c>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	683a      	ldr	r2, [r7, #0]
 800092a:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 800092c:	4b20      	ldr	r3, [pc, #128]	@ (80009b0 <Modbus_init+0x9c>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	691b      	ldr	r3, [r3, #16]
 8000932:	4a20      	ldr	r2, [pc, #128]	@ (80009b4 <Modbus_init+0xa0>)
 8000934:	2114      	movs	r1, #20
 8000936:	4618      	mov	r0, r3
 8000938:	f006 fc42 	bl	80071c0 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 800093c:	4b1c      	ldr	r3, [pc, #112]	@ (80009b0 <Modbus_init+0x9c>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	691b      	ldr	r3, [r3, #16]
 8000942:	4a1d      	ldr	r2, [pc, #116]	@ (80009b8 <Modbus_init+0xa4>)
 8000944:	210e      	movs	r1, #14
 8000946:	4618      	mov	r0, r3
 8000948:	f006 fc3a 	bl	80071c0 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 800094c:	4b18      	ldr	r3, [pc, #96]	@ (80009b0 <Modbus_init+0x9c>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	68db      	ldr	r3, [r3, #12]
 8000952:	4a1a      	ldr	r2, [pc, #104]	@ (80009bc <Modbus_init+0xa8>)
 8000954:	2103      	movs	r1, #3
 8000956:	4618      	mov	r0, r3
 8000958:	f007 fc82 	bl	8008260 <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 800095c:	4b14      	ldr	r3, [pc, #80]	@ (80009b0 <Modbus_init+0x9c>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	68d8      	ldr	r0, [r3, #12]
 8000962:	4b13      	ldr	r3, [pc, #76]	@ (80009b0 <Modbus_init+0x9c>)
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	4b12      	ldr	r3, [pc, #72]	@ (80009b0 <Modbus_init+0x9c>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800096e:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8000972:	4413      	add	r3, r2
 8000974:	3302      	adds	r3, #2
 8000976:	2201      	movs	r2, #1
 8000978:	4619      	mov	r1, r3
 800097a:	f007 fd2b 	bl	80083d4 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 800097e:	4b0c      	ldr	r3, [pc, #48]	@ (80009b0 <Modbus_init+0x9c>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	691b      	ldr	r3, [r3, #16]
 8000984:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000988:	b2db      	uxtb	r3, r3
 800098a:	2b01      	cmp	r3, #1
 800098c:	d10c      	bne.n	80009a8 <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 800098e:	4b08      	ldr	r3, [pc, #32]	@ (80009b0 <Modbus_init+0x9c>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	691b      	ldr	r3, [r3, #16]
 8000994:	4618      	mov	r0, r3
 8000996:	f005 fc05 	bl	80061a4 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 800099a:	4b05      	ldr	r3, [pc, #20]	@ (80009b0 <Modbus_init+0x9c>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	691b      	ldr	r3, [r3, #16]
 80009a0:	2100      	movs	r1, #0
 80009a2:	4618      	mov	r0, r3
 80009a4:	f005 fdba 	bl	800651c <HAL_TIM_OnePulse_Start_IT>
    	}

}
 80009a8:	bf00      	nop
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20000290 	.word	0x20000290
 80009b4:	08000871 	.word	0x08000871
 80009b8:	08000891 	.word	0x08000891
 80009bc:	080008b1 	.word	0x080008b1

080009c0 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 80009c0:	b480      	push	{r7}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	460b      	mov	r3, r1
 80009ca:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 80009cc:	23ff      	movs	r3, #255	@ 0xff
 80009ce:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 80009d0:	23ff      	movs	r3, #255	@ 0xff
 80009d2:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 80009d4:	e013      	b.n	80009fe <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	1c5a      	adds	r2, r3, #1
 80009da:	607a      	str	r2, [r7, #4]
 80009dc:	781a      	ldrb	r2, [r3, #0]
 80009de:	7bbb      	ldrb	r3, [r7, #14]
 80009e0:	4053      	eors	r3, r2
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 80009e6:	4a10      	ldr	r2, [pc, #64]	@ (8000a28 <CRC16+0x68>)
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	4413      	add	r3, r2
 80009ec:	781a      	ldrb	r2, [r3, #0]
 80009ee:	7bfb      	ldrb	r3, [r7, #15]
 80009f0:	4053      	eors	r3, r2
 80009f2:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 80009f4:	4a0d      	ldr	r2, [pc, #52]	@ (8000a2c <CRC16+0x6c>)
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	4413      	add	r3, r2
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 80009fe:	883b      	ldrh	r3, [r7, #0]
 8000a00:	1e5a      	subs	r2, r3, #1
 8000a02:	803a      	strh	r2, [r7, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d1e6      	bne.n	80009d6 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8000a08:	7bfb      	ldrb	r3, [r7, #15]
 8000a0a:	b21b      	sxth	r3, r3
 8000a0c:	021b      	lsls	r3, r3, #8
 8000a0e:	b21a      	sxth	r2, r3
 8000a10:	7bbb      	ldrb	r3, [r7, #14]
 8000a12:	b21b      	sxth	r3, r3
 8000a14:	4313      	orrs	r3, r2
 8000a16:	b21b      	sxth	r3, r3
 8000a18:	b29b      	uxth	r3, r3
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3714      	adds	r7, #20
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	20000108 	.word	0x20000108
 8000a2c:	20000008 	.word	0x20000008

08000a30 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8000a36:	4b80      	ldr	r3, [pc, #512]	@ (8000c38 <Modbus_Protocal_Worker+0x208>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	7e1b      	ldrb	r3, [r3, #24]
 8000a3c:	3b01      	subs	r3, #1
 8000a3e:	2b03      	cmp	r3, #3
 8000a40:	d80a      	bhi.n	8000a58 <Modbus_Protocal_Worker+0x28>
 8000a42:	a201      	add	r2, pc, #4	@ (adr r2, 8000a48 <Modbus_Protocal_Worker+0x18>)
 8000a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a48:	08000a63 	.word	0x08000a63
 8000a4c:	08000c01 	.word	0x08000c01
 8000a50:	08000aed 	.word	0x08000aed
 8000a54:	08000b13 	.word	0x08000b13
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8000a58:	4b77      	ldr	r3, [pc, #476]	@ (8000c38 <Modbus_Protocal_Worker+0x208>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	761a      	strb	r2, [r3, #24]
		break;
 8000a60:	e0e6      	b.n	8000c30 <Modbus_Protocal_Worker+0x200>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 8000a62:	4b75      	ldr	r3, [pc, #468]	@ (8000c38 <Modbus_Protocal_Worker+0x208>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d002      	beq.n	8000a74 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 8000a6e:	f000 f9d5 	bl	8000e1c <Modbus_Emission>
 8000a72:	e01c      	b.n	8000aae <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 8000a74:	4b70      	ldr	r3, [pc, #448]	@ (8000c38 <Modbus_Protocal_Worker+0x208>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	7d9b      	ldrb	r3, [r3, #22]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d017      	beq.n	8000aae <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8000a7e:	4b6e      	ldr	r3, [pc, #440]	@ (8000c38 <Modbus_Protocal_Worker+0x208>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	2200      	movs	r2, #0
 8000a84:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8000a86:	4b6c      	ldr	r3, [pc, #432]	@ (8000c38 <Modbus_Protocal_Worker+0x208>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 8000a8e:	4b6a      	ldr	r3, [pc, #424]	@ (8000c38 <Modbus_Protocal_Worker+0x208>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	691b      	ldr	r3, [r3, #16]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	681a      	ldr	r2, [r3, #0]
 8000a98:	4b67      	ldr	r3, [pc, #412]	@ (8000c38 <Modbus_Protocal_Worker+0x208>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	691b      	ldr	r3, [r3, #16]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f042 0201 	orr.w	r2, r2, #1
 8000aa4:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8000aa6:	4b64      	ldr	r3, [pc, #400]	@ (8000c38 <Modbus_Protocal_Worker+0x208>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	2203      	movs	r2, #3
 8000aac:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8000aae:	4b62      	ldr	r3, [pc, #392]	@ (8000c38 <Modbus_Protocal_Worker+0x208>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ab8:	2b20      	cmp	r3, #32
 8000aba:	f040 80b2 	bne.w	8000c22 <Modbus_Protocal_Worker+0x1f2>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8000abe:	4b5e      	ldr	r3, [pc, #376]	@ (8000c38 <Modbus_Protocal_Worker+0x208>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000ac8:	4b5b      	ldr	r3, [pc, #364]	@ (8000c38 <Modbus_Protocal_Worker+0x208>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	68d8      	ldr	r0, [r3, #12]
 8000ace:	4b5a      	ldr	r3, [pc, #360]	@ (8000c38 <Modbus_Protocal_Worker+0x208>)
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	4b59      	ldr	r3, [pc, #356]	@ (8000c38 <Modbus_Protocal_Worker+0x208>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000ada:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8000ade:	4413      	add	r3, r2
 8000ae0:	3302      	adds	r3, #2
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	f007 fc75 	bl	80083d4 <HAL_UART_Receive_IT>
		}
		break;
 8000aea:	e09a      	b.n	8000c22 <Modbus_Protocal_Worker+0x1f2>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8000aec:	4b52      	ldr	r3, [pc, #328]	@ (8000c38 <Modbus_Protocal_Worker+0x208>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	7d1b      	ldrb	r3, [r3, #20]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	f000 8097 	beq.w	8000c26 <Modbus_Protocal_Worker+0x1f6>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 8000af8:	4b4f      	ldr	r3, [pc, #316]	@ (8000c38 <Modbus_Protocal_Worker+0x208>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2200      	movs	r2, #0
 8000afe:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8000b00:	4b4d      	ldr	r3, [pc, #308]	@ (8000c38 <Modbus_Protocal_Worker+0x208>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	22fe      	movs	r2, #254	@ 0xfe
 8000b06:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8000b08:	4b4b      	ldr	r3, [pc, #300]	@ (8000c38 <Modbus_Protocal_Worker+0x208>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2204      	movs	r2, #4
 8000b0e:	761a      	strb	r2, [r3, #24]
		}
		break;
 8000b10:	e089      	b.n	8000c26 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 8000b12:	4b49      	ldr	r3, [pc, #292]	@ (8000c38 <Modbus_Protocal_Worker+0x208>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	7d9b      	ldrb	r3, [r3, #22]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d009      	beq.n	8000b30 <Modbus_Protocal_Worker+0x100>
		{

			if(!hModbus->RecvStatus)
 8000b1c:	4b46      	ldr	r3, [pc, #280]	@ (8000c38 <Modbus_Protocal_Worker+0x208>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d103      	bne.n	8000b30 <Modbus_Protocal_Worker+0x100>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8000b28:	4b43      	ldr	r3, [pc, #268]	@ (8000c38 <Modbus_Protocal_Worker+0x208>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	22ff      	movs	r2, #255	@ 0xff
 8000b2e:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8000b30:	4b41      	ldr	r3, [pc, #260]	@ (8000c38 <Modbus_Protocal_Worker+0x208>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8000b38:	f113 0f02 	cmn.w	r3, #2
 8000b3c:	d150      	bne.n	8000be0 <Modbus_Protocal_Worker+0x1b0>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8000b3e:	4b3e      	ldr	r3, [pc, #248]	@ (8000c38 <Modbus_Protocal_Worker+0x208>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	2200      	movs	r2, #0
 8000b44:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8000b46:	4b3c      	ldr	r3, [pc, #240]	@ (8000c38 <Modbus_Protocal_Worker+0x208>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f203 2272 	addw	r2, r3, #626	@ 0x272
 8000b4e:	4b3a      	ldr	r3, [pc, #232]	@ (8000c38 <Modbus_Protocal_Worker+0x208>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000b56:	3b02      	subs	r3, #2
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4610      	mov	r0, r2
 8000b5c:	f7ff ff30 	bl	80009c0 <CRC16>
 8000b60:	4603      	mov	r3, r0
 8000b62:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8000b64:	793a      	ldrb	r2, [r7, #4]
 8000b66:	4b34      	ldr	r3, [pc, #208]	@ (8000c38 <Modbus_Protocal_Worker+0x208>)
 8000b68:	6819      	ldr	r1, [r3, #0]
 8000b6a:	4b33      	ldr	r3, [pc, #204]	@ (8000c38 <Modbus_Protocal_Worker+0x208>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000b72:	3b02      	subs	r3, #2
 8000b74:	440b      	add	r3, r1
 8000b76:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	d10c      	bne.n	8000b98 <Modbus_Protocal_Worker+0x168>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8000b7e:	797a      	ldrb	r2, [r7, #5]
 8000b80:	4b2d      	ldr	r3, [pc, #180]	@ (8000c38 <Modbus_Protocal_Worker+0x208>)
 8000b82:	6819      	ldr	r1, [r3, #0]
 8000b84:	4b2c      	ldr	r3, [pc, #176]	@ (8000c38 <Modbus_Protocal_Worker+0x208>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000b8c:	3b01      	subs	r3, #1
 8000b8e:	440b      	add	r3, r1
 8000b90:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d004      	beq.n	8000ba2 <Modbus_Protocal_Worker+0x172>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8000b98:	4b27      	ldr	r3, [pc, #156]	@ (8000c38 <Modbus_Protocal_Worker+0x208>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	22ff      	movs	r2, #255	@ 0xff
 8000b9e:	75da      	strb	r2, [r3, #23]
				break;
 8000ba0:	e046      	b.n	8000c30 <Modbus_Protocal_Worker+0x200>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8000ba2:	4b25      	ldr	r3, [pc, #148]	@ (8000c38 <Modbus_Protocal_Worker+0x208>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 8000baa:	4b23      	ldr	r3, [pc, #140]	@ (8000c38 <Modbus_Protocal_Worker+0x208>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d113      	bne.n	8000bdc <Modbus_Protocal_Worker+0x1ac>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8000bb4:	4b20      	ldr	r3, [pc, #128]	@ (8000c38 <Modbus_Protocal_Worker+0x208>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8000bbc:	4b1e      	ldr	r3, [pc, #120]	@ (8000c38 <Modbus_Protocal_Worker+0x208>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 8000bc4:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8000bc6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c38 <Modbus_Protocal_Worker+0x208>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000bce:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	f009 ff6d 	bl	800aab0 <memcpy>

			//execute command
			Modbus_frame_response();
 8000bd6:	f000 f909 	bl	8000dec <Modbus_frame_response>
 8000bda:	e001      	b.n	8000be0 <Modbus_Protocal_Worker+0x1b0>
				break;
 8000bdc:	bf00      	nop
					}
		break;


	}
}
 8000bde:	e027      	b.n	8000c30 <Modbus_Protocal_Worker+0x200>
		if(hModbus->Flag_T35TimeOut)
 8000be0:	4b15      	ldr	r3, [pc, #84]	@ (8000c38 <Modbus_Protocal_Worker+0x208>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	7d5b      	ldrb	r3, [r3, #21]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d01f      	beq.n	8000c2a <Modbus_Protocal_Worker+0x1fa>
			hModbus->Mstatus = Modbus_state_Idle;
 8000bea:	4b13      	ldr	r3, [pc, #76]	@ (8000c38 <Modbus_Protocal_Worker+0x208>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2201      	movs	r2, #1
 8000bf0:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8000bf2:	4b11      	ldr	r3, [pc, #68]	@ (8000c38 <Modbus_Protocal_Worker+0x208>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f007 fcb7 	bl	800856c <HAL_UART_AbortReceive>
		break;
 8000bfe:	e014      	b.n	8000c2a <Modbus_Protocal_Worker+0x1fa>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000c00:	4b0d      	ldr	r3, [pc, #52]	@ (8000c38 <Modbus_Protocal_Worker+0x208>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	68db      	ldr	r3, [r3, #12]
 8000c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c0a:	2b20      	cmp	r3, #32
 8000c0c:	d10f      	bne.n	8000c2e <Modbus_Protocal_Worker+0x1fe>
			hModbus->TxCount=0;
 8000c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c38 <Modbus_Protocal_Worker+0x208>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	2200      	movs	r2, #0
 8000c14:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 8000c18:	4b07      	ldr	r3, [pc, #28]	@ (8000c38 <Modbus_Protocal_Worker+0x208>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	761a      	strb	r2, [r3, #24]
		break;
 8000c20:	e005      	b.n	8000c2e <Modbus_Protocal_Worker+0x1fe>
		break;
 8000c22:	bf00      	nop
 8000c24:	e004      	b.n	8000c30 <Modbus_Protocal_Worker+0x200>
		break;
 8000c26:	bf00      	nop
 8000c28:	e002      	b.n	8000c30 <Modbus_Protocal_Worker+0x200>
		break;
 8000c2a:	bf00      	nop
 8000c2c:	e000      	b.n	8000c30 <Modbus_Protocal_Worker+0x200>
		break;
 8000c2e:	bf00      	nop
}
 8000c30:	bf00      	nop
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20000290 	.word	0x20000290

08000c3c <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8000c42:	4b1d      	ldr	r3, [pc, #116]	@ (8000cb8 <modbusWrite1Register+0x7c>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	7e9b      	ldrb	r3, [r3, #26]
 8000c48:	021b      	lsls	r3, r3, #8
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	4a1a      	ldr	r2, [pc, #104]	@ (8000cb8 <modbusWrite1Register+0x7c>)
 8000c4e:	6812      	ldr	r2, [r2, #0]
 8000c50:	7ed2      	ldrb	r2, [r2, #27]
 8000c52:	4413      	add	r3, r2
 8000c54:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 8000c56:	88fa      	ldrh	r2, [r7, #6]
 8000c58:	4b17      	ldr	r3, [pc, #92]	@ (8000cb8 <modbusWrite1Register+0x7c>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	d903      	bls.n	8000c6a <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8000c62:	2002      	movs	r0, #2
 8000c64:	f000 f8a0 	bl	8000da8 <ModbusErrorReply>
			 return;
 8000c68:	e023      	b.n	8000cb2 <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8000c6a:	4b13      	ldr	r3, [pc, #76]	@ (8000cb8 <modbusWrite1Register+0x7c>)
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	4b12      	ldr	r3, [pc, #72]	@ (8000cb8 <modbusWrite1Register+0x7c>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	6859      	ldr	r1, [r3, #4]
 8000c74:	88fb      	ldrh	r3, [r7, #6]
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	440b      	add	r3, r1
 8000c7a:	7f12      	ldrb	r2, [r2, #28]
 8000c7c:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb8 <modbusWrite1Register+0x7c>)
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	4b0d      	ldr	r3, [pc, #52]	@ (8000cb8 <modbusWrite1Register+0x7c>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	6859      	ldr	r1, [r3, #4]
 8000c88:	88fb      	ldrh	r3, [r7, #6]
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	440b      	add	r3, r1
 8000c8e:	7f52      	ldrb	r2, [r2, #29]
 8000c90:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8000c92:	4b09      	ldr	r3, [pc, #36]	@ (8000cb8 <modbusWrite1Register+0x7c>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f203 1045 	addw	r0, r3, #325	@ 0x145
			hModbus->Rxframe,
 8000c9a:	4b07      	ldr	r3, [pc, #28]	@ (8000cb8 <modbusWrite1Register+0x7c>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 8000ca0:	2208      	movs	r2, #8
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	f009 ff04 	bl	800aab0 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8000ca8:	4b03      	ldr	r3, [pc, #12]	@ (8000cb8 <modbusWrite1Register+0x7c>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2205      	movs	r2, #5
 8000cae:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271



}
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000290 	.word	0x20000290

08000cbc <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8000cbc:	b590      	push	{r4, r7, lr}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8000cc2:	4b38      	ldr	r3, [pc, #224]	@ (8000da4 <modbusRead1Register+0xe8>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	7f1b      	ldrb	r3, [r3, #28]
 8000cc8:	021b      	lsls	r3, r3, #8
 8000cca:	b29b      	uxth	r3, r3
 8000ccc:	4a35      	ldr	r2, [pc, #212]	@ (8000da4 <modbusRead1Register+0xe8>)
 8000cce:	6812      	ldr	r2, [r2, #0]
 8000cd0:	7f52      	ldrb	r2, [r2, #29]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8000cd6:	4b33      	ldr	r3, [pc, #204]	@ (8000da4 <modbusRead1Register+0xe8>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	7e9b      	ldrb	r3, [r3, #26]
 8000cdc:	021b      	lsls	r3, r3, #8
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	4a30      	ldr	r2, [pc, #192]	@ (8000da4 <modbusRead1Register+0xe8>)
 8000ce2:	6812      	ldr	r2, [r2, #0]
 8000ce4:	7ed2      	ldrb	r2, [r2, #27]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8000cea:	88fb      	ldrh	r3, [r7, #6]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d002      	beq.n	8000cf6 <modbusRead1Register+0x3a>
 8000cf0:	88fb      	ldrh	r3, [r7, #6]
 8000cf2:	2b7d      	cmp	r3, #125	@ 0x7d
 8000cf4:	d903      	bls.n	8000cfe <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8000cf6:	2003      	movs	r0, #3
 8000cf8:	f000 f856 	bl	8000da8 <ModbusErrorReply>
		 return;
 8000cfc:	e04e      	b.n	8000d9c <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8000cfe:	88ba      	ldrh	r2, [r7, #4]
 8000d00:	4b28      	ldr	r3, [pc, #160]	@ (8000da4 <modbusRead1Register+0xe8>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d808      	bhi.n	8000d1c <modbusRead1Register+0x60>
 8000d0a:	88ba      	ldrh	r2, [r7, #4]
 8000d0c:	88fb      	ldrh	r3, [r7, #6]
 8000d0e:	4413      	add	r3, r2
 8000d10:	461a      	mov	r2, r3
 8000d12:	4b24      	ldr	r3, [pc, #144]	@ (8000da4 <modbusRead1Register+0xe8>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	689b      	ldr	r3, [r3, #8]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d903      	bls.n	8000d24 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8000d1c:	2002      	movs	r0, #2
 8000d1e:	f000 f843 	bl	8000da8 <ModbusErrorReply>
		 return;
 8000d22:	e03b      	b.n	8000d9c <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8000d24:	4b1f      	ldr	r3, [pc, #124]	@ (8000da4 <modbusRead1Register+0xe8>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2203      	movs	r2, #3
 8000d2a:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8000d2e:	88fb      	ldrh	r3, [r7, #6]
 8000d30:	b2da      	uxtb	r2, r3
 8000d32:	4b1c      	ldr	r3, [pc, #112]	@ (8000da4 <modbusRead1Register+0xe8>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	0052      	lsls	r2, r2, #1
 8000d38:	b2d2      	uxtb	r2, r2
 8000d3a:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8000d3e:	2400      	movs	r4, #0
 8000d40:	e020      	b.n	8000d84 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8000d42:	4b18      	ldr	r3, [pc, #96]	@ (8000da4 <modbusRead1Register+0xe8>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	685a      	ldr	r2, [r3, #4]
 8000d48:	88bb      	ldrh	r3, [r7, #4]
 8000d4a:	4423      	add	r3, r4
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	18d1      	adds	r1, r2, r3
 8000d50:	4b14      	ldr	r3, [pc, #80]	@ (8000da4 <modbusRead1Register+0xe8>)
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	1c63      	adds	r3, r4, #1
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	7849      	ldrb	r1, [r1, #1]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	460a      	mov	r2, r1
 8000d5e:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8000d62:	4b10      	ldr	r3, [pc, #64]	@ (8000da4 <modbusRead1Register+0xe8>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	685a      	ldr	r2, [r3, #4]
 8000d68:	88bb      	ldrh	r3, [r7, #4]
 8000d6a:	4423      	add	r3, r4
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	18d1      	adds	r1, r2, r3
 8000d70:	4b0c      	ldr	r3, [pc, #48]	@ (8000da4 <modbusRead1Register+0xe8>)
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	0063      	lsls	r3, r4, #1
 8000d76:	3303      	adds	r3, #3
 8000d78:	7809      	ldrb	r1, [r1, #0]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	460a      	mov	r2, r1
 8000d7e:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	for(i=0; i<numberOfDataToRead;i++)
 8000d82:	3401      	adds	r4, #1
 8000d84:	88fb      	ldrh	r3, [r7, #6]
 8000d86:	429c      	cmp	r4, r3
 8000d88:	dbdb      	blt.n	8000d42 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8000d8a:	88fb      	ldrh	r3, [r7, #6]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	4b04      	ldr	r3, [pc, #16]	@ (8000da4 <modbusRead1Register+0xe8>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	0052      	lsls	r2, r2, #1
 8000d96:	b2d2      	uxtb	r2, r2
 8000d98:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271

}
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd90      	pop	{r4, r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000290 	.word	0x20000290

08000da8 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8000db2:	4b0d      	ldr	r3, [pc, #52]	@ (8000de8 <ModbusErrorReply+0x40>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	7e5a      	ldrb	r2, [r3, #25]
 8000db8:	4b0b      	ldr	r3, [pc, #44]	@ (8000de8 <ModbusErrorReply+0x40>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8000dc0:	b2d2      	uxtb	r2, r2
 8000dc2:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->Txframe[1] = Errorcode;
 8000dc6:	4b08      	ldr	r3, [pc, #32]	@ (8000de8 <ModbusErrorReply+0x40>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	79fa      	ldrb	r2, [r7, #7]
 8000dcc:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
	hModbus->TxCount = 2;
 8000dd0:	4b05      	ldr	r3, [pc, #20]	@ (8000de8 <ModbusErrorReply+0x40>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2202      	movs	r2, #2
 8000dd6:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271
}
 8000dda:	bf00      	nop
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	20000290 	.word	0x20000290

08000dec <Modbus_frame_response>:

void Modbus_frame_response()
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8000df0:	4b09      	ldr	r3, [pc, #36]	@ (8000e18 <Modbus_frame_response+0x2c>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	7e5b      	ldrb	r3, [r3, #25]
 8000df6:	2b03      	cmp	r3, #3
 8000df8:	d004      	beq.n	8000e04 <Modbus_frame_response+0x18>
 8000dfa:	2b06      	cmp	r3, #6
 8000dfc:	d105      	bne.n	8000e0a <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8000dfe:	f7ff ff1d 	bl	8000c3c <modbusWrite1Register>
		break;
 8000e02:	e006      	b.n	8000e12 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8000e04:	f7ff ff5a 	bl	8000cbc <modbusRead1Register>
		break;
 8000e08:	e003      	b.n	8000e12 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8000e0a:	2001      	movs	r0, #1
 8000e0c:	f7ff ffcc 	bl	8000da8 <ModbusErrorReply>
		break;
 8000e10:	bf00      	nop

	}
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000290 	.word	0x20000290

08000e1c <Modbus_Emission>:

void Modbus_Emission()
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000e22:	4b3c      	ldr	r3, [pc, #240]	@ (8000f14 <Modbus_Emission+0xf8>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e2c:	2b20      	cmp	r3, #32
 8000e2e:	d15d      	bne.n	8000eec <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8000e30:	4b38      	ldr	r3, [pc, #224]	@ (8000f14 <Modbus_Emission+0xf8>)
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	4b37      	ldr	r3, [pc, #220]	@ (8000f14 <Modbus_Emission+0xf8>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	7812      	ldrb	r2, [r2, #0]
 8000e3a:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8000e3e:	4b35      	ldr	r3, [pc, #212]	@ (8000f14 <Modbus_Emission+0xf8>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 8000e46:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8000e48:	4b32      	ldr	r3, [pc, #200]	@ (8000f14 <Modbus_Emission+0xf8>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f203 1145 	addw	r1, r3, #325	@ 0x145
				hModbus->TxCount
 8000e50:	4b30      	ldr	r3, [pc, #192]	@ (8000f14 <Modbus_Emission+0xf8>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
		memcpy
 8000e58:	461a      	mov	r2, r3
 8000e5a:	f009 fe29 	bl	800aab0 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8000e5e:	4b2d      	ldr	r3, [pc, #180]	@ (8000f14 <Modbus_Emission+0xf8>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
 8000e66:	461a      	mov	r2, r3
 8000e68:	4b2a      	ldr	r3, [pc, #168]	@ (8000f14 <Modbus_Emission+0xf8>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	3203      	adds	r2, #3
 8000e6e:	b292      	uxth	r2, r2
 8000e70:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8000e74:	4b27      	ldr	r3, [pc, #156]	@ (8000f14 <Modbus_Emission+0xf8>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8000e7c:	4b25      	ldr	r3, [pc, #148]	@ (8000f14 <Modbus_Emission+0xf8>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8000e84:	3b02      	subs	r3, #2
 8000e86:	4619      	mov	r1, r3
 8000e88:	4610      	mov	r0, r2
 8000e8a:	f7ff fd99 	bl	80009c0 <CRC16>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8000e92:	4b20      	ldr	r3, [pc, #128]	@ (8000f14 <Modbus_Emission+0xf8>)
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	4b1f      	ldr	r3, [pc, #124]	@ (8000f14 <Modbus_Emission+0xf8>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8000e9e:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8000ea0:	7939      	ldrb	r1, [r7, #4]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	460a      	mov	r2, r1
 8000ea6:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8000eaa:	4b1a      	ldr	r3, [pc, #104]	@ (8000f14 <Modbus_Emission+0xf8>)
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	4b19      	ldr	r3, [pc, #100]	@ (8000f14 <Modbus_Emission+0xf8>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8000eb6:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8000eb8:	7979      	ldrb	r1, [r7, #5]
 8000eba:	4413      	add	r3, r2
 8000ebc:	460a      	mov	r2, r1
 8000ebe:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000ec2:	4b14      	ldr	r3, [pc, #80]	@ (8000f14 <Modbus_Emission+0xf8>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ecc:	2b20      	cmp	r3, #32
 8000ece:	d10d      	bne.n	8000eec <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8000ed0:	4b10      	ldr	r3, [pc, #64]	@ (8000f14 <Modbus_Emission+0xf8>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8000ed6:	4b0f      	ldr	r3, [pc, #60]	@ (8000f14 <Modbus_Emission+0xf8>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8000ede:	4b0d      	ldr	r3, [pc, #52]	@ (8000f14 <Modbus_Emission+0xf8>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8000ee2:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	f007 fac0 	bl	800846c <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8000eec:	4b09      	ldr	r3, [pc, #36]	@ (8000f14 <Modbus_Emission+0xf8>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8000ef4:	4b07      	ldr	r3, [pc, #28]	@ (8000f14 <Modbus_Emission+0xf8>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 8000efc:	4b05      	ldr	r3, [pc, #20]	@ (8000f14 <Modbus_Emission+0xf8>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2200      	movs	r2, #0
 8000f02:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 8000f04:	4b03      	ldr	r3, [pc, #12]	@ (8000f14 <Modbus_Emission+0xf8>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2202      	movs	r2, #2
 8000f0a:	761a      	strb	r2, [r3, #24]
}
 8000f0c:	bf00      	nop
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000290 	.word	0x20000290

08000f18 <InitTrajectorySegment>:
#include "Trajectory.h"
#include <math.h>

void InitTrajectorySegment(TrajectorySegment *seg, float start, float end, float v_max, float a_max, float t_start) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08c      	sub	sp, #48	@ 0x30
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6178      	str	r0, [r7, #20]
 8000f20:	ed87 0a04 	vstr	s0, [r7, #16]
 8000f24:	edc7 0a03 	vstr	s1, [r7, #12]
 8000f28:	ed87 1a02 	vstr	s2, [r7, #8]
 8000f2c:	edc7 1a01 	vstr	s3, [r7, #4]
 8000f30:	ed87 2a00 	vstr	s4, [r7]
    float D = end - start;
 8000f34:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f38:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f40:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float dir = (D >= 0) ? 1.0f : -1.0f;
 8000f44:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000f48:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f50:	db02      	blt.n	8000f58 <InitTrajectorySegment+0x40>
 8000f52:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000f56:	e000      	b.n	8000f5a <InitTrajectorySegment+0x42>
 8000f58:	4b43      	ldr	r3, [pc, #268]	@ (8001068 <InitTrajectorySegment+0x150>)
 8000f5a:	627b      	str	r3, [r7, #36]	@ 0x24
    D = fabsf(D);
 8000f5c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000f60:	eef0 7ae7 	vabs.f32	s15, s15
 8000f64:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

    float t_accel = v_max / a_max;
 8000f68:	edd7 6a02 	vldr	s13, [r7, #8]
 8000f6c:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f74:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float d_accel = 0.5f * a_max * t_accel * t_accel;
 8000f78:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f7c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000f80:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f84:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000f88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f8c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000f90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f94:	edc7 7a08 	vstr	s15, [r7, #32]

    if (2 * d_accel > D) {
 8000f98:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f9c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000fa0:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8000fa4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fac:	d517      	bpl.n	8000fde <InitTrajectorySegment+0xc6>
        // Triangular profile
        t_accel = sqrtf(D / a_max);
 8000fae:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8000fb2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fb6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000fba:	eeb0 0a66 	vmov.f32	s0, s13
 8000fbe:	f009 fd85 	bl	800aacc <sqrtf>
 8000fc2:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
        seg->t_const = 0;
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	f04f 0200 	mov.w	r2, #0
 8000fcc:	615a      	str	r2, [r3, #20]
        seg->t_total = 2 * t_accel;
 8000fce:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000fd2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	edc3 7a07 	vstr	s15, [r3, #28]
 8000fdc:	e01e      	b.n	800101c <InitTrajectorySegment+0x104>
    } else {
        // Trapezoidal profile
        float d_const = D - 2 * d_accel;
 8000fde:	edd7 7a08 	vldr	s15, [r7, #32]
 8000fe2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000fe6:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8000fea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fee:	edc7 7a07 	vstr	s15, [r7, #28]
        seg->t_const = d_const / v_max;
 8000ff2:	edd7 6a07 	vldr	s13, [r7, #28]
 8000ff6:	ed97 7a02 	vldr	s14, [r7, #8]
 8000ffa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	edc3 7a05 	vstr	s15, [r3, #20]
        seg->t_total = 2 * t_accel + seg->t_const;
 8001004:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001008:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001012:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	edc3 7a07 	vstr	s15, [r3, #28]
    }

    seg->start_pos = start;
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	601a      	str	r2, [r3, #0]
    seg->end_pos = end;
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	68fa      	ldr	r2, [r7, #12]
 8001026:	605a      	str	r2, [r3, #4]
    seg->v_max = v_max * dir;
 8001028:	ed97 7a02 	vldr	s14, [r7, #8]
 800102c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001030:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	edc3 7a02 	vstr	s15, [r3, #8]
    seg->a_max = a_max * dir;
 800103a:	ed97 7a01 	vldr	s14, [r7, #4]
 800103e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	edc3 7a03 	vstr	s15, [r3, #12]
    seg->t_accel = t_accel;
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001050:	611a      	str	r2, [r3, #16]
    seg->t_decel = t_accel;
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001056:	619a      	str	r2, [r3, #24]
    seg->t_start = t_start;
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	683a      	ldr	r2, [r7, #0]
 800105c:	621a      	str	r2, [r3, #32]
}
 800105e:	bf00      	nop
 8001060:	3730      	adds	r7, #48	@ 0x30
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	bf800000 	.word	0xbf800000

0800106c <GetTrajectoryPosition>:

float GetTrajectoryPosition(const TrajectorySegment *seg, float t_global) {
 800106c:	b480      	push	{r7}
 800106e:	b08f      	sub	sp, #60	@ 0x3c
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	ed87 0a00 	vstr	s0, [r7]
    float t = t_global - seg->t_start;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	edd3 7a08 	vldr	s15, [r3, #32]
 800107e:	ed97 7a00 	vldr	s14, [r7]
 8001082:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001086:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    if (t < 0) return seg->start_pos;
 800108a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800108e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001096:	d503      	bpl.n	80010a0 <GetTrajectoryPosition+0x34>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	edd3 7a00 	vldr	s15, [r3]
 800109e:	e0b4      	b.n	800120a <GetTrajectoryPosition+0x19e>
    if (t >= seg->t_total) return seg->end_pos;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	edd3 7a07 	vldr	s15, [r3, #28]
 80010a6:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80010aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b2:	db03      	blt.n	80010bc <GetTrajectoryPosition+0x50>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	edd3 7a01 	vldr	s15, [r3, #4]
 80010ba:	e0a6      	b.n	800120a <GetTrajectoryPosition+0x19e>

    float a = seg->a_max;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	633b      	str	r3, [r7, #48]	@ 0x30
    float v = seg->v_max;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float p0 = seg->start_pos;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (t < seg->t_accel) {
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	edd3 7a04 	vldr	s15, [r3, #16]
 80010d4:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80010d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e0:	d512      	bpl.n	8001108 <GetTrajectoryPosition+0x9c>
        return p0 + 0.5f * a * t * t;
 80010e2:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80010e6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80010ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 80010ee:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80010f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010f6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80010fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010fe:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001102:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001106:	e080      	b.n	800120a <GetTrajectoryPosition+0x19e>
    } else if (t < seg->t_accel + seg->t_const) {
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	ed93 7a04 	vldr	s14, [r3, #16]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	edd3 7a05 	vldr	s15, [r3, #20]
 8001114:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001118:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800111c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001124:	d525      	bpl.n	8001172 <GetTrajectoryPosition+0x106>
        float t1 = seg->t_accel;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	691b      	ldr	r3, [r3, #16]
 800112a:	613b      	str	r3, [r7, #16]
        float p1 = p0 + 0.5f * a * t1 * t1;
 800112c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001130:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001134:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001138:	edd7 7a04 	vldr	s15, [r7, #16]
 800113c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001140:	edd7 7a04 	vldr	s15, [r7, #16]
 8001144:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001148:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800114c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001150:	edc7 7a03 	vstr	s15, [r7, #12]
        return p1 + v * (t - t1);
 8001154:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001158:	edd7 7a04 	vldr	s15, [r7, #16]
 800115c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001160:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001164:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001168:	edd7 7a03 	vldr	s15, [r7, #12]
 800116c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001170:	e04b      	b.n	800120a <GetTrajectoryPosition+0x19e>
    } else {
        float t1 = seg->t_accel;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	691b      	ldr	r3, [r3, #16]
 8001176:	627b      	str	r3, [r7, #36]	@ 0x24
        float t2 = seg->t_const;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	695b      	ldr	r3, [r3, #20]
 800117c:	623b      	str	r3, [r7, #32]
        float p1 = p0 + 0.5f * a * t1 * t1;
 800117e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001182:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001186:	ee27 7a87 	vmul.f32	s14, s15, s14
 800118a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800118e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001192:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800119a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800119e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011a2:	edc7 7a07 	vstr	s15, [r7, #28]
        float p2 = p1 + v * t2;
 80011a6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80011aa:	edd7 7a08 	vldr	s15, [r7, #32]
 80011ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011b2:	ed97 7a07 	vldr	s14, [r7, #28]
 80011b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ba:	edc7 7a06 	vstr	s15, [r7, #24]
        float td = t - t1 - t2;
 80011be:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80011c2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80011c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011ca:	edd7 7a08 	vldr	s15, [r7, #32]
 80011ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011d2:	edc7 7a05 	vstr	s15, [r7, #20]
        return p2 + v * td - 0.5f * a * td * td;
 80011d6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80011da:	edd7 7a05 	vldr	s15, [r7, #20]
 80011de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80011e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011ea:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80011ee:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80011f2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80011f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80011fa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80011fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8001202:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001206:	ee77 7a67 	vsub.f32	s15, s14, s15
    }
}
 800120a:	eeb0 0a67 	vmov.f32	s0, s15
 800120e:	373c      	adds	r7, #60	@ 0x3c
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <GetTrajectoryVelocity>:

float GetTrajectoryVelocity(const TrajectorySegment *seg, float t_global) {
 8001218:	b480      	push	{r7}
 800121a:	b087      	sub	sp, #28
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	ed87 0a00 	vstr	s0, [r7]
    float t = t_global - seg->t_start;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	edd3 7a08 	vldr	s15, [r3, #32]
 800122a:	ed97 7a00 	vldr	s14, [r7]
 800122e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001232:	edc7 7a05 	vstr	s15, [r7, #20]
    if (t < 0) return 0;
 8001236:	edd7 7a05 	vldr	s15, [r7, #20]
 800123a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800123e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001242:	d502      	bpl.n	800124a <GetTrajectoryVelocity+0x32>
 8001244:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 80012f4 <GetTrajectoryVelocity+0xdc>
 8001248:	e04d      	b.n	80012e6 <GetTrajectoryVelocity+0xce>
    if (t >= seg->t_total) return 0;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001250:	ed97 7a05 	vldr	s14, [r7, #20]
 8001254:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800125c:	db02      	blt.n	8001264 <GetTrajectoryVelocity+0x4c>
 800125e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80012f4 <GetTrajectoryVelocity+0xdc>
 8001262:	e040      	b.n	80012e6 <GetTrajectoryVelocity+0xce>

    float a = seg->a_max;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	613b      	str	r3, [r7, #16]
    float v = seg->v_max;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	60fb      	str	r3, [r7, #12]

    if (t < seg->t_accel) {
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	edd3 7a04 	vldr	s15, [r3, #16]
 8001276:	ed97 7a05 	vldr	s14, [r7, #20]
 800127a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800127e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001282:	d506      	bpl.n	8001292 <GetTrajectoryVelocity+0x7a>
        return a * t;
 8001284:	ed97 7a04 	vldr	s14, [r7, #16]
 8001288:	edd7 7a05 	vldr	s15, [r7, #20]
 800128c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001290:	e029      	b.n	80012e6 <GetTrajectoryVelocity+0xce>
    } else if (t < seg->t_accel + seg->t_const) {
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	ed93 7a04 	vldr	s14, [r3, #16]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	edd3 7a05 	vldr	s15, [r3, #20]
 800129e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012a2:	ed97 7a05 	vldr	s14, [r7, #20]
 80012a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ae:	d502      	bpl.n	80012b6 <GetTrajectoryVelocity+0x9e>
        return v;
 80012b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012b4:	e017      	b.n	80012e6 <GetTrajectoryVelocity+0xce>
    } else {
        float td = t - seg->t_accel - seg->t_const;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	edd3 7a04 	vldr	s15, [r3, #16]
 80012bc:	ed97 7a05 	vldr	s14, [r7, #20]
 80012c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	edd3 7a05 	vldr	s15, [r3, #20]
 80012ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012ce:	edc7 7a02 	vstr	s15, [r7, #8]
        return v - a * td;
 80012d2:	ed97 7a04 	vldr	s14, [r7, #16]
 80012d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80012da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012de:	ed97 7a03 	vldr	s14, [r7, #12]
 80012e2:	ee77 7a67 	vsub.f32	s15, s14, s15
    }
}
 80012e6:	eeb0 0a67 	vmov.f32	s0, s15
 80012ea:	371c      	adds	r7, #28
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	00000000 	.word	0x00000000

080012f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b088      	sub	sp, #32
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012fe:	f001 fafc 	bl	80028fa <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001302:	f000 f993 	bl	800162c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001306:	f000 fe47 	bl	8001f98 <MX_GPIO_Init>
  MX_DMA_Init();
 800130a:	f000 fe1b 	bl	8001f44 <MX_DMA_Init>
  MX_TIM3_Init();
 800130e:	f000 fb33 	bl	8001978 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001312:	f000 f9d7 	bl	80016c4 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001316:	f000 fa8d 	bl	8001834 <MX_TIM1_Init>
  MX_TIM2_Init();
 800131a:	f000 fadf 	bl	80018dc <MX_TIM2_Init>
  MX_TIM4_Init();
 800131e:	f000 fb81 	bl	8001a24 <MX_TIM4_Init>
  MX_TIM20_Init();
 8001322:	f000 fd05 	bl	8001d30 <MX_TIM20_Init>
  MX_TIM8_Init();
 8001326:	f000 fbd3 	bl	8001ad0 <MX_TIM8_Init>
  MX_TIM16_Init();
 800132a:	f000 fc81 	bl	8001c30 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 800132e:	f000 fdbb 	bl	8001ea8 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001332:	f000 fa41 	bl	80017b8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	Encoder_Init(&encoder1, &htim4);
 8001336:	499d      	ldr	r1, [pc, #628]	@ (80015ac <main+0x2b4>)
 8001338:	489d      	ldr	r0, [pc, #628]	@ (80015b0 <main+0x2b8>)
 800133a:	f7ff f997 	bl	800066c <Encoder_Init>
	Encoder_Init(&encoder2, &htim3);
 800133e:	499d      	ldr	r1, [pc, #628]	@ (80015b4 <main+0x2bc>)
 8001340:	489d      	ldr	r0, [pc, #628]	@ (80015b8 <main+0x2c0>)
 8001342:	f7ff f993 	bl	800066c <Encoder_Init>

	InitTrajectorySegment(&segments[0], 0.0f, 100.0f, 50.0f, 100.0f, 0.0f);
 8001346:	ed9f 2a9d 	vldr	s4, [pc, #628]	@ 80015bc <main+0x2c4>
 800134a:	eddf 1a9d 	vldr	s3, [pc, #628]	@ 80015c0 <main+0x2c8>
 800134e:	ed9f 1a9d 	vldr	s2, [pc, #628]	@ 80015c4 <main+0x2cc>
 8001352:	eddf 0a9b 	vldr	s1, [pc, #620]	@ 80015c0 <main+0x2c8>
 8001356:	ed9f 0a99 	vldr	s0, [pc, #612]	@ 80015bc <main+0x2c4>
 800135a:	489b      	ldr	r0, [pc, #620]	@ (80015c8 <main+0x2d0>)
 800135c:	f7ff fddc 	bl	8000f18 <InitTrajectorySegment>
	InitTrajectorySegment(&segments[1], 100.0f, 50.0f, 40.0f, 80.0f, segments[0].t_start + segments[0].t_total);
 8001360:	4b99      	ldr	r3, [pc, #612]	@ (80015c8 <main+0x2d0>)
 8001362:	ed93 7a08 	vldr	s14, [r3, #32]
 8001366:	4b98      	ldr	r3, [pc, #608]	@ (80015c8 <main+0x2d0>)
 8001368:	edd3 7a07 	vldr	s15, [r3, #28]
 800136c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001370:	eeb0 2a67 	vmov.f32	s4, s15
 8001374:	eddf 1a95 	vldr	s3, [pc, #596]	@ 80015cc <main+0x2d4>
 8001378:	ed9f 1a95 	vldr	s2, [pc, #596]	@ 80015d0 <main+0x2d8>
 800137c:	eddf 0a91 	vldr	s1, [pc, #580]	@ 80015c4 <main+0x2cc>
 8001380:	ed9f 0a8f 	vldr	s0, [pc, #572]	@ 80015c0 <main+0x2c8>
 8001384:	4893      	ldr	r0, [pc, #588]	@ (80015d4 <main+0x2dc>)
 8001386:	f7ff fdc7 	bl	8000f18 <InitTrajectorySegment>
	InitTrajectorySegment(&segments[2], 50.0f, 200.0f, 60.0f, 120.0f, segments[1].t_start + segments[1].t_total);
 800138a:	4b8f      	ldr	r3, [pc, #572]	@ (80015c8 <main+0x2d0>)
 800138c:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 8001390:	4b8d      	ldr	r3, [pc, #564]	@ (80015c8 <main+0x2d0>)
 8001392:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8001396:	ee77 7a27 	vadd.f32	s15, s14, s15
 800139a:	eeb0 2a67 	vmov.f32	s4, s15
 800139e:	eddf 1a8e 	vldr	s3, [pc, #568]	@ 80015d8 <main+0x2e0>
 80013a2:	ed9f 1a8e 	vldr	s2, [pc, #568]	@ 80015dc <main+0x2e4>
 80013a6:	eddf 0a8e 	vldr	s1, [pc, #568]	@ 80015e0 <main+0x2e8>
 80013aa:	ed9f 0a86 	vldr	s0, [pc, #536]	@ 80015c4 <main+0x2cc>
 80013ae:	488d      	ldr	r0, [pc, #564]	@ (80015e4 <main+0x2ec>)
 80013b0:	f7ff fdb2 	bl	8000f18 <InitTrajectorySegment>

	int lastTick = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	61bb      	str	r3, [r7, #24]
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80013b8:	213c      	movs	r1, #60	@ 0x3c
 80013ba:	487e      	ldr	r0, [pc, #504]	@ (80015b4 <main+0x2bc>)
 80013bc:	f005 f9f0 	bl	80067a0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80013c0:	213c      	movs	r1, #60	@ 0x3c
 80013c2:	487a      	ldr	r0, [pc, #488]	@ (80015ac <main+0x2b4>)
 80013c4:	f005 f9ec 	bl	80067a0 <HAL_TIM_Encoder_Start>

	hmodbus.huart = &huart2;
 80013c8:	4b87      	ldr	r3, [pc, #540]	@ (80015e8 <main+0x2f0>)
 80013ca:	4a88      	ldr	r2, [pc, #544]	@ (80015ec <main+0x2f4>)
 80013cc:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim16;
 80013ce:	4b86      	ldr	r3, [pc, #536]	@ (80015e8 <main+0x2f0>)
 80013d0:	4a87      	ldr	r2, [pc, #540]	@ (80015f0 <main+0x2f8>)
 80013d2:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x15;
 80013d4:	4b84      	ldr	r3, [pc, #528]	@ (80015e8 <main+0x2f0>)
 80013d6:	2215      	movs	r2, #21
 80013d8:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize = 200;
 80013da:	4b83      	ldr	r3, [pc, #524]	@ (80015e8 <main+0x2f0>)
 80013dc:	22c8      	movs	r2, #200	@ 0xc8
 80013de:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, registerFrame);
 80013e0:	4984      	ldr	r1, [pc, #528]	@ (80015f4 <main+0x2fc>)
 80013e2:	4881      	ldr	r0, [pc, #516]	@ (80015e8 <main+0x2f0>)
 80013e4:	f7ff fa96 	bl	8000914 <Modbus_init>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		float r_pos = 5;
 80013e8:	4b83      	ldr	r3, [pc, #524]	@ (80015f8 <main+0x300>)
 80013ea:	617b      	str	r3, [r7, #20]
		float theta_pos = 6;
 80013ec:	4b83      	ldr	r3, [pc, #524]	@ (80015fc <main+0x304>)
 80013ee:	613b      	str	r3, [r7, #16]
		float r_Velo = 7;
 80013f0:	4b83      	ldr	r3, [pc, #524]	@ (8001600 <main+0x308>)
 80013f2:	60fb      	str	r3, [r7, #12]
		float theta_Velo = 8;
 80013f4:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80013f8:	60bb      	str	r3, [r7, #8]
		float r_accel = 9;
 80013fa:	4b82      	ldr	r3, [pc, #520]	@ (8001604 <main+0x30c>)
 80013fc:	607b      	str	r3, [r7, #4]
		float theta_accel = 10;
 80013fe:	4b82      	ldr	r3, [pc, #520]	@ (8001608 <main+0x310>)
 8001400:	603b      	str	r3, [r7, #0]
		Modbus_Protocal_Worker();
 8001402:	f7ff fb15 	bl	8000a30 <Modbus_Protocal_Worker>
		//modbus_r_position(&hmodbus,7);
		hmodbus.RegisterAddress[0x00].U16 = 22881;
 8001406:	4b78      	ldr	r3, [pc, #480]	@ (80015e8 <main+0x2f0>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f645 1261 	movw	r2, #22881	@ 0x5961
 800140e:	801a      	strh	r2, [r3, #0]
//		modbus_theta_position(&hmodbus,5);
//		modbus_r_velocity(&hmodbus,5);
//		modbus_theta_velocity(&hmodbus,5);
//		modbus_r_acceleration(&hmodbus,5);
//		modbus_theta_acceleration(&hmodbus,5);
		modbus_Update_All(&hmodbus, r_pos, theta_pos, r_Velo, theta_Velo,
 8001410:	edd7 2a00 	vldr	s5, [r7]
 8001414:	ed97 2a01 	vldr	s4, [r7, #4]
 8001418:	edd7 1a02 	vldr	s3, [r7, #8]
 800141c:	ed97 1a03 	vldr	s2, [r7, #12]
 8001420:	edd7 0a04 	vldr	s1, [r7, #16]
 8001424:	ed97 0a05 	vldr	s0, [r7, #20]
 8001428:	486f      	ldr	r0, [pc, #444]	@ (80015e8 <main+0x2f0>)
 800142a:	f7ff f88b 	bl	8000544 <modbus_Update_All>
				r_accel, theta_accel);
		for (int i = 0; i < 10; i++) {
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
 8001432:	e00f      	b.n	8001454 <main+0x15c>
			set_Target_Position_ten_points(&hmodbus, i, i);
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	ee07 3a90 	vmov	s15, r3
 800143a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	b2db      	uxtb	r3, r3
 8001442:	4619      	mov	r1, r3
 8001444:	eeb0 0a67 	vmov.f32	s0, s15
 8001448:	4867      	ldr	r0, [pc, #412]	@ (80015e8 <main+0x2f0>)
 800144a:	f7ff f8d3 	bl	80005f4 <set_Target_Position_ten_points>
		for (int i = 0; i < 10; i++) {
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	3301      	adds	r3, #1
 8001452:	61fb      	str	r3, [r7, #28]
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	2b09      	cmp	r3, #9
 8001458:	ddec      	ble.n	8001434 <main+0x13c>
		}
		Goal_r_position = modbus_set_goal_r_position(&hmodbus);
 800145a:	4863      	ldr	r0, [pc, #396]	@ (80015e8 <main+0x2f0>)
 800145c:	f7ff f8e6 	bl	800062c <modbus_set_goal_r_position>
 8001460:	4603      	mov	r3, r0
 8001462:	ee07 3a90 	vmov	s15, r3
 8001466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800146a:	4b68      	ldr	r3, [pc, #416]	@ (800160c <main+0x314>)
 800146c:	edc3 7a00 	vstr	s15, [r3]
		Goal_theta_position = modbus_set_goal_theta_position(&hmodbus);
 8001470:	485d      	ldr	r0, [pc, #372]	@ (80015e8 <main+0x2f0>)
 8001472:	f7ff f8eb 	bl	800064c <modbus_set_goal_theta_position>
 8001476:	4603      	mov	r3, r0
 8001478:	ee07 3a90 	vmov	s15, r3
 800147c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001480:	4b63      	ldr	r3, [pc, #396]	@ (8001610 <main+0x318>)
 8001482:	edc3 7a00 	vstr	s15, [r3]
//			a2 = Encoder_GetAcceleration(&encoder2);

// Now use p1,v1,a1 and p2,v2,a2 as needed
		//}

		t_global = HAL_GetTick() / 1000.0f;
 8001486:	f001 fa9d 	bl	80029c4 <HAL_GetTick>
 800148a:	ee07 0a90 	vmov	s15, r0
 800148e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001492:	eddf 6a60 	vldr	s13, [pc, #384]	@ 8001614 <main+0x31c>
 8001496:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800149a:	4b5f      	ldr	r3, [pc, #380]	@ (8001618 <main+0x320>)
 800149c:	edc3 7a00 	vstr	s15, [r3]
		pos = GetTrajectoryPosition(&segments[current_segment], t_global);
 80014a0:	4b5e      	ldr	r3, [pc, #376]	@ (800161c <main+0x324>)
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	4613      	mov	r3, r2
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	4413      	add	r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	4a46      	ldr	r2, [pc, #280]	@ (80015c8 <main+0x2d0>)
 80014ae:	4413      	add	r3, r2
 80014b0:	4a59      	ldr	r2, [pc, #356]	@ (8001618 <main+0x320>)
 80014b2:	edd2 7a00 	vldr	s15, [r2]
 80014b6:	eeb0 0a67 	vmov.f32	s0, s15
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff fdd6 	bl	800106c <GetTrajectoryPosition>
 80014c0:	eef0 7a40 	vmov.f32	s15, s0
 80014c4:	4b56      	ldr	r3, [pc, #344]	@ (8001620 <main+0x328>)
 80014c6:	edc3 7a00 	vstr	s15, [r3]
		vel = GetTrajectoryVelocity(&segments[current_segment], t_global);
 80014ca:	4b54      	ldr	r3, [pc, #336]	@ (800161c <main+0x324>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	4613      	mov	r3, r2
 80014d0:	00db      	lsls	r3, r3, #3
 80014d2:	4413      	add	r3, r2
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	4a3c      	ldr	r2, [pc, #240]	@ (80015c8 <main+0x2d0>)
 80014d8:	4413      	add	r3, r2
 80014da:	4a4f      	ldr	r2, [pc, #316]	@ (8001618 <main+0x320>)
 80014dc:	edd2 7a00 	vldr	s15, [r2]
 80014e0:	eeb0 0a67 	vmov.f32	s0, s15
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff fe97 	bl	8001218 <GetTrajectoryVelocity>
 80014ea:	eef0 7a40 	vmov.f32	s15, s0
 80014ee:	4b4d      	ldr	r3, [pc, #308]	@ (8001624 <main+0x32c>)
 80014f0:	edc3 7a00 	vstr	s15, [r3]
		// ถ้าจบ segment ปัจจุบันให้ข้ามไปอันถัดไป
		if (t_global > segments[current_segment].t_start + segments[current_segment].t_total) {
 80014f4:	4b49      	ldr	r3, [pc, #292]	@ (800161c <main+0x324>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	4933      	ldr	r1, [pc, #204]	@ (80015c8 <main+0x2d0>)
 80014fa:	4613      	mov	r3, r2
 80014fc:	00db      	lsls	r3, r3, #3
 80014fe:	4413      	add	r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	440b      	add	r3, r1
 8001504:	3320      	adds	r3, #32
 8001506:	ed93 7a00 	vldr	s14, [r3]
 800150a:	4b44      	ldr	r3, [pc, #272]	@ (800161c <main+0x324>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	492e      	ldr	r1, [pc, #184]	@ (80015c8 <main+0x2d0>)
 8001510:	4613      	mov	r3, r2
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	4413      	add	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	440b      	add	r3, r1
 800151a:	331c      	adds	r3, #28
 800151c:	edd3 7a00 	vldr	s15, [r3]
 8001520:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001524:	4b3c      	ldr	r3, [pc, #240]	@ (8001618 <main+0x320>)
 8001526:	edd3 7a00 	vldr	s15, [r3]
 800152a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800152e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001532:	d508      	bpl.n	8001546 <main+0x24e>
			if (current_segment < MAX_SEGMENTS - 1) {
 8001534:	4b39      	ldr	r3, [pc, #228]	@ (800161c <main+0x324>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2b08      	cmp	r3, #8
 800153a:	dc04      	bgt.n	8001546 <main+0x24e>
				current_segment++;
 800153c:	4b37      	ldr	r3, [pc, #220]	@ (800161c <main+0x324>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	3301      	adds	r3, #1
 8001542:	4a36      	ldr	r2, [pc, #216]	@ (800161c <main+0x324>)
 8001544:	6013      	str	r3, [r2, #0]
			}
		}

		PS2_ReadData();
 8001546:	f7ff f8cb 	bl	80006e0 <PS2_ReadData>
		test[0] = PS2_ButtonCircle();
 800154a:	f7ff f903 	bl	8000754 <PS2_ButtonCircle>
 800154e:	4603      	mov	r3, r0
 8001550:	461a      	mov	r2, r3
 8001552:	4b35      	ldr	r3, [pc, #212]	@ (8001628 <main+0x330>)
 8001554:	701a      	strb	r2, [r3, #0]
		test[1] = PS2_ButtonSquare();
 8001556:	f7ff f90f 	bl	8000778 <PS2_ButtonSquare>
 800155a:	4603      	mov	r3, r0
 800155c:	461a      	mov	r2, r3
 800155e:	4b32      	ldr	r3, [pc, #200]	@ (8001628 <main+0x330>)
 8001560:	705a      	strb	r2, [r3, #1]
		test[2] = PS2_ButtonTriangle();
 8001562:	f7ff f919 	bl	8000798 <PS2_ButtonTriangle>
 8001566:	4603      	mov	r3, r0
 8001568:	461a      	mov	r2, r3
 800156a:	4b2f      	ldr	r3, [pc, #188]	@ (8001628 <main+0x330>)
 800156c:	709a      	strb	r2, [r3, #2]
		test[3] = PS2_ButtonCross();
 800156e:	f7ff f925 	bl	80007bc <PS2_ButtonCross>
 8001572:	4603      	mov	r3, r0
 8001574:	461a      	mov	r2, r3
 8001576:	4b2c      	ldr	r3, [pc, #176]	@ (8001628 <main+0x330>)
 8001578:	70da      	strb	r2, [r3, #3]
		test[4] = PS2_ButtonR1();
 800157a:	f7ff f931 	bl	80007e0 <PS2_ButtonR1>
 800157e:	4603      	mov	r3, r0
 8001580:	461a      	mov	r2, r3
 8001582:	4b29      	ldr	r3, [pc, #164]	@ (8001628 <main+0x330>)
 8001584:	711a      	strb	r2, [r3, #4]
		test[5] = PS2_ButtonR2();
 8001586:	f7ff f93d 	bl	8000804 <PS2_ButtonR2>
 800158a:	4603      	mov	r3, r0
 800158c:	461a      	mov	r2, r3
 800158e:	4b26      	ldr	r3, [pc, #152]	@ (8001628 <main+0x330>)
 8001590:	715a      	strb	r2, [r3, #5]
		test[6] = PS2_ButtonSelect();
 8001592:	f7ff f949 	bl	8000828 <PS2_ButtonSelect>
 8001596:	4603      	mov	r3, r0
 8001598:	461a      	mov	r2, r3
 800159a:	4b23      	ldr	r3, [pc, #140]	@ (8001628 <main+0x330>)
 800159c:	719a      	strb	r2, [r3, #6]
		test[7] = PS2_ButtonStart();
 800159e:	f7ff f955 	bl	800084c <PS2_ButtonStart>
 80015a2:	4603      	mov	r3, r0
 80015a4:	461a      	mov	r2, r3
 80015a6:	4b20      	ldr	r3, [pc, #128]	@ (8001628 <main+0x330>)
 80015a8:	71da      	strb	r2, [r3, #7]
	while (1) {
 80015aa:	e71d      	b.n	80013e8 <main+0xf0>
 80015ac:	200005c8 	.word	0x200005c8
 80015b0:	20000a24 	.word	0x20000a24
 80015b4:	200004fc 	.word	0x200004fc
 80015b8:	20000a40 	.word	0x20000a40
 80015bc:	00000000 	.word	0x00000000
 80015c0:	42c80000 	.word	0x42c80000
 80015c4:	42480000 	.word	0x42480000
 80015c8:	20000a64 	.word	0x20000a64
 80015cc:	42a00000 	.word	0x42a00000
 80015d0:	42200000 	.word	0x42200000
 80015d4:	20000a88 	.word	0x20000a88
 80015d8:	42f00000 	.word	0x42f00000
 80015dc:	42700000 	.word	0x42700000
 80015e0:	43480000 	.word	0x43480000
 80015e4:	20000aac 	.word	0x20000aac
 80015e8:	20000bd8 	.word	0x20000bd8
 80015ec:	200008f8 	.word	0x200008f8
 80015f0:	20000760 	.word	0x20000760
 80015f4:	200010b0 	.word	0x200010b0
 80015f8:	40a00000 	.word	0x40a00000
 80015fc:	40c00000 	.word	0x40c00000
 8001600:	40e00000 	.word	0x40e00000
 8001604:	41100000 	.word	0x41100000
 8001608:	41200000 	.word	0x41200000
 800160c:	20000208 	.word	0x20000208
 8001610:	2000020c 	.word	0x2000020c
 8001614:	447a0000 	.word	0x447a0000
 8001618:	20000bd0 	.word	0x20000bd0
 800161c:	20000bcc 	.word	0x20000bcc
 8001620:	20000a5c 	.word	0x20000a5c
 8001624:	20000a60 	.word	0x20000a60
 8001628:	20001240 	.word	0x20001240

0800162c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b094      	sub	sp, #80	@ 0x50
 8001630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001632:	f107 0318 	add.w	r3, r7, #24
 8001636:	2238      	movs	r2, #56	@ 0x38
 8001638:	2100      	movs	r1, #0
 800163a:	4618      	mov	r0, r3
 800163c:	f009 fa06 	bl	800aa4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001640:	1d3b      	adds	r3, r7, #4
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]
 8001648:	609a      	str	r2, [r3, #8]
 800164a:	60da      	str	r2, [r3, #12]
 800164c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800164e:	2000      	movs	r0, #0
 8001650:	f003 f8e6 	bl	8004820 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001654:	2302      	movs	r3, #2
 8001656:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001658:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800165c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800165e:	2340      	movs	r3, #64	@ 0x40
 8001660:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001662:	2302      	movs	r3, #2
 8001664:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001666:	2302      	movs	r3, #2
 8001668:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800166a:	2304      	movs	r3, #4
 800166c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800166e:	2355      	movs	r3, #85	@ 0x55
 8001670:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001672:	2302      	movs	r3, #2
 8001674:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001676:	2302      	movs	r3, #2
 8001678:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800167a:	2302      	movs	r3, #2
 800167c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800167e:	f107 0318 	add.w	r3, r7, #24
 8001682:	4618      	mov	r0, r3
 8001684:	f003 f980 	bl	8004988 <HAL_RCC_OscConfig>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800168e:	f000 fd5f 	bl	8002150 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001692:	230f      	movs	r3, #15
 8001694:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001696:	2303      	movs	r3, #3
 8001698:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800169e:	2300      	movs	r3, #0
 80016a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016a2:	2300      	movs	r3, #0
 80016a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80016a6:	1d3b      	adds	r3, r7, #4
 80016a8:	2104      	movs	r1, #4
 80016aa:	4618      	mov	r0, r3
 80016ac:	f003 fc7e 	bl	8004fac <HAL_RCC_ClockConfig>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80016b6:	f000 fd4b 	bl	8002150 <Error_Handler>
  }
}
 80016ba:	bf00      	nop
 80016bc:	3750      	adds	r7, #80	@ 0x50
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
	...

080016c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08c      	sub	sp, #48	@ 0x30
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80016ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80016d6:	1d3b      	adds	r3, r7, #4
 80016d8:	2220      	movs	r2, #32
 80016da:	2100      	movs	r1, #0
 80016dc:	4618      	mov	r0, r3
 80016de:	f009 f9b5 	bl	800aa4c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80016e2:	4b32      	ldr	r3, [pc, #200]	@ (80017ac <MX_ADC1_Init+0xe8>)
 80016e4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80016e8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80016ea:	4b30      	ldr	r3, [pc, #192]	@ (80017ac <MX_ADC1_Init+0xe8>)
 80016ec:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80016f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016f2:	4b2e      	ldr	r3, [pc, #184]	@ (80017ac <MX_ADC1_Init+0xe8>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016f8:	4b2c      	ldr	r3, [pc, #176]	@ (80017ac <MX_ADC1_Init+0xe8>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80016fe:	4b2b      	ldr	r3, [pc, #172]	@ (80017ac <MX_ADC1_Init+0xe8>)
 8001700:	2200      	movs	r2, #0
 8001702:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001704:	4b29      	ldr	r3, [pc, #164]	@ (80017ac <MX_ADC1_Init+0xe8>)
 8001706:	2200      	movs	r2, #0
 8001708:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800170a:	4b28      	ldr	r3, [pc, #160]	@ (80017ac <MX_ADC1_Init+0xe8>)
 800170c:	2204      	movs	r2, #4
 800170e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001710:	4b26      	ldr	r3, [pc, #152]	@ (80017ac <MX_ADC1_Init+0xe8>)
 8001712:	2200      	movs	r2, #0
 8001714:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001716:	4b25      	ldr	r3, [pc, #148]	@ (80017ac <MX_ADC1_Init+0xe8>)
 8001718:	2200      	movs	r2, #0
 800171a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800171c:	4b23      	ldr	r3, [pc, #140]	@ (80017ac <MX_ADC1_Init+0xe8>)
 800171e:	2201      	movs	r2, #1
 8001720:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001722:	4b22      	ldr	r3, [pc, #136]	@ (80017ac <MX_ADC1_Init+0xe8>)
 8001724:	2200      	movs	r2, #0
 8001726:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800172a:	4b20      	ldr	r3, [pc, #128]	@ (80017ac <MX_ADC1_Init+0xe8>)
 800172c:	2200      	movs	r2, #0
 800172e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001730:	4b1e      	ldr	r3, [pc, #120]	@ (80017ac <MX_ADC1_Init+0xe8>)
 8001732:	2200      	movs	r2, #0
 8001734:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001736:	4b1d      	ldr	r3, [pc, #116]	@ (80017ac <MX_ADC1_Init+0xe8>)
 8001738:	2200      	movs	r2, #0
 800173a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800173e:	4b1b      	ldr	r3, [pc, #108]	@ (80017ac <MX_ADC1_Init+0xe8>)
 8001740:	2200      	movs	r2, #0
 8001742:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001744:	4b19      	ldr	r3, [pc, #100]	@ (80017ac <MX_ADC1_Init+0xe8>)
 8001746:	2200      	movs	r2, #0
 8001748:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800174c:	4817      	ldr	r0, [pc, #92]	@ (80017ac <MX_ADC1_Init+0xe8>)
 800174e:	f001 fb3d 	bl	8002dcc <HAL_ADC_Init>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001758:	f000 fcfa 	bl	8002150 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800175c:	2300      	movs	r3, #0
 800175e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001760:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001764:	4619      	mov	r1, r3
 8001766:	4811      	ldr	r0, [pc, #68]	@ (80017ac <MX_ADC1_Init+0xe8>)
 8001768:	f002 f952 	bl	8003a10 <HAL_ADCEx_MultiModeConfigChannel>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001772:	f000 fced 	bl	8002150 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001776:	4b0e      	ldr	r3, [pc, #56]	@ (80017b0 <MX_ADC1_Init+0xec>)
 8001778:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800177a:	2306      	movs	r3, #6
 800177c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800177e:	2300      	movs	r3, #0
 8001780:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8001782:	4b0c      	ldr	r3, [pc, #48]	@ (80017b4 <MX_ADC1_Init+0xf0>)
 8001784:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001786:	2304      	movs	r3, #4
 8001788:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800178a:	2300      	movs	r3, #0
 800178c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800178e:	1d3b      	adds	r3, r7, #4
 8001790:	4619      	mov	r1, r3
 8001792:	4806      	ldr	r0, [pc, #24]	@ (80017ac <MX_ADC1_Init+0xe8>)
 8001794:	f001 fcd6 	bl	8003144 <HAL_ADC_ConfigChannel>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800179e:	f000 fcd7 	bl	8002150 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017a2:	bf00      	nop
 80017a4:	3730      	adds	r7, #48	@ 0x30
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000294 	.word	0x20000294
 80017b0:	04300002 	.word	0x04300002
 80017b4:	407f0000 	.word	0x407f0000

080017b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017bc:	4b1b      	ldr	r3, [pc, #108]	@ (800182c <MX_SPI1_Init+0x74>)
 80017be:	4a1c      	ldr	r2, [pc, #112]	@ (8001830 <MX_SPI1_Init+0x78>)
 80017c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017c2:	4b1a      	ldr	r3, [pc, #104]	@ (800182c <MX_SPI1_Init+0x74>)
 80017c4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80017c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017ca:	4b18      	ldr	r3, [pc, #96]	@ (800182c <MX_SPI1_Init+0x74>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017d0:	4b16      	ldr	r3, [pc, #88]	@ (800182c <MX_SPI1_Init+0x74>)
 80017d2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80017d6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80017d8:	4b14      	ldr	r3, [pc, #80]	@ (800182c <MX_SPI1_Init+0x74>)
 80017da:	2202      	movs	r2, #2
 80017dc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80017de:	4b13      	ldr	r3, [pc, #76]	@ (800182c <MX_SPI1_Init+0x74>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017e4:	4b11      	ldr	r3, [pc, #68]	@ (800182c <MX_SPI1_Init+0x74>)
 80017e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017ea:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80017ec:	4b0f      	ldr	r3, [pc, #60]	@ (800182c <MX_SPI1_Init+0x74>)
 80017ee:	2238      	movs	r2, #56	@ 0x38
 80017f0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80017f2:	4b0e      	ldr	r3, [pc, #56]	@ (800182c <MX_SPI1_Init+0x74>)
 80017f4:	2280      	movs	r2, #128	@ 0x80
 80017f6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017f8:	4b0c      	ldr	r3, [pc, #48]	@ (800182c <MX_SPI1_Init+0x74>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017fe:	4b0b      	ldr	r3, [pc, #44]	@ (800182c <MX_SPI1_Init+0x74>)
 8001800:	2200      	movs	r2, #0
 8001802:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001804:	4b09      	ldr	r3, [pc, #36]	@ (800182c <MX_SPI1_Init+0x74>)
 8001806:	2207      	movs	r2, #7
 8001808:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800180a:	4b08      	ldr	r3, [pc, #32]	@ (800182c <MX_SPI1_Init+0x74>)
 800180c:	2200      	movs	r2, #0
 800180e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001810:	4b06      	ldr	r3, [pc, #24]	@ (800182c <MX_SPI1_Init+0x74>)
 8001812:	2200      	movs	r2, #0
 8001814:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001816:	4805      	ldr	r0, [pc, #20]	@ (800182c <MX_SPI1_Init+0x74>)
 8001818:	f004 f832 	bl	8005880 <HAL_SPI_Init>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001822:	f000 fc95 	bl	8002150 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20000300 	.word	0x20000300
 8001830:	40013000 	.word	0x40013000

08001834 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b088      	sub	sp, #32
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800183a:	f107 0310 	add.w	r3, r7, #16
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	605a      	str	r2, [r3, #4]
 8001844:	609a      	str	r2, [r3, #8]
 8001846:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001848:	1d3b      	adds	r3, r7, #4
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001852:	4b20      	ldr	r3, [pc, #128]	@ (80018d4 <MX_TIM1_Init+0xa0>)
 8001854:	4a20      	ldr	r2, [pc, #128]	@ (80018d8 <MX_TIM1_Init+0xa4>)
 8001856:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001858:	4b1e      	ldr	r3, [pc, #120]	@ (80018d4 <MX_TIM1_Init+0xa0>)
 800185a:	2200      	movs	r2, #0
 800185c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800185e:	4b1d      	ldr	r3, [pc, #116]	@ (80018d4 <MX_TIM1_Init+0xa0>)
 8001860:	2200      	movs	r2, #0
 8001862:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000;
 8001864:	4b1b      	ldr	r3, [pc, #108]	@ (80018d4 <MX_TIM1_Init+0xa0>)
 8001866:	f64e 2260 	movw	r2, #60000	@ 0xea60
 800186a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800186c:	4b19      	ldr	r3, [pc, #100]	@ (80018d4 <MX_TIM1_Init+0xa0>)
 800186e:	2200      	movs	r2, #0
 8001870:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001872:	4b18      	ldr	r3, [pc, #96]	@ (80018d4 <MX_TIM1_Init+0xa0>)
 8001874:	2200      	movs	r2, #0
 8001876:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001878:	4b16      	ldr	r3, [pc, #88]	@ (80018d4 <MX_TIM1_Init+0xa0>)
 800187a:	2200      	movs	r2, #0
 800187c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800187e:	4815      	ldr	r0, [pc, #84]	@ (80018d4 <MX_TIM1_Init+0xa0>)
 8001880:	f004 fc2c 	bl	80060dc <HAL_TIM_Base_Init>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800188a:	f000 fc61 	bl	8002150 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800188e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001892:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001894:	f107 0310 	add.w	r3, r7, #16
 8001898:	4619      	mov	r1, r3
 800189a:	480e      	ldr	r0, [pc, #56]	@ (80018d4 <MX_TIM1_Init+0xa0>)
 800189c:	f005 fb16 	bl	8006ecc <HAL_TIM_ConfigClockSource>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80018a6:	f000 fc53 	bl	8002150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018aa:	2300      	movs	r3, #0
 80018ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018ae:	2300      	movs	r3, #0
 80018b0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018b2:	2300      	movs	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018b6:	1d3b      	adds	r3, r7, #4
 80018b8:	4619      	mov	r1, r3
 80018ba:	4806      	ldr	r0, [pc, #24]	@ (80018d4 <MX_TIM1_Init+0xa0>)
 80018bc:	f006 faf6 	bl	8007eac <HAL_TIMEx_MasterConfigSynchronization>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80018c6:	f000 fc43 	bl	8002150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80018ca:	bf00      	nop
 80018cc:	3720      	adds	r7, #32
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000364 	.word	0x20000364
 80018d8:	40012c00 	.word	0x40012c00

080018dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b088      	sub	sp, #32
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018e2:	f107 0310 	add.w	r3, r7, #16
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	605a      	str	r2, [r3, #4]
 80018ec:	609a      	str	r2, [r3, #8]
 80018ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f0:	1d3b      	adds	r3, r7, #4
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001974 <MX_TIM2_Init+0x98>)
 80018fc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001900:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001902:	4b1c      	ldr	r3, [pc, #112]	@ (8001974 <MX_TIM2_Init+0x98>)
 8001904:	2200      	movs	r2, #0
 8001906:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001908:	4b1a      	ldr	r3, [pc, #104]	@ (8001974 <MX_TIM2_Init+0x98>)
 800190a:	2200      	movs	r2, #0
 800190c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800190e:	4b19      	ldr	r3, [pc, #100]	@ (8001974 <MX_TIM2_Init+0x98>)
 8001910:	f04f 32ff 	mov.w	r2, #4294967295
 8001914:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001916:	4b17      	ldr	r3, [pc, #92]	@ (8001974 <MX_TIM2_Init+0x98>)
 8001918:	2200      	movs	r2, #0
 800191a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800191c:	4b15      	ldr	r3, [pc, #84]	@ (8001974 <MX_TIM2_Init+0x98>)
 800191e:	2200      	movs	r2, #0
 8001920:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001922:	4814      	ldr	r0, [pc, #80]	@ (8001974 <MX_TIM2_Init+0x98>)
 8001924:	f004 fbda 	bl	80060dc <HAL_TIM_Base_Init>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800192e:	f000 fc0f 	bl	8002150 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001932:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001936:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001938:	f107 0310 	add.w	r3, r7, #16
 800193c:	4619      	mov	r1, r3
 800193e:	480d      	ldr	r0, [pc, #52]	@ (8001974 <MX_TIM2_Init+0x98>)
 8001940:	f005 fac4 	bl	8006ecc <HAL_TIM_ConfigClockSource>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800194a:	f000 fc01 	bl	8002150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800194e:	2300      	movs	r3, #0
 8001950:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001952:	2300      	movs	r3, #0
 8001954:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001956:	1d3b      	adds	r3, r7, #4
 8001958:	4619      	mov	r1, r3
 800195a:	4806      	ldr	r0, [pc, #24]	@ (8001974 <MX_TIM2_Init+0x98>)
 800195c:	f006 faa6 	bl	8007eac <HAL_TIMEx_MasterConfigSynchronization>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001966:	f000 fbf3 	bl	8002150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800196a:	bf00      	nop
 800196c:	3720      	adds	r7, #32
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	20000430 	.word	0x20000430

08001978 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b08c      	sub	sp, #48	@ 0x30
 800197c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800197e:	f107 030c 	add.w	r3, r7, #12
 8001982:	2224      	movs	r2, #36	@ 0x24
 8001984:	2100      	movs	r1, #0
 8001986:	4618      	mov	r0, r3
 8001988:	f009 f860 	bl	800aa4c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800198c:	463b      	mov	r3, r7
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	605a      	str	r2, [r3, #4]
 8001994:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001996:	4b21      	ldr	r3, [pc, #132]	@ (8001a1c <MX_TIM3_Init+0xa4>)
 8001998:	4a21      	ldr	r2, [pc, #132]	@ (8001a20 <MX_TIM3_Init+0xa8>)
 800199a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800199c:	4b1f      	ldr	r3, [pc, #124]	@ (8001a1c <MX_TIM3_Init+0xa4>)
 800199e:	2200      	movs	r2, #0
 80019a0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a2:	4b1e      	ldr	r3, [pc, #120]	@ (8001a1c <MX_TIM3_Init+0xa4>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 80019a8:	4b1c      	ldr	r3, [pc, #112]	@ (8001a1c <MX_TIM3_Init+0xa4>)
 80019aa:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80019ae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019b0:	4b1a      	ldr	r3, [pc, #104]	@ (8001a1c <MX_TIM3_Init+0xa4>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019b6:	4b19      	ldr	r3, [pc, #100]	@ (8001a1c <MX_TIM3_Init+0xa4>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80019bc:	2303      	movs	r3, #3
 80019be:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80019c0:	2300      	movs	r3, #0
 80019c2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019c4:	2301      	movs	r3, #1
 80019c6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80019c8:	2300      	movs	r3, #0
 80019ca:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80019cc:	2300      	movs	r3, #0
 80019ce:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80019d0:	2300      	movs	r3, #0
 80019d2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80019d4:	2301      	movs	r3, #1
 80019d6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80019d8:	2300      	movs	r3, #0
 80019da:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80019dc:	2300      	movs	r3, #0
 80019de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80019e0:	f107 030c 	add.w	r3, r7, #12
 80019e4:	4619      	mov	r1, r3
 80019e6:	480d      	ldr	r0, [pc, #52]	@ (8001a1c <MX_TIM3_Init+0xa4>)
 80019e8:	f004 fe26 	bl	8006638 <HAL_TIM_Encoder_Init>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80019f2:	f000 fbad 	bl	8002150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019f6:	2300      	movs	r3, #0
 80019f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019fa:	2300      	movs	r3, #0
 80019fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019fe:	463b      	mov	r3, r7
 8001a00:	4619      	mov	r1, r3
 8001a02:	4806      	ldr	r0, [pc, #24]	@ (8001a1c <MX_TIM3_Init+0xa4>)
 8001a04:	f006 fa52 	bl	8007eac <HAL_TIMEx_MasterConfigSynchronization>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001a0e:	f000 fb9f 	bl	8002150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a12:	bf00      	nop
 8001a14:	3730      	adds	r7, #48	@ 0x30
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	200004fc 	.word	0x200004fc
 8001a20:	40000400 	.word	0x40000400

08001a24 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08c      	sub	sp, #48	@ 0x30
 8001a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a2a:	f107 030c 	add.w	r3, r7, #12
 8001a2e:	2224      	movs	r2, #36	@ 0x24
 8001a30:	2100      	movs	r1, #0
 8001a32:	4618      	mov	r0, r3
 8001a34:	f009 f80a 	bl	800aa4c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a38:	463b      	mov	r3, r7
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	605a      	str	r2, [r3, #4]
 8001a40:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a42:	4b21      	ldr	r3, [pc, #132]	@ (8001ac8 <MX_TIM4_Init+0xa4>)
 8001a44:	4a21      	ldr	r2, [pc, #132]	@ (8001acc <MX_TIM4_Init+0xa8>)
 8001a46:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001a48:	4b1f      	ldr	r3, [pc, #124]	@ (8001ac8 <MX_TIM4_Init+0xa4>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a4e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ac8 <MX_TIM4_Init+0xa4>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 59999;
 8001a54:	4b1c      	ldr	r3, [pc, #112]	@ (8001ac8 <MX_TIM4_Init+0xa4>)
 8001a56:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8001a5a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a5c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ac8 <MX_TIM4_Init+0xa4>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a62:	4b19      	ldr	r3, [pc, #100]	@ (8001ac8 <MX_TIM4_Init+0xa4>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a70:	2301      	movs	r3, #1
 8001a72:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a74:	2300      	movs	r3, #0
 8001a76:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a80:	2301      	movs	r3, #1
 8001a82:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a84:	2300      	movs	r3, #0
 8001a86:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001a8c:	f107 030c 	add.w	r3, r7, #12
 8001a90:	4619      	mov	r1, r3
 8001a92:	480d      	ldr	r0, [pc, #52]	@ (8001ac8 <MX_TIM4_Init+0xa4>)
 8001a94:	f004 fdd0 	bl	8006638 <HAL_TIM_Encoder_Init>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001a9e:	f000 fb57 	bl	8002150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001aaa:	463b      	mov	r3, r7
 8001aac:	4619      	mov	r1, r3
 8001aae:	4806      	ldr	r0, [pc, #24]	@ (8001ac8 <MX_TIM4_Init+0xa4>)
 8001ab0:	f006 f9fc 	bl	8007eac <HAL_TIMEx_MasterConfigSynchronization>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001aba:	f000 fb49 	bl	8002150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001abe:	bf00      	nop
 8001ac0:	3730      	adds	r7, #48	@ 0x30
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	200005c8 	.word	0x200005c8
 8001acc:	40000800 	.word	0x40000800

08001ad0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b09c      	sub	sp, #112	@ 0x70
 8001ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ad6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	605a      	str	r2, [r3, #4]
 8001ae0:	609a      	str	r2, [r3, #8]
 8001ae2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ae4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001af0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]
 8001b00:	615a      	str	r2, [r3, #20]
 8001b02:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b04:	1d3b      	adds	r3, r7, #4
 8001b06:	2234      	movs	r2, #52	@ 0x34
 8001b08:	2100      	movs	r1, #0
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f008 ff9e 	bl	800aa4c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001b10:	4b45      	ldr	r3, [pc, #276]	@ (8001c28 <MX_TIM8_Init+0x158>)
 8001b12:	4a46      	ldr	r2, [pc, #280]	@ (8001c2c <MX_TIM8_Init+0x15c>)
 8001b14:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001b16:	4b44      	ldr	r3, [pc, #272]	@ (8001c28 <MX_TIM8_Init+0x158>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b1c:	4b42      	ldr	r3, [pc, #264]	@ (8001c28 <MX_TIM8_Init+0x158>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001b22:	4b41      	ldr	r3, [pc, #260]	@ (8001c28 <MX_TIM8_Init+0x158>)
 8001b24:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b28:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b2a:	4b3f      	ldr	r3, [pc, #252]	@ (8001c28 <MX_TIM8_Init+0x158>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001b30:	4b3d      	ldr	r3, [pc, #244]	@ (8001c28 <MX_TIM8_Init+0x158>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b36:	4b3c      	ldr	r3, [pc, #240]	@ (8001c28 <MX_TIM8_Init+0x158>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001b3c:	483a      	ldr	r0, [pc, #232]	@ (8001c28 <MX_TIM8_Init+0x158>)
 8001b3e:	f004 facd 	bl	80060dc <HAL_TIM_Base_Init>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001b48:	f000 fb02 	bl	8002150 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b50:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001b52:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001b56:	4619      	mov	r1, r3
 8001b58:	4833      	ldr	r0, [pc, #204]	@ (8001c28 <MX_TIM8_Init+0x158>)
 8001b5a:	f005 f9b7 	bl	8006ecc <HAL_TIM_ConfigClockSource>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001b64:	f000 faf4 	bl	8002150 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001b68:	482f      	ldr	r0, [pc, #188]	@ (8001c28 <MX_TIM8_Init+0x158>)
 8001b6a:	f004 fc01 	bl	8006370 <HAL_TIM_PWM_Init>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001b74:	f000 faec 	bl	8002150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b80:	2300      	movs	r3, #0
 8001b82:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001b84:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4827      	ldr	r0, [pc, #156]	@ (8001c28 <MX_TIM8_Init+0x158>)
 8001b8c:	f006 f98e 	bl	8007eac <HAL_TIMEx_MasterConfigSynchronization>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8001b96:	f000 fadb 	bl	8002150 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b9a:	2360      	movs	r3, #96	@ 0x60
 8001b9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001baa:	2300      	movs	r3, #0
 8001bac:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001bb6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001bba:	220c      	movs	r2, #12
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	481a      	ldr	r0, [pc, #104]	@ (8001c28 <MX_TIM8_Init+0x158>)
 8001bc0:	f005 f870 	bl	8006ca4 <HAL_TIM_PWM_ConfigChannel>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8001bca:	f000 fac1 	bl	8002150 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bde:	2300      	movs	r3, #0
 8001be0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001be2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001be6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001bec:	2300      	movs	r3, #0
 8001bee:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001bf4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c02:	2300      	movs	r3, #0
 8001c04:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001c06:	1d3b      	adds	r3, r7, #4
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4807      	ldr	r0, [pc, #28]	@ (8001c28 <MX_TIM8_Init+0x158>)
 8001c0c:	f006 f9e4 	bl	8007fd8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <MX_TIM8_Init+0x14a>
  {
    Error_Handler();
 8001c16:	f000 fa9b 	bl	8002150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001c1a:	4803      	ldr	r0, [pc, #12]	@ (8001c28 <MX_TIM8_Init+0x158>)
 8001c1c:	f000 fcaa 	bl	8002574 <HAL_TIM_MspPostInit>

}
 8001c20:	bf00      	nop
 8001c22:	3770      	adds	r7, #112	@ 0x70
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	20000694 	.word	0x20000694
 8001c2c:	40013400 	.word	0x40013400

08001c30 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b094      	sub	sp, #80	@ 0x50
 8001c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c36:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	605a      	str	r2, [r3, #4]
 8001c40:	609a      	str	r2, [r3, #8]
 8001c42:	60da      	str	r2, [r3, #12]
 8001c44:	611a      	str	r2, [r3, #16]
 8001c46:	615a      	str	r2, [r3, #20]
 8001c48:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c4a:	463b      	mov	r3, r7
 8001c4c:	2234      	movs	r2, #52	@ 0x34
 8001c4e:	2100      	movs	r1, #0
 8001c50:	4618      	mov	r0, r3
 8001c52:	f008 fefb 	bl	800aa4c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001c56:	4b34      	ldr	r3, [pc, #208]	@ (8001d28 <MX_TIM16_Init+0xf8>)
 8001c58:	4a34      	ldr	r2, [pc, #208]	@ (8001d2c <MX_TIM16_Init+0xfc>)
 8001c5a:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8001c5c:	4b32      	ldr	r3, [pc, #200]	@ (8001d28 <MX_TIM16_Init+0xf8>)
 8001c5e:	22a9      	movs	r2, #169	@ 0xa9
 8001c60:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c62:	4b31      	ldr	r3, [pc, #196]	@ (8001d28 <MX_TIM16_Init+0xf8>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2005;
 8001c68:	4b2f      	ldr	r3, [pc, #188]	@ (8001d28 <MX_TIM16_Init+0xf8>)
 8001c6a:	f240 72d5 	movw	r2, #2005	@ 0x7d5
 8001c6e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c70:	4b2d      	ldr	r3, [pc, #180]	@ (8001d28 <MX_TIM16_Init+0xf8>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001c76:	4b2c      	ldr	r3, [pc, #176]	@ (8001d28 <MX_TIM16_Init+0xf8>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c7c:	4b2a      	ldr	r3, [pc, #168]	@ (8001d28 <MX_TIM16_Init+0xf8>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001c82:	4829      	ldr	r0, [pc, #164]	@ (8001d28 <MX_TIM16_Init+0xf8>)
 8001c84:	f004 fa2a 	bl	80060dc <HAL_TIM_Base_Init>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001c8e:	f000 fa5f 	bl	8002150 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8001c92:	4825      	ldr	r0, [pc, #148]	@ (8001d28 <MX_TIM16_Init+0xf8>)
 8001c94:	f004 fafe 	bl	8006294 <HAL_TIM_OC_Init>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001c9e:	f000 fa57 	bl	8002150 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8001ca2:	2108      	movs	r1, #8
 8001ca4:	4820      	ldr	r0, [pc, #128]	@ (8001d28 <MX_TIM16_Init+0xf8>)
 8001ca6:	f004 fbd1 	bl	800644c <HAL_TIM_OnePulse_Init>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 8001cb0:	f000 fa4e 	bl	8002150 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8001cb4:	2310      	movs	r3, #16
 8001cb6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 1433;
 8001cb8:	f240 5399 	movw	r3, #1433	@ 0x599
 8001cbc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cd2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4813      	ldr	r0, [pc, #76]	@ (8001d28 <MX_TIM16_Init+0xf8>)
 8001cdc:	f004 ff68 	bl	8006bb0 <HAL_TIM_OC_ConfigChannel>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_TIM16_Init+0xba>
  {
    Error_Handler();
 8001ce6:	f000 fa33 	bl	8002150 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001cea:	2300      	movs	r3, #0
 8001cec:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001cfe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d02:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001d04:	2300      	movs	r3, #0
 8001d06:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001d0c:	463b      	mov	r3, r7
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4805      	ldr	r0, [pc, #20]	@ (8001d28 <MX_TIM16_Init+0xf8>)
 8001d12:	f006 f961 	bl	8007fd8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_TIM16_Init+0xf0>
  {
    Error_Handler();
 8001d1c:	f000 fa18 	bl	8002150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001d20:	bf00      	nop
 8001d22:	3750      	adds	r7, #80	@ 0x50
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20000760 	.word	0x20000760
 8001d2c:	40014400 	.word	0x40014400

08001d30 <MX_TIM20_Init>:
  * @brief TIM20 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM20_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b09c      	sub	sp, #112	@ 0x70
 8001d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d36:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	605a      	str	r2, [r3, #4]
 8001d40:	609a      	str	r2, [r3, #8]
 8001d42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d44:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d50:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
 8001d5c:	60da      	str	r2, [r3, #12]
 8001d5e:	611a      	str	r2, [r3, #16]
 8001d60:	615a      	str	r2, [r3, #20]
 8001d62:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d64:	1d3b      	adds	r3, r7, #4
 8001d66:	2234      	movs	r2, #52	@ 0x34
 8001d68:	2100      	movs	r1, #0
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f008 fe6e 	bl	800aa4c <memset>

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8001d70:	4b4b      	ldr	r3, [pc, #300]	@ (8001ea0 <MX_TIM20_Init+0x170>)
 8001d72:	4a4c      	ldr	r2, [pc, #304]	@ (8001ea4 <MX_TIM20_Init+0x174>)
 8001d74:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 8001d76:	4b4a      	ldr	r3, [pc, #296]	@ (8001ea0 <MX_TIM20_Init+0x170>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d7c:	4b48      	ldr	r3, [pc, #288]	@ (8001ea0 <MX_TIM20_Init+0x170>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 8001d82:	4b47      	ldr	r3, [pc, #284]	@ (8001ea0 <MX_TIM20_Init+0x170>)
 8001d84:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d88:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d8a:	4b45      	ldr	r3, [pc, #276]	@ (8001ea0 <MX_TIM20_Init+0x170>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 8001d90:	4b43      	ldr	r3, [pc, #268]	@ (8001ea0 <MX_TIM20_Init+0x170>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d96:	4b42      	ldr	r3, [pc, #264]	@ (8001ea0 <MX_TIM20_Init+0x170>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 8001d9c:	4840      	ldr	r0, [pc, #256]	@ (8001ea0 <MX_TIM20_Init+0x170>)
 8001d9e:	f004 f99d 	bl	80060dc <HAL_TIM_Base_Init>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <MX_TIM20_Init+0x7c>
  {
    Error_Handler();
 8001da8:	f000 f9d2 	bl	8002150 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001db0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 8001db2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001db6:	4619      	mov	r1, r3
 8001db8:	4839      	ldr	r0, [pc, #228]	@ (8001ea0 <MX_TIM20_Init+0x170>)
 8001dba:	f005 f887 	bl	8006ecc <HAL_TIM_ConfigClockSource>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <MX_TIM20_Init+0x98>
  {
    Error_Handler();
 8001dc4:	f000 f9c4 	bl	8002150 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 8001dc8:	4835      	ldr	r0, [pc, #212]	@ (8001ea0 <MX_TIM20_Init+0x170>)
 8001dca:	f004 fad1 	bl	8006370 <HAL_TIM_PWM_Init>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_TIM20_Init+0xa8>
  {
    Error_Handler();
 8001dd4:	f000 f9bc 	bl	8002150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001de0:	2300      	movs	r3, #0
 8001de2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8001de4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001de8:	4619      	mov	r1, r3
 8001dea:	482d      	ldr	r0, [pc, #180]	@ (8001ea0 <MX_TIM20_Init+0x170>)
 8001dec:	f006 f85e 	bl	8007eac <HAL_TIMEx_MasterConfigSynchronization>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_TIM20_Init+0xca>
  {
    Error_Handler();
 8001df6:	f000 f9ab 	bl	8002150 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dfa:	2360      	movs	r3, #96	@ 0x60
 8001dfc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e02:	2300      	movs	r3, #0
 8001e04:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e06:	2300      	movs	r3, #0
 8001e08:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e12:	2300      	movs	r3, #0
 8001e14:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e16:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4820      	ldr	r0, [pc, #128]	@ (8001ea0 <MX_TIM20_Init+0x170>)
 8001e20:	f004 ff40 	bl	8006ca4 <HAL_TIM_PWM_ConfigChannel>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_TIM20_Init+0xfe>
  {
    Error_Handler();
 8001e2a:	f000 f991 	bl	8002150 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e2e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e32:	2208      	movs	r2, #8
 8001e34:	4619      	mov	r1, r3
 8001e36:	481a      	ldr	r0, [pc, #104]	@ (8001ea0 <MX_TIM20_Init+0x170>)
 8001e38:	f004 ff34 	bl	8006ca4 <HAL_TIM_PWM_ConfigChannel>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_TIM20_Init+0x116>
  {
    Error_Handler();
 8001e42:	f000 f985 	bl	8002150 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e46:	2300      	movs	r3, #0
 8001e48:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e52:	2300      	movs	r3, #0
 8001e54:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e56:	2300      	movs	r3, #0
 8001e58:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e5a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e5e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e60:	2300      	movs	r3, #0
 8001e62:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001e64:	2300      	movs	r3, #0
 8001e66:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e6c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e70:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001e72:	2300      	movs	r3, #0
 8001e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001e76:	2300      	movs	r3, #0
 8001e78:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 8001e7e:	1d3b      	adds	r3, r7, #4
 8001e80:	4619      	mov	r1, r3
 8001e82:	4807      	ldr	r0, [pc, #28]	@ (8001ea0 <MX_TIM20_Init+0x170>)
 8001e84:	f006 f8a8 	bl	8007fd8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <MX_TIM20_Init+0x162>
  {
    Error_Handler();
 8001e8e:	f000 f95f 	bl	8002150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */
  HAL_TIM_MspPostInit(&htim20);
 8001e92:	4803      	ldr	r0, [pc, #12]	@ (8001ea0 <MX_TIM20_Init+0x170>)
 8001e94:	f000 fb6e 	bl	8002574 <HAL_TIM_MspPostInit>

}
 8001e98:	bf00      	nop
 8001e9a:	3770      	adds	r7, #112	@ 0x70
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	2000082c 	.word	0x2000082c
 8001ea4:	40015000 	.word	0x40015000

08001ea8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001eac:	4b23      	ldr	r3, [pc, #140]	@ (8001f3c <MX_USART2_UART_Init+0x94>)
 8001eae:	4a24      	ldr	r2, [pc, #144]	@ (8001f40 <MX_USART2_UART_Init+0x98>)
 8001eb0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8001eb2:	4b22      	ldr	r3, [pc, #136]	@ (8001f3c <MX_USART2_UART_Init+0x94>)
 8001eb4:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8001eb8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001eba:	4b20      	ldr	r3, [pc, #128]	@ (8001f3c <MX_USART2_UART_Init+0x94>)
 8001ebc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ec0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ec2:	4b1e      	ldr	r3, [pc, #120]	@ (8001f3c <MX_USART2_UART_Init+0x94>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001ec8:	4b1c      	ldr	r3, [pc, #112]	@ (8001f3c <MX_USART2_UART_Init+0x94>)
 8001eca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ece:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ed0:	4b1a      	ldr	r3, [pc, #104]	@ (8001f3c <MX_USART2_UART_Init+0x94>)
 8001ed2:	220c      	movs	r2, #12
 8001ed4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ed6:	4b19      	ldr	r3, [pc, #100]	@ (8001f3c <MX_USART2_UART_Init+0x94>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001edc:	4b17      	ldr	r3, [pc, #92]	@ (8001f3c <MX_USART2_UART_Init+0x94>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ee2:	4b16      	ldr	r3, [pc, #88]	@ (8001f3c <MX_USART2_UART_Init+0x94>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ee8:	4b14      	ldr	r3, [pc, #80]	@ (8001f3c <MX_USART2_UART_Init+0x94>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001eee:	4b13      	ldr	r3, [pc, #76]	@ (8001f3c <MX_USART2_UART_Init+0x94>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ef4:	4811      	ldr	r0, [pc, #68]	@ (8001f3c <MX_USART2_UART_Init+0x94>)
 8001ef6:	f006 f953 	bl	80081a0 <HAL_UART_Init>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8001f00:	f000 f926 	bl	8002150 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f04:	2100      	movs	r1, #0
 8001f06:	480d      	ldr	r0, [pc, #52]	@ (8001f3c <MX_USART2_UART_Init+0x94>)
 8001f08:	f008 fcd5 	bl	800a8b6 <HAL_UARTEx_SetTxFifoThreshold>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8001f12:	f000 f91d 	bl	8002150 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f16:	2100      	movs	r1, #0
 8001f18:	4808      	ldr	r0, [pc, #32]	@ (8001f3c <MX_USART2_UART_Init+0x94>)
 8001f1a:	f008 fd0a 	bl	800a932 <HAL_UARTEx_SetRxFifoThreshold>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8001f24:	f000 f914 	bl	8002150 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001f28:	4804      	ldr	r0, [pc, #16]	@ (8001f3c <MX_USART2_UART_Init+0x94>)
 8001f2a:	f008 fc8b 	bl	800a844 <HAL_UARTEx_DisableFifoMode>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8001f34:	f000 f90c 	bl	8002150 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f38:	bf00      	nop
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	200008f8 	.word	0x200008f8
 8001f40:	40004400 	.word	0x40004400

08001f44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001f4a:	4b12      	ldr	r3, [pc, #72]	@ (8001f94 <MX_DMA_Init+0x50>)
 8001f4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f4e:	4a11      	ldr	r2, [pc, #68]	@ (8001f94 <MX_DMA_Init+0x50>)
 8001f50:	f043 0304 	orr.w	r3, r3, #4
 8001f54:	6493      	str	r3, [r2, #72]	@ 0x48
 8001f56:	4b0f      	ldr	r3, [pc, #60]	@ (8001f94 <MX_DMA_Init+0x50>)
 8001f58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f5a:	f003 0304 	and.w	r3, r3, #4
 8001f5e:	607b      	str	r3, [r7, #4]
 8001f60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f62:	4b0c      	ldr	r3, [pc, #48]	@ (8001f94 <MX_DMA_Init+0x50>)
 8001f64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f66:	4a0b      	ldr	r2, [pc, #44]	@ (8001f94 <MX_DMA_Init+0x50>)
 8001f68:	f043 0301 	orr.w	r3, r3, #1
 8001f6c:	6493      	str	r3, [r2, #72]	@ 0x48
 8001f6e:	4b09      	ldr	r3, [pc, #36]	@ (8001f94 <MX_DMA_Init+0x50>)
 8001f70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	603b      	str	r3, [r7, #0]
 8001f78:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	200b      	movs	r0, #11
 8001f80:	f001 ff29 	bl	8003dd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001f84:	200b      	movs	r0, #11
 8001f86:	f001 ff40 	bl	8003e0a <HAL_NVIC_EnableIRQ>

}
 8001f8a:	bf00      	nop
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40021000 	.word	0x40021000

08001f98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b08a      	sub	sp, #40	@ 0x28
 8001f9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f9e:	f107 0314 	add.w	r3, r7, #20
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]
 8001fa6:	605a      	str	r2, [r3, #4]
 8001fa8:	609a      	str	r2, [r3, #8]
 8001faa:	60da      	str	r2, [r3, #12]
 8001fac:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fae:	4b53      	ldr	r3, [pc, #332]	@ (80020fc <MX_GPIO_Init+0x164>)
 8001fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fb2:	4a52      	ldr	r2, [pc, #328]	@ (80020fc <MX_GPIO_Init+0x164>)
 8001fb4:	f043 0304 	orr.w	r3, r3, #4
 8001fb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fba:	4b50      	ldr	r3, [pc, #320]	@ (80020fc <MX_GPIO_Init+0x164>)
 8001fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fbe:	f003 0304 	and.w	r3, r3, #4
 8001fc2:	613b      	str	r3, [r7, #16]
 8001fc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fc6:	4b4d      	ldr	r3, [pc, #308]	@ (80020fc <MX_GPIO_Init+0x164>)
 8001fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fca:	4a4c      	ldr	r2, [pc, #304]	@ (80020fc <MX_GPIO_Init+0x164>)
 8001fcc:	f043 0320 	orr.w	r3, r3, #32
 8001fd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fd2:	4b4a      	ldr	r3, [pc, #296]	@ (80020fc <MX_GPIO_Init+0x164>)
 8001fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fd6:	f003 0320 	and.w	r3, r3, #32
 8001fda:	60fb      	str	r3, [r7, #12]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fde:	4b47      	ldr	r3, [pc, #284]	@ (80020fc <MX_GPIO_Init+0x164>)
 8001fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fe2:	4a46      	ldr	r2, [pc, #280]	@ (80020fc <MX_GPIO_Init+0x164>)
 8001fe4:	f043 0301 	orr.w	r3, r3, #1
 8001fe8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fea:	4b44      	ldr	r3, [pc, #272]	@ (80020fc <MX_GPIO_Init+0x164>)
 8001fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	60bb      	str	r3, [r7, #8]
 8001ff4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ff6:	4b41      	ldr	r3, [pc, #260]	@ (80020fc <MX_GPIO_Init+0x164>)
 8001ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ffa:	4a40      	ldr	r2, [pc, #256]	@ (80020fc <MX_GPIO_Init+0x164>)
 8001ffc:	f043 0302 	orr.w	r3, r3, #2
 8002000:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002002:	4b3e      	ldr	r3, [pc, #248]	@ (80020fc <MX_GPIO_Init+0x164>)
 8002004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	607b      	str	r3, [r7, #4]
 800200c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR_MD20A_24V_Pin|DIR_MD20A_18V_Pin, GPIO_PIN_RESET);
 800200e:	2200      	movs	r2, #0
 8002010:	f241 0102 	movw	r1, #4098	@ 0x1002
 8002014:	483a      	ldr	r0, [pc, #232]	@ (8002100 <MX_GPIO_Init+0x168>)
 8002016:	f002 fbd3 	bl	80047c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PS2_Attention_GPIO_Port, PS2_Attention_Pin, GPIO_PIN_SET);
 800201a:	2201      	movs	r2, #1
 800201c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002020:	4838      	ldr	r0, [pc, #224]	@ (8002104 <MX_GPIO_Init+0x16c>)
 8002022:	f002 fbcd 	bl	80047c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIR_MD20A_24V_Pin DIR_MD20A_18V_Pin */
  GPIO_InitStruct.Pin = DIR_MD20A_24V_Pin|DIR_MD20A_18V_Pin;
 8002026:	f241 0302 	movw	r3, #4098	@ 0x1002
 800202a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800202c:	2301      	movs	r3, #1
 800202e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002030:	2300      	movs	r3, #0
 8002032:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002034:	2300      	movs	r3, #0
 8002036:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002038:	f107 0314 	add.w	r3, r7, #20
 800203c:	4619      	mov	r1, r3
 800203e:	4830      	ldr	r0, [pc, #192]	@ (8002100 <MX_GPIO_Init+0x168>)
 8002040:	f002 fa3c 	bl	80044bc <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit_Switch_pen_2_Pin Proximity_Sensor_Pin Limit_Switch_Prismatic1_Pin Limit_Switch_pen_1_Pin */
  GPIO_InitStruct.Pin = Limit_Switch_pen_2_Pin|Proximity_Sensor_Pin|Limit_Switch_Prismatic1_Pin|Limit_Switch_pen_1_Pin;
 8002044:	f44f 43cc 	mov.w	r3, #26112	@ 0x6600
 8002048:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800204a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800204e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002050:	2300      	movs	r3, #0
 8002052:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002054:	f107 0314 	add.w	r3, r7, #20
 8002058:	4619      	mov	r1, r3
 800205a:	4829      	ldr	r0, [pc, #164]	@ (8002100 <MX_GPIO_Init+0x168>)
 800205c:	f002 fa2e 	bl	80044bc <HAL_GPIO_Init>

  /*Configure GPIO pin : Limit_Switch_Prismatic2_Pin */
  GPIO_InitStruct.Pin = Limit_Switch_Prismatic2_Pin;
 8002060:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002064:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002066:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800206a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206c:	2300      	movs	r3, #0
 800206e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Limit_Switch_Prismatic2_GPIO_Port, &GPIO_InitStruct);
 8002070:	f107 0314 	add.w	r3, r7, #20
 8002074:	4619      	mov	r1, r3
 8002076:	4822      	ldr	r0, [pc, #136]	@ (8002100 <MX_GPIO_Init+0x168>)
 8002078:	f002 fa20 	bl	80044bc <HAL_GPIO_Init>

  /*Configure GPIO pin : Proximity_sensor_Pin */
  GPIO_InitStruct.Pin = Proximity_sensor_Pin;
 800207c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002080:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002082:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002086:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002088:	2300      	movs	r3, #0
 800208a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Proximity_sensor_GPIO_Port, &GPIO_InitStruct);
 800208c:	f107 0314 	add.w	r3, r7, #20
 8002090:	4619      	mov	r1, r3
 8002092:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002096:	f002 fa11 	bl	80044bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PS2_Attention_Pin */
  GPIO_InitStruct.Pin = PS2_Attention_Pin;
 800209a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800209e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020a0:	2301      	movs	r3, #1
 80020a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a8:	2300      	movs	r3, #0
 80020aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PS2_Attention_GPIO_Port, &GPIO_InitStruct);
 80020ac:	f107 0314 	add.w	r3, r7, #20
 80020b0:	4619      	mov	r1, r3
 80020b2:	4814      	ldr	r0, [pc, #80]	@ (8002104 <MX_GPIO_Init+0x16c>)
 80020b4:	f002 fa02 	bl	80044bc <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_Pin */
  GPIO_InitStruct.Pin = Emergency_Pin;
 80020b8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80020bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020be:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80020c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_GPIO_Port, &GPIO_InitStruct);
 80020c8:	f107 0314 	add.w	r3, r7, #20
 80020cc:	4619      	mov	r1, r3
 80020ce:	480d      	ldr	r0, [pc, #52]	@ (8002104 <MX_GPIO_Init+0x16c>)
 80020d0:	f002 f9f4 	bl	80044bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80020d4:	2200      	movs	r2, #0
 80020d6:	2100      	movs	r1, #0
 80020d8:	2017      	movs	r0, #23
 80020da:	f001 fe7c 	bl	8003dd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80020de:	2017      	movs	r0, #23
 80020e0:	f001 fe93 	bl	8003e0a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80020e4:	2200      	movs	r2, #0
 80020e6:	2100      	movs	r1, #0
 80020e8:	2028      	movs	r0, #40	@ 0x28
 80020ea:	f001 fe74 	bl	8003dd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80020ee:	2028      	movs	r0, #40	@ 0x28
 80020f0:	f001 fe8b 	bl	8003e0a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80020f4:	bf00      	nop
 80020f6:	3728      	adds	r7, #40	@ 0x28
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40021000 	.word	0x40021000
 8002100:	48000400 	.word	0x48000400
 8002104:	48000800 	.word	0x48000800

08002108 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_10) {
 8002112:	88fb      	ldrh	r3, [r7, #6]
 8002114:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002118:	d10e      	bne.n	8002138 <HAL_GPIO_EXTI_Callback+0x30>
		Encoder_setLimit(&encoder1, 180);
 800211a:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 8002140 <HAL_GPIO_EXTI_Callback+0x38>
 800211e:	4809      	ldr	r0, [pc, #36]	@ (8002144 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002120:	f7fe face 	bl	80006c0 <Encoder_setLimit>
		Encoder_setLimit(&encoder2, 180);
 8002124:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8002140 <HAL_GPIO_EXTI_Callback+0x38>
 8002128:	4807      	ldr	r0, [pc, #28]	@ (8002148 <HAL_GPIO_EXTI_Callback+0x40>)
 800212a:	f7fe fac9 	bl	80006c0 <Encoder_setLimit>
		check += 1;
 800212e:	4b07      	ldr	r3, [pc, #28]	@ (800214c <HAL_GPIO_EXTI_Callback+0x44>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	3301      	adds	r3, #1
 8002134:	4a05      	ldr	r2, [pc, #20]	@ (800214c <HAL_GPIO_EXTI_Callback+0x44>)
 8002136:	6013      	str	r3, [r2, #0]
	}
}
 8002138:	bf00      	nop
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	43340000 	.word	0x43340000
 8002144:	20000a24 	.word	0x20000a24
 8002148:	20000a40 	.word	0x20000a40
 800214c:	20000bd4 	.word	0x20000bd4

08002150 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002154:	b672      	cpsid	i
}
 8002156:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002158:	bf00      	nop
 800215a:	e7fd      	b.n	8002158 <Error_Handler+0x8>

0800215c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002162:	4b0f      	ldr	r3, [pc, #60]	@ (80021a0 <HAL_MspInit+0x44>)
 8002164:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002166:	4a0e      	ldr	r2, [pc, #56]	@ (80021a0 <HAL_MspInit+0x44>)
 8002168:	f043 0301 	orr.w	r3, r3, #1
 800216c:	6613      	str	r3, [r2, #96]	@ 0x60
 800216e:	4b0c      	ldr	r3, [pc, #48]	@ (80021a0 <HAL_MspInit+0x44>)
 8002170:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	607b      	str	r3, [r7, #4]
 8002178:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800217a:	4b09      	ldr	r3, [pc, #36]	@ (80021a0 <HAL_MspInit+0x44>)
 800217c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800217e:	4a08      	ldr	r2, [pc, #32]	@ (80021a0 <HAL_MspInit+0x44>)
 8002180:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002184:	6593      	str	r3, [r2, #88]	@ 0x58
 8002186:	4b06      	ldr	r3, [pc, #24]	@ (80021a0 <HAL_MspInit+0x44>)
 8002188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800218a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800218e:	603b      	str	r3, [r7, #0]
 8002190:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002192:	f002 fbe9 	bl	8004968 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002196:	bf00      	nop
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	40021000 	.word	0x40021000

080021a4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b09e      	sub	sp, #120	@ 0x78
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ac:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	605a      	str	r2, [r3, #4]
 80021b6:	609a      	str	r2, [r3, #8]
 80021b8:	60da      	str	r2, [r3, #12]
 80021ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021bc:	f107 0310 	add.w	r3, r7, #16
 80021c0:	2254      	movs	r2, #84	@ 0x54
 80021c2:	2100      	movs	r1, #0
 80021c4:	4618      	mov	r0, r3
 80021c6:	f008 fc41 	bl	800aa4c <memset>
  if(hadc->Instance==ADC1)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80021d2:	d134      	bne.n	800223e <HAL_ADC_MspInit+0x9a>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80021d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80021d8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80021da:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80021de:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021e0:	f107 0310 	add.w	r3, r7, #16
 80021e4:	4618      	mov	r0, r3
 80021e6:	f003 f8fd 	bl	80053e4 <HAL_RCCEx_PeriphCLKConfig>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80021f0:	f7ff ffae 	bl	8002150 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80021f4:	4b14      	ldr	r3, [pc, #80]	@ (8002248 <HAL_ADC_MspInit+0xa4>)
 80021f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021f8:	4a13      	ldr	r2, [pc, #76]	@ (8002248 <HAL_ADC_MspInit+0xa4>)
 80021fa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80021fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002200:	4b11      	ldr	r3, [pc, #68]	@ (8002248 <HAL_ADC_MspInit+0xa4>)
 8002202:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002204:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002208:	60fb      	str	r3, [r7, #12]
 800220a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800220c:	4b0e      	ldr	r3, [pc, #56]	@ (8002248 <HAL_ADC_MspInit+0xa4>)
 800220e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002210:	4a0d      	ldr	r2, [pc, #52]	@ (8002248 <HAL_ADC_MspInit+0xa4>)
 8002212:	f043 0301 	orr.w	r3, r3, #1
 8002216:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002218:	4b0b      	ldr	r3, [pc, #44]	@ (8002248 <HAL_ADC_MspInit+0xa4>)
 800221a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800221c:	f003 0301 	and.w	r3, r3, #1
 8002220:	60bb      	str	r3, [r7, #8]
 8002222:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = Current_Sensor_Pin|Current_SensorA1_Pin;
 8002224:	2303      	movs	r3, #3
 8002226:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002228:	2303      	movs	r3, #3
 800222a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222c:	2300      	movs	r3, #0
 800222e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002230:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002234:	4619      	mov	r1, r3
 8002236:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800223a:	f002 f93f 	bl	80044bc <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800223e:	bf00      	nop
 8002240:	3778      	adds	r7, #120	@ 0x78
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40021000 	.word	0x40021000

0800224c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b08a      	sub	sp, #40	@ 0x28
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002254:	f107 0314 	add.w	r3, r7, #20
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	605a      	str	r2, [r3, #4]
 800225e:	609a      	str	r2, [r3, #8]
 8002260:	60da      	str	r2, [r3, #12]
 8002262:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a25      	ldr	r2, [pc, #148]	@ (8002300 <HAL_SPI_MspInit+0xb4>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d144      	bne.n	80022f8 <HAL_SPI_MspInit+0xac>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800226e:	4b25      	ldr	r3, [pc, #148]	@ (8002304 <HAL_SPI_MspInit+0xb8>)
 8002270:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002272:	4a24      	ldr	r2, [pc, #144]	@ (8002304 <HAL_SPI_MspInit+0xb8>)
 8002274:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002278:	6613      	str	r3, [r2, #96]	@ 0x60
 800227a:	4b22      	ldr	r3, [pc, #136]	@ (8002304 <HAL_SPI_MspInit+0xb8>)
 800227c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800227e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002282:	613b      	str	r3, [r7, #16]
 8002284:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002286:	4b1f      	ldr	r3, [pc, #124]	@ (8002304 <HAL_SPI_MspInit+0xb8>)
 8002288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800228a:	4a1e      	ldr	r2, [pc, #120]	@ (8002304 <HAL_SPI_MspInit+0xb8>)
 800228c:	f043 0301 	orr.w	r3, r3, #1
 8002290:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002292:	4b1c      	ldr	r3, [pc, #112]	@ (8002304 <HAL_SPI_MspInit+0xb8>)
 8002294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800229e:	4b19      	ldr	r3, [pc, #100]	@ (8002304 <HAL_SPI_MspInit+0xb8>)
 80022a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022a2:	4a18      	ldr	r2, [pc, #96]	@ (8002304 <HAL_SPI_MspInit+0xb8>)
 80022a4:	f043 0302 	orr.w	r3, r3, #2
 80022a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022aa:	4b16      	ldr	r3, [pc, #88]	@ (8002304 <HAL_SPI_MspInit+0xb8>)
 80022ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	60bb      	str	r3, [r7, #8]
 80022b4:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80022b6:	2320      	movs	r3, #32
 80022b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ba:	2302      	movs	r3, #2
 80022bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022be:	2300      	movs	r3, #0
 80022c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c2:	2300      	movs	r3, #0
 80022c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022c6:	2305      	movs	r3, #5
 80022c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ca:	f107 0314 	add.w	r3, r7, #20
 80022ce:	4619      	mov	r1, r3
 80022d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022d4:	f002 f8f2 	bl	80044bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80022d8:	2330      	movs	r3, #48	@ 0x30
 80022da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022dc:	2302      	movs	r3, #2
 80022de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e0:	2300      	movs	r3, #0
 80022e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e4:	2300      	movs	r3, #0
 80022e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022e8:	2305      	movs	r3, #5
 80022ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ec:	f107 0314 	add.w	r3, r7, #20
 80022f0:	4619      	mov	r1, r3
 80022f2:	4805      	ldr	r0, [pc, #20]	@ (8002308 <HAL_SPI_MspInit+0xbc>)
 80022f4:	f002 f8e2 	bl	80044bc <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80022f8:	bf00      	nop
 80022fa:	3728      	adds	r7, #40	@ 0x28
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	40013000 	.word	0x40013000
 8002304:	40021000 	.word	0x40021000
 8002308:	48000400 	.word	0x48000400

0800230c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b088      	sub	sp, #32
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a39      	ldr	r2, [pc, #228]	@ (8002400 <HAL_TIM_Base_MspInit+0xf4>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d11c      	bne.n	8002358 <HAL_TIM_Base_MspInit+0x4c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800231e:	4b39      	ldr	r3, [pc, #228]	@ (8002404 <HAL_TIM_Base_MspInit+0xf8>)
 8002320:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002322:	4a38      	ldr	r2, [pc, #224]	@ (8002404 <HAL_TIM_Base_MspInit+0xf8>)
 8002324:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002328:	6613      	str	r3, [r2, #96]	@ 0x60
 800232a:	4b36      	ldr	r3, [pc, #216]	@ (8002404 <HAL_TIM_Base_MspInit+0xf8>)
 800232c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800232e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002332:	61fb      	str	r3, [r7, #28]
 8002334:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002336:	2200      	movs	r2, #0
 8002338:	2100      	movs	r1, #0
 800233a:	2018      	movs	r0, #24
 800233c:	f001 fd4b 	bl	8003dd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002340:	2018      	movs	r0, #24
 8002342:	f001 fd62 	bl	8003e0a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002346:	2200      	movs	r2, #0
 8002348:	2100      	movs	r1, #0
 800234a:	2019      	movs	r0, #25
 800234c:	f001 fd43 	bl	8003dd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002350:	2019      	movs	r0, #25
 8002352:	f001 fd5a 	bl	8003e0a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM20_MspInit 1 */

    /* USER CODE END TIM20_MspInit 1 */
  }

}
 8002356:	e04e      	b.n	80023f6 <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM2)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002360:	d10c      	bne.n	800237c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002362:	4b28      	ldr	r3, [pc, #160]	@ (8002404 <HAL_TIM_Base_MspInit+0xf8>)
 8002364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002366:	4a27      	ldr	r2, [pc, #156]	@ (8002404 <HAL_TIM_Base_MspInit+0xf8>)
 8002368:	f043 0301 	orr.w	r3, r3, #1
 800236c:	6593      	str	r3, [r2, #88]	@ 0x58
 800236e:	4b25      	ldr	r3, [pc, #148]	@ (8002404 <HAL_TIM_Base_MspInit+0xf8>)
 8002370:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	61bb      	str	r3, [r7, #24]
 8002378:	69bb      	ldr	r3, [r7, #24]
}
 800237a:	e03c      	b.n	80023f6 <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM8)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a21      	ldr	r2, [pc, #132]	@ (8002408 <HAL_TIM_Base_MspInit+0xfc>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d10c      	bne.n	80023a0 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002386:	4b1f      	ldr	r3, [pc, #124]	@ (8002404 <HAL_TIM_Base_MspInit+0xf8>)
 8002388:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800238a:	4a1e      	ldr	r2, [pc, #120]	@ (8002404 <HAL_TIM_Base_MspInit+0xf8>)
 800238c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002390:	6613      	str	r3, [r2, #96]	@ 0x60
 8002392:	4b1c      	ldr	r3, [pc, #112]	@ (8002404 <HAL_TIM_Base_MspInit+0xf8>)
 8002394:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002396:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800239a:	617b      	str	r3, [r7, #20]
 800239c:	697b      	ldr	r3, [r7, #20]
}
 800239e:	e02a      	b.n	80023f6 <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM16)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a19      	ldr	r2, [pc, #100]	@ (800240c <HAL_TIM_Base_MspInit+0x100>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d114      	bne.n	80023d4 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80023aa:	4b16      	ldr	r3, [pc, #88]	@ (8002404 <HAL_TIM_Base_MspInit+0xf8>)
 80023ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023ae:	4a15      	ldr	r2, [pc, #84]	@ (8002404 <HAL_TIM_Base_MspInit+0xf8>)
 80023b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80023b6:	4b13      	ldr	r3, [pc, #76]	@ (8002404 <HAL_TIM_Base_MspInit+0xf8>)
 80023b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023be:	613b      	str	r3, [r7, #16]
 80023c0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80023c2:	2200      	movs	r2, #0
 80023c4:	2100      	movs	r1, #0
 80023c6:	2019      	movs	r0, #25
 80023c8:	f001 fd05 	bl	8003dd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80023cc:	2019      	movs	r0, #25
 80023ce:	f001 fd1c 	bl	8003e0a <HAL_NVIC_EnableIRQ>
}
 80023d2:	e010      	b.n	80023f6 <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM20)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002410 <HAL_TIM_Base_MspInit+0x104>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d10b      	bne.n	80023f6 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM20_CLK_ENABLE();
 80023de:	4b09      	ldr	r3, [pc, #36]	@ (8002404 <HAL_TIM_Base_MspInit+0xf8>)
 80023e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023e2:	4a08      	ldr	r2, [pc, #32]	@ (8002404 <HAL_TIM_Base_MspInit+0xf8>)
 80023e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80023ea:	4b06      	ldr	r3, [pc, #24]	@ (8002404 <HAL_TIM_Base_MspInit+0xf8>)
 80023ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	68fb      	ldr	r3, [r7, #12]
}
 80023f6:	bf00      	nop
 80023f8:	3720      	adds	r7, #32
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	40012c00 	.word	0x40012c00
 8002404:	40021000 	.word	0x40021000
 8002408:	40013400 	.word	0x40013400
 800240c:	40014400 	.word	0x40014400
 8002410:	40015000 	.word	0x40015000

08002414 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b08e      	sub	sp, #56	@ 0x38
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800241c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	605a      	str	r2, [r3, #4]
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	60da      	str	r2, [r3, #12]
 800242a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a4b      	ldr	r2, [pc, #300]	@ (8002560 <HAL_TIM_Encoder_MspInit+0x14c>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d145      	bne.n	80024c2 <HAL_TIM_Encoder_MspInit+0xae>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002436:	4b4b      	ldr	r3, [pc, #300]	@ (8002564 <HAL_TIM_Encoder_MspInit+0x150>)
 8002438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800243a:	4a4a      	ldr	r2, [pc, #296]	@ (8002564 <HAL_TIM_Encoder_MspInit+0x150>)
 800243c:	f043 0302 	orr.w	r3, r3, #2
 8002440:	6593      	str	r3, [r2, #88]	@ 0x58
 8002442:	4b48      	ldr	r3, [pc, #288]	@ (8002564 <HAL_TIM_Encoder_MspInit+0x150>)
 8002444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	623b      	str	r3, [r7, #32]
 800244c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800244e:	4b45      	ldr	r3, [pc, #276]	@ (8002564 <HAL_TIM_Encoder_MspInit+0x150>)
 8002450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002452:	4a44      	ldr	r2, [pc, #272]	@ (8002564 <HAL_TIM_Encoder_MspInit+0x150>)
 8002454:	f043 0301 	orr.w	r3, r3, #1
 8002458:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800245a:	4b42      	ldr	r3, [pc, #264]	@ (8002564 <HAL_TIM_Encoder_MspInit+0x150>)
 800245c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	61fb      	str	r3, [r7, #28]
 8002464:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002466:	4b3f      	ldr	r3, [pc, #252]	@ (8002564 <HAL_TIM_Encoder_MspInit+0x150>)
 8002468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800246a:	4a3e      	ldr	r2, [pc, #248]	@ (8002564 <HAL_TIM_Encoder_MspInit+0x150>)
 800246c:	f043 0304 	orr.w	r3, r3, #4
 8002470:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002472:	4b3c      	ldr	r3, [pc, #240]	@ (8002564 <HAL_TIM_Encoder_MspInit+0x150>)
 8002474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002476:	f003 0304 	and.w	r3, r3, #4
 800247a:	61bb      	str	r3, [r7, #24]
 800247c:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Encoder_1_Pin;
 800247e:	2340      	movs	r3, #64	@ 0x40
 8002480:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002482:	2302      	movs	r3, #2
 8002484:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002486:	2300      	movs	r3, #0
 8002488:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248a:	2300      	movs	r3, #0
 800248c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800248e:	2302      	movs	r3, #2
 8002490:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Encoder_1_GPIO_Port, &GPIO_InitStruct);
 8002492:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002496:	4619      	mov	r1, r3
 8002498:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800249c:	f002 f80e 	bl	80044bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Encoder_1C7_Pin;
 80024a0:	2380      	movs	r3, #128	@ 0x80
 80024a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a4:	2302      	movs	r3, #2
 80024a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a8:	2300      	movs	r3, #0
 80024aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ac:	2300      	movs	r3, #0
 80024ae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80024b0:	2302      	movs	r3, #2
 80024b2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Encoder_1C7_GPIO_Port, &GPIO_InitStruct);
 80024b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024b8:	4619      	mov	r1, r3
 80024ba:	482b      	ldr	r0, [pc, #172]	@ (8002568 <HAL_TIM_Encoder_MspInit+0x154>)
 80024bc:	f001 fffe 	bl	80044bc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 80024c0:	e04a      	b.n	8002558 <HAL_TIM_Encoder_MspInit+0x144>
  else if(htim_encoder->Instance==TIM4)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a29      	ldr	r2, [pc, #164]	@ (800256c <HAL_TIM_Encoder_MspInit+0x158>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d145      	bne.n	8002558 <HAL_TIM_Encoder_MspInit+0x144>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80024cc:	4b25      	ldr	r3, [pc, #148]	@ (8002564 <HAL_TIM_Encoder_MspInit+0x150>)
 80024ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024d0:	4a24      	ldr	r2, [pc, #144]	@ (8002564 <HAL_TIM_Encoder_MspInit+0x150>)
 80024d2:	f043 0304 	orr.w	r3, r3, #4
 80024d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80024d8:	4b22      	ldr	r3, [pc, #136]	@ (8002564 <HAL_TIM_Encoder_MspInit+0x150>)
 80024da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024dc:	f003 0304 	and.w	r3, r3, #4
 80024e0:	617b      	str	r3, [r7, #20]
 80024e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024e4:	4b1f      	ldr	r3, [pc, #124]	@ (8002564 <HAL_TIM_Encoder_MspInit+0x150>)
 80024e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024e8:	4a1e      	ldr	r2, [pc, #120]	@ (8002564 <HAL_TIM_Encoder_MspInit+0x150>)
 80024ea:	f043 0301 	orr.w	r3, r3, #1
 80024ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024f0:	4b1c      	ldr	r3, [pc, #112]	@ (8002564 <HAL_TIM_Encoder_MspInit+0x150>)
 80024f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	613b      	str	r3, [r7, #16]
 80024fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024fc:	4b19      	ldr	r3, [pc, #100]	@ (8002564 <HAL_TIM_Encoder_MspInit+0x150>)
 80024fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002500:	4a18      	ldr	r2, [pc, #96]	@ (8002564 <HAL_TIM_Encoder_MspInit+0x150>)
 8002502:	f043 0302 	orr.w	r3, r3, #2
 8002506:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002508:	4b16      	ldr	r3, [pc, #88]	@ (8002564 <HAL_TIM_Encoder_MspInit+0x150>)
 800250a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	60fb      	str	r3, [r7, #12]
 8002512:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder_2_Pin;
 8002514:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002518:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800251a:	2302      	movs	r3, #2
 800251c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251e:	2300      	movs	r3, #0
 8002520:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002522:	2300      	movs	r3, #0
 8002524:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8002526:	230a      	movs	r3, #10
 8002528:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Encoder_2_GPIO_Port, &GPIO_InitStruct);
 800252a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800252e:	4619      	mov	r1, r3
 8002530:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002534:	f001 ffc2 	bl	80044bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Encoder_2B7_Pin;
 8002538:	2380      	movs	r3, #128	@ 0x80
 800253a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800253c:	2302      	movs	r3, #2
 800253e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002540:	2300      	movs	r3, #0
 8002542:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002544:	2300      	movs	r3, #0
 8002546:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002548:	2302      	movs	r3, #2
 800254a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Encoder_2B7_GPIO_Port, &GPIO_InitStruct);
 800254c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002550:	4619      	mov	r1, r3
 8002552:	4807      	ldr	r0, [pc, #28]	@ (8002570 <HAL_TIM_Encoder_MspInit+0x15c>)
 8002554:	f001 ffb2 	bl	80044bc <HAL_GPIO_Init>
}
 8002558:	bf00      	nop
 800255a:	3738      	adds	r7, #56	@ 0x38
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	40000400 	.word	0x40000400
 8002564:	40021000 	.word	0x40021000
 8002568:	48000800 	.word	0x48000800
 800256c:	40000800 	.word	0x40000800
 8002570:	48000400 	.word	0x48000400

08002574 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b08a      	sub	sp, #40	@ 0x28
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800257c:	f107 0314 	add.w	r3, r7, #20
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	605a      	str	r2, [r3, #4]
 8002586:	609a      	str	r2, [r3, #8]
 8002588:	60da      	str	r2, [r3, #12]
 800258a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a31      	ldr	r2, [pc, #196]	@ (8002658 <HAL_TIM_MspPostInit+0xe4>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d11d      	bne.n	80025d2 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM8_MspPostInit 0 */

    /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002596:	4b31      	ldr	r3, [pc, #196]	@ (800265c <HAL_TIM_MspPostInit+0xe8>)
 8002598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800259a:	4a30      	ldr	r2, [pc, #192]	@ (800265c <HAL_TIM_MspPostInit+0xe8>)
 800259c:	f043 0304 	orr.w	r3, r3, #4
 80025a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025a2:	4b2e      	ldr	r3, [pc, #184]	@ (800265c <HAL_TIM_MspPostInit+0xe8>)
 80025a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025a6:	f003 0304 	and.w	r3, r3, #4
 80025aa:	613b      	str	r3, [r7, #16]
 80025ac:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = PWM_Servo_Pin;
 80025ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80025b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b4:	2302      	movs	r3, #2
 80025b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b8:	2300      	movs	r3, #0
 80025ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025bc:	2300      	movs	r3, #0
 80025be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80025c0:	2304      	movs	r3, #4
 80025c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_Servo_GPIO_Port, &GPIO_InitStruct);
 80025c4:	f107 0314 	add.w	r3, r7, #20
 80025c8:	4619      	mov	r1, r3
 80025ca:	4825      	ldr	r0, [pc, #148]	@ (8002660 <HAL_TIM_MspPostInit+0xec>)
 80025cc:	f001 ff76 	bl	80044bc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM20_MspPostInit 1 */

    /* USER CODE END TIM20_MspPostInit 1 */
  }

}
 80025d0:	e03d      	b.n	800264e <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM20)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a23      	ldr	r2, [pc, #140]	@ (8002664 <HAL_TIM_MspPostInit+0xf0>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d138      	bne.n	800264e <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025dc:	4b1f      	ldr	r3, [pc, #124]	@ (800265c <HAL_TIM_MspPostInit+0xe8>)
 80025de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025e0:	4a1e      	ldr	r2, [pc, #120]	@ (800265c <HAL_TIM_MspPostInit+0xe8>)
 80025e2:	f043 0302 	orr.w	r3, r3, #2
 80025e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025e8:	4b1c      	ldr	r3, [pc, #112]	@ (800265c <HAL_TIM_MspPostInit+0xe8>)
 80025ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	60fb      	str	r3, [r7, #12]
 80025f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025f4:	4b19      	ldr	r3, [pc, #100]	@ (800265c <HAL_TIM_MspPostInit+0xe8>)
 80025f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025f8:	4a18      	ldr	r2, [pc, #96]	@ (800265c <HAL_TIM_MspPostInit+0xe8>)
 80025fa:	f043 0304 	orr.w	r3, r3, #4
 80025fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002600:	4b16      	ldr	r3, [pc, #88]	@ (800265c <HAL_TIM_MspPostInit+0xe8>)
 8002602:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002604:	f003 0304 	and.w	r3, r3, #4
 8002608:	60bb      	str	r3, [r7, #8]
 800260a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_MD20A_24V_Pin;
 800260c:	2304      	movs	r3, #4
 800260e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002610:	2302      	movs	r3, #2
 8002612:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002614:	2300      	movs	r3, #0
 8002616:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002618:	2300      	movs	r3, #0
 800261a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 800261c:	2303      	movs	r3, #3
 800261e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MD20A_24V_GPIO_Port, &GPIO_InitStruct);
 8002620:	f107 0314 	add.w	r3, r7, #20
 8002624:	4619      	mov	r1, r3
 8002626:	4810      	ldr	r0, [pc, #64]	@ (8002668 <HAL_TIM_MspPostInit+0xf4>)
 8002628:	f001 ff48 	bl	80044bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_MD20A_18V_Pin;
 800262c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002630:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002632:	2302      	movs	r3, #2
 8002634:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002636:	2300      	movs	r3, #0
 8002638:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800263a:	2300      	movs	r3, #0
 800263c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM20;
 800263e:	2306      	movs	r3, #6
 8002640:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MD20A_18V_GPIO_Port, &GPIO_InitStruct);
 8002642:	f107 0314 	add.w	r3, r7, #20
 8002646:	4619      	mov	r1, r3
 8002648:	4805      	ldr	r0, [pc, #20]	@ (8002660 <HAL_TIM_MspPostInit+0xec>)
 800264a:	f001 ff37 	bl	80044bc <HAL_GPIO_Init>
}
 800264e:	bf00      	nop
 8002650:	3728      	adds	r7, #40	@ 0x28
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	40013400 	.word	0x40013400
 800265c:	40021000 	.word	0x40021000
 8002660:	48000800 	.word	0x48000800
 8002664:	40015000 	.word	0x40015000
 8002668:	48000400 	.word	0x48000400

0800266c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b09e      	sub	sp, #120	@ 0x78
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002674:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	605a      	str	r2, [r3, #4]
 800267e:	609a      	str	r2, [r3, #8]
 8002680:	60da      	str	r2, [r3, #12]
 8002682:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002684:	f107 0310 	add.w	r3, r7, #16
 8002688:	2254      	movs	r2, #84	@ 0x54
 800268a:	2100      	movs	r1, #0
 800268c:	4618      	mov	r0, r3
 800268e:	f008 f9dd 	bl	800aa4c <memset>
  if(huart->Instance==USART2)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a37      	ldr	r2, [pc, #220]	@ (8002774 <HAL_UART_MspInit+0x108>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d167      	bne.n	800276c <HAL_UART_MspInit+0x100>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800269c:	2302      	movs	r3, #2
 800269e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80026a0:	2300      	movs	r3, #0
 80026a2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026a4:	f107 0310 	add.w	r3, r7, #16
 80026a8:	4618      	mov	r0, r3
 80026aa:	f002 fe9b 	bl	80053e4 <HAL_RCCEx_PeriphCLKConfig>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80026b4:	f7ff fd4c 	bl	8002150 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80026b8:	4b2f      	ldr	r3, [pc, #188]	@ (8002778 <HAL_UART_MspInit+0x10c>)
 80026ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026bc:	4a2e      	ldr	r2, [pc, #184]	@ (8002778 <HAL_UART_MspInit+0x10c>)
 80026be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80026c4:	4b2c      	ldr	r3, [pc, #176]	@ (8002778 <HAL_UART_MspInit+0x10c>)
 80026c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026cc:	60fb      	str	r3, [r7, #12]
 80026ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d0:	4b29      	ldr	r3, [pc, #164]	@ (8002778 <HAL_UART_MspInit+0x10c>)
 80026d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026d4:	4a28      	ldr	r2, [pc, #160]	@ (8002778 <HAL_UART_MspInit+0x10c>)
 80026d6:	f043 0301 	orr.w	r3, r3, #1
 80026da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026dc:	4b26      	ldr	r3, [pc, #152]	@ (8002778 <HAL_UART_MspInit+0x10c>)
 80026de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	60bb      	str	r3, [r7, #8]
 80026e6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80026e8:	230c      	movs	r3, #12
 80026ea:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ec:	2302      	movs	r3, #2
 80026ee:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f0:	2300      	movs	r3, #0
 80026f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f4:	2300      	movs	r3, #0
 80026f6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026f8:	2307      	movs	r3, #7
 80026fa:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026fc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002700:	4619      	mov	r1, r3
 8002702:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002706:	f001 fed9 	bl	80044bc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 800270a:	4b1c      	ldr	r3, [pc, #112]	@ (800277c <HAL_UART_MspInit+0x110>)
 800270c:	4a1c      	ldr	r2, [pc, #112]	@ (8002780 <HAL_UART_MspInit+0x114>)
 800270e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002710:	4b1a      	ldr	r3, [pc, #104]	@ (800277c <HAL_UART_MspInit+0x110>)
 8002712:	221b      	movs	r2, #27
 8002714:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002716:	4b19      	ldr	r3, [pc, #100]	@ (800277c <HAL_UART_MspInit+0x110>)
 8002718:	2210      	movs	r2, #16
 800271a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800271c:	4b17      	ldr	r3, [pc, #92]	@ (800277c <HAL_UART_MspInit+0x110>)
 800271e:	2200      	movs	r2, #0
 8002720:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002722:	4b16      	ldr	r3, [pc, #88]	@ (800277c <HAL_UART_MspInit+0x110>)
 8002724:	2280      	movs	r2, #128	@ 0x80
 8002726:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002728:	4b14      	ldr	r3, [pc, #80]	@ (800277c <HAL_UART_MspInit+0x110>)
 800272a:	2200      	movs	r2, #0
 800272c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800272e:	4b13      	ldr	r3, [pc, #76]	@ (800277c <HAL_UART_MspInit+0x110>)
 8002730:	2200      	movs	r2, #0
 8002732:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002734:	4b11      	ldr	r3, [pc, #68]	@ (800277c <HAL_UART_MspInit+0x110>)
 8002736:	2200      	movs	r2, #0
 8002738:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800273a:	4b10      	ldr	r3, [pc, #64]	@ (800277c <HAL_UART_MspInit+0x110>)
 800273c:	2200      	movs	r2, #0
 800273e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002740:	480e      	ldr	r0, [pc, #56]	@ (800277c <HAL_UART_MspInit+0x110>)
 8002742:	f001 fb7d 	bl	8003e40 <HAL_DMA_Init>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 800274c:	f7ff fd00 	bl	8002150 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a0a      	ldr	r2, [pc, #40]	@ (800277c <HAL_UART_MspInit+0x110>)
 8002754:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002756:	4a09      	ldr	r2, [pc, #36]	@ (800277c <HAL_UART_MspInit+0x110>)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800275c:	2200      	movs	r2, #0
 800275e:	2100      	movs	r1, #0
 8002760:	2026      	movs	r0, #38	@ 0x26
 8002762:	f001 fb38 	bl	8003dd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002766:	2026      	movs	r0, #38	@ 0x26
 8002768:	f001 fb4f 	bl	8003e0a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800276c:	bf00      	nop
 800276e:	3778      	adds	r7, #120	@ 0x78
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40004400 	.word	0x40004400
 8002778:	40021000 	.word	0x40021000
 800277c:	200009c4 	.word	0x200009c4
 8002780:	40020008 	.word	0x40020008

08002784 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002788:	bf00      	nop
 800278a:	e7fd      	b.n	8002788 <NMI_Handler+0x4>

0800278c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002790:	bf00      	nop
 8002792:	e7fd      	b.n	8002790 <HardFault_Handler+0x4>

08002794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002798:	bf00      	nop
 800279a:	e7fd      	b.n	8002798 <MemManage_Handler+0x4>

0800279c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027a0:	bf00      	nop
 80027a2:	e7fd      	b.n	80027a0 <BusFault_Handler+0x4>

080027a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027a8:	bf00      	nop
 80027aa:	e7fd      	b.n	80027a8 <UsageFault_Handler+0x4>

080027ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027b0:	bf00      	nop
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr

080027ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027ba:	b480      	push	{r7}
 80027bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027be:	bf00      	nop
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027cc:	bf00      	nop
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027da:	f000 f8e1 	bl	80029a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027de:	bf00      	nop
 80027e0:	bd80      	pop	{r7, pc}
	...

080027e4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80027e8:	4802      	ldr	r0, [pc, #8]	@ (80027f4 <DMA1_Channel1_IRQHandler+0x10>)
 80027ea:	f001 fd0c 	bl	8004206 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80027ee:	bf00      	nop
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	200009c4 	.word	0x200009c4

080027f8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_pen_1_Pin);
 80027fc:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002800:	f001 fff6 	bl	80047f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002804:	bf00      	nop
 8002806:	bd80      	pop	{r7, pc}

08002808 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800280c:	4802      	ldr	r0, [pc, #8]	@ (8002818 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 800280e:	f004 f855 	bl	80068bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002812:	bf00      	nop
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	20000364 	.word	0x20000364

0800281c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002820:	4803      	ldr	r0, [pc, #12]	@ (8002830 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8002822:	f004 f84b 	bl	80068bc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8002826:	4803      	ldr	r0, [pc, #12]	@ (8002834 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8002828:	f004 f848 	bl	80068bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800282c:	bf00      	nop
 800282e:	bd80      	pop	{r7, pc}
 8002830:	20000364 	.word	0x20000364
 8002834:	20000760 	.word	0x20000760

08002838 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800283c:	4802      	ldr	r0, [pc, #8]	@ (8002848 <USART2_IRQHandler+0x10>)
 800283e:	f005 ff4b 	bl	80086d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002842:	bf00      	nop
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	200008f8 	.word	0x200008f8

0800284c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_pen_2_Pin);
 8002850:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002854:	f001 ffcc 	bl	80047f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Emergency_Pin);
 8002858:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800285c:	f001 ffc8 	bl	80047f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Proximity_sensor_Pin);
 8002860:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002864:	f001 ffc4 	bl	80047f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Proximity_Sensor_Pin);
 8002868:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800286c:	f001 ffc0 	bl	80047f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_Prismatic1_Pin);
 8002870:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002874:	f001 ffbc 	bl	80047f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_Prismatic2_Pin);
 8002878:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800287c:	f001 ffb8 	bl	80047f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002880:	bf00      	nop
 8002882:	bd80      	pop	{r7, pc}

08002884 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002888:	4b06      	ldr	r3, [pc, #24]	@ (80028a4 <SystemInit+0x20>)
 800288a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800288e:	4a05      	ldr	r2, [pc, #20]	@ (80028a4 <SystemInit+0x20>)
 8002890:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002894:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002898:	bf00      	nop
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	e000ed00 	.word	0xe000ed00

080028a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80028a8:	480d      	ldr	r0, [pc, #52]	@ (80028e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80028aa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80028ac:	f7ff ffea 	bl	8002884 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028b0:	480c      	ldr	r0, [pc, #48]	@ (80028e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80028b2:	490d      	ldr	r1, [pc, #52]	@ (80028e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80028b4:	4a0d      	ldr	r2, [pc, #52]	@ (80028ec <LoopForever+0xe>)
  movs r3, #0
 80028b6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80028b8:	e002      	b.n	80028c0 <LoopCopyDataInit>

080028ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028be:	3304      	adds	r3, #4

080028c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028c4:	d3f9      	bcc.n	80028ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028c6:	4a0a      	ldr	r2, [pc, #40]	@ (80028f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80028c8:	4c0a      	ldr	r4, [pc, #40]	@ (80028f4 <LoopForever+0x16>)
  movs r3, #0
 80028ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028cc:	e001      	b.n	80028d2 <LoopFillZerobss>

080028ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028d0:	3204      	adds	r2, #4

080028d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028d4:	d3fb      	bcc.n	80028ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028d6:	f008 f8c7 	bl	800aa68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80028da:	f7fe fd0d 	bl	80012f8 <main>

080028de <LoopForever>:

LoopForever:
    b LoopForever
 80028de:	e7fe      	b.n	80028de <LoopForever>
  ldr   r0, =_estack
 80028e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80028e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028e8:	2000026c 	.word	0x2000026c
  ldr r2, =_sidata
 80028ec:	0800ab78 	.word	0x0800ab78
  ldr r2, =_sbss
 80028f0:	2000026c 	.word	0x2000026c
  ldr r4, =_ebss
 80028f4:	20001384 	.word	0x20001384

080028f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80028f8:	e7fe      	b.n	80028f8 <ADC1_2_IRQHandler>

080028fa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b082      	sub	sp, #8
 80028fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002900:	2300      	movs	r3, #0
 8002902:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002904:	2003      	movs	r0, #3
 8002906:	f001 fa5b 	bl	8003dc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800290a:	2000      	movs	r0, #0
 800290c:	f000 f80e 	bl	800292c <HAL_InitTick>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d002      	beq.n	800291c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	71fb      	strb	r3, [r7, #7]
 800291a:	e001      	b.n	8002920 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800291c:	f7ff fc1e 	bl	800215c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002920:	79fb      	ldrb	r3, [r7, #7]

}
 8002922:	4618      	mov	r0, r3
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
	...

0800292c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002934:	2300      	movs	r3, #0
 8002936:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002938:	4b16      	ldr	r3, [pc, #88]	@ (8002994 <HAL_InitTick+0x68>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d022      	beq.n	8002986 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002940:	4b15      	ldr	r3, [pc, #84]	@ (8002998 <HAL_InitTick+0x6c>)
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	4b13      	ldr	r3, [pc, #76]	@ (8002994 <HAL_InitTick+0x68>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800294c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002950:	fbb2 f3f3 	udiv	r3, r2, r3
 8002954:	4618      	mov	r0, r3
 8002956:	f001 fa66 	bl	8003e26 <HAL_SYSTICK_Config>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d10f      	bne.n	8002980 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b0f      	cmp	r3, #15
 8002964:	d809      	bhi.n	800297a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002966:	2200      	movs	r2, #0
 8002968:	6879      	ldr	r1, [r7, #4]
 800296a:	f04f 30ff 	mov.w	r0, #4294967295
 800296e:	f001 fa32 	bl	8003dd6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002972:	4a0a      	ldr	r2, [pc, #40]	@ (800299c <HAL_InitTick+0x70>)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6013      	str	r3, [r2, #0]
 8002978:	e007      	b.n	800298a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	73fb      	strb	r3, [r7, #15]
 800297e:	e004      	b.n	800298a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	73fb      	strb	r3, [r7, #15]
 8002984:	e001      	b.n	800298a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800298a:	7bfb      	ldrb	r3, [r7, #15]
}
 800298c:	4618      	mov	r0, r3
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	20000218 	.word	0x20000218
 8002998:	20000210 	.word	0x20000210
 800299c:	20000214 	.word	0x20000214

080029a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029a4:	4b05      	ldr	r3, [pc, #20]	@ (80029bc <HAL_IncTick+0x1c>)
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	4b05      	ldr	r3, [pc, #20]	@ (80029c0 <HAL_IncTick+0x20>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4413      	add	r3, r2
 80029ae:	4a03      	ldr	r2, [pc, #12]	@ (80029bc <HAL_IncTick+0x1c>)
 80029b0:	6013      	str	r3, [r2, #0]
}
 80029b2:	bf00      	nop
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	20001248 	.word	0x20001248
 80029c0:	20000218 	.word	0x20000218

080029c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  return uwTick;
 80029c8:	4b03      	ldr	r3, [pc, #12]	@ (80029d8 <HAL_GetTick+0x14>)
 80029ca:	681b      	ldr	r3, [r3, #0]
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	20001248 	.word	0x20001248

080029dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029e4:	f7ff ffee 	bl	80029c4 <HAL_GetTick>
 80029e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f4:	d004      	beq.n	8002a00 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80029f6:	4b09      	ldr	r3, [pc, #36]	@ (8002a1c <HAL_Delay+0x40>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	4413      	add	r3, r2
 80029fe:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a00:	bf00      	nop
 8002a02:	f7ff ffdf 	bl	80029c4 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d8f7      	bhi.n	8002a02 <HAL_Delay+0x26>
  {
  }
}
 8002a12:	bf00      	nop
 8002a14:	bf00      	nop
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	20000218 	.word	0x20000218

08002a20 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	431a      	orrs	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	609a      	str	r2, [r3, #8]
}
 8002a3a:	bf00      	nop
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b083      	sub	sp, #12
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
 8002a4e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	609a      	str	r2, [r3, #8]
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b087      	sub	sp, #28
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
 8002a94:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	3360      	adds	r3, #96	@ 0x60
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4413      	add	r3, r2
 8002aa2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	4b08      	ldr	r3, [pc, #32]	@ (8002acc <LL_ADC_SetOffset+0x44>)
 8002aaa:	4013      	ands	r3, r2
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002ab2:	683a      	ldr	r2, [r7, #0]
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002ac0:	bf00      	nop
 8002ac2:	371c      	adds	r7, #28
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr
 8002acc:	03fff000 	.word	0x03fff000

08002ad0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b085      	sub	sp, #20
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	3360      	adds	r3, #96	@ 0x60
 8002ade:	461a      	mov	r2, r3
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	4413      	add	r3, r2
 8002ae6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b087      	sub	sp, #28
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	3360      	adds	r3, #96	@ 0x60
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	4413      	add	r3, r2
 8002b14:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	431a      	orrs	r2, r3
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002b26:	bf00      	nop
 8002b28:	371c      	adds	r7, #28
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr

08002b32 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b087      	sub	sp, #28
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	60f8      	str	r0, [r7, #12]
 8002b3a:	60b9      	str	r1, [r7, #8]
 8002b3c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	3360      	adds	r3, #96	@ 0x60
 8002b42:	461a      	mov	r2, r3
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4413      	add	r3, r2
 8002b4a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	431a      	orrs	r2, r3
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002b5c:	bf00      	nop
 8002b5e:	371c      	adds	r7, #28
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b087      	sub	sp, #28
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	3360      	adds	r3, #96	@ 0x60
 8002b78:	461a      	mov	r2, r3
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4413      	add	r3, r2
 8002b80:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002b92:	bf00      	nop
 8002b94:	371c      	adds	r7, #28
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr

08002b9e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b083      	sub	sp, #12
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
 8002ba6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	695b      	ldr	r3, [r3, #20]
 8002bac:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	615a      	str	r2, [r3, #20]
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b087      	sub	sp, #28
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	3330      	adds	r3, #48	@ 0x30
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	0a1b      	lsrs	r3, r3, #8
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	f003 030c 	and.w	r3, r3, #12
 8002be0:	4413      	add	r3, r2
 8002be2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	f003 031f 	and.w	r3, r3, #31
 8002bee:	211f      	movs	r1, #31
 8002bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	401a      	ands	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	0e9b      	lsrs	r3, r3, #26
 8002bfc:	f003 011f 	and.w	r1, r3, #31
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	f003 031f 	and.w	r3, r3, #31
 8002c06:	fa01 f303 	lsl.w	r3, r1, r3
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c10:	bf00      	nop
 8002c12:	371c      	adds	r7, #28
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b087      	sub	sp, #28
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	3314      	adds	r3, #20
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	0e5b      	lsrs	r3, r3, #25
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	f003 0304 	and.w	r3, r3, #4
 8002c38:	4413      	add	r3, r2
 8002c3a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	0d1b      	lsrs	r3, r3, #20
 8002c44:	f003 031f 	and.w	r3, r3, #31
 8002c48:	2107      	movs	r1, #7
 8002c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c4e:	43db      	mvns	r3, r3
 8002c50:	401a      	ands	r2, r3
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	0d1b      	lsrs	r3, r3, #20
 8002c56:	f003 031f 	and.w	r3, r3, #31
 8002c5a:	6879      	ldr	r1, [r7, #4]
 8002c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c60:	431a      	orrs	r2, r3
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002c66:	bf00      	nop
 8002c68:	371c      	adds	r7, #28
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
	...

08002c74 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	401a      	ands	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f003 0318 	and.w	r3, r3, #24
 8002c96:	4908      	ldr	r1, [pc, #32]	@ (8002cb8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002c98:	40d9      	lsrs	r1, r3
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	400b      	ands	r3, r1
 8002c9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002caa:	bf00      	nop
 8002cac:	3714      	adds	r7, #20
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	0007ffff 	.word	0x0007ffff

08002cbc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002ccc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	6093      	str	r3, [r2, #8]
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002cf0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002cf4:	d101      	bne.n	8002cfa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e000      	b.n	8002cfc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002d18:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d1c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d44:	d101      	bne.n	8002d4a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002d46:	2301      	movs	r3, #1
 8002d48:	e000      	b.n	8002d4c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d101      	bne.n	8002d70 <LL_ADC_IsEnabled+0x18>
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e000      	b.n	8002d72 <LL_ADC_IsEnabled+0x1a>
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b083      	sub	sp, #12
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f003 0304 	and.w	r3, r3, #4
 8002d8e:	2b04      	cmp	r3, #4
 8002d90:	d101      	bne.n	8002d96 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d92:	2301      	movs	r3, #1
 8002d94:	e000      	b.n	8002d98 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f003 0308 	and.w	r3, r3, #8
 8002db4:	2b08      	cmp	r3, #8
 8002db6:	d101      	bne.n	8002dbc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002db8:	2301      	movs	r3, #1
 8002dba:	e000      	b.n	8002dbe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
	...

08002dcc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002dcc:	b590      	push	{r4, r7, lr}
 8002dce:	b089      	sub	sp, #36	@ 0x24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e1a9      	b.n	800313a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d109      	bne.n	8002e08 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f7ff f9d5 	bl	80021a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff ff67 	bl	8002ce0 <LL_ADC_IsDeepPowerDownEnabled>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d004      	beq.n	8002e22 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff ff4d 	bl	8002cbc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7ff ff82 	bl	8002d30 <LL_ADC_IsInternalRegulatorEnabled>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d115      	bne.n	8002e5e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7ff ff66 	bl	8002d08 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e3c:	4b9c      	ldr	r3, [pc, #624]	@ (80030b0 <HAL_ADC_Init+0x2e4>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	099b      	lsrs	r3, r3, #6
 8002e42:	4a9c      	ldr	r2, [pc, #624]	@ (80030b4 <HAL_ADC_Init+0x2e8>)
 8002e44:	fba2 2303 	umull	r2, r3, r2, r3
 8002e48:	099b      	lsrs	r3, r3, #6
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002e50:	e002      	b.n	8002e58 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	3b01      	subs	r3, #1
 8002e56:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1f9      	bne.n	8002e52 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7ff ff64 	bl	8002d30 <LL_ADC_IsInternalRegulatorEnabled>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d10d      	bne.n	8002e8a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e72:	f043 0210 	orr.w	r2, r3, #16
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e7e:	f043 0201 	orr.w	r2, r3, #1
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7ff ff75 	bl	8002d7e <LL_ADC_REG_IsConversionOngoing>
 8002e94:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e9a:	f003 0310 	and.w	r3, r3, #16
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f040 8142 	bne.w	8003128 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f040 813e 	bne.w	8003128 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eb0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002eb4:	f043 0202 	orr.w	r2, r3, #2
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff ff49 	bl	8002d58 <LL_ADC_IsEnabled>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d141      	bne.n	8002f50 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ed4:	d004      	beq.n	8002ee0 <HAL_ADC_Init+0x114>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a77      	ldr	r2, [pc, #476]	@ (80030b8 <HAL_ADC_Init+0x2ec>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d10f      	bne.n	8002f00 <HAL_ADC_Init+0x134>
 8002ee0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002ee4:	f7ff ff38 	bl	8002d58 <LL_ADC_IsEnabled>
 8002ee8:	4604      	mov	r4, r0
 8002eea:	4873      	ldr	r0, [pc, #460]	@ (80030b8 <HAL_ADC_Init+0x2ec>)
 8002eec:	f7ff ff34 	bl	8002d58 <LL_ADC_IsEnabled>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	4323      	orrs	r3, r4
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	bf0c      	ite	eq
 8002ef8:	2301      	moveq	r3, #1
 8002efa:	2300      	movne	r3, #0
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	e012      	b.n	8002f26 <HAL_ADC_Init+0x15a>
 8002f00:	486e      	ldr	r0, [pc, #440]	@ (80030bc <HAL_ADC_Init+0x2f0>)
 8002f02:	f7ff ff29 	bl	8002d58 <LL_ADC_IsEnabled>
 8002f06:	4604      	mov	r4, r0
 8002f08:	486d      	ldr	r0, [pc, #436]	@ (80030c0 <HAL_ADC_Init+0x2f4>)
 8002f0a:	f7ff ff25 	bl	8002d58 <LL_ADC_IsEnabled>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	431c      	orrs	r4, r3
 8002f12:	486c      	ldr	r0, [pc, #432]	@ (80030c4 <HAL_ADC_Init+0x2f8>)
 8002f14:	f7ff ff20 	bl	8002d58 <LL_ADC_IsEnabled>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	4323      	orrs	r3, r4
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	bf0c      	ite	eq
 8002f20:	2301      	moveq	r3, #1
 8002f22:	2300      	movne	r3, #0
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d012      	beq.n	8002f50 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f32:	d004      	beq.n	8002f3e <HAL_ADC_Init+0x172>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a5f      	ldr	r2, [pc, #380]	@ (80030b8 <HAL_ADC_Init+0x2ec>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d101      	bne.n	8002f42 <HAL_ADC_Init+0x176>
 8002f3e:	4a62      	ldr	r2, [pc, #392]	@ (80030c8 <HAL_ADC_Init+0x2fc>)
 8002f40:	e000      	b.n	8002f44 <HAL_ADC_Init+0x178>
 8002f42:	4a62      	ldr	r2, [pc, #392]	@ (80030cc <HAL_ADC_Init+0x300>)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	4619      	mov	r1, r3
 8002f4a:	4610      	mov	r0, r2
 8002f4c:	f7ff fd68 	bl	8002a20 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	7f5b      	ldrb	r3, [r3, #29]
 8002f54:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f5a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002f60:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002f66:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f6e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f70:	4313      	orrs	r3, r2
 8002f72:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d106      	bne.n	8002f8c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f82:	3b01      	subs	r3, #1
 8002f84:	045b      	lsls	r3, r3, #17
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d009      	beq.n	8002fa8 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f98:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68da      	ldr	r2, [r3, #12]
 8002fae:	4b48      	ldr	r3, [pc, #288]	@ (80030d0 <HAL_ADC_Init+0x304>)
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	6812      	ldr	r2, [r2, #0]
 8002fb6:	69b9      	ldr	r1, [r7, #24]
 8002fb8:	430b      	orrs	r3, r1
 8002fba:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7ff fee4 	bl	8002da4 <LL_ADC_INJ_IsConversionOngoing>
 8002fdc:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d17f      	bne.n	80030e4 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d17c      	bne.n	80030e4 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002fee:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002ff6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003006:	f023 0302 	bic.w	r3, r3, #2
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	6812      	ldr	r2, [r2, #0]
 800300e:	69b9      	ldr	r1, [r7, #24]
 8003010:	430b      	orrs	r3, r1
 8003012:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d017      	beq.n	800304c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	691a      	ldr	r2, [r3, #16]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800302a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003034:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003038:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	6911      	ldr	r1, [r2, #16]
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	6812      	ldr	r2, [r2, #0]
 8003044:	430b      	orrs	r3, r1
 8003046:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800304a:	e013      	b.n	8003074 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	691a      	ldr	r2, [r3, #16]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800305a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	6812      	ldr	r2, [r2, #0]
 8003068:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800306c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003070:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800307a:	2b01      	cmp	r3, #1
 800307c:	d12a      	bne.n	80030d4 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003088:	f023 0304 	bic.w	r3, r3, #4
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003094:	4311      	orrs	r1, r2
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800309a:	4311      	orrs	r1, r2
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80030a0:	430a      	orrs	r2, r1
 80030a2:	431a      	orrs	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f042 0201 	orr.w	r2, r2, #1
 80030ac:	611a      	str	r2, [r3, #16]
 80030ae:	e019      	b.n	80030e4 <HAL_ADC_Init+0x318>
 80030b0:	20000210 	.word	0x20000210
 80030b4:	053e2d63 	.word	0x053e2d63
 80030b8:	50000100 	.word	0x50000100
 80030bc:	50000400 	.word	0x50000400
 80030c0:	50000500 	.word	0x50000500
 80030c4:	50000600 	.word	0x50000600
 80030c8:	50000300 	.word	0x50000300
 80030cc:	50000700 	.word	0x50000700
 80030d0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	691a      	ldr	r2, [r3, #16]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f022 0201 	bic.w	r2, r2, #1
 80030e2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	695b      	ldr	r3, [r3, #20]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d10c      	bne.n	8003106 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f2:	f023 010f 	bic.w	r1, r3, #15
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	1e5a      	subs	r2, r3, #1
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	430a      	orrs	r2, r1
 8003102:	631a      	str	r2, [r3, #48]	@ 0x30
 8003104:	e007      	b.n	8003116 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f022 020f 	bic.w	r2, r2, #15
 8003114:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800311a:	f023 0303 	bic.w	r3, r3, #3
 800311e:	f043 0201 	orr.w	r2, r3, #1
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003126:	e007      	b.n	8003138 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800312c:	f043 0210 	orr.w	r2, r3, #16
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003138:	7ffb      	ldrb	r3, [r7, #31]
}
 800313a:	4618      	mov	r0, r3
 800313c:	3724      	adds	r7, #36	@ 0x24
 800313e:	46bd      	mov	sp, r7
 8003140:	bd90      	pop	{r4, r7, pc}
 8003142:	bf00      	nop

08003144 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b0b6      	sub	sp, #216	@ 0xd8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800314e:	2300      	movs	r3, #0
 8003150:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003154:	2300      	movs	r3, #0
 8003156:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800315e:	2b01      	cmp	r3, #1
 8003160:	d102      	bne.n	8003168 <HAL_ADC_ConfigChannel+0x24>
 8003162:	2302      	movs	r3, #2
 8003164:	f000 bc13 	b.w	800398e <HAL_ADC_ConfigChannel+0x84a>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4618      	mov	r0, r3
 8003176:	f7ff fe02 	bl	8002d7e <LL_ADC_REG_IsConversionOngoing>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	f040 83f3 	bne.w	8003968 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6818      	ldr	r0, [r3, #0]
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	6859      	ldr	r1, [r3, #4]
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	461a      	mov	r2, r3
 8003190:	f7ff fd18 	bl	8002bc4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4618      	mov	r0, r3
 800319a:	f7ff fdf0 	bl	8002d7e <LL_ADC_REG_IsConversionOngoing>
 800319e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7ff fdfc 	bl	8002da4 <LL_ADC_INJ_IsConversionOngoing>
 80031ac:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80031b0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	f040 81d9 	bne.w	800356c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80031ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80031be:	2b00      	cmp	r3, #0
 80031c0:	f040 81d4 	bne.w	800356c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80031cc:	d10f      	bne.n	80031ee <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6818      	ldr	r0, [r3, #0]
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2200      	movs	r2, #0
 80031d8:	4619      	mov	r1, r3
 80031da:	f7ff fd1f 	bl	8002c1c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7ff fcd9 	bl	8002b9e <LL_ADC_SetSamplingTimeCommonConfig>
 80031ec:	e00e      	b.n	800320c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6818      	ldr	r0, [r3, #0]
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	6819      	ldr	r1, [r3, #0]
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	461a      	mov	r2, r3
 80031fc:	f7ff fd0e 	bl	8002c1c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2100      	movs	r1, #0
 8003206:	4618      	mov	r0, r3
 8003208:	f7ff fcc9 	bl	8002b9e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	695a      	ldr	r2, [r3, #20]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	08db      	lsrs	r3, r3, #3
 8003218:	f003 0303 	and.w	r3, r3, #3
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	fa02 f303 	lsl.w	r3, r2, r3
 8003222:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	2b04      	cmp	r3, #4
 800322c:	d022      	beq.n	8003274 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6818      	ldr	r0, [r3, #0]
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	6919      	ldr	r1, [r3, #16]
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800323e:	f7ff fc23 	bl	8002a88 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6818      	ldr	r0, [r3, #0]
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	6919      	ldr	r1, [r3, #16]
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	461a      	mov	r2, r3
 8003250:	f7ff fc6f 	bl	8002b32 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6818      	ldr	r0, [r3, #0]
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003260:	2b01      	cmp	r3, #1
 8003262:	d102      	bne.n	800326a <HAL_ADC_ConfigChannel+0x126>
 8003264:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003268:	e000      	b.n	800326c <HAL_ADC_ConfigChannel+0x128>
 800326a:	2300      	movs	r3, #0
 800326c:	461a      	mov	r2, r3
 800326e:	f7ff fc7b 	bl	8002b68 <LL_ADC_SetOffsetSaturation>
 8003272:	e17b      	b.n	800356c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2100      	movs	r1, #0
 800327a:	4618      	mov	r0, r3
 800327c:	f7ff fc28 	bl	8002ad0 <LL_ADC_GetOffsetChannel>
 8003280:	4603      	mov	r3, r0
 8003282:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10a      	bne.n	80032a0 <HAL_ADC_ConfigChannel+0x15c>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2100      	movs	r1, #0
 8003290:	4618      	mov	r0, r3
 8003292:	f7ff fc1d 	bl	8002ad0 <LL_ADC_GetOffsetChannel>
 8003296:	4603      	mov	r3, r0
 8003298:	0e9b      	lsrs	r3, r3, #26
 800329a:	f003 021f 	and.w	r2, r3, #31
 800329e:	e01e      	b.n	80032de <HAL_ADC_ConfigChannel+0x19a>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2100      	movs	r1, #0
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff fc12 	bl	8002ad0 <LL_ADC_GetOffsetChannel>
 80032ac:	4603      	mov	r3, r0
 80032ae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80032b6:	fa93 f3a3 	rbit	r3, r3
 80032ba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80032be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80032c2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80032c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80032ce:	2320      	movs	r3, #32
 80032d0:	e004      	b.n	80032dc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80032d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80032d6:	fab3 f383 	clz	r3, r3
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d105      	bne.n	80032f6 <HAL_ADC_ConfigChannel+0x1b2>
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	0e9b      	lsrs	r3, r3, #26
 80032f0:	f003 031f 	and.w	r3, r3, #31
 80032f4:	e018      	b.n	8003328 <HAL_ADC_ConfigChannel+0x1e4>
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003302:	fa93 f3a3 	rbit	r3, r3
 8003306:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800330a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800330e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003312:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800331a:	2320      	movs	r3, #32
 800331c:	e004      	b.n	8003328 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800331e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003322:	fab3 f383 	clz	r3, r3
 8003326:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003328:	429a      	cmp	r2, r3
 800332a:	d106      	bne.n	800333a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2200      	movs	r2, #0
 8003332:	2100      	movs	r1, #0
 8003334:	4618      	mov	r0, r3
 8003336:	f7ff fbe1 	bl	8002afc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2101      	movs	r1, #1
 8003340:	4618      	mov	r0, r3
 8003342:	f7ff fbc5 	bl	8002ad0 <LL_ADC_GetOffsetChannel>
 8003346:	4603      	mov	r3, r0
 8003348:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800334c:	2b00      	cmp	r3, #0
 800334e:	d10a      	bne.n	8003366 <HAL_ADC_ConfigChannel+0x222>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2101      	movs	r1, #1
 8003356:	4618      	mov	r0, r3
 8003358:	f7ff fbba 	bl	8002ad0 <LL_ADC_GetOffsetChannel>
 800335c:	4603      	mov	r3, r0
 800335e:	0e9b      	lsrs	r3, r3, #26
 8003360:	f003 021f 	and.w	r2, r3, #31
 8003364:	e01e      	b.n	80033a4 <HAL_ADC_ConfigChannel+0x260>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2101      	movs	r1, #1
 800336c:	4618      	mov	r0, r3
 800336e:	f7ff fbaf 	bl	8002ad0 <LL_ADC_GetOffsetChannel>
 8003372:	4603      	mov	r3, r0
 8003374:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003378:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800337c:	fa93 f3a3 	rbit	r3, r3
 8003380:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003384:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003388:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800338c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003390:	2b00      	cmp	r3, #0
 8003392:	d101      	bne.n	8003398 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003394:	2320      	movs	r3, #32
 8003396:	e004      	b.n	80033a2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003398:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800339c:	fab3 f383 	clz	r3, r3
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d105      	bne.n	80033bc <HAL_ADC_ConfigChannel+0x278>
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	0e9b      	lsrs	r3, r3, #26
 80033b6:	f003 031f 	and.w	r3, r3, #31
 80033ba:	e018      	b.n	80033ee <HAL_ADC_ConfigChannel+0x2aa>
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80033c8:	fa93 f3a3 	rbit	r3, r3
 80033cc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80033d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80033d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80033d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d101      	bne.n	80033e4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80033e0:	2320      	movs	r3, #32
 80033e2:	e004      	b.n	80033ee <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80033e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80033e8:	fab3 f383 	clz	r3, r3
 80033ec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d106      	bne.n	8003400 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2200      	movs	r2, #0
 80033f8:	2101      	movs	r1, #1
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7ff fb7e 	bl	8002afc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2102      	movs	r1, #2
 8003406:	4618      	mov	r0, r3
 8003408:	f7ff fb62 	bl	8002ad0 <LL_ADC_GetOffsetChannel>
 800340c:	4603      	mov	r3, r0
 800340e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10a      	bne.n	800342c <HAL_ADC_ConfigChannel+0x2e8>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2102      	movs	r1, #2
 800341c:	4618      	mov	r0, r3
 800341e:	f7ff fb57 	bl	8002ad0 <LL_ADC_GetOffsetChannel>
 8003422:	4603      	mov	r3, r0
 8003424:	0e9b      	lsrs	r3, r3, #26
 8003426:	f003 021f 	and.w	r2, r3, #31
 800342a:	e01e      	b.n	800346a <HAL_ADC_ConfigChannel+0x326>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2102      	movs	r1, #2
 8003432:	4618      	mov	r0, r3
 8003434:	f7ff fb4c 	bl	8002ad0 <LL_ADC_GetOffsetChannel>
 8003438:	4603      	mov	r3, r0
 800343a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003442:	fa93 f3a3 	rbit	r3, r3
 8003446:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800344a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800344e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003452:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800345a:	2320      	movs	r3, #32
 800345c:	e004      	b.n	8003468 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800345e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003462:	fab3 f383 	clz	r3, r3
 8003466:	b2db      	uxtb	r3, r3
 8003468:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003472:	2b00      	cmp	r3, #0
 8003474:	d105      	bne.n	8003482 <HAL_ADC_ConfigChannel+0x33e>
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	0e9b      	lsrs	r3, r3, #26
 800347c:	f003 031f 	and.w	r3, r3, #31
 8003480:	e016      	b.n	80034b0 <HAL_ADC_ConfigChannel+0x36c>
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800348e:	fa93 f3a3 	rbit	r3, r3
 8003492:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003494:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003496:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800349a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d101      	bne.n	80034a6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80034a2:	2320      	movs	r3, #32
 80034a4:	e004      	b.n	80034b0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80034a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80034aa:	fab3 f383 	clz	r3, r3
 80034ae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d106      	bne.n	80034c2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2200      	movs	r2, #0
 80034ba:	2102      	movs	r1, #2
 80034bc:	4618      	mov	r0, r3
 80034be:	f7ff fb1d 	bl	8002afc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2103      	movs	r1, #3
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7ff fb01 	bl	8002ad0 <LL_ADC_GetOffsetChannel>
 80034ce:	4603      	mov	r3, r0
 80034d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10a      	bne.n	80034ee <HAL_ADC_ConfigChannel+0x3aa>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2103      	movs	r1, #3
 80034de:	4618      	mov	r0, r3
 80034e0:	f7ff faf6 	bl	8002ad0 <LL_ADC_GetOffsetChannel>
 80034e4:	4603      	mov	r3, r0
 80034e6:	0e9b      	lsrs	r3, r3, #26
 80034e8:	f003 021f 	and.w	r2, r3, #31
 80034ec:	e017      	b.n	800351e <HAL_ADC_ConfigChannel+0x3da>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2103      	movs	r1, #3
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7ff faeb 	bl	8002ad0 <LL_ADC_GetOffsetChannel>
 80034fa:	4603      	mov	r3, r0
 80034fc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003500:	fa93 f3a3 	rbit	r3, r3
 8003504:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003506:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003508:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800350a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800350c:	2b00      	cmp	r3, #0
 800350e:	d101      	bne.n	8003514 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003510:	2320      	movs	r3, #32
 8003512:	e003      	b.n	800351c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003514:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003516:	fab3 f383 	clz	r3, r3
 800351a:	b2db      	uxtb	r3, r3
 800351c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003526:	2b00      	cmp	r3, #0
 8003528:	d105      	bne.n	8003536 <HAL_ADC_ConfigChannel+0x3f2>
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	0e9b      	lsrs	r3, r3, #26
 8003530:	f003 031f 	and.w	r3, r3, #31
 8003534:	e011      	b.n	800355a <HAL_ADC_ConfigChannel+0x416>
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800353e:	fa93 f3a3 	rbit	r3, r3
 8003542:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003544:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003546:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003548:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800354e:	2320      	movs	r3, #32
 8003550:	e003      	b.n	800355a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003552:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003554:	fab3 f383 	clz	r3, r3
 8003558:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800355a:	429a      	cmp	r2, r3
 800355c:	d106      	bne.n	800356c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2200      	movs	r2, #0
 8003564:	2103      	movs	r1, #3
 8003566:	4618      	mov	r0, r3
 8003568:	f7ff fac8 	bl	8002afc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4618      	mov	r0, r3
 8003572:	f7ff fbf1 	bl	8002d58 <LL_ADC_IsEnabled>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	f040 813d 	bne.w	80037f8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6818      	ldr	r0, [r3, #0]
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	6819      	ldr	r1, [r3, #0]
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	461a      	mov	r2, r3
 800358c:	f7ff fb72 	bl	8002c74 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	4aa2      	ldr	r2, [pc, #648]	@ (8003820 <HAL_ADC_ConfigChannel+0x6dc>)
 8003596:	4293      	cmp	r3, r2
 8003598:	f040 812e 	bne.w	80037f8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d10b      	bne.n	80035c4 <HAL_ADC_ConfigChannel+0x480>
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	0e9b      	lsrs	r3, r3, #26
 80035b2:	3301      	adds	r3, #1
 80035b4:	f003 031f 	and.w	r3, r3, #31
 80035b8:	2b09      	cmp	r3, #9
 80035ba:	bf94      	ite	ls
 80035bc:	2301      	movls	r3, #1
 80035be:	2300      	movhi	r3, #0
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	e019      	b.n	80035f8 <HAL_ADC_ConfigChannel+0x4b4>
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80035cc:	fa93 f3a3 	rbit	r3, r3
 80035d0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80035d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80035d4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80035d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d101      	bne.n	80035e0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80035dc:	2320      	movs	r3, #32
 80035de:	e003      	b.n	80035e8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80035e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80035e2:	fab3 f383 	clz	r3, r3
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	3301      	adds	r3, #1
 80035ea:	f003 031f 	and.w	r3, r3, #31
 80035ee:	2b09      	cmp	r3, #9
 80035f0:	bf94      	ite	ls
 80035f2:	2301      	movls	r3, #1
 80035f4:	2300      	movhi	r3, #0
 80035f6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d079      	beq.n	80036f0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003604:	2b00      	cmp	r3, #0
 8003606:	d107      	bne.n	8003618 <HAL_ADC_ConfigChannel+0x4d4>
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	0e9b      	lsrs	r3, r3, #26
 800360e:	3301      	adds	r3, #1
 8003610:	069b      	lsls	r3, r3, #26
 8003612:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003616:	e015      	b.n	8003644 <HAL_ADC_ConfigChannel+0x500>
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003620:	fa93 f3a3 	rbit	r3, r3
 8003624:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003626:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003628:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800362a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800362c:	2b00      	cmp	r3, #0
 800362e:	d101      	bne.n	8003634 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003630:	2320      	movs	r3, #32
 8003632:	e003      	b.n	800363c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003634:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003636:	fab3 f383 	clz	r3, r3
 800363a:	b2db      	uxtb	r3, r3
 800363c:	3301      	adds	r3, #1
 800363e:	069b      	lsls	r3, r3, #26
 8003640:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800364c:	2b00      	cmp	r3, #0
 800364e:	d109      	bne.n	8003664 <HAL_ADC_ConfigChannel+0x520>
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	0e9b      	lsrs	r3, r3, #26
 8003656:	3301      	adds	r3, #1
 8003658:	f003 031f 	and.w	r3, r3, #31
 800365c:	2101      	movs	r1, #1
 800365e:	fa01 f303 	lsl.w	r3, r1, r3
 8003662:	e017      	b.n	8003694 <HAL_ADC_ConfigChannel+0x550>
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800366c:	fa93 f3a3 	rbit	r3, r3
 8003670:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003672:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003674:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003676:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003678:	2b00      	cmp	r3, #0
 800367a:	d101      	bne.n	8003680 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800367c:	2320      	movs	r3, #32
 800367e:	e003      	b.n	8003688 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003680:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003682:	fab3 f383 	clz	r3, r3
 8003686:	b2db      	uxtb	r3, r3
 8003688:	3301      	adds	r3, #1
 800368a:	f003 031f 	and.w	r3, r3, #31
 800368e:	2101      	movs	r1, #1
 8003690:	fa01 f303 	lsl.w	r3, r1, r3
 8003694:	ea42 0103 	orr.w	r1, r2, r3
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d10a      	bne.n	80036ba <HAL_ADC_ConfigChannel+0x576>
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	0e9b      	lsrs	r3, r3, #26
 80036aa:	3301      	adds	r3, #1
 80036ac:	f003 021f 	and.w	r2, r3, #31
 80036b0:	4613      	mov	r3, r2
 80036b2:	005b      	lsls	r3, r3, #1
 80036b4:	4413      	add	r3, r2
 80036b6:	051b      	lsls	r3, r3, #20
 80036b8:	e018      	b.n	80036ec <HAL_ADC_ConfigChannel+0x5a8>
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036c2:	fa93 f3a3 	rbit	r3, r3
 80036c6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80036c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80036cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80036d2:	2320      	movs	r3, #32
 80036d4:	e003      	b.n	80036de <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80036d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036d8:	fab3 f383 	clz	r3, r3
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	3301      	adds	r3, #1
 80036e0:	f003 021f 	and.w	r2, r3, #31
 80036e4:	4613      	mov	r3, r2
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	4413      	add	r3, r2
 80036ea:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036ec:	430b      	orrs	r3, r1
 80036ee:	e07e      	b.n	80037ee <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d107      	bne.n	800370c <HAL_ADC_ConfigChannel+0x5c8>
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	0e9b      	lsrs	r3, r3, #26
 8003702:	3301      	adds	r3, #1
 8003704:	069b      	lsls	r3, r3, #26
 8003706:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800370a:	e015      	b.n	8003738 <HAL_ADC_ConfigChannel+0x5f4>
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003714:	fa93 f3a3 	rbit	r3, r3
 8003718:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800371a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800371c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800371e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003720:	2b00      	cmp	r3, #0
 8003722:	d101      	bne.n	8003728 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003724:	2320      	movs	r3, #32
 8003726:	e003      	b.n	8003730 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800372a:	fab3 f383 	clz	r3, r3
 800372e:	b2db      	uxtb	r3, r3
 8003730:	3301      	adds	r3, #1
 8003732:	069b      	lsls	r3, r3, #26
 8003734:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003740:	2b00      	cmp	r3, #0
 8003742:	d109      	bne.n	8003758 <HAL_ADC_ConfigChannel+0x614>
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	0e9b      	lsrs	r3, r3, #26
 800374a:	3301      	adds	r3, #1
 800374c:	f003 031f 	and.w	r3, r3, #31
 8003750:	2101      	movs	r1, #1
 8003752:	fa01 f303 	lsl.w	r3, r1, r3
 8003756:	e017      	b.n	8003788 <HAL_ADC_ConfigChannel+0x644>
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375e:	6a3b      	ldr	r3, [r7, #32]
 8003760:	fa93 f3a3 	rbit	r3, r3
 8003764:	61fb      	str	r3, [r7, #28]
  return result;
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800376a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800376c:	2b00      	cmp	r3, #0
 800376e:	d101      	bne.n	8003774 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003770:	2320      	movs	r3, #32
 8003772:	e003      	b.n	800377c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003776:	fab3 f383 	clz	r3, r3
 800377a:	b2db      	uxtb	r3, r3
 800377c:	3301      	adds	r3, #1
 800377e:	f003 031f 	and.w	r3, r3, #31
 8003782:	2101      	movs	r1, #1
 8003784:	fa01 f303 	lsl.w	r3, r1, r3
 8003788:	ea42 0103 	orr.w	r1, r2, r3
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003794:	2b00      	cmp	r3, #0
 8003796:	d10d      	bne.n	80037b4 <HAL_ADC_ConfigChannel+0x670>
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	0e9b      	lsrs	r3, r3, #26
 800379e:	3301      	adds	r3, #1
 80037a0:	f003 021f 	and.w	r2, r3, #31
 80037a4:	4613      	mov	r3, r2
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	4413      	add	r3, r2
 80037aa:	3b1e      	subs	r3, #30
 80037ac:	051b      	lsls	r3, r3, #20
 80037ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80037b2:	e01b      	b.n	80037ec <HAL_ADC_ConfigChannel+0x6a8>
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	fa93 f3a3 	rbit	r3, r3
 80037c0:	613b      	str	r3, [r7, #16]
  return result;
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d101      	bne.n	80037d0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80037cc:	2320      	movs	r3, #32
 80037ce:	e003      	b.n	80037d8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	fab3 f383 	clz	r3, r3
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	3301      	adds	r3, #1
 80037da:	f003 021f 	and.w	r2, r3, #31
 80037de:	4613      	mov	r3, r2
 80037e0:	005b      	lsls	r3, r3, #1
 80037e2:	4413      	add	r3, r2
 80037e4:	3b1e      	subs	r3, #30
 80037e6:	051b      	lsls	r3, r3, #20
 80037e8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037ec:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037f2:	4619      	mov	r1, r3
 80037f4:	f7ff fa12 	bl	8002c1c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	4b09      	ldr	r3, [pc, #36]	@ (8003824 <HAL_ADC_ConfigChannel+0x6e0>)
 80037fe:	4013      	ands	r3, r2
 8003800:	2b00      	cmp	r3, #0
 8003802:	f000 80be 	beq.w	8003982 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800380e:	d004      	beq.n	800381a <HAL_ADC_ConfigChannel+0x6d6>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a04      	ldr	r2, [pc, #16]	@ (8003828 <HAL_ADC_ConfigChannel+0x6e4>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d10a      	bne.n	8003830 <HAL_ADC_ConfigChannel+0x6ec>
 800381a:	4b04      	ldr	r3, [pc, #16]	@ (800382c <HAL_ADC_ConfigChannel+0x6e8>)
 800381c:	e009      	b.n	8003832 <HAL_ADC_ConfigChannel+0x6ee>
 800381e:	bf00      	nop
 8003820:	407f0000 	.word	0x407f0000
 8003824:	80080000 	.word	0x80080000
 8003828:	50000100 	.word	0x50000100
 800382c:	50000300 	.word	0x50000300
 8003830:	4b59      	ldr	r3, [pc, #356]	@ (8003998 <HAL_ADC_ConfigChannel+0x854>)
 8003832:	4618      	mov	r0, r3
 8003834:	f7ff f91a 	bl	8002a6c <LL_ADC_GetCommonPathInternalCh>
 8003838:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a56      	ldr	r2, [pc, #344]	@ (800399c <HAL_ADC_ConfigChannel+0x858>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d004      	beq.n	8003850 <HAL_ADC_ConfigChannel+0x70c>
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a55      	ldr	r2, [pc, #340]	@ (80039a0 <HAL_ADC_ConfigChannel+0x85c>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d13a      	bne.n	80038c6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003850:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003854:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d134      	bne.n	80038c6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003864:	d005      	beq.n	8003872 <HAL_ADC_ConfigChannel+0x72e>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a4e      	ldr	r2, [pc, #312]	@ (80039a4 <HAL_ADC_ConfigChannel+0x860>)
 800386c:	4293      	cmp	r3, r2
 800386e:	f040 8085 	bne.w	800397c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800387a:	d004      	beq.n	8003886 <HAL_ADC_ConfigChannel+0x742>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a49      	ldr	r2, [pc, #292]	@ (80039a8 <HAL_ADC_ConfigChannel+0x864>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d101      	bne.n	800388a <HAL_ADC_ConfigChannel+0x746>
 8003886:	4a49      	ldr	r2, [pc, #292]	@ (80039ac <HAL_ADC_ConfigChannel+0x868>)
 8003888:	e000      	b.n	800388c <HAL_ADC_ConfigChannel+0x748>
 800388a:	4a43      	ldr	r2, [pc, #268]	@ (8003998 <HAL_ADC_ConfigChannel+0x854>)
 800388c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003890:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003894:	4619      	mov	r1, r3
 8003896:	4610      	mov	r0, r2
 8003898:	f7ff f8d5 	bl	8002a46 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800389c:	4b44      	ldr	r3, [pc, #272]	@ (80039b0 <HAL_ADC_ConfigChannel+0x86c>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	099b      	lsrs	r3, r3, #6
 80038a2:	4a44      	ldr	r2, [pc, #272]	@ (80039b4 <HAL_ADC_ConfigChannel+0x870>)
 80038a4:	fba2 2303 	umull	r2, r3, r2, r3
 80038a8:	099b      	lsrs	r3, r3, #6
 80038aa:	1c5a      	adds	r2, r3, #1
 80038ac:	4613      	mov	r3, r2
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	4413      	add	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80038b6:	e002      	b.n	80038be <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	3b01      	subs	r3, #1
 80038bc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1f9      	bne.n	80038b8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038c4:	e05a      	b.n	800397c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a3b      	ldr	r2, [pc, #236]	@ (80039b8 <HAL_ADC_ConfigChannel+0x874>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d125      	bne.n	800391c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80038d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80038d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d11f      	bne.n	800391c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a31      	ldr	r2, [pc, #196]	@ (80039a8 <HAL_ADC_ConfigChannel+0x864>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d104      	bne.n	80038f0 <HAL_ADC_ConfigChannel+0x7ac>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a34      	ldr	r2, [pc, #208]	@ (80039bc <HAL_ADC_ConfigChannel+0x878>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d047      	beq.n	8003980 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038f8:	d004      	beq.n	8003904 <HAL_ADC_ConfigChannel+0x7c0>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a2a      	ldr	r2, [pc, #168]	@ (80039a8 <HAL_ADC_ConfigChannel+0x864>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d101      	bne.n	8003908 <HAL_ADC_ConfigChannel+0x7c4>
 8003904:	4a29      	ldr	r2, [pc, #164]	@ (80039ac <HAL_ADC_ConfigChannel+0x868>)
 8003906:	e000      	b.n	800390a <HAL_ADC_ConfigChannel+0x7c6>
 8003908:	4a23      	ldr	r2, [pc, #140]	@ (8003998 <HAL_ADC_ConfigChannel+0x854>)
 800390a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800390e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003912:	4619      	mov	r1, r3
 8003914:	4610      	mov	r0, r2
 8003916:	f7ff f896 	bl	8002a46 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800391a:	e031      	b.n	8003980 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a27      	ldr	r2, [pc, #156]	@ (80039c0 <HAL_ADC_ConfigChannel+0x87c>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d12d      	bne.n	8003982 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003926:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800392a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d127      	bne.n	8003982 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a1c      	ldr	r2, [pc, #112]	@ (80039a8 <HAL_ADC_ConfigChannel+0x864>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d022      	beq.n	8003982 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003944:	d004      	beq.n	8003950 <HAL_ADC_ConfigChannel+0x80c>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a17      	ldr	r2, [pc, #92]	@ (80039a8 <HAL_ADC_ConfigChannel+0x864>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d101      	bne.n	8003954 <HAL_ADC_ConfigChannel+0x810>
 8003950:	4a16      	ldr	r2, [pc, #88]	@ (80039ac <HAL_ADC_ConfigChannel+0x868>)
 8003952:	e000      	b.n	8003956 <HAL_ADC_ConfigChannel+0x812>
 8003954:	4a10      	ldr	r2, [pc, #64]	@ (8003998 <HAL_ADC_ConfigChannel+0x854>)
 8003956:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800395a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800395e:	4619      	mov	r1, r3
 8003960:	4610      	mov	r0, r2
 8003962:	f7ff f870 	bl	8002a46 <LL_ADC_SetCommonPathInternalCh>
 8003966:	e00c      	b.n	8003982 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800396c:	f043 0220 	orr.w	r2, r3, #32
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800397a:	e002      	b.n	8003982 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800397c:	bf00      	nop
 800397e:	e000      	b.n	8003982 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003980:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800398a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800398e:	4618      	mov	r0, r3
 8003990:	37d8      	adds	r7, #216	@ 0xd8
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	50000700 	.word	0x50000700
 800399c:	c3210000 	.word	0xc3210000
 80039a0:	90c00010 	.word	0x90c00010
 80039a4:	50000600 	.word	0x50000600
 80039a8:	50000100 	.word	0x50000100
 80039ac:	50000300 	.word	0x50000300
 80039b0:	20000210 	.word	0x20000210
 80039b4:	053e2d63 	.word	0x053e2d63
 80039b8:	c7520000 	.word	0xc7520000
 80039bc:	50000500 	.word	0x50000500
 80039c0:	cb840000 	.word	0xcb840000

080039c4 <LL_ADC_IsEnabled>:
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f003 0301 	and.w	r3, r3, #1
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d101      	bne.n	80039dc <LL_ADC_IsEnabled+0x18>
 80039d8:	2301      	movs	r3, #1
 80039da:	e000      	b.n	80039de <LL_ADC_IsEnabled+0x1a>
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr

080039ea <LL_ADC_REG_IsConversionOngoing>:
{
 80039ea:	b480      	push	{r7}
 80039ec:	b083      	sub	sp, #12
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f003 0304 	and.w	r3, r3, #4
 80039fa:	2b04      	cmp	r3, #4
 80039fc:	d101      	bne.n	8003a02 <LL_ADC_REG_IsConversionOngoing+0x18>
 80039fe:	2301      	movs	r3, #1
 8003a00:	e000      	b.n	8003a04 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003a10:	b590      	push	{r4, r7, lr}
 8003a12:	b0a1      	sub	sp, #132	@ 0x84
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d101      	bne.n	8003a2e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	e0e7      	b.n	8003bfe <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003a36:	2300      	movs	r3, #0
 8003a38:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a46:	d102      	bne.n	8003a4e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003a48:	4b6f      	ldr	r3, [pc, #444]	@ (8003c08 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003a4a:	60bb      	str	r3, [r7, #8]
 8003a4c:	e009      	b.n	8003a62 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a6e      	ldr	r2, [pc, #440]	@ (8003c0c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d102      	bne.n	8003a5e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003a58:	4b6d      	ldr	r3, [pc, #436]	@ (8003c10 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003a5a:	60bb      	str	r3, [r7, #8]
 8003a5c:	e001      	b.n	8003a62 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003a5e:	2300      	movs	r3, #0
 8003a60:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d10b      	bne.n	8003a80 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a6c:	f043 0220 	orr.w	r2, r3, #32
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e0be      	b.n	8003bfe <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7ff ffb1 	bl	80039ea <LL_ADC_REG_IsConversionOngoing>
 8003a88:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7ff ffab 	bl	80039ea <LL_ADC_REG_IsConversionOngoing>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f040 80a0 	bne.w	8003bdc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003a9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f040 809c 	bne.w	8003bdc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003aac:	d004      	beq.n	8003ab8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a55      	ldr	r2, [pc, #340]	@ (8003c08 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d101      	bne.n	8003abc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003ab8:	4b56      	ldr	r3, [pc, #344]	@ (8003c14 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003aba:	e000      	b.n	8003abe <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003abc:	4b56      	ldr	r3, [pc, #344]	@ (8003c18 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003abe:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d04b      	beq.n	8003b60 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003ac8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	6859      	ldr	r1, [r3, #4]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003ada:	035b      	lsls	r3, r3, #13
 8003adc:	430b      	orrs	r3, r1
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ae2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003aec:	d004      	beq.n	8003af8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a45      	ldr	r2, [pc, #276]	@ (8003c08 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d10f      	bne.n	8003b18 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003af8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003afc:	f7ff ff62 	bl	80039c4 <LL_ADC_IsEnabled>
 8003b00:	4604      	mov	r4, r0
 8003b02:	4841      	ldr	r0, [pc, #260]	@ (8003c08 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003b04:	f7ff ff5e 	bl	80039c4 <LL_ADC_IsEnabled>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	4323      	orrs	r3, r4
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	bf0c      	ite	eq
 8003b10:	2301      	moveq	r3, #1
 8003b12:	2300      	movne	r3, #0
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	e012      	b.n	8003b3e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003b18:	483c      	ldr	r0, [pc, #240]	@ (8003c0c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003b1a:	f7ff ff53 	bl	80039c4 <LL_ADC_IsEnabled>
 8003b1e:	4604      	mov	r4, r0
 8003b20:	483b      	ldr	r0, [pc, #236]	@ (8003c10 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003b22:	f7ff ff4f 	bl	80039c4 <LL_ADC_IsEnabled>
 8003b26:	4603      	mov	r3, r0
 8003b28:	431c      	orrs	r4, r3
 8003b2a:	483c      	ldr	r0, [pc, #240]	@ (8003c1c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003b2c:	f7ff ff4a 	bl	80039c4 <LL_ADC_IsEnabled>
 8003b30:	4603      	mov	r3, r0
 8003b32:	4323      	orrs	r3, r4
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	bf0c      	ite	eq
 8003b38:	2301      	moveq	r3, #1
 8003b3a:	2300      	movne	r3, #0
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d056      	beq.n	8003bf0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003b42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003b4a:	f023 030f 	bic.w	r3, r3, #15
 8003b4e:	683a      	ldr	r2, [r7, #0]
 8003b50:	6811      	ldr	r1, [r2, #0]
 8003b52:	683a      	ldr	r2, [r7, #0]
 8003b54:	6892      	ldr	r2, [r2, #8]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	431a      	orrs	r2, r3
 8003b5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b5c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003b5e:	e047      	b.n	8003bf0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003b60:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b68:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b6a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b74:	d004      	beq.n	8003b80 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a23      	ldr	r2, [pc, #140]	@ (8003c08 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d10f      	bne.n	8003ba0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003b80:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003b84:	f7ff ff1e 	bl	80039c4 <LL_ADC_IsEnabled>
 8003b88:	4604      	mov	r4, r0
 8003b8a:	481f      	ldr	r0, [pc, #124]	@ (8003c08 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003b8c:	f7ff ff1a 	bl	80039c4 <LL_ADC_IsEnabled>
 8003b90:	4603      	mov	r3, r0
 8003b92:	4323      	orrs	r3, r4
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	bf0c      	ite	eq
 8003b98:	2301      	moveq	r3, #1
 8003b9a:	2300      	movne	r3, #0
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	e012      	b.n	8003bc6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003ba0:	481a      	ldr	r0, [pc, #104]	@ (8003c0c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003ba2:	f7ff ff0f 	bl	80039c4 <LL_ADC_IsEnabled>
 8003ba6:	4604      	mov	r4, r0
 8003ba8:	4819      	ldr	r0, [pc, #100]	@ (8003c10 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003baa:	f7ff ff0b 	bl	80039c4 <LL_ADC_IsEnabled>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	431c      	orrs	r4, r3
 8003bb2:	481a      	ldr	r0, [pc, #104]	@ (8003c1c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003bb4:	f7ff ff06 	bl	80039c4 <LL_ADC_IsEnabled>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	4323      	orrs	r3, r4
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	bf0c      	ite	eq
 8003bc0:	2301      	moveq	r3, #1
 8003bc2:	2300      	movne	r3, #0
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d012      	beq.n	8003bf0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003bca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003bd2:	f023 030f 	bic.w	r3, r3, #15
 8003bd6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003bd8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003bda:	e009      	b.n	8003bf0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003be0:	f043 0220 	orr.w	r2, r3, #32
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003bee:	e000      	b.n	8003bf2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003bf0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003bfa:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3784      	adds	r7, #132	@ 0x84
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd90      	pop	{r4, r7, pc}
 8003c06:	bf00      	nop
 8003c08:	50000100 	.word	0x50000100
 8003c0c:	50000400 	.word	0x50000400
 8003c10:	50000500 	.word	0x50000500
 8003c14:	50000300 	.word	0x50000300
 8003c18:	50000700 	.word	0x50000700
 8003c1c:	50000600 	.word	0x50000600

08003c20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f003 0307 	and.w	r3, r3, #7
 8003c2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c30:	4b0c      	ldr	r3, [pc, #48]	@ (8003c64 <__NVIC_SetPriorityGrouping+0x44>)
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003c4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c52:	4a04      	ldr	r2, [pc, #16]	@ (8003c64 <__NVIC_SetPriorityGrouping+0x44>)
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	60d3      	str	r3, [r2, #12]
}
 8003c58:	bf00      	nop
 8003c5a:	3714      	adds	r7, #20
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr
 8003c64:	e000ed00 	.word	0xe000ed00

08003c68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c6c:	4b04      	ldr	r3, [pc, #16]	@ (8003c80 <__NVIC_GetPriorityGrouping+0x18>)
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	0a1b      	lsrs	r3, r3, #8
 8003c72:	f003 0307 	and.w	r3, r3, #7
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr
 8003c80:	e000ed00 	.word	0xe000ed00

08003c84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	db0b      	blt.n	8003cae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c96:	79fb      	ldrb	r3, [r7, #7]
 8003c98:	f003 021f 	and.w	r2, r3, #31
 8003c9c:	4907      	ldr	r1, [pc, #28]	@ (8003cbc <__NVIC_EnableIRQ+0x38>)
 8003c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ca2:	095b      	lsrs	r3, r3, #5
 8003ca4:	2001      	movs	r0, #1
 8003ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8003caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003cae:	bf00      	nop
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	e000e100 	.word	0xe000e100

08003cc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	6039      	str	r1, [r7, #0]
 8003cca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	db0a      	blt.n	8003cea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	b2da      	uxtb	r2, r3
 8003cd8:	490c      	ldr	r1, [pc, #48]	@ (8003d0c <__NVIC_SetPriority+0x4c>)
 8003cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cde:	0112      	lsls	r2, r2, #4
 8003ce0:	b2d2      	uxtb	r2, r2
 8003ce2:	440b      	add	r3, r1
 8003ce4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ce8:	e00a      	b.n	8003d00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	b2da      	uxtb	r2, r3
 8003cee:	4908      	ldr	r1, [pc, #32]	@ (8003d10 <__NVIC_SetPriority+0x50>)
 8003cf0:	79fb      	ldrb	r3, [r7, #7]
 8003cf2:	f003 030f 	and.w	r3, r3, #15
 8003cf6:	3b04      	subs	r3, #4
 8003cf8:	0112      	lsls	r2, r2, #4
 8003cfa:	b2d2      	uxtb	r2, r2
 8003cfc:	440b      	add	r3, r1
 8003cfe:	761a      	strb	r2, [r3, #24]
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr
 8003d0c:	e000e100 	.word	0xe000e100
 8003d10:	e000ed00 	.word	0xe000ed00

08003d14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b089      	sub	sp, #36	@ 0x24
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f003 0307 	and.w	r3, r3, #7
 8003d26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	f1c3 0307 	rsb	r3, r3, #7
 8003d2e:	2b04      	cmp	r3, #4
 8003d30:	bf28      	it	cs
 8003d32:	2304      	movcs	r3, #4
 8003d34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	3304      	adds	r3, #4
 8003d3a:	2b06      	cmp	r3, #6
 8003d3c:	d902      	bls.n	8003d44 <NVIC_EncodePriority+0x30>
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	3b03      	subs	r3, #3
 8003d42:	e000      	b.n	8003d46 <NVIC_EncodePriority+0x32>
 8003d44:	2300      	movs	r3, #0
 8003d46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d48:	f04f 32ff 	mov.w	r2, #4294967295
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d52:	43da      	mvns	r2, r3
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	401a      	ands	r2, r3
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	fa01 f303 	lsl.w	r3, r1, r3
 8003d66:	43d9      	mvns	r1, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d6c:	4313      	orrs	r3, r2
         );
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3724      	adds	r7, #36	@ 0x24
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
	...

08003d7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	3b01      	subs	r3, #1
 8003d88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d8c:	d301      	bcc.n	8003d92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e00f      	b.n	8003db2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d92:	4a0a      	ldr	r2, [pc, #40]	@ (8003dbc <SysTick_Config+0x40>)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	3b01      	subs	r3, #1
 8003d98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d9a:	210f      	movs	r1, #15
 8003d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003da0:	f7ff ff8e 	bl	8003cc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003da4:	4b05      	ldr	r3, [pc, #20]	@ (8003dbc <SysTick_Config+0x40>)
 8003da6:	2200      	movs	r2, #0
 8003da8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003daa:	4b04      	ldr	r3, [pc, #16]	@ (8003dbc <SysTick_Config+0x40>)
 8003dac:	2207      	movs	r2, #7
 8003dae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3708      	adds	r7, #8
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	e000e010 	.word	0xe000e010

08003dc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f7ff ff29 	bl	8003c20 <__NVIC_SetPriorityGrouping>
}
 8003dce:	bf00      	nop
 8003dd0:	3708      	adds	r7, #8
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b086      	sub	sp, #24
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	4603      	mov	r3, r0
 8003dde:	60b9      	str	r1, [r7, #8]
 8003de0:	607a      	str	r2, [r7, #4]
 8003de2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003de4:	f7ff ff40 	bl	8003c68 <__NVIC_GetPriorityGrouping>
 8003de8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	68b9      	ldr	r1, [r7, #8]
 8003dee:	6978      	ldr	r0, [r7, #20]
 8003df0:	f7ff ff90 	bl	8003d14 <NVIC_EncodePriority>
 8003df4:	4602      	mov	r2, r0
 8003df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dfa:	4611      	mov	r1, r2
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7ff ff5f 	bl	8003cc0 <__NVIC_SetPriority>
}
 8003e02:	bf00      	nop
 8003e04:	3718      	adds	r7, #24
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b082      	sub	sp, #8
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	4603      	mov	r3, r0
 8003e12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7ff ff33 	bl	8003c84 <__NVIC_EnableIRQ>
}
 8003e1e:	bf00      	nop
 8003e20:	3708      	adds	r7, #8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b082      	sub	sp, #8
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7ff ffa4 	bl	8003d7c <SysTick_Config>
 8003e34:	4603      	mov	r3, r0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
	...

08003e40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e08d      	b.n	8003f6e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	461a      	mov	r2, r3
 8003e58:	4b47      	ldr	r3, [pc, #284]	@ (8003f78 <HAL_DMA_Init+0x138>)
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d80f      	bhi.n	8003e7e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	461a      	mov	r2, r3
 8003e64:	4b45      	ldr	r3, [pc, #276]	@ (8003f7c <HAL_DMA_Init+0x13c>)
 8003e66:	4413      	add	r3, r2
 8003e68:	4a45      	ldr	r2, [pc, #276]	@ (8003f80 <HAL_DMA_Init+0x140>)
 8003e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6e:	091b      	lsrs	r3, r3, #4
 8003e70:	009a      	lsls	r2, r3, #2
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a42      	ldr	r2, [pc, #264]	@ (8003f84 <HAL_DMA_Init+0x144>)
 8003e7a:	641a      	str	r2, [r3, #64]	@ 0x40
 8003e7c:	e00e      	b.n	8003e9c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	461a      	mov	r2, r3
 8003e84:	4b40      	ldr	r3, [pc, #256]	@ (8003f88 <HAL_DMA_Init+0x148>)
 8003e86:	4413      	add	r3, r2
 8003e88:	4a3d      	ldr	r2, [pc, #244]	@ (8003f80 <HAL_DMA_Init+0x140>)
 8003e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8e:	091b      	lsrs	r3, r3, #4
 8003e90:	009a      	lsls	r2, r3, #2
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a3c      	ldr	r2, [pc, #240]	@ (8003f8c <HAL_DMA_Init+0x14c>)
 8003e9a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003eb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003eb6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003ec0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ecc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ed8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 fa82 	bl	80043f8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003efc:	d102      	bne.n	8003f04 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f0c:	b2d2      	uxtb	r2, r2
 8003f0e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003f18:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d010      	beq.n	8003f44 <HAL_DMA_Init+0x104>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	2b04      	cmp	r3, #4
 8003f28:	d80c      	bhi.n	8003f44 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 faa2 	bl	8004474 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f34:	2200      	movs	r2, #0
 8003f36:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003f40:	605a      	str	r2, [r3, #4]
 8003f42:	e008      	b.n	8003f56 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	40020407 	.word	0x40020407
 8003f7c:	bffdfff8 	.word	0xbffdfff8
 8003f80:	cccccccd 	.word	0xcccccccd
 8003f84:	40020000 	.word	0x40020000
 8003f88:	bffdfbf8 	.word	0xbffdfbf8
 8003f8c:	40020400 	.word	0x40020400

08003f90 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b086      	sub	sp, #24
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
 8003f9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d101      	bne.n	8003fb0 <HAL_DMA_Start_IT+0x20>
 8003fac:	2302      	movs	r3, #2
 8003fae:	e066      	b.n	800407e <HAL_DMA_Start_IT+0xee>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d155      	bne.n	8004070 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f022 0201 	bic.w	r2, r2, #1
 8003fe0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	68b9      	ldr	r1, [r7, #8]
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	f000 f9c7 	bl	800437c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d008      	beq.n	8004008 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f042 020e 	orr.w	r2, r2, #14
 8004004:	601a      	str	r2, [r3, #0]
 8004006:	e00f      	b.n	8004028 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f022 0204 	bic.w	r2, r2, #4
 8004016:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f042 020a 	orr.w	r2, r2, #10
 8004026:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d007      	beq.n	8004046 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004040:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004044:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800404a:	2b00      	cmp	r3, #0
 800404c:	d007      	beq.n	800405e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004058:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800405c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f042 0201 	orr.w	r2, r2, #1
 800406c:	601a      	str	r2, [r3, #0]
 800406e:	e005      	b.n	800407c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004078:	2302      	movs	r3, #2
 800407a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800407c:	7dfb      	ldrb	r3, [r7, #23]
}
 800407e:	4618      	mov	r0, r3
 8004080:	3718      	adds	r7, #24
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004086:	b480      	push	{r7}
 8004088:	b085      	sub	sp, #20
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800408e:	2300      	movs	r3, #0
 8004090:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b02      	cmp	r3, #2
 800409c:	d005      	beq.n	80040aa <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2204      	movs	r2, #4
 80040a2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	73fb      	strb	r3, [r7, #15]
 80040a8:	e037      	b.n	800411a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f022 020e 	bic.w	r2, r2, #14
 80040b8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80040c8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f022 0201 	bic.w	r2, r2, #1
 80040d8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040de:	f003 021f 	and.w	r2, r3, #31
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e6:	2101      	movs	r1, #1
 80040e8:	fa01 f202 	lsl.w	r2, r1, r2
 80040ec:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80040f6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00c      	beq.n	800411a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800410a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800410e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004118:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800412a:	7bfb      	ldrb	r3, [r7, #15]
}
 800412c:	4618      	mov	r0, r3
 800412e:	3714      	adds	r7, #20
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004140:	2300      	movs	r3, #0
 8004142:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800414a:	b2db      	uxtb	r3, r3
 800414c:	2b02      	cmp	r3, #2
 800414e:	d00d      	beq.n	800416c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2204      	movs	r2, #4
 8004154:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2201      	movs	r2, #1
 800415a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	73fb      	strb	r3, [r7, #15]
 800416a:	e047      	b.n	80041fc <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f022 020e 	bic.w	r2, r2, #14
 800417a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f022 0201 	bic.w	r2, r2, #1
 800418a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004196:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800419a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041a0:	f003 021f 	and.w	r2, r3, #31
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a8:	2101      	movs	r1, #1
 80041aa:	fa01 f202 	lsl.w	r2, r1, r2
 80041ae:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80041b8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00c      	beq.n	80041dc <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80041d0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80041da:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d003      	beq.n	80041fc <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	4798      	blx	r3
    }
  }
  return status;
 80041fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3710      	adds	r7, #16
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004206:	b580      	push	{r7, lr}
 8004208:	b084      	sub	sp, #16
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004222:	f003 031f 	and.w	r3, r3, #31
 8004226:	2204      	movs	r2, #4
 8004228:	409a      	lsls	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	4013      	ands	r3, r2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d026      	beq.n	8004280 <HAL_DMA_IRQHandler+0x7a>
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	f003 0304 	and.w	r3, r3, #4
 8004238:	2b00      	cmp	r3, #0
 800423a:	d021      	beq.n	8004280 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0320 	and.w	r3, r3, #32
 8004246:	2b00      	cmp	r3, #0
 8004248:	d107      	bne.n	800425a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f022 0204 	bic.w	r2, r2, #4
 8004258:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800425e:	f003 021f 	and.w	r2, r3, #31
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004266:	2104      	movs	r1, #4
 8004268:	fa01 f202 	lsl.w	r2, r1, r2
 800426c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004272:	2b00      	cmp	r3, #0
 8004274:	d071      	beq.n	800435a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800427e:	e06c      	b.n	800435a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004284:	f003 031f 	and.w	r3, r3, #31
 8004288:	2202      	movs	r2, #2
 800428a:	409a      	lsls	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	4013      	ands	r3, r2
 8004290:	2b00      	cmp	r3, #0
 8004292:	d02e      	beq.n	80042f2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d029      	beq.n	80042f2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0320 	and.w	r3, r3, #32
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d10b      	bne.n	80042c4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f022 020a 	bic.w	r2, r2, #10
 80042ba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042c8:	f003 021f 	and.w	r2, r3, #31
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d0:	2102      	movs	r1, #2
 80042d2:	fa01 f202 	lsl.w	r2, r1, r2
 80042d6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d038      	beq.n	800435a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80042f0:	e033      	b.n	800435a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042f6:	f003 031f 	and.w	r3, r3, #31
 80042fa:	2208      	movs	r2, #8
 80042fc:	409a      	lsls	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	4013      	ands	r3, r2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d02a      	beq.n	800435c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	f003 0308 	and.w	r3, r3, #8
 800430c:	2b00      	cmp	r3, #0
 800430e:	d025      	beq.n	800435c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f022 020e 	bic.w	r2, r2, #14
 800431e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004324:	f003 021f 	and.w	r2, r3, #31
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800432c:	2101      	movs	r1, #1
 800432e:	fa01 f202 	lsl.w	r2, r1, r2
 8004332:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2201      	movs	r2, #1
 800433e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800434e:	2b00      	cmp	r3, #0
 8004350:	d004      	beq.n	800435c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800435a:	bf00      	nop
 800435c:	bf00      	nop
}
 800435e:	3710      	adds	r7, #16
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8004370:	4618      	mov	r0, r3
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800437c:	b480      	push	{r7}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
 8004388:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004392:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004398:	2b00      	cmp	r3, #0
 800439a:	d004      	beq.n	80043a6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043a0:	68fa      	ldr	r2, [r7, #12]
 80043a2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80043a4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043aa:	f003 021f 	and.w	r2, r3, #31
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b2:	2101      	movs	r1, #1
 80043b4:	fa01 f202 	lsl.w	r2, r1, r2
 80043b8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	683a      	ldr	r2, [r7, #0]
 80043c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	2b10      	cmp	r3, #16
 80043c8:	d108      	bne.n	80043dc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68ba      	ldr	r2, [r7, #8]
 80043d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80043da:	e007      	b.n	80043ec <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68ba      	ldr	r2, [r7, #8]
 80043e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	60da      	str	r2, [r3, #12]
}
 80043ec:	bf00      	nop
 80043ee:	3714      	adds	r7, #20
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b087      	sub	sp, #28
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	461a      	mov	r2, r3
 8004406:	4b16      	ldr	r3, [pc, #88]	@ (8004460 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004408:	429a      	cmp	r2, r3
 800440a:	d802      	bhi.n	8004412 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800440c:	4b15      	ldr	r3, [pc, #84]	@ (8004464 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800440e:	617b      	str	r3, [r7, #20]
 8004410:	e001      	b.n	8004416 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004412:	4b15      	ldr	r3, [pc, #84]	@ (8004468 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004414:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	b2db      	uxtb	r3, r3
 8004420:	3b08      	subs	r3, #8
 8004422:	4a12      	ldr	r2, [pc, #72]	@ (800446c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004424:	fba2 2303 	umull	r2, r3, r2, r3
 8004428:	091b      	lsrs	r3, r3, #4
 800442a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004430:	089b      	lsrs	r3, r3, #2
 8004432:	009a      	lsls	r2, r3, #2
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	4413      	add	r3, r2
 8004438:	461a      	mov	r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a0b      	ldr	r2, [pc, #44]	@ (8004470 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004442:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f003 031f 	and.w	r3, r3, #31
 800444a:	2201      	movs	r2, #1
 800444c:	409a      	lsls	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004452:	bf00      	nop
 8004454:	371c      	adds	r7, #28
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	40020407 	.word	0x40020407
 8004464:	40020800 	.word	0x40020800
 8004468:	40020820 	.word	0x40020820
 800446c:	cccccccd 	.word	0xcccccccd
 8004470:	40020880 	.word	0x40020880

08004474 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	b2db      	uxtb	r3, r3
 8004482:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	4b0b      	ldr	r3, [pc, #44]	@ (80044b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004488:	4413      	add	r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	461a      	mov	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a08      	ldr	r2, [pc, #32]	@ (80044b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004496:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	3b01      	subs	r3, #1
 800449c:	f003 031f 	and.w	r3, r3, #31
 80044a0:	2201      	movs	r2, #1
 80044a2:	409a      	lsls	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80044a8:	bf00      	nop
 80044aa:	3714      	adds	r7, #20
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr
 80044b4:	1000823f 	.word	0x1000823f
 80044b8:	40020940 	.word	0x40020940

080044bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044bc:	b480      	push	{r7}
 80044be:	b087      	sub	sp, #28
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80044c6:	2300      	movs	r3, #0
 80044c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80044ca:	e15a      	b.n	8004782 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	2101      	movs	r1, #1
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	fa01 f303 	lsl.w	r3, r1, r3
 80044d8:	4013      	ands	r3, r2
 80044da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f000 814c 	beq.w	800477c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f003 0303 	and.w	r3, r3, #3
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d005      	beq.n	80044fc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d130      	bne.n	800455e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	005b      	lsls	r3, r3, #1
 8004506:	2203      	movs	r2, #3
 8004508:	fa02 f303 	lsl.w	r3, r2, r3
 800450c:	43db      	mvns	r3, r3
 800450e:	693a      	ldr	r2, [r7, #16]
 8004510:	4013      	ands	r3, r2
 8004512:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	68da      	ldr	r2, [r3, #12]
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	005b      	lsls	r3, r3, #1
 800451c:	fa02 f303 	lsl.w	r3, r2, r3
 8004520:	693a      	ldr	r2, [r7, #16]
 8004522:	4313      	orrs	r3, r2
 8004524:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004532:	2201      	movs	r2, #1
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	fa02 f303 	lsl.w	r3, r2, r3
 800453a:	43db      	mvns	r3, r3
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	4013      	ands	r3, r2
 8004540:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	091b      	lsrs	r3, r3, #4
 8004548:	f003 0201 	and.w	r2, r3, #1
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	fa02 f303 	lsl.w	r3, r2, r3
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	4313      	orrs	r3, r2
 8004556:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f003 0303 	and.w	r3, r3, #3
 8004566:	2b03      	cmp	r3, #3
 8004568:	d017      	beq.n	800459a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	005b      	lsls	r3, r3, #1
 8004574:	2203      	movs	r2, #3
 8004576:	fa02 f303 	lsl.w	r3, r2, r3
 800457a:	43db      	mvns	r3, r3
 800457c:	693a      	ldr	r2, [r7, #16]
 800457e:	4013      	ands	r3, r2
 8004580:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	689a      	ldr	r2, [r3, #8]
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	005b      	lsls	r3, r3, #1
 800458a:	fa02 f303 	lsl.w	r3, r2, r3
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	4313      	orrs	r3, r2
 8004592:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f003 0303 	and.w	r3, r3, #3
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d123      	bne.n	80045ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	08da      	lsrs	r2, r3, #3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	3208      	adds	r2, #8
 80045ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	f003 0307 	and.w	r3, r3, #7
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	220f      	movs	r2, #15
 80045be:	fa02 f303 	lsl.w	r3, r2, r3
 80045c2:	43db      	mvns	r3, r3
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	4013      	ands	r3, r2
 80045c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	691a      	ldr	r2, [r3, #16]
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	f003 0307 	and.w	r3, r3, #7
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	fa02 f303 	lsl.w	r3, r2, r3
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	4313      	orrs	r3, r2
 80045de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	08da      	lsrs	r2, r3, #3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	3208      	adds	r2, #8
 80045e8:	6939      	ldr	r1, [r7, #16]
 80045ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	005b      	lsls	r3, r3, #1
 80045f8:	2203      	movs	r2, #3
 80045fa:	fa02 f303 	lsl.w	r3, r2, r3
 80045fe:	43db      	mvns	r3, r3
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	4013      	ands	r3, r2
 8004604:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f003 0203 	and.w	r2, r3, #3
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	005b      	lsls	r3, r3, #1
 8004612:	fa02 f303 	lsl.w	r3, r2, r3
 8004616:	693a      	ldr	r2, [r7, #16]
 8004618:	4313      	orrs	r3, r2
 800461a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800462a:	2b00      	cmp	r3, #0
 800462c:	f000 80a6 	beq.w	800477c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004630:	4b5b      	ldr	r3, [pc, #364]	@ (80047a0 <HAL_GPIO_Init+0x2e4>)
 8004632:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004634:	4a5a      	ldr	r2, [pc, #360]	@ (80047a0 <HAL_GPIO_Init+0x2e4>)
 8004636:	f043 0301 	orr.w	r3, r3, #1
 800463a:	6613      	str	r3, [r2, #96]	@ 0x60
 800463c:	4b58      	ldr	r3, [pc, #352]	@ (80047a0 <HAL_GPIO_Init+0x2e4>)
 800463e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004640:	f003 0301 	and.w	r3, r3, #1
 8004644:	60bb      	str	r3, [r7, #8]
 8004646:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004648:	4a56      	ldr	r2, [pc, #344]	@ (80047a4 <HAL_GPIO_Init+0x2e8>)
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	089b      	lsrs	r3, r3, #2
 800464e:	3302      	adds	r3, #2
 8004650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004654:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	f003 0303 	and.w	r3, r3, #3
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	220f      	movs	r2, #15
 8004660:	fa02 f303 	lsl.w	r3, r2, r3
 8004664:	43db      	mvns	r3, r3
 8004666:	693a      	ldr	r2, [r7, #16]
 8004668:	4013      	ands	r3, r2
 800466a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004672:	d01f      	beq.n	80046b4 <HAL_GPIO_Init+0x1f8>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a4c      	ldr	r2, [pc, #304]	@ (80047a8 <HAL_GPIO_Init+0x2ec>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d019      	beq.n	80046b0 <HAL_GPIO_Init+0x1f4>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a4b      	ldr	r2, [pc, #300]	@ (80047ac <HAL_GPIO_Init+0x2f0>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d013      	beq.n	80046ac <HAL_GPIO_Init+0x1f0>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a4a      	ldr	r2, [pc, #296]	@ (80047b0 <HAL_GPIO_Init+0x2f4>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d00d      	beq.n	80046a8 <HAL_GPIO_Init+0x1ec>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a49      	ldr	r2, [pc, #292]	@ (80047b4 <HAL_GPIO_Init+0x2f8>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d007      	beq.n	80046a4 <HAL_GPIO_Init+0x1e8>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a48      	ldr	r2, [pc, #288]	@ (80047b8 <HAL_GPIO_Init+0x2fc>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d101      	bne.n	80046a0 <HAL_GPIO_Init+0x1e4>
 800469c:	2305      	movs	r3, #5
 800469e:	e00a      	b.n	80046b6 <HAL_GPIO_Init+0x1fa>
 80046a0:	2306      	movs	r3, #6
 80046a2:	e008      	b.n	80046b6 <HAL_GPIO_Init+0x1fa>
 80046a4:	2304      	movs	r3, #4
 80046a6:	e006      	b.n	80046b6 <HAL_GPIO_Init+0x1fa>
 80046a8:	2303      	movs	r3, #3
 80046aa:	e004      	b.n	80046b6 <HAL_GPIO_Init+0x1fa>
 80046ac:	2302      	movs	r3, #2
 80046ae:	e002      	b.n	80046b6 <HAL_GPIO_Init+0x1fa>
 80046b0:	2301      	movs	r3, #1
 80046b2:	e000      	b.n	80046b6 <HAL_GPIO_Init+0x1fa>
 80046b4:	2300      	movs	r3, #0
 80046b6:	697a      	ldr	r2, [r7, #20]
 80046b8:	f002 0203 	and.w	r2, r2, #3
 80046bc:	0092      	lsls	r2, r2, #2
 80046be:	4093      	lsls	r3, r2
 80046c0:	693a      	ldr	r2, [r7, #16]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046c6:	4937      	ldr	r1, [pc, #220]	@ (80047a4 <HAL_GPIO_Init+0x2e8>)
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	089b      	lsrs	r3, r3, #2
 80046cc:	3302      	adds	r3, #2
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80046d4:	4b39      	ldr	r3, [pc, #228]	@ (80047bc <HAL_GPIO_Init+0x300>)
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	43db      	mvns	r3, r3
 80046de:	693a      	ldr	r2, [r7, #16]
 80046e0:	4013      	ands	r3, r2
 80046e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d003      	beq.n	80046f8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80046f8:	4a30      	ldr	r2, [pc, #192]	@ (80047bc <HAL_GPIO_Init+0x300>)
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80046fe:	4b2f      	ldr	r3, [pc, #188]	@ (80047bc <HAL_GPIO_Init+0x300>)
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	43db      	mvns	r3, r3
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	4013      	ands	r3, r2
 800470c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d003      	beq.n	8004722 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	4313      	orrs	r3, r2
 8004720:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004722:	4a26      	ldr	r2, [pc, #152]	@ (80047bc <HAL_GPIO_Init+0x300>)
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004728:	4b24      	ldr	r3, [pc, #144]	@ (80047bc <HAL_GPIO_Init+0x300>)
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	43db      	mvns	r3, r3
 8004732:	693a      	ldr	r2, [r7, #16]
 8004734:	4013      	ands	r3, r2
 8004736:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d003      	beq.n	800474c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004744:	693a      	ldr	r2, [r7, #16]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	4313      	orrs	r3, r2
 800474a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800474c:	4a1b      	ldr	r2, [pc, #108]	@ (80047bc <HAL_GPIO_Init+0x300>)
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004752:	4b1a      	ldr	r3, [pc, #104]	@ (80047bc <HAL_GPIO_Init+0x300>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	43db      	mvns	r3, r3
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	4013      	ands	r3, r2
 8004760:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d003      	beq.n	8004776 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800476e:	693a      	ldr	r2, [r7, #16]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	4313      	orrs	r3, r2
 8004774:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004776:	4a11      	ldr	r2, [pc, #68]	@ (80047bc <HAL_GPIO_Init+0x300>)
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	3301      	adds	r3, #1
 8004780:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	fa22 f303 	lsr.w	r3, r2, r3
 800478c:	2b00      	cmp	r3, #0
 800478e:	f47f ae9d 	bne.w	80044cc <HAL_GPIO_Init+0x10>
  }
}
 8004792:	bf00      	nop
 8004794:	bf00      	nop
 8004796:	371c      	adds	r7, #28
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr
 80047a0:	40021000 	.word	0x40021000
 80047a4:	40010000 	.word	0x40010000
 80047a8:	48000400 	.word	0x48000400
 80047ac:	48000800 	.word	0x48000800
 80047b0:	48000c00 	.word	0x48000c00
 80047b4:	48001000 	.word	0x48001000
 80047b8:	48001400 	.word	0x48001400
 80047bc:	40010400 	.word	0x40010400

080047c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	460b      	mov	r3, r1
 80047ca:	807b      	strh	r3, [r7, #2]
 80047cc:	4613      	mov	r3, r2
 80047ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80047d0:	787b      	ldrb	r3, [r7, #1]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d003      	beq.n	80047de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80047d6:	887a      	ldrh	r2, [r7, #2]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80047dc:	e002      	b.n	80047e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80047de:	887a      	ldrh	r2, [r7, #2]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80047e4:	bf00      	nop
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	4603      	mov	r3, r0
 80047f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80047fa:	4b08      	ldr	r3, [pc, #32]	@ (800481c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047fc:	695a      	ldr	r2, [r3, #20]
 80047fe:	88fb      	ldrh	r3, [r7, #6]
 8004800:	4013      	ands	r3, r2
 8004802:	2b00      	cmp	r3, #0
 8004804:	d006      	beq.n	8004814 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004806:	4a05      	ldr	r2, [pc, #20]	@ (800481c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004808:	88fb      	ldrh	r3, [r7, #6]
 800480a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800480c:	88fb      	ldrh	r3, [r7, #6]
 800480e:	4618      	mov	r0, r3
 8004810:	f7fd fc7a 	bl	8002108 <HAL_GPIO_EXTI_Callback>
  }
}
 8004814:	bf00      	nop
 8004816:	3708      	adds	r7, #8
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	40010400 	.word	0x40010400

08004820 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d141      	bne.n	80048b2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800482e:	4b4b      	ldr	r3, [pc, #300]	@ (800495c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004836:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800483a:	d131      	bne.n	80048a0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800483c:	4b47      	ldr	r3, [pc, #284]	@ (800495c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800483e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004842:	4a46      	ldr	r2, [pc, #280]	@ (800495c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004844:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004848:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800484c:	4b43      	ldr	r3, [pc, #268]	@ (800495c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004854:	4a41      	ldr	r2, [pc, #260]	@ (800495c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004856:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800485a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800485c:	4b40      	ldr	r3, [pc, #256]	@ (8004960 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2232      	movs	r2, #50	@ 0x32
 8004862:	fb02 f303 	mul.w	r3, r2, r3
 8004866:	4a3f      	ldr	r2, [pc, #252]	@ (8004964 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004868:	fba2 2303 	umull	r2, r3, r2, r3
 800486c:	0c9b      	lsrs	r3, r3, #18
 800486e:	3301      	adds	r3, #1
 8004870:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004872:	e002      	b.n	800487a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	3b01      	subs	r3, #1
 8004878:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800487a:	4b38      	ldr	r3, [pc, #224]	@ (800495c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800487c:	695b      	ldr	r3, [r3, #20]
 800487e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004882:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004886:	d102      	bne.n	800488e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1f2      	bne.n	8004874 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800488e:	4b33      	ldr	r3, [pc, #204]	@ (800495c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004896:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800489a:	d158      	bne.n	800494e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	e057      	b.n	8004950 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048a0:	4b2e      	ldr	r3, [pc, #184]	@ (800495c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048a6:	4a2d      	ldr	r2, [pc, #180]	@ (800495c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80048b0:	e04d      	b.n	800494e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048b8:	d141      	bne.n	800493e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80048ba:	4b28      	ldr	r3, [pc, #160]	@ (800495c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80048c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048c6:	d131      	bne.n	800492c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048c8:	4b24      	ldr	r3, [pc, #144]	@ (800495c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048ce:	4a23      	ldr	r2, [pc, #140]	@ (800495c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80048d8:	4b20      	ldr	r3, [pc, #128]	@ (800495c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80048e0:	4a1e      	ldr	r2, [pc, #120]	@ (800495c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80048e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80048e8:	4b1d      	ldr	r3, [pc, #116]	@ (8004960 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2232      	movs	r2, #50	@ 0x32
 80048ee:	fb02 f303 	mul.w	r3, r2, r3
 80048f2:	4a1c      	ldr	r2, [pc, #112]	@ (8004964 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80048f4:	fba2 2303 	umull	r2, r3, r2, r3
 80048f8:	0c9b      	lsrs	r3, r3, #18
 80048fa:	3301      	adds	r3, #1
 80048fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048fe:	e002      	b.n	8004906 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	3b01      	subs	r3, #1
 8004904:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004906:	4b15      	ldr	r3, [pc, #84]	@ (800495c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800490e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004912:	d102      	bne.n	800491a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1f2      	bne.n	8004900 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800491a:	4b10      	ldr	r3, [pc, #64]	@ (800495c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004922:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004926:	d112      	bne.n	800494e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e011      	b.n	8004950 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800492c:	4b0b      	ldr	r3, [pc, #44]	@ (800495c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800492e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004932:	4a0a      	ldr	r2, [pc, #40]	@ (800495c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004934:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004938:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800493c:	e007      	b.n	800494e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800493e:	4b07      	ldr	r3, [pc, #28]	@ (800495c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004946:	4a05      	ldr	r2, [pc, #20]	@ (800495c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004948:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800494c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	3714      	adds	r7, #20
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr
 800495c:	40007000 	.word	0x40007000
 8004960:	20000210 	.word	0x20000210
 8004964:	431bde83 	.word	0x431bde83

08004968 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004968:	b480      	push	{r7}
 800496a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800496c:	4b05      	ldr	r3, [pc, #20]	@ (8004984 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	4a04      	ldr	r2, [pc, #16]	@ (8004984 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004972:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004976:	6093      	str	r3, [r2, #8]
}
 8004978:	bf00      	nop
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	40007000 	.word	0x40007000

08004988 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b088      	sub	sp, #32
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e2fe      	b.n	8004f98 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d075      	beq.n	8004a92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049a6:	4b97      	ldr	r3, [pc, #604]	@ (8004c04 <HAL_RCC_OscConfig+0x27c>)
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f003 030c 	and.w	r3, r3, #12
 80049ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049b0:	4b94      	ldr	r3, [pc, #592]	@ (8004c04 <HAL_RCC_OscConfig+0x27c>)
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	f003 0303 	and.w	r3, r3, #3
 80049b8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	2b0c      	cmp	r3, #12
 80049be:	d102      	bne.n	80049c6 <HAL_RCC_OscConfig+0x3e>
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	2b03      	cmp	r3, #3
 80049c4:	d002      	beq.n	80049cc <HAL_RCC_OscConfig+0x44>
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	2b08      	cmp	r3, #8
 80049ca:	d10b      	bne.n	80049e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049cc:	4b8d      	ldr	r3, [pc, #564]	@ (8004c04 <HAL_RCC_OscConfig+0x27c>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d05b      	beq.n	8004a90 <HAL_RCC_OscConfig+0x108>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d157      	bne.n	8004a90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e2d9      	b.n	8004f98 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049ec:	d106      	bne.n	80049fc <HAL_RCC_OscConfig+0x74>
 80049ee:	4b85      	ldr	r3, [pc, #532]	@ (8004c04 <HAL_RCC_OscConfig+0x27c>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a84      	ldr	r2, [pc, #528]	@ (8004c04 <HAL_RCC_OscConfig+0x27c>)
 80049f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049f8:	6013      	str	r3, [r2, #0]
 80049fa:	e01d      	b.n	8004a38 <HAL_RCC_OscConfig+0xb0>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a04:	d10c      	bne.n	8004a20 <HAL_RCC_OscConfig+0x98>
 8004a06:	4b7f      	ldr	r3, [pc, #508]	@ (8004c04 <HAL_RCC_OscConfig+0x27c>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a7e      	ldr	r2, [pc, #504]	@ (8004c04 <HAL_RCC_OscConfig+0x27c>)
 8004a0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a10:	6013      	str	r3, [r2, #0]
 8004a12:	4b7c      	ldr	r3, [pc, #496]	@ (8004c04 <HAL_RCC_OscConfig+0x27c>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a7b      	ldr	r2, [pc, #492]	@ (8004c04 <HAL_RCC_OscConfig+0x27c>)
 8004a18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a1c:	6013      	str	r3, [r2, #0]
 8004a1e:	e00b      	b.n	8004a38 <HAL_RCC_OscConfig+0xb0>
 8004a20:	4b78      	ldr	r3, [pc, #480]	@ (8004c04 <HAL_RCC_OscConfig+0x27c>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a77      	ldr	r2, [pc, #476]	@ (8004c04 <HAL_RCC_OscConfig+0x27c>)
 8004a26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a2a:	6013      	str	r3, [r2, #0]
 8004a2c:	4b75      	ldr	r3, [pc, #468]	@ (8004c04 <HAL_RCC_OscConfig+0x27c>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a74      	ldr	r2, [pc, #464]	@ (8004c04 <HAL_RCC_OscConfig+0x27c>)
 8004a32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d013      	beq.n	8004a68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a40:	f7fd ffc0 	bl	80029c4 <HAL_GetTick>
 8004a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a46:	e008      	b.n	8004a5a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a48:	f7fd ffbc 	bl	80029c4 <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	2b64      	cmp	r3, #100	@ 0x64
 8004a54:	d901      	bls.n	8004a5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e29e      	b.n	8004f98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a5a:	4b6a      	ldr	r3, [pc, #424]	@ (8004c04 <HAL_RCC_OscConfig+0x27c>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d0f0      	beq.n	8004a48 <HAL_RCC_OscConfig+0xc0>
 8004a66:	e014      	b.n	8004a92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a68:	f7fd ffac 	bl	80029c4 <HAL_GetTick>
 8004a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a6e:	e008      	b.n	8004a82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a70:	f7fd ffa8 	bl	80029c4 <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	2b64      	cmp	r3, #100	@ 0x64
 8004a7c:	d901      	bls.n	8004a82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e28a      	b.n	8004f98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a82:	4b60      	ldr	r3, [pc, #384]	@ (8004c04 <HAL_RCC_OscConfig+0x27c>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1f0      	bne.n	8004a70 <HAL_RCC_OscConfig+0xe8>
 8004a8e:	e000      	b.n	8004a92 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d075      	beq.n	8004b8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a9e:	4b59      	ldr	r3, [pc, #356]	@ (8004c04 <HAL_RCC_OscConfig+0x27c>)
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f003 030c 	and.w	r3, r3, #12
 8004aa6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004aa8:	4b56      	ldr	r3, [pc, #344]	@ (8004c04 <HAL_RCC_OscConfig+0x27c>)
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	f003 0303 	and.w	r3, r3, #3
 8004ab0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	2b0c      	cmp	r3, #12
 8004ab6:	d102      	bne.n	8004abe <HAL_RCC_OscConfig+0x136>
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d002      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x13c>
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	2b04      	cmp	r3, #4
 8004ac2:	d11f      	bne.n	8004b04 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ac4:	4b4f      	ldr	r3, [pc, #316]	@ (8004c04 <HAL_RCC_OscConfig+0x27c>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d005      	beq.n	8004adc <HAL_RCC_OscConfig+0x154>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d101      	bne.n	8004adc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e25d      	b.n	8004f98 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004adc:	4b49      	ldr	r3, [pc, #292]	@ (8004c04 <HAL_RCC_OscConfig+0x27c>)
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	061b      	lsls	r3, r3, #24
 8004aea:	4946      	ldr	r1, [pc, #280]	@ (8004c04 <HAL_RCC_OscConfig+0x27c>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004af0:	4b45      	ldr	r3, [pc, #276]	@ (8004c08 <HAL_RCC_OscConfig+0x280>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7fd ff19 	bl	800292c <HAL_InitTick>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d043      	beq.n	8004b88 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e249      	b.n	8004f98 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d023      	beq.n	8004b54 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b0c:	4b3d      	ldr	r3, [pc, #244]	@ (8004c04 <HAL_RCC_OscConfig+0x27c>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a3c      	ldr	r2, [pc, #240]	@ (8004c04 <HAL_RCC_OscConfig+0x27c>)
 8004b12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b18:	f7fd ff54 	bl	80029c4 <HAL_GetTick>
 8004b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b1e:	e008      	b.n	8004b32 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b20:	f7fd ff50 	bl	80029c4 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d901      	bls.n	8004b32 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e232      	b.n	8004f98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b32:	4b34      	ldr	r3, [pc, #208]	@ (8004c04 <HAL_RCC_OscConfig+0x27c>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d0f0      	beq.n	8004b20 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b3e:	4b31      	ldr	r3, [pc, #196]	@ (8004c04 <HAL_RCC_OscConfig+0x27c>)
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	061b      	lsls	r3, r3, #24
 8004b4c:	492d      	ldr	r1, [pc, #180]	@ (8004c04 <HAL_RCC_OscConfig+0x27c>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	604b      	str	r3, [r1, #4]
 8004b52:	e01a      	b.n	8004b8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b54:	4b2b      	ldr	r3, [pc, #172]	@ (8004c04 <HAL_RCC_OscConfig+0x27c>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a2a      	ldr	r2, [pc, #168]	@ (8004c04 <HAL_RCC_OscConfig+0x27c>)
 8004b5a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b60:	f7fd ff30 	bl	80029c4 <HAL_GetTick>
 8004b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b66:	e008      	b.n	8004b7a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b68:	f7fd ff2c 	bl	80029c4 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e20e      	b.n	8004f98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b7a:	4b22      	ldr	r3, [pc, #136]	@ (8004c04 <HAL_RCC_OscConfig+0x27c>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1f0      	bne.n	8004b68 <HAL_RCC_OscConfig+0x1e0>
 8004b86:	e000      	b.n	8004b8a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b88:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0308 	and.w	r3, r3, #8
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d041      	beq.n	8004c1a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d01c      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b9e:	4b19      	ldr	r3, [pc, #100]	@ (8004c04 <HAL_RCC_OscConfig+0x27c>)
 8004ba0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ba4:	4a17      	ldr	r2, [pc, #92]	@ (8004c04 <HAL_RCC_OscConfig+0x27c>)
 8004ba6:	f043 0301 	orr.w	r3, r3, #1
 8004baa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bae:	f7fd ff09 	bl	80029c4 <HAL_GetTick>
 8004bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004bb4:	e008      	b.n	8004bc8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bb6:	f7fd ff05 	bl	80029c4 <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d901      	bls.n	8004bc8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e1e7      	b.n	8004f98 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004bc8:	4b0e      	ldr	r3, [pc, #56]	@ (8004c04 <HAL_RCC_OscConfig+0x27c>)
 8004bca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d0ef      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x22e>
 8004bd6:	e020      	b.n	8004c1a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8004c04 <HAL_RCC_OscConfig+0x27c>)
 8004bda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bde:	4a09      	ldr	r2, [pc, #36]	@ (8004c04 <HAL_RCC_OscConfig+0x27c>)
 8004be0:	f023 0301 	bic.w	r3, r3, #1
 8004be4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004be8:	f7fd feec 	bl	80029c4 <HAL_GetTick>
 8004bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004bee:	e00d      	b.n	8004c0c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bf0:	f7fd fee8 	bl	80029c4 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d906      	bls.n	8004c0c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e1ca      	b.n	8004f98 <HAL_RCC_OscConfig+0x610>
 8004c02:	bf00      	nop
 8004c04:	40021000 	.word	0x40021000
 8004c08:	20000214 	.word	0x20000214
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c0c:	4b8c      	ldr	r3, [pc, #560]	@ (8004e40 <HAL_RCC_OscConfig+0x4b8>)
 8004c0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c12:	f003 0302 	and.w	r3, r3, #2
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1ea      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0304 	and.w	r3, r3, #4
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	f000 80a6 	beq.w	8004d74 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004c2c:	4b84      	ldr	r3, [pc, #528]	@ (8004e40 <HAL_RCC_OscConfig+0x4b8>)
 8004c2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d101      	bne.n	8004c3c <HAL_RCC_OscConfig+0x2b4>
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e000      	b.n	8004c3e <HAL_RCC_OscConfig+0x2b6>
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00d      	beq.n	8004c5e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c42:	4b7f      	ldr	r3, [pc, #508]	@ (8004e40 <HAL_RCC_OscConfig+0x4b8>)
 8004c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c46:	4a7e      	ldr	r2, [pc, #504]	@ (8004e40 <HAL_RCC_OscConfig+0x4b8>)
 8004c48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c4e:	4b7c      	ldr	r3, [pc, #496]	@ (8004e40 <HAL_RCC_OscConfig+0x4b8>)
 8004c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c56:	60fb      	str	r3, [r7, #12]
 8004c58:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c5e:	4b79      	ldr	r3, [pc, #484]	@ (8004e44 <HAL_RCC_OscConfig+0x4bc>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d118      	bne.n	8004c9c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c6a:	4b76      	ldr	r3, [pc, #472]	@ (8004e44 <HAL_RCC_OscConfig+0x4bc>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a75      	ldr	r2, [pc, #468]	@ (8004e44 <HAL_RCC_OscConfig+0x4bc>)
 8004c70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c76:	f7fd fea5 	bl	80029c4 <HAL_GetTick>
 8004c7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c7c:	e008      	b.n	8004c90 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c7e:	f7fd fea1 	bl	80029c4 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d901      	bls.n	8004c90 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e183      	b.n	8004f98 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c90:	4b6c      	ldr	r3, [pc, #432]	@ (8004e44 <HAL_RCC_OscConfig+0x4bc>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d0f0      	beq.n	8004c7e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d108      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x32e>
 8004ca4:	4b66      	ldr	r3, [pc, #408]	@ (8004e40 <HAL_RCC_OscConfig+0x4b8>)
 8004ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004caa:	4a65      	ldr	r2, [pc, #404]	@ (8004e40 <HAL_RCC_OscConfig+0x4b8>)
 8004cac:	f043 0301 	orr.w	r3, r3, #1
 8004cb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004cb4:	e024      	b.n	8004d00 <HAL_RCC_OscConfig+0x378>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	2b05      	cmp	r3, #5
 8004cbc:	d110      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x358>
 8004cbe:	4b60      	ldr	r3, [pc, #384]	@ (8004e40 <HAL_RCC_OscConfig+0x4b8>)
 8004cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cc4:	4a5e      	ldr	r2, [pc, #376]	@ (8004e40 <HAL_RCC_OscConfig+0x4b8>)
 8004cc6:	f043 0304 	orr.w	r3, r3, #4
 8004cca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004cce:	4b5c      	ldr	r3, [pc, #368]	@ (8004e40 <HAL_RCC_OscConfig+0x4b8>)
 8004cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cd4:	4a5a      	ldr	r2, [pc, #360]	@ (8004e40 <HAL_RCC_OscConfig+0x4b8>)
 8004cd6:	f043 0301 	orr.w	r3, r3, #1
 8004cda:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004cde:	e00f      	b.n	8004d00 <HAL_RCC_OscConfig+0x378>
 8004ce0:	4b57      	ldr	r3, [pc, #348]	@ (8004e40 <HAL_RCC_OscConfig+0x4b8>)
 8004ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ce6:	4a56      	ldr	r2, [pc, #344]	@ (8004e40 <HAL_RCC_OscConfig+0x4b8>)
 8004ce8:	f023 0301 	bic.w	r3, r3, #1
 8004cec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004cf0:	4b53      	ldr	r3, [pc, #332]	@ (8004e40 <HAL_RCC_OscConfig+0x4b8>)
 8004cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cf6:	4a52      	ldr	r2, [pc, #328]	@ (8004e40 <HAL_RCC_OscConfig+0x4b8>)
 8004cf8:	f023 0304 	bic.w	r3, r3, #4
 8004cfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d016      	beq.n	8004d36 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d08:	f7fd fe5c 	bl	80029c4 <HAL_GetTick>
 8004d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d0e:	e00a      	b.n	8004d26 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d10:	f7fd fe58 	bl	80029c4 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d901      	bls.n	8004d26 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e138      	b.n	8004f98 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d26:	4b46      	ldr	r3, [pc, #280]	@ (8004e40 <HAL_RCC_OscConfig+0x4b8>)
 8004d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d2c:	f003 0302 	and.w	r3, r3, #2
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d0ed      	beq.n	8004d10 <HAL_RCC_OscConfig+0x388>
 8004d34:	e015      	b.n	8004d62 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d36:	f7fd fe45 	bl	80029c4 <HAL_GetTick>
 8004d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d3c:	e00a      	b.n	8004d54 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d3e:	f7fd fe41 	bl	80029c4 <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d901      	bls.n	8004d54 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	e121      	b.n	8004f98 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d54:	4b3a      	ldr	r3, [pc, #232]	@ (8004e40 <HAL_RCC_OscConfig+0x4b8>)
 8004d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d5a:	f003 0302 	and.w	r3, r3, #2
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1ed      	bne.n	8004d3e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d62:	7ffb      	ldrb	r3, [r7, #31]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d105      	bne.n	8004d74 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d68:	4b35      	ldr	r3, [pc, #212]	@ (8004e40 <HAL_RCC_OscConfig+0x4b8>)
 8004d6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d6c:	4a34      	ldr	r2, [pc, #208]	@ (8004e40 <HAL_RCC_OscConfig+0x4b8>)
 8004d6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d72:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0320 	and.w	r3, r3, #32
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d03c      	beq.n	8004dfa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	699b      	ldr	r3, [r3, #24]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d01c      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d88:	4b2d      	ldr	r3, [pc, #180]	@ (8004e40 <HAL_RCC_OscConfig+0x4b8>)
 8004d8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d8e:	4a2c      	ldr	r2, [pc, #176]	@ (8004e40 <HAL_RCC_OscConfig+0x4b8>)
 8004d90:	f043 0301 	orr.w	r3, r3, #1
 8004d94:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d98:	f7fd fe14 	bl	80029c4 <HAL_GetTick>
 8004d9c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d9e:	e008      	b.n	8004db2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004da0:	f7fd fe10 	bl	80029c4 <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d901      	bls.n	8004db2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e0f2      	b.n	8004f98 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004db2:	4b23      	ldr	r3, [pc, #140]	@ (8004e40 <HAL_RCC_OscConfig+0x4b8>)
 8004db4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004db8:	f003 0302 	and.w	r3, r3, #2
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d0ef      	beq.n	8004da0 <HAL_RCC_OscConfig+0x418>
 8004dc0:	e01b      	b.n	8004dfa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004dc2:	4b1f      	ldr	r3, [pc, #124]	@ (8004e40 <HAL_RCC_OscConfig+0x4b8>)
 8004dc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004dc8:	4a1d      	ldr	r2, [pc, #116]	@ (8004e40 <HAL_RCC_OscConfig+0x4b8>)
 8004dca:	f023 0301 	bic.w	r3, r3, #1
 8004dce:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dd2:	f7fd fdf7 	bl	80029c4 <HAL_GetTick>
 8004dd6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004dd8:	e008      	b.n	8004dec <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004dda:	f7fd fdf3 	bl	80029c4 <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d901      	bls.n	8004dec <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004de8:	2303      	movs	r3, #3
 8004dea:	e0d5      	b.n	8004f98 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004dec:	4b14      	ldr	r3, [pc, #80]	@ (8004e40 <HAL_RCC_OscConfig+0x4b8>)
 8004dee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004df2:	f003 0302 	and.w	r3, r3, #2
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1ef      	bne.n	8004dda <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	69db      	ldr	r3, [r3, #28]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	f000 80c9 	beq.w	8004f96 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e04:	4b0e      	ldr	r3, [pc, #56]	@ (8004e40 <HAL_RCC_OscConfig+0x4b8>)
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f003 030c 	and.w	r3, r3, #12
 8004e0c:	2b0c      	cmp	r3, #12
 8004e0e:	f000 8083 	beq.w	8004f18 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	69db      	ldr	r3, [r3, #28]
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d15e      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e1a:	4b09      	ldr	r3, [pc, #36]	@ (8004e40 <HAL_RCC_OscConfig+0x4b8>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a08      	ldr	r2, [pc, #32]	@ (8004e40 <HAL_RCC_OscConfig+0x4b8>)
 8004e20:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e26:	f7fd fdcd 	bl	80029c4 <HAL_GetTick>
 8004e2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e2c:	e00c      	b.n	8004e48 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e2e:	f7fd fdc9 	bl	80029c4 <HAL_GetTick>
 8004e32:	4602      	mov	r2, r0
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d905      	bls.n	8004e48 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e0ab      	b.n	8004f98 <HAL_RCC_OscConfig+0x610>
 8004e40:	40021000 	.word	0x40021000
 8004e44:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e48:	4b55      	ldr	r3, [pc, #340]	@ (8004fa0 <HAL_RCC_OscConfig+0x618>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d1ec      	bne.n	8004e2e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e54:	4b52      	ldr	r3, [pc, #328]	@ (8004fa0 <HAL_RCC_OscConfig+0x618>)
 8004e56:	68da      	ldr	r2, [r3, #12]
 8004e58:	4b52      	ldr	r3, [pc, #328]	@ (8004fa4 <HAL_RCC_OscConfig+0x61c>)
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	6a11      	ldr	r1, [r2, #32]
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004e64:	3a01      	subs	r2, #1
 8004e66:	0112      	lsls	r2, r2, #4
 8004e68:	4311      	orrs	r1, r2
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004e6e:	0212      	lsls	r2, r2, #8
 8004e70:	4311      	orrs	r1, r2
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004e76:	0852      	lsrs	r2, r2, #1
 8004e78:	3a01      	subs	r2, #1
 8004e7a:	0552      	lsls	r2, r2, #21
 8004e7c:	4311      	orrs	r1, r2
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004e82:	0852      	lsrs	r2, r2, #1
 8004e84:	3a01      	subs	r2, #1
 8004e86:	0652      	lsls	r2, r2, #25
 8004e88:	4311      	orrs	r1, r2
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004e8e:	06d2      	lsls	r2, r2, #27
 8004e90:	430a      	orrs	r2, r1
 8004e92:	4943      	ldr	r1, [pc, #268]	@ (8004fa0 <HAL_RCC_OscConfig+0x618>)
 8004e94:	4313      	orrs	r3, r2
 8004e96:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e98:	4b41      	ldr	r3, [pc, #260]	@ (8004fa0 <HAL_RCC_OscConfig+0x618>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a40      	ldr	r2, [pc, #256]	@ (8004fa0 <HAL_RCC_OscConfig+0x618>)
 8004e9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ea2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ea4:	4b3e      	ldr	r3, [pc, #248]	@ (8004fa0 <HAL_RCC_OscConfig+0x618>)
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	4a3d      	ldr	r2, [pc, #244]	@ (8004fa0 <HAL_RCC_OscConfig+0x618>)
 8004eaa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004eae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb0:	f7fd fd88 	bl	80029c4 <HAL_GetTick>
 8004eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004eb6:	e008      	b.n	8004eca <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eb8:	f7fd fd84 	bl	80029c4 <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d901      	bls.n	8004eca <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e066      	b.n	8004f98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004eca:	4b35      	ldr	r3, [pc, #212]	@ (8004fa0 <HAL_RCC_OscConfig+0x618>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d0f0      	beq.n	8004eb8 <HAL_RCC_OscConfig+0x530>
 8004ed6:	e05e      	b.n	8004f96 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ed8:	4b31      	ldr	r3, [pc, #196]	@ (8004fa0 <HAL_RCC_OscConfig+0x618>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a30      	ldr	r2, [pc, #192]	@ (8004fa0 <HAL_RCC_OscConfig+0x618>)
 8004ede:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ee2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee4:	f7fd fd6e 	bl	80029c4 <HAL_GetTick>
 8004ee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004eea:	e008      	b.n	8004efe <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eec:	f7fd fd6a 	bl	80029c4 <HAL_GetTick>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d901      	bls.n	8004efe <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e04c      	b.n	8004f98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004efe:	4b28      	ldr	r3, [pc, #160]	@ (8004fa0 <HAL_RCC_OscConfig+0x618>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1f0      	bne.n	8004eec <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004f0a:	4b25      	ldr	r3, [pc, #148]	@ (8004fa0 <HAL_RCC_OscConfig+0x618>)
 8004f0c:	68da      	ldr	r2, [r3, #12]
 8004f0e:	4924      	ldr	r1, [pc, #144]	@ (8004fa0 <HAL_RCC_OscConfig+0x618>)
 8004f10:	4b25      	ldr	r3, [pc, #148]	@ (8004fa8 <HAL_RCC_OscConfig+0x620>)
 8004f12:	4013      	ands	r3, r2
 8004f14:	60cb      	str	r3, [r1, #12]
 8004f16:	e03e      	b.n	8004f96 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	69db      	ldr	r3, [r3, #28]
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d101      	bne.n	8004f24 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e039      	b.n	8004f98 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004f24:	4b1e      	ldr	r3, [pc, #120]	@ (8004fa0 <HAL_RCC_OscConfig+0x618>)
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	f003 0203 	and.w	r2, r3, #3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a1b      	ldr	r3, [r3, #32]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d12c      	bne.n	8004f92 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f42:	3b01      	subs	r3, #1
 8004f44:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d123      	bne.n	8004f92 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f54:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d11b      	bne.n	8004f92 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f64:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d113      	bne.n	8004f92 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f74:	085b      	lsrs	r3, r3, #1
 8004f76:	3b01      	subs	r3, #1
 8004f78:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d109      	bne.n	8004f92 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f88:	085b      	lsrs	r3, r3, #1
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d001      	beq.n	8004f96 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e000      	b.n	8004f98 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3720      	adds	r7, #32
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	40021000 	.word	0x40021000
 8004fa4:	019f800c 	.word	0x019f800c
 8004fa8:	feeefffc 	.word	0xfeeefffc

08004fac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b086      	sub	sp, #24
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d101      	bne.n	8004fc4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e11e      	b.n	8005202 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004fc4:	4b91      	ldr	r3, [pc, #580]	@ (800520c <HAL_RCC_ClockConfig+0x260>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 030f 	and.w	r3, r3, #15
 8004fcc:	683a      	ldr	r2, [r7, #0]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d910      	bls.n	8004ff4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fd2:	4b8e      	ldr	r3, [pc, #568]	@ (800520c <HAL_RCC_ClockConfig+0x260>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f023 020f 	bic.w	r2, r3, #15
 8004fda:	498c      	ldr	r1, [pc, #560]	@ (800520c <HAL_RCC_ClockConfig+0x260>)
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fe2:	4b8a      	ldr	r3, [pc, #552]	@ (800520c <HAL_RCC_ClockConfig+0x260>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 030f 	and.w	r3, r3, #15
 8004fea:	683a      	ldr	r2, [r7, #0]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d001      	beq.n	8004ff4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e106      	b.n	8005202 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0301 	and.w	r3, r3, #1
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d073      	beq.n	80050e8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	2b03      	cmp	r3, #3
 8005006:	d129      	bne.n	800505c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005008:	4b81      	ldr	r3, [pc, #516]	@ (8005210 <HAL_RCC_ClockConfig+0x264>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d101      	bne.n	8005018 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e0f4      	b.n	8005202 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005018:	f000 f99e 	bl	8005358 <RCC_GetSysClockFreqFromPLLSource>
 800501c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	4a7c      	ldr	r2, [pc, #496]	@ (8005214 <HAL_RCC_ClockConfig+0x268>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d93f      	bls.n	80050a6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005026:	4b7a      	ldr	r3, [pc, #488]	@ (8005210 <HAL_RCC_ClockConfig+0x264>)
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d009      	beq.n	8005046 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800503a:	2b00      	cmp	r3, #0
 800503c:	d033      	beq.n	80050a6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005042:	2b00      	cmp	r3, #0
 8005044:	d12f      	bne.n	80050a6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005046:	4b72      	ldr	r3, [pc, #456]	@ (8005210 <HAL_RCC_ClockConfig+0x264>)
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800504e:	4a70      	ldr	r2, [pc, #448]	@ (8005210 <HAL_RCC_ClockConfig+0x264>)
 8005050:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005054:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005056:	2380      	movs	r3, #128	@ 0x80
 8005058:	617b      	str	r3, [r7, #20]
 800505a:	e024      	b.n	80050a6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	2b02      	cmp	r3, #2
 8005062:	d107      	bne.n	8005074 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005064:	4b6a      	ldr	r3, [pc, #424]	@ (8005210 <HAL_RCC_ClockConfig+0x264>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800506c:	2b00      	cmp	r3, #0
 800506e:	d109      	bne.n	8005084 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e0c6      	b.n	8005202 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005074:	4b66      	ldr	r3, [pc, #408]	@ (8005210 <HAL_RCC_ClockConfig+0x264>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800507c:	2b00      	cmp	r3, #0
 800507e:	d101      	bne.n	8005084 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e0be      	b.n	8005202 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005084:	f000 f8ce 	bl	8005224 <HAL_RCC_GetSysClockFreq>
 8005088:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	4a61      	ldr	r2, [pc, #388]	@ (8005214 <HAL_RCC_ClockConfig+0x268>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d909      	bls.n	80050a6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005092:	4b5f      	ldr	r3, [pc, #380]	@ (8005210 <HAL_RCC_ClockConfig+0x264>)
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800509a:	4a5d      	ldr	r2, [pc, #372]	@ (8005210 <HAL_RCC_ClockConfig+0x264>)
 800509c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050a0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80050a2:	2380      	movs	r3, #128	@ 0x80
 80050a4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80050a6:	4b5a      	ldr	r3, [pc, #360]	@ (8005210 <HAL_RCC_ClockConfig+0x264>)
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f023 0203 	bic.w	r2, r3, #3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	4957      	ldr	r1, [pc, #348]	@ (8005210 <HAL_RCC_ClockConfig+0x264>)
 80050b4:	4313      	orrs	r3, r2
 80050b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050b8:	f7fd fc84 	bl	80029c4 <HAL_GetTick>
 80050bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050be:	e00a      	b.n	80050d6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050c0:	f7fd fc80 	bl	80029c4 <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d901      	bls.n	80050d6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e095      	b.n	8005202 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050d6:	4b4e      	ldr	r3, [pc, #312]	@ (8005210 <HAL_RCC_ClockConfig+0x264>)
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f003 020c 	and.w	r2, r3, #12
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d1eb      	bne.n	80050c0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0302 	and.w	r3, r3, #2
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d023      	beq.n	800513c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0304 	and.w	r3, r3, #4
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d005      	beq.n	800510c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005100:	4b43      	ldr	r3, [pc, #268]	@ (8005210 <HAL_RCC_ClockConfig+0x264>)
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	4a42      	ldr	r2, [pc, #264]	@ (8005210 <HAL_RCC_ClockConfig+0x264>)
 8005106:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800510a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0308 	and.w	r3, r3, #8
 8005114:	2b00      	cmp	r3, #0
 8005116:	d007      	beq.n	8005128 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005118:	4b3d      	ldr	r3, [pc, #244]	@ (8005210 <HAL_RCC_ClockConfig+0x264>)
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005120:	4a3b      	ldr	r2, [pc, #236]	@ (8005210 <HAL_RCC_ClockConfig+0x264>)
 8005122:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005126:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005128:	4b39      	ldr	r3, [pc, #228]	@ (8005210 <HAL_RCC_ClockConfig+0x264>)
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	4936      	ldr	r1, [pc, #216]	@ (8005210 <HAL_RCC_ClockConfig+0x264>)
 8005136:	4313      	orrs	r3, r2
 8005138:	608b      	str	r3, [r1, #8]
 800513a:	e008      	b.n	800514e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	2b80      	cmp	r3, #128	@ 0x80
 8005140:	d105      	bne.n	800514e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005142:	4b33      	ldr	r3, [pc, #204]	@ (8005210 <HAL_RCC_ClockConfig+0x264>)
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	4a32      	ldr	r2, [pc, #200]	@ (8005210 <HAL_RCC_ClockConfig+0x264>)
 8005148:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800514c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800514e:	4b2f      	ldr	r3, [pc, #188]	@ (800520c <HAL_RCC_ClockConfig+0x260>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 030f 	and.w	r3, r3, #15
 8005156:	683a      	ldr	r2, [r7, #0]
 8005158:	429a      	cmp	r2, r3
 800515a:	d21d      	bcs.n	8005198 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800515c:	4b2b      	ldr	r3, [pc, #172]	@ (800520c <HAL_RCC_ClockConfig+0x260>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f023 020f 	bic.w	r2, r3, #15
 8005164:	4929      	ldr	r1, [pc, #164]	@ (800520c <HAL_RCC_ClockConfig+0x260>)
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	4313      	orrs	r3, r2
 800516a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800516c:	f7fd fc2a 	bl	80029c4 <HAL_GetTick>
 8005170:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005172:	e00a      	b.n	800518a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005174:	f7fd fc26 	bl	80029c4 <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005182:	4293      	cmp	r3, r2
 8005184:	d901      	bls.n	800518a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e03b      	b.n	8005202 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800518a:	4b20      	ldr	r3, [pc, #128]	@ (800520c <HAL_RCC_ClockConfig+0x260>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 030f 	and.w	r3, r3, #15
 8005192:	683a      	ldr	r2, [r7, #0]
 8005194:	429a      	cmp	r2, r3
 8005196:	d1ed      	bne.n	8005174 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0304 	and.w	r3, r3, #4
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d008      	beq.n	80051b6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051a4:	4b1a      	ldr	r3, [pc, #104]	@ (8005210 <HAL_RCC_ClockConfig+0x264>)
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	4917      	ldr	r1, [pc, #92]	@ (8005210 <HAL_RCC_ClockConfig+0x264>)
 80051b2:	4313      	orrs	r3, r2
 80051b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0308 	and.w	r3, r3, #8
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d009      	beq.n	80051d6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051c2:	4b13      	ldr	r3, [pc, #76]	@ (8005210 <HAL_RCC_ClockConfig+0x264>)
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	00db      	lsls	r3, r3, #3
 80051d0:	490f      	ldr	r1, [pc, #60]	@ (8005210 <HAL_RCC_ClockConfig+0x264>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80051d6:	f000 f825 	bl	8005224 <HAL_RCC_GetSysClockFreq>
 80051da:	4602      	mov	r2, r0
 80051dc:	4b0c      	ldr	r3, [pc, #48]	@ (8005210 <HAL_RCC_ClockConfig+0x264>)
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	091b      	lsrs	r3, r3, #4
 80051e2:	f003 030f 	and.w	r3, r3, #15
 80051e6:	490c      	ldr	r1, [pc, #48]	@ (8005218 <HAL_RCC_ClockConfig+0x26c>)
 80051e8:	5ccb      	ldrb	r3, [r1, r3]
 80051ea:	f003 031f 	and.w	r3, r3, #31
 80051ee:	fa22 f303 	lsr.w	r3, r2, r3
 80051f2:	4a0a      	ldr	r2, [pc, #40]	@ (800521c <HAL_RCC_ClockConfig+0x270>)
 80051f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80051f6:	4b0a      	ldr	r3, [pc, #40]	@ (8005220 <HAL_RCC_ClockConfig+0x274>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4618      	mov	r0, r3
 80051fc:	f7fd fb96 	bl	800292c <HAL_InitTick>
 8005200:	4603      	mov	r3, r0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3718      	adds	r7, #24
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	40022000 	.word	0x40022000
 8005210:	40021000 	.word	0x40021000
 8005214:	04c4b400 	.word	0x04c4b400
 8005218:	0800ab28 	.word	0x0800ab28
 800521c:	20000210 	.word	0x20000210
 8005220:	20000214 	.word	0x20000214

08005224 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005224:	b480      	push	{r7}
 8005226:	b087      	sub	sp, #28
 8005228:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800522a:	4b2c      	ldr	r3, [pc, #176]	@ (80052dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	f003 030c 	and.w	r3, r3, #12
 8005232:	2b04      	cmp	r3, #4
 8005234:	d102      	bne.n	800523c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005236:	4b2a      	ldr	r3, [pc, #168]	@ (80052e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005238:	613b      	str	r3, [r7, #16]
 800523a:	e047      	b.n	80052cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800523c:	4b27      	ldr	r3, [pc, #156]	@ (80052dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	f003 030c 	and.w	r3, r3, #12
 8005244:	2b08      	cmp	r3, #8
 8005246:	d102      	bne.n	800524e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005248:	4b26      	ldr	r3, [pc, #152]	@ (80052e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800524a:	613b      	str	r3, [r7, #16]
 800524c:	e03e      	b.n	80052cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800524e:	4b23      	ldr	r3, [pc, #140]	@ (80052dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f003 030c 	and.w	r3, r3, #12
 8005256:	2b0c      	cmp	r3, #12
 8005258:	d136      	bne.n	80052c8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800525a:	4b20      	ldr	r3, [pc, #128]	@ (80052dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	f003 0303 	and.w	r3, r3, #3
 8005262:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005264:	4b1d      	ldr	r3, [pc, #116]	@ (80052dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	091b      	lsrs	r3, r3, #4
 800526a:	f003 030f 	and.w	r3, r3, #15
 800526e:	3301      	adds	r3, #1
 8005270:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2b03      	cmp	r3, #3
 8005276:	d10c      	bne.n	8005292 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005278:	4a1a      	ldr	r2, [pc, #104]	@ (80052e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005280:	4a16      	ldr	r2, [pc, #88]	@ (80052dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005282:	68d2      	ldr	r2, [r2, #12]
 8005284:	0a12      	lsrs	r2, r2, #8
 8005286:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800528a:	fb02 f303 	mul.w	r3, r2, r3
 800528e:	617b      	str	r3, [r7, #20]
      break;
 8005290:	e00c      	b.n	80052ac <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005292:	4a13      	ldr	r2, [pc, #76]	@ (80052e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	fbb2 f3f3 	udiv	r3, r2, r3
 800529a:	4a10      	ldr	r2, [pc, #64]	@ (80052dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800529c:	68d2      	ldr	r2, [r2, #12]
 800529e:	0a12      	lsrs	r2, r2, #8
 80052a0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80052a4:	fb02 f303 	mul.w	r3, r2, r3
 80052a8:	617b      	str	r3, [r7, #20]
      break;
 80052aa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80052ac:	4b0b      	ldr	r3, [pc, #44]	@ (80052dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	0e5b      	lsrs	r3, r3, #25
 80052b2:	f003 0303 	and.w	r3, r3, #3
 80052b6:	3301      	adds	r3, #1
 80052b8:	005b      	lsls	r3, r3, #1
 80052ba:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052c4:	613b      	str	r3, [r7, #16]
 80052c6:	e001      	b.n	80052cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80052c8:	2300      	movs	r3, #0
 80052ca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80052cc:	693b      	ldr	r3, [r7, #16]
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	371c      	adds	r7, #28
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	40021000 	.word	0x40021000
 80052e0:	00f42400 	.word	0x00f42400
 80052e4:	016e3600 	.word	0x016e3600

080052e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052e8:	b480      	push	{r7}
 80052ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052ec:	4b03      	ldr	r3, [pc, #12]	@ (80052fc <HAL_RCC_GetHCLKFreq+0x14>)
 80052ee:	681b      	ldr	r3, [r3, #0]
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr
 80052fa:	bf00      	nop
 80052fc:	20000210 	.word	0x20000210

08005300 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005304:	f7ff fff0 	bl	80052e8 <HAL_RCC_GetHCLKFreq>
 8005308:	4602      	mov	r2, r0
 800530a:	4b06      	ldr	r3, [pc, #24]	@ (8005324 <HAL_RCC_GetPCLK1Freq+0x24>)
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	0a1b      	lsrs	r3, r3, #8
 8005310:	f003 0307 	and.w	r3, r3, #7
 8005314:	4904      	ldr	r1, [pc, #16]	@ (8005328 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005316:	5ccb      	ldrb	r3, [r1, r3]
 8005318:	f003 031f 	and.w	r3, r3, #31
 800531c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005320:	4618      	mov	r0, r3
 8005322:	bd80      	pop	{r7, pc}
 8005324:	40021000 	.word	0x40021000
 8005328:	0800ab38 	.word	0x0800ab38

0800532c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005330:	f7ff ffda 	bl	80052e8 <HAL_RCC_GetHCLKFreq>
 8005334:	4602      	mov	r2, r0
 8005336:	4b06      	ldr	r3, [pc, #24]	@ (8005350 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	0adb      	lsrs	r3, r3, #11
 800533c:	f003 0307 	and.w	r3, r3, #7
 8005340:	4904      	ldr	r1, [pc, #16]	@ (8005354 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005342:	5ccb      	ldrb	r3, [r1, r3]
 8005344:	f003 031f 	and.w	r3, r3, #31
 8005348:	fa22 f303 	lsr.w	r3, r2, r3
}
 800534c:	4618      	mov	r0, r3
 800534e:	bd80      	pop	{r7, pc}
 8005350:	40021000 	.word	0x40021000
 8005354:	0800ab38 	.word	0x0800ab38

08005358 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005358:	b480      	push	{r7}
 800535a:	b087      	sub	sp, #28
 800535c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800535e:	4b1e      	ldr	r3, [pc, #120]	@ (80053d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	f003 0303 	and.w	r3, r3, #3
 8005366:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005368:	4b1b      	ldr	r3, [pc, #108]	@ (80053d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	091b      	lsrs	r3, r3, #4
 800536e:	f003 030f 	and.w	r3, r3, #15
 8005372:	3301      	adds	r3, #1
 8005374:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	2b03      	cmp	r3, #3
 800537a:	d10c      	bne.n	8005396 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800537c:	4a17      	ldr	r2, [pc, #92]	@ (80053dc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	fbb2 f3f3 	udiv	r3, r2, r3
 8005384:	4a14      	ldr	r2, [pc, #80]	@ (80053d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005386:	68d2      	ldr	r2, [r2, #12]
 8005388:	0a12      	lsrs	r2, r2, #8
 800538a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800538e:	fb02 f303 	mul.w	r3, r2, r3
 8005392:	617b      	str	r3, [r7, #20]
    break;
 8005394:	e00c      	b.n	80053b0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005396:	4a12      	ldr	r2, [pc, #72]	@ (80053e0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	fbb2 f3f3 	udiv	r3, r2, r3
 800539e:	4a0e      	ldr	r2, [pc, #56]	@ (80053d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053a0:	68d2      	ldr	r2, [r2, #12]
 80053a2:	0a12      	lsrs	r2, r2, #8
 80053a4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80053a8:	fb02 f303 	mul.w	r3, r2, r3
 80053ac:	617b      	str	r3, [r7, #20]
    break;
 80053ae:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80053b0:	4b09      	ldr	r3, [pc, #36]	@ (80053d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	0e5b      	lsrs	r3, r3, #25
 80053b6:	f003 0303 	and.w	r3, r3, #3
 80053ba:	3301      	adds	r3, #1
 80053bc:	005b      	lsls	r3, r3, #1
 80053be:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80053c0:	697a      	ldr	r2, [r7, #20]
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053c8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80053ca:	687b      	ldr	r3, [r7, #4]
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	371c      	adds	r7, #28
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr
 80053d8:	40021000 	.word	0x40021000
 80053dc:	016e3600 	.word	0x016e3600
 80053e0:	00f42400 	.word	0x00f42400

080053e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b086      	sub	sp, #24
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80053ec:	2300      	movs	r3, #0
 80053ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80053f0:	2300      	movs	r3, #0
 80053f2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	f000 8098 	beq.w	8005532 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005402:	2300      	movs	r3, #0
 8005404:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005406:	4b43      	ldr	r3, [pc, #268]	@ (8005514 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005408:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800540a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d10d      	bne.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005412:	4b40      	ldr	r3, [pc, #256]	@ (8005514 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005416:	4a3f      	ldr	r2, [pc, #252]	@ (8005514 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005418:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800541c:	6593      	str	r3, [r2, #88]	@ 0x58
 800541e:	4b3d      	ldr	r3, [pc, #244]	@ (8005514 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005422:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005426:	60bb      	str	r3, [r7, #8]
 8005428:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800542a:	2301      	movs	r3, #1
 800542c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800542e:	4b3a      	ldr	r3, [pc, #232]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a39      	ldr	r2, [pc, #228]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005434:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005438:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800543a:	f7fd fac3 	bl	80029c4 <HAL_GetTick>
 800543e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005440:	e009      	b.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005442:	f7fd fabf 	bl	80029c4 <HAL_GetTick>
 8005446:	4602      	mov	r2, r0
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	2b02      	cmp	r3, #2
 800544e:	d902      	bls.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	74fb      	strb	r3, [r7, #19]
        break;
 8005454:	e005      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005456:	4b30      	ldr	r3, [pc, #192]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800545e:	2b00      	cmp	r3, #0
 8005460:	d0ef      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005462:	7cfb      	ldrb	r3, [r7, #19]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d159      	bne.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005468:	4b2a      	ldr	r3, [pc, #168]	@ (8005514 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800546a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800546e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005472:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d01e      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	429a      	cmp	r2, r3
 8005482:	d019      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005484:	4b23      	ldr	r3, [pc, #140]	@ (8005514 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005486:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800548a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800548e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005490:	4b20      	ldr	r3, [pc, #128]	@ (8005514 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005492:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005496:	4a1f      	ldr	r2, [pc, #124]	@ (8005514 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005498:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800549c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80054a0:	4b1c      	ldr	r3, [pc, #112]	@ (8005514 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054a6:	4a1b      	ldr	r2, [pc, #108]	@ (8005514 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80054b0:	4a18      	ldr	r2, [pc, #96]	@ (8005514 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	f003 0301 	and.w	r3, r3, #1
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d016      	beq.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c2:	f7fd fa7f 	bl	80029c4 <HAL_GetTick>
 80054c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054c8:	e00b      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054ca:	f7fd fa7b 	bl	80029c4 <HAL_GetTick>
 80054ce:	4602      	mov	r2, r0
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054d8:	4293      	cmp	r3, r2
 80054da:	d902      	bls.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	74fb      	strb	r3, [r7, #19]
            break;
 80054e0:	e006      	b.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054e2:	4b0c      	ldr	r3, [pc, #48]	@ (8005514 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054e8:	f003 0302 	and.w	r3, r3, #2
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d0ec      	beq.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80054f0:	7cfb      	ldrb	r3, [r7, #19]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d10b      	bne.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054f6:	4b07      	ldr	r3, [pc, #28]	@ (8005514 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005504:	4903      	ldr	r1, [pc, #12]	@ (8005514 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005506:	4313      	orrs	r3, r2
 8005508:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800550c:	e008      	b.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800550e:	7cfb      	ldrb	r3, [r7, #19]
 8005510:	74bb      	strb	r3, [r7, #18]
 8005512:	e005      	b.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005514:	40021000 	.word	0x40021000
 8005518:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800551c:	7cfb      	ldrb	r3, [r7, #19]
 800551e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005520:	7c7b      	ldrb	r3, [r7, #17]
 8005522:	2b01      	cmp	r3, #1
 8005524:	d105      	bne.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005526:	4ba7      	ldr	r3, [pc, #668]	@ (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800552a:	4aa6      	ldr	r2, [pc, #664]	@ (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800552c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005530:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0301 	and.w	r3, r3, #1
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00a      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800553e:	4ba1      	ldr	r3, [pc, #644]	@ (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005540:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005544:	f023 0203 	bic.w	r2, r3, #3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	499d      	ldr	r1, [pc, #628]	@ (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800554e:	4313      	orrs	r3, r2
 8005550:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0302 	and.w	r3, r3, #2
 800555c:	2b00      	cmp	r3, #0
 800555e:	d00a      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005560:	4b98      	ldr	r3, [pc, #608]	@ (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005562:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005566:	f023 020c 	bic.w	r2, r3, #12
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	4995      	ldr	r1, [pc, #596]	@ (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005570:	4313      	orrs	r3, r2
 8005572:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0304 	and.w	r3, r3, #4
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00a      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005582:	4b90      	ldr	r3, [pc, #576]	@ (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005584:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005588:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	498c      	ldr	r1, [pc, #560]	@ (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005592:	4313      	orrs	r3, r2
 8005594:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0308 	and.w	r3, r3, #8
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d00a      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80055a4:	4b87      	ldr	r3, [pc, #540]	@ (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055aa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	4984      	ldr	r1, [pc, #528]	@ (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0310 	and.w	r3, r3, #16
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00a      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80055c6:	4b7f      	ldr	r3, [pc, #508]	@ (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	695b      	ldr	r3, [r3, #20]
 80055d4:	497b      	ldr	r1, [pc, #492]	@ (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0320 	and.w	r3, r3, #32
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d00a      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80055e8:	4b76      	ldr	r3, [pc, #472]	@ (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055ee:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	699b      	ldr	r3, [r3, #24]
 80055f6:	4973      	ldr	r1, [pc, #460]	@ (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00a      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800560a:	4b6e      	ldr	r3, [pc, #440]	@ (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800560c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005610:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	69db      	ldr	r3, [r3, #28]
 8005618:	496a      	ldr	r1, [pc, #424]	@ (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800561a:	4313      	orrs	r3, r2
 800561c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00a      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800562c:	4b65      	ldr	r3, [pc, #404]	@ (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800562e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005632:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	4962      	ldr	r1, [pc, #392]	@ (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800563c:	4313      	orrs	r3, r2
 800563e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00a      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800564e:	4b5d      	ldr	r3, [pc, #372]	@ (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005650:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005654:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800565c:	4959      	ldr	r1, [pc, #356]	@ (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800565e:	4313      	orrs	r3, r2
 8005660:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00a      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005670:	4b54      	ldr	r3, [pc, #336]	@ (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005672:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005676:	f023 0203 	bic.w	r2, r3, #3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800567e:	4951      	ldr	r1, [pc, #324]	@ (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005680:	4313      	orrs	r3, r2
 8005682:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00a      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005692:	4b4c      	ldr	r3, [pc, #304]	@ (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005694:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005698:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056a0:	4948      	ldr	r1, [pc, #288]	@ (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d015      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80056b4:	4b43      	ldr	r3, [pc, #268]	@ (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056c2:	4940      	ldr	r1, [pc, #256]	@ (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056c4:	4313      	orrs	r3, r2
 80056c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056d2:	d105      	bne.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056d4:	4b3b      	ldr	r3, [pc, #236]	@ (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	4a3a      	ldr	r2, [pc, #232]	@ (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056de:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d015      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80056ec:	4b35      	ldr	r3, [pc, #212]	@ (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056f2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056fa:	4932      	ldr	r1, [pc, #200]	@ (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056fc:	4313      	orrs	r3, r2
 80056fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005706:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800570a:	d105      	bne.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800570c:	4b2d      	ldr	r3, [pc, #180]	@ (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	4a2c      	ldr	r2, [pc, #176]	@ (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005712:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005716:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d015      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005724:	4b27      	ldr	r3, [pc, #156]	@ (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005726:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800572a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005732:	4924      	ldr	r1, [pc, #144]	@ (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005734:	4313      	orrs	r3, r2
 8005736:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800573e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005742:	d105      	bne.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005744:	4b1f      	ldr	r3, [pc, #124]	@ (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	4a1e      	ldr	r2, [pc, #120]	@ (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800574a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800574e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d015      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800575c:	4b19      	ldr	r3, [pc, #100]	@ (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800575e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005762:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800576a:	4916      	ldr	r1, [pc, #88]	@ (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800576c:	4313      	orrs	r3, r2
 800576e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005776:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800577a:	d105      	bne.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800577c:	4b11      	ldr	r3, [pc, #68]	@ (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	4a10      	ldr	r2, [pc, #64]	@ (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005782:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005786:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005790:	2b00      	cmp	r3, #0
 8005792:	d019      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005794:	4b0b      	ldr	r3, [pc, #44]	@ (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800579a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057a2:	4908      	ldr	r1, [pc, #32]	@ (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057a4:	4313      	orrs	r3, r2
 80057a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057b2:	d109      	bne.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057b4:	4b03      	ldr	r3, [pc, #12]	@ (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	4a02      	ldr	r2, [pc, #8]	@ (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057be:	60d3      	str	r3, [r2, #12]
 80057c0:	e002      	b.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80057c2:	bf00      	nop
 80057c4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d015      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80057d4:	4b29      	ldr	r3, [pc, #164]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057da:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057e2:	4926      	ldr	r1, [pc, #152]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80057f2:	d105      	bne.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80057f4:	4b21      	ldr	r3, [pc, #132]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	4a20      	ldr	r2, [pc, #128]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057fe:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d015      	beq.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800580c:	4b1b      	ldr	r3, [pc, #108]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800580e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005812:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800581a:	4918      	ldr	r1, [pc, #96]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800581c:	4313      	orrs	r3, r2
 800581e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005826:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800582a:	d105      	bne.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800582c:	4b13      	ldr	r3, [pc, #76]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	4a12      	ldr	r2, [pc, #72]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005832:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005836:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005840:	2b00      	cmp	r3, #0
 8005842:	d015      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005844:	4b0d      	ldr	r3, [pc, #52]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005846:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800584a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005852:	490a      	ldr	r1, [pc, #40]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005854:	4313      	orrs	r3, r2
 8005856:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800585e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005862:	d105      	bne.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005864:	4b05      	ldr	r3, [pc, #20]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	4a04      	ldr	r2, [pc, #16]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800586a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800586e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005870:	7cbb      	ldrb	r3, [r7, #18]
}
 8005872:	4618      	mov	r0, r3
 8005874:	3718      	adds	r7, #24
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	40021000 	.word	0x40021000

08005880 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d101      	bne.n	8005892 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e09d      	b.n	80059ce <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005896:	2b00      	cmp	r3, #0
 8005898:	d108      	bne.n	80058ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80058a2:	d009      	beq.n	80058b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	61da      	str	r2, [r3, #28]
 80058aa:	e005      	b.n	80058b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d106      	bne.n	80058d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f7fc fcba 	bl	800224c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2202      	movs	r2, #2
 80058dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058ee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80058f8:	d902      	bls.n	8005900 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80058fa:	2300      	movs	r3, #0
 80058fc:	60fb      	str	r3, [r7, #12]
 80058fe:	e002      	b.n	8005906 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005900:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005904:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800590e:	d007      	beq.n	8005920 <HAL_SPI_Init+0xa0>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005918:	d002      	beq.n	8005920 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005930:	431a      	orrs	r2, r3
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	f003 0302 	and.w	r3, r3, #2
 800593a:	431a      	orrs	r2, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	695b      	ldr	r3, [r3, #20]
 8005940:	f003 0301 	and.w	r3, r3, #1
 8005944:	431a      	orrs	r2, r3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800594e:	431a      	orrs	r2, r3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	69db      	ldr	r3, [r3, #28]
 8005954:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005958:	431a      	orrs	r2, r3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a1b      	ldr	r3, [r3, #32]
 800595e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005962:	ea42 0103 	orr.w	r1, r2, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800596a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	430a      	orrs	r2, r1
 8005974:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	0c1b      	lsrs	r3, r3, #16
 800597c:	f003 0204 	and.w	r2, r3, #4
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005984:	f003 0310 	and.w	r3, r3, #16
 8005988:	431a      	orrs	r2, r3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800598e:	f003 0308 	and.w	r3, r3, #8
 8005992:	431a      	orrs	r2, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800599c:	ea42 0103 	orr.w	r1, r2, r3
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	430a      	orrs	r2, r1
 80059ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	69da      	ldr	r2, [r3, #28]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80059bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3710      	adds	r7, #16
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}

080059d6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80059d6:	b580      	push	{r7, lr}
 80059d8:	b08a      	sub	sp, #40	@ 0x28
 80059da:	af00      	add	r7, sp, #0
 80059dc:	60f8      	str	r0, [r7, #12]
 80059de:	60b9      	str	r1, [r7, #8]
 80059e0:	607a      	str	r2, [r7, #4]
 80059e2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80059e4:	2301      	movs	r3, #1
 80059e6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059e8:	f7fc ffec 	bl	80029c4 <HAL_GetTick>
 80059ec:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80059f4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80059fc:	887b      	ldrh	r3, [r7, #2]
 80059fe:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8005a00:	887b      	ldrh	r3, [r7, #2]
 8005a02:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005a04:	7ffb      	ldrb	r3, [r7, #31]
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d00c      	beq.n	8005a24 <HAL_SPI_TransmitReceive+0x4e>
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a10:	d106      	bne.n	8005a20 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d102      	bne.n	8005a20 <HAL_SPI_TransmitReceive+0x4a>
 8005a1a:	7ffb      	ldrb	r3, [r7, #31]
 8005a1c:	2b04      	cmp	r3, #4
 8005a1e:	d001      	beq.n	8005a24 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005a20:	2302      	movs	r3, #2
 8005a22:	e1f3      	b.n	8005e0c <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d005      	beq.n	8005a36 <HAL_SPI_TransmitReceive+0x60>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d002      	beq.n	8005a36 <HAL_SPI_TransmitReceive+0x60>
 8005a30:	887b      	ldrh	r3, [r7, #2]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d101      	bne.n	8005a3a <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e1e8      	b.n	8005e0c <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d101      	bne.n	8005a48 <HAL_SPI_TransmitReceive+0x72>
 8005a44:	2302      	movs	r3, #2
 8005a46:	e1e1      	b.n	8005e0c <HAL_SPI_TransmitReceive+0x436>
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	2b04      	cmp	r3, #4
 8005a5a:	d003      	beq.n	8005a64 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2205      	movs	r2, #5
 8005a60:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2200      	movs	r2, #0
 8005a68:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	887a      	ldrh	r2, [r7, #2]
 8005a74:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	887a      	ldrh	r2, [r7, #2]
 8005a7c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	68ba      	ldr	r2, [r7, #8]
 8005a84:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	887a      	ldrh	r2, [r7, #2]
 8005a8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	887a      	ldrh	r2, [r7, #2]
 8005a90:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005aa6:	d802      	bhi.n	8005aae <HAL_SPI_TransmitReceive+0xd8>
 8005aa8:	8abb      	ldrh	r3, [r7, #20]
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d908      	bls.n	8005ac0 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	685a      	ldr	r2, [r3, #4]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005abc:	605a      	str	r2, [r3, #4]
 8005abe:	e007      	b.n	8005ad0 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	685a      	ldr	r2, [r3, #4]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005ace:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ada:	2b40      	cmp	r3, #64	@ 0x40
 8005adc:	d007      	beq.n	8005aee <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005aec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005af6:	f240 8083 	bls.w	8005c00 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d002      	beq.n	8005b08 <HAL_SPI_TransmitReceive+0x132>
 8005b02:	8afb      	ldrh	r3, [r7, #22]
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d16f      	bne.n	8005be8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b0c:	881a      	ldrh	r2, [r3, #0]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b18:	1c9a      	adds	r2, r3, #2
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	3b01      	subs	r3, #1
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b2c:	e05c      	b.n	8005be8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	f003 0302 	and.w	r3, r3, #2
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	d11b      	bne.n	8005b74 <HAL_SPI_TransmitReceive+0x19e>
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d016      	beq.n	8005b74 <HAL_SPI_TransmitReceive+0x19e>
 8005b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d113      	bne.n	8005b74 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b50:	881a      	ldrh	r2, [r3, #0]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b5c:	1c9a      	adds	r2, r3, #2
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b70:	2300      	movs	r3, #0
 8005b72:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d11c      	bne.n	8005bbc <HAL_SPI_TransmitReceive+0x1e6>
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d016      	beq.n	8005bbc <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68da      	ldr	r2, [r3, #12]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b98:	b292      	uxth	r2, r2
 8005b9a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ba0:	1c9a      	adds	r2, r3, #2
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	b29a      	uxth	r2, r3
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005bbc:	f7fc ff02 	bl	80029c4 <HAL_GetTick>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	6a3b      	ldr	r3, [r7, #32]
 8005bc4:	1ad3      	subs	r3, r2, r3
 8005bc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d80d      	bhi.n	8005be8 <HAL_SPI_TransmitReceive+0x212>
 8005bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd2:	d009      	beq.n	8005be8 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005be4:	2303      	movs	r3, #3
 8005be6:	e111      	b.n	8005e0c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d19d      	bne.n	8005b2e <HAL_SPI_TransmitReceive+0x158>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d197      	bne.n	8005b2e <HAL_SPI_TransmitReceive+0x158>
 8005bfe:	e0e5      	b.n	8005dcc <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d003      	beq.n	8005c10 <HAL_SPI_TransmitReceive+0x23a>
 8005c08:	8afb      	ldrh	r3, [r7, #22]
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	f040 80d1 	bne.w	8005db2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d912      	bls.n	8005c40 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c1e:	881a      	ldrh	r2, [r3, #0]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c2a:	1c9a      	adds	r2, r3, #2
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	3b02      	subs	r3, #2
 8005c38:	b29a      	uxth	r2, r3
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005c3e:	e0b8      	b.n	8005db2 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	330c      	adds	r3, #12
 8005c4a:	7812      	ldrb	r2, [r2, #0]
 8005c4c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c52:	1c5a      	adds	r2, r3, #1
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c66:	e0a4      	b.n	8005db2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f003 0302 	and.w	r3, r3, #2
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	d134      	bne.n	8005ce0 <HAL_SPI_TransmitReceive+0x30a>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d02f      	beq.n	8005ce0 <HAL_SPI_TransmitReceive+0x30a>
 8005c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d12c      	bne.n	8005ce0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d912      	bls.n	8005cb6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c94:	881a      	ldrh	r2, [r3, #0]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ca0:	1c9a      	adds	r2, r3, #2
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	3b02      	subs	r3, #2
 8005cae:	b29a      	uxth	r2, r3
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005cb4:	e012      	b.n	8005cdc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	330c      	adds	r3, #12
 8005cc0:	7812      	ldrb	r2, [r2, #0]
 8005cc2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cc8:	1c5a      	adds	r2, r3, #1
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	3b01      	subs	r3, #1
 8005cd6:	b29a      	uxth	r2, r3
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	f003 0301 	and.w	r3, r3, #1
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d148      	bne.n	8005d80 <HAL_SPI_TransmitReceive+0x3aa>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d042      	beq.n	8005d80 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d923      	bls.n	8005d4e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68da      	ldr	r2, [r3, #12]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d10:	b292      	uxth	r2, r2
 8005d12:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d18:	1c9a      	adds	r2, r3, #2
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	3b02      	subs	r3, #2
 8005d28:	b29a      	uxth	r2, r3
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d81f      	bhi.n	8005d7c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	685a      	ldr	r2, [r3, #4]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005d4a:	605a      	str	r2, [r3, #4]
 8005d4c:	e016      	b.n	8005d7c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f103 020c 	add.w	r2, r3, #12
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d5a:	7812      	ldrb	r2, [r2, #0]
 8005d5c:	b2d2      	uxtb	r2, r2
 8005d5e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d64:	1c5a      	adds	r2, r3, #1
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	3b01      	subs	r3, #1
 8005d74:	b29a      	uxth	r2, r3
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005d80:	f7fc fe20 	bl	80029c4 <HAL_GetTick>
 8005d84:	4602      	mov	r2, r0
 8005d86:	6a3b      	ldr	r3, [r7, #32]
 8005d88:	1ad3      	subs	r3, r2, r3
 8005d8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d803      	bhi.n	8005d98 <HAL_SPI_TransmitReceive+0x3c2>
 8005d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d96:	d102      	bne.n	8005d9e <HAL_SPI_TransmitReceive+0x3c8>
 8005d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d109      	bne.n	8005db2 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2201      	movs	r2, #1
 8005da2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e02c      	b.n	8005e0c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	f47f af55 	bne.w	8005c68 <HAL_SPI_TransmitReceive+0x292>
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	f47f af4e 	bne.w	8005c68 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005dcc:	6a3a      	ldr	r2, [r7, #32]
 8005dce:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005dd0:	68f8      	ldr	r0, [r7, #12]
 8005dd2:	f000 f93d 	bl	8006050 <SPI_EndRxTxTransaction>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d008      	beq.n	8005dee <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2220      	movs	r2, #32
 8005de0:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e00e      	b.n	8005e0c <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2201      	movs	r2, #1
 8005df2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d001      	beq.n	8005e0a <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e000      	b.n	8005e0c <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8005e0a:	2300      	movs	r3, #0
  }
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3728      	adds	r7, #40	@ 0x28
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b088      	sub	sp, #32
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	60b9      	str	r1, [r7, #8]
 8005e1e:	603b      	str	r3, [r7, #0]
 8005e20:	4613      	mov	r3, r2
 8005e22:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e24:	f7fc fdce 	bl	80029c4 <HAL_GetTick>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e2c:	1a9b      	subs	r3, r3, r2
 8005e2e:	683a      	ldr	r2, [r7, #0]
 8005e30:	4413      	add	r3, r2
 8005e32:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e34:	f7fc fdc6 	bl	80029c4 <HAL_GetTick>
 8005e38:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e3a:	4b39      	ldr	r3, [pc, #228]	@ (8005f20 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	015b      	lsls	r3, r3, #5
 8005e40:	0d1b      	lsrs	r3, r3, #20
 8005e42:	69fa      	ldr	r2, [r7, #28]
 8005e44:	fb02 f303 	mul.w	r3, r2, r3
 8005e48:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e4a:	e054      	b.n	8005ef6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e52:	d050      	beq.n	8005ef6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e54:	f7fc fdb6 	bl	80029c4 <HAL_GetTick>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	69fa      	ldr	r2, [r7, #28]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d902      	bls.n	8005e6a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d13d      	bne.n	8005ee6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	685a      	ldr	r2, [r3, #4]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005e78:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e82:	d111      	bne.n	8005ea8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e8c:	d004      	beq.n	8005e98 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e96:	d107      	bne.n	8005ea8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ea6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005eb0:	d10f      	bne.n	8005ed2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005ec0:	601a      	str	r2, [r3, #0]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005ed0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	e017      	b.n	8005f16 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d101      	bne.n	8005ef0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005eec:	2300      	movs	r3, #0
 8005eee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	3b01      	subs	r3, #1
 8005ef4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	689a      	ldr	r2, [r3, #8]
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	4013      	ands	r3, r2
 8005f00:	68ba      	ldr	r2, [r7, #8]
 8005f02:	429a      	cmp	r2, r3
 8005f04:	bf0c      	ite	eq
 8005f06:	2301      	moveq	r3, #1
 8005f08:	2300      	movne	r3, #0
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	79fb      	ldrb	r3, [r7, #7]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d19b      	bne.n	8005e4c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3720      	adds	r7, #32
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	20000210 	.word	0x20000210

08005f24 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b08a      	sub	sp, #40	@ 0x28
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	607a      	str	r2, [r7, #4]
 8005f30:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005f32:	2300      	movs	r3, #0
 8005f34:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005f36:	f7fc fd45 	bl	80029c4 <HAL_GetTick>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f3e:	1a9b      	subs	r3, r3, r2
 8005f40:	683a      	ldr	r2, [r7, #0]
 8005f42:	4413      	add	r3, r2
 8005f44:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005f46:	f7fc fd3d 	bl	80029c4 <HAL_GetTick>
 8005f4a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	330c      	adds	r3, #12
 8005f52:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005f54:	4b3d      	ldr	r3, [pc, #244]	@ (800604c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	4613      	mov	r3, r2
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	4413      	add	r3, r2
 8005f5e:	00da      	lsls	r2, r3, #3
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	0d1b      	lsrs	r3, r3, #20
 8005f64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f66:	fb02 f303 	mul.w	r3, r2, r3
 8005f6a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005f6c:	e060      	b.n	8006030 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005f74:	d107      	bne.n	8005f86 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d104      	bne.n	8005f86 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005f84:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f8c:	d050      	beq.n	8006030 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f8e:	f7fc fd19 	bl	80029c4 <HAL_GetTick>
 8005f92:	4602      	mov	r2, r0
 8005f94:	6a3b      	ldr	r3, [r7, #32]
 8005f96:	1ad3      	subs	r3, r2, r3
 8005f98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d902      	bls.n	8005fa4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d13d      	bne.n	8006020 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	685a      	ldr	r2, [r3, #4]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005fb2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005fbc:	d111      	bne.n	8005fe2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fc6:	d004      	beq.n	8005fd2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fd0:	d107      	bne.n	8005fe2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005fe0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fe6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fea:	d10f      	bne.n	800600c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005ffa:	601a      	str	r2, [r3, #0]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800600a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2200      	movs	r2, #0
 8006018:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800601c:	2303      	movs	r3, #3
 800601e:	e010      	b.n	8006042 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d101      	bne.n	800602a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006026:	2300      	movs	r3, #0
 8006028:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	3b01      	subs	r3, #1
 800602e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	689a      	ldr	r2, [r3, #8]
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	4013      	ands	r3, r2
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	429a      	cmp	r2, r3
 800603e:	d196      	bne.n	8005f6e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006040:	2300      	movs	r3, #0
}
 8006042:	4618      	mov	r0, r3
 8006044:	3728      	adds	r7, #40	@ 0x28
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	20000210 	.word	0x20000210

08006050 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b086      	sub	sp, #24
 8006054:	af02      	add	r7, sp, #8
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	9300      	str	r3, [sp, #0]
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	2200      	movs	r2, #0
 8006064:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006068:	68f8      	ldr	r0, [r7, #12]
 800606a:	f7ff ff5b 	bl	8005f24 <SPI_WaitFifoStateUntilTimeout>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d007      	beq.n	8006084 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006078:	f043 0220 	orr.w	r2, r3, #32
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006080:	2303      	movs	r3, #3
 8006082:	e027      	b.n	80060d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	9300      	str	r3, [sp, #0]
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	2200      	movs	r2, #0
 800608c:	2180      	movs	r1, #128	@ 0x80
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f7ff fec0 	bl	8005e14 <SPI_WaitFlagStateUntilTimeout>
 8006094:	4603      	mov	r3, r0
 8006096:	2b00      	cmp	r3, #0
 8006098:	d007      	beq.n	80060aa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800609e:	f043 0220 	orr.w	r2, r3, #32
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	e014      	b.n	80060d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	9300      	str	r3, [sp, #0]
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	f7ff ff34 	bl	8005f24 <SPI_WaitFifoStateUntilTimeout>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d007      	beq.n	80060d2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060c6:	f043 0220 	orr.w	r2, r3, #32
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80060ce:	2303      	movs	r3, #3
 80060d0:	e000      	b.n	80060d4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80060d2:	2300      	movs	r3, #0
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3710      	adds	r7, #16
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d101      	bne.n	80060ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e054      	b.n	8006198 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d111      	bne.n	800611e <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f001 fe5c 	bl	8007dc0 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800610c:	2b00      	cmp	r3, #0
 800610e:	d102      	bne.n	8006116 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4a23      	ldr	r2, [pc, #140]	@ (80061a0 <HAL_TIM_Base_Init+0xc4>)
 8006114:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2202      	movs	r2, #2
 8006122:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	3304      	adds	r3, #4
 800612e:	4619      	mov	r1, r3
 8006130:	4610      	mov	r0, r2
 8006132:	f001 f9a5 	bl	8007480 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2201      	movs	r2, #1
 800613a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2201      	movs	r2, #1
 8006142:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2201      	movs	r2, #1
 800614a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2201      	movs	r2, #1
 8006152:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2201      	movs	r2, #1
 800615a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2201      	movs	r2, #1
 8006162:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2201      	movs	r2, #1
 800616a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2201      	movs	r2, #1
 8006172:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2201      	movs	r2, #1
 800617a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2201      	movs	r2, #1
 8006182:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2201      	movs	r2, #1
 800618a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2201      	movs	r2, #1
 8006192:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006196:	2300      	movs	r3, #0
}
 8006198:	4618      	mov	r0, r3
 800619a:	3708      	adds	r7, #8
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	0800230d 	.word	0x0800230d

080061a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d001      	beq.n	80061bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e054      	b.n	8006266 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2202      	movs	r2, #2
 80061c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68da      	ldr	r2, [r3, #12]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f042 0201 	orr.w	r2, r2, #1
 80061d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a26      	ldr	r2, [pc, #152]	@ (8006274 <HAL_TIM_Base_Start_IT+0xd0>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d022      	beq.n	8006224 <HAL_TIM_Base_Start_IT+0x80>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061e6:	d01d      	beq.n	8006224 <HAL_TIM_Base_Start_IT+0x80>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a22      	ldr	r2, [pc, #136]	@ (8006278 <HAL_TIM_Base_Start_IT+0xd4>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d018      	beq.n	8006224 <HAL_TIM_Base_Start_IT+0x80>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a21      	ldr	r2, [pc, #132]	@ (800627c <HAL_TIM_Base_Start_IT+0xd8>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d013      	beq.n	8006224 <HAL_TIM_Base_Start_IT+0x80>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a1f      	ldr	r2, [pc, #124]	@ (8006280 <HAL_TIM_Base_Start_IT+0xdc>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d00e      	beq.n	8006224 <HAL_TIM_Base_Start_IT+0x80>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a1e      	ldr	r2, [pc, #120]	@ (8006284 <HAL_TIM_Base_Start_IT+0xe0>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d009      	beq.n	8006224 <HAL_TIM_Base_Start_IT+0x80>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a1c      	ldr	r2, [pc, #112]	@ (8006288 <HAL_TIM_Base_Start_IT+0xe4>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d004      	beq.n	8006224 <HAL_TIM_Base_Start_IT+0x80>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a1b      	ldr	r2, [pc, #108]	@ (800628c <HAL_TIM_Base_Start_IT+0xe8>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d115      	bne.n	8006250 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	689a      	ldr	r2, [r3, #8]
 800622a:	4b19      	ldr	r3, [pc, #100]	@ (8006290 <HAL_TIM_Base_Start_IT+0xec>)
 800622c:	4013      	ands	r3, r2
 800622e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2b06      	cmp	r3, #6
 8006234:	d015      	beq.n	8006262 <HAL_TIM_Base_Start_IT+0xbe>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800623c:	d011      	beq.n	8006262 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f042 0201 	orr.w	r2, r2, #1
 800624c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800624e:	e008      	b.n	8006262 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f042 0201 	orr.w	r2, r2, #1
 800625e:	601a      	str	r2, [r3, #0]
 8006260:	e000      	b.n	8006264 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006262:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006264:	2300      	movs	r3, #0
}
 8006266:	4618      	mov	r0, r3
 8006268:	3714      	adds	r7, #20
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	40012c00 	.word	0x40012c00
 8006278:	40000400 	.word	0x40000400
 800627c:	40000800 	.word	0x40000800
 8006280:	40000c00 	.word	0x40000c00
 8006284:	40013400 	.word	0x40013400
 8006288:	40014000 	.word	0x40014000
 800628c:	40015000 	.word	0x40015000
 8006290:	00010007 	.word	0x00010007

08006294 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d101      	bne.n	80062a6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	e054      	b.n	8006350 <HAL_TIM_OC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d111      	bne.n	80062d6 <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f001 fd80 	bl	8007dc0 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d102      	bne.n	80062ce <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4a23      	ldr	r2, [pc, #140]	@ (8006358 <HAL_TIM_OC_Init+0xc4>)
 80062cc:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2202      	movs	r2, #2
 80062da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	3304      	adds	r3, #4
 80062e6:	4619      	mov	r1, r3
 80062e8:	4610      	mov	r0, r2
 80062ea:	f001 f8c9 	bl	8007480 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2201      	movs	r2, #1
 80062f2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2201      	movs	r2, #1
 80062fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2201      	movs	r2, #1
 8006302:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2201      	movs	r2, #1
 800630a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2201      	movs	r2, #1
 8006312:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2201      	movs	r2, #1
 800631a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2201      	movs	r2, #1
 8006322:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2201      	movs	r2, #1
 800632a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2201      	movs	r2, #1
 8006332:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2201      	movs	r2, #1
 800633a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2201      	movs	r2, #1
 8006342:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2201      	movs	r2, #1
 800634a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800634e:	2300      	movs	r3, #0
}
 8006350:	4618      	mov	r0, r3
 8006352:	3708      	adds	r7, #8
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	0800635d 	.word	0x0800635d

0800635c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006364:	bf00      	nop
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b082      	sub	sp, #8
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d101      	bne.n	8006382 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e054      	b.n	800642c <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006388:	b2db      	uxtb	r3, r3
 800638a:	2b00      	cmp	r3, #0
 800638c:	d111      	bne.n	80063b2 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f001 fd12 	bl	8007dc0 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d102      	bne.n	80063aa <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a23      	ldr	r2, [pc, #140]	@ (8006434 <HAL_TIM_PWM_Init+0xc4>)
 80063a8:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2202      	movs	r2, #2
 80063b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	3304      	adds	r3, #4
 80063c2:	4619      	mov	r1, r3
 80063c4:	4610      	mov	r0, r2
 80063c6:	f001 f85b 	bl	8007480 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2201      	movs	r2, #1
 80063ce:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2201      	movs	r2, #1
 80063d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2201      	movs	r2, #1
 80063de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2201      	movs	r2, #1
 80063e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2201      	movs	r2, #1
 80063ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2201      	movs	r2, #1
 80063f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2201      	movs	r2, #1
 80063fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2201      	movs	r2, #1
 8006406:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2201      	movs	r2, #1
 800640e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2201      	movs	r2, #1
 8006416:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2201      	movs	r2, #1
 800641e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2201      	movs	r2, #1
 8006426:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3708      	adds	r7, #8
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}
 8006434:	08006439 	.word	0x08006439

08006438 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006440:	bf00      	nop
 8006442:	370c      	adds	r7, #12
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b082      	sub	sp, #8
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d101      	bne.n	8006460 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	e04c      	b.n	80064fa <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006466:	b2db      	uxtb	r3, r3
 8006468:	2b00      	cmp	r3, #0
 800646a:	d111      	bne.n	8006490 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f001 fca3 	bl	8007dc0 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800647e:	2b00      	cmp	r3, #0
 8006480:	d102      	bne.n	8006488 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4a1f      	ldr	r2, [pc, #124]	@ (8006504 <HAL_TIM_OnePulse_Init+0xb8>)
 8006486:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2202      	movs	r2, #2
 8006494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	3304      	adds	r3, #4
 80064a0:	4619      	mov	r1, r3
 80064a2:	4610      	mov	r0, r2
 80064a4:	f000 ffec 	bl	8007480 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f022 0208 	bic.w	r2, r2, #8
 80064b6:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	6819      	ldr	r1, [r3, #0]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	683a      	ldr	r2, [r7, #0]
 80064c4:	430a      	orrs	r2, r1
 80064c6:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2201      	movs	r2, #1
 80064cc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3708      	adds	r7, #8
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	08006509 	.word	0x08006509

08006508 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8006510:	bf00      	nop
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800652c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006534:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800653c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006544:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006546:	7bfb      	ldrb	r3, [r7, #15]
 8006548:	2b01      	cmp	r3, #1
 800654a:	d108      	bne.n	800655e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800654c:	7bbb      	ldrb	r3, [r7, #14]
 800654e:	2b01      	cmp	r3, #1
 8006550:	d105      	bne.n	800655e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006552:	7b7b      	ldrb	r3, [r7, #13]
 8006554:	2b01      	cmp	r3, #1
 8006556:	d102      	bne.n	800655e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006558:	7b3b      	ldrb	r3, [r7, #12]
 800655a:	2b01      	cmp	r3, #1
 800655c:	d001      	beq.n	8006562 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	e059      	b.n	8006616 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2202      	movs	r2, #2
 8006566:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2202      	movs	r2, #2
 800656e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2202      	movs	r2, #2
 8006576:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2202      	movs	r2, #2
 800657e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68da      	ldr	r2, [r3, #12]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f042 0202 	orr.w	r2, r2, #2
 8006590:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68da      	ldr	r2, [r3, #12]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f042 0204 	orr.w	r2, r2, #4
 80065a0:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2201      	movs	r2, #1
 80065a8:	2100      	movs	r1, #0
 80065aa:	4618      	mov	r0, r3
 80065ac:	f001 fbe2 	bl	8007d74 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2201      	movs	r2, #1
 80065b6:	2104      	movs	r1, #4
 80065b8:	4618      	mov	r0, r3
 80065ba:	f001 fbdb 	bl	8007d74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a17      	ldr	r2, [pc, #92]	@ (8006620 <HAL_TIM_OnePulse_Start_IT+0x104>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d018      	beq.n	80065fa <HAL_TIM_OnePulse_Start_IT+0xde>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a15      	ldr	r2, [pc, #84]	@ (8006624 <HAL_TIM_OnePulse_Start_IT+0x108>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d013      	beq.n	80065fa <HAL_TIM_OnePulse_Start_IT+0xde>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a14      	ldr	r2, [pc, #80]	@ (8006628 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d00e      	beq.n	80065fa <HAL_TIM_OnePulse_Start_IT+0xde>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a12      	ldr	r2, [pc, #72]	@ (800662c <HAL_TIM_OnePulse_Start_IT+0x110>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d009      	beq.n	80065fa <HAL_TIM_OnePulse_Start_IT+0xde>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a11      	ldr	r2, [pc, #68]	@ (8006630 <HAL_TIM_OnePulse_Start_IT+0x114>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d004      	beq.n	80065fa <HAL_TIM_OnePulse_Start_IT+0xde>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a0f      	ldr	r2, [pc, #60]	@ (8006634 <HAL_TIM_OnePulse_Start_IT+0x118>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d101      	bne.n	80065fe <HAL_TIM_OnePulse_Start_IT+0xe2>
 80065fa:	2301      	movs	r3, #1
 80065fc:	e000      	b.n	8006600 <HAL_TIM_OnePulse_Start_IT+0xe4>
 80065fe:	2300      	movs	r3, #0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d007      	beq.n	8006614 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006612:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	3710      	adds	r7, #16
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	40012c00 	.word	0x40012c00
 8006624:	40013400 	.word	0x40013400
 8006628:	40014000 	.word	0x40014000
 800662c:	40014400 	.word	0x40014400
 8006630:	40014800 	.word	0x40014800
 8006634:	40015000 	.word	0x40015000

08006638 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b086      	sub	sp, #24
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d101      	bne.n	800664c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	e0a2      	b.n	8006792 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006652:	b2db      	uxtb	r3, r3
 8006654:	2b00      	cmp	r3, #0
 8006656:	d111      	bne.n	800667c <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f001 fbad 	bl	8007dc0 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800666a:	2b00      	cmp	r3, #0
 800666c:	d102      	bne.n	8006674 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a4a      	ldr	r2, [pc, #296]	@ (800679c <HAL_TIM_Encoder_Init+0x164>)
 8006672:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2202      	movs	r2, #2
 8006680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	6812      	ldr	r2, [r2, #0]
 800668e:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8006692:	f023 0307 	bic.w	r3, r3, #7
 8006696:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	3304      	adds	r3, #4
 80066a0:	4619      	mov	r1, r3
 80066a2:	4610      	mov	r0, r2
 80066a4:	f000 feec 	bl	8007480 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	699b      	ldr	r3, [r3, #24]
 80066b6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	6a1b      	ldr	r3, [r3, #32]
 80066be:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	697a      	ldr	r2, [r7, #20]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066d0:	f023 0303 	bic.w	r3, r3, #3
 80066d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	689a      	ldr	r2, [r3, #8]
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	699b      	ldr	r3, [r3, #24]
 80066de:	021b      	lsls	r3, r3, #8
 80066e0:	4313      	orrs	r3, r2
 80066e2:	693a      	ldr	r2, [r7, #16]
 80066e4:	4313      	orrs	r3, r2
 80066e6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80066ee:	f023 030c 	bic.w	r3, r3, #12
 80066f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80066fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80066fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	68da      	ldr	r2, [r3, #12]
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	69db      	ldr	r3, [r3, #28]
 8006708:	021b      	lsls	r3, r3, #8
 800670a:	4313      	orrs	r3, r2
 800670c:	693a      	ldr	r2, [r7, #16]
 800670e:	4313      	orrs	r3, r2
 8006710:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	011a      	lsls	r2, r3, #4
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	6a1b      	ldr	r3, [r3, #32]
 800671c:	031b      	lsls	r3, r3, #12
 800671e:	4313      	orrs	r3, r2
 8006720:	693a      	ldr	r2, [r7, #16]
 8006722:	4313      	orrs	r3, r2
 8006724:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800672c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006734:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	685a      	ldr	r2, [r3, #4]
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	695b      	ldr	r3, [r3, #20]
 800673e:	011b      	lsls	r3, r3, #4
 8006740:	4313      	orrs	r3, r2
 8006742:	68fa      	ldr	r2, [r7, #12]
 8006744:	4313      	orrs	r3, r2
 8006746:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	697a      	ldr	r2, [r7, #20]
 800674e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	693a      	ldr	r2, [r7, #16]
 8006756:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006790:	2300      	movs	r3, #0
}
 8006792:	4618      	mov	r0, r3
 8006794:	3718      	adds	r7, #24
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	08002415 	.word	0x08002415

080067a0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80067b0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80067b8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80067c0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80067c8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d110      	bne.n	80067f2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80067d0:	7bfb      	ldrb	r3, [r7, #15]
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d102      	bne.n	80067dc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80067d6:	7b7b      	ldrb	r3, [r7, #13]
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d001      	beq.n	80067e0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	e069      	b.n	80068b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2202      	movs	r2, #2
 80067e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2202      	movs	r2, #2
 80067ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80067f0:	e031      	b.n	8006856 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	2b04      	cmp	r3, #4
 80067f6:	d110      	bne.n	800681a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80067f8:	7bbb      	ldrb	r3, [r7, #14]
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d102      	bne.n	8006804 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80067fe:	7b3b      	ldrb	r3, [r7, #12]
 8006800:	2b01      	cmp	r3, #1
 8006802:	d001      	beq.n	8006808 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	e055      	b.n	80068b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2202      	movs	r2, #2
 800680c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2202      	movs	r2, #2
 8006814:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006818:	e01d      	b.n	8006856 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800681a:	7bfb      	ldrb	r3, [r7, #15]
 800681c:	2b01      	cmp	r3, #1
 800681e:	d108      	bne.n	8006832 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006820:	7bbb      	ldrb	r3, [r7, #14]
 8006822:	2b01      	cmp	r3, #1
 8006824:	d105      	bne.n	8006832 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006826:	7b7b      	ldrb	r3, [r7, #13]
 8006828:	2b01      	cmp	r3, #1
 800682a:	d102      	bne.n	8006832 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800682c:	7b3b      	ldrb	r3, [r7, #12]
 800682e:	2b01      	cmp	r3, #1
 8006830:	d001      	beq.n	8006836 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	e03e      	b.n	80068b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2202      	movs	r2, #2
 800683a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2202      	movs	r2, #2
 8006842:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2202      	movs	r2, #2
 800684a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2202      	movs	r2, #2
 8006852:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d003      	beq.n	8006864 <HAL_TIM_Encoder_Start+0xc4>
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	2b04      	cmp	r3, #4
 8006860:	d008      	beq.n	8006874 <HAL_TIM_Encoder_Start+0xd4>
 8006862:	e00f      	b.n	8006884 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2201      	movs	r2, #1
 800686a:	2100      	movs	r1, #0
 800686c:	4618      	mov	r0, r3
 800686e:	f001 fa81 	bl	8007d74 <TIM_CCxChannelCmd>
      break;
 8006872:	e016      	b.n	80068a2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2201      	movs	r2, #1
 800687a:	2104      	movs	r1, #4
 800687c:	4618      	mov	r0, r3
 800687e:	f001 fa79 	bl	8007d74 <TIM_CCxChannelCmd>
      break;
 8006882:	e00e      	b.n	80068a2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2201      	movs	r2, #1
 800688a:	2100      	movs	r1, #0
 800688c:	4618      	mov	r0, r3
 800688e:	f001 fa71 	bl	8007d74 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	2201      	movs	r2, #1
 8006898:	2104      	movs	r1, #4
 800689a:	4618      	mov	r0, r3
 800689c:	f001 fa6a 	bl	8007d74 <TIM_CCxChannelCmd>
      break;
 80068a0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f042 0201 	orr.w	r2, r2, #1
 80068b0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80068b2:	2300      	movs	r3, #0
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3710      	adds	r7, #16
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	f003 0302 	and.w	r3, r3, #2
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d026      	beq.n	800692c <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f003 0302 	and.w	r3, r3, #2
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d021      	beq.n	800692c <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f06f 0202 	mvn.w	r2, #2
 80068f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2201      	movs	r2, #1
 80068f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	699b      	ldr	r3, [r3, #24]
 80068fe:	f003 0303 	and.w	r3, r3, #3
 8006902:	2b00      	cmp	r3, #0
 8006904:	d005      	beq.n	8006912 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	4798      	blx	r3
 8006910:	e009      	b.n	8006926 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	f003 0304 	and.w	r3, r3, #4
 8006932:	2b00      	cmp	r3, #0
 8006934:	d026      	beq.n	8006984 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f003 0304 	and.w	r3, r3, #4
 800693c:	2b00      	cmp	r3, #0
 800693e:	d021      	beq.n	8006984 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f06f 0204 	mvn.w	r2, #4
 8006948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2202      	movs	r2, #2
 800694e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800695a:	2b00      	cmp	r3, #0
 800695c:	d005      	beq.n	800696a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	4798      	blx	r3
 8006968:	e009      	b.n	800697e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	f003 0308 	and.w	r3, r3, #8
 800698a:	2b00      	cmp	r3, #0
 800698c:	d026      	beq.n	80069dc <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f003 0308 	and.w	r3, r3, #8
 8006994:	2b00      	cmp	r3, #0
 8006996:	d021      	beq.n	80069dc <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f06f 0208 	mvn.w	r2, #8
 80069a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2204      	movs	r2, #4
 80069a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	69db      	ldr	r3, [r3, #28]
 80069ae:	f003 0303 	and.w	r3, r3, #3
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d005      	beq.n	80069c2 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	4798      	blx	r3
 80069c0:	e009      	b.n	80069d6 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	f003 0310 	and.w	r3, r3, #16
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d026      	beq.n	8006a34 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f003 0310 	and.w	r3, r3, #16
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d021      	beq.n	8006a34 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f06f 0210 	mvn.w	r2, #16
 80069f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2208      	movs	r2, #8
 80069fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	69db      	ldr	r3, [r3, #28]
 8006a06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d005      	beq.n	8006a1a <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	4798      	blx	r3
 8006a18:	e009      	b.n	8006a2e <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	f003 0301 	and.w	r3, r3, #1
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d00e      	beq.n	8006a5c <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f003 0301 	and.w	r3, r3, #1
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d009      	beq.n	8006a5c <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f06f 0201 	mvn.w	r2, #1
 8006a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d104      	bne.n	8006a70 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00e      	beq.n	8006a8e <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d009      	beq.n	8006a8e <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006a82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d00e      	beq.n	8006ab6 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d009      	beq.n	8006ab6 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006aaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d00e      	beq.n	8006ade <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d009      	beq.n	8006ade <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006ad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	f003 0320 	and.w	r3, r3, #32
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d00e      	beq.n	8006b06 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f003 0320 	and.w	r3, r3, #32
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d009      	beq.n	8006b06 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f06f 0220 	mvn.w	r2, #32
 8006afa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d00e      	beq.n	8006b2e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d009      	beq.n	8006b2e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006b22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d00e      	beq.n	8006b56 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d009      	beq.n	8006b56 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006b4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d00e      	beq.n	8006b7e <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d009      	beq.n	8006b7e <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006b72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d00e      	beq.n	8006ba6 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d009      	beq.n	8006ba6 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006b9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ba6:	bf00      	nop
 8006ba8:	3710      	adds	r7, #16
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
	...

08006bb0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b086      	sub	sp, #24
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	60b9      	str	r1, [r7, #8]
 8006bba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d101      	bne.n	8006bce <HAL_TIM_OC_ConfigChannel+0x1e>
 8006bca:	2302      	movs	r3, #2
 8006bcc:	e066      	b.n	8006c9c <HAL_TIM_OC_ConfigChannel+0xec>
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2b14      	cmp	r3, #20
 8006bda:	d857      	bhi.n	8006c8c <HAL_TIM_OC_ConfigChannel+0xdc>
 8006bdc:	a201      	add	r2, pc, #4	@ (adr r2, 8006be4 <HAL_TIM_OC_ConfigChannel+0x34>)
 8006bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be2:	bf00      	nop
 8006be4:	08006c39 	.word	0x08006c39
 8006be8:	08006c8d 	.word	0x08006c8d
 8006bec:	08006c8d 	.word	0x08006c8d
 8006bf0:	08006c8d 	.word	0x08006c8d
 8006bf4:	08006c47 	.word	0x08006c47
 8006bf8:	08006c8d 	.word	0x08006c8d
 8006bfc:	08006c8d 	.word	0x08006c8d
 8006c00:	08006c8d 	.word	0x08006c8d
 8006c04:	08006c55 	.word	0x08006c55
 8006c08:	08006c8d 	.word	0x08006c8d
 8006c0c:	08006c8d 	.word	0x08006c8d
 8006c10:	08006c8d 	.word	0x08006c8d
 8006c14:	08006c63 	.word	0x08006c63
 8006c18:	08006c8d 	.word	0x08006c8d
 8006c1c:	08006c8d 	.word	0x08006c8d
 8006c20:	08006c8d 	.word	0x08006c8d
 8006c24:	08006c71 	.word	0x08006c71
 8006c28:	08006c8d 	.word	0x08006c8d
 8006c2c:	08006c8d 	.word	0x08006c8d
 8006c30:	08006c8d 	.word	0x08006c8d
 8006c34:	08006c7f 	.word	0x08006c7f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	68b9      	ldr	r1, [r7, #8]
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f000 fcd2 	bl	80075e8 <TIM_OC1_SetConfig>
      break;
 8006c44:	e025      	b.n	8006c92 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	68b9      	ldr	r1, [r7, #8]
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f000 fd65 	bl	800771c <TIM_OC2_SetConfig>
      break;
 8006c52:	e01e      	b.n	8006c92 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	68b9      	ldr	r1, [r7, #8]
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f000 fdf2 	bl	8007844 <TIM_OC3_SetConfig>
      break;
 8006c60:	e017      	b.n	8006c92 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	68b9      	ldr	r1, [r7, #8]
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f000 fe7d 	bl	8007968 <TIM_OC4_SetConfig>
      break;
 8006c6e:	e010      	b.n	8006c92 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	68b9      	ldr	r1, [r7, #8]
 8006c76:	4618      	mov	r0, r3
 8006c78:	f000 ff0a 	bl	8007a90 <TIM_OC5_SetConfig>
      break;
 8006c7c:	e009      	b.n	8006c92 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	68b9      	ldr	r1, [r7, #8]
 8006c84:	4618      	mov	r0, r3
 8006c86:	f000 ff6d 	bl	8007b64 <TIM_OC6_SetConfig>
      break;
 8006c8a:	e002      	b.n	8006c92 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	75fb      	strb	r3, [r7, #23]
      break;
 8006c90:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006c9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3718      	adds	r7, #24
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b086      	sub	sp, #24
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	60b9      	str	r1, [r7, #8]
 8006cae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d101      	bne.n	8006cc2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006cbe:	2302      	movs	r3, #2
 8006cc0:	e0ff      	b.n	8006ec2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2b14      	cmp	r3, #20
 8006cce:	f200 80f0 	bhi.w	8006eb2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006cd2:	a201      	add	r2, pc, #4	@ (adr r2, 8006cd8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cd8:	08006d2d 	.word	0x08006d2d
 8006cdc:	08006eb3 	.word	0x08006eb3
 8006ce0:	08006eb3 	.word	0x08006eb3
 8006ce4:	08006eb3 	.word	0x08006eb3
 8006ce8:	08006d6d 	.word	0x08006d6d
 8006cec:	08006eb3 	.word	0x08006eb3
 8006cf0:	08006eb3 	.word	0x08006eb3
 8006cf4:	08006eb3 	.word	0x08006eb3
 8006cf8:	08006daf 	.word	0x08006daf
 8006cfc:	08006eb3 	.word	0x08006eb3
 8006d00:	08006eb3 	.word	0x08006eb3
 8006d04:	08006eb3 	.word	0x08006eb3
 8006d08:	08006def 	.word	0x08006def
 8006d0c:	08006eb3 	.word	0x08006eb3
 8006d10:	08006eb3 	.word	0x08006eb3
 8006d14:	08006eb3 	.word	0x08006eb3
 8006d18:	08006e31 	.word	0x08006e31
 8006d1c:	08006eb3 	.word	0x08006eb3
 8006d20:	08006eb3 	.word	0x08006eb3
 8006d24:	08006eb3 	.word	0x08006eb3
 8006d28:	08006e71 	.word	0x08006e71
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68b9      	ldr	r1, [r7, #8]
 8006d32:	4618      	mov	r0, r3
 8006d34:	f000 fc58 	bl	80075e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	699a      	ldr	r2, [r3, #24]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f042 0208 	orr.w	r2, r2, #8
 8006d46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	699a      	ldr	r2, [r3, #24]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f022 0204 	bic.w	r2, r2, #4
 8006d56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	6999      	ldr	r1, [r3, #24]
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	691a      	ldr	r2, [r3, #16]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	430a      	orrs	r2, r1
 8006d68:	619a      	str	r2, [r3, #24]
      break;
 8006d6a:	e0a5      	b.n	8006eb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	68b9      	ldr	r1, [r7, #8]
 8006d72:	4618      	mov	r0, r3
 8006d74:	f000 fcd2 	bl	800771c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	699a      	ldr	r2, [r3, #24]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	699a      	ldr	r2, [r3, #24]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	6999      	ldr	r1, [r3, #24]
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	691b      	ldr	r3, [r3, #16]
 8006da2:	021a      	lsls	r2, r3, #8
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	430a      	orrs	r2, r1
 8006daa:	619a      	str	r2, [r3, #24]
      break;
 8006dac:	e084      	b.n	8006eb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	68b9      	ldr	r1, [r7, #8]
 8006db4:	4618      	mov	r0, r3
 8006db6:	f000 fd45 	bl	8007844 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	69da      	ldr	r2, [r3, #28]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f042 0208 	orr.w	r2, r2, #8
 8006dc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	69da      	ldr	r2, [r3, #28]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f022 0204 	bic.w	r2, r2, #4
 8006dd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	69d9      	ldr	r1, [r3, #28]
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	691a      	ldr	r2, [r3, #16]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	430a      	orrs	r2, r1
 8006dea:	61da      	str	r2, [r3, #28]
      break;
 8006dec:	e064      	b.n	8006eb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	68b9      	ldr	r1, [r7, #8]
 8006df4:	4618      	mov	r0, r3
 8006df6:	f000 fdb7 	bl	8007968 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	69da      	ldr	r2, [r3, #28]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006e08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	69da      	ldr	r2, [r3, #28]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	69d9      	ldr	r1, [r3, #28]
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	691b      	ldr	r3, [r3, #16]
 8006e24:	021a      	lsls	r2, r3, #8
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	430a      	orrs	r2, r1
 8006e2c:	61da      	str	r2, [r3, #28]
      break;
 8006e2e:	e043      	b.n	8006eb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	68b9      	ldr	r1, [r7, #8]
 8006e36:	4618      	mov	r0, r3
 8006e38:	f000 fe2a 	bl	8007a90 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f042 0208 	orr.w	r2, r2, #8
 8006e4a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f022 0204 	bic.w	r2, r2, #4
 8006e5a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	691a      	ldr	r2, [r3, #16]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	430a      	orrs	r2, r1
 8006e6c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006e6e:	e023      	b.n	8006eb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	68b9      	ldr	r1, [r7, #8]
 8006e76:	4618      	mov	r0, r3
 8006e78:	f000 fe74 	bl	8007b64 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006e8a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e9a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	691b      	ldr	r3, [r3, #16]
 8006ea6:	021a      	lsls	r2, r3, #8
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	430a      	orrs	r2, r1
 8006eae:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006eb0:	e002      	b.n	8006eb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	75fb      	strb	r3, [r7, #23]
      break;
 8006eb6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006ec0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3718      	adds	r7, #24
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop

08006ecc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d101      	bne.n	8006ee8 <HAL_TIM_ConfigClockSource+0x1c>
 8006ee4:	2302      	movs	r3, #2
 8006ee6:	e0f6      	b.n	80070d6 <HAL_TIM_ConfigClockSource+0x20a>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2202      	movs	r2, #2
 8006ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006f06:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006f0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006f12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	68ba      	ldr	r2, [r7, #8]
 8006f1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a6f      	ldr	r2, [pc, #444]	@ (80070e0 <HAL_TIM_ConfigClockSource+0x214>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	f000 80c1 	beq.w	80070aa <HAL_TIM_ConfigClockSource+0x1de>
 8006f28:	4a6d      	ldr	r2, [pc, #436]	@ (80070e0 <HAL_TIM_ConfigClockSource+0x214>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	f200 80c6 	bhi.w	80070bc <HAL_TIM_ConfigClockSource+0x1f0>
 8006f30:	4a6c      	ldr	r2, [pc, #432]	@ (80070e4 <HAL_TIM_ConfigClockSource+0x218>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	f000 80b9 	beq.w	80070aa <HAL_TIM_ConfigClockSource+0x1de>
 8006f38:	4a6a      	ldr	r2, [pc, #424]	@ (80070e4 <HAL_TIM_ConfigClockSource+0x218>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	f200 80be 	bhi.w	80070bc <HAL_TIM_ConfigClockSource+0x1f0>
 8006f40:	4a69      	ldr	r2, [pc, #420]	@ (80070e8 <HAL_TIM_ConfigClockSource+0x21c>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	f000 80b1 	beq.w	80070aa <HAL_TIM_ConfigClockSource+0x1de>
 8006f48:	4a67      	ldr	r2, [pc, #412]	@ (80070e8 <HAL_TIM_ConfigClockSource+0x21c>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	f200 80b6 	bhi.w	80070bc <HAL_TIM_ConfigClockSource+0x1f0>
 8006f50:	4a66      	ldr	r2, [pc, #408]	@ (80070ec <HAL_TIM_ConfigClockSource+0x220>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	f000 80a9 	beq.w	80070aa <HAL_TIM_ConfigClockSource+0x1de>
 8006f58:	4a64      	ldr	r2, [pc, #400]	@ (80070ec <HAL_TIM_ConfigClockSource+0x220>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	f200 80ae 	bhi.w	80070bc <HAL_TIM_ConfigClockSource+0x1f0>
 8006f60:	4a63      	ldr	r2, [pc, #396]	@ (80070f0 <HAL_TIM_ConfigClockSource+0x224>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	f000 80a1 	beq.w	80070aa <HAL_TIM_ConfigClockSource+0x1de>
 8006f68:	4a61      	ldr	r2, [pc, #388]	@ (80070f0 <HAL_TIM_ConfigClockSource+0x224>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	f200 80a6 	bhi.w	80070bc <HAL_TIM_ConfigClockSource+0x1f0>
 8006f70:	4a60      	ldr	r2, [pc, #384]	@ (80070f4 <HAL_TIM_ConfigClockSource+0x228>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	f000 8099 	beq.w	80070aa <HAL_TIM_ConfigClockSource+0x1de>
 8006f78:	4a5e      	ldr	r2, [pc, #376]	@ (80070f4 <HAL_TIM_ConfigClockSource+0x228>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	f200 809e 	bhi.w	80070bc <HAL_TIM_ConfigClockSource+0x1f0>
 8006f80:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006f84:	f000 8091 	beq.w	80070aa <HAL_TIM_ConfigClockSource+0x1de>
 8006f88:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006f8c:	f200 8096 	bhi.w	80070bc <HAL_TIM_ConfigClockSource+0x1f0>
 8006f90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f94:	f000 8089 	beq.w	80070aa <HAL_TIM_ConfigClockSource+0x1de>
 8006f98:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f9c:	f200 808e 	bhi.w	80070bc <HAL_TIM_ConfigClockSource+0x1f0>
 8006fa0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fa4:	d03e      	beq.n	8007024 <HAL_TIM_ConfigClockSource+0x158>
 8006fa6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006faa:	f200 8087 	bhi.w	80070bc <HAL_TIM_ConfigClockSource+0x1f0>
 8006fae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fb2:	f000 8086 	beq.w	80070c2 <HAL_TIM_ConfigClockSource+0x1f6>
 8006fb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fba:	d87f      	bhi.n	80070bc <HAL_TIM_ConfigClockSource+0x1f0>
 8006fbc:	2b70      	cmp	r3, #112	@ 0x70
 8006fbe:	d01a      	beq.n	8006ff6 <HAL_TIM_ConfigClockSource+0x12a>
 8006fc0:	2b70      	cmp	r3, #112	@ 0x70
 8006fc2:	d87b      	bhi.n	80070bc <HAL_TIM_ConfigClockSource+0x1f0>
 8006fc4:	2b60      	cmp	r3, #96	@ 0x60
 8006fc6:	d050      	beq.n	800706a <HAL_TIM_ConfigClockSource+0x19e>
 8006fc8:	2b60      	cmp	r3, #96	@ 0x60
 8006fca:	d877      	bhi.n	80070bc <HAL_TIM_ConfigClockSource+0x1f0>
 8006fcc:	2b50      	cmp	r3, #80	@ 0x50
 8006fce:	d03c      	beq.n	800704a <HAL_TIM_ConfigClockSource+0x17e>
 8006fd0:	2b50      	cmp	r3, #80	@ 0x50
 8006fd2:	d873      	bhi.n	80070bc <HAL_TIM_ConfigClockSource+0x1f0>
 8006fd4:	2b40      	cmp	r3, #64	@ 0x40
 8006fd6:	d058      	beq.n	800708a <HAL_TIM_ConfigClockSource+0x1be>
 8006fd8:	2b40      	cmp	r3, #64	@ 0x40
 8006fda:	d86f      	bhi.n	80070bc <HAL_TIM_ConfigClockSource+0x1f0>
 8006fdc:	2b30      	cmp	r3, #48	@ 0x30
 8006fde:	d064      	beq.n	80070aa <HAL_TIM_ConfigClockSource+0x1de>
 8006fe0:	2b30      	cmp	r3, #48	@ 0x30
 8006fe2:	d86b      	bhi.n	80070bc <HAL_TIM_ConfigClockSource+0x1f0>
 8006fe4:	2b20      	cmp	r3, #32
 8006fe6:	d060      	beq.n	80070aa <HAL_TIM_ConfigClockSource+0x1de>
 8006fe8:	2b20      	cmp	r3, #32
 8006fea:	d867      	bhi.n	80070bc <HAL_TIM_ConfigClockSource+0x1f0>
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d05c      	beq.n	80070aa <HAL_TIM_ConfigClockSource+0x1de>
 8006ff0:	2b10      	cmp	r3, #16
 8006ff2:	d05a      	beq.n	80070aa <HAL_TIM_ConfigClockSource+0x1de>
 8006ff4:	e062      	b.n	80070bc <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007006:	f000 fe95 	bl	8007d34 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007018:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	68ba      	ldr	r2, [r7, #8]
 8007020:	609a      	str	r2, [r3, #8]
      break;
 8007022:	e04f      	b.n	80070c4 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007034:	f000 fe7e 	bl	8007d34 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	689a      	ldr	r2, [r3, #8]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007046:	609a      	str	r2, [r3, #8]
      break;
 8007048:	e03c      	b.n	80070c4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007056:	461a      	mov	r2, r3
 8007058:	f000 fdf0 	bl	8007c3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	2150      	movs	r1, #80	@ 0x50
 8007062:	4618      	mov	r0, r3
 8007064:	f000 fe49 	bl	8007cfa <TIM_ITRx_SetConfig>
      break;
 8007068:	e02c      	b.n	80070c4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007076:	461a      	mov	r2, r3
 8007078:	f000 fe0f 	bl	8007c9a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	2160      	movs	r1, #96	@ 0x60
 8007082:	4618      	mov	r0, r3
 8007084:	f000 fe39 	bl	8007cfa <TIM_ITRx_SetConfig>
      break;
 8007088:	e01c      	b.n	80070c4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007096:	461a      	mov	r2, r3
 8007098:	f000 fdd0 	bl	8007c3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	2140      	movs	r1, #64	@ 0x40
 80070a2:	4618      	mov	r0, r3
 80070a4:	f000 fe29 	bl	8007cfa <TIM_ITRx_SetConfig>
      break;
 80070a8:	e00c      	b.n	80070c4 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4619      	mov	r1, r3
 80070b4:	4610      	mov	r0, r2
 80070b6:	f000 fe20 	bl	8007cfa <TIM_ITRx_SetConfig>
      break;
 80070ba:	e003      	b.n	80070c4 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	73fb      	strb	r3, [r7, #15]
      break;
 80070c0:	e000      	b.n	80070c4 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80070c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80070d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3710      	adds	r7, #16
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	00100070 	.word	0x00100070
 80070e4:	00100060 	.word	0x00100060
 80070e8:	00100050 	.word	0x00100050
 80070ec:	00100040 	.word	0x00100040
 80070f0:	00100030 	.word	0x00100030
 80070f4:	00100020 	.word	0x00100020

080070f8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b083      	sub	sp, #12
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007100:	bf00      	nop
 8007102:	370c      	adds	r7, #12
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr

0800710c <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8007114:	bf00      	nop
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007120:	b480      	push	{r7}
 8007122:	b083      	sub	sp, #12
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007128:	bf00      	nop
 800712a:	370c      	adds	r7, #12
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr

08007134 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800713c:	bf00      	nop
 800713e:	370c      	adds	r7, #12
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr

08007148 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8007150:	bf00      	nop
 8007152:	370c      	adds	r7, #12
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr

0800715c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007164:	bf00      	nop
 8007166:	370c      	adds	r7, #12
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8007178:	bf00      	nop
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800718c:	bf00      	nop
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80071a0:	bf00      	nop
 80071a2:	370c      	adds	r7, #12
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80071b4:	bf00      	nop
 80071b6:	370c      	adds	r7, #12
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b087      	sub	sp, #28
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	460b      	mov	r3, r1
 80071ca:	607a      	str	r2, [r7, #4]
 80071cc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80071ce:	2300      	movs	r3, #0
 80071d0:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d101      	bne.n	80071dc <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	e14a      	b.n	8007472 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	f040 80dd 	bne.w	80073a4 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 80071ea:	7afb      	ldrb	r3, [r7, #11]
 80071ec:	2b1f      	cmp	r3, #31
 80071ee:	f200 80d6 	bhi.w	800739e <HAL_TIM_RegisterCallback+0x1de>
 80071f2:	a201      	add	r2, pc, #4	@ (adr r2, 80071f8 <HAL_TIM_RegisterCallback+0x38>)
 80071f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f8:	08007279 	.word	0x08007279
 80071fc:	08007281 	.word	0x08007281
 8007200:	08007289 	.word	0x08007289
 8007204:	08007291 	.word	0x08007291
 8007208:	08007299 	.word	0x08007299
 800720c:	080072a1 	.word	0x080072a1
 8007210:	080072a9 	.word	0x080072a9
 8007214:	080072b1 	.word	0x080072b1
 8007218:	080072b9 	.word	0x080072b9
 800721c:	080072c1 	.word	0x080072c1
 8007220:	080072c9 	.word	0x080072c9
 8007224:	080072d1 	.word	0x080072d1
 8007228:	080072d9 	.word	0x080072d9
 800722c:	080072e1 	.word	0x080072e1
 8007230:	080072eb 	.word	0x080072eb
 8007234:	080072f5 	.word	0x080072f5
 8007238:	080072ff 	.word	0x080072ff
 800723c:	08007309 	.word	0x08007309
 8007240:	08007313 	.word	0x08007313
 8007244:	0800731d 	.word	0x0800731d
 8007248:	08007327 	.word	0x08007327
 800724c:	08007331 	.word	0x08007331
 8007250:	0800733b 	.word	0x0800733b
 8007254:	08007345 	.word	0x08007345
 8007258:	0800734f 	.word	0x0800734f
 800725c:	08007359 	.word	0x08007359
 8007260:	08007363 	.word	0x08007363
 8007264:	0800736d 	.word	0x0800736d
 8007268:	08007377 	.word	0x08007377
 800726c:	08007381 	.word	0x08007381
 8007270:	0800738b 	.word	0x0800738b
 8007274:	08007395 	.word	0x08007395
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800727e:	e0f7      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	687a      	ldr	r2, [r7, #4]
 8007284:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8007286:	e0f3      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800728e:	e0ef      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8007296:	e0eb      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800729e:	e0e7      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80072a6:	e0e3      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80072ae:	e0df      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80072b6:	e0db      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	687a      	ldr	r2, [r7, #4]
 80072bc:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80072be:	e0d7      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80072c6:	e0d3      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80072ce:	e0cf      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80072d6:	e0cb      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80072de:	e0c7      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80072e8:	e0c2      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 80072f2:	e0bd      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 80072fc:	e0b8      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8007306:	e0b3      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8007310:	e0ae      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800731a:	e0a9      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	687a      	ldr	r2, [r7, #4]
 8007320:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8007324:	e0a4      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800732e:	e09f      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8007338:	e09a      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8007342:	e095      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800734c:	e090      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8007356:	e08b      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8007360:	e086      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800736a:	e081      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8007374:	e07c      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800737e:	e077      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8007388:	e072      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8007392:	e06d      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800739c:	e068      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	75fb      	strb	r3, [r7, #23]
        break;
 80073a2:	e065      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d15d      	bne.n	800746c <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 80073b0:	7afb      	ldrb	r3, [r7, #11]
 80073b2:	2b0d      	cmp	r3, #13
 80073b4:	d857      	bhi.n	8007466 <HAL_TIM_RegisterCallback+0x2a6>
 80073b6:	a201      	add	r2, pc, #4	@ (adr r2, 80073bc <HAL_TIM_RegisterCallback+0x1fc>)
 80073b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073bc:	080073f5 	.word	0x080073f5
 80073c0:	080073fd 	.word	0x080073fd
 80073c4:	08007405 	.word	0x08007405
 80073c8:	0800740d 	.word	0x0800740d
 80073cc:	08007415 	.word	0x08007415
 80073d0:	0800741d 	.word	0x0800741d
 80073d4:	08007425 	.word	0x08007425
 80073d8:	0800742d 	.word	0x0800742d
 80073dc:	08007435 	.word	0x08007435
 80073e0:	0800743d 	.word	0x0800743d
 80073e4:	08007445 	.word	0x08007445
 80073e8:	0800744d 	.word	0x0800744d
 80073ec:	08007455 	.word	0x08007455
 80073f0:	0800745d 	.word	0x0800745d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	687a      	ldr	r2, [r7, #4]
 80073f8:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80073fa:	e039      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8007402:	e035      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800740a:	e031      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8007412:	e02d      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800741a:	e029      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8007422:	e025      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	687a      	ldr	r2, [r7, #4]
 8007428:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800742a:	e021      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8007432:	e01d      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800743a:	e019      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8007442:	e015      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800744a:	e011      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8007452:	e00d      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800745a:	e009      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8007464:	e004      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	75fb      	strb	r3, [r7, #23]
        break;
 800746a:	e001      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007470:	7dfb      	ldrb	r3, [r7, #23]
}
 8007472:	4618      	mov	r0, r3
 8007474:	371c      	adds	r7, #28
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr
 800747e:	bf00      	nop

08007480 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007480:	b480      	push	{r7}
 8007482:	b085      	sub	sp, #20
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	4a4c      	ldr	r2, [pc, #304]	@ (80075c4 <TIM_Base_SetConfig+0x144>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d017      	beq.n	80074c8 <TIM_Base_SetConfig+0x48>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800749e:	d013      	beq.n	80074c8 <TIM_Base_SetConfig+0x48>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	4a49      	ldr	r2, [pc, #292]	@ (80075c8 <TIM_Base_SetConfig+0x148>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d00f      	beq.n	80074c8 <TIM_Base_SetConfig+0x48>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	4a48      	ldr	r2, [pc, #288]	@ (80075cc <TIM_Base_SetConfig+0x14c>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d00b      	beq.n	80074c8 <TIM_Base_SetConfig+0x48>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	4a47      	ldr	r2, [pc, #284]	@ (80075d0 <TIM_Base_SetConfig+0x150>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d007      	beq.n	80074c8 <TIM_Base_SetConfig+0x48>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	4a46      	ldr	r2, [pc, #280]	@ (80075d4 <TIM_Base_SetConfig+0x154>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d003      	beq.n	80074c8 <TIM_Base_SetConfig+0x48>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	4a45      	ldr	r2, [pc, #276]	@ (80075d8 <TIM_Base_SetConfig+0x158>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d108      	bne.n	80074da <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	68fa      	ldr	r2, [r7, #12]
 80074d6:	4313      	orrs	r3, r2
 80074d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	4a39      	ldr	r2, [pc, #228]	@ (80075c4 <TIM_Base_SetConfig+0x144>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d023      	beq.n	800752a <TIM_Base_SetConfig+0xaa>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074e8:	d01f      	beq.n	800752a <TIM_Base_SetConfig+0xaa>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4a36      	ldr	r2, [pc, #216]	@ (80075c8 <TIM_Base_SetConfig+0x148>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d01b      	beq.n	800752a <TIM_Base_SetConfig+0xaa>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	4a35      	ldr	r2, [pc, #212]	@ (80075cc <TIM_Base_SetConfig+0x14c>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d017      	beq.n	800752a <TIM_Base_SetConfig+0xaa>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	4a34      	ldr	r2, [pc, #208]	@ (80075d0 <TIM_Base_SetConfig+0x150>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d013      	beq.n	800752a <TIM_Base_SetConfig+0xaa>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	4a33      	ldr	r2, [pc, #204]	@ (80075d4 <TIM_Base_SetConfig+0x154>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d00f      	beq.n	800752a <TIM_Base_SetConfig+0xaa>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	4a33      	ldr	r2, [pc, #204]	@ (80075dc <TIM_Base_SetConfig+0x15c>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d00b      	beq.n	800752a <TIM_Base_SetConfig+0xaa>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	4a32      	ldr	r2, [pc, #200]	@ (80075e0 <TIM_Base_SetConfig+0x160>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d007      	beq.n	800752a <TIM_Base_SetConfig+0xaa>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4a31      	ldr	r2, [pc, #196]	@ (80075e4 <TIM_Base_SetConfig+0x164>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d003      	beq.n	800752a <TIM_Base_SetConfig+0xaa>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4a2c      	ldr	r2, [pc, #176]	@ (80075d8 <TIM_Base_SetConfig+0x158>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d108      	bne.n	800753c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007530:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	68fa      	ldr	r2, [r7, #12]
 8007538:	4313      	orrs	r3, r2
 800753a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	695b      	ldr	r3, [r3, #20]
 8007546:	4313      	orrs	r3, r2
 8007548:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	68fa      	ldr	r2, [r7, #12]
 800754e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	689a      	ldr	r2, [r3, #8]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	4a18      	ldr	r2, [pc, #96]	@ (80075c4 <TIM_Base_SetConfig+0x144>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d013      	beq.n	8007590 <TIM_Base_SetConfig+0x110>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	4a1a      	ldr	r2, [pc, #104]	@ (80075d4 <TIM_Base_SetConfig+0x154>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d00f      	beq.n	8007590 <TIM_Base_SetConfig+0x110>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	4a1a      	ldr	r2, [pc, #104]	@ (80075dc <TIM_Base_SetConfig+0x15c>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d00b      	beq.n	8007590 <TIM_Base_SetConfig+0x110>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	4a19      	ldr	r2, [pc, #100]	@ (80075e0 <TIM_Base_SetConfig+0x160>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d007      	beq.n	8007590 <TIM_Base_SetConfig+0x110>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	4a18      	ldr	r2, [pc, #96]	@ (80075e4 <TIM_Base_SetConfig+0x164>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d003      	beq.n	8007590 <TIM_Base_SetConfig+0x110>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	4a13      	ldr	r2, [pc, #76]	@ (80075d8 <TIM_Base_SetConfig+0x158>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d103      	bne.n	8007598 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	691a      	ldr	r2, [r3, #16]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	691b      	ldr	r3, [r3, #16]
 80075a2:	f003 0301 	and.w	r3, r3, #1
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d105      	bne.n	80075b6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	691b      	ldr	r3, [r3, #16]
 80075ae:	f023 0201 	bic.w	r2, r3, #1
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	611a      	str	r2, [r3, #16]
  }
}
 80075b6:	bf00      	nop
 80075b8:	3714      	adds	r7, #20
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr
 80075c2:	bf00      	nop
 80075c4:	40012c00 	.word	0x40012c00
 80075c8:	40000400 	.word	0x40000400
 80075cc:	40000800 	.word	0x40000800
 80075d0:	40000c00 	.word	0x40000c00
 80075d4:	40013400 	.word	0x40013400
 80075d8:	40015000 	.word	0x40015000
 80075dc:	40014000 	.word	0x40014000
 80075e0:	40014400 	.word	0x40014400
 80075e4:	40014800 	.word	0x40014800

080075e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b087      	sub	sp, #28
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a1b      	ldr	r3, [r3, #32]
 80075f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6a1b      	ldr	r3, [r3, #32]
 80075fc:	f023 0201 	bic.w	r2, r3, #1
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	699b      	ldr	r3, [r3, #24]
 800760e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007616:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800761a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f023 0303 	bic.w	r3, r3, #3
 8007622:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	68fa      	ldr	r2, [r7, #12]
 800762a:	4313      	orrs	r3, r2
 800762c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	f023 0302 	bic.w	r3, r3, #2
 8007634:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	697a      	ldr	r2, [r7, #20]
 800763c:	4313      	orrs	r3, r2
 800763e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	4a30      	ldr	r2, [pc, #192]	@ (8007704 <TIM_OC1_SetConfig+0x11c>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d013      	beq.n	8007670 <TIM_OC1_SetConfig+0x88>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4a2f      	ldr	r2, [pc, #188]	@ (8007708 <TIM_OC1_SetConfig+0x120>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d00f      	beq.n	8007670 <TIM_OC1_SetConfig+0x88>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	4a2e      	ldr	r2, [pc, #184]	@ (800770c <TIM_OC1_SetConfig+0x124>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d00b      	beq.n	8007670 <TIM_OC1_SetConfig+0x88>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	4a2d      	ldr	r2, [pc, #180]	@ (8007710 <TIM_OC1_SetConfig+0x128>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d007      	beq.n	8007670 <TIM_OC1_SetConfig+0x88>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	4a2c      	ldr	r2, [pc, #176]	@ (8007714 <TIM_OC1_SetConfig+0x12c>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d003      	beq.n	8007670 <TIM_OC1_SetConfig+0x88>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	4a2b      	ldr	r2, [pc, #172]	@ (8007718 <TIM_OC1_SetConfig+0x130>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d10c      	bne.n	800768a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	f023 0308 	bic.w	r3, r3, #8
 8007676:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	68db      	ldr	r3, [r3, #12]
 800767c:	697a      	ldr	r2, [r7, #20]
 800767e:	4313      	orrs	r3, r2
 8007680:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	f023 0304 	bic.w	r3, r3, #4
 8007688:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	4a1d      	ldr	r2, [pc, #116]	@ (8007704 <TIM_OC1_SetConfig+0x11c>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d013      	beq.n	80076ba <TIM_OC1_SetConfig+0xd2>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	4a1c      	ldr	r2, [pc, #112]	@ (8007708 <TIM_OC1_SetConfig+0x120>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d00f      	beq.n	80076ba <TIM_OC1_SetConfig+0xd2>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	4a1b      	ldr	r2, [pc, #108]	@ (800770c <TIM_OC1_SetConfig+0x124>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d00b      	beq.n	80076ba <TIM_OC1_SetConfig+0xd2>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	4a1a      	ldr	r2, [pc, #104]	@ (8007710 <TIM_OC1_SetConfig+0x128>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d007      	beq.n	80076ba <TIM_OC1_SetConfig+0xd2>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	4a19      	ldr	r2, [pc, #100]	@ (8007714 <TIM_OC1_SetConfig+0x12c>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d003      	beq.n	80076ba <TIM_OC1_SetConfig+0xd2>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	4a18      	ldr	r2, [pc, #96]	@ (8007718 <TIM_OC1_SetConfig+0x130>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d111      	bne.n	80076de <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80076c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80076c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	695b      	ldr	r3, [r3, #20]
 80076ce:	693a      	ldr	r2, [r7, #16]
 80076d0:	4313      	orrs	r3, r2
 80076d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	699b      	ldr	r3, [r3, #24]
 80076d8:	693a      	ldr	r2, [r7, #16]
 80076da:	4313      	orrs	r3, r2
 80076dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	693a      	ldr	r2, [r7, #16]
 80076e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	68fa      	ldr	r2, [r7, #12]
 80076e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	685a      	ldr	r2, [r3, #4]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	697a      	ldr	r2, [r7, #20]
 80076f6:	621a      	str	r2, [r3, #32]
}
 80076f8:	bf00      	nop
 80076fa:	371c      	adds	r7, #28
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr
 8007704:	40012c00 	.word	0x40012c00
 8007708:	40013400 	.word	0x40013400
 800770c:	40014000 	.word	0x40014000
 8007710:	40014400 	.word	0x40014400
 8007714:	40014800 	.word	0x40014800
 8007718:	40015000 	.word	0x40015000

0800771c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800771c:	b480      	push	{r7}
 800771e:	b087      	sub	sp, #28
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6a1b      	ldr	r3, [r3, #32]
 800772a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6a1b      	ldr	r3, [r3, #32]
 8007730:	f023 0210 	bic.w	r2, r3, #16
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	699b      	ldr	r3, [r3, #24]
 8007742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800774a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800774e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007756:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	021b      	lsls	r3, r3, #8
 800775e:	68fa      	ldr	r2, [r7, #12]
 8007760:	4313      	orrs	r3, r2
 8007762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	f023 0320 	bic.w	r3, r3, #32
 800776a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	011b      	lsls	r3, r3, #4
 8007772:	697a      	ldr	r2, [r7, #20]
 8007774:	4313      	orrs	r3, r2
 8007776:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	4a2c      	ldr	r2, [pc, #176]	@ (800782c <TIM_OC2_SetConfig+0x110>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d007      	beq.n	8007790 <TIM_OC2_SetConfig+0x74>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	4a2b      	ldr	r2, [pc, #172]	@ (8007830 <TIM_OC2_SetConfig+0x114>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d003      	beq.n	8007790 <TIM_OC2_SetConfig+0x74>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	4a2a      	ldr	r2, [pc, #168]	@ (8007834 <TIM_OC2_SetConfig+0x118>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d10d      	bne.n	80077ac <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007796:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	68db      	ldr	r3, [r3, #12]
 800779c:	011b      	lsls	r3, r3, #4
 800779e:	697a      	ldr	r2, [r7, #20]
 80077a0:	4313      	orrs	r3, r2
 80077a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80077aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	4a1f      	ldr	r2, [pc, #124]	@ (800782c <TIM_OC2_SetConfig+0x110>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d013      	beq.n	80077dc <TIM_OC2_SetConfig+0xc0>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	4a1e      	ldr	r2, [pc, #120]	@ (8007830 <TIM_OC2_SetConfig+0x114>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d00f      	beq.n	80077dc <TIM_OC2_SetConfig+0xc0>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	4a1e      	ldr	r2, [pc, #120]	@ (8007838 <TIM_OC2_SetConfig+0x11c>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d00b      	beq.n	80077dc <TIM_OC2_SetConfig+0xc0>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	4a1d      	ldr	r2, [pc, #116]	@ (800783c <TIM_OC2_SetConfig+0x120>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d007      	beq.n	80077dc <TIM_OC2_SetConfig+0xc0>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	4a1c      	ldr	r2, [pc, #112]	@ (8007840 <TIM_OC2_SetConfig+0x124>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d003      	beq.n	80077dc <TIM_OC2_SetConfig+0xc0>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	4a17      	ldr	r2, [pc, #92]	@ (8007834 <TIM_OC2_SetConfig+0x118>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d113      	bne.n	8007804 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80077e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80077ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	695b      	ldr	r3, [r3, #20]
 80077f0:	009b      	lsls	r3, r3, #2
 80077f2:	693a      	ldr	r2, [r7, #16]
 80077f4:	4313      	orrs	r3, r2
 80077f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	699b      	ldr	r3, [r3, #24]
 80077fc:	009b      	lsls	r3, r3, #2
 80077fe:	693a      	ldr	r2, [r7, #16]
 8007800:	4313      	orrs	r3, r2
 8007802:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	693a      	ldr	r2, [r7, #16]
 8007808:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	68fa      	ldr	r2, [r7, #12]
 800780e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	685a      	ldr	r2, [r3, #4]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	697a      	ldr	r2, [r7, #20]
 800781c:	621a      	str	r2, [r3, #32]
}
 800781e:	bf00      	nop
 8007820:	371c      	adds	r7, #28
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr
 800782a:	bf00      	nop
 800782c:	40012c00 	.word	0x40012c00
 8007830:	40013400 	.word	0x40013400
 8007834:	40015000 	.word	0x40015000
 8007838:	40014000 	.word	0x40014000
 800783c:	40014400 	.word	0x40014400
 8007840:	40014800 	.word	0x40014800

08007844 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007844:	b480      	push	{r7}
 8007846:	b087      	sub	sp, #28
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6a1b      	ldr	r3, [r3, #32]
 8007852:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6a1b      	ldr	r3, [r3, #32]
 8007858:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	69db      	ldr	r3, [r3, #28]
 800786a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007872:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f023 0303 	bic.w	r3, r3, #3
 800787e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	68fa      	ldr	r2, [r7, #12]
 8007886:	4313      	orrs	r3, r2
 8007888:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007890:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	021b      	lsls	r3, r3, #8
 8007898:	697a      	ldr	r2, [r7, #20]
 800789a:	4313      	orrs	r3, r2
 800789c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	4a2b      	ldr	r2, [pc, #172]	@ (8007950 <TIM_OC3_SetConfig+0x10c>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d007      	beq.n	80078b6 <TIM_OC3_SetConfig+0x72>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	4a2a      	ldr	r2, [pc, #168]	@ (8007954 <TIM_OC3_SetConfig+0x110>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d003      	beq.n	80078b6 <TIM_OC3_SetConfig+0x72>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4a29      	ldr	r2, [pc, #164]	@ (8007958 <TIM_OC3_SetConfig+0x114>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d10d      	bne.n	80078d2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80078bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	021b      	lsls	r3, r3, #8
 80078c4:	697a      	ldr	r2, [r7, #20]
 80078c6:	4313      	orrs	r3, r2
 80078c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80078d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4a1e      	ldr	r2, [pc, #120]	@ (8007950 <TIM_OC3_SetConfig+0x10c>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d013      	beq.n	8007902 <TIM_OC3_SetConfig+0xbe>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4a1d      	ldr	r2, [pc, #116]	@ (8007954 <TIM_OC3_SetConfig+0x110>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d00f      	beq.n	8007902 <TIM_OC3_SetConfig+0xbe>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4a1d      	ldr	r2, [pc, #116]	@ (800795c <TIM_OC3_SetConfig+0x118>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d00b      	beq.n	8007902 <TIM_OC3_SetConfig+0xbe>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4a1c      	ldr	r2, [pc, #112]	@ (8007960 <TIM_OC3_SetConfig+0x11c>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d007      	beq.n	8007902 <TIM_OC3_SetConfig+0xbe>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4a1b      	ldr	r2, [pc, #108]	@ (8007964 <TIM_OC3_SetConfig+0x120>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d003      	beq.n	8007902 <TIM_OC3_SetConfig+0xbe>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4a16      	ldr	r2, [pc, #88]	@ (8007958 <TIM_OC3_SetConfig+0x114>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d113      	bne.n	800792a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007908:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007910:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	695b      	ldr	r3, [r3, #20]
 8007916:	011b      	lsls	r3, r3, #4
 8007918:	693a      	ldr	r2, [r7, #16]
 800791a:	4313      	orrs	r3, r2
 800791c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	699b      	ldr	r3, [r3, #24]
 8007922:	011b      	lsls	r3, r3, #4
 8007924:	693a      	ldr	r2, [r7, #16]
 8007926:	4313      	orrs	r3, r2
 8007928:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	693a      	ldr	r2, [r7, #16]
 800792e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	68fa      	ldr	r2, [r7, #12]
 8007934:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	685a      	ldr	r2, [r3, #4]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	697a      	ldr	r2, [r7, #20]
 8007942:	621a      	str	r2, [r3, #32]
}
 8007944:	bf00      	nop
 8007946:	371c      	adds	r7, #28
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr
 8007950:	40012c00 	.word	0x40012c00
 8007954:	40013400 	.word	0x40013400
 8007958:	40015000 	.word	0x40015000
 800795c:	40014000 	.word	0x40014000
 8007960:	40014400 	.word	0x40014400
 8007964:	40014800 	.word	0x40014800

08007968 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007968:	b480      	push	{r7}
 800796a:	b087      	sub	sp, #28
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6a1b      	ldr	r3, [r3, #32]
 8007976:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6a1b      	ldr	r3, [r3, #32]
 800797c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	69db      	ldr	r3, [r3, #28]
 800798e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007996:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800799a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80079a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	021b      	lsls	r3, r3, #8
 80079aa:	68fa      	ldr	r2, [r7, #12]
 80079ac:	4313      	orrs	r3, r2
 80079ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80079b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	031b      	lsls	r3, r3, #12
 80079be:	697a      	ldr	r2, [r7, #20]
 80079c0:	4313      	orrs	r3, r2
 80079c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	4a2c      	ldr	r2, [pc, #176]	@ (8007a78 <TIM_OC4_SetConfig+0x110>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d007      	beq.n	80079dc <TIM_OC4_SetConfig+0x74>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	4a2b      	ldr	r2, [pc, #172]	@ (8007a7c <TIM_OC4_SetConfig+0x114>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d003      	beq.n	80079dc <TIM_OC4_SetConfig+0x74>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	4a2a      	ldr	r2, [pc, #168]	@ (8007a80 <TIM_OC4_SetConfig+0x118>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d10d      	bne.n	80079f8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80079e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	68db      	ldr	r3, [r3, #12]
 80079e8:	031b      	lsls	r3, r3, #12
 80079ea:	697a      	ldr	r2, [r7, #20]
 80079ec:	4313      	orrs	r3, r2
 80079ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80079f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	4a1f      	ldr	r2, [pc, #124]	@ (8007a78 <TIM_OC4_SetConfig+0x110>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d013      	beq.n	8007a28 <TIM_OC4_SetConfig+0xc0>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	4a1e      	ldr	r2, [pc, #120]	@ (8007a7c <TIM_OC4_SetConfig+0x114>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d00f      	beq.n	8007a28 <TIM_OC4_SetConfig+0xc0>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	4a1e      	ldr	r2, [pc, #120]	@ (8007a84 <TIM_OC4_SetConfig+0x11c>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d00b      	beq.n	8007a28 <TIM_OC4_SetConfig+0xc0>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	4a1d      	ldr	r2, [pc, #116]	@ (8007a88 <TIM_OC4_SetConfig+0x120>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d007      	beq.n	8007a28 <TIM_OC4_SetConfig+0xc0>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	4a1c      	ldr	r2, [pc, #112]	@ (8007a8c <TIM_OC4_SetConfig+0x124>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d003      	beq.n	8007a28 <TIM_OC4_SetConfig+0xc0>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	4a17      	ldr	r2, [pc, #92]	@ (8007a80 <TIM_OC4_SetConfig+0x118>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d113      	bne.n	8007a50 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007a2e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007a36:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	695b      	ldr	r3, [r3, #20]
 8007a3c:	019b      	lsls	r3, r3, #6
 8007a3e:	693a      	ldr	r2, [r7, #16]
 8007a40:	4313      	orrs	r3, r2
 8007a42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	699b      	ldr	r3, [r3, #24]
 8007a48:	019b      	lsls	r3, r3, #6
 8007a4a:	693a      	ldr	r2, [r7, #16]
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	693a      	ldr	r2, [r7, #16]
 8007a54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	685a      	ldr	r2, [r3, #4]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	697a      	ldr	r2, [r7, #20]
 8007a68:	621a      	str	r2, [r3, #32]
}
 8007a6a:	bf00      	nop
 8007a6c:	371c      	adds	r7, #28
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr
 8007a76:	bf00      	nop
 8007a78:	40012c00 	.word	0x40012c00
 8007a7c:	40013400 	.word	0x40013400
 8007a80:	40015000 	.word	0x40015000
 8007a84:	40014000 	.word	0x40014000
 8007a88:	40014400 	.word	0x40014400
 8007a8c:	40014800 	.word	0x40014800

08007a90 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b087      	sub	sp, #28
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6a1b      	ldr	r3, [r3, #32]
 8007a9e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6a1b      	ldr	r3, [r3, #32]
 8007aa4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007abe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ac2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	68fa      	ldr	r2, [r7, #12]
 8007aca:	4313      	orrs	r3, r2
 8007acc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007ad4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	041b      	lsls	r3, r3, #16
 8007adc:	693a      	ldr	r2, [r7, #16]
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	4a19      	ldr	r2, [pc, #100]	@ (8007b4c <TIM_OC5_SetConfig+0xbc>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d013      	beq.n	8007b12 <TIM_OC5_SetConfig+0x82>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	4a18      	ldr	r2, [pc, #96]	@ (8007b50 <TIM_OC5_SetConfig+0xc0>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d00f      	beq.n	8007b12 <TIM_OC5_SetConfig+0x82>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	4a17      	ldr	r2, [pc, #92]	@ (8007b54 <TIM_OC5_SetConfig+0xc4>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d00b      	beq.n	8007b12 <TIM_OC5_SetConfig+0x82>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4a16      	ldr	r2, [pc, #88]	@ (8007b58 <TIM_OC5_SetConfig+0xc8>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d007      	beq.n	8007b12 <TIM_OC5_SetConfig+0x82>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	4a15      	ldr	r2, [pc, #84]	@ (8007b5c <TIM_OC5_SetConfig+0xcc>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d003      	beq.n	8007b12 <TIM_OC5_SetConfig+0x82>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	4a14      	ldr	r2, [pc, #80]	@ (8007b60 <TIM_OC5_SetConfig+0xd0>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d109      	bne.n	8007b26 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b18:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	695b      	ldr	r3, [r3, #20]
 8007b1e:	021b      	lsls	r3, r3, #8
 8007b20:	697a      	ldr	r2, [r7, #20]
 8007b22:	4313      	orrs	r3, r2
 8007b24:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	697a      	ldr	r2, [r7, #20]
 8007b2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	68fa      	ldr	r2, [r7, #12]
 8007b30:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	685a      	ldr	r2, [r3, #4]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	693a      	ldr	r2, [r7, #16]
 8007b3e:	621a      	str	r2, [r3, #32]
}
 8007b40:	bf00      	nop
 8007b42:	371c      	adds	r7, #28
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr
 8007b4c:	40012c00 	.word	0x40012c00
 8007b50:	40013400 	.word	0x40013400
 8007b54:	40014000 	.word	0x40014000
 8007b58:	40014400 	.word	0x40014400
 8007b5c:	40014800 	.word	0x40014800
 8007b60:	40015000 	.word	0x40015000

08007b64 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b087      	sub	sp, #28
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6a1b      	ldr	r3, [r3, #32]
 8007b72:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6a1b      	ldr	r3, [r3, #32]
 8007b78:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007b92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	021b      	lsls	r3, r3, #8
 8007b9e:	68fa      	ldr	r2, [r7, #12]
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007baa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	689b      	ldr	r3, [r3, #8]
 8007bb0:	051b      	lsls	r3, r3, #20
 8007bb2:	693a      	ldr	r2, [r7, #16]
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	4a1a      	ldr	r2, [pc, #104]	@ (8007c24 <TIM_OC6_SetConfig+0xc0>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d013      	beq.n	8007be8 <TIM_OC6_SetConfig+0x84>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	4a19      	ldr	r2, [pc, #100]	@ (8007c28 <TIM_OC6_SetConfig+0xc4>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d00f      	beq.n	8007be8 <TIM_OC6_SetConfig+0x84>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	4a18      	ldr	r2, [pc, #96]	@ (8007c2c <TIM_OC6_SetConfig+0xc8>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d00b      	beq.n	8007be8 <TIM_OC6_SetConfig+0x84>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	4a17      	ldr	r2, [pc, #92]	@ (8007c30 <TIM_OC6_SetConfig+0xcc>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d007      	beq.n	8007be8 <TIM_OC6_SetConfig+0x84>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	4a16      	ldr	r2, [pc, #88]	@ (8007c34 <TIM_OC6_SetConfig+0xd0>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d003      	beq.n	8007be8 <TIM_OC6_SetConfig+0x84>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	4a15      	ldr	r2, [pc, #84]	@ (8007c38 <TIM_OC6_SetConfig+0xd4>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d109      	bne.n	8007bfc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007bee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	695b      	ldr	r3, [r3, #20]
 8007bf4:	029b      	lsls	r3, r3, #10
 8007bf6:	697a      	ldr	r2, [r7, #20]
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	697a      	ldr	r2, [r7, #20]
 8007c00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	68fa      	ldr	r2, [r7, #12]
 8007c06:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	685a      	ldr	r2, [r3, #4]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	693a      	ldr	r2, [r7, #16]
 8007c14:	621a      	str	r2, [r3, #32]
}
 8007c16:	bf00      	nop
 8007c18:	371c      	adds	r7, #28
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr
 8007c22:	bf00      	nop
 8007c24:	40012c00 	.word	0x40012c00
 8007c28:	40013400 	.word	0x40013400
 8007c2c:	40014000 	.word	0x40014000
 8007c30:	40014400 	.word	0x40014400
 8007c34:	40014800 	.word	0x40014800
 8007c38:	40015000 	.word	0x40015000

08007c3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b087      	sub	sp, #28
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	60f8      	str	r0, [r7, #12]
 8007c44:	60b9      	str	r1, [r7, #8]
 8007c46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	6a1b      	ldr	r3, [r3, #32]
 8007c4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	6a1b      	ldr	r3, [r3, #32]
 8007c52:	f023 0201 	bic.w	r2, r3, #1
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	699b      	ldr	r3, [r3, #24]
 8007c5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007c66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	011b      	lsls	r3, r3, #4
 8007c6c:	693a      	ldr	r2, [r7, #16]
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	f023 030a 	bic.w	r3, r3, #10
 8007c78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007c7a:	697a      	ldr	r2, [r7, #20]
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	693a      	ldr	r2, [r7, #16]
 8007c86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	697a      	ldr	r2, [r7, #20]
 8007c8c:	621a      	str	r2, [r3, #32]
}
 8007c8e:	bf00      	nop
 8007c90:	371c      	adds	r7, #28
 8007c92:	46bd      	mov	sp, r7
 8007c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c98:	4770      	bx	lr

08007c9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c9a:	b480      	push	{r7}
 8007c9c:	b087      	sub	sp, #28
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	60f8      	str	r0, [r7, #12]
 8007ca2:	60b9      	str	r1, [r7, #8]
 8007ca4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	6a1b      	ldr	r3, [r3, #32]
 8007caa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	6a1b      	ldr	r3, [r3, #32]
 8007cb0:	f023 0210 	bic.w	r2, r3, #16
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	699b      	ldr	r3, [r3, #24]
 8007cbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007cc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	031b      	lsls	r3, r3, #12
 8007cca:	693a      	ldr	r2, [r7, #16]
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007cd6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	011b      	lsls	r3, r3, #4
 8007cdc:	697a      	ldr	r2, [r7, #20]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	693a      	ldr	r2, [r7, #16]
 8007ce6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	697a      	ldr	r2, [r7, #20]
 8007cec:	621a      	str	r2, [r3, #32]
}
 8007cee:	bf00      	nop
 8007cf0:	371c      	adds	r7, #28
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr

08007cfa <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007cfa:	b480      	push	{r7}
 8007cfc:	b085      	sub	sp, #20
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
 8007d02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007d10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d16:	683a      	ldr	r2, [r7, #0]
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	f043 0307 	orr.w	r3, r3, #7
 8007d20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	68fa      	ldr	r2, [r7, #12]
 8007d26:	609a      	str	r2, [r3, #8]
}
 8007d28:	bf00      	nop
 8007d2a:	3714      	adds	r7, #20
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr

08007d34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b087      	sub	sp, #28
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	60b9      	str	r1, [r7, #8]
 8007d3e:	607a      	str	r2, [r7, #4]
 8007d40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007d4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	021a      	lsls	r2, r3, #8
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	431a      	orrs	r2, r3
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	697a      	ldr	r2, [r7, #20]
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	697a      	ldr	r2, [r7, #20]
 8007d66:	609a      	str	r2, [r3, #8]
}
 8007d68:	bf00      	nop
 8007d6a:	371c      	adds	r7, #28
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr

08007d74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b087      	sub	sp, #28
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	60b9      	str	r1, [r7, #8]
 8007d7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	f003 031f 	and.w	r3, r3, #31
 8007d86:	2201      	movs	r2, #1
 8007d88:	fa02 f303 	lsl.w	r3, r2, r3
 8007d8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	6a1a      	ldr	r2, [r3, #32]
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	43db      	mvns	r3, r3
 8007d96:	401a      	ands	r2, r3
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	6a1a      	ldr	r2, [r3, #32]
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	f003 031f 	and.w	r3, r3, #31
 8007da6:	6879      	ldr	r1, [r7, #4]
 8007da8:	fa01 f303 	lsl.w	r3, r1, r3
 8007dac:	431a      	orrs	r2, r3
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	621a      	str	r2, [r3, #32]
}
 8007db2:	bf00      	nop
 8007db4:	371c      	adds	r7, #28
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr
	...

08007dc0 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b083      	sub	sp, #12
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	4a26      	ldr	r2, [pc, #152]	@ (8007e64 <TIM_ResetCallback+0xa4>)
 8007dcc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	4a25      	ldr	r2, [pc, #148]	@ (8007e68 <TIM_ResetCallback+0xa8>)
 8007dd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	4a24      	ldr	r2, [pc, #144]	@ (8007e6c <TIM_ResetCallback+0xac>)
 8007ddc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	4a23      	ldr	r2, [pc, #140]	@ (8007e70 <TIM_ResetCallback+0xb0>)
 8007de4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	4a22      	ldr	r2, [pc, #136]	@ (8007e74 <TIM_ResetCallback+0xb4>)
 8007dec:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	4a21      	ldr	r2, [pc, #132]	@ (8007e78 <TIM_ResetCallback+0xb8>)
 8007df4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	4a20      	ldr	r2, [pc, #128]	@ (8007e7c <TIM_ResetCallback+0xbc>)
 8007dfc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	4a1f      	ldr	r2, [pc, #124]	@ (8007e80 <TIM_ResetCallback+0xc0>)
 8007e04:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	4a1e      	ldr	r2, [pc, #120]	@ (8007e84 <TIM_ResetCallback+0xc4>)
 8007e0c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	4a1d      	ldr	r2, [pc, #116]	@ (8007e88 <TIM_ResetCallback+0xc8>)
 8007e14:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	4a1c      	ldr	r2, [pc, #112]	@ (8007e8c <TIM_ResetCallback+0xcc>)
 8007e1c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	4a1b      	ldr	r2, [pc, #108]	@ (8007e90 <TIM_ResetCallback+0xd0>)
 8007e24:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	4a1a      	ldr	r2, [pc, #104]	@ (8007e94 <TIM_ResetCallback+0xd4>)
 8007e2c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	4a19      	ldr	r2, [pc, #100]	@ (8007e98 <TIM_ResetCallback+0xd8>)
 8007e34:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	4a18      	ldr	r2, [pc, #96]	@ (8007e9c <TIM_ResetCallback+0xdc>)
 8007e3c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	4a17      	ldr	r2, [pc, #92]	@ (8007ea0 <TIM_ResetCallback+0xe0>)
 8007e44:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	4a16      	ldr	r2, [pc, #88]	@ (8007ea4 <TIM_ResetCallback+0xe4>)
 8007e4c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	4a15      	ldr	r2, [pc, #84]	@ (8007ea8 <TIM_ResetCallback+0xe8>)
 8007e54:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8007e58:	bf00      	nop
 8007e5a:	370c      	adds	r7, #12
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr
 8007e64:	080070f9 	.word	0x080070f9
 8007e68:	0800710d 	.word	0x0800710d
 8007e6c:	08007185 	.word	0x08007185
 8007e70:	08007199 	.word	0x08007199
 8007e74:	08007135 	.word	0x08007135
 8007e78:	08007149 	.word	0x08007149
 8007e7c:	08007121 	.word	0x08007121
 8007e80:	0800715d 	.word	0x0800715d
 8007e84:	08007171 	.word	0x08007171
 8007e88:	080071ad 	.word	0x080071ad
 8007e8c:	08008101 	.word	0x08008101
 8007e90:	08008115 	.word	0x08008115
 8007e94:	08008129 	.word	0x08008129
 8007e98:	0800813d 	.word	0x0800813d
 8007e9c:	08008151 	.word	0x08008151
 8007ea0:	08008165 	.word	0x08008165
 8007ea4:	08008179 	.word	0x08008179
 8007ea8:	0800818d 	.word	0x0800818d

08007eac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b085      	sub	sp, #20
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	d101      	bne.n	8007ec4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ec0:	2302      	movs	r3, #2
 8007ec2:	e074      	b.n	8007fae <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2202      	movs	r2, #2
 8007ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	689b      	ldr	r3, [r3, #8]
 8007ee2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a34      	ldr	r2, [pc, #208]	@ (8007fbc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d009      	beq.n	8007f02 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a33      	ldr	r2, [pc, #204]	@ (8007fc0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d004      	beq.n	8007f02 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a31      	ldr	r2, [pc, #196]	@ (8007fc4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d108      	bne.n	8007f14 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007f08:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	68fa      	ldr	r2, [r7, #12]
 8007f10:	4313      	orrs	r3, r2
 8007f12:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007f1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	68fa      	ldr	r2, [r7, #12]
 8007f26:	4313      	orrs	r3, r2
 8007f28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	68fa      	ldr	r2, [r7, #12]
 8007f30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a21      	ldr	r2, [pc, #132]	@ (8007fbc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d022      	beq.n	8007f82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f44:	d01d      	beq.n	8007f82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a1f      	ldr	r2, [pc, #124]	@ (8007fc8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d018      	beq.n	8007f82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a1d      	ldr	r2, [pc, #116]	@ (8007fcc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d013      	beq.n	8007f82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a1c      	ldr	r2, [pc, #112]	@ (8007fd0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d00e      	beq.n	8007f82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a15      	ldr	r2, [pc, #84]	@ (8007fc0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d009      	beq.n	8007f82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a18      	ldr	r2, [pc, #96]	@ (8007fd4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d004      	beq.n	8007f82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a11      	ldr	r2, [pc, #68]	@ (8007fc4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d10c      	bne.n	8007f9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	68ba      	ldr	r2, [r7, #8]
 8007f90:	4313      	orrs	r3, r2
 8007f92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	68ba      	ldr	r2, [r7, #8]
 8007f9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007fac:	2300      	movs	r3, #0
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3714      	adds	r7, #20
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr
 8007fba:	bf00      	nop
 8007fbc:	40012c00 	.word	0x40012c00
 8007fc0:	40013400 	.word	0x40013400
 8007fc4:	40015000 	.word	0x40015000
 8007fc8:	40000400 	.word	0x40000400
 8007fcc:	40000800 	.word	0x40000800
 8007fd0:	40000c00 	.word	0x40000c00
 8007fd4:	40014000 	.word	0x40014000

08007fd8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b085      	sub	sp, #20
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d101      	bne.n	8007ff4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007ff0:	2302      	movs	r3, #2
 8007ff2:	e078      	b.n	80080e6 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	68db      	ldr	r3, [r3, #12]
 8008006:	4313      	orrs	r3, r2
 8008008:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	4313      	orrs	r3, r2
 8008016:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	4313      	orrs	r3, r2
 8008024:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4313      	orrs	r3, r2
 8008032:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	691b      	ldr	r3, [r3, #16]
 800803e:	4313      	orrs	r3, r2
 8008040:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	695b      	ldr	r3, [r3, #20]
 800804c:	4313      	orrs	r3, r2
 800804e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800805a:	4313      	orrs	r3, r2
 800805c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	699b      	ldr	r3, [r3, #24]
 8008068:	041b      	lsls	r3, r3, #16
 800806a:	4313      	orrs	r3, r2
 800806c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	69db      	ldr	r3, [r3, #28]
 8008078:	4313      	orrs	r3, r2
 800807a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a1c      	ldr	r2, [pc, #112]	@ (80080f4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d009      	beq.n	800809a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a1b      	ldr	r2, [pc, #108]	@ (80080f8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d004      	beq.n	800809a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a19      	ldr	r2, [pc, #100]	@ (80080fc <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d11c      	bne.n	80080d4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080a4:	051b      	lsls	r3, r3, #20
 80080a6:	4313      	orrs	r3, r2
 80080a8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	6a1b      	ldr	r3, [r3, #32]
 80080b4:	4313      	orrs	r3, r2
 80080b6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080c2:	4313      	orrs	r3, r2
 80080c4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080d0:	4313      	orrs	r3, r2
 80080d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	68fa      	ldr	r2, [r7, #12]
 80080da:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2200      	movs	r2, #0
 80080e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80080e4:	2300      	movs	r3, #0
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3714      	adds	r7, #20
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr
 80080f2:	bf00      	nop
 80080f4:	40012c00 	.word	0x40012c00
 80080f8:	40013400 	.word	0x40013400
 80080fc:	40015000 	.word	0x40015000

08008100 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008100:	b480      	push	{r7}
 8008102:	b083      	sub	sp, #12
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008108:	bf00      	nop
 800810a:	370c      	adds	r7, #12
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr

08008114 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008114:	b480      	push	{r7}
 8008116:	b083      	sub	sp, #12
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800811c:	bf00      	nop
 800811e:	370c      	adds	r7, #12
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr

08008128 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008128:	b480      	push	{r7}
 800812a:	b083      	sub	sp, #12
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008130:	bf00      	nop
 8008132:	370c      	adds	r7, #12
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr

0800813c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800813c:	b480      	push	{r7}
 800813e:	b083      	sub	sp, #12
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008144:	bf00      	nop
 8008146:	370c      	adds	r7, #12
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr

08008150 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008150:	b480      	push	{r7}
 8008152:	b083      	sub	sp, #12
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008158:	bf00      	nop
 800815a:	370c      	adds	r7, #12
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr

08008164 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008164:	b480      	push	{r7}
 8008166:	b083      	sub	sp, #12
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800816c:	bf00      	nop
 800816e:	370c      	adds	r7, #12
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr

08008178 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008178:	b480      	push	{r7}
 800817a:	b083      	sub	sp, #12
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008180:	bf00      	nop
 8008182:	370c      	adds	r7, #12
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr

0800818c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800818c:	b480      	push	{r7}
 800818e:	b083      	sub	sp, #12
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008194:	bf00      	nop
 8008196:	370c      	adds	r7, #12
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr

080081a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b082      	sub	sp, #8
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d101      	bne.n	80081b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80081ae:	2301      	movs	r3, #1
 80081b0:	e050      	b.n	8008254 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d114      	bne.n	80081e6 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f000 fe37 	bl	8008e38 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d103      	bne.n	80081dc <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	4a21      	ldr	r2, [pc, #132]	@ (800825c <HAL_UART_Init+0xbc>)
 80081d8:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2224      	movs	r2, #36	@ 0x24
 80081ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f022 0201 	bic.w	r2, r2, #1
 80081fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008202:	2b00      	cmp	r3, #0
 8008204:	d002      	beq.n	800820c <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f001 f964 	bl	80094d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f000 fe65 	bl	8008edc <UART_SetConfig>
 8008212:	4603      	mov	r3, r0
 8008214:	2b01      	cmp	r3, #1
 8008216:	d101      	bne.n	800821c <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8008218:	2301      	movs	r3, #1
 800821a:	e01b      	b.n	8008254 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	685a      	ldr	r2, [r3, #4]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800822a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	689a      	ldr	r2, [r3, #8]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800823a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f042 0201 	orr.w	r2, r2, #1
 800824a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f001 f9e3 	bl	8009618 <UART_CheckIdleState>
 8008252:	4603      	mov	r3, r0
}
 8008254:	4618      	mov	r0, r3
 8008256:	3708      	adds	r7, #8
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}
 800825c:	0800266d 	.word	0x0800266d

08008260 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8008260:	b480      	push	{r7}
 8008262:	b087      	sub	sp, #28
 8008264:	af00      	add	r7, sp, #0
 8008266:	60f8      	str	r0, [r7, #12]
 8008268:	460b      	mov	r3, r1
 800826a:	607a      	str	r2, [r7, #4]
 800826c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800826e:	2300      	movs	r3, #0
 8008270:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d109      	bne.n	800828c <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800827e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 8008288:	2301      	movs	r3, #1
 800828a:	e09c      	b.n	80083c6 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008292:	2b20      	cmp	r3, #32
 8008294:	d16c      	bne.n	8008370 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8008296:	7afb      	ldrb	r3, [r7, #11]
 8008298:	2b0c      	cmp	r3, #12
 800829a:	d85e      	bhi.n	800835a <HAL_UART_RegisterCallback+0xfa>
 800829c:	a201      	add	r2, pc, #4	@ (adr r2, 80082a4 <HAL_UART_RegisterCallback+0x44>)
 800829e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a2:	bf00      	nop
 80082a4:	080082d9 	.word	0x080082d9
 80082a8:	080082e3 	.word	0x080082e3
 80082ac:	080082ed 	.word	0x080082ed
 80082b0:	080082f7 	.word	0x080082f7
 80082b4:	08008301 	.word	0x08008301
 80082b8:	0800830b 	.word	0x0800830b
 80082bc:	08008315 	.word	0x08008315
 80082c0:	0800831f 	.word	0x0800831f
 80082c4:	08008329 	.word	0x08008329
 80082c8:	08008333 	.word	0x08008333
 80082cc:	0800833d 	.word	0x0800833d
 80082d0:	08008347 	.word	0x08008347
 80082d4:	08008351 	.word	0x08008351
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 80082e0:	e070      	b.n	80083c4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 80082ea:	e06b      	b.n	80083c4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 80082f4:	e066      	b.n	80083c4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	687a      	ldr	r2, [r7, #4]
 80082fa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 80082fe:	e061      	b.n	80083c4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8008308:	e05c      	b.n	80083c4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8008312:	e057      	b.n	80083c4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	687a      	ldr	r2, [r7, #4]
 8008318:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800831c:	e052      	b.n	80083c4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8008326:	e04d      	b.n	80083c4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	687a      	ldr	r2, [r7, #4]
 800832c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8008330:	e048      	b.n	80083c4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800833a:	e043      	b.n	80083c4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8008344:	e03e      	b.n	80083c4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800834e:	e039      	b.n	80083c4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008358:	e034      	b.n	80083c4 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008360:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800836a:	2301      	movs	r3, #1
 800836c:	75fb      	strb	r3, [r7, #23]
        break;
 800836e:	e029      	b.n	80083c4 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008376:	2b00      	cmp	r3, #0
 8008378:	d11a      	bne.n	80083b0 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800837a:	7afb      	ldrb	r3, [r7, #11]
 800837c:	2b0b      	cmp	r3, #11
 800837e:	d002      	beq.n	8008386 <HAL_UART_RegisterCallback+0x126>
 8008380:	2b0c      	cmp	r3, #12
 8008382:	d005      	beq.n	8008390 <HAL_UART_RegisterCallback+0x130>
 8008384:	e009      	b.n	800839a <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	687a      	ldr	r2, [r7, #4]
 800838a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800838e:	e019      	b.n	80083c4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008398:	e014      	b.n	80083c4 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083a0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 80083aa:	2301      	movs	r3, #1
 80083ac:	75fb      	strb	r3, [r7, #23]
        break;
 80083ae:	e009      	b.n	80083c4 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083b6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 80083c0:	2301      	movs	r3, #1
 80083c2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80083c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	371c      	adds	r7, #28
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr
 80083d2:	bf00      	nop

080083d4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b08a      	sub	sp, #40	@ 0x28
 80083d8:	af00      	add	r7, sp, #0
 80083da:	60f8      	str	r0, [r7, #12]
 80083dc:	60b9      	str	r1, [r7, #8]
 80083de:	4613      	mov	r3, r2
 80083e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80083e8:	2b20      	cmp	r3, #32
 80083ea:	d137      	bne.n	800845c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d002      	beq.n	80083f8 <HAL_UART_Receive_IT+0x24>
 80083f2:	88fb      	ldrh	r3, [r7, #6]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d101      	bne.n	80083fc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80083f8:	2301      	movs	r3, #1
 80083fa:	e030      	b.n	800845e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2200      	movs	r2, #0
 8008400:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a18      	ldr	r2, [pc, #96]	@ (8008468 <HAL_UART_Receive_IT+0x94>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d01f      	beq.n	800844c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008416:	2b00      	cmp	r3, #0
 8008418:	d018      	beq.n	800844c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	e853 3f00 	ldrex	r3, [r3]
 8008426:	613b      	str	r3, [r7, #16]
   return(result);
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800842e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	461a      	mov	r2, r3
 8008436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008438:	623b      	str	r3, [r7, #32]
 800843a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800843c:	69f9      	ldr	r1, [r7, #28]
 800843e:	6a3a      	ldr	r2, [r7, #32]
 8008440:	e841 2300 	strex	r3, r2, [r1]
 8008444:	61bb      	str	r3, [r7, #24]
   return(result);
 8008446:	69bb      	ldr	r3, [r7, #24]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d1e6      	bne.n	800841a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800844c:	88fb      	ldrh	r3, [r7, #6]
 800844e:	461a      	mov	r2, r3
 8008450:	68b9      	ldr	r1, [r7, #8]
 8008452:	68f8      	ldr	r0, [r7, #12]
 8008454:	f001 f9f8 	bl	8009848 <UART_Start_Receive_IT>
 8008458:	4603      	mov	r3, r0
 800845a:	e000      	b.n	800845e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800845c:	2302      	movs	r3, #2
  }
}
 800845e:	4618      	mov	r0, r3
 8008460:	3728      	adds	r7, #40	@ 0x28
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	40008000 	.word	0x40008000

0800846c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b08a      	sub	sp, #40	@ 0x28
 8008470:	af00      	add	r7, sp, #0
 8008472:	60f8      	str	r0, [r7, #12]
 8008474:	60b9      	str	r1, [r7, #8]
 8008476:	4613      	mov	r3, r2
 8008478:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008480:	2b20      	cmp	r3, #32
 8008482:	d167      	bne.n	8008554 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d002      	beq.n	8008490 <HAL_UART_Transmit_DMA+0x24>
 800848a:	88fb      	ldrh	r3, [r7, #6]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d101      	bne.n	8008494 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008490:	2301      	movs	r3, #1
 8008492:	e060      	b.n	8008556 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	68ba      	ldr	r2, [r7, #8]
 8008498:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	88fa      	ldrh	r2, [r7, #6]
 800849e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	88fa      	ldrh	r2, [r7, #6]
 80084a6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2200      	movs	r2, #0
 80084ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2221      	movs	r2, #33	@ 0x21
 80084b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d028      	beq.n	8008514 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80084c6:	4a26      	ldr	r2, [pc, #152]	@ (8008560 <HAL_UART_Transmit_DMA+0xf4>)
 80084c8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80084ce:	4a25      	ldr	r2, [pc, #148]	@ (8008564 <HAL_UART_Transmit_DMA+0xf8>)
 80084d0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80084d6:	4a24      	ldr	r2, [pc, #144]	@ (8008568 <HAL_UART_Transmit_DMA+0xfc>)
 80084d8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80084de:	2200      	movs	r2, #0
 80084e0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084ea:	4619      	mov	r1, r3
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	3328      	adds	r3, #40	@ 0x28
 80084f2:	461a      	mov	r2, r3
 80084f4:	88fb      	ldrh	r3, [r7, #6]
 80084f6:	f7fb fd4b 	bl	8003f90 <HAL_DMA_Start_IT>
 80084fa:	4603      	mov	r3, r0
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d009      	beq.n	8008514 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2210      	movs	r2, #16
 8008504:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2220      	movs	r2, #32
 800850c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8008510:	2301      	movs	r3, #1
 8008512:	e020      	b.n	8008556 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	2240      	movs	r2, #64	@ 0x40
 800851a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	3308      	adds	r3, #8
 8008522:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	e853 3f00 	ldrex	r3, [r3]
 800852a:	613b      	str	r3, [r7, #16]
   return(result);
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008532:	627b      	str	r3, [r7, #36]	@ 0x24
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	3308      	adds	r3, #8
 800853a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800853c:	623a      	str	r2, [r7, #32]
 800853e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008540:	69f9      	ldr	r1, [r7, #28]
 8008542:	6a3a      	ldr	r2, [r7, #32]
 8008544:	e841 2300 	strex	r3, r2, [r1]
 8008548:	61bb      	str	r3, [r7, #24]
   return(result);
 800854a:	69bb      	ldr	r3, [r7, #24]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d1e5      	bne.n	800851c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008550:	2300      	movs	r3, #0
 8008552:	e000      	b.n	8008556 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008554:	2302      	movs	r3, #2
  }
}
 8008556:	4618      	mov	r0, r3
 8008558:	3728      	adds	r7, #40	@ 0x28
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop
 8008560:	08009bdb 	.word	0x08009bdb
 8008564:	08009c79 	.word	0x08009c79
 8008568:	08009c99 	.word	0x08009c99

0800856c <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b09a      	sub	sp, #104	@ 0x68
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800857a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800857c:	e853 3f00 	ldrex	r3, [r3]
 8008580:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008582:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008584:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008588:	667b      	str	r3, [r7, #100]	@ 0x64
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	461a      	mov	r2, r3
 8008590:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008592:	657b      	str	r3, [r7, #84]	@ 0x54
 8008594:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008596:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008598:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800859a:	e841 2300 	strex	r3, r2, [r1]
 800859e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80085a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d1e6      	bne.n	8008574 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	3308      	adds	r3, #8
 80085ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085b0:	e853 3f00 	ldrex	r3, [r3]
 80085b4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80085b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80085bc:	f023 0301 	bic.w	r3, r3, #1
 80085c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	3308      	adds	r3, #8
 80085c8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80085ca:	643a      	str	r2, [r7, #64]	@ 0x40
 80085cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80085d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80085d2:	e841 2300 	strex	r3, r2, [r1]
 80085d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80085d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d1e3      	bne.n	80085a6 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085e2:	2b01      	cmp	r3, #1
 80085e4:	d118      	bne.n	8008618 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ec:	6a3b      	ldr	r3, [r7, #32]
 80085ee:	e853 3f00 	ldrex	r3, [r3]
 80085f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80085f4:	69fb      	ldr	r3, [r7, #28]
 80085f6:	f023 0310 	bic.w	r3, r3, #16
 80085fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	461a      	mov	r2, r3
 8008602:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008604:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008606:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008608:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800860a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800860c:	e841 2300 	strex	r3, r2, [r1]
 8008610:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008614:	2b00      	cmp	r3, #0
 8008616:	d1e6      	bne.n	80085e6 <HAL_UART_AbortReceive+0x7a>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	689b      	ldr	r3, [r3, #8]
 800861e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008622:	2b40      	cmp	r3, #64	@ 0x40
 8008624:	d13b      	bne.n	800869e <HAL_UART_AbortReceive+0x132>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	3308      	adds	r3, #8
 800862c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	e853 3f00 	ldrex	r3, [r3]
 8008634:	60bb      	str	r3, [r7, #8]
   return(result);
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800863c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	3308      	adds	r3, #8
 8008644:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008646:	61ba      	str	r2, [r7, #24]
 8008648:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800864a:	6979      	ldr	r1, [r7, #20]
 800864c:	69ba      	ldr	r2, [r7, #24]
 800864e:	e841 2300 	strex	r3, r2, [r1]
 8008652:	613b      	str	r3, [r7, #16]
   return(result);
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d1e5      	bne.n	8008626 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008660:	2b00      	cmp	r3, #0
 8008662:	d01c      	beq.n	800869e <HAL_UART_AbortReceive+0x132>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800866a:	2200      	movs	r2, #0
 800866c:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008674:	4618      	mov	r0, r3
 8008676:	f7fb fd06 	bl	8004086 <HAL_DMA_Abort>
 800867a:	4603      	mov	r3, r0
 800867c:	2b00      	cmp	r3, #0
 800867e:	d00e      	beq.n	800869e <HAL_UART_AbortReceive+0x132>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008686:	4618      	mov	r0, r3
 8008688:	f7fb fe6c 	bl	8004364 <HAL_DMA_GetError>
 800868c:	4603      	mov	r3, r0
 800868e:	2b20      	cmp	r3, #32
 8008690:	d105      	bne.n	800869e <HAL_UART_AbortReceive+0x132>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2210      	movs	r2, #16
 8008696:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800869a:	2303      	movs	r3, #3
 800869c:	e017      	b.n	80086ce <HAL_UART_AbortReceive+0x162>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	220f      	movs	r2, #15
 80086ac:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	699a      	ldr	r2, [r3, #24]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f042 0208 	orr.w	r2, r2, #8
 80086bc:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2220      	movs	r2, #32
 80086c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2200      	movs	r2, #0
 80086ca:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 80086cc:	2300      	movs	r3, #0
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3768      	adds	r7, #104	@ 0x68
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}
	...

080086d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b0ba      	sub	sp, #232	@ 0xe8
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	69db      	ldr	r3, [r3, #28]
 80086e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	689b      	ldr	r3, [r3, #8]
 80086fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80086fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008702:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008706:	4013      	ands	r3, r2
 8008708:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800870c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008710:	2b00      	cmp	r3, #0
 8008712:	d11b      	bne.n	800874c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008718:	f003 0320 	and.w	r3, r3, #32
 800871c:	2b00      	cmp	r3, #0
 800871e:	d015      	beq.n	800874c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008724:	f003 0320 	and.w	r3, r3, #32
 8008728:	2b00      	cmp	r3, #0
 800872a:	d105      	bne.n	8008738 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800872c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008730:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008734:	2b00      	cmp	r3, #0
 8008736:	d009      	beq.n	800874c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800873c:	2b00      	cmp	r3, #0
 800873e:	f000 8312 	beq.w	8008d66 <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	4798      	blx	r3
      }
      return;
 800874a:	e30c      	b.n	8008d66 <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800874c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008750:	2b00      	cmp	r3, #0
 8008752:	f000 8129 	beq.w	80089a8 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008756:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800875a:	4b90      	ldr	r3, [pc, #576]	@ (800899c <HAL_UART_IRQHandler+0x2c4>)
 800875c:	4013      	ands	r3, r2
 800875e:	2b00      	cmp	r3, #0
 8008760:	d106      	bne.n	8008770 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008762:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008766:	4b8e      	ldr	r3, [pc, #568]	@ (80089a0 <HAL_UART_IRQHandler+0x2c8>)
 8008768:	4013      	ands	r3, r2
 800876a:	2b00      	cmp	r3, #0
 800876c:	f000 811c 	beq.w	80089a8 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008774:	f003 0301 	and.w	r3, r3, #1
 8008778:	2b00      	cmp	r3, #0
 800877a:	d011      	beq.n	80087a0 <HAL_UART_IRQHandler+0xc8>
 800877c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008780:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008784:	2b00      	cmp	r3, #0
 8008786:	d00b      	beq.n	80087a0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	2201      	movs	r2, #1
 800878e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008796:	f043 0201 	orr.w	r2, r3, #1
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80087a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087a4:	f003 0302 	and.w	r3, r3, #2
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d011      	beq.n	80087d0 <HAL_UART_IRQHandler+0xf8>
 80087ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80087b0:	f003 0301 	and.w	r3, r3, #1
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d00b      	beq.n	80087d0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	2202      	movs	r2, #2
 80087be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087c6:	f043 0204 	orr.w	r2, r3, #4
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80087d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087d4:	f003 0304 	and.w	r3, r3, #4
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d011      	beq.n	8008800 <HAL_UART_IRQHandler+0x128>
 80087dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80087e0:	f003 0301 	and.w	r3, r3, #1
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d00b      	beq.n	8008800 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	2204      	movs	r2, #4
 80087ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087f6:	f043 0202 	orr.w	r2, r3, #2
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008804:	f003 0308 	and.w	r3, r3, #8
 8008808:	2b00      	cmp	r3, #0
 800880a:	d017      	beq.n	800883c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800880c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008810:	f003 0320 	and.w	r3, r3, #32
 8008814:	2b00      	cmp	r3, #0
 8008816:	d105      	bne.n	8008824 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008818:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800881c:	4b5f      	ldr	r3, [pc, #380]	@ (800899c <HAL_UART_IRQHandler+0x2c4>)
 800881e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008820:	2b00      	cmp	r3, #0
 8008822:	d00b      	beq.n	800883c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	2208      	movs	r2, #8
 800882a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008832:	f043 0208 	orr.w	r2, r3, #8
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800883c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008840:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008844:	2b00      	cmp	r3, #0
 8008846:	d012      	beq.n	800886e <HAL_UART_IRQHandler+0x196>
 8008848:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800884c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008850:	2b00      	cmp	r3, #0
 8008852:	d00c      	beq.n	800886e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800885c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008864:	f043 0220 	orr.w	r2, r3, #32
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008874:	2b00      	cmp	r3, #0
 8008876:	f000 8278 	beq.w	8008d6a <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800887a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800887e:	f003 0320 	and.w	r3, r3, #32
 8008882:	2b00      	cmp	r3, #0
 8008884:	d013      	beq.n	80088ae <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008886:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800888a:	f003 0320 	and.w	r3, r3, #32
 800888e:	2b00      	cmp	r3, #0
 8008890:	d105      	bne.n	800889e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008892:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008896:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800889a:	2b00      	cmp	r3, #0
 800889c:	d007      	beq.n	80088ae <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d003      	beq.n	80088ae <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088b4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	689b      	ldr	r3, [r3, #8]
 80088be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088c2:	2b40      	cmp	r3, #64	@ 0x40
 80088c4:	d005      	beq.n	80088d2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80088c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80088ca:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d058      	beq.n	8008984 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f001 f91b 	bl	8009b0e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088e2:	2b40      	cmp	r3, #64	@ 0x40
 80088e4:	d148      	bne.n	8008978 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	3308      	adds	r3, #8
 80088ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80088f4:	e853 3f00 	ldrex	r3, [r3]
 80088f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80088fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008900:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008904:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	3308      	adds	r3, #8
 800890e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008912:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008916:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800891a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800891e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008922:	e841 2300 	strex	r3, r2, [r1]
 8008926:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800892a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800892e:	2b00      	cmp	r3, #0
 8008930:	d1d9      	bne.n	80088e6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008938:	2b00      	cmp	r3, #0
 800893a:	d017      	beq.n	800896c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008942:	4a18      	ldr	r2, [pc, #96]	@ (80089a4 <HAL_UART_IRQHandler+0x2cc>)
 8008944:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800894c:	4618      	mov	r0, r3
 800894e:	f7fb fbf3 	bl	8004138 <HAL_DMA_Abort_IT>
 8008952:	4603      	mov	r3, r0
 8008954:	2b00      	cmp	r3, #0
 8008956:	d01f      	beq.n	8008998 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800895e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008966:	4610      	mov	r0, r2
 8008968:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800896a:	e015      	b.n	8008998 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008976:	e00f      	b.n	8008998 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008982:	e009      	b.n	8008998 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2200      	movs	r2, #0
 8008992:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008996:	e1e8      	b.n	8008d6a <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008998:	bf00      	nop
    return;
 800899a:	e1e6      	b.n	8008d6a <HAL_UART_IRQHandler+0x692>
 800899c:	10000001 	.word	0x10000001
 80089a0:	04000120 	.word	0x04000120
 80089a4:	08009d1d 	.word	0x08009d1d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	f040 8176 	bne.w	8008c9e <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80089b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089b6:	f003 0310 	and.w	r3, r3, #16
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	f000 816f 	beq.w	8008c9e <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80089c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089c4:	f003 0310 	and.w	r3, r3, #16
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	f000 8168 	beq.w	8008c9e <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	2210      	movs	r2, #16
 80089d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	689b      	ldr	r3, [r3, #8]
 80089dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089e0:	2b40      	cmp	r3, #64	@ 0x40
 80089e2:	f040 80dc 	bne.w	8008b9e <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80089f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	f000 80b1 	beq.w	8008b60 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008a04:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	f080 80a9 	bcs.w	8008b60 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008a14:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f003 0320 	and.w	r3, r3, #32
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	f040 8087 	bne.w	8008b3a <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a34:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008a38:	e853 3f00 	ldrex	r3, [r3]
 8008a3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008a40:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008a44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a48:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	461a      	mov	r2, r3
 8008a52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008a56:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008a5a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a5e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008a62:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008a66:	e841 2300 	strex	r3, r2, [r1]
 8008a6a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008a6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d1da      	bne.n	8008a2c <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	3308      	adds	r3, #8
 8008a7c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008a80:	e853 3f00 	ldrex	r3, [r3]
 8008a84:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008a86:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008a88:	f023 0301 	bic.w	r3, r3, #1
 8008a8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	3308      	adds	r3, #8
 8008a96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008a9a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008a9e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008aa2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008aa6:	e841 2300 	strex	r3, r2, [r1]
 8008aaa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008aac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d1e1      	bne.n	8008a76 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	3308      	adds	r3, #8
 8008ab8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008abc:	e853 3f00 	ldrex	r3, [r3]
 8008ac0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008ac2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008ac4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ac8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	3308      	adds	r3, #8
 8008ad2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008ad6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008ad8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ada:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008adc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008ade:	e841 2300 	strex	r3, r2, [r1]
 8008ae2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008ae4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d1e3      	bne.n	8008ab2 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2220      	movs	r2, #32
 8008aee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2200      	movs	r2, #0
 8008af6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008afe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b00:	e853 3f00 	ldrex	r3, [r3]
 8008b04:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008b06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b08:	f023 0310 	bic.w	r3, r3, #16
 8008b0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	461a      	mov	r2, r3
 8008b16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b1a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008b1c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b1e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008b20:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008b22:	e841 2300 	strex	r3, r2, [r1]
 8008b26:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008b28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d1e4      	bne.n	8008af8 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b34:	4618      	mov	r0, r3
 8008b36:	f7fb faa6 	bl	8004086 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2202      	movs	r2, #2
 8008b3e:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008b46:	687a      	ldr	r2, [r7, #4]
 8008b48:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8008b4c:	687a      	ldr	r2, [r7, #4]
 8008b4e:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8008b52:	b292      	uxth	r2, r2
 8008b54:	1a8a      	subs	r2, r1, r2
 8008b56:	b292      	uxth	r2, r2
 8008b58:	4611      	mov	r1, r2
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008b5e:	e106      	b.n	8008d6e <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008b66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	f040 80ff 	bne.w	8008d6e <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f003 0320 	and.w	r3, r3, #32
 8008b7e:	2b20      	cmp	r3, #32
 8008b80:	f040 80f5 	bne.w	8008d6e <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2202      	movs	r2, #2
 8008b88:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008b90:	687a      	ldr	r2, [r7, #4]
 8008b92:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8008b96:	4611      	mov	r1, r2
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	4798      	blx	r3
      return;
 8008b9c:	e0e7      	b.n	8008d6e <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	1ad3      	subs	r3, r2, r3
 8008bae:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	f000 80d9 	beq.w	8008d72 <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 8008bc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	f000 80d4 	beq.w	8008d72 <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bd2:	e853 3f00 	ldrex	r3, [r3]
 8008bd6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008bd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bda:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008bde:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	461a      	mov	r2, r3
 8008be8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008bec:	647b      	str	r3, [r7, #68]	@ 0x44
 8008bee:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bf0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008bf2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008bf4:	e841 2300 	strex	r3, r2, [r1]
 8008bf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008bfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d1e4      	bne.n	8008bca <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	3308      	adds	r3, #8
 8008c06:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c0a:	e853 3f00 	ldrex	r3, [r3]
 8008c0e:	623b      	str	r3, [r7, #32]
   return(result);
 8008c10:	6a3b      	ldr	r3, [r7, #32]
 8008c12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008c16:	f023 0301 	bic.w	r3, r3, #1
 8008c1a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	3308      	adds	r3, #8
 8008c24:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008c28:	633a      	str	r2, [r7, #48]	@ 0x30
 8008c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c2c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c30:	e841 2300 	strex	r3, r2, [r1]
 8008c34:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d1e1      	bne.n	8008c00 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2220      	movs	r2, #32
 8008c40:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2200      	movs	r2, #0
 8008c48:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	e853 3f00 	ldrex	r3, [r3]
 8008c5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	f023 0310 	bic.w	r3, r3, #16
 8008c64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008c72:	61fb      	str	r3, [r7, #28]
 8008c74:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c76:	69b9      	ldr	r1, [r7, #24]
 8008c78:	69fa      	ldr	r2, [r7, #28]
 8008c7a:	e841 2300 	strex	r3, r2, [r1]
 8008c7e:	617b      	str	r3, [r7, #20]
   return(result);
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d1e4      	bne.n	8008c50 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2202      	movs	r2, #2
 8008c8a:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008c92:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8008c96:	4611      	mov	r1, r2
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008c9c:	e069      	b.n	8008d72 <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ca2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d010      	beq.n	8008ccc <HAL_UART_IRQHandler+0x5f4>
 8008caa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008cae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d00a      	beq.n	8008ccc <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008cbe:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008cca:	e055      	b.n	8008d78 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008ccc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d014      	beq.n	8008d02 <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008cd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008cdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d105      	bne.n	8008cf0 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008ce4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ce8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d008      	beq.n	8008d02 <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d03e      	beq.n	8008d76 <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	4798      	blx	r3
    }
    return;
 8008d00:	e039      	b.n	8008d76 <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d009      	beq.n	8008d22 <HAL_UART_IRQHandler+0x64a>
 8008d0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d003      	beq.n	8008d22 <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f001 f812 	bl	8009d44 <UART_EndTransmit_IT>
    return;
 8008d20:	e02a      	b.n	8008d78 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d00b      	beq.n	8008d46 <HAL_UART_IRQHandler+0x66e>
 8008d2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d32:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d005      	beq.n	8008d46 <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008d44:	e018      	b.n	8008d78 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d4a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d012      	beq.n	8008d78 <HAL_UART_IRQHandler+0x6a0>
 8008d52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	da0e      	bge.n	8008d78 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008d64:	e008      	b.n	8008d78 <HAL_UART_IRQHandler+0x6a0>
      return;
 8008d66:	bf00      	nop
 8008d68:	e006      	b.n	8008d78 <HAL_UART_IRQHandler+0x6a0>
    return;
 8008d6a:	bf00      	nop
 8008d6c:	e004      	b.n	8008d78 <HAL_UART_IRQHandler+0x6a0>
      return;
 8008d6e:	bf00      	nop
 8008d70:	e002      	b.n	8008d78 <HAL_UART_IRQHandler+0x6a0>
      return;
 8008d72:	bf00      	nop
 8008d74:	e000      	b.n	8008d78 <HAL_UART_IRQHandler+0x6a0>
    return;
 8008d76:	bf00      	nop
  }
}
 8008d78:	37e8      	adds	r7, #232	@ 0xe8
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
 8008d7e:	bf00      	nop

08008d80 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b083      	sub	sp, #12
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008d88:	bf00      	nop
 8008d8a:	370c      	adds	r7, #12
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr

08008d94 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008d9c:	bf00      	nop
 8008d9e:	370c      	adds	r7, #12
 8008da0:	46bd      	mov	sp, r7
 8008da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da6:	4770      	bx	lr

08008da8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b083      	sub	sp, #12
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008db0:	bf00      	nop
 8008db2:	370c      	adds	r7, #12
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr

08008dbc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b083      	sub	sp, #12
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008dc4:	bf00      	nop
 8008dc6:	370c      	adds	r7, #12
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr

08008dd0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b083      	sub	sp, #12
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008dd8:	bf00      	nop
 8008dda:	370c      	adds	r7, #12
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr

08008de4 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b083      	sub	sp, #12
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8008dec:	bf00      	nop
 8008dee:	370c      	adds	r7, #12
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr

08008df8 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b083      	sub	sp, #12
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8008e00:	bf00      	nop
 8008e02:	370c      	adds	r7, #12
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr

08008e0c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b083      	sub	sp, #12
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8008e14:	bf00      	nop
 8008e16:	370c      	adds	r7, #12
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr

08008e20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b083      	sub	sp, #12
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	460b      	mov	r3, r1
 8008e2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008e2c:	bf00      	nop
 8008e2e:	370c      	adds	r7, #12
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr

08008e38 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b083      	sub	sp, #12
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	4a1a      	ldr	r2, [pc, #104]	@ (8008eac <UART_InitCallbacksToDefault+0x74>)
 8008e44:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	4a19      	ldr	r2, [pc, #100]	@ (8008eb0 <UART_InitCallbacksToDefault+0x78>)
 8008e4c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	4a18      	ldr	r2, [pc, #96]	@ (8008eb4 <UART_InitCallbacksToDefault+0x7c>)
 8008e54:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	4a17      	ldr	r2, [pc, #92]	@ (8008eb8 <UART_InitCallbacksToDefault+0x80>)
 8008e5c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	4a16      	ldr	r2, [pc, #88]	@ (8008ebc <UART_InitCallbacksToDefault+0x84>)
 8008e64:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	4a15      	ldr	r2, [pc, #84]	@ (8008ec0 <UART_InitCallbacksToDefault+0x88>)
 8008e6c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	4a14      	ldr	r2, [pc, #80]	@ (8008ec4 <UART_InitCallbacksToDefault+0x8c>)
 8008e74:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	4a13      	ldr	r2, [pc, #76]	@ (8008ec8 <UART_InitCallbacksToDefault+0x90>)
 8008e7c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	4a12      	ldr	r2, [pc, #72]	@ (8008ecc <UART_InitCallbacksToDefault+0x94>)
 8008e84:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	4a11      	ldr	r2, [pc, #68]	@ (8008ed0 <UART_InitCallbacksToDefault+0x98>)
 8008e8c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	4a10      	ldr	r2, [pc, #64]	@ (8008ed4 <UART_InitCallbacksToDefault+0x9c>)
 8008e94:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	4a0f      	ldr	r2, [pc, #60]	@ (8008ed8 <UART_InitCallbacksToDefault+0xa0>)
 8008e9c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8008ea0:	bf00      	nop
 8008ea2:	370c      	adds	r7, #12
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr
 8008eac:	08008d95 	.word	0x08008d95
 8008eb0:	08008d81 	.word	0x08008d81
 8008eb4:	08008dbd 	.word	0x08008dbd
 8008eb8:	08008da9 	.word	0x08008da9
 8008ebc:	08008dd1 	.word	0x08008dd1
 8008ec0:	08008de5 	.word	0x08008de5
 8008ec4:	08008df9 	.word	0x08008df9
 8008ec8:	08008e0d 	.word	0x08008e0d
 8008ecc:	0800a809 	.word	0x0800a809
 8008ed0:	0800a81d 	.word	0x0800a81d
 8008ed4:	0800a831 	.word	0x0800a831
 8008ed8:	08008e21 	.word	0x08008e21

08008edc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008edc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ee0:	b08c      	sub	sp, #48	@ 0x30
 8008ee2:	af00      	add	r7, sp, #0
 8008ee4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	689a      	ldr	r2, [r3, #8]
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	691b      	ldr	r3, [r3, #16]
 8008ef4:	431a      	orrs	r2, r3
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	695b      	ldr	r3, [r3, #20]
 8008efa:	431a      	orrs	r2, r3
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	69db      	ldr	r3, [r3, #28]
 8008f00:	4313      	orrs	r3, r2
 8008f02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	681a      	ldr	r2, [r3, #0]
 8008f0a:	4baa      	ldr	r3, [pc, #680]	@ (80091b4 <UART_SetConfig+0x2d8>)
 8008f0c:	4013      	ands	r3, r2
 8008f0e:	697a      	ldr	r2, [r7, #20]
 8008f10:	6812      	ldr	r2, [r2, #0]
 8008f12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008f14:	430b      	orrs	r3, r1
 8008f16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	68da      	ldr	r2, [r3, #12]
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	430a      	orrs	r2, r1
 8008f2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	699b      	ldr	r3, [r3, #24]
 8008f32:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a9f      	ldr	r2, [pc, #636]	@ (80091b8 <UART_SetConfig+0x2dc>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d004      	beq.n	8008f48 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	6a1b      	ldr	r3, [r3, #32]
 8008f42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f44:	4313      	orrs	r3, r2
 8008f46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	689b      	ldr	r3, [r3, #8]
 8008f4e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008f52:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008f56:	697a      	ldr	r2, [r7, #20]
 8008f58:	6812      	ldr	r2, [r2, #0]
 8008f5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008f5c:	430b      	orrs	r3, r1
 8008f5e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f66:	f023 010f 	bic.w	r1, r3, #15
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	430a      	orrs	r2, r1
 8008f74:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a90      	ldr	r2, [pc, #576]	@ (80091bc <UART_SetConfig+0x2e0>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d125      	bne.n	8008fcc <UART_SetConfig+0xf0>
 8008f80:	4b8f      	ldr	r3, [pc, #572]	@ (80091c0 <UART_SetConfig+0x2e4>)
 8008f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f86:	f003 0303 	and.w	r3, r3, #3
 8008f8a:	2b03      	cmp	r3, #3
 8008f8c:	d81a      	bhi.n	8008fc4 <UART_SetConfig+0xe8>
 8008f8e:	a201      	add	r2, pc, #4	@ (adr r2, 8008f94 <UART_SetConfig+0xb8>)
 8008f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f94:	08008fa5 	.word	0x08008fa5
 8008f98:	08008fb5 	.word	0x08008fb5
 8008f9c:	08008fad 	.word	0x08008fad
 8008fa0:	08008fbd 	.word	0x08008fbd
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008faa:	e116      	b.n	80091da <UART_SetConfig+0x2fe>
 8008fac:	2302      	movs	r3, #2
 8008fae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fb2:	e112      	b.n	80091da <UART_SetConfig+0x2fe>
 8008fb4:	2304      	movs	r3, #4
 8008fb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fba:	e10e      	b.n	80091da <UART_SetConfig+0x2fe>
 8008fbc:	2308      	movs	r3, #8
 8008fbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fc2:	e10a      	b.n	80091da <UART_SetConfig+0x2fe>
 8008fc4:	2310      	movs	r3, #16
 8008fc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fca:	e106      	b.n	80091da <UART_SetConfig+0x2fe>
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	4a7c      	ldr	r2, [pc, #496]	@ (80091c4 <UART_SetConfig+0x2e8>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d138      	bne.n	8009048 <UART_SetConfig+0x16c>
 8008fd6:	4b7a      	ldr	r3, [pc, #488]	@ (80091c0 <UART_SetConfig+0x2e4>)
 8008fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008fdc:	f003 030c 	and.w	r3, r3, #12
 8008fe0:	2b0c      	cmp	r3, #12
 8008fe2:	d82d      	bhi.n	8009040 <UART_SetConfig+0x164>
 8008fe4:	a201      	add	r2, pc, #4	@ (adr r2, 8008fec <UART_SetConfig+0x110>)
 8008fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fea:	bf00      	nop
 8008fec:	08009021 	.word	0x08009021
 8008ff0:	08009041 	.word	0x08009041
 8008ff4:	08009041 	.word	0x08009041
 8008ff8:	08009041 	.word	0x08009041
 8008ffc:	08009031 	.word	0x08009031
 8009000:	08009041 	.word	0x08009041
 8009004:	08009041 	.word	0x08009041
 8009008:	08009041 	.word	0x08009041
 800900c:	08009029 	.word	0x08009029
 8009010:	08009041 	.word	0x08009041
 8009014:	08009041 	.word	0x08009041
 8009018:	08009041 	.word	0x08009041
 800901c:	08009039 	.word	0x08009039
 8009020:	2300      	movs	r3, #0
 8009022:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009026:	e0d8      	b.n	80091da <UART_SetConfig+0x2fe>
 8009028:	2302      	movs	r3, #2
 800902a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800902e:	e0d4      	b.n	80091da <UART_SetConfig+0x2fe>
 8009030:	2304      	movs	r3, #4
 8009032:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009036:	e0d0      	b.n	80091da <UART_SetConfig+0x2fe>
 8009038:	2308      	movs	r3, #8
 800903a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800903e:	e0cc      	b.n	80091da <UART_SetConfig+0x2fe>
 8009040:	2310      	movs	r3, #16
 8009042:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009046:	e0c8      	b.n	80091da <UART_SetConfig+0x2fe>
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a5e      	ldr	r2, [pc, #376]	@ (80091c8 <UART_SetConfig+0x2ec>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d125      	bne.n	800909e <UART_SetConfig+0x1c2>
 8009052:	4b5b      	ldr	r3, [pc, #364]	@ (80091c0 <UART_SetConfig+0x2e4>)
 8009054:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009058:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800905c:	2b30      	cmp	r3, #48	@ 0x30
 800905e:	d016      	beq.n	800908e <UART_SetConfig+0x1b2>
 8009060:	2b30      	cmp	r3, #48	@ 0x30
 8009062:	d818      	bhi.n	8009096 <UART_SetConfig+0x1ba>
 8009064:	2b20      	cmp	r3, #32
 8009066:	d00a      	beq.n	800907e <UART_SetConfig+0x1a2>
 8009068:	2b20      	cmp	r3, #32
 800906a:	d814      	bhi.n	8009096 <UART_SetConfig+0x1ba>
 800906c:	2b00      	cmp	r3, #0
 800906e:	d002      	beq.n	8009076 <UART_SetConfig+0x19a>
 8009070:	2b10      	cmp	r3, #16
 8009072:	d008      	beq.n	8009086 <UART_SetConfig+0x1aa>
 8009074:	e00f      	b.n	8009096 <UART_SetConfig+0x1ba>
 8009076:	2300      	movs	r3, #0
 8009078:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800907c:	e0ad      	b.n	80091da <UART_SetConfig+0x2fe>
 800907e:	2302      	movs	r3, #2
 8009080:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009084:	e0a9      	b.n	80091da <UART_SetConfig+0x2fe>
 8009086:	2304      	movs	r3, #4
 8009088:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800908c:	e0a5      	b.n	80091da <UART_SetConfig+0x2fe>
 800908e:	2308      	movs	r3, #8
 8009090:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009094:	e0a1      	b.n	80091da <UART_SetConfig+0x2fe>
 8009096:	2310      	movs	r3, #16
 8009098:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800909c:	e09d      	b.n	80091da <UART_SetConfig+0x2fe>
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	4a4a      	ldr	r2, [pc, #296]	@ (80091cc <UART_SetConfig+0x2f0>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d125      	bne.n	80090f4 <UART_SetConfig+0x218>
 80090a8:	4b45      	ldr	r3, [pc, #276]	@ (80091c0 <UART_SetConfig+0x2e4>)
 80090aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090ae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80090b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80090b4:	d016      	beq.n	80090e4 <UART_SetConfig+0x208>
 80090b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80090b8:	d818      	bhi.n	80090ec <UART_SetConfig+0x210>
 80090ba:	2b80      	cmp	r3, #128	@ 0x80
 80090bc:	d00a      	beq.n	80090d4 <UART_SetConfig+0x1f8>
 80090be:	2b80      	cmp	r3, #128	@ 0x80
 80090c0:	d814      	bhi.n	80090ec <UART_SetConfig+0x210>
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d002      	beq.n	80090cc <UART_SetConfig+0x1f0>
 80090c6:	2b40      	cmp	r3, #64	@ 0x40
 80090c8:	d008      	beq.n	80090dc <UART_SetConfig+0x200>
 80090ca:	e00f      	b.n	80090ec <UART_SetConfig+0x210>
 80090cc:	2300      	movs	r3, #0
 80090ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090d2:	e082      	b.n	80091da <UART_SetConfig+0x2fe>
 80090d4:	2302      	movs	r3, #2
 80090d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090da:	e07e      	b.n	80091da <UART_SetConfig+0x2fe>
 80090dc:	2304      	movs	r3, #4
 80090de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090e2:	e07a      	b.n	80091da <UART_SetConfig+0x2fe>
 80090e4:	2308      	movs	r3, #8
 80090e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090ea:	e076      	b.n	80091da <UART_SetConfig+0x2fe>
 80090ec:	2310      	movs	r3, #16
 80090ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090f2:	e072      	b.n	80091da <UART_SetConfig+0x2fe>
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4a35      	ldr	r2, [pc, #212]	@ (80091d0 <UART_SetConfig+0x2f4>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d12a      	bne.n	8009154 <UART_SetConfig+0x278>
 80090fe:	4b30      	ldr	r3, [pc, #192]	@ (80091c0 <UART_SetConfig+0x2e4>)
 8009100:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009104:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009108:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800910c:	d01a      	beq.n	8009144 <UART_SetConfig+0x268>
 800910e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009112:	d81b      	bhi.n	800914c <UART_SetConfig+0x270>
 8009114:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009118:	d00c      	beq.n	8009134 <UART_SetConfig+0x258>
 800911a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800911e:	d815      	bhi.n	800914c <UART_SetConfig+0x270>
 8009120:	2b00      	cmp	r3, #0
 8009122:	d003      	beq.n	800912c <UART_SetConfig+0x250>
 8009124:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009128:	d008      	beq.n	800913c <UART_SetConfig+0x260>
 800912a:	e00f      	b.n	800914c <UART_SetConfig+0x270>
 800912c:	2300      	movs	r3, #0
 800912e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009132:	e052      	b.n	80091da <UART_SetConfig+0x2fe>
 8009134:	2302      	movs	r3, #2
 8009136:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800913a:	e04e      	b.n	80091da <UART_SetConfig+0x2fe>
 800913c:	2304      	movs	r3, #4
 800913e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009142:	e04a      	b.n	80091da <UART_SetConfig+0x2fe>
 8009144:	2308      	movs	r3, #8
 8009146:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800914a:	e046      	b.n	80091da <UART_SetConfig+0x2fe>
 800914c:	2310      	movs	r3, #16
 800914e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009152:	e042      	b.n	80091da <UART_SetConfig+0x2fe>
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4a17      	ldr	r2, [pc, #92]	@ (80091b8 <UART_SetConfig+0x2dc>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d13a      	bne.n	80091d4 <UART_SetConfig+0x2f8>
 800915e:	4b18      	ldr	r3, [pc, #96]	@ (80091c0 <UART_SetConfig+0x2e4>)
 8009160:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009164:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009168:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800916c:	d01a      	beq.n	80091a4 <UART_SetConfig+0x2c8>
 800916e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009172:	d81b      	bhi.n	80091ac <UART_SetConfig+0x2d0>
 8009174:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009178:	d00c      	beq.n	8009194 <UART_SetConfig+0x2b8>
 800917a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800917e:	d815      	bhi.n	80091ac <UART_SetConfig+0x2d0>
 8009180:	2b00      	cmp	r3, #0
 8009182:	d003      	beq.n	800918c <UART_SetConfig+0x2b0>
 8009184:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009188:	d008      	beq.n	800919c <UART_SetConfig+0x2c0>
 800918a:	e00f      	b.n	80091ac <UART_SetConfig+0x2d0>
 800918c:	2300      	movs	r3, #0
 800918e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009192:	e022      	b.n	80091da <UART_SetConfig+0x2fe>
 8009194:	2302      	movs	r3, #2
 8009196:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800919a:	e01e      	b.n	80091da <UART_SetConfig+0x2fe>
 800919c:	2304      	movs	r3, #4
 800919e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80091a2:	e01a      	b.n	80091da <UART_SetConfig+0x2fe>
 80091a4:	2308      	movs	r3, #8
 80091a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80091aa:	e016      	b.n	80091da <UART_SetConfig+0x2fe>
 80091ac:	2310      	movs	r3, #16
 80091ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80091b2:	e012      	b.n	80091da <UART_SetConfig+0x2fe>
 80091b4:	cfff69f3 	.word	0xcfff69f3
 80091b8:	40008000 	.word	0x40008000
 80091bc:	40013800 	.word	0x40013800
 80091c0:	40021000 	.word	0x40021000
 80091c4:	40004400 	.word	0x40004400
 80091c8:	40004800 	.word	0x40004800
 80091cc:	40004c00 	.word	0x40004c00
 80091d0:	40005000 	.word	0x40005000
 80091d4:	2310      	movs	r3, #16
 80091d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4aae      	ldr	r2, [pc, #696]	@ (8009498 <UART_SetConfig+0x5bc>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	f040 8097 	bne.w	8009314 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80091e6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80091ea:	2b08      	cmp	r3, #8
 80091ec:	d823      	bhi.n	8009236 <UART_SetConfig+0x35a>
 80091ee:	a201      	add	r2, pc, #4	@ (adr r2, 80091f4 <UART_SetConfig+0x318>)
 80091f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091f4:	08009219 	.word	0x08009219
 80091f8:	08009237 	.word	0x08009237
 80091fc:	08009221 	.word	0x08009221
 8009200:	08009237 	.word	0x08009237
 8009204:	08009227 	.word	0x08009227
 8009208:	08009237 	.word	0x08009237
 800920c:	08009237 	.word	0x08009237
 8009210:	08009237 	.word	0x08009237
 8009214:	0800922f 	.word	0x0800922f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009218:	f7fc f872 	bl	8005300 <HAL_RCC_GetPCLK1Freq>
 800921c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800921e:	e010      	b.n	8009242 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009220:	4b9e      	ldr	r3, [pc, #632]	@ (800949c <UART_SetConfig+0x5c0>)
 8009222:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009224:	e00d      	b.n	8009242 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009226:	f7fb fffd 	bl	8005224 <HAL_RCC_GetSysClockFreq>
 800922a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800922c:	e009      	b.n	8009242 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800922e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009232:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009234:	e005      	b.n	8009242 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8009236:	2300      	movs	r3, #0
 8009238:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800923a:	2301      	movs	r3, #1
 800923c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009240:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009244:	2b00      	cmp	r3, #0
 8009246:	f000 8130 	beq.w	80094aa <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800924e:	4a94      	ldr	r2, [pc, #592]	@ (80094a0 <UART_SetConfig+0x5c4>)
 8009250:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009254:	461a      	mov	r2, r3
 8009256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009258:	fbb3 f3f2 	udiv	r3, r3, r2
 800925c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	685a      	ldr	r2, [r3, #4]
 8009262:	4613      	mov	r3, r2
 8009264:	005b      	lsls	r3, r3, #1
 8009266:	4413      	add	r3, r2
 8009268:	69ba      	ldr	r2, [r7, #24]
 800926a:	429a      	cmp	r2, r3
 800926c:	d305      	bcc.n	800927a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009274:	69ba      	ldr	r2, [r7, #24]
 8009276:	429a      	cmp	r2, r3
 8009278:	d903      	bls.n	8009282 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800927a:	2301      	movs	r3, #1
 800927c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009280:	e113      	b.n	80094aa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009284:	2200      	movs	r2, #0
 8009286:	60bb      	str	r3, [r7, #8]
 8009288:	60fa      	str	r2, [r7, #12]
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800928e:	4a84      	ldr	r2, [pc, #528]	@ (80094a0 <UART_SetConfig+0x5c4>)
 8009290:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009294:	b29b      	uxth	r3, r3
 8009296:	2200      	movs	r2, #0
 8009298:	603b      	str	r3, [r7, #0]
 800929a:	607a      	str	r2, [r7, #4]
 800929c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80092a4:	f7f6 ffb8 	bl	8000218 <__aeabi_uldivmod>
 80092a8:	4602      	mov	r2, r0
 80092aa:	460b      	mov	r3, r1
 80092ac:	4610      	mov	r0, r2
 80092ae:	4619      	mov	r1, r3
 80092b0:	f04f 0200 	mov.w	r2, #0
 80092b4:	f04f 0300 	mov.w	r3, #0
 80092b8:	020b      	lsls	r3, r1, #8
 80092ba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80092be:	0202      	lsls	r2, r0, #8
 80092c0:	6979      	ldr	r1, [r7, #20]
 80092c2:	6849      	ldr	r1, [r1, #4]
 80092c4:	0849      	lsrs	r1, r1, #1
 80092c6:	2000      	movs	r0, #0
 80092c8:	460c      	mov	r4, r1
 80092ca:	4605      	mov	r5, r0
 80092cc:	eb12 0804 	adds.w	r8, r2, r4
 80092d0:	eb43 0905 	adc.w	r9, r3, r5
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	2200      	movs	r2, #0
 80092da:	469a      	mov	sl, r3
 80092dc:	4693      	mov	fp, r2
 80092de:	4652      	mov	r2, sl
 80092e0:	465b      	mov	r3, fp
 80092e2:	4640      	mov	r0, r8
 80092e4:	4649      	mov	r1, r9
 80092e6:	f7f6 ff97 	bl	8000218 <__aeabi_uldivmod>
 80092ea:	4602      	mov	r2, r0
 80092ec:	460b      	mov	r3, r1
 80092ee:	4613      	mov	r3, r2
 80092f0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80092f2:	6a3b      	ldr	r3, [r7, #32]
 80092f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80092f8:	d308      	bcc.n	800930c <UART_SetConfig+0x430>
 80092fa:	6a3b      	ldr	r3, [r7, #32]
 80092fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009300:	d204      	bcs.n	800930c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	6a3a      	ldr	r2, [r7, #32]
 8009308:	60da      	str	r2, [r3, #12]
 800930a:	e0ce      	b.n	80094aa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800930c:	2301      	movs	r3, #1
 800930e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009312:	e0ca      	b.n	80094aa <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	69db      	ldr	r3, [r3, #28]
 8009318:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800931c:	d166      	bne.n	80093ec <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800931e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009322:	2b08      	cmp	r3, #8
 8009324:	d827      	bhi.n	8009376 <UART_SetConfig+0x49a>
 8009326:	a201      	add	r2, pc, #4	@ (adr r2, 800932c <UART_SetConfig+0x450>)
 8009328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800932c:	08009351 	.word	0x08009351
 8009330:	08009359 	.word	0x08009359
 8009334:	08009361 	.word	0x08009361
 8009338:	08009377 	.word	0x08009377
 800933c:	08009367 	.word	0x08009367
 8009340:	08009377 	.word	0x08009377
 8009344:	08009377 	.word	0x08009377
 8009348:	08009377 	.word	0x08009377
 800934c:	0800936f 	.word	0x0800936f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009350:	f7fb ffd6 	bl	8005300 <HAL_RCC_GetPCLK1Freq>
 8009354:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009356:	e014      	b.n	8009382 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009358:	f7fb ffe8 	bl	800532c <HAL_RCC_GetPCLK2Freq>
 800935c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800935e:	e010      	b.n	8009382 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009360:	4b4e      	ldr	r3, [pc, #312]	@ (800949c <UART_SetConfig+0x5c0>)
 8009362:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009364:	e00d      	b.n	8009382 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009366:	f7fb ff5d 	bl	8005224 <HAL_RCC_GetSysClockFreq>
 800936a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800936c:	e009      	b.n	8009382 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800936e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009372:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009374:	e005      	b.n	8009382 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009376:	2300      	movs	r3, #0
 8009378:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800937a:	2301      	movs	r3, #1
 800937c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009380:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009384:	2b00      	cmp	r3, #0
 8009386:	f000 8090 	beq.w	80094aa <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800938e:	4a44      	ldr	r2, [pc, #272]	@ (80094a0 <UART_SetConfig+0x5c4>)
 8009390:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009394:	461a      	mov	r2, r3
 8009396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009398:	fbb3 f3f2 	udiv	r3, r3, r2
 800939c:	005a      	lsls	r2, r3, #1
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	685b      	ldr	r3, [r3, #4]
 80093a2:	085b      	lsrs	r3, r3, #1
 80093a4:	441a      	add	r2, r3
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80093ae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80093b0:	6a3b      	ldr	r3, [r7, #32]
 80093b2:	2b0f      	cmp	r3, #15
 80093b4:	d916      	bls.n	80093e4 <UART_SetConfig+0x508>
 80093b6:	6a3b      	ldr	r3, [r7, #32]
 80093b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80093bc:	d212      	bcs.n	80093e4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80093be:	6a3b      	ldr	r3, [r7, #32]
 80093c0:	b29b      	uxth	r3, r3
 80093c2:	f023 030f 	bic.w	r3, r3, #15
 80093c6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80093c8:	6a3b      	ldr	r3, [r7, #32]
 80093ca:	085b      	lsrs	r3, r3, #1
 80093cc:	b29b      	uxth	r3, r3
 80093ce:	f003 0307 	and.w	r3, r3, #7
 80093d2:	b29a      	uxth	r2, r3
 80093d4:	8bfb      	ldrh	r3, [r7, #30]
 80093d6:	4313      	orrs	r3, r2
 80093d8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	8bfa      	ldrh	r2, [r7, #30]
 80093e0:	60da      	str	r2, [r3, #12]
 80093e2:	e062      	b.n	80094aa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80093e4:	2301      	movs	r3, #1
 80093e6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80093ea:	e05e      	b.n	80094aa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80093ec:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80093f0:	2b08      	cmp	r3, #8
 80093f2:	d828      	bhi.n	8009446 <UART_SetConfig+0x56a>
 80093f4:	a201      	add	r2, pc, #4	@ (adr r2, 80093fc <UART_SetConfig+0x520>)
 80093f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093fa:	bf00      	nop
 80093fc:	08009421 	.word	0x08009421
 8009400:	08009429 	.word	0x08009429
 8009404:	08009431 	.word	0x08009431
 8009408:	08009447 	.word	0x08009447
 800940c:	08009437 	.word	0x08009437
 8009410:	08009447 	.word	0x08009447
 8009414:	08009447 	.word	0x08009447
 8009418:	08009447 	.word	0x08009447
 800941c:	0800943f 	.word	0x0800943f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009420:	f7fb ff6e 	bl	8005300 <HAL_RCC_GetPCLK1Freq>
 8009424:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009426:	e014      	b.n	8009452 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009428:	f7fb ff80 	bl	800532c <HAL_RCC_GetPCLK2Freq>
 800942c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800942e:	e010      	b.n	8009452 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009430:	4b1a      	ldr	r3, [pc, #104]	@ (800949c <UART_SetConfig+0x5c0>)
 8009432:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009434:	e00d      	b.n	8009452 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009436:	f7fb fef5 	bl	8005224 <HAL_RCC_GetSysClockFreq>
 800943a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800943c:	e009      	b.n	8009452 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800943e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009442:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009444:	e005      	b.n	8009452 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009446:	2300      	movs	r3, #0
 8009448:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800944a:	2301      	movs	r3, #1
 800944c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009450:	bf00      	nop
    }

    if (pclk != 0U)
 8009452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009454:	2b00      	cmp	r3, #0
 8009456:	d028      	beq.n	80094aa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800945c:	4a10      	ldr	r2, [pc, #64]	@ (80094a0 <UART_SetConfig+0x5c4>)
 800945e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009462:	461a      	mov	r2, r3
 8009464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009466:	fbb3 f2f2 	udiv	r2, r3, r2
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	685b      	ldr	r3, [r3, #4]
 800946e:	085b      	lsrs	r3, r3, #1
 8009470:	441a      	add	r2, r3
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	fbb2 f3f3 	udiv	r3, r2, r3
 800947a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800947c:	6a3b      	ldr	r3, [r7, #32]
 800947e:	2b0f      	cmp	r3, #15
 8009480:	d910      	bls.n	80094a4 <UART_SetConfig+0x5c8>
 8009482:	6a3b      	ldr	r3, [r7, #32]
 8009484:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009488:	d20c      	bcs.n	80094a4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800948a:	6a3b      	ldr	r3, [r7, #32]
 800948c:	b29a      	uxth	r2, r3
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	60da      	str	r2, [r3, #12]
 8009494:	e009      	b.n	80094aa <UART_SetConfig+0x5ce>
 8009496:	bf00      	nop
 8009498:	40008000 	.word	0x40008000
 800949c:	00f42400 	.word	0x00f42400
 80094a0:	0800ab40 	.word	0x0800ab40
      }
      else
      {
        ret = HAL_ERROR;
 80094a4:	2301      	movs	r3, #1
 80094a6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	2201      	movs	r2, #1
 80094ae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	2201      	movs	r2, #1
 80094b6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	2200      	movs	r2, #0
 80094be:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80094c0:	697b      	ldr	r3, [r7, #20]
 80094c2:	2200      	movs	r2, #0
 80094c4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80094c6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3730      	adds	r7, #48	@ 0x30
 80094ce:	46bd      	mov	sp, r7
 80094d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080094d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b083      	sub	sp, #12
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094e0:	f003 0308 	and.w	r3, r3, #8
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d00a      	beq.n	80094fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	685b      	ldr	r3, [r3, #4]
 80094ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	430a      	orrs	r2, r1
 80094fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009502:	f003 0301 	and.w	r3, r3, #1
 8009506:	2b00      	cmp	r3, #0
 8009508:	d00a      	beq.n	8009520 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	685b      	ldr	r3, [r3, #4]
 8009510:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	430a      	orrs	r2, r1
 800951e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009524:	f003 0302 	and.w	r3, r3, #2
 8009528:	2b00      	cmp	r3, #0
 800952a:	d00a      	beq.n	8009542 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	685b      	ldr	r3, [r3, #4]
 8009532:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	430a      	orrs	r2, r1
 8009540:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009546:	f003 0304 	and.w	r3, r3, #4
 800954a:	2b00      	cmp	r3, #0
 800954c:	d00a      	beq.n	8009564 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	430a      	orrs	r2, r1
 8009562:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009568:	f003 0310 	and.w	r3, r3, #16
 800956c:	2b00      	cmp	r3, #0
 800956e:	d00a      	beq.n	8009586 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	689b      	ldr	r3, [r3, #8]
 8009576:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	430a      	orrs	r2, r1
 8009584:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800958a:	f003 0320 	and.w	r3, r3, #32
 800958e:	2b00      	cmp	r3, #0
 8009590:	d00a      	beq.n	80095a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	689b      	ldr	r3, [r3, #8]
 8009598:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	430a      	orrs	r2, r1
 80095a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d01a      	beq.n	80095ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	685b      	ldr	r3, [r3, #4]
 80095ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	430a      	orrs	r2, r1
 80095c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80095d2:	d10a      	bne.n	80095ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	430a      	orrs	r2, r1
 80095e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d00a      	beq.n	800960c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	685b      	ldr	r3, [r3, #4]
 80095fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	430a      	orrs	r2, r1
 800960a:	605a      	str	r2, [r3, #4]
  }
}
 800960c:	bf00      	nop
 800960e:	370c      	adds	r7, #12
 8009610:	46bd      	mov	sp, r7
 8009612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009616:	4770      	bx	lr

08009618 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b098      	sub	sp, #96	@ 0x60
 800961c:	af02      	add	r7, sp, #8
 800961e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2200      	movs	r2, #0
 8009624:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009628:	f7f9 f9cc 	bl	80029c4 <HAL_GetTick>
 800962c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f003 0308 	and.w	r3, r3, #8
 8009638:	2b08      	cmp	r3, #8
 800963a:	d12f      	bne.n	800969c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800963c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009640:	9300      	str	r3, [sp, #0]
 8009642:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009644:	2200      	movs	r2, #0
 8009646:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f000 f88e 	bl	800976c <UART_WaitOnFlagUntilTimeout>
 8009650:	4603      	mov	r3, r0
 8009652:	2b00      	cmp	r3, #0
 8009654:	d022      	beq.n	800969c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800965c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800965e:	e853 3f00 	ldrex	r3, [r3]
 8009662:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009666:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800966a:	653b      	str	r3, [r7, #80]	@ 0x50
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	461a      	mov	r2, r3
 8009672:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009674:	647b      	str	r3, [r7, #68]	@ 0x44
 8009676:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009678:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800967a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800967c:	e841 2300 	strex	r3, r2, [r1]
 8009680:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009682:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009684:	2b00      	cmp	r3, #0
 8009686:	d1e6      	bne.n	8009656 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2220      	movs	r2, #32
 800968c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2200      	movs	r2, #0
 8009694:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009698:	2303      	movs	r3, #3
 800969a:	e063      	b.n	8009764 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f003 0304 	and.w	r3, r3, #4
 80096a6:	2b04      	cmp	r3, #4
 80096a8:	d149      	bne.n	800973e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80096aa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80096ae:	9300      	str	r3, [sp, #0]
 80096b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80096b2:	2200      	movs	r2, #0
 80096b4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f000 f857 	bl	800976c <UART_WaitOnFlagUntilTimeout>
 80096be:	4603      	mov	r3, r0
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d03c      	beq.n	800973e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096cc:	e853 3f00 	ldrex	r3, [r3]
 80096d0:	623b      	str	r3, [r7, #32]
   return(result);
 80096d2:	6a3b      	ldr	r3, [r7, #32]
 80096d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80096d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	461a      	mov	r2, r3
 80096e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80096e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80096e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80096ea:	e841 2300 	strex	r3, r2, [r1]
 80096ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80096f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d1e6      	bne.n	80096c4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	3308      	adds	r3, #8
 80096fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	e853 3f00 	ldrex	r3, [r3]
 8009704:	60fb      	str	r3, [r7, #12]
   return(result);
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	f023 0301 	bic.w	r3, r3, #1
 800970c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	3308      	adds	r3, #8
 8009714:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009716:	61fa      	str	r2, [r7, #28]
 8009718:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800971a:	69b9      	ldr	r1, [r7, #24]
 800971c:	69fa      	ldr	r2, [r7, #28]
 800971e:	e841 2300 	strex	r3, r2, [r1]
 8009722:	617b      	str	r3, [r7, #20]
   return(result);
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d1e5      	bne.n	80096f6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2220      	movs	r2, #32
 800972e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2200      	movs	r2, #0
 8009736:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800973a:	2303      	movs	r3, #3
 800973c:	e012      	b.n	8009764 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2220      	movs	r2, #32
 8009742:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2220      	movs	r2, #32
 800974a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2200      	movs	r2, #0
 8009752:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2200      	movs	r2, #0
 8009758:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2200      	movs	r2, #0
 800975e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009762:	2300      	movs	r3, #0
}
 8009764:	4618      	mov	r0, r3
 8009766:	3758      	adds	r7, #88	@ 0x58
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}

0800976c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b084      	sub	sp, #16
 8009770:	af00      	add	r7, sp, #0
 8009772:	60f8      	str	r0, [r7, #12]
 8009774:	60b9      	str	r1, [r7, #8]
 8009776:	603b      	str	r3, [r7, #0]
 8009778:	4613      	mov	r3, r2
 800977a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800977c:	e04f      	b.n	800981e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800977e:	69bb      	ldr	r3, [r7, #24]
 8009780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009784:	d04b      	beq.n	800981e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009786:	f7f9 f91d 	bl	80029c4 <HAL_GetTick>
 800978a:	4602      	mov	r2, r0
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	1ad3      	subs	r3, r2, r3
 8009790:	69ba      	ldr	r2, [r7, #24]
 8009792:	429a      	cmp	r2, r3
 8009794:	d302      	bcc.n	800979c <UART_WaitOnFlagUntilTimeout+0x30>
 8009796:	69bb      	ldr	r3, [r7, #24]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d101      	bne.n	80097a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800979c:	2303      	movs	r3, #3
 800979e:	e04e      	b.n	800983e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f003 0304 	and.w	r3, r3, #4
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d037      	beq.n	800981e <UART_WaitOnFlagUntilTimeout+0xb2>
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	2b80      	cmp	r3, #128	@ 0x80
 80097b2:	d034      	beq.n	800981e <UART_WaitOnFlagUntilTimeout+0xb2>
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	2b40      	cmp	r3, #64	@ 0x40
 80097b8:	d031      	beq.n	800981e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	69db      	ldr	r3, [r3, #28]
 80097c0:	f003 0308 	and.w	r3, r3, #8
 80097c4:	2b08      	cmp	r3, #8
 80097c6:	d110      	bne.n	80097ea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	2208      	movs	r2, #8
 80097ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80097d0:	68f8      	ldr	r0, [r7, #12]
 80097d2:	f000 f99c 	bl	8009b0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2208      	movs	r2, #8
 80097da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	2200      	movs	r2, #0
 80097e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80097e6:	2301      	movs	r3, #1
 80097e8:	e029      	b.n	800983e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	69db      	ldr	r3, [r3, #28]
 80097f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80097f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80097f8:	d111      	bne.n	800981e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009802:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009804:	68f8      	ldr	r0, [r7, #12]
 8009806:	f000 f982 	bl	8009b0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2220      	movs	r2, #32
 800980e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	2200      	movs	r2, #0
 8009816:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800981a:	2303      	movs	r3, #3
 800981c:	e00f      	b.n	800983e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	69da      	ldr	r2, [r3, #28]
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	4013      	ands	r3, r2
 8009828:	68ba      	ldr	r2, [r7, #8]
 800982a:	429a      	cmp	r2, r3
 800982c:	bf0c      	ite	eq
 800982e:	2301      	moveq	r3, #1
 8009830:	2300      	movne	r3, #0
 8009832:	b2db      	uxtb	r3, r3
 8009834:	461a      	mov	r2, r3
 8009836:	79fb      	ldrb	r3, [r7, #7]
 8009838:	429a      	cmp	r2, r3
 800983a:	d0a0      	beq.n	800977e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800983c:	2300      	movs	r3, #0
}
 800983e:	4618      	mov	r0, r3
 8009840:	3710      	adds	r7, #16
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}
	...

08009848 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009848:	b480      	push	{r7}
 800984a:	b0a3      	sub	sp, #140	@ 0x8c
 800984c:	af00      	add	r7, sp, #0
 800984e:	60f8      	str	r0, [r7, #12]
 8009850:	60b9      	str	r1, [r7, #8]
 8009852:	4613      	mov	r3, r2
 8009854:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	68ba      	ldr	r2, [r7, #8]
 800985a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	88fa      	ldrh	r2, [r7, #6]
 8009860:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	88fa      	ldrh	r2, [r7, #6]
 8009868:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	2200      	movs	r2, #0
 8009870:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	689b      	ldr	r3, [r3, #8]
 8009876:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800987a:	d10e      	bne.n	800989a <UART_Start_Receive_IT+0x52>
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	691b      	ldr	r3, [r3, #16]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d105      	bne.n	8009890 <UART_Start_Receive_IT+0x48>
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800988a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800988e:	e02d      	b.n	80098ec <UART_Start_Receive_IT+0xa4>
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	22ff      	movs	r2, #255	@ 0xff
 8009894:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009898:	e028      	b.n	80098ec <UART_Start_Receive_IT+0xa4>
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	689b      	ldr	r3, [r3, #8]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d10d      	bne.n	80098be <UART_Start_Receive_IT+0x76>
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	691b      	ldr	r3, [r3, #16]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d104      	bne.n	80098b4 <UART_Start_Receive_IT+0x6c>
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	22ff      	movs	r2, #255	@ 0xff
 80098ae:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80098b2:	e01b      	b.n	80098ec <UART_Start_Receive_IT+0xa4>
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	227f      	movs	r2, #127	@ 0x7f
 80098b8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80098bc:	e016      	b.n	80098ec <UART_Start_Receive_IT+0xa4>
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	689b      	ldr	r3, [r3, #8]
 80098c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80098c6:	d10d      	bne.n	80098e4 <UART_Start_Receive_IT+0x9c>
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	691b      	ldr	r3, [r3, #16]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d104      	bne.n	80098da <UART_Start_Receive_IT+0x92>
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	227f      	movs	r2, #127	@ 0x7f
 80098d4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80098d8:	e008      	b.n	80098ec <UART_Start_Receive_IT+0xa4>
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	223f      	movs	r2, #63	@ 0x3f
 80098de:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80098e2:	e003      	b.n	80098ec <UART_Start_Receive_IT+0xa4>
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	2200      	movs	r2, #0
 80098e8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	2200      	movs	r2, #0
 80098f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	2222      	movs	r2, #34	@ 0x22
 80098f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	3308      	adds	r3, #8
 8009902:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009904:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009906:	e853 3f00 	ldrex	r3, [r3]
 800990a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800990c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800990e:	f043 0301 	orr.w	r3, r3, #1
 8009912:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	3308      	adds	r3, #8
 800991c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009920:	673a      	str	r2, [r7, #112]	@ 0x70
 8009922:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009924:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8009926:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009928:	e841 2300 	strex	r3, r2, [r1]
 800992c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800992e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009930:	2b00      	cmp	r3, #0
 8009932:	d1e3      	bne.n	80098fc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009938:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800993c:	d14f      	bne.n	80099de <UART_Start_Receive_IT+0x196>
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009944:	88fa      	ldrh	r2, [r7, #6]
 8009946:	429a      	cmp	r2, r3
 8009948:	d349      	bcc.n	80099de <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	689b      	ldr	r3, [r3, #8]
 800994e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009952:	d107      	bne.n	8009964 <UART_Start_Receive_IT+0x11c>
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	691b      	ldr	r3, [r3, #16]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d103      	bne.n	8009964 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	4a47      	ldr	r2, [pc, #284]	@ (8009a7c <UART_Start_Receive_IT+0x234>)
 8009960:	675a      	str	r2, [r3, #116]	@ 0x74
 8009962:	e002      	b.n	800996a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	4a46      	ldr	r2, [pc, #280]	@ (8009a80 <UART_Start_Receive_IT+0x238>)
 8009968:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	691b      	ldr	r3, [r3, #16]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d01a      	beq.n	80099a8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009978:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800997a:	e853 3f00 	ldrex	r3, [r3]
 800997e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009980:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009982:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009986:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	461a      	mov	r2, r3
 8009990:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009994:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009996:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009998:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800999a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800999c:	e841 2300 	strex	r3, r2, [r1]
 80099a0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80099a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d1e4      	bne.n	8009972 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	3308      	adds	r3, #8
 80099ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099b2:	e853 3f00 	ldrex	r3, [r3]
 80099b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80099b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80099be:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	3308      	adds	r3, #8
 80099c6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80099c8:	64ba      	str	r2, [r7, #72]	@ 0x48
 80099ca:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099cc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80099ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80099d0:	e841 2300 	strex	r3, r2, [r1]
 80099d4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80099d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d1e5      	bne.n	80099a8 <UART_Start_Receive_IT+0x160>
 80099dc:	e046      	b.n	8009a6c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	689b      	ldr	r3, [r3, #8]
 80099e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099e6:	d107      	bne.n	80099f8 <UART_Start_Receive_IT+0x1b0>
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	691b      	ldr	r3, [r3, #16]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d103      	bne.n	80099f8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	4a24      	ldr	r2, [pc, #144]	@ (8009a84 <UART_Start_Receive_IT+0x23c>)
 80099f4:	675a      	str	r2, [r3, #116]	@ 0x74
 80099f6:	e002      	b.n	80099fe <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	4a23      	ldr	r2, [pc, #140]	@ (8009a88 <UART_Start_Receive_IT+0x240>)
 80099fc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	691b      	ldr	r3, [r3, #16]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d019      	beq.n	8009a3a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a0e:	e853 3f00 	ldrex	r3, [r3]
 8009a12:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a16:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8009a1a:	677b      	str	r3, [r7, #116]	@ 0x74
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	461a      	mov	r2, r3
 8009a22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009a24:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a26:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a28:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009a2a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009a2c:	e841 2300 	strex	r3, r2, [r1]
 8009a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d1e6      	bne.n	8009a06 <UART_Start_Receive_IT+0x1be>
 8009a38:	e018      	b.n	8009a6c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	e853 3f00 	ldrex	r3, [r3]
 8009a46:	613b      	str	r3, [r7, #16]
   return(result);
 8009a48:	693b      	ldr	r3, [r7, #16]
 8009a4a:	f043 0320 	orr.w	r3, r3, #32
 8009a4e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	461a      	mov	r2, r3
 8009a56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009a58:	623b      	str	r3, [r7, #32]
 8009a5a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a5c:	69f9      	ldr	r1, [r7, #28]
 8009a5e:	6a3a      	ldr	r2, [r7, #32]
 8009a60:	e841 2300 	strex	r3, r2, [r1]
 8009a64:	61bb      	str	r3, [r7, #24]
   return(result);
 8009a66:	69bb      	ldr	r3, [r7, #24]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d1e6      	bne.n	8009a3a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8009a6c:	2300      	movs	r3, #0
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	378c      	adds	r7, #140	@ 0x8c
 8009a72:	46bd      	mov	sp, r7
 8009a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a78:	4770      	bx	lr
 8009a7a:	bf00      	nop
 8009a7c:	0800a491 	.word	0x0800a491
 8009a80:	0800a121 	.word	0x0800a121
 8009a84:	08009f61 	.word	0x08009f61
 8009a88:	08009da1 	.word	0x08009da1

08009a8c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b08f      	sub	sp, #60	@ 0x3c
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a9a:	6a3b      	ldr	r3, [r7, #32]
 8009a9c:	e853 3f00 	ldrex	r3, [r3]
 8009aa0:	61fb      	str	r3, [r7, #28]
   return(result);
 8009aa2:	69fb      	ldr	r3, [r7, #28]
 8009aa4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009aa8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	461a      	mov	r2, r3
 8009ab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009ab4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ab6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009ab8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009aba:	e841 2300 	strex	r3, r2, [r1]
 8009abe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d1e6      	bne.n	8009a94 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	3308      	adds	r3, #8
 8009acc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	e853 3f00 	ldrex	r3, [r3]
 8009ad4:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009adc:	633b      	str	r3, [r7, #48]	@ 0x30
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	3308      	adds	r3, #8
 8009ae4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ae6:	61ba      	str	r2, [r7, #24]
 8009ae8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aea:	6979      	ldr	r1, [r7, #20]
 8009aec:	69ba      	ldr	r2, [r7, #24]
 8009aee:	e841 2300 	strex	r3, r2, [r1]
 8009af2:	613b      	str	r3, [r7, #16]
   return(result);
 8009af4:	693b      	ldr	r3, [r7, #16]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d1e5      	bne.n	8009ac6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2220      	movs	r2, #32
 8009afe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8009b02:	bf00      	nop
 8009b04:	373c      	adds	r7, #60	@ 0x3c
 8009b06:	46bd      	mov	sp, r7
 8009b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0c:	4770      	bx	lr

08009b0e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009b0e:	b480      	push	{r7}
 8009b10:	b095      	sub	sp, #84	@ 0x54
 8009b12:	af00      	add	r7, sp, #0
 8009b14:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b1e:	e853 3f00 	ldrex	r3, [r3]
 8009b22:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b26:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009b2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	461a      	mov	r2, r3
 8009b32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b34:	643b      	str	r3, [r7, #64]	@ 0x40
 8009b36:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b38:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009b3a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009b3c:	e841 2300 	strex	r3, r2, [r1]
 8009b40:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d1e6      	bne.n	8009b16 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	3308      	adds	r3, #8
 8009b4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b50:	6a3b      	ldr	r3, [r7, #32]
 8009b52:	e853 3f00 	ldrex	r3, [r3]
 8009b56:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b58:	69fb      	ldr	r3, [r7, #28]
 8009b5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009b5e:	f023 0301 	bic.w	r3, r3, #1
 8009b62:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	3308      	adds	r3, #8
 8009b6a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009b6c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009b72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b74:	e841 2300 	strex	r3, r2, [r1]
 8009b78:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d1e3      	bne.n	8009b48 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b84:	2b01      	cmp	r3, #1
 8009b86:	d118      	bne.n	8009bba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	e853 3f00 	ldrex	r3, [r3]
 8009b94:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	f023 0310 	bic.w	r3, r3, #16
 8009b9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	461a      	mov	r2, r3
 8009ba4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ba6:	61bb      	str	r3, [r7, #24]
 8009ba8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009baa:	6979      	ldr	r1, [r7, #20]
 8009bac:	69ba      	ldr	r2, [r7, #24]
 8009bae:	e841 2300 	strex	r3, r2, [r1]
 8009bb2:	613b      	str	r3, [r7, #16]
   return(result);
 8009bb4:	693b      	ldr	r3, [r7, #16]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d1e6      	bne.n	8009b88 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2220      	movs	r2, #32
 8009bbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009bce:	bf00      	nop
 8009bd0:	3754      	adds	r7, #84	@ 0x54
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd8:	4770      	bx	lr

08009bda <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009bda:	b580      	push	{r7, lr}
 8009bdc:	b090      	sub	sp, #64	@ 0x40
 8009bde:	af00      	add	r7, sp, #0
 8009be0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009be6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f003 0320 	and.w	r3, r3, #32
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d137      	bne.n	8009c66 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8009bf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009bfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	3308      	adds	r3, #8
 8009c04:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c08:	e853 3f00 	ldrex	r3, [r3]
 8009c0c:	623b      	str	r3, [r7, #32]
   return(result);
 8009c0e:	6a3b      	ldr	r3, [r7, #32]
 8009c10:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009c14:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009c16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	3308      	adds	r3, #8
 8009c1c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009c1e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009c24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c26:	e841 2300 	strex	r3, r2, [r1]
 8009c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d1e5      	bne.n	8009bfe <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009c32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	e853 3f00 	ldrex	r3, [r3]
 8009c3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c46:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	461a      	mov	r2, r3
 8009c4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c50:	61fb      	str	r3, [r7, #28]
 8009c52:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c54:	69b9      	ldr	r1, [r7, #24]
 8009c56:	69fa      	ldr	r2, [r7, #28]
 8009c58:	e841 2300 	strex	r3, r2, [r1]
 8009c5c:	617b      	str	r3, [r7, #20]
   return(result);
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d1e6      	bne.n	8009c32 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009c64:	e004      	b.n	8009c70 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 8009c66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c68:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009c6c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009c6e:	4798      	blx	r3
}
 8009c70:	bf00      	nop
 8009c72:	3740      	adds	r7, #64	@ 0x40
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}

08009c78 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b084      	sub	sp, #16
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c84:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009c8c:	68f8      	ldr	r0, [r7, #12]
 8009c8e:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c90:	bf00      	nop
 8009c92:	3710      	adds	r7, #16
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}

08009c98 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b086      	sub	sp, #24
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ca4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009cac:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009cb4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	689b      	ldr	r3, [r3, #8]
 8009cbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009cc0:	2b80      	cmp	r3, #128	@ 0x80
 8009cc2:	d109      	bne.n	8009cd8 <UART_DMAError+0x40>
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	2b21      	cmp	r3, #33	@ 0x21
 8009cc8:	d106      	bne.n	8009cd8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8009cd2:	6978      	ldr	r0, [r7, #20]
 8009cd4:	f7ff feda 	bl	8009a8c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	689b      	ldr	r3, [r3, #8]
 8009cde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ce2:	2b40      	cmp	r3, #64	@ 0x40
 8009ce4:	d109      	bne.n	8009cfa <UART_DMAError+0x62>
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2b22      	cmp	r3, #34	@ 0x22
 8009cea:	d106      	bne.n	8009cfa <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8009cf4:	6978      	ldr	r0, [r7, #20]
 8009cf6:	f7ff ff0a 	bl	8009b0e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d00:	f043 0210 	orr.w	r2, r3, #16
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009d10:	6978      	ldr	r0, [r7, #20]
 8009d12:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d14:	bf00      	nop
 8009d16:	3718      	adds	r7, #24
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}

08009d1c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b084      	sub	sp, #16
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d28:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009d38:	68f8      	ldr	r0, [r7, #12]
 8009d3a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d3c:	bf00      	nop
 8009d3e:	3710      	adds	r7, #16
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}

08009d44 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b088      	sub	sp, #32
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	e853 3f00 	ldrex	r3, [r3]
 8009d58:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d60:	61fb      	str	r3, [r7, #28]
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	461a      	mov	r2, r3
 8009d68:	69fb      	ldr	r3, [r7, #28]
 8009d6a:	61bb      	str	r3, [r7, #24]
 8009d6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d6e:	6979      	ldr	r1, [r7, #20]
 8009d70:	69ba      	ldr	r2, [r7, #24]
 8009d72:	e841 2300 	strex	r3, r2, [r1]
 8009d76:	613b      	str	r3, [r7, #16]
   return(result);
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d1e6      	bne.n	8009d4c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2220      	movs	r2, #32
 8009d82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d96:	bf00      	nop
 8009d98:	3720      	adds	r7, #32
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
	...

08009da0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b09c      	sub	sp, #112	@ 0x70
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009dae:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009db8:	2b22      	cmp	r3, #34	@ 0x22
 8009dba:	f040 80c2 	bne.w	8009f42 <UART_RxISR_8BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dc4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009dc8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009dcc:	b2d9      	uxtb	r1, r3
 8009dce:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009dd2:	b2da      	uxtb	r2, r3
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009dd8:	400a      	ands	r2, r1
 8009dda:	b2d2      	uxtb	r2, r2
 8009ddc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009de2:	1c5a      	adds	r2, r3, #1
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009dee:	b29b      	uxth	r3, r3
 8009df0:	3b01      	subs	r3, #1
 8009df2:	b29a      	uxth	r2, r3
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009e00:	b29b      	uxth	r3, r3
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	f040 80a5 	bne.w	8009f52 <UART_RxISR_8BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e10:	e853 3f00 	ldrex	r3, [r3]
 8009e14:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009e16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009e1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	461a      	mov	r2, r3
 8009e24:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009e26:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009e28:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e2a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009e2c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009e2e:	e841 2300 	strex	r3, r2, [r1]
 8009e32:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009e34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d1e6      	bne.n	8009e08 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	3308      	adds	r3, #8
 8009e40:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e44:	e853 3f00 	ldrex	r3, [r3]
 8009e48:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009e4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e4c:	f023 0301 	bic.w	r3, r3, #1
 8009e50:	667b      	str	r3, [r7, #100]	@ 0x64
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	3308      	adds	r3, #8
 8009e58:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009e5a:	647a      	str	r2, [r7, #68]	@ 0x44
 8009e5c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e5e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009e60:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009e62:	e841 2300 	strex	r3, r2, [r1]
 8009e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009e68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d1e5      	bne.n	8009e3a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2220      	movs	r2, #32
 8009e72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	4a35      	ldr	r2, [pc, #212]	@ (8009f5c <UART_RxISR_8BIT+0x1bc>)
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d01f      	beq.n	8009ecc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	685b      	ldr	r3, [r3, #4]
 8009e92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d018      	beq.n	8009ecc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ea2:	e853 3f00 	ldrex	r3, [r3]
 8009ea6:	623b      	str	r3, [r7, #32]
   return(result);
 8009ea8:	6a3b      	ldr	r3, [r7, #32]
 8009eaa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009eae:	663b      	str	r3, [r7, #96]	@ 0x60
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	461a      	mov	r2, r3
 8009eb6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009eb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8009eba:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ebc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009ebe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ec0:	e841 2300 	strex	r3, r2, [r1]
 8009ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d1e6      	bne.n	8009e9a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ed0:	2b01      	cmp	r3, #1
 8009ed2:	d130      	bne.n	8009f36 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	e853 3f00 	ldrex	r3, [r3]
 8009ee6:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f023 0310 	bic.w	r3, r3, #16
 8009eee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	461a      	mov	r2, r3
 8009ef6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ef8:	61fb      	str	r3, [r7, #28]
 8009efa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009efc:	69b9      	ldr	r1, [r7, #24]
 8009efe:	69fa      	ldr	r2, [r7, #28]
 8009f00:	e841 2300 	strex	r3, r2, [r1]
 8009f04:	617b      	str	r3, [r7, #20]
   return(result);
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d1e6      	bne.n	8009eda <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	69db      	ldr	r3, [r3, #28]
 8009f12:	f003 0310 	and.w	r3, r3, #16
 8009f16:	2b10      	cmp	r3, #16
 8009f18:	d103      	bne.n	8009f22 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	2210      	movs	r2, #16
 8009f20:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009f28:	687a      	ldr	r2, [r7, #4]
 8009f2a:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8009f2e:	4611      	mov	r1, r2
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009f34:	e00d      	b.n	8009f52 <UART_RxISR_8BIT+0x1b2>
        huart->RxCpltCallback(huart);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	4798      	blx	r3
}
 8009f40:	e007      	b.n	8009f52 <UART_RxISR_8BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	699a      	ldr	r2, [r3, #24]
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f042 0208 	orr.w	r2, r2, #8
 8009f50:	619a      	str	r2, [r3, #24]
}
 8009f52:	bf00      	nop
 8009f54:	3770      	adds	r7, #112	@ 0x70
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}
 8009f5a:	bf00      	nop
 8009f5c:	40008000 	.word	0x40008000

08009f60 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b09c      	sub	sp, #112	@ 0x70
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009f6e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009f78:	2b22      	cmp	r3, #34	@ 0x22
 8009f7a:	f040 80c2 	bne.w	800a102 <UART_RxISR_16BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f84:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f8c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009f8e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8009f92:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009f96:	4013      	ands	r3, r2
 8009f98:	b29a      	uxth	r2, r3
 8009f9a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009f9c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009fa2:	1c9a      	adds	r2, r3, #2
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009fae:	b29b      	uxth	r3, r3
 8009fb0:	3b01      	subs	r3, #1
 8009fb2:	b29a      	uxth	r2, r3
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009fc0:	b29b      	uxth	r3, r3
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	f040 80a5 	bne.w	800a112 <UART_RxISR_16BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009fd0:	e853 3f00 	ldrex	r3, [r3]
 8009fd4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009fd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009fd8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009fdc:	667b      	str	r3, [r7, #100]	@ 0x64
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	461a      	mov	r2, r3
 8009fe4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009fe6:	657b      	str	r3, [r7, #84]	@ 0x54
 8009fe8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fea:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009fec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009fee:	e841 2300 	strex	r3, r2, [r1]
 8009ff2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009ff4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d1e6      	bne.n	8009fc8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	3308      	adds	r3, #8
 800a000:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a004:	e853 3f00 	ldrex	r3, [r3]
 800a008:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a00a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a00c:	f023 0301 	bic.w	r3, r3, #1
 800a010:	663b      	str	r3, [r7, #96]	@ 0x60
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	3308      	adds	r3, #8
 800a018:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a01a:	643a      	str	r2, [r7, #64]	@ 0x40
 800a01c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a01e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a020:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a022:	e841 2300 	strex	r3, r2, [r1]
 800a026:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d1e5      	bne.n	8009ffa <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2220      	movs	r2, #32
 800a032:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2200      	movs	r2, #0
 800a03a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2200      	movs	r2, #0
 800a040:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4a35      	ldr	r2, [pc, #212]	@ (800a11c <UART_RxISR_16BIT+0x1bc>)
 800a048:	4293      	cmp	r3, r2
 800a04a:	d01f      	beq.n	800a08c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	685b      	ldr	r3, [r3, #4]
 800a052:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a056:	2b00      	cmp	r3, #0
 800a058:	d018      	beq.n	800a08c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a060:	6a3b      	ldr	r3, [r7, #32]
 800a062:	e853 3f00 	ldrex	r3, [r3]
 800a066:	61fb      	str	r3, [r7, #28]
   return(result);
 800a068:	69fb      	ldr	r3, [r7, #28]
 800a06a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a06e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	461a      	mov	r2, r3
 800a076:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a078:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a07a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a07c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a07e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a080:	e841 2300 	strex	r3, r2, [r1]
 800a084:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d1e6      	bne.n	800a05a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a090:	2b01      	cmp	r3, #1
 800a092:	d130      	bne.n	800a0f6 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2200      	movs	r2, #0
 800a098:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	e853 3f00 	ldrex	r3, [r3]
 800a0a6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	f023 0310 	bic.w	r3, r3, #16
 800a0ae:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	461a      	mov	r2, r3
 800a0b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a0b8:	61bb      	str	r3, [r7, #24]
 800a0ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0bc:	6979      	ldr	r1, [r7, #20]
 800a0be:	69ba      	ldr	r2, [r7, #24]
 800a0c0:	e841 2300 	strex	r3, r2, [r1]
 800a0c4:	613b      	str	r3, [r7, #16]
   return(result);
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d1e6      	bne.n	800a09a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	69db      	ldr	r3, [r3, #28]
 800a0d2:	f003 0310 	and.w	r3, r3, #16
 800a0d6:	2b10      	cmp	r3, #16
 800a0d8:	d103      	bne.n	800a0e2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	2210      	movs	r2, #16
 800a0e0:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800a0ee:	4611      	mov	r1, r2
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a0f4:	e00d      	b.n	800a112 <UART_RxISR_16BIT+0x1b2>
        huart->RxCpltCallback(huart);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	4798      	blx	r3
}
 800a100:	e007      	b.n	800a112 <UART_RxISR_16BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	699a      	ldr	r2, [r3, #24]
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f042 0208 	orr.w	r2, r2, #8
 800a110:	619a      	str	r2, [r3, #24]
}
 800a112:	bf00      	nop
 800a114:	3770      	adds	r7, #112	@ 0x70
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}
 800a11a:	bf00      	nop
 800a11c:	40008000 	.word	0x40008000

0800a120 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b0ac      	sub	sp, #176	@ 0xb0
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a12e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	69db      	ldr	r3, [r3, #28]
 800a138:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	689b      	ldr	r3, [r3, #8]
 800a14c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a156:	2b22      	cmp	r3, #34	@ 0x22
 800a158:	f040 8189 	bne.w	800a46e <UART_RxISR_8BIT_FIFOEN+0x34e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a162:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a166:	e12c      	b.n	800a3c2 <UART_RxISR_8BIT_FIFOEN+0x2a2>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a16e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a172:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800a176:	b2d9      	uxtb	r1, r3
 800a178:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800a17c:	b2da      	uxtb	r2, r3
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a182:	400a      	ands	r2, r1
 800a184:	b2d2      	uxtb	r2, r2
 800a186:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a18c:	1c5a      	adds	r2, r3, #1
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a198:	b29b      	uxth	r3, r3
 800a19a:	3b01      	subs	r3, #1
 800a19c:	b29a      	uxth	r2, r3
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	69db      	ldr	r3, [r3, #28]
 800a1aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a1ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a1b2:	f003 0307 	and.w	r3, r3, #7
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d055      	beq.n	800a266 <UART_RxISR_8BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a1ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a1be:	f003 0301 	and.w	r3, r3, #1
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d011      	beq.n	800a1ea <UART_RxISR_8BIT_FIFOEN+0xca>
 800a1c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a1ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d00b      	beq.n	800a1ea <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a1e0:	f043 0201 	orr.w	r2, r3, #1
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a1ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a1ee:	f003 0302 	and.w	r3, r3, #2
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d011      	beq.n	800a21a <UART_RxISR_8BIT_FIFOEN+0xfa>
 800a1f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a1fa:	f003 0301 	and.w	r3, r3, #1
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d00b      	beq.n	800a21a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	2202      	movs	r2, #2
 800a208:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a210:	f043 0204 	orr.w	r2, r3, #4
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a21a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a21e:	f003 0304 	and.w	r3, r3, #4
 800a222:	2b00      	cmp	r3, #0
 800a224:	d011      	beq.n	800a24a <UART_RxISR_8BIT_FIFOEN+0x12a>
 800a226:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a22a:	f003 0301 	and.w	r3, r3, #1
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d00b      	beq.n	800a24a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	2204      	movs	r2, #4
 800a238:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a240:	f043 0202 	orr.w	r2, r3, #2
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a250:	2b00      	cmp	r3, #0
 800a252:	d008      	beq.n	800a266 <UART_RxISR_8BIT_FIFOEN+0x146>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2200      	movs	r2, #0
 800a262:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a26c:	b29b      	uxth	r3, r3
 800a26e:	2b00      	cmp	r3, #0
 800a270:	f040 80a7 	bne.w	800a3c2 <UART_RxISR_8BIT_FIFOEN+0x2a2>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a27a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a27c:	e853 3f00 	ldrex	r3, [r3]
 800a280:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800a282:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a284:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a288:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	461a      	mov	r2, r3
 800a292:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a296:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a298:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a29a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800a29c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a29e:	e841 2300 	strex	r3, r2, [r1]
 800a2a2:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800a2a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d1e4      	bne.n	800a274 <UART_RxISR_8BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	3308      	adds	r3, #8
 800a2b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a2b4:	e853 3f00 	ldrex	r3, [r3]
 800a2b8:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800a2ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a2bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a2c0:	f023 0301 	bic.w	r3, r3, #1
 800a2c4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	3308      	adds	r3, #8
 800a2ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a2d2:	66ba      	str	r2, [r7, #104]	@ 0x68
 800a2d4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2d6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800a2d8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a2da:	e841 2300 	strex	r3, r2, [r1]
 800a2de:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a2e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d1e1      	bne.n	800a2aa <UART_RxISR_8BIT_FIFOEN+0x18a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2220      	movs	r2, #32
 800a2ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	4a62      	ldr	r2, [pc, #392]	@ (800a488 <UART_RxISR_8BIT_FIFOEN+0x368>)
 800a300:	4293      	cmp	r3, r2
 800a302:	d021      	beq.n	800a348 <UART_RxISR_8BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	685b      	ldr	r3, [r3, #4]
 800a30a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d01a      	beq.n	800a348 <UART_RxISR_8BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a318:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a31a:	e853 3f00 	ldrex	r3, [r3]
 800a31e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a320:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a322:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a326:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	461a      	mov	r2, r3
 800a330:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a334:	657b      	str	r3, [r7, #84]	@ 0x54
 800a336:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a338:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a33a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a33c:	e841 2300 	strex	r3, r2, [r1]
 800a340:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a342:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a344:	2b00      	cmp	r3, #0
 800a346:	d1e4      	bne.n	800a312 <UART_RxISR_8BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a34c:	2b01      	cmp	r3, #1
 800a34e:	d132      	bne.n	800a3b6 <UART_RxISR_8BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2200      	movs	r2, #0
 800a354:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a35c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a35e:	e853 3f00 	ldrex	r3, [r3]
 800a362:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a366:	f023 0310 	bic.w	r3, r3, #16
 800a36a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	461a      	mov	r2, r3
 800a374:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a378:	643b      	str	r3, [r7, #64]	@ 0x40
 800a37a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a37c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a37e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a380:	e841 2300 	strex	r3, r2, [r1]
 800a384:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d1e4      	bne.n	800a356 <UART_RxISR_8BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	69db      	ldr	r3, [r3, #28]
 800a392:	f003 0310 	and.w	r3, r3, #16
 800a396:	2b10      	cmp	r3, #16
 800a398:	d103      	bne.n	800a3a2 <UART_RxISR_8BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	2210      	movs	r2, #16
 800a3a0:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a3a8:	687a      	ldr	r2, [r7, #4]
 800a3aa:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800a3ae:	4611      	mov	r1, r2
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	4798      	blx	r3
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800a3b4:	e010      	b.n	800a3d8 <UART_RxISR_8BIT_FIFOEN+0x2b8>
          huart->RxCpltCallback(huart);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	4798      	blx	r3
        break;
 800a3c0:	e00a      	b.n	800a3d8 <UART_RxISR_8BIT_FIFOEN+0x2b8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a3c2:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d006      	beq.n	800a3d8 <UART_RxISR_8BIT_FIFOEN+0x2b8>
 800a3ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a3ce:	f003 0320 	and.w	r3, r3, #32
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	f47f aec8 	bne.w	800a168 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a3de:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a3e2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d049      	beq.n	800a47e <UART_RxISR_8BIT_FIFOEN+0x35e>
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a3f0:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800a3f4:	429a      	cmp	r2, r3
 800a3f6:	d242      	bcs.n	800a47e <UART_RxISR_8BIT_FIFOEN+0x35e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	3308      	adds	r3, #8
 800a3fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a400:	6a3b      	ldr	r3, [r7, #32]
 800a402:	e853 3f00 	ldrex	r3, [r3]
 800a406:	61fb      	str	r3, [r7, #28]
   return(result);
 800a408:	69fb      	ldr	r3, [r7, #28]
 800a40a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a40e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	3308      	adds	r3, #8
 800a418:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a41c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a41e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a420:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a422:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a424:	e841 2300 	strex	r3, r2, [r1]
 800a428:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a42a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d1e3      	bne.n	800a3f8 <UART_RxISR_8BIT_FIFOEN+0x2d8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	4a16      	ldr	r2, [pc, #88]	@ (800a48c <UART_RxISR_8BIT_FIFOEN+0x36c>)
 800a434:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	e853 3f00 	ldrex	r3, [r3]
 800a442:	60bb      	str	r3, [r7, #8]
   return(result);
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	f043 0320 	orr.w	r3, r3, #32
 800a44a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	461a      	mov	r2, r3
 800a454:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a458:	61bb      	str	r3, [r7, #24]
 800a45a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a45c:	6979      	ldr	r1, [r7, #20]
 800a45e:	69ba      	ldr	r2, [r7, #24]
 800a460:	e841 2300 	strex	r3, r2, [r1]
 800a464:	613b      	str	r3, [r7, #16]
   return(result);
 800a466:	693b      	ldr	r3, [r7, #16]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d1e4      	bne.n	800a436 <UART_RxISR_8BIT_FIFOEN+0x316>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a46c:	e007      	b.n	800a47e <UART_RxISR_8BIT_FIFOEN+0x35e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	699a      	ldr	r2, [r3, #24]
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f042 0208 	orr.w	r2, r2, #8
 800a47c:	619a      	str	r2, [r3, #24]
}
 800a47e:	bf00      	nop
 800a480:	37b0      	adds	r7, #176	@ 0xb0
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}
 800a486:	bf00      	nop
 800a488:	40008000 	.word	0x40008000
 800a48c:	08009da1 	.word	0x08009da1

0800a490 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b0ae      	sub	sp, #184	@ 0xb8
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a49e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	69db      	ldr	r3, [r3, #28]
 800a4a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	689b      	ldr	r3, [r3, #8]
 800a4bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a4c6:	2b22      	cmp	r3, #34	@ 0x22
 800a4c8:	f040 818d 	bne.w	800a7e6 <UART_RxISR_16BIT_FIFOEN+0x356>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a4d2:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a4d6:	e130      	b.n	800a73a <UART_RxISR_16BIT_FIFOEN+0x2aa>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4de:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a4e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800a4ea:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800a4ee:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800a4f2:	4013      	ands	r3, r2
 800a4f4:	b29a      	uxth	r2, r3
 800a4f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a4fa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a500:	1c9a      	adds	r2, r3, #2
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a50c:	b29b      	uxth	r3, r3
 800a50e:	3b01      	subs	r3, #1
 800a510:	b29a      	uxth	r2, r3
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	69db      	ldr	r3, [r3, #28]
 800a51e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a522:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a526:	f003 0307 	and.w	r3, r3, #7
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d055      	beq.n	800a5da <UART_RxISR_16BIT_FIFOEN+0x14a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a52e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a532:	f003 0301 	and.w	r3, r3, #1
 800a536:	2b00      	cmp	r3, #0
 800a538:	d011      	beq.n	800a55e <UART_RxISR_16BIT_FIFOEN+0xce>
 800a53a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a53e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a542:	2b00      	cmp	r3, #0
 800a544:	d00b      	beq.n	800a55e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	2201      	movs	r2, #1
 800a54c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a554:	f043 0201 	orr.w	r2, r3, #1
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a55e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a562:	f003 0302 	and.w	r3, r3, #2
 800a566:	2b00      	cmp	r3, #0
 800a568:	d011      	beq.n	800a58e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800a56a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a56e:	f003 0301 	and.w	r3, r3, #1
 800a572:	2b00      	cmp	r3, #0
 800a574:	d00b      	beq.n	800a58e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	2202      	movs	r2, #2
 800a57c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a584:	f043 0204 	orr.w	r2, r3, #4
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a58e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a592:	f003 0304 	and.w	r3, r3, #4
 800a596:	2b00      	cmp	r3, #0
 800a598:	d011      	beq.n	800a5be <UART_RxISR_16BIT_FIFOEN+0x12e>
 800a59a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a59e:	f003 0301 	and.w	r3, r3, #1
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d00b      	beq.n	800a5be <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	2204      	movs	r2, #4
 800a5ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a5b4:	f043 0202 	orr.w	r2, r3, #2
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d008      	beq.n	800a5da <UART_RxISR_16BIT_FIFOEN+0x14a>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a5e0:	b29b      	uxth	r3, r3
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	f040 80a9 	bne.w	800a73a <UART_RxISR_16BIT_FIFOEN+0x2aa>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a5f0:	e853 3f00 	ldrex	r3, [r3]
 800a5f4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a5f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a5f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a5fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	461a      	mov	r2, r3
 800a606:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a60a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a60e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a610:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a612:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a616:	e841 2300 	strex	r3, r2, [r1]
 800a61a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a61c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d1e2      	bne.n	800a5e8 <UART_RxISR_16BIT_FIFOEN+0x158>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	3308      	adds	r3, #8
 800a628:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a62a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a62c:	e853 3f00 	ldrex	r3, [r3]
 800a630:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a632:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a634:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a638:	f023 0301 	bic.w	r3, r3, #1
 800a63c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	3308      	adds	r3, #8
 800a646:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800a64a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a64c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a64e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a650:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a652:	e841 2300 	strex	r3, r2, [r1]
 800a656:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a658:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d1e1      	bne.n	800a622 <UART_RxISR_16BIT_FIFOEN+0x192>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2220      	movs	r2, #32
 800a662:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2200      	movs	r2, #0
 800a66a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2200      	movs	r2, #0
 800a670:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	4a62      	ldr	r2, [pc, #392]	@ (800a800 <UART_RxISR_16BIT_FIFOEN+0x370>)
 800a678:	4293      	cmp	r3, r2
 800a67a:	d021      	beq.n	800a6c0 <UART_RxISR_16BIT_FIFOEN+0x230>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	685b      	ldr	r3, [r3, #4]
 800a682:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a686:	2b00      	cmp	r3, #0
 800a688:	d01a      	beq.n	800a6c0 <UART_RxISR_16BIT_FIFOEN+0x230>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a690:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a692:	e853 3f00 	ldrex	r3, [r3]
 800a696:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a698:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a69a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a69e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	461a      	mov	r2, r3
 800a6a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a6ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a6ae:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6b0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a6b2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a6b4:	e841 2300 	strex	r3, r2, [r1]
 800a6b8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a6ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d1e4      	bne.n	800a68a <UART_RxISR_16BIT_FIFOEN+0x1fa>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6c4:	2b01      	cmp	r3, #1
 800a6c6:	d132      	bne.n	800a72e <UART_RxISR_16BIT_FIFOEN+0x29e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6d6:	e853 3f00 	ldrex	r3, [r3]
 800a6da:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a6dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6de:	f023 0310 	bic.w	r3, r3, #16
 800a6e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	461a      	mov	r2, r3
 800a6ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a6f0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a6f2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a6f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a6f8:	e841 2300 	strex	r3, r2, [r1]
 800a6fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a6fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a700:	2b00      	cmp	r3, #0
 800a702:	d1e4      	bne.n	800a6ce <UART_RxISR_16BIT_FIFOEN+0x23e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	69db      	ldr	r3, [r3, #28]
 800a70a:	f003 0310 	and.w	r3, r3, #16
 800a70e:	2b10      	cmp	r3, #16
 800a710:	d103      	bne.n	800a71a <UART_RxISR_16BIT_FIFOEN+0x28a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	2210      	movs	r2, #16
 800a718:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a720:	687a      	ldr	r2, [r7, #4]
 800a722:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800a726:	4611      	mov	r1, r2
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	4798      	blx	r3
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800a72c:	e010      	b.n	800a750 <UART_RxISR_16BIT_FIFOEN+0x2c0>
          huart->RxCpltCallback(huart);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	4798      	blx	r3
        break;
 800a738:	e00a      	b.n	800a750 <UART_RxISR_16BIT_FIFOEN+0x2c0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a73a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d006      	beq.n	800a750 <UART_RxISR_16BIT_FIFOEN+0x2c0>
 800a742:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a746:	f003 0320 	and.w	r3, r3, #32
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	f47f aec4 	bne.w	800a4d8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a756:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a75a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d049      	beq.n	800a7f6 <UART_RxISR_16BIT_FIFOEN+0x366>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a768:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800a76c:	429a      	cmp	r2, r3
 800a76e:	d242      	bcs.n	800a7f6 <UART_RxISR_16BIT_FIFOEN+0x366>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	3308      	adds	r3, #8
 800a776:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a77a:	e853 3f00 	ldrex	r3, [r3]
 800a77e:	623b      	str	r3, [r7, #32]
   return(result);
 800a780:	6a3b      	ldr	r3, [r7, #32]
 800a782:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a786:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	3308      	adds	r3, #8
 800a790:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a794:	633a      	str	r2, [r7, #48]	@ 0x30
 800a796:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a798:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a79a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a79c:	e841 2300 	strex	r3, r2, [r1]
 800a7a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a7a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d1e3      	bne.n	800a770 <UART_RxISR_16BIT_FIFOEN+0x2e0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	4a16      	ldr	r2, [pc, #88]	@ (800a804 <UART_RxISR_16BIT_FIFOEN+0x374>)
 800a7ac:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	e853 3f00 	ldrex	r3, [r3]
 800a7ba:	60fb      	str	r3, [r7, #12]
   return(result);
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	f043 0320 	orr.w	r3, r3, #32
 800a7c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	461a      	mov	r2, r3
 800a7cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a7d0:	61fb      	str	r3, [r7, #28]
 800a7d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7d4:	69b9      	ldr	r1, [r7, #24]
 800a7d6:	69fa      	ldr	r2, [r7, #28]
 800a7d8:	e841 2300 	strex	r3, r2, [r1]
 800a7dc:	617b      	str	r3, [r7, #20]
   return(result);
 800a7de:	697b      	ldr	r3, [r7, #20]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d1e4      	bne.n	800a7ae <UART_RxISR_16BIT_FIFOEN+0x31e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a7e4:	e007      	b.n	800a7f6 <UART_RxISR_16BIT_FIFOEN+0x366>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	699a      	ldr	r2, [r3, #24]
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f042 0208 	orr.w	r2, r2, #8
 800a7f4:	619a      	str	r2, [r3, #24]
}
 800a7f6:	bf00      	nop
 800a7f8:	37b8      	adds	r7, #184	@ 0xb8
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}
 800a7fe:	bf00      	nop
 800a800:	40008000 	.word	0x40008000
 800a804:	08009f61 	.word	0x08009f61

0800a808 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a808:	b480      	push	{r7}
 800a80a:	b083      	sub	sp, #12
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a810:	bf00      	nop
 800a812:	370c      	adds	r7, #12
 800a814:	46bd      	mov	sp, r7
 800a816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81a:	4770      	bx	lr

0800a81c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a81c:	b480      	push	{r7}
 800a81e:	b083      	sub	sp, #12
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a824:	bf00      	nop
 800a826:	370c      	adds	r7, #12
 800a828:	46bd      	mov	sp, r7
 800a82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82e:	4770      	bx	lr

0800a830 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a830:	b480      	push	{r7}
 800a832:	b083      	sub	sp, #12
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a838:	bf00      	nop
 800a83a:	370c      	adds	r7, #12
 800a83c:	46bd      	mov	sp, r7
 800a83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a842:	4770      	bx	lr

0800a844 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a844:	b480      	push	{r7}
 800a846:	b085      	sub	sp, #20
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a852:	2b01      	cmp	r3, #1
 800a854:	d101      	bne.n	800a85a <HAL_UARTEx_DisableFifoMode+0x16>
 800a856:	2302      	movs	r3, #2
 800a858:	e027      	b.n	800a8aa <HAL_UARTEx_DisableFifoMode+0x66>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2201      	movs	r2, #1
 800a85e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2224      	movs	r2, #36	@ 0x24
 800a866:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	681a      	ldr	r2, [r3, #0]
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f022 0201 	bic.w	r2, r2, #1
 800a880:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a888:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2200      	movs	r2, #0
 800a88e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	68fa      	ldr	r2, [r7, #12]
 800a896:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2220      	movs	r2, #32
 800a89c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a8a8:	2300      	movs	r3, #0
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3714      	adds	r7, #20
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b4:	4770      	bx	lr

0800a8b6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a8b6:	b580      	push	{r7, lr}
 800a8b8:	b084      	sub	sp, #16
 800a8ba:	af00      	add	r7, sp, #0
 800a8bc:	6078      	str	r0, [r7, #4]
 800a8be:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a8c6:	2b01      	cmp	r3, #1
 800a8c8:	d101      	bne.n	800a8ce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a8ca:	2302      	movs	r3, #2
 800a8cc:	e02d      	b.n	800a92a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2201      	movs	r2, #1
 800a8d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2224      	movs	r2, #36	@ 0x24
 800a8da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	681a      	ldr	r2, [r3, #0]
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f022 0201 	bic.w	r2, r2, #1
 800a8f4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	689b      	ldr	r3, [r3, #8]
 800a8fc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	683a      	ldr	r2, [r7, #0]
 800a906:	430a      	orrs	r2, r1
 800a908:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f000 f850 	bl	800a9b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	68fa      	ldr	r2, [r7, #12]
 800a916:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2220      	movs	r2, #32
 800a91c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2200      	movs	r2, #0
 800a924:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a928:	2300      	movs	r3, #0
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	3710      	adds	r7, #16
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}

0800a932 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a932:	b580      	push	{r7, lr}
 800a934:	b084      	sub	sp, #16
 800a936:	af00      	add	r7, sp, #0
 800a938:	6078      	str	r0, [r7, #4]
 800a93a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a942:	2b01      	cmp	r3, #1
 800a944:	d101      	bne.n	800a94a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a946:	2302      	movs	r3, #2
 800a948:	e02d      	b.n	800a9a6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2201      	movs	r2, #1
 800a94e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2224      	movs	r2, #36	@ 0x24
 800a956:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	681a      	ldr	r2, [r3, #0]
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f022 0201 	bic.w	r2, r2, #1
 800a970:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	689b      	ldr	r3, [r3, #8]
 800a978:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	683a      	ldr	r2, [r7, #0]
 800a982:	430a      	orrs	r2, r1
 800a984:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f000 f812 	bl	800a9b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	68fa      	ldr	r2, [r7, #12]
 800a992:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2220      	movs	r2, #32
 800a998:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a9a4:	2300      	movs	r3, #0
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3710      	adds	r7, #16
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}
	...

0800a9b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b085      	sub	sp, #20
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d108      	bne.n	800a9d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2201      	movs	r2, #1
 800a9c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2201      	movs	r2, #1
 800a9cc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a9d0:	e031      	b.n	800aa36 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a9d2:	2308      	movs	r3, #8
 800a9d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a9d6:	2308      	movs	r3, #8
 800a9d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	689b      	ldr	r3, [r3, #8]
 800a9e0:	0e5b      	lsrs	r3, r3, #25
 800a9e2:	b2db      	uxtb	r3, r3
 800a9e4:	f003 0307 	and.w	r3, r3, #7
 800a9e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	689b      	ldr	r3, [r3, #8]
 800a9f0:	0f5b      	lsrs	r3, r3, #29
 800a9f2:	b2db      	uxtb	r3, r3
 800a9f4:	f003 0307 	and.w	r3, r3, #7
 800a9f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a9fa:	7bbb      	ldrb	r3, [r7, #14]
 800a9fc:	7b3a      	ldrb	r2, [r7, #12]
 800a9fe:	4911      	ldr	r1, [pc, #68]	@ (800aa44 <UARTEx_SetNbDataToProcess+0x94>)
 800aa00:	5c8a      	ldrb	r2, [r1, r2]
 800aa02:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800aa06:	7b3a      	ldrb	r2, [r7, #12]
 800aa08:	490f      	ldr	r1, [pc, #60]	@ (800aa48 <UARTEx_SetNbDataToProcess+0x98>)
 800aa0a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aa0c:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa10:	b29a      	uxth	r2, r3
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aa18:	7bfb      	ldrb	r3, [r7, #15]
 800aa1a:	7b7a      	ldrb	r2, [r7, #13]
 800aa1c:	4909      	ldr	r1, [pc, #36]	@ (800aa44 <UARTEx_SetNbDataToProcess+0x94>)
 800aa1e:	5c8a      	ldrb	r2, [r1, r2]
 800aa20:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800aa24:	7b7a      	ldrb	r2, [r7, #13]
 800aa26:	4908      	ldr	r1, [pc, #32]	@ (800aa48 <UARTEx_SetNbDataToProcess+0x98>)
 800aa28:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aa2a:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa2e:	b29a      	uxth	r2, r3
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800aa36:	bf00      	nop
 800aa38:	3714      	adds	r7, #20
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa40:	4770      	bx	lr
 800aa42:	bf00      	nop
 800aa44:	0800ab58 	.word	0x0800ab58
 800aa48:	0800ab60 	.word	0x0800ab60

0800aa4c <memset>:
 800aa4c:	4402      	add	r2, r0
 800aa4e:	4603      	mov	r3, r0
 800aa50:	4293      	cmp	r3, r2
 800aa52:	d100      	bne.n	800aa56 <memset+0xa>
 800aa54:	4770      	bx	lr
 800aa56:	f803 1b01 	strb.w	r1, [r3], #1
 800aa5a:	e7f9      	b.n	800aa50 <memset+0x4>

0800aa5c <__errno>:
 800aa5c:	4b01      	ldr	r3, [pc, #4]	@ (800aa64 <__errno+0x8>)
 800aa5e:	6818      	ldr	r0, [r3, #0]
 800aa60:	4770      	bx	lr
 800aa62:	bf00      	nop
 800aa64:	2000021c 	.word	0x2000021c

0800aa68 <__libc_init_array>:
 800aa68:	b570      	push	{r4, r5, r6, lr}
 800aa6a:	4d0d      	ldr	r5, [pc, #52]	@ (800aaa0 <__libc_init_array+0x38>)
 800aa6c:	4c0d      	ldr	r4, [pc, #52]	@ (800aaa4 <__libc_init_array+0x3c>)
 800aa6e:	1b64      	subs	r4, r4, r5
 800aa70:	10a4      	asrs	r4, r4, #2
 800aa72:	2600      	movs	r6, #0
 800aa74:	42a6      	cmp	r6, r4
 800aa76:	d109      	bne.n	800aa8c <__libc_init_array+0x24>
 800aa78:	4d0b      	ldr	r5, [pc, #44]	@ (800aaa8 <__libc_init_array+0x40>)
 800aa7a:	4c0c      	ldr	r4, [pc, #48]	@ (800aaac <__libc_init_array+0x44>)
 800aa7c:	f000 f848 	bl	800ab10 <_init>
 800aa80:	1b64      	subs	r4, r4, r5
 800aa82:	10a4      	asrs	r4, r4, #2
 800aa84:	2600      	movs	r6, #0
 800aa86:	42a6      	cmp	r6, r4
 800aa88:	d105      	bne.n	800aa96 <__libc_init_array+0x2e>
 800aa8a:	bd70      	pop	{r4, r5, r6, pc}
 800aa8c:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa90:	4798      	blx	r3
 800aa92:	3601      	adds	r6, #1
 800aa94:	e7ee      	b.n	800aa74 <__libc_init_array+0xc>
 800aa96:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa9a:	4798      	blx	r3
 800aa9c:	3601      	adds	r6, #1
 800aa9e:	e7f2      	b.n	800aa86 <__libc_init_array+0x1e>
 800aaa0:	0800ab70 	.word	0x0800ab70
 800aaa4:	0800ab70 	.word	0x0800ab70
 800aaa8:	0800ab70 	.word	0x0800ab70
 800aaac:	0800ab74 	.word	0x0800ab74

0800aab0 <memcpy>:
 800aab0:	440a      	add	r2, r1
 800aab2:	4291      	cmp	r1, r2
 800aab4:	f100 33ff 	add.w	r3, r0, #4294967295
 800aab8:	d100      	bne.n	800aabc <memcpy+0xc>
 800aaba:	4770      	bx	lr
 800aabc:	b510      	push	{r4, lr}
 800aabe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aac2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aac6:	4291      	cmp	r1, r2
 800aac8:	d1f9      	bne.n	800aabe <memcpy+0xe>
 800aaca:	bd10      	pop	{r4, pc}

0800aacc <sqrtf>:
 800aacc:	b508      	push	{r3, lr}
 800aace:	ed2d 8b02 	vpush	{d8}
 800aad2:	eeb0 8a40 	vmov.f32	s16, s0
 800aad6:	f000 f817 	bl	800ab08 <__ieee754_sqrtf>
 800aada:	eeb4 8a48 	vcmp.f32	s16, s16
 800aade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aae2:	d60c      	bvs.n	800aafe <sqrtf+0x32>
 800aae4:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800ab04 <sqrtf+0x38>
 800aae8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800aaec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aaf0:	d505      	bpl.n	800aafe <sqrtf+0x32>
 800aaf2:	f7ff ffb3 	bl	800aa5c <__errno>
 800aaf6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800aafa:	2321      	movs	r3, #33	@ 0x21
 800aafc:	6003      	str	r3, [r0, #0]
 800aafe:	ecbd 8b02 	vpop	{d8}
 800ab02:	bd08      	pop	{r3, pc}
 800ab04:	00000000 	.word	0x00000000

0800ab08 <__ieee754_sqrtf>:
 800ab08:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ab0c:	4770      	bx	lr
	...

0800ab10 <_init>:
 800ab10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab12:	bf00      	nop
 800ab14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab16:	bc08      	pop	{r3}
 800ab18:	469e      	mov	lr, r3
 800ab1a:	4770      	bx	lr

0800ab1c <_fini>:
 800ab1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab1e:	bf00      	nop
 800ab20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab22:	bc08      	pop	{r3}
 800ab24:	469e      	mov	lr, r3
 800ab26:	4770      	bx	lr
