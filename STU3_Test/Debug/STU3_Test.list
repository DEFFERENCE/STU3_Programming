
STU3_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a99c  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800ab74  0800ab74  0000bb74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800abb4  0800abb4  0000c20c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800abb4  0800abb4  0000bbb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800abbc  0800abbc  0000c20c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800abbc  0800abbc  0000bbbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800abc0  0800abc0  0000bbc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000020c  20000000  0800abc4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012d0  20000210  0800add0  0000c210  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200014e0  0800add0  0000c4e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c20c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022ab5  00000000  00000000  0000c23c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039b3  00000000  00000000  0002ecf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018a8  00000000  00000000  000326a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001358  00000000  00000000  00033f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000403e  00000000  00000000  000352a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fb01  00000000  00000000  000392e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00117f23  00000000  00000000  00058de7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00170d0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006be0  00000000  00000000  00170d50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00177930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000210 	.word	0x20000210
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800ab5c 	.word	0x0800ab5c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000214 	.word	0x20000214
 8000214:	0800ab5c 	.word	0x0800ab5c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <Encoder_Init>:
#define Count_PER_REV 12000.0f
#define TWO_PI 6.283185f
#define PI 3.14286f
#define Lead 11.0f

void Encoder_Init(Encoder *enc, TIM_HandleTypeDef *htim) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	6039      	str	r1, [r7, #0]
    enc->htim = htim;
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	683a      	ldr	r2, [r7, #0]
 8000552:	601a      	str	r2, [r3, #0]
    HAL_TIM_Encoder_Start(htim, TIM_CHANNEL_ALL);
 8000554:	213c      	movs	r1, #60	@ 0x3c
 8000556:	6838      	ldr	r0, [r7, #0]
 8000558:	f006 f92c 	bl	80067b4 <HAL_TIM_Encoder_Start>

    enc->lastRawPosition = __HAL_TIM_GET_COUNTER(htim);
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000562:	461a      	mov	r2, r3
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	605a      	str	r2, [r3, #4]
    enc->position = 0;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	f04f 0200 	mov.w	r2, #0
 800056e:	609a      	str	r2, [r3, #8]
    enc->velocity = 0;
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	f04f 0200 	mov.w	r2, #0
 8000576:	60da      	str	r2, [r3, #12]
    enc->acceleration = 0;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	f04f 0200 	mov.w	r2, #0
 800057e:	611a      	str	r2, [r3, #16]
    enc->lastPosition = 0;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	f04f 0200 	mov.w	r2, #0
 8000586:	619a      	str	r2, [r3, #24]
    enc->lastVelocity = 0;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	f04f 0200 	mov.w	r2, #0
 800058e:	61da      	str	r2, [r3, #28]
}
 8000590:	bf00      	nop
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}

08000598 <Encoder_Update>:

void Encoder_Update(Encoder *enc, float dt) {
 8000598:	b480      	push	{r7}
 800059a:	b085      	sub	sp, #20
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	ed87 0a00 	vstr	s0, [r7]
    int32_t rawPosition = __HAL_TIM_GET_COUNTER(enc->htim);
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005ac:	60bb      	str	r3, [r7, #8]
    int32_t deltaRaw = rawPosition - enc->lastRawPosition;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	685b      	ldr	r3, [r3, #4]
 80005b2:	68ba      	ldr	r2, [r7, #8]
 80005b4:	1ad3      	subs	r3, r2, r3
 80005b6:	60fb      	str	r3, [r7, #12]

    // Handle 16-bit counter wrap-around
    if (deltaRaw > 30000) {
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	f247 5230 	movw	r2, #30000	@ 0x7530
 80005be:	4293      	cmp	r3, r2
 80005c0:	dd05      	ble.n	80005ce <Encoder_Update+0x36>
        deltaRaw -= 60000;
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	f5a3 436a 	sub.w	r3, r3, #59904	@ 0xea00
 80005c8:	3b60      	subs	r3, #96	@ 0x60
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	e008      	b.n	80005e0 <Encoder_Update+0x48>
    } else if (deltaRaw < -30000) {
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	4a48      	ldr	r2, [pc, #288]	@ (80006f4 <Encoder_Update+0x15c>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	da04      	bge.n	80005e0 <Encoder_Update+0x48>
        deltaRaw += 60000;
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	f503 436a 	add.w	r3, r3, #59904	@ 0xea00
 80005dc:	3360      	adds	r3, #96	@ 0x60
 80005de:	60fb      	str	r3, [r7, #12]
    }

    enc->position += ((float)deltaRaw * TWO_PI) / Count_PER_REV;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	ed93 7a02 	vldr	s14, [r3, #8]
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	ee07 3a90 	vmov	s15, r3
 80005ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005f0:	eddf 6a41 	vldr	s13, [pc, #260]	@ 80006f8 <Encoder_Update+0x160>
 80005f4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80005f8:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 80006fc <Encoder_Update+0x164>
 80005fc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000600:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	edc3 7a02 	vstr	s15, [r3, #8]
    enc->velocity = (enc->position - enc->lastPosition) / dt;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	ed93 7a02 	vldr	s14, [r3, #8]
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	edd3 7a06 	vldr	s15, [r3, #24]
 8000616:	ee77 6a67 	vsub.f32	s13, s14, s15
 800061a:	ed97 7a00 	vldr	s14, [r7]
 800061e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	edc3 7a03 	vstr	s15, [r3, #12]
    enc->acceleration = (enc->velocity - enc->lastVelocity) / dt;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	ed93 7a03 	vldr	s14, [r3, #12]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	edd3 7a07 	vldr	s15, [r3, #28]
 8000634:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000638:	ed97 7a00 	vldr	s14, [r7]
 800063c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	edc3 7a04 	vstr	s15, [r3, #16]
    enc->position_degree = enc->position * (180.0f / PI);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	edd3 7a02 	vldr	s15, [r3, #8]
 800064c:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8000700 <Encoder_Update+0x168>
 8000650:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	edc3 7a05 	vstr	s15, [r3, #20]

    enc->lastRawPosition = rawPosition;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	68ba      	ldr	r2, [r7, #8]
 800065e:	605a      	str	r2, [r3, #4]
    enc->lastPosition = enc->position;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	689a      	ldr	r2, [r3, #8]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	619a      	str	r2, [r3, #24]
    enc->lastVelocity = enc->velocity;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	68da      	ldr	r2, [r3, #12]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	61da      	str	r2, [r3, #28]

    enc->position_mm += ((float)deltaRaw / Count_PER_REV) * Lead;
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	ed93 7a08 	vldr	s14, [r3, #32]
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	ee07 3a90 	vmov	s15, r3
 800067c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000680:	ed9f 6a1e 	vldr	s12, [pc, #120]	@ 80006fc <Encoder_Update+0x164>
 8000684:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000688:	eef2 6a06 	vmov.f32	s13, #38	@ 0x41300000  11.0
 800068c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000690:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	edc3 7a08 	vstr	s15, [r3, #32]
    enc->velocity_mm = (enc->position_mm - enc->lastPosition_mm) / dt;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	ed93 7a08 	vldr	s14, [r3, #32]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80006a6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80006aa:	ed97 7a00 	vldr	s14, [r7]
 80006ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    enc->acceleration_mm = (enc->velocity_mm - enc->lastVelocity_mm) / dt;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80006c4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80006c8:	ed97 7a00 	vldr	s14, [r7]
 80006cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

    enc->lastPosition_mm = enc->position_mm;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	6a1a      	ldr	r2, [r3, #32]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	62da      	str	r2, [r3, #44]	@ 0x2c
    enc->lastVelocity_mm = enc->velocity_mm;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80006e6:	bf00      	nop
 80006e8:	3714      	adds	r7, #20
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	ffff8ad0 	.word	0xffff8ad0
 80006f8:	40c90fda 	.word	0x40c90fda
 80006fc:	463b8000 	.word	0x463b8000
 8000700:	42651738 	.word	0x42651738

08000704 <Encoder_GetPosition>:

void Encoder_setLimit(Encoder *enc, float limit) {
		enc->position = limit;
}

float Encoder_GetPosition(Encoder *enc) {
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
    return enc->position;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	689b      	ldr	r3, [r3, #8]
 8000710:	ee07 3a90 	vmov	s15, r3
}
 8000714:	eeb0 0a67 	vmov.f32	s0, s15
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr

08000722 <Encoder_GetVelocity>:

float Encoder_GetVelocity(Encoder *enc) {
 8000722:	b480      	push	{r7}
 8000724:	b083      	sub	sp, #12
 8000726:	af00      	add	r7, sp, #0
 8000728:	6078      	str	r0, [r7, #4]
    return enc->velocity;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	68db      	ldr	r3, [r3, #12]
 800072e:	ee07 3a90 	vmov	s15, r3
}
 8000732:	eeb0 0a67 	vmov.f32	s0, s15
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <Encoder_GetAcceleration>:

float Encoder_GetAcceleration(Encoder *enc) {
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
    return enc->acceleration;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	691b      	ldr	r3, [r3, #16]
 800074c:	ee07 3a90 	vmov	s15, r3
}
 8000750:	eeb0 0a67 	vmov.f32	s0, s15
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr

0800075e <Encoder_GetPosition_mm>:

float Encoder_GetDegree(Encoder *enc) {
	return enc->position_degree;
}

float Encoder_GetPosition_mm(Encoder *enc) {
 800075e:	b480      	push	{r7}
 8000760:	b083      	sub	sp, #12
 8000762:	af00      	add	r7, sp, #0
 8000764:	6078      	str	r0, [r7, #4]
    return enc->position_mm;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	6a1b      	ldr	r3, [r3, #32]
 800076a:	ee07 3a90 	vmov	s15, r3
}
 800076e:	eeb0 0a67 	vmov.f32	s0, s15
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr

0800077c <Kalman_Init>:
#include "Kalman_Filter.h"

void Kalman_Init(KalmanFilter *kf) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
    arm_mat_init_f32(&kf->A, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->A_data);
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	3370      	adds	r3, #112	@ 0x70
 800078a:	2204      	movs	r2, #4
 800078c:	2104      	movs	r1, #4
 800078e:	f00a f993 	bl	800aab8 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->B, KALMAN_STATE_DIM, KALMAN_MEAS_DIM, kf->B_data);
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	f103 0008 	add.w	r0, r3, #8
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	33b0      	adds	r3, #176	@ 0xb0
 800079c:	2204      	movs	r2, #4
 800079e:	2104      	movs	r1, #4
 80007a0:	f00a f98a 	bl	800aab8 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->H, KALMAN_MEAS_DIM, KALMAN_STATE_DIM, kf->H_data);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	f103 0010 	add.w	r0, r3, #16
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	33f0      	adds	r3, #240	@ 0xf0
 80007ae:	2204      	movs	r2, #4
 80007b0:	2104      	movs	r1, #4
 80007b2:	f00a f981 	bl	800aab8 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->Q, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->Q_data);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	f103 0018 	add.w	r0, r3, #24
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 80007c2:	2204      	movs	r2, #4
 80007c4:	2104      	movs	r1, #4
 80007c6:	f00a f977 	bl	800aab8 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->R, KALMAN_MEAS_DIM, KALMAN_MEAS_DIM, kf->R_data);
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	f103 0020 	add.w	r0, r3, #32
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 80007d6:	2204      	movs	r2, #4
 80007d8:	2104      	movs	r1, #4
 80007da:	f00a f96d 	bl	800aab8 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->P, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->P_data);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 80007ea:	2204      	movs	r2, #4
 80007ec:	2104      	movs	r1, #4
 80007ee:	f00a f963 	bl	800aab8 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->K, KALMAN_STATE_DIM, KALMAN_MEAS_DIM, kf->K_data);
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 80007fe:	2204      	movs	r2, #4
 8000800:	2104      	movs	r1, #4
 8000802:	f00a f959 	bl	800aab8 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->Input, KALMAN_STATE_DIM, KALMAN_MEAS_DIM, kf->Input_data);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8000812:	2204      	movs	r2, #4
 8000814:	2104      	movs	r1, #4
 8000816:	f00a f94f 	bl	800aab8 <arm_mat_init_f32>

    arm_mat_init_f32(&kf->x, KALMAN_STATE_DIM, 1, kf->x_data);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8000826:	2201      	movs	r2, #1
 8000828:	2104      	movs	r1, #4
 800082a:	f00a f945 	bl	800aab8 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->u, KALMAN_MEAS_DIM, 1, kf->u_data);
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 800083a:	2201      	movs	r2, #1
 800083c:	2104      	movs	r1, #4
 800083e:	f00a f93b 	bl	800aab8 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->z, KALMAN_MEAS_DIM, 1, kf->z_data);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	f103 0050 	add.w	r0, r3, #80	@ 0x50
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800084e:	2201      	movs	r2, #1
 8000850:	2104      	movs	r1, #4
 8000852:	f00a f931 	bl	800aab8 <arm_mat_init_f32>

    arm_mat_init_f32(&kf->temp1, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->temp1_data);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8000862:	2204      	movs	r2, #4
 8000864:	2104      	movs	r1, #4
 8000866:	f00a f927 	bl	800aab8 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp2, KALMAN_STATE_DIM, KALMAN_MEAS_DIM, kf->temp2_data);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8000876:	2204      	movs	r2, #4
 8000878:	2104      	movs	r1, #4
 800087a:	f00a f91d 	bl	800aab8 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp3, KALMAN_MEAS_DIM, KALMAN_MEAS_DIM, kf->temp3_data);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 800088a:	2204      	movs	r2, #4
 800088c:	2104      	movs	r1, #4
 800088e:	f00a f913 	bl	800aab8 <arm_mat_init_f32>

    // Clear state
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8000892:	2300      	movs	r3, #0
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	e00b      	b.n	80008b0 <Kalman_Init+0x134>
        kf->x_data[i] = 0.0f;
 8000898:	687a      	ldr	r2, [r7, #4]
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	338c      	adds	r3, #140	@ 0x8c
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	4413      	add	r3, r2
 80008a2:	3304      	adds	r3, #4
 80008a4:	f04f 0200 	mov.w	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	3301      	adds	r3, #1
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	2b03      	cmp	r3, #3
 80008b4:	ddf0      	ble.n	8000898 <Kalman_Init+0x11c>
    }
}
 80008b6:	bf00      	nop
 80008b8:	bf00      	nop
 80008ba:	3710      	adds	r7, #16
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <Kalman_SetProcessNoise>:

void Kalman_SetProcessNoise(KalmanFilter *kf, float value) {
 80008c0:	b480      	push	{r7}
 80008c2:	b085      	sub	sp, #20
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	ed87 0a00 	vstr	s0, [r7]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 80008cc:	2300      	movs	r3, #0
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	e01c      	b.n	800090c <Kalman_SetProcessNoise+0x4c>
        for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 80008d2:	2300      	movs	r3, #0
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	e013      	b.n	8000900 <Kalman_SetProcessNoise+0x40>
            kf->Q_data[i * KALMAN_STATE_DIM + j] = (i == j) ? value : 0.0f;
 80008d8:	68fa      	ldr	r2, [r7, #12]
 80008da:	68bb      	ldr	r3, [r7, #8]
 80008dc:	429a      	cmp	r2, r3
 80008de:	d101      	bne.n	80008e4 <Kalman_SetProcessNoise+0x24>
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	e001      	b.n	80008e8 <Kalman_SetProcessNoise+0x28>
 80008e4:	f04f 0300 	mov.w	r3, #0
 80008e8:	68fa      	ldr	r2, [r7, #12]
 80008ea:	0091      	lsls	r1, r2, #2
 80008ec:	68ba      	ldr	r2, [r7, #8]
 80008ee:	440a      	add	r2, r1
 80008f0:	6879      	ldr	r1, [r7, #4]
 80008f2:	324c      	adds	r2, #76	@ 0x4c
 80008f4:	0092      	lsls	r2, r2, #2
 80008f6:	440a      	add	r2, r1
 80008f8:	6013      	str	r3, [r2, #0]
        for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	3301      	adds	r3, #1
 80008fe:	60bb      	str	r3, [r7, #8]
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	2b03      	cmp	r3, #3
 8000904:	dde8      	ble.n	80008d8 <Kalman_SetProcessNoise+0x18>
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	3301      	adds	r3, #1
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	2b03      	cmp	r3, #3
 8000910:	dddf      	ble.n	80008d2 <Kalman_SetProcessNoise+0x12>
        }
    }
}
 8000912:	bf00      	nop
 8000914:	bf00      	nop
 8000916:	3714      	adds	r7, #20
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr

08000920 <Kalman_SetMeasurementNoise>:

void Kalman_SetMeasurementNoise(KalmanFilter *kf, float value) {
 8000920:	b480      	push	{r7}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	ed87 0a00 	vstr	s0, [r7]
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 800092c:	2300      	movs	r3, #0
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	e01c      	b.n	800096c <Kalman_SetMeasurementNoise+0x4c>
        for (int j = 0; j < KALMAN_MEAS_DIM; j++) {
 8000932:	2300      	movs	r3, #0
 8000934:	60bb      	str	r3, [r7, #8]
 8000936:	e013      	b.n	8000960 <Kalman_SetMeasurementNoise+0x40>
            kf->R_data[i * KALMAN_MEAS_DIM + j] = (i == j) ? value : 0.0f;
 8000938:	68fa      	ldr	r2, [r7, #12]
 800093a:	68bb      	ldr	r3, [r7, #8]
 800093c:	429a      	cmp	r2, r3
 800093e:	d101      	bne.n	8000944 <Kalman_SetMeasurementNoise+0x24>
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	e001      	b.n	8000948 <Kalman_SetMeasurementNoise+0x28>
 8000944:	f04f 0300 	mov.w	r3, #0
 8000948:	68fa      	ldr	r2, [r7, #12]
 800094a:	0091      	lsls	r1, r2, #2
 800094c:	68ba      	ldr	r2, [r7, #8]
 800094e:	440a      	add	r2, r1
 8000950:	6879      	ldr	r1, [r7, #4]
 8000952:	325c      	adds	r2, #92	@ 0x5c
 8000954:	0092      	lsls	r2, r2, #2
 8000956:	440a      	add	r2, r1
 8000958:	6013      	str	r3, [r2, #0]
        for (int j = 0; j < KALMAN_MEAS_DIM; j++) {
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	3301      	adds	r3, #1
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	2b03      	cmp	r3, #3
 8000964:	dde8      	ble.n	8000938 <Kalman_SetMeasurementNoise+0x18>
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	3301      	adds	r3, #1
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	2b03      	cmp	r3, #3
 8000970:	dddf      	ble.n	8000932 <Kalman_SetMeasurementNoise+0x12>
        }
    }
}
 8000972:	bf00      	nop
 8000974:	bf00      	nop
 8000976:	3714      	adds	r7, #20
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000988:	4b04      	ldr	r3, [pc, #16]	@ (800099c <modbus_1t5_Timeout+0x1c>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2201      	movs	r2, #1
 800098e:	751a      	strb	r2, [r3, #20]
}
 8000990:	bf00      	nop
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr
 800099c:	2000022c 	.word	0x2000022c

080009a0 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 80009a8:	4b04      	ldr	r3, [pc, #16]	@ (80009bc <modbus_3t5_Timeout+0x1c>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2201      	movs	r2, #1
 80009ae:	755a      	strb	r2, [r3, #21]
}
 80009b0:	bf00      	nop
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	2000022c 	.word	0x2000022c

080009c0 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 80009ca:	4b15      	ldr	r3, [pc, #84]	@ (8000a20 <modbus_UART_Recived+0x60>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	2201      	movs	r2, #1
 80009d0:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 80009d2:	4b13      	ldr	r3, [pc, #76]	@ (8000a20 <modbus_UART_Recived+0x60>)
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	@ 0x3a2
 80009da:	1c59      	adds	r1, r3, #1
 80009dc:	b289      	uxth	r1, r1
 80009de:	f8a2 13a2 	strh.w	r1, [r2, #930]	@ 0x3a2
 80009e2:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80009e6:	d210      	bcs.n	8000a0a <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80009e8:	4b0d      	ldr	r3, [pc, #52]	@ (8000a20 <modbus_UART_Recived+0x60>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	68d8      	ldr	r0, [r3, #12]
 80009ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000a20 <modbus_UART_Recived+0x60>)
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000a20 <modbus_UART_Recived+0x60>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80009fa:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80009fe:	4413      	add	r3, r2
 8000a00:	3302      	adds	r3, #2
 8000a02:	2201      	movs	r2, #1
 8000a04:	4619      	mov	r1, r3
 8000a06:	f007 fce5 	bl	80083d4 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000a0a:	4b05      	ldr	r3, [pc, #20]	@ (8000a20 <modbus_UART_Recived+0x60>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	691b      	ldr	r3, [r3, #16]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	2200      	movs	r2, #0
 8000a14:	625a      	str	r2, [r3, #36]	@ 0x24

}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	2000022c 	.word	0x2000022c

08000a24 <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000a2e:	4a24      	ldr	r2, [pc, #144]	@ (8000ac0 <Modbus_init+0x9c>)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000a34:	4b22      	ldr	r3, [pc, #136]	@ (8000ac0 <Modbus_init+0x9c>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	683a      	ldr	r2, [r7, #0]
 8000a3a:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 8000a3c:	4b20      	ldr	r3, [pc, #128]	@ (8000ac0 <Modbus_init+0x9c>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	691b      	ldr	r3, [r3, #16]
 8000a42:	4a20      	ldr	r2, [pc, #128]	@ (8000ac4 <Modbus_init+0xa0>)
 8000a44:	2114      	movs	r1, #20
 8000a46:	4618      	mov	r0, r3
 8000a48:	f006 fbba 	bl	80071c0 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8000a4c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ac0 <Modbus_init+0x9c>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	691b      	ldr	r3, [r3, #16]
 8000a52:	4a1d      	ldr	r2, [pc, #116]	@ (8000ac8 <Modbus_init+0xa4>)
 8000a54:	210e      	movs	r1, #14
 8000a56:	4618      	mov	r0, r3
 8000a58:	f006 fbb2 	bl	80071c0 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 8000a5c:	4b18      	ldr	r3, [pc, #96]	@ (8000ac0 <Modbus_init+0x9c>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	68db      	ldr	r3, [r3, #12]
 8000a62:	4a1a      	ldr	r2, [pc, #104]	@ (8000acc <Modbus_init+0xa8>)
 8000a64:	2103      	movs	r1, #3
 8000a66:	4618      	mov	r0, r3
 8000a68:	f007 fbfa 	bl	8008260 <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000a6c:	4b14      	ldr	r3, [pc, #80]	@ (8000ac0 <Modbus_init+0x9c>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	68d8      	ldr	r0, [r3, #12]
 8000a72:	4b13      	ldr	r3, [pc, #76]	@ (8000ac0 <Modbus_init+0x9c>)
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	4b12      	ldr	r3, [pc, #72]	@ (8000ac0 <Modbus_init+0x9c>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000a7e:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8000a82:	4413      	add	r3, r2
 8000a84:	3302      	adds	r3, #2
 8000a86:	2201      	movs	r2, #1
 8000a88:	4619      	mov	r1, r3
 8000a8a:	f007 fca3 	bl	80083d4 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8000a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac0 <Modbus_init+0x9c>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	691b      	ldr	r3, [r3, #16]
 8000a94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	d10c      	bne.n	8000ab8 <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8000a9e:	4b08      	ldr	r3, [pc, #32]	@ (8000ac0 <Modbus_init+0x9c>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	691b      	ldr	r3, [r3, #16]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f005 fa75 	bl	8005f94 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8000aaa:	4b05      	ldr	r3, [pc, #20]	@ (8000ac0 <Modbus_init+0x9c>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	691b      	ldr	r3, [r3, #16]
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f005 fd3c 	bl	8006530 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8000ab8:	bf00      	nop
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	2000022c 	.word	0x2000022c
 8000ac4:	08000981 	.word	0x08000981
 8000ac8:	080009a1 	.word	0x080009a1
 8000acc:	080009c1 	.word	0x080009c1

08000ad0 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	460b      	mov	r3, r1
 8000ada:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8000adc:	23ff      	movs	r3, #255	@ 0xff
 8000ade:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8000ae0:	23ff      	movs	r3, #255	@ 0xff
 8000ae2:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8000ae4:	e013      	b.n	8000b0e <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	1c5a      	adds	r2, r3, #1
 8000aea:	607a      	str	r2, [r7, #4]
 8000aec:	781a      	ldrb	r2, [r3, #0]
 8000aee:	7bbb      	ldrb	r3, [r7, #14]
 8000af0:	4053      	eors	r3, r2
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8000af6:	4a10      	ldr	r2, [pc, #64]	@ (8000b38 <CRC16+0x68>)
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	4413      	add	r3, r2
 8000afc:	781a      	ldrb	r2, [r3, #0]
 8000afe:	7bfb      	ldrb	r3, [r7, #15]
 8000b00:	4053      	eors	r3, r2
 8000b02:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8000b04:	4a0d      	ldr	r2, [pc, #52]	@ (8000b3c <CRC16+0x6c>)
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	4413      	add	r3, r2
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8000b0e:	883b      	ldrh	r3, [r7, #0]
 8000b10:	1e5a      	subs	r2, r3, #1
 8000b12:	803a      	strh	r2, [r7, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d1e6      	bne.n	8000ae6 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8000b18:	7bfb      	ldrb	r3, [r7, #15]
 8000b1a:	b21b      	sxth	r3, r3
 8000b1c:	021b      	lsls	r3, r3, #8
 8000b1e:	b21a      	sxth	r2, r3
 8000b20:	7bbb      	ldrb	r3, [r7, #14]
 8000b22:	b21b      	sxth	r3, r3
 8000b24:	4313      	orrs	r3, r2
 8000b26:	b21b      	sxth	r3, r3
 8000b28:	b29b      	uxth	r3, r3
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3714      	adds	r7, #20
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	20000100 	.word	0x20000100
 8000b3c:	20000000 	.word	0x20000000

08000b40 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8000b46:	4b80      	ldr	r3, [pc, #512]	@ (8000d48 <Modbus_Protocal_Worker+0x208>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	7e1b      	ldrb	r3, [r3, #24]
 8000b4c:	3b01      	subs	r3, #1
 8000b4e:	2b03      	cmp	r3, #3
 8000b50:	d80a      	bhi.n	8000b68 <Modbus_Protocal_Worker+0x28>
 8000b52:	a201      	add	r2, pc, #4	@ (adr r2, 8000b58 <Modbus_Protocal_Worker+0x18>)
 8000b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b58:	08000b73 	.word	0x08000b73
 8000b5c:	08000d11 	.word	0x08000d11
 8000b60:	08000bfd 	.word	0x08000bfd
 8000b64:	08000c23 	.word	0x08000c23
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8000b68:	4b77      	ldr	r3, [pc, #476]	@ (8000d48 <Modbus_Protocal_Worker+0x208>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	761a      	strb	r2, [r3, #24]
		break;
 8000b70:	e0e6      	b.n	8000d40 <Modbus_Protocal_Worker+0x200>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 8000b72:	4b75      	ldr	r3, [pc, #468]	@ (8000d48 <Modbus_Protocal_Worker+0x208>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d002      	beq.n	8000b84 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 8000b7e:	f000 f9d5 	bl	8000f2c <Modbus_Emission>
 8000b82:	e01c      	b.n	8000bbe <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 8000b84:	4b70      	ldr	r3, [pc, #448]	@ (8000d48 <Modbus_Protocal_Worker+0x208>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	7d9b      	ldrb	r3, [r3, #22]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d017      	beq.n	8000bbe <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8000b8e:	4b6e      	ldr	r3, [pc, #440]	@ (8000d48 <Modbus_Protocal_Worker+0x208>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2200      	movs	r2, #0
 8000b94:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8000b96:	4b6c      	ldr	r3, [pc, #432]	@ (8000d48 <Modbus_Protocal_Worker+0x208>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 8000b9e:	4b6a      	ldr	r3, [pc, #424]	@ (8000d48 <Modbus_Protocal_Worker+0x208>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	691b      	ldr	r3, [r3, #16]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	4b67      	ldr	r3, [pc, #412]	@ (8000d48 <Modbus_Protocal_Worker+0x208>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	691b      	ldr	r3, [r3, #16]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f042 0201 	orr.w	r2, r2, #1
 8000bb4:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8000bb6:	4b64      	ldr	r3, [pc, #400]	@ (8000d48 <Modbus_Protocal_Worker+0x208>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	2203      	movs	r2, #3
 8000bbc:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8000bbe:	4b62      	ldr	r3, [pc, #392]	@ (8000d48 <Modbus_Protocal_Worker+0x208>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bc8:	2b20      	cmp	r3, #32
 8000bca:	f040 80b2 	bne.w	8000d32 <Modbus_Protocal_Worker+0x1f2>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8000bce:	4b5e      	ldr	r3, [pc, #376]	@ (8000d48 <Modbus_Protocal_Worker+0x208>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000bd8:	4b5b      	ldr	r3, [pc, #364]	@ (8000d48 <Modbus_Protocal_Worker+0x208>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	68d8      	ldr	r0, [r3, #12]
 8000bde:	4b5a      	ldr	r3, [pc, #360]	@ (8000d48 <Modbus_Protocal_Worker+0x208>)
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	4b59      	ldr	r3, [pc, #356]	@ (8000d48 <Modbus_Protocal_Worker+0x208>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000bea:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8000bee:	4413      	add	r3, r2
 8000bf0:	3302      	adds	r3, #2
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	f007 fbed 	bl	80083d4 <HAL_UART_Receive_IT>
		}
		break;
 8000bfa:	e09a      	b.n	8000d32 <Modbus_Protocal_Worker+0x1f2>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8000bfc:	4b52      	ldr	r3, [pc, #328]	@ (8000d48 <Modbus_Protocal_Worker+0x208>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	7d1b      	ldrb	r3, [r3, #20]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f000 8097 	beq.w	8000d36 <Modbus_Protocal_Worker+0x1f6>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 8000c08:	4b4f      	ldr	r3, [pc, #316]	@ (8000d48 <Modbus_Protocal_Worker+0x208>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8000c10:	4b4d      	ldr	r3, [pc, #308]	@ (8000d48 <Modbus_Protocal_Worker+0x208>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	22fe      	movs	r2, #254	@ 0xfe
 8000c16:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8000c18:	4b4b      	ldr	r3, [pc, #300]	@ (8000d48 <Modbus_Protocal_Worker+0x208>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2204      	movs	r2, #4
 8000c1e:	761a      	strb	r2, [r3, #24]
		}
		break;
 8000c20:	e089      	b.n	8000d36 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 8000c22:	4b49      	ldr	r3, [pc, #292]	@ (8000d48 <Modbus_Protocal_Worker+0x208>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	7d9b      	ldrb	r3, [r3, #22]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d009      	beq.n	8000c40 <Modbus_Protocal_Worker+0x100>
		{

			if(!hModbus->RecvStatus)
 8000c2c:	4b46      	ldr	r3, [pc, #280]	@ (8000d48 <Modbus_Protocal_Worker+0x208>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d103      	bne.n	8000c40 <Modbus_Protocal_Worker+0x100>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8000c38:	4b43      	ldr	r3, [pc, #268]	@ (8000d48 <Modbus_Protocal_Worker+0x208>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	22ff      	movs	r2, #255	@ 0xff
 8000c3e:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8000c40:	4b41      	ldr	r3, [pc, #260]	@ (8000d48 <Modbus_Protocal_Worker+0x208>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8000c48:	f113 0f02 	cmn.w	r3, #2
 8000c4c:	d150      	bne.n	8000cf0 <Modbus_Protocal_Worker+0x1b0>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8000c4e:	4b3e      	ldr	r3, [pc, #248]	@ (8000d48 <Modbus_Protocal_Worker+0x208>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	2200      	movs	r2, #0
 8000c54:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8000c56:	4b3c      	ldr	r3, [pc, #240]	@ (8000d48 <Modbus_Protocal_Worker+0x208>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f203 2272 	addw	r2, r3, #626	@ 0x272
 8000c5e:	4b3a      	ldr	r3, [pc, #232]	@ (8000d48 <Modbus_Protocal_Worker+0x208>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000c66:	3b02      	subs	r3, #2
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4610      	mov	r0, r2
 8000c6c:	f7ff ff30 	bl	8000ad0 <CRC16>
 8000c70:	4603      	mov	r3, r0
 8000c72:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8000c74:	793a      	ldrb	r2, [r7, #4]
 8000c76:	4b34      	ldr	r3, [pc, #208]	@ (8000d48 <Modbus_Protocal_Worker+0x208>)
 8000c78:	6819      	ldr	r1, [r3, #0]
 8000c7a:	4b33      	ldr	r3, [pc, #204]	@ (8000d48 <Modbus_Protocal_Worker+0x208>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000c82:	3b02      	subs	r3, #2
 8000c84:	440b      	add	r3, r1
 8000c86:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	d10c      	bne.n	8000ca8 <Modbus_Protocal_Worker+0x168>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8000c8e:	797a      	ldrb	r2, [r7, #5]
 8000c90:	4b2d      	ldr	r3, [pc, #180]	@ (8000d48 <Modbus_Protocal_Worker+0x208>)
 8000c92:	6819      	ldr	r1, [r3, #0]
 8000c94:	4b2c      	ldr	r3, [pc, #176]	@ (8000d48 <Modbus_Protocal_Worker+0x208>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000c9c:	3b01      	subs	r3, #1
 8000c9e:	440b      	add	r3, r1
 8000ca0:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d004      	beq.n	8000cb2 <Modbus_Protocal_Worker+0x172>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8000ca8:	4b27      	ldr	r3, [pc, #156]	@ (8000d48 <Modbus_Protocal_Worker+0x208>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	22ff      	movs	r2, #255	@ 0xff
 8000cae:	75da      	strb	r2, [r3, #23]
				break;
 8000cb0:	e046      	b.n	8000d40 <Modbus_Protocal_Worker+0x200>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8000cb2:	4b25      	ldr	r3, [pc, #148]	@ (8000d48 <Modbus_Protocal_Worker+0x208>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 8000cba:	4b23      	ldr	r3, [pc, #140]	@ (8000d48 <Modbus_Protocal_Worker+0x208>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d113      	bne.n	8000cec <Modbus_Protocal_Worker+0x1ac>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8000cc4:	4b20      	ldr	r3, [pc, #128]	@ (8000d48 <Modbus_Protocal_Worker+0x208>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8000ccc:	4b1e      	ldr	r3, [pc, #120]	@ (8000d48 <Modbus_Protocal_Worker+0x208>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 8000cd4:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8000cd6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d48 <Modbus_Protocal_Worker+0x208>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000cde:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	f009 ff2d 	bl	800ab40 <memcpy>

			//execute command
			Modbus_frame_response();
 8000ce6:	f000 f909 	bl	8000efc <Modbus_frame_response>
 8000cea:	e001      	b.n	8000cf0 <Modbus_Protocal_Worker+0x1b0>
				break;
 8000cec:	bf00      	nop
					}
		break;


	}
}
 8000cee:	e027      	b.n	8000d40 <Modbus_Protocal_Worker+0x200>
		if(hModbus->Flag_T35TimeOut)
 8000cf0:	4b15      	ldr	r3, [pc, #84]	@ (8000d48 <Modbus_Protocal_Worker+0x208>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	7d5b      	ldrb	r3, [r3, #21]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d01f      	beq.n	8000d3a <Modbus_Protocal_Worker+0x1fa>
			hModbus->Mstatus = Modbus_state_Idle;
 8000cfa:	4b13      	ldr	r3, [pc, #76]	@ (8000d48 <Modbus_Protocal_Worker+0x208>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2201      	movs	r2, #1
 8000d00:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8000d02:	4b11      	ldr	r3, [pc, #68]	@ (8000d48 <Modbus_Protocal_Worker+0x208>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f007 fc2f 	bl	800856c <HAL_UART_AbortReceive>
		break;
 8000d0e:	e014      	b.n	8000d3a <Modbus_Protocal_Worker+0x1fa>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000d10:	4b0d      	ldr	r3, [pc, #52]	@ (8000d48 <Modbus_Protocal_Worker+0x208>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	68db      	ldr	r3, [r3, #12]
 8000d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d1a:	2b20      	cmp	r3, #32
 8000d1c:	d10f      	bne.n	8000d3e <Modbus_Protocal_Worker+0x1fe>
			hModbus->TxCount=0;
 8000d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d48 <Modbus_Protocal_Worker+0x208>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	2200      	movs	r2, #0
 8000d24:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 8000d28:	4b07      	ldr	r3, [pc, #28]	@ (8000d48 <Modbus_Protocal_Worker+0x208>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	761a      	strb	r2, [r3, #24]
		break;
 8000d30:	e005      	b.n	8000d3e <Modbus_Protocal_Worker+0x1fe>
		break;
 8000d32:	bf00      	nop
 8000d34:	e004      	b.n	8000d40 <Modbus_Protocal_Worker+0x200>
		break;
 8000d36:	bf00      	nop
 8000d38:	e002      	b.n	8000d40 <Modbus_Protocal_Worker+0x200>
		break;
 8000d3a:	bf00      	nop
 8000d3c:	e000      	b.n	8000d40 <Modbus_Protocal_Worker+0x200>
		break;
 8000d3e:	bf00      	nop
}
 8000d40:	bf00      	nop
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	2000022c 	.word	0x2000022c

08000d4c <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8000d52:	4b1d      	ldr	r3, [pc, #116]	@ (8000dc8 <modbusWrite1Register+0x7c>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	7e9b      	ldrb	r3, [r3, #26]
 8000d58:	021b      	lsls	r3, r3, #8
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	4a1a      	ldr	r2, [pc, #104]	@ (8000dc8 <modbusWrite1Register+0x7c>)
 8000d5e:	6812      	ldr	r2, [r2, #0]
 8000d60:	7ed2      	ldrb	r2, [r2, #27]
 8000d62:	4413      	add	r3, r2
 8000d64:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 8000d66:	88fa      	ldrh	r2, [r7, #6]
 8000d68:	4b17      	ldr	r3, [pc, #92]	@ (8000dc8 <modbusWrite1Register+0x7c>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d903      	bls.n	8000d7a <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8000d72:	2002      	movs	r0, #2
 8000d74:	f000 f8a0 	bl	8000eb8 <ModbusErrorReply>
			 return;
 8000d78:	e023      	b.n	8000dc2 <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8000d7a:	4b13      	ldr	r3, [pc, #76]	@ (8000dc8 <modbusWrite1Register+0x7c>)
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	4b12      	ldr	r3, [pc, #72]	@ (8000dc8 <modbusWrite1Register+0x7c>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	6859      	ldr	r1, [r3, #4]
 8000d84:	88fb      	ldrh	r3, [r7, #6]
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	440b      	add	r3, r1
 8000d8a:	7f12      	ldrb	r2, [r2, #28]
 8000d8c:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc8 <modbusWrite1Register+0x7c>)
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc8 <modbusWrite1Register+0x7c>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	6859      	ldr	r1, [r3, #4]
 8000d98:	88fb      	ldrh	r3, [r7, #6]
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	440b      	add	r3, r1
 8000d9e:	7f52      	ldrb	r2, [r2, #29]
 8000da0:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8000da2:	4b09      	ldr	r3, [pc, #36]	@ (8000dc8 <modbusWrite1Register+0x7c>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f203 1045 	addw	r0, r3, #325	@ 0x145
			hModbus->Rxframe,
 8000daa:	4b07      	ldr	r3, [pc, #28]	@ (8000dc8 <modbusWrite1Register+0x7c>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 8000db0:	2208      	movs	r2, #8
 8000db2:	4619      	mov	r1, r3
 8000db4:	f009 fec4 	bl	800ab40 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8000db8:	4b03      	ldr	r3, [pc, #12]	@ (8000dc8 <modbusWrite1Register+0x7c>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2205      	movs	r2, #5
 8000dbe:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271



}
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	2000022c 	.word	0x2000022c

08000dcc <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8000dcc:	b590      	push	{r4, r7, lr}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8000dd2:	4b38      	ldr	r3, [pc, #224]	@ (8000eb4 <modbusRead1Register+0xe8>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	7f1b      	ldrb	r3, [r3, #28]
 8000dd8:	021b      	lsls	r3, r3, #8
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	4a35      	ldr	r2, [pc, #212]	@ (8000eb4 <modbusRead1Register+0xe8>)
 8000dde:	6812      	ldr	r2, [r2, #0]
 8000de0:	7f52      	ldrb	r2, [r2, #29]
 8000de2:	4413      	add	r3, r2
 8000de4:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8000de6:	4b33      	ldr	r3, [pc, #204]	@ (8000eb4 <modbusRead1Register+0xe8>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	7e9b      	ldrb	r3, [r3, #26]
 8000dec:	021b      	lsls	r3, r3, #8
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	4a30      	ldr	r2, [pc, #192]	@ (8000eb4 <modbusRead1Register+0xe8>)
 8000df2:	6812      	ldr	r2, [r2, #0]
 8000df4:	7ed2      	ldrb	r2, [r2, #27]
 8000df6:	4413      	add	r3, r2
 8000df8:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8000dfa:	88fb      	ldrh	r3, [r7, #6]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d002      	beq.n	8000e06 <modbusRead1Register+0x3a>
 8000e00:	88fb      	ldrh	r3, [r7, #6]
 8000e02:	2b7d      	cmp	r3, #125	@ 0x7d
 8000e04:	d903      	bls.n	8000e0e <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8000e06:	2003      	movs	r0, #3
 8000e08:	f000 f856 	bl	8000eb8 <ModbusErrorReply>
		 return;
 8000e0c:	e04e      	b.n	8000eac <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8000e0e:	88ba      	ldrh	r2, [r7, #4]
 8000e10:	4b28      	ldr	r3, [pc, #160]	@ (8000eb4 <modbusRead1Register+0xe8>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	429a      	cmp	r2, r3
 8000e18:	d808      	bhi.n	8000e2c <modbusRead1Register+0x60>
 8000e1a:	88ba      	ldrh	r2, [r7, #4]
 8000e1c:	88fb      	ldrh	r3, [r7, #6]
 8000e1e:	4413      	add	r3, r2
 8000e20:	461a      	mov	r2, r3
 8000e22:	4b24      	ldr	r3, [pc, #144]	@ (8000eb4 <modbusRead1Register+0xe8>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d903      	bls.n	8000e34 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8000e2c:	2002      	movs	r0, #2
 8000e2e:	f000 f843 	bl	8000eb8 <ModbusErrorReply>
		 return;
 8000e32:	e03b      	b.n	8000eac <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8000e34:	4b1f      	ldr	r3, [pc, #124]	@ (8000eb4 <modbusRead1Register+0xe8>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2203      	movs	r2, #3
 8000e3a:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8000e3e:	88fb      	ldrh	r3, [r7, #6]
 8000e40:	b2da      	uxtb	r2, r3
 8000e42:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb4 <modbusRead1Register+0xe8>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	0052      	lsls	r2, r2, #1
 8000e48:	b2d2      	uxtb	r2, r2
 8000e4a:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8000e4e:	2400      	movs	r4, #0
 8000e50:	e020      	b.n	8000e94 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8000e52:	4b18      	ldr	r3, [pc, #96]	@ (8000eb4 <modbusRead1Register+0xe8>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	685a      	ldr	r2, [r3, #4]
 8000e58:	88bb      	ldrh	r3, [r7, #4]
 8000e5a:	4423      	add	r3, r4
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	18d1      	adds	r1, r2, r3
 8000e60:	4b14      	ldr	r3, [pc, #80]	@ (8000eb4 <modbusRead1Register+0xe8>)
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	1c63      	adds	r3, r4, #1
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	7849      	ldrb	r1, [r1, #1]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	460a      	mov	r2, r1
 8000e6e:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8000e72:	4b10      	ldr	r3, [pc, #64]	@ (8000eb4 <modbusRead1Register+0xe8>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	685a      	ldr	r2, [r3, #4]
 8000e78:	88bb      	ldrh	r3, [r7, #4]
 8000e7a:	4423      	add	r3, r4
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	18d1      	adds	r1, r2, r3
 8000e80:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb4 <modbusRead1Register+0xe8>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	0063      	lsls	r3, r4, #1
 8000e86:	3303      	adds	r3, #3
 8000e88:	7809      	ldrb	r1, [r1, #0]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	460a      	mov	r2, r1
 8000e8e:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	for(i=0; i<numberOfDataToRead;i++)
 8000e92:	3401      	adds	r4, #1
 8000e94:	88fb      	ldrh	r3, [r7, #6]
 8000e96:	429c      	cmp	r4, r3
 8000e98:	dbdb      	blt.n	8000e52 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8000e9a:	88fb      	ldrh	r3, [r7, #6]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	4b04      	ldr	r3, [pc, #16]	@ (8000eb4 <modbusRead1Register+0xe8>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	0052      	lsls	r2, r2, #1
 8000ea6:	b2d2      	uxtb	r2, r2
 8000ea8:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271

}
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd90      	pop	{r4, r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	2000022c 	.word	0x2000022c

08000eb8 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8000ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ef8 <ModbusErrorReply+0x40>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	7e5a      	ldrb	r2, [r3, #25]
 8000ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef8 <ModbusErrorReply+0x40>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8000ed0:	b2d2      	uxtb	r2, r2
 8000ed2:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->Txframe[1] = Errorcode;
 8000ed6:	4b08      	ldr	r3, [pc, #32]	@ (8000ef8 <ModbusErrorReply+0x40>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	79fa      	ldrb	r2, [r7, #7]
 8000edc:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
	hModbus->TxCount = 2;
 8000ee0:	4b05      	ldr	r3, [pc, #20]	@ (8000ef8 <ModbusErrorReply+0x40>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2202      	movs	r2, #2
 8000ee6:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	2000022c 	.word	0x2000022c

08000efc <Modbus_frame_response>:

void Modbus_frame_response()
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8000f00:	4b09      	ldr	r3, [pc, #36]	@ (8000f28 <Modbus_frame_response+0x2c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	7e5b      	ldrb	r3, [r3, #25]
 8000f06:	2b03      	cmp	r3, #3
 8000f08:	d004      	beq.n	8000f14 <Modbus_frame_response+0x18>
 8000f0a:	2b06      	cmp	r3, #6
 8000f0c:	d105      	bne.n	8000f1a <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8000f0e:	f7ff ff1d 	bl	8000d4c <modbusWrite1Register>
		break;
 8000f12:	e006      	b.n	8000f22 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8000f14:	f7ff ff5a 	bl	8000dcc <modbusRead1Register>
		break;
 8000f18:	e003      	b.n	8000f22 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8000f1a:	2001      	movs	r0, #1
 8000f1c:	f7ff ffcc 	bl	8000eb8 <ModbusErrorReply>
		break;
 8000f20:	bf00      	nop

	}
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	2000022c 	.word	0x2000022c

08000f2c <Modbus_Emission>:

void Modbus_Emission()
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000f32:	4b3c      	ldr	r3, [pc, #240]	@ (8001024 <Modbus_Emission+0xf8>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f3c:	2b20      	cmp	r3, #32
 8000f3e:	d15d      	bne.n	8000ffc <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8000f40:	4b38      	ldr	r3, [pc, #224]	@ (8001024 <Modbus_Emission+0xf8>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4b37      	ldr	r3, [pc, #220]	@ (8001024 <Modbus_Emission+0xf8>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	7812      	ldrb	r2, [r2, #0]
 8000f4a:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8000f4e:	4b35      	ldr	r3, [pc, #212]	@ (8001024 <Modbus_Emission+0xf8>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 8000f56:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8000f58:	4b32      	ldr	r3, [pc, #200]	@ (8001024 <Modbus_Emission+0xf8>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f203 1145 	addw	r1, r3, #325	@ 0x145
				hModbus->TxCount
 8000f60:	4b30      	ldr	r3, [pc, #192]	@ (8001024 <Modbus_Emission+0xf8>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
		memcpy
 8000f68:	461a      	mov	r2, r3
 8000f6a:	f009 fde9 	bl	800ab40 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8000f6e:	4b2d      	ldr	r3, [pc, #180]	@ (8001024 <Modbus_Emission+0xf8>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
 8000f76:	461a      	mov	r2, r3
 8000f78:	4b2a      	ldr	r3, [pc, #168]	@ (8001024 <Modbus_Emission+0xf8>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	3203      	adds	r2, #3
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8000f84:	4b27      	ldr	r3, [pc, #156]	@ (8001024 <Modbus_Emission+0xf8>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8000f8c:	4b25      	ldr	r3, [pc, #148]	@ (8001024 <Modbus_Emission+0xf8>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8000f94:	3b02      	subs	r3, #2
 8000f96:	4619      	mov	r1, r3
 8000f98:	4610      	mov	r0, r2
 8000f9a:	f7ff fd99 	bl	8000ad0 <CRC16>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8000fa2:	4b20      	ldr	r3, [pc, #128]	@ (8001024 <Modbus_Emission+0xf8>)
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	4b1f      	ldr	r3, [pc, #124]	@ (8001024 <Modbus_Emission+0xf8>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8000fae:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8000fb0:	7939      	ldrb	r1, [r7, #4]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	460a      	mov	r2, r1
 8000fb6:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8000fba:	4b1a      	ldr	r3, [pc, #104]	@ (8001024 <Modbus_Emission+0xf8>)
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	4b19      	ldr	r3, [pc, #100]	@ (8001024 <Modbus_Emission+0xf8>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8000fc6:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8000fc8:	7979      	ldrb	r1, [r7, #5]
 8000fca:	4413      	add	r3, r2
 8000fcc:	460a      	mov	r2, r1
 8000fce:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000fd2:	4b14      	ldr	r3, [pc, #80]	@ (8001024 <Modbus_Emission+0xf8>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fdc:	2b20      	cmp	r3, #32
 8000fde:	d10d      	bne.n	8000ffc <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8000fe0:	4b10      	ldr	r3, [pc, #64]	@ (8001024 <Modbus_Emission+0xf8>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8000fe6:	4b0f      	ldr	r3, [pc, #60]	@ (8001024 <Modbus_Emission+0xf8>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8000fee:	4b0d      	ldr	r3, [pc, #52]	@ (8001024 <Modbus_Emission+0xf8>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8000ff2:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	f007 fa38 	bl	800846c <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8000ffc:	4b09      	ldr	r3, [pc, #36]	@ (8001024 <Modbus_Emission+0xf8>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2200      	movs	r2, #0
 8001002:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001004:	4b07      	ldr	r3, [pc, #28]	@ (8001024 <Modbus_Emission+0xf8>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2200      	movs	r2, #0
 800100a:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 800100c:	4b05      	ldr	r3, [pc, #20]	@ (8001024 <Modbus_Emission+0xf8>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2200      	movs	r2, #0
 8001012:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 8001014:	4b03      	ldr	r3, [pc, #12]	@ (8001024 <Modbus_Emission+0xf8>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2202      	movs	r2, #2
 800101a:	761a      	strb	r2, [r3, #24]
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	2000022c 	.word	0x2000022c

08001028 <create_prismatic_motor>:

float v_pris_dis[2] = {0, 0};
float v_pris_ref[3] = {0, 0, 0};

PrismaticMotor create_prismatic_motor(double J, double B, double Eff, double Ke,
		double Kt, double R, double L) {
 8001028:	b4b0      	push	{r4, r5, r7}
 800102a:	b09f      	sub	sp, #124	@ 0x7c
 800102c:	af00      	add	r7, sp, #0
 800102e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001030:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
 8001034:	ed87 1b0a 	vstr	d1, [r7, #40]	@ 0x28
 8001038:	ed87 2b08 	vstr	d2, [r7, #32]
 800103c:	ed87 3b06 	vstr	d3, [r7, #24]
 8001040:	ed87 4b04 	vstr	d4, [r7, #16]
 8001044:	ed87 5b02 	vstr	d5, [r7, #8]
 8001048:	ed87 6b00 	vstr	d6, [r7]
	PrismaticMotor motor = { J, B, Eff, Ke, Kt, R, L };
 800104c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001050:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8001054:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001058:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 800105c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001060:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 8001064:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001068:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 800106c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001070:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 8001074:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001078:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
 800107c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001080:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
	return motor;
 8001084:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001086:	461d      	mov	r5, r3
 8001088:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 800108c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800108e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001090:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001092:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001094:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001096:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001098:	e894 0003 	ldmia.w	r4, {r0, r1}
 800109c:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80010a0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80010a2:	377c      	adds	r7, #124	@ 0x7c
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bcb0      	pop	{r4, r5, r7}
 80010a8:	4770      	bx	lr
 80010aa:	0000      	movs	r0, r0
 80010ac:	0000      	movs	r0, r0
	...

080010b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b0:	b5b0      	push	{r4, r5, r7, lr}
 80010b2:	b094      	sub	sp, #80	@ 0x50
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010b6:	f001 fd3a 	bl	8002b2e <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ba:	f000 fa9f 	bl	80015fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010be:	f000 ff79 	bl	8001fb4 <MX_GPIO_Init>
  MX_DMA_Init();
 80010c2:	f000 ff4d 	bl	8001f60 <MX_DMA_Init>
  MX_TIM3_Init();
 80010c6:	f000 fc65 	bl	8001994 <MX_TIM3_Init>
  MX_ADC1_Init();
 80010ca:	f000 fae3 	bl	8001694 <MX_ADC1_Init>
  MX_TIM1_Init();
 80010ce:	f000 fbbf 	bl	8001850 <MX_TIM1_Init>
  MX_TIM2_Init();
 80010d2:	f000 fc11 	bl	80018f8 <MX_TIM2_Init>
  MX_TIM4_Init();
 80010d6:	f000 fcb3 	bl	8001a40 <MX_TIM4_Init>
  MX_TIM20_Init();
 80010da:	f000 fe37 	bl	8001d4c <MX_TIM20_Init>
  MX_TIM8_Init();
 80010de:	f000 fd05 	bl	8001aec <MX_TIM8_Init>
  MX_TIM16_Init();
 80010e2:	f000 fdb3 	bl	8001c4c <MX_TIM16_Init>
  MX_USART2_UART_Init();
 80010e6:	f000 feed 	bl	8001ec4 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 80010ea:	f000 fb4b 	bl	8001784 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim20);
 80010ee:	4850      	ldr	r0, [pc, #320]	@ (8001230 <main+0x180>)
 80010f0:	f004 fee0 	bl	8005eb4 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim8);
 80010f4:	484f      	ldr	r0, [pc, #316]	@ (8001234 <main+0x184>)
 80010f6:	f004 fedd 	bl	8005eb4 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 80010fa:	210c      	movs	r1, #12
 80010fc:	484d      	ldr	r0, [pc, #308]	@ (8001234 <main+0x184>)
 80010fe:	f005 f89d 	bl	800623c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim20, TIM_CHANNEL_1);
 8001102:	2100      	movs	r1, #0
 8001104:	484a      	ldr	r0, [pc, #296]	@ (8001230 <main+0x180>)
 8001106:	f005 f899 	bl	800623c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim20, TIM_CHANNEL_3);
 800110a:	2108      	movs	r1, #8
 800110c:	4848      	ldr	r0, [pc, #288]	@ (8001230 <main+0x180>)
 800110e:	f005 f895 	bl	800623c <HAL_TIM_PWM_Start>
	Encoder_Init(&encoder1, &htim4);
 8001112:	4949      	ldr	r1, [pc, #292]	@ (8001238 <main+0x188>)
 8001114:	4849      	ldr	r0, [pc, #292]	@ (800123c <main+0x18c>)
 8001116:	f7ff fa15 	bl	8000544 <Encoder_Init>
	Encoder_Init(&encoder2, &htim3);
 800111a:	4949      	ldr	r1, [pc, #292]	@ (8001240 <main+0x190>)
 800111c:	4849      	ldr	r0, [pc, #292]	@ (8001244 <main+0x194>)
 800111e:	f7ff fa11 	bl	8000544 <Encoder_Init>
	HAL_ADC_Start(&hadc1);
 8001122:	4849      	ldr	r0, [pc, #292]	@ (8001248 <main+0x198>)
 8001124:	f002 f93c 	bl	80033a0 <HAL_ADC_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 8001128:	4848      	ldr	r0, [pc, #288]	@ (800124c <main+0x19c>)
 800112a:	f004 ff33 	bl	8005f94 <HAL_TIM_Base_Start_IT>

	int lastTick = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int pre_tick = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	643b      	str	r3, [r7, #64]	@ 0x40
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001136:	213c      	movs	r1, #60	@ 0x3c
 8001138:	4841      	ldr	r0, [pc, #260]	@ (8001240 <main+0x190>)
 800113a:	f005 fb3b 	bl	80067b4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800113e:	213c      	movs	r1, #60	@ 0x3c
 8001140:	483d      	ldr	r0, [pc, #244]	@ (8001238 <main+0x188>)
 8001142:	f005 fb37 	bl	80067b4 <HAL_TIM_Encoder_Start>

	hmodbus.huart = &huart2;
 8001146:	4b42      	ldr	r3, [pc, #264]	@ (8001250 <main+0x1a0>)
 8001148:	4a42      	ldr	r2, [pc, #264]	@ (8001254 <main+0x1a4>)
 800114a:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim16;
 800114c:	4b40      	ldr	r3, [pc, #256]	@ (8001250 <main+0x1a0>)
 800114e:	4a42      	ldr	r2, [pc, #264]	@ (8001258 <main+0x1a8>)
 8001150:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x15;
 8001152:	4b3f      	ldr	r3, [pc, #252]	@ (8001250 <main+0x1a0>)
 8001154:	2215      	movs	r2, #21
 8001156:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize = 200;
 8001158:	4b3d      	ldr	r3, [pc, #244]	@ (8001250 <main+0x1a0>)
 800115a:	22c8      	movs	r2, #200	@ 0xc8
 800115c:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, registerFrame);
 800115e:	493f      	ldr	r1, [pc, #252]	@ (800125c <main+0x1ac>)
 8001160:	483b      	ldr	r0, [pc, #236]	@ (8001250 <main+0x1a0>)
 8001162:	f7ff fc5f 	bl	8000a24 <Modbus_init>

	Kalman_Init(&kf);
 8001166:	483e      	ldr	r0, [pc, #248]	@ (8001260 <main+0x1b0>)
 8001168:	f7ff fb08 	bl	800077c <Kalman_Init>

	kf.A_data[0] = 1;
 800116c:	4b3c      	ldr	r3, [pc, #240]	@ (8001260 <main+0x1b0>)
 800116e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001172:	671a      	str	r2, [r3, #112]	@ 0x70
	kf.A_data[1] = 0.0009998;
 8001174:	4b3a      	ldr	r3, [pc, #232]	@ (8001260 <main+0x1b0>)
 8001176:	4a3b      	ldr	r2, [pc, #236]	@ (8001264 <main+0x1b4>)
 8001178:	675a      	str	r2, [r3, #116]	@ 0x74
	kf.A_data[2] = -2.659e-06;
 800117a:	4b39      	ldr	r3, [pc, #228]	@ (8001260 <main+0x1b0>)
 800117c:	4a3a      	ldr	r2, [pc, #232]	@ (8001268 <main+0x1b8>)
 800117e:	679a      	str	r2, [r3, #120]	@ 0x78
	kf.A_data[3] = 8.108e-08;
 8001180:	4b37      	ldr	r3, [pc, #220]	@ (8001260 <main+0x1b0>)
 8001182:	4a3a      	ldr	r2, [pc, #232]	@ (800126c <main+0x1bc>)
 8001184:	67da      	str	r2, [r3, #124]	@ 0x7c
	kf.A_data[4] = 0;
 8001186:	4b36      	ldr	r3, [pc, #216]	@ (8001260 <main+0x1b0>)
 8001188:	f04f 0200 	mov.w	r2, #0
 800118c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	kf.A_data[5] = 0.9996;
 8001190:	4b33      	ldr	r3, [pc, #204]	@ (8001260 <main+0x1b0>)
 8001192:	4a37      	ldr	r2, [pc, #220]	@ (8001270 <main+0x1c0>)
 8001194:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	kf.A_data[6] = -0.005318;
 8001198:	4b31      	ldr	r3, [pc, #196]	@ (8001260 <main+0x1b0>)
 800119a:	4a36      	ldr	r2, [pc, #216]	@ (8001274 <main+0x1c4>)
 800119c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	kf.A_data[7] = 0.0001622;
 80011a0:	4b2f      	ldr	r3, [pc, #188]	@ (8001260 <main+0x1b0>)
 80011a2:	4a35      	ldr	r2, [pc, #212]	@ (8001278 <main+0x1c8>)
 80011a4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	kf.A_data[8] = 0;
 80011a8:	4b2d      	ldr	r3, [pc, #180]	@ (8001260 <main+0x1b0>)
 80011aa:	f04f 0200 	mov.w	r2, #0
 80011ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	kf.A_data[9] = 0;
 80011b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001260 <main+0x1b0>)
 80011b4:	f04f 0200 	mov.w	r2, #0
 80011b8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	kf.A_data[10] = 1;
 80011bc:	4b28      	ldr	r3, [pc, #160]	@ (8001260 <main+0x1b0>)
 80011be:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80011c2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	kf.A_data[11] = 0;
 80011c6:	4b26      	ldr	r3, [pc, #152]	@ (8001260 <main+0x1b0>)
 80011c8:	f04f 0200 	mov.w	r2, #0
 80011cc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	kf.A_data[12] = 0;
 80011d0:	4b23      	ldr	r3, [pc, #140]	@ (8001260 <main+0x1b0>)
 80011d2:	f04f 0200 	mov.w	r2, #0
 80011d6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	kf.A_data[13] = -2.746;
 80011da:	4b21      	ldr	r3, [pc, #132]	@ (8001260 <main+0x1b0>)
 80011dc:	4a27      	ldr	r2, [pc, #156]	@ (800127c <main+0x1cc>)
 80011de:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	kf.A_data[14] = 0.007303;
 80011e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001260 <main+0x1b0>)
 80011e4:	4a26      	ldr	r2, [pc, #152]	@ (8001280 <main+0x1d0>)
 80011e6:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	kf.A_data[15] = 0.1354;
 80011ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001260 <main+0x1b0>)
 80011ec:	4a25      	ldr	r2, [pc, #148]	@ (8001284 <main+0x1d4>)
 80011ee:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

	kf.B_data[0] = 1.203e-07;
 80011f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001260 <main+0x1b0>)
 80011f4:	4a24      	ldr	r2, [pc, #144]	@ (8001288 <main+0x1d8>)
 80011f6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	kf.B_data[1] = 0.0002406;
 80011fa:	4b19      	ldr	r3, [pc, #100]	@ (8001260 <main+0x1b0>)
 80011fc:	4a23      	ldr	r2, [pc, #140]	@ (800128c <main+0x1dc>)
 80011fe:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	kf.B_data[2] = 0;
 8001202:	4b17      	ldr	r3, [pc, #92]	@ (8001260 <main+0x1b0>)
 8001204:	f04f 0200 	mov.w	r2, #0
 8001208:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	kf.B_data[3] = 1.685;
 800120c:	4b14      	ldr	r3, [pc, #80]	@ (8001260 <main+0x1b0>)
 800120e:	4a20      	ldr	r2, [pc, #128]	@ (8001290 <main+0x1e0>)
 8001210:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc

	// Identity H
	for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 8001214:	2300      	movs	r3, #0
 8001216:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001218:	e050      	b.n	80012bc <main+0x20c>
	    for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 800121a:	2300      	movs	r3, #0
 800121c:	647b      	str	r3, [r7, #68]	@ 0x44
 800121e:	e047      	b.n	80012b0 <main+0x200>
	        kf.H_data[i * KALMAN_STATE_DIM + j] = (i == j) ? 1.0f : 0.0f;
 8001220:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001222:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001224:	429a      	cmp	r2, r3
 8001226:	d135      	bne.n	8001294 <main+0x1e4>
 8001228:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800122c:	e034      	b.n	8001298 <main+0x1e8>
 800122e:	bf00      	nop
 8001230:	200007d0 	.word	0x200007d0
 8001234:	20000638 	.word	0x20000638
 8001238:	2000056c 	.word	0x2000056c
 800123c:	200009c8 	.word	0x200009c8
 8001240:	200004a0 	.word	0x200004a0
 8001244:	200009fc 	.word	0x200009fc
 8001248:	20000230 	.word	0x20000230
 800124c:	200003d4 	.word	0x200003d4
 8001250:	20000a58 	.word	0x20000a58
 8001254:	2000089c 	.word	0x2000089c
 8001258:	20000704 	.word	0x20000704
 800125c:	20000f30 	.word	0x20000f30
 8001260:	2000117c 	.word	0x2000117c
 8001264:	3a830bb9 	.word	0x3a830bb9
 8001268:	b6327146 	.word	0xb6327146
 800126c:	33ae1e34 	.word	0x33ae1e34
 8001270:	3f7fe5c9 	.word	0x3f7fe5c9
 8001274:	bbae429e 	.word	0xbbae429e
 8001278:	392a143b 	.word	0x392a143b
 800127c:	c02fbe77 	.word	0xc02fbe77
 8001280:	3bef4e01 	.word	0x3bef4e01
 8001284:	3e0aa64c 	.word	0x3e0aa64c
 8001288:	34012bd0 	.word	0x34012bd0
 800128c:	397c4992 	.word	0x397c4992
 8001290:	3fd7ae14 	.word	0x3fd7ae14
 8001294:	f04f 0200 	mov.w	r2, #0
 8001298:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800129a:	0099      	lsls	r1, r3, #2
 800129c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800129e:	440b      	add	r3, r1
 80012a0:	49b1      	ldr	r1, [pc, #708]	@ (8001568 <main+0x4b8>)
 80012a2:	333c      	adds	r3, #60	@ 0x3c
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	440b      	add	r3, r1
 80012a8:	601a      	str	r2, [r3, #0]
	    for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 80012aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80012ac:	3301      	adds	r3, #1
 80012ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80012b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80012b2:	2b03      	cmp	r3, #3
 80012b4:	ddb4      	ble.n	8001220 <main+0x170>
	for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 80012b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80012b8:	3301      	adds	r3, #1
 80012ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80012bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80012be:	2b03      	cmp	r3, #3
 80012c0:	ddab      	ble.n	800121a <main+0x16a>
	    }
	}

	// Prismatic
	kf.x_data[0] = 0;
 80012c2:	4ba9      	ldr	r3, [pc, #676]	@ (8001568 <main+0x4b8>)
 80012c4:	f04f 0200 	mov.w	r2, #0
 80012c8:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
	kf.x_data[1] = 0;
 80012cc:	4ba6      	ldr	r3, [pc, #664]	@ (8001568 <main+0x4b8>)
 80012ce:	f04f 0200 	mov.w	r2, #0
 80012d2:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
	kf.x_data[2] = 0;
 80012d6:	4ba4      	ldr	r3, [pc, #656]	@ (8001568 <main+0x4b8>)
 80012d8:	f04f 0200 	mov.w	r2, #0
 80012dc:	f8c3 223c 	str.w	r2, [r3, #572]	@ 0x23c
	kf.x_data[3] = 0;
 80012e0:	4ba1      	ldr	r3, [pc, #644]	@ (8001568 <main+0x4b8>)
 80012e2:	f04f 0200 	mov.w	r2, #0
 80012e6:	f8c3 2240 	str.w	r2, [r3, #576]	@ 0x240

	Kalman_SetMeasurementNoise(&kf, 0.01f);
 80012ea:	ed9f 0aa0 	vldr	s0, [pc, #640]	@ 800156c <main+0x4bc>
 80012ee:	489e      	ldr	r0, [pc, #632]	@ (8001568 <main+0x4b8>)
 80012f0:	f7ff fb16 	bl	8000920 <Kalman_SetMeasurementNoise>
	Kalman_SetProcessNoise(&kf, 0.1f);
 80012f4:	ed9f 0a9e 	vldr	s0, [pc, #632]	@ 8001570 <main+0x4c0>
 80012f8:	489b      	ldr	r0, [pc, #620]	@ (8001568 <main+0x4b8>)
 80012fa:	f7ff fae1 	bl	80008c0 <Kalman_SetProcessNoise>
	motor = create_prismatic_motor(2.29e-04, 4.82e-04, 8.75e-01, 1.77e-01, 1.77e-01, 3.8719, 0.0016);
 80012fe:	4c9d      	ldr	r4, [pc, #628]	@ (8001574 <main+0x4c4>)
 8001300:	463b      	mov	r3, r7
 8001302:	ed9f 6b8d 	vldr	d6, [pc, #564]	@ 8001538 <main+0x488>
 8001306:	ed9f 5b8e 	vldr	d5, [pc, #568]	@ 8001540 <main+0x490>
 800130a:	ed9f 4b8f 	vldr	d4, [pc, #572]	@ 8001548 <main+0x498>
 800130e:	ed9f 3b8e 	vldr	d3, [pc, #568]	@ 8001548 <main+0x498>
 8001312:	ed9f 2b8f 	vldr	d2, [pc, #572]	@ 8001550 <main+0x4a0>
 8001316:	ed9f 1b90 	vldr	d1, [pc, #576]	@ 8001558 <main+0x4a8>
 800131a:	ed9f 0b91 	vldr	d0, [pc, #580]	@ 8001560 <main+0x4b0>
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff fe82 	bl	8001028 <create_prismatic_motor>
 8001324:	4625      	mov	r5, r4
 8001326:	463c      	mov	r4, r7
 8001328:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800132a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800132c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800132e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001330:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001332:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001334:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001338:	e885 0003 	stmia.w	r5, {r0, r1}

	// Prismatic Position
	Pris_posi_PID.Kp = 1;
 800133c:	4b8e      	ldr	r3, [pc, #568]	@ (8001578 <main+0x4c8>)
 800133e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001342:	619a      	str	r2, [r3, #24]
	Pris_posi_PID.Ki = 0.05;
 8001344:	4b8c      	ldr	r3, [pc, #560]	@ (8001578 <main+0x4c8>)
 8001346:	4a8d      	ldr	r2, [pc, #564]	@ (800157c <main+0x4cc>)
 8001348:	61da      	str	r2, [r3, #28]
	Pris_posi_PID.Kd = 0.1;
 800134a:	4b8b      	ldr	r3, [pc, #556]	@ (8001578 <main+0x4c8>)
 800134c:	4a8c      	ldr	r2, [pc, #560]	@ (8001580 <main+0x4d0>)
 800134e:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Pris_posi_PID, 0);
 8001350:	2100      	movs	r1, #0
 8001352:	4889      	ldr	r0, [pc, #548]	@ (8001578 <main+0x4c8>)
 8001354:	f009 fb7a 	bl	800aa4c <arm_pid_init_f32>

	// Prismatic Velocity
	Pris_velo_PID.Kp = 1;
 8001358:	4b8a      	ldr	r3, [pc, #552]	@ (8001584 <main+0x4d4>)
 800135a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800135e:	619a      	str	r2, [r3, #24]
	Pris_velo_PID.Ki = 0.00001;
 8001360:	4b88      	ldr	r3, [pc, #544]	@ (8001584 <main+0x4d4>)
 8001362:	4a89      	ldr	r2, [pc, #548]	@ (8001588 <main+0x4d8>)
 8001364:	61da      	str	r2, [r3, #28]
	Pris_velo_PID.Kd = 0;
 8001366:	4b87      	ldr	r3, [pc, #540]	@ (8001584 <main+0x4d4>)
 8001368:	f04f 0200 	mov.w	r2, #0
 800136c:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Pris_velo_PID, 0);
 800136e:	2100      	movs	r1, #0
 8001370:	4884      	ldr	r0, [pc, #528]	@ (8001584 <main+0x4d4>)
 8001372:	f009 fb6b 	bl	800aa4c <arm_pid_init_f32>

	// Revolute Position
	Rev_posi_PID.Kp = 1;
 8001376:	4b85      	ldr	r3, [pc, #532]	@ (800158c <main+0x4dc>)
 8001378:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800137c:	619a      	str	r2, [r3, #24]
	Rev_posi_PID.Ki = 0.00001;
 800137e:	4b83      	ldr	r3, [pc, #524]	@ (800158c <main+0x4dc>)
 8001380:	4a81      	ldr	r2, [pc, #516]	@ (8001588 <main+0x4d8>)
 8001382:	61da      	str	r2, [r3, #28]
	Rev_posi_PID.Kd = 0.1;
 8001384:	4b81      	ldr	r3, [pc, #516]	@ (800158c <main+0x4dc>)
 8001386:	4a7e      	ldr	r2, [pc, #504]	@ (8001580 <main+0x4d0>)
 8001388:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Rev_posi_PID, 0);
 800138a:	2100      	movs	r1, #0
 800138c:	487f      	ldr	r0, [pc, #508]	@ (800158c <main+0x4dc>)
 800138e:	f009 fb5d 	bl	800aa4c <arm_pid_init_f32>

	// Revolute Velocity
	Rev_velo_PID.Kp = 1;
 8001392:	4b7f      	ldr	r3, [pc, #508]	@ (8001590 <main+0x4e0>)
 8001394:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001398:	619a      	str	r2, [r3, #24]
	Rev_velo_PID.Ki = 0.00001;
 800139a:	4b7d      	ldr	r3, [pc, #500]	@ (8001590 <main+0x4e0>)
 800139c:	4a7a      	ldr	r2, [pc, #488]	@ (8001588 <main+0x4d8>)
 800139e:	61da      	str	r2, [r3, #28]
	Rev_velo_PID.Kd = 0;
 80013a0:	4b7b      	ldr	r3, [pc, #492]	@ (8001590 <main+0x4e0>)
 80013a2:	f04f 0200 	mov.w	r2, #0
 80013a6:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Rev_velo_PID, 0);
 80013a8:	2100      	movs	r1, #0
 80013aa:	4879      	ldr	r0, [pc, #484]	@ (8001590 <main+0x4e0>)
 80013ac:	f009 fb4e 	bl	800aa4c <arm_pid_init_f32>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, DIR_18V);
 80013b0:	4b78      	ldr	r3, [pc, #480]	@ (8001594 <main+0x4e4>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	461a      	mov	r2, r3
 80013b8:	2140      	movs	r1, #64	@ 0x40
 80013ba:	4877      	ldr	r0, [pc, #476]	@ (8001598 <main+0x4e8>)
 80013bc:	f003 fcb6 	bl	8004d2c <HAL_GPIO_WritePin>

		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
		//__HAL_TIM_SET_COMPARE(&htim20,TIM_CHANNEL_1,500);
		//__HAL_TIM_SET_COMPARE(&htim20,TIM_CHANNEL_3,status);
		HAL_ADC_Start(&hadc1);
 80013c0:	4876      	ldr	r0, [pc, #472]	@ (800159c <main+0x4ec>)
 80013c2:	f001 ffed 	bl	80033a0 <HAL_ADC_Start>
		HAL_ADC_Start(&hadc2);
 80013c6:	4876      	ldr	r0, [pc, #472]	@ (80015a0 <main+0x4f0>)
 80013c8:	f001 ffea 	bl	80033a0 <HAL_ADC_Start>
		adc_1 = HAL_ADC_GetValue(&hadc1);
 80013cc:	4873      	ldr	r0, [pc, #460]	@ (800159c <main+0x4ec>)
 80013ce:	f002 f8cb 	bl	8003568 <HAL_ADC_GetValue>
 80013d2:	4603      	mov	r3, r0
 80013d4:	b29a      	uxth	r2, r3
 80013d6:	4b73      	ldr	r3, [pc, #460]	@ (80015a4 <main+0x4f4>)
 80013d8:	801a      	strh	r2, [r3, #0]
		adc_2 = HAL_ADC_GetValue(&hadc2);
 80013da:	4871      	ldr	r0, [pc, #452]	@ (80015a0 <main+0x4f0>)
 80013dc:	f002 f8c4 	bl	8003568 <HAL_ADC_GetValue>
 80013e0:	4603      	mov	r3, r0
 80013e2:	b29a      	uxth	r2, r3
 80013e4:	4b70      	ldr	r3, [pc, #448]	@ (80015a8 <main+0x4f8>)
 80013e6:	801a      	strh	r2, [r3, #0]
		QEIReadRaw3 = __HAL_TIM_GET_COUNTER(&htim3);
 80013e8:	4b70      	ldr	r3, [pc, #448]	@ (80015ac <main+0x4fc>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ee:	4a70      	ldr	r2, [pc, #448]	@ (80015b0 <main+0x500>)
 80013f0:	6013      	str	r3, [r2, #0]
		QEIReadRaw4 = __HAL_TIM_GET_COUNTER(&htim4);
 80013f2:	4b70      	ldr	r3, [pc, #448]	@ (80015b4 <main+0x504>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013f8:	4a6f      	ldr	r2, [pc, #444]	@ (80015b8 <main+0x508>)
 80013fa:	6013      	str	r3, [r2, #0]
		Modbus_Protocal_Worker();
 80013fc:	f7ff fba0 	bl	8000b40 <Modbus_Protocal_Worker>
		//modbus_r_position(&hmodbus,7);
		hmodbus.RegisterAddress[0x00].U16 = 22881;
 8001400:	4b6e      	ldr	r3, [pc, #440]	@ (80015bc <main+0x50c>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f645 1261 	movw	r2, #22881	@ 0x5961
 8001408:	801a      	strh	r2, [r3, #0]
//		registerFrame[0x06].U16 = 7;
//		registerFrame[0x07].U16 = 8;
//		registerFrame[0x08].U16 = 9;
		//registerFrame[0x15].U16 = 10;
		//}
		uint32_t currentTick = HAL_GetTick();
 800140a:	f001 fbf5 	bl	8002bf8 <HAL_GetTick>
 800140e:	63f8      	str	r0, [r7, #60]	@ 0x3c
		float dt = (currentTick - lastTick) / 1000.0f;
 8001410:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001412:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	ee07 3a90 	vmov	s15, r3
 800141a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800141e:	eddf 6a68 	vldr	s13, [pc, #416]	@ 80015c0 <main+0x510>
 8001422:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001426:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
//		QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim4);
		if (dt >= 0.01f) {
 800142a:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800142e:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 800156c <main+0x4bc>
 8001432:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800143a:	db3b      	blt.n	80014b4 <main+0x404>
			Encoder_Update(&encoder1, dt);
 800143c:	ed97 0a0e 	vldr	s0, [r7, #56]	@ 0x38
 8001440:	4860      	ldr	r0, [pc, #384]	@ (80015c4 <main+0x514>)
 8001442:	f7ff f8a9 	bl	8000598 <Encoder_Update>
			Encoder_Update(&encoder2, dt);
 8001446:	ed97 0a0e 	vldr	s0, [r7, #56]	@ 0x38
 800144a:	485f      	ldr	r0, [pc, #380]	@ (80015c8 <main+0x518>)
 800144c:	f7ff f8a4 	bl	8000598 <Encoder_Update>
			lastTick = currentTick;
 8001450:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001452:	64fb      	str	r3, [r7, #76]	@ 0x4c

			p1 = Encoder_GetPosition(&encoder1);
 8001454:	485b      	ldr	r0, [pc, #364]	@ (80015c4 <main+0x514>)
 8001456:	f7ff f955 	bl	8000704 <Encoder_GetPosition>
 800145a:	eef0 7a40 	vmov.f32	s15, s0
 800145e:	4b5b      	ldr	r3, [pc, #364]	@ (80015cc <main+0x51c>)
 8001460:	edc3 7a00 	vstr	s15, [r3]
			v1 = Encoder_GetVelocity(&encoder1);
 8001464:	4857      	ldr	r0, [pc, #348]	@ (80015c4 <main+0x514>)
 8001466:	f7ff f95c 	bl	8000722 <Encoder_GetVelocity>
 800146a:	eef0 7a40 	vmov.f32	s15, s0
 800146e:	4b58      	ldr	r3, [pc, #352]	@ (80015d0 <main+0x520>)
 8001470:	edc3 7a00 	vstr	s15, [r3]
			a1 = Encoder_GetAcceleration(&encoder1);
 8001474:	4853      	ldr	r0, [pc, #332]	@ (80015c4 <main+0x514>)
 8001476:	f7ff f963 	bl	8000740 <Encoder_GetAcceleration>
 800147a:	eef0 7a40 	vmov.f32	s15, s0
 800147e:	4b55      	ldr	r3, [pc, #340]	@ (80015d4 <main+0x524>)
 8001480:	edc3 7a00 	vstr	s15, [r3]

			p2 = Encoder_GetPosition(&encoder2);
 8001484:	4850      	ldr	r0, [pc, #320]	@ (80015c8 <main+0x518>)
 8001486:	f7ff f93d 	bl	8000704 <Encoder_GetPosition>
 800148a:	eef0 7a40 	vmov.f32	s15, s0
 800148e:	4b52      	ldr	r3, [pc, #328]	@ (80015d8 <main+0x528>)
 8001490:	edc3 7a00 	vstr	s15, [r3]
			v2 = Encoder_GetVelocity(&encoder2);
 8001494:	484c      	ldr	r0, [pc, #304]	@ (80015c8 <main+0x518>)
 8001496:	f7ff f944 	bl	8000722 <Encoder_GetVelocity>
 800149a:	eef0 7a40 	vmov.f32	s15, s0
 800149e:	4b4f      	ldr	r3, [pc, #316]	@ (80015dc <main+0x52c>)
 80014a0:	edc3 7a00 	vstr	s15, [r3]
			a2 = Encoder_GetAcceleration(&encoder2);
 80014a4:	4848      	ldr	r0, [pc, #288]	@ (80015c8 <main+0x518>)
 80014a6:	f7ff f94b 	bl	8000740 <Encoder_GetAcceleration>
 80014aa:	eef0 7a40 	vmov.f32	s15, s0
 80014ae:	4b4c      	ldr	r3, [pc, #304]	@ (80015e0 <main+0x530>)
 80014b0:	edc3 7a00 	vstr	s15, [r3]
//		float measurement[4] = {1.0f, 0.2f, 0.5f, 0.1f};
//		Kalman_Predict(&kf);
//		Kalman_Update(&kf, measurement);

//		pwm = voltage_to_pwm(voltage + Prismatic_dis() + V_pris_posi_PID);
		if (V_pris_posi_PID < 0) {
 80014b4:	4b4b      	ldr	r3, [pc, #300]	@ (80015e4 <main+0x534>)
 80014b6:	edd3 7a00 	vldr	s15, [r3]
 80014ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c2:	d50b      	bpl.n	80014dc <main+0x42c>
			DIR_24V = 0;
 80014c4:	4b48      	ldr	r3, [pc, #288]	@ (80015e8 <main+0x538>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
			V_absoulte = fabsf(V_pris_posi_PID);
 80014ca:	4b46      	ldr	r3, [pc, #280]	@ (80015e4 <main+0x534>)
 80014cc:	edd3 7a00 	vldr	s15, [r3]
 80014d0:	eef0 7ae7 	vabs.f32	s15, s15
 80014d4:	4b45      	ldr	r3, [pc, #276]	@ (80015ec <main+0x53c>)
 80014d6:	edc3 7a00 	vstr	s15, [r3]
 80014da:	e00e      	b.n	80014fa <main+0x44a>
		} else if (V_pris_posi_PID > 0) {
 80014dc:	4b41      	ldr	r3, [pc, #260]	@ (80015e4 <main+0x534>)
 80014de:	edd3 7a00 	vldr	s15, [r3]
 80014e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ea:	dd06      	ble.n	80014fa <main+0x44a>
			DIR_24V = 1;
 80014ec:	4b3e      	ldr	r3, [pc, #248]	@ (80015e8 <main+0x538>)
 80014ee:	2201      	movs	r2, #1
 80014f0:	601a      	str	r2, [r3, #0]
			V_absoulte = V_pris_posi_PID;
 80014f2:	4b3c      	ldr	r3, [pc, #240]	@ (80015e4 <main+0x534>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a3d      	ldr	r2, [pc, #244]	@ (80015ec <main+0x53c>)
 80014f8:	6013      	str	r3, [r2, #0]
		}
		pwm_pris_posi = voltage_to_pwm(V_absoulte);
 80014fa:	4b3c      	ldr	r3, [pc, #240]	@ (80015ec <main+0x53c>)
 80014fc:	edd3 7a00 	vldr	s15, [r3]
 8001500:	eeb0 0a67 	vmov.f32	s0, s15
 8001504:	f000 ff5a 	bl	80023bc <voltage_to_pwm>
 8001508:	eef0 7a40 	vmov.f32	s15, s0
 800150c:	4b38      	ldr	r3, [pc, #224]	@ (80015f0 <main+0x540>)
 800150e:	edc3 7a00 	vstr	s15, [r3]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, DIR_24V);
 8001512:	4b35      	ldr	r3, [pc, #212]	@ (80015e8 <main+0x538>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	b2db      	uxtb	r3, r3
 8001518:	461a      	mov	r2, r3
 800151a:	2102      	movs	r1, #2
 800151c:	4835      	ldr	r0, [pc, #212]	@ (80015f4 <main+0x544>)
 800151e:	f003 fc05 	bl	8004d2c <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim20,TIM_CHANNEL_1,pwm_pris_posi);
 8001522:	4b33      	ldr	r3, [pc, #204]	@ (80015f0 <main+0x540>)
 8001524:	edd3 7a00 	vldr	s15, [r3]
 8001528:	4b33      	ldr	r3, [pc, #204]	@ (80015f8 <main+0x548>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001530:	ee17 2a90 	vmov	r2, s15
 8001534:	635a      	str	r2, [r3, #52]	@ 0x34
	while (1) {
 8001536:	e73b      	b.n	80013b0 <main+0x300>
 8001538:	eb1c432d 	.word	0xeb1c432d
 800153c:	3f5a36e2 	.word	0x3f5a36e2
 8001540:	b50b0f28 	.word	0xb50b0f28
 8001544:	400ef9a6 	.word	0x400ef9a6
 8001548:	9db22d0e 	.word	0x9db22d0e
 800154c:	3fc6a7ef 	.word	0x3fc6a7ef
 8001550:	00000000 	.word	0x00000000
 8001554:	3fec0000 	.word	0x3fec0000
 8001558:	3c968944 	.word	0x3c968944
 800155c:	3f3f969e 	.word	0x3f3f969e
 8001560:	05857aff 	.word	0x05857aff
 8001564:	3f2e03f7 	.word	0x3f2e03f7
 8001568:	2000117c 	.word	0x2000117c
 800156c:	3c23d70a 	.word	0x3c23d70a
 8001570:	3dcccccd 	.word	0x3dcccccd
 8001574:	200014a0 	.word	0x200014a0
 8001578:	200010cc 	.word	0x200010cc
 800157c:	3d4ccccd 	.word	0x3d4ccccd
 8001580:	3dcccccd 	.word	0x3dcccccd
 8001584:	20001110 	.word	0x20001110
 8001588:	3727c5ac 	.word	0x3727c5ac
 800158c:	20001134 	.word	0x20001134
 8001590:	20001158 	.word	0x20001158
 8001594:	200010c0 	.word	0x200010c0
 8001598:	48000800 	.word	0x48000800
 800159c:	20000230 	.word	0x20000230
 80015a0:	2000029c 	.word	0x2000029c
 80015a4:	20000a54 	.word	0x20000a54
 80015a8:	20000a56 	.word	0x20000a56
 80015ac:	200004a0 	.word	0x200004a0
 80015b0:	20000a30 	.word	0x20000a30
 80015b4:	2000056c 	.word	0x2000056c
 80015b8:	20000a34 	.word	0x20000a34
 80015bc:	20000a58 	.word	0x20000a58
 80015c0:	447a0000 	.word	0x447a0000
 80015c4:	200009c8 	.word	0x200009c8
 80015c8:	200009fc 	.word	0x200009fc
 80015cc:	20000a38 	.word	0x20000a38
 80015d0:	20000a3c 	.word	0x20000a3c
 80015d4:	20000a40 	.word	0x20000a40
 80015d8:	20000a44 	.word	0x20000a44
 80015dc:	20000a48 	.word	0x20000a48
 80015e0:	20000a4c 	.word	0x20000a4c
 80015e4:	200010f8 	.word	0x200010f8
 80015e8:	200010c4 	.word	0x200010c4
 80015ec:	200010fc 	.word	0x200010fc
 80015f0:	20001100 	.word	0x20001100
 80015f4:	48000400 	.word	0x48000400
 80015f8:	200007d0 	.word	0x200007d0

080015fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b094      	sub	sp, #80	@ 0x50
 8001600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001602:	f107 0318 	add.w	r3, r7, #24
 8001606:	2238      	movs	r2, #56	@ 0x38
 8001608:	2100      	movs	r1, #0
 800160a:	4618      	mov	r0, r3
 800160c:	f009 fa6c 	bl	800aae8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001610:	1d3b      	adds	r3, r7, #4
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	60da      	str	r2, [r3, #12]
 800161c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800161e:	2000      	movs	r0, #0
 8001620:	f003 fbb4 	bl	8004d8c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001624:	2302      	movs	r3, #2
 8001626:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001628:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800162c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800162e:	2340      	movs	r3, #64	@ 0x40
 8001630:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001632:	2302      	movs	r3, #2
 8001634:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001636:	2302      	movs	r3, #2
 8001638:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800163a:	2304      	movs	r3, #4
 800163c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800163e:	2355      	movs	r3, #85	@ 0x55
 8001640:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001642:	2302      	movs	r3, #2
 8001644:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001646:	2302      	movs	r3, #2
 8001648:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800164a:	2302      	movs	r3, #2
 800164c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800164e:	f107 0318 	add.w	r3, r7, #24
 8001652:	4618      	mov	r0, r3
 8001654:	f003 fc4e 	bl	8004ef4 <HAL_RCC_OscConfig>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800165e:	f000 fecb 	bl	80023f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001662:	230f      	movs	r3, #15
 8001664:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001666:	2303      	movs	r3, #3
 8001668:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800166a:	2300      	movs	r3, #0
 800166c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800166e:	2300      	movs	r3, #0
 8001670:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001672:	2300      	movs	r3, #0
 8001674:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001676:	1d3b      	adds	r3, r7, #4
 8001678:	2104      	movs	r1, #4
 800167a:	4618      	mov	r0, r3
 800167c:	f003 ff4c 	bl	8005518 <HAL_RCC_ClockConfig>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001686:	f000 feb7 	bl	80023f8 <Error_Handler>
  }
}
 800168a:	bf00      	nop
 800168c:	3750      	adds	r7, #80	@ 0x50
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
	...

08001694 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b08c      	sub	sp, #48	@ 0x30
 8001698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800169a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]
 80016a4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80016a6:	1d3b      	adds	r3, r7, #4
 80016a8:	2220      	movs	r2, #32
 80016aa:	2100      	movs	r1, #0
 80016ac:	4618      	mov	r0, r3
 80016ae:	f009 fa1b 	bl	800aae8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80016b2:	4b32      	ldr	r3, [pc, #200]	@ (800177c <MX_ADC1_Init+0xe8>)
 80016b4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80016b8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80016ba:	4b30      	ldr	r3, [pc, #192]	@ (800177c <MX_ADC1_Init+0xe8>)
 80016bc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80016c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016c2:	4b2e      	ldr	r3, [pc, #184]	@ (800177c <MX_ADC1_Init+0xe8>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016c8:	4b2c      	ldr	r3, [pc, #176]	@ (800177c <MX_ADC1_Init+0xe8>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80016ce:	4b2b      	ldr	r3, [pc, #172]	@ (800177c <MX_ADC1_Init+0xe8>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80016d4:	4b29      	ldr	r3, [pc, #164]	@ (800177c <MX_ADC1_Init+0xe8>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016da:	4b28      	ldr	r3, [pc, #160]	@ (800177c <MX_ADC1_Init+0xe8>)
 80016dc:	2204      	movs	r2, #4
 80016de:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80016e0:	4b26      	ldr	r3, [pc, #152]	@ (800177c <MX_ADC1_Init+0xe8>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80016e6:	4b25      	ldr	r3, [pc, #148]	@ (800177c <MX_ADC1_Init+0xe8>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80016ec:	4b23      	ldr	r3, [pc, #140]	@ (800177c <MX_ADC1_Init+0xe8>)
 80016ee:	2201      	movs	r2, #1
 80016f0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016f2:	4b22      	ldr	r3, [pc, #136]	@ (800177c <MX_ADC1_Init+0xe8>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016fa:	4b20      	ldr	r3, [pc, #128]	@ (800177c <MX_ADC1_Init+0xe8>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001700:	4b1e      	ldr	r3, [pc, #120]	@ (800177c <MX_ADC1_Init+0xe8>)
 8001702:	2200      	movs	r2, #0
 8001704:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001706:	4b1d      	ldr	r3, [pc, #116]	@ (800177c <MX_ADC1_Init+0xe8>)
 8001708:	2200      	movs	r2, #0
 800170a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800170e:	4b1b      	ldr	r3, [pc, #108]	@ (800177c <MX_ADC1_Init+0xe8>)
 8001710:	2200      	movs	r2, #0
 8001712:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001714:	4b19      	ldr	r3, [pc, #100]	@ (800177c <MX_ADC1_Init+0xe8>)
 8001716:	2200      	movs	r2, #0
 8001718:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800171c:	4817      	ldr	r0, [pc, #92]	@ (800177c <MX_ADC1_Init+0xe8>)
 800171e:	f001 fc83 	bl	8003028 <HAL_ADC_Init>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001728:	f000 fe66 	bl	80023f8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800172c:	2300      	movs	r3, #0
 800172e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001730:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001734:	4619      	mov	r1, r3
 8001736:	4811      	ldr	r0, [pc, #68]	@ (800177c <MX_ADC1_Init+0xe8>)
 8001738:	f002 fc20 	bl	8003f7c <HAL_ADCEx_MultiModeConfigChannel>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001742:	f000 fe59 	bl	80023f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001746:	4b0e      	ldr	r3, [pc, #56]	@ (8001780 <MX_ADC1_Init+0xec>)
 8001748:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800174a:	2306      	movs	r3, #6
 800174c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800174e:	2300      	movs	r3, #0
 8001750:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001752:	237f      	movs	r3, #127	@ 0x7f
 8001754:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001756:	2304      	movs	r3, #4
 8001758:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800175a:	2300      	movs	r3, #0
 800175c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800175e:	1d3b      	adds	r3, r7, #4
 8001760:	4619      	mov	r1, r3
 8001762:	4806      	ldr	r0, [pc, #24]	@ (800177c <MX_ADC1_Init+0xe8>)
 8001764:	f001 ff0e 	bl	8003584 <HAL_ADC_ConfigChannel>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800176e:	f000 fe43 	bl	80023f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001772:	bf00      	nop
 8001774:	3730      	adds	r7, #48	@ 0x30
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000230 	.word	0x20000230
 8001780:	04300002 	.word	0x04300002

08001784 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b088      	sub	sp, #32
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800178a:	463b      	mov	r3, r7
 800178c:	2220      	movs	r2, #32
 800178e:	2100      	movs	r1, #0
 8001790:	4618      	mov	r0, r3
 8001792:	f009 f9a9 	bl	800aae8 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001796:	4b2b      	ldr	r3, [pc, #172]	@ (8001844 <MX_ADC2_Init+0xc0>)
 8001798:	4a2b      	ldr	r2, [pc, #172]	@ (8001848 <MX_ADC2_Init+0xc4>)
 800179a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800179c:	4b29      	ldr	r3, [pc, #164]	@ (8001844 <MX_ADC2_Init+0xc0>)
 800179e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80017a2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80017a4:	4b27      	ldr	r3, [pc, #156]	@ (8001844 <MX_ADC2_Init+0xc0>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017aa:	4b26      	ldr	r3, [pc, #152]	@ (8001844 <MX_ADC2_Init+0xc0>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80017b0:	4b24      	ldr	r3, [pc, #144]	@ (8001844 <MX_ADC2_Init+0xc0>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80017b6:	4b23      	ldr	r3, [pc, #140]	@ (8001844 <MX_ADC2_Init+0xc0>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017bc:	4b21      	ldr	r3, [pc, #132]	@ (8001844 <MX_ADC2_Init+0xc0>)
 80017be:	2204      	movs	r2, #4
 80017c0:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80017c2:	4b20      	ldr	r3, [pc, #128]	@ (8001844 <MX_ADC2_Init+0xc0>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80017c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001844 <MX_ADC2_Init+0xc0>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80017ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001844 <MX_ADC2_Init+0xc0>)
 80017d0:	2201      	movs	r2, #1
 80017d2:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80017d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001844 <MX_ADC2_Init+0xc0>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017dc:	4b19      	ldr	r3, [pc, #100]	@ (8001844 <MX_ADC2_Init+0xc0>)
 80017de:	2200      	movs	r2, #0
 80017e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017e2:	4b18      	ldr	r3, [pc, #96]	@ (8001844 <MX_ADC2_Init+0xc0>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80017e8:	4b16      	ldr	r3, [pc, #88]	@ (8001844 <MX_ADC2_Init+0xc0>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80017f0:	4b14      	ldr	r3, [pc, #80]	@ (8001844 <MX_ADC2_Init+0xc0>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80017f6:	4b13      	ldr	r3, [pc, #76]	@ (8001844 <MX_ADC2_Init+0xc0>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80017fe:	4811      	ldr	r0, [pc, #68]	@ (8001844 <MX_ADC2_Init+0xc0>)
 8001800:	f001 fc12 	bl	8003028 <HAL_ADC_Init>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800180a:	f000 fdf5 	bl	80023f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800180e:	4b0f      	ldr	r3, [pc, #60]	@ (800184c <MX_ADC2_Init+0xc8>)
 8001810:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001812:	2306      	movs	r3, #6
 8001814:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001816:	2300      	movs	r3, #0
 8001818:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800181a:	237f      	movs	r3, #127	@ 0x7f
 800181c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800181e:	2304      	movs	r3, #4
 8001820:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001822:	2300      	movs	r3, #0
 8001824:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001826:	463b      	mov	r3, r7
 8001828:	4619      	mov	r1, r3
 800182a:	4806      	ldr	r0, [pc, #24]	@ (8001844 <MX_ADC2_Init+0xc0>)
 800182c:	f001 feaa 	bl	8003584 <HAL_ADC_ConfigChannel>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8001836:	f000 fddf 	bl	80023f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800183a:	bf00      	nop
 800183c:	3720      	adds	r7, #32
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	2000029c 	.word	0x2000029c
 8001848:	50000100 	.word	0x50000100
 800184c:	08600004 	.word	0x08600004

08001850 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b088      	sub	sp, #32
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001856:	f107 0310 	add.w	r3, r7, #16
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	605a      	str	r2, [r3, #4]
 8001860:	609a      	str	r2, [r3, #8]
 8001862:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001864:	1d3b      	adds	r3, r7, #4
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	605a      	str	r2, [r3, #4]
 800186c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800186e:	4b20      	ldr	r3, [pc, #128]	@ (80018f0 <MX_TIM1_Init+0xa0>)
 8001870:	4a20      	ldr	r2, [pc, #128]	@ (80018f4 <MX_TIM1_Init+0xa4>)
 8001872:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001874:	4b1e      	ldr	r3, [pc, #120]	@ (80018f0 <MX_TIM1_Init+0xa0>)
 8001876:	2200      	movs	r2, #0
 8001878:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800187a:	4b1d      	ldr	r3, [pc, #116]	@ (80018f0 <MX_TIM1_Init+0xa0>)
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000;
 8001880:	4b1b      	ldr	r3, [pc, #108]	@ (80018f0 <MX_TIM1_Init+0xa0>)
 8001882:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8001886:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001888:	4b19      	ldr	r3, [pc, #100]	@ (80018f0 <MX_TIM1_Init+0xa0>)
 800188a:	2200      	movs	r2, #0
 800188c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800188e:	4b18      	ldr	r3, [pc, #96]	@ (80018f0 <MX_TIM1_Init+0xa0>)
 8001890:	2200      	movs	r2, #0
 8001892:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001894:	4b16      	ldr	r3, [pc, #88]	@ (80018f0 <MX_TIM1_Init+0xa0>)
 8001896:	2200      	movs	r2, #0
 8001898:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800189a:	4815      	ldr	r0, [pc, #84]	@ (80018f0 <MX_TIM1_Init+0xa0>)
 800189c:	f004 faa6 	bl	8005dec <HAL_TIM_Base_Init>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80018a6:	f000 fda7 	bl	80023f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018b0:	f107 0310 	add.w	r3, r7, #16
 80018b4:	4619      	mov	r1, r3
 80018b6:	480e      	ldr	r0, [pc, #56]	@ (80018f0 <MX_TIM1_Init+0xa0>)
 80018b8:	f005 fb12 	bl	8006ee0 <HAL_TIM_ConfigClockSource>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80018c2:	f000 fd99 	bl	80023f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018c6:	2300      	movs	r3, #0
 80018c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018ca:	2300      	movs	r3, #0
 80018cc:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ce:	2300      	movs	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018d2:	1d3b      	adds	r3, r7, #4
 80018d4:	4619      	mov	r1, r3
 80018d6:	4806      	ldr	r0, [pc, #24]	@ (80018f0 <MX_TIM1_Init+0xa0>)
 80018d8:	f006 fae8 	bl	8007eac <HAL_TIMEx_MasterConfigSynchronization>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80018e2:	f000 fd89 	bl	80023f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80018e6:	bf00      	nop
 80018e8:	3720      	adds	r7, #32
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20000308 	.word	0x20000308
 80018f4:	40012c00 	.word	0x40012c00

080018f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b088      	sub	sp, #32
 80018fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018fe:	f107 0310 	add.w	r3, r7, #16
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	605a      	str	r2, [r3, #4]
 8001908:	609a      	str	r2, [r3, #8]
 800190a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800190c:	1d3b      	adds	r3, r7, #4
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	605a      	str	r2, [r3, #4]
 8001914:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001916:	4b1e      	ldr	r3, [pc, #120]	@ (8001990 <MX_TIM2_Init+0x98>)
 8001918:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800191c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 800191e:	4b1c      	ldr	r3, [pc, #112]	@ (8001990 <MX_TIM2_Init+0x98>)
 8001920:	22a9      	movs	r2, #169	@ 0xa9
 8001922:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001924:	4b1a      	ldr	r3, [pc, #104]	@ (8001990 <MX_TIM2_Init+0x98>)
 8001926:	2200      	movs	r2, #0
 8001928:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800192a:	4b19      	ldr	r3, [pc, #100]	@ (8001990 <MX_TIM2_Init+0x98>)
 800192c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001930:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001932:	4b17      	ldr	r3, [pc, #92]	@ (8001990 <MX_TIM2_Init+0x98>)
 8001934:	2200      	movs	r2, #0
 8001936:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001938:	4b15      	ldr	r3, [pc, #84]	@ (8001990 <MX_TIM2_Init+0x98>)
 800193a:	2200      	movs	r2, #0
 800193c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800193e:	4814      	ldr	r0, [pc, #80]	@ (8001990 <MX_TIM2_Init+0x98>)
 8001940:	f004 fa54 	bl	8005dec <HAL_TIM_Base_Init>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800194a:	f000 fd55 	bl	80023f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800194e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001952:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001954:	f107 0310 	add.w	r3, r7, #16
 8001958:	4619      	mov	r1, r3
 800195a:	480d      	ldr	r0, [pc, #52]	@ (8001990 <MX_TIM2_Init+0x98>)
 800195c:	f005 fac0 	bl	8006ee0 <HAL_TIM_ConfigClockSource>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001966:	f000 fd47 	bl	80023f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800196a:	2300      	movs	r3, #0
 800196c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800196e:	2300      	movs	r3, #0
 8001970:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001972:	1d3b      	adds	r3, r7, #4
 8001974:	4619      	mov	r1, r3
 8001976:	4806      	ldr	r0, [pc, #24]	@ (8001990 <MX_TIM2_Init+0x98>)
 8001978:	f006 fa98 	bl	8007eac <HAL_TIMEx_MasterConfigSynchronization>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001982:	f000 fd39 	bl	80023f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001986:	bf00      	nop
 8001988:	3720      	adds	r7, #32
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	200003d4 	.word	0x200003d4

08001994 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b08c      	sub	sp, #48	@ 0x30
 8001998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800199a:	f107 030c 	add.w	r3, r7, #12
 800199e:	2224      	movs	r2, #36	@ 0x24
 80019a0:	2100      	movs	r1, #0
 80019a2:	4618      	mov	r0, r3
 80019a4:	f009 f8a0 	bl	800aae8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019a8:	463b      	mov	r3, r7
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	605a      	str	r2, [r3, #4]
 80019b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019b2:	4b21      	ldr	r3, [pc, #132]	@ (8001a38 <MX_TIM3_Init+0xa4>)
 80019b4:	4a21      	ldr	r2, [pc, #132]	@ (8001a3c <MX_TIM3_Init+0xa8>)
 80019b6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80019b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001a38 <MX_TIM3_Init+0xa4>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019be:	4b1e      	ldr	r3, [pc, #120]	@ (8001a38 <MX_TIM3_Init+0xa4>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 80019c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001a38 <MX_TIM3_Init+0xa4>)
 80019c6:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80019ca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001a38 <MX_TIM3_Init+0xa4>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019d2:	4b19      	ldr	r3, [pc, #100]	@ (8001a38 <MX_TIM3_Init+0xa4>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80019d8:	2303      	movs	r3, #3
 80019da:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80019dc:	2300      	movs	r3, #0
 80019de:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019e0:	2301      	movs	r3, #1
 80019e2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80019e4:	2300      	movs	r3, #0
 80019e6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80019ec:	2300      	movs	r3, #0
 80019ee:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80019f0:	2301      	movs	r3, #1
 80019f2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80019f4:	2300      	movs	r3, #0
 80019f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80019f8:	2300      	movs	r3, #0
 80019fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80019fc:	f107 030c 	add.w	r3, r7, #12
 8001a00:	4619      	mov	r1, r3
 8001a02:	480d      	ldr	r0, [pc, #52]	@ (8001a38 <MX_TIM3_Init+0xa4>)
 8001a04:	f004 fe22 	bl	800664c <HAL_TIM_Encoder_Init>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001a0e:	f000 fcf3 	bl	80023f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a12:	2300      	movs	r3, #0
 8001a14:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a16:	2300      	movs	r3, #0
 8001a18:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a1a:	463b      	mov	r3, r7
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4806      	ldr	r0, [pc, #24]	@ (8001a38 <MX_TIM3_Init+0xa4>)
 8001a20:	f006 fa44 	bl	8007eac <HAL_TIMEx_MasterConfigSynchronization>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001a2a:	f000 fce5 	bl	80023f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a2e:	bf00      	nop
 8001a30:	3730      	adds	r7, #48	@ 0x30
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	200004a0 	.word	0x200004a0
 8001a3c:	40000400 	.word	0x40000400

08001a40 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08c      	sub	sp, #48	@ 0x30
 8001a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a46:	f107 030c 	add.w	r3, r7, #12
 8001a4a:	2224      	movs	r2, #36	@ 0x24
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f009 f84a 	bl	800aae8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a54:	463b      	mov	r3, r7
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	605a      	str	r2, [r3, #4]
 8001a5c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a5e:	4b21      	ldr	r3, [pc, #132]	@ (8001ae4 <MX_TIM4_Init+0xa4>)
 8001a60:	4a21      	ldr	r2, [pc, #132]	@ (8001ae8 <MX_TIM4_Init+0xa8>)
 8001a62:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001a64:	4b1f      	ldr	r3, [pc, #124]	@ (8001ae4 <MX_TIM4_Init+0xa4>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a6a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ae4 <MX_TIM4_Init+0xa4>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 59999;
 8001a70:	4b1c      	ldr	r3, [pc, #112]	@ (8001ae4 <MX_TIM4_Init+0xa4>)
 8001a72:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8001a76:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a78:	4b1a      	ldr	r3, [pc, #104]	@ (8001ae4 <MX_TIM4_Init+0xa4>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a7e:	4b19      	ldr	r3, [pc, #100]	@ (8001ae4 <MX_TIM4_Init+0xa4>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a84:	2303      	movs	r3, #3
 8001a86:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a90:	2300      	movs	r3, #0
 8001a92:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001aa8:	f107 030c 	add.w	r3, r7, #12
 8001aac:	4619      	mov	r1, r3
 8001aae:	480d      	ldr	r0, [pc, #52]	@ (8001ae4 <MX_TIM4_Init+0xa4>)
 8001ab0:	f004 fdcc 	bl	800664c <HAL_TIM_Encoder_Init>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001aba:	f000 fc9d 	bl	80023f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ac6:	463b      	mov	r3, r7
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4806      	ldr	r0, [pc, #24]	@ (8001ae4 <MX_TIM4_Init+0xa4>)
 8001acc:	f006 f9ee 	bl	8007eac <HAL_TIMEx_MasterConfigSynchronization>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001ad6:	f000 fc8f 	bl	80023f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001ada:	bf00      	nop
 8001adc:	3730      	adds	r7, #48	@ 0x30
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	2000056c 	.word	0x2000056c
 8001ae8:	40000800 	.word	0x40000800

08001aec <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b09c      	sub	sp, #112	@ 0x70
 8001af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001af2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	605a      	str	r2, [r3, #4]
 8001afc:	609a      	str	r2, [r3, #8]
 8001afe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b00:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b0c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	60da      	str	r2, [r3, #12]
 8001b1a:	611a      	str	r2, [r3, #16]
 8001b1c:	615a      	str	r2, [r3, #20]
 8001b1e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b20:	1d3b      	adds	r3, r7, #4
 8001b22:	2234      	movs	r2, #52	@ 0x34
 8001b24:	2100      	movs	r1, #0
 8001b26:	4618      	mov	r0, r3
 8001b28:	f008 ffde 	bl	800aae8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001b2c:	4b45      	ldr	r3, [pc, #276]	@ (8001c44 <MX_TIM8_Init+0x158>)
 8001b2e:	4a46      	ldr	r2, [pc, #280]	@ (8001c48 <MX_TIM8_Init+0x15c>)
 8001b30:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001b32:	4b44      	ldr	r3, [pc, #272]	@ (8001c44 <MX_TIM8_Init+0x158>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b38:	4b42      	ldr	r3, [pc, #264]	@ (8001c44 <MX_TIM8_Init+0x158>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001b3e:	4b41      	ldr	r3, [pc, #260]	@ (8001c44 <MX_TIM8_Init+0x158>)
 8001b40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b44:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b46:	4b3f      	ldr	r3, [pc, #252]	@ (8001c44 <MX_TIM8_Init+0x158>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001b4c:	4b3d      	ldr	r3, [pc, #244]	@ (8001c44 <MX_TIM8_Init+0x158>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b52:	4b3c      	ldr	r3, [pc, #240]	@ (8001c44 <MX_TIM8_Init+0x158>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001b58:	483a      	ldr	r0, [pc, #232]	@ (8001c44 <MX_TIM8_Init+0x158>)
 8001b5a:	f004 f947 	bl	8005dec <HAL_TIM_Base_Init>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001b64:	f000 fc48 	bl	80023f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b6c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001b6e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001b72:	4619      	mov	r1, r3
 8001b74:	4833      	ldr	r0, [pc, #204]	@ (8001c44 <MX_TIM8_Init+0x158>)
 8001b76:	f005 f9b3 	bl	8006ee0 <HAL_TIM_ConfigClockSource>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001b80:	f000 fc3a 	bl	80023f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001b84:	482f      	ldr	r0, [pc, #188]	@ (8001c44 <MX_TIM8_Init+0x158>)
 8001b86:	f004 faeb 	bl	8006160 <HAL_TIM_PWM_Init>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001b90:	f000 fc32 	bl	80023f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b94:	2300      	movs	r3, #0
 8001b96:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001ba0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4827      	ldr	r0, [pc, #156]	@ (8001c44 <MX_TIM8_Init+0x158>)
 8001ba8:	f006 f980 	bl	8007eac <HAL_TIMEx_MasterConfigSynchronization>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8001bb2:	f000 fc21 	bl	80023f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bb6:	2360      	movs	r3, #96	@ 0x60
 8001bb8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001bd2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001bd6:	220c      	movs	r2, #12
 8001bd8:	4619      	mov	r1, r3
 8001bda:	481a      	ldr	r0, [pc, #104]	@ (8001c44 <MX_TIM8_Init+0x158>)
 8001bdc:	f005 f86c 	bl	8006cb8 <HAL_TIM_PWM_ConfigChannel>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8001be6:	f000 fc07 	bl	80023f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bea:	2300      	movs	r3, #0
 8001bec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001bfe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c02:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001c04:	2300      	movs	r3, #0
 8001c06:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001c10:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c14:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001c16:	2300      	movs	r3, #0
 8001c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001c22:	1d3b      	adds	r3, r7, #4
 8001c24:	4619      	mov	r1, r3
 8001c26:	4807      	ldr	r0, [pc, #28]	@ (8001c44 <MX_TIM8_Init+0x158>)
 8001c28:	f006 f9d6 	bl	8007fd8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_TIM8_Init+0x14a>
  {
    Error_Handler();
 8001c32:	f000 fbe1 	bl	80023f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001c36:	4803      	ldr	r0, [pc, #12]	@ (8001c44 <MX_TIM8_Init+0x158>)
 8001c38:	f000 fdac 	bl	8002794 <HAL_TIM_MspPostInit>

}
 8001c3c:	bf00      	nop
 8001c3e:	3770      	adds	r7, #112	@ 0x70
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	20000638 	.word	0x20000638
 8001c48:	40013400 	.word	0x40013400

08001c4c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b094      	sub	sp, #80	@ 0x50
 8001c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c52:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	605a      	str	r2, [r3, #4]
 8001c5c:	609a      	str	r2, [r3, #8]
 8001c5e:	60da      	str	r2, [r3, #12]
 8001c60:	611a      	str	r2, [r3, #16]
 8001c62:	615a      	str	r2, [r3, #20]
 8001c64:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c66:	463b      	mov	r3, r7
 8001c68:	2234      	movs	r2, #52	@ 0x34
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f008 ff3b 	bl	800aae8 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001c72:	4b34      	ldr	r3, [pc, #208]	@ (8001d44 <MX_TIM16_Init+0xf8>)
 8001c74:	4a34      	ldr	r2, [pc, #208]	@ (8001d48 <MX_TIM16_Init+0xfc>)
 8001c76:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8001c78:	4b32      	ldr	r3, [pc, #200]	@ (8001d44 <MX_TIM16_Init+0xf8>)
 8001c7a:	22a9      	movs	r2, #169	@ 0xa9
 8001c7c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c7e:	4b31      	ldr	r3, [pc, #196]	@ (8001d44 <MX_TIM16_Init+0xf8>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2005;
 8001c84:	4b2f      	ldr	r3, [pc, #188]	@ (8001d44 <MX_TIM16_Init+0xf8>)
 8001c86:	f240 72d5 	movw	r2, #2005	@ 0x7d5
 8001c8a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c8c:	4b2d      	ldr	r3, [pc, #180]	@ (8001d44 <MX_TIM16_Init+0xf8>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001c92:	4b2c      	ldr	r3, [pc, #176]	@ (8001d44 <MX_TIM16_Init+0xf8>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c98:	4b2a      	ldr	r3, [pc, #168]	@ (8001d44 <MX_TIM16_Init+0xf8>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001c9e:	4829      	ldr	r0, [pc, #164]	@ (8001d44 <MX_TIM16_Init+0xf8>)
 8001ca0:	f004 f8a4 	bl	8005dec <HAL_TIM_Base_Init>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001caa:	f000 fba5 	bl	80023f8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8001cae:	4825      	ldr	r0, [pc, #148]	@ (8001d44 <MX_TIM16_Init+0xf8>)
 8001cb0:	f004 f9e8 	bl	8006084 <HAL_TIM_OC_Init>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001cba:	f000 fb9d 	bl	80023f8 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8001cbe:	2108      	movs	r1, #8
 8001cc0:	4820      	ldr	r0, [pc, #128]	@ (8001d44 <MX_TIM16_Init+0xf8>)
 8001cc2:	f004 fbcd 	bl	8006460 <HAL_TIM_OnePulse_Init>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 8001ccc:	f000 fb94 	bl	80023f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8001cd0:	2310      	movs	r3, #16
 8001cd2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 1433;
 8001cd4:	f240 5399 	movw	r3, #1433	@ 0x599
 8001cd8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001cea:	2300      	movs	r3, #0
 8001cec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cee:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4813      	ldr	r0, [pc, #76]	@ (8001d44 <MX_TIM16_Init+0xf8>)
 8001cf8:	f004 ff64 	bl	8006bc4 <HAL_TIM_OC_ConfigChannel>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_TIM16_Init+0xba>
  {
    Error_Handler();
 8001d02:	f000 fb79 	bl	80023f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d06:	2300      	movs	r3, #0
 8001d08:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d12:	2300      	movs	r3, #0
 8001d14:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d16:	2300      	movs	r3, #0
 8001d18:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d1a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d1e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001d20:	2300      	movs	r3, #0
 8001d22:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d24:	2300      	movs	r3, #0
 8001d26:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001d28:	463b      	mov	r3, r7
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4805      	ldr	r0, [pc, #20]	@ (8001d44 <MX_TIM16_Init+0xf8>)
 8001d2e:	f006 f953 	bl	8007fd8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <MX_TIM16_Init+0xf0>
  {
    Error_Handler();
 8001d38:	f000 fb5e 	bl	80023f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001d3c:	bf00      	nop
 8001d3e:	3750      	adds	r7, #80	@ 0x50
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	20000704 	.word	0x20000704
 8001d48:	40014400 	.word	0x40014400

08001d4c <MX_TIM20_Init>:
  * @brief TIM20 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM20_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b09c      	sub	sp, #112	@ 0x70
 8001d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d52:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	605a      	str	r2, [r3, #4]
 8001d5c:	609a      	str	r2, [r3, #8]
 8001d5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d60:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	605a      	str	r2, [r3, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d6c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	60da      	str	r2, [r3, #12]
 8001d7a:	611a      	str	r2, [r3, #16]
 8001d7c:	615a      	str	r2, [r3, #20]
 8001d7e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d80:	1d3b      	adds	r3, r7, #4
 8001d82:	2234      	movs	r2, #52	@ 0x34
 8001d84:	2100      	movs	r1, #0
 8001d86:	4618      	mov	r0, r3
 8001d88:	f008 feae 	bl	800aae8 <memset>

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8001d8c:	4b4b      	ldr	r3, [pc, #300]	@ (8001ebc <MX_TIM20_Init+0x170>)
 8001d8e:	4a4c      	ldr	r2, [pc, #304]	@ (8001ec0 <MX_TIM20_Init+0x174>)
 8001d90:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 8001d92:	4b4a      	ldr	r3, [pc, #296]	@ (8001ebc <MX_TIM20_Init+0x170>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d98:	4b48      	ldr	r3, [pc, #288]	@ (8001ebc <MX_TIM20_Init+0x170>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 8001d9e:	4b47      	ldr	r3, [pc, #284]	@ (8001ebc <MX_TIM20_Init+0x170>)
 8001da0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001da4:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001da6:	4b45      	ldr	r3, [pc, #276]	@ (8001ebc <MX_TIM20_Init+0x170>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 8001dac:	4b43      	ldr	r3, [pc, #268]	@ (8001ebc <MX_TIM20_Init+0x170>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001db2:	4b42      	ldr	r3, [pc, #264]	@ (8001ebc <MX_TIM20_Init+0x170>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 8001db8:	4840      	ldr	r0, [pc, #256]	@ (8001ebc <MX_TIM20_Init+0x170>)
 8001dba:	f004 f817 	bl	8005dec <HAL_TIM_Base_Init>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <MX_TIM20_Init+0x7c>
  {
    Error_Handler();
 8001dc4:	f000 fb18 	bl	80023f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dcc:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 8001dce:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4839      	ldr	r0, [pc, #228]	@ (8001ebc <MX_TIM20_Init+0x170>)
 8001dd6:	f005 f883 	bl	8006ee0 <HAL_TIM_ConfigClockSource>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <MX_TIM20_Init+0x98>
  {
    Error_Handler();
 8001de0:	f000 fb0a 	bl	80023f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 8001de4:	4835      	ldr	r0, [pc, #212]	@ (8001ebc <MX_TIM20_Init+0x170>)
 8001de6:	f004 f9bb 	bl	8006160 <HAL_TIM_PWM_Init>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <MX_TIM20_Init+0xa8>
  {
    Error_Handler();
 8001df0:	f000 fb02 	bl	80023f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001df4:	2300      	movs	r3, #0
 8001df6:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8001e00:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e04:	4619      	mov	r1, r3
 8001e06:	482d      	ldr	r0, [pc, #180]	@ (8001ebc <MX_TIM20_Init+0x170>)
 8001e08:	f006 f850 	bl	8007eac <HAL_TIMEx_MasterConfigSynchronization>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_TIM20_Init+0xca>
  {
    Error_Handler();
 8001e12:	f000 faf1 	bl	80023f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e16:	2360      	movs	r3, #96	@ 0x60
 8001e18:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e22:	2300      	movs	r3, #0
 8001e24:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e26:	2300      	movs	r3, #0
 8001e28:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e32:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e36:	2200      	movs	r2, #0
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4820      	ldr	r0, [pc, #128]	@ (8001ebc <MX_TIM20_Init+0x170>)
 8001e3c:	f004 ff3c 	bl	8006cb8 <HAL_TIM_PWM_ConfigChannel>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_TIM20_Init+0xfe>
  {
    Error_Handler();
 8001e46:	f000 fad7 	bl	80023f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e4a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e4e:	2208      	movs	r2, #8
 8001e50:	4619      	mov	r1, r3
 8001e52:	481a      	ldr	r0, [pc, #104]	@ (8001ebc <MX_TIM20_Init+0x170>)
 8001e54:	f004 ff30 	bl	8006cb8 <HAL_TIM_PWM_ConfigChannel>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <MX_TIM20_Init+0x116>
  {
    Error_Handler();
 8001e5e:	f000 facb 	bl	80023f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e62:	2300      	movs	r3, #0
 8001e64:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e66:	2300      	movs	r3, #0
 8001e68:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e72:	2300      	movs	r3, #0
 8001e74:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e76:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e7a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001e80:	2300      	movs	r3, #0
 8001e82:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001e84:	2300      	movs	r3, #0
 8001e86:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e88:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001e92:	2300      	movs	r3, #0
 8001e94:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e96:	2300      	movs	r3, #0
 8001e98:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 8001e9a:	1d3b      	adds	r3, r7, #4
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4807      	ldr	r0, [pc, #28]	@ (8001ebc <MX_TIM20_Init+0x170>)
 8001ea0:	f006 f89a 	bl	8007fd8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <MX_TIM20_Init+0x162>
  {
    Error_Handler();
 8001eaa:	f000 faa5 	bl	80023f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */
  HAL_TIM_MspPostInit(&htim20);
 8001eae:	4803      	ldr	r0, [pc, #12]	@ (8001ebc <MX_TIM20_Init+0x170>)
 8001eb0:	f000 fc70 	bl	8002794 <HAL_TIM_MspPostInit>

}
 8001eb4:	bf00      	nop
 8001eb6:	3770      	adds	r7, #112	@ 0x70
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	200007d0 	.word	0x200007d0
 8001ec0:	40015000 	.word	0x40015000

08001ec4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ec8:	4b23      	ldr	r3, [pc, #140]	@ (8001f58 <MX_USART2_UART_Init+0x94>)
 8001eca:	4a24      	ldr	r2, [pc, #144]	@ (8001f5c <MX_USART2_UART_Init+0x98>)
 8001ecc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8001ece:	4b22      	ldr	r3, [pc, #136]	@ (8001f58 <MX_USART2_UART_Init+0x94>)
 8001ed0:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8001ed4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001ed6:	4b20      	ldr	r3, [pc, #128]	@ (8001f58 <MX_USART2_UART_Init+0x94>)
 8001ed8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001edc:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ede:	4b1e      	ldr	r3, [pc, #120]	@ (8001f58 <MX_USART2_UART_Init+0x94>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001ee4:	4b1c      	ldr	r3, [pc, #112]	@ (8001f58 <MX_USART2_UART_Init+0x94>)
 8001ee6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001eea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001eec:	4b1a      	ldr	r3, [pc, #104]	@ (8001f58 <MX_USART2_UART_Init+0x94>)
 8001eee:	220c      	movs	r2, #12
 8001ef0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ef2:	4b19      	ldr	r3, [pc, #100]	@ (8001f58 <MX_USART2_UART_Init+0x94>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ef8:	4b17      	ldr	r3, [pc, #92]	@ (8001f58 <MX_USART2_UART_Init+0x94>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001efe:	4b16      	ldr	r3, [pc, #88]	@ (8001f58 <MX_USART2_UART_Init+0x94>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f04:	4b14      	ldr	r3, [pc, #80]	@ (8001f58 <MX_USART2_UART_Init+0x94>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f0a:	4b13      	ldr	r3, [pc, #76]	@ (8001f58 <MX_USART2_UART_Init+0x94>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f10:	4811      	ldr	r0, [pc, #68]	@ (8001f58 <MX_USART2_UART_Init+0x94>)
 8001f12:	f006 f945 	bl	80081a0 <HAL_UART_Init>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8001f1c:	f000 fa6c 	bl	80023f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f20:	2100      	movs	r1, #0
 8001f22:	480d      	ldr	r0, [pc, #52]	@ (8001f58 <MX_USART2_UART_Init+0x94>)
 8001f24:	f008 fcc7 	bl	800a8b6 <HAL_UARTEx_SetTxFifoThreshold>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8001f2e:	f000 fa63 	bl	80023f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f32:	2100      	movs	r1, #0
 8001f34:	4808      	ldr	r0, [pc, #32]	@ (8001f58 <MX_USART2_UART_Init+0x94>)
 8001f36:	f008 fcfc 	bl	800a932 <HAL_UARTEx_SetRxFifoThreshold>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8001f40:	f000 fa5a 	bl	80023f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001f44:	4804      	ldr	r0, [pc, #16]	@ (8001f58 <MX_USART2_UART_Init+0x94>)
 8001f46:	f008 fc7d 	bl	800a844 <HAL_UARTEx_DisableFifoMode>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8001f50:	f000 fa52 	bl	80023f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f54:	bf00      	nop
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	2000089c 	.word	0x2000089c
 8001f5c:	40004400 	.word	0x40004400

08001f60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001f66:	4b12      	ldr	r3, [pc, #72]	@ (8001fb0 <MX_DMA_Init+0x50>)
 8001f68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f6a:	4a11      	ldr	r2, [pc, #68]	@ (8001fb0 <MX_DMA_Init+0x50>)
 8001f6c:	f043 0304 	orr.w	r3, r3, #4
 8001f70:	6493      	str	r3, [r2, #72]	@ 0x48
 8001f72:	4b0f      	ldr	r3, [pc, #60]	@ (8001fb0 <MX_DMA_Init+0x50>)
 8001f74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f76:	f003 0304 	and.w	r3, r3, #4
 8001f7a:	607b      	str	r3, [r7, #4]
 8001f7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f7e:	4b0c      	ldr	r3, [pc, #48]	@ (8001fb0 <MX_DMA_Init+0x50>)
 8001f80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f82:	4a0b      	ldr	r2, [pc, #44]	@ (8001fb0 <MX_DMA_Init+0x50>)
 8001f84:	f043 0301 	orr.w	r3, r3, #1
 8001f88:	6493      	str	r3, [r2, #72]	@ 0x48
 8001f8a:	4b09      	ldr	r3, [pc, #36]	@ (8001fb0 <MX_DMA_Init+0x50>)
 8001f8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	603b      	str	r3, [r7, #0]
 8001f94:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001f96:	2200      	movs	r2, #0
 8001f98:	2100      	movs	r1, #0
 8001f9a:	200b      	movs	r0, #11
 8001f9c:	f002 f9d1 	bl	8004342 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001fa0:	200b      	movs	r0, #11
 8001fa2:	f002 f9e8 	bl	8004376 <HAL_NVIC_EnableIRQ>

}
 8001fa6:	bf00      	nop
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40021000 	.word	0x40021000

08001fb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b08a      	sub	sp, #40	@ 0x28
 8001fb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fba:	f107 0314 	add.w	r3, r7, #20
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	605a      	str	r2, [r3, #4]
 8001fc4:	609a      	str	r2, [r3, #8]
 8001fc6:	60da      	str	r2, [r3, #12]
 8001fc8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fca:	4b61      	ldr	r3, [pc, #388]	@ (8002150 <MX_GPIO_Init+0x19c>)
 8001fcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fce:	4a60      	ldr	r2, [pc, #384]	@ (8002150 <MX_GPIO_Init+0x19c>)
 8001fd0:	f043 0304 	orr.w	r3, r3, #4
 8001fd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fd6:	4b5e      	ldr	r3, [pc, #376]	@ (8002150 <MX_GPIO_Init+0x19c>)
 8001fd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fda:	f003 0304 	and.w	r3, r3, #4
 8001fde:	613b      	str	r3, [r7, #16]
 8001fe0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fe2:	4b5b      	ldr	r3, [pc, #364]	@ (8002150 <MX_GPIO_Init+0x19c>)
 8001fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fe6:	4a5a      	ldr	r2, [pc, #360]	@ (8002150 <MX_GPIO_Init+0x19c>)
 8001fe8:	f043 0320 	orr.w	r3, r3, #32
 8001fec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fee:	4b58      	ldr	r3, [pc, #352]	@ (8002150 <MX_GPIO_Init+0x19c>)
 8001ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ff2:	f003 0320 	and.w	r3, r3, #32
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ffa:	4b55      	ldr	r3, [pc, #340]	@ (8002150 <MX_GPIO_Init+0x19c>)
 8001ffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ffe:	4a54      	ldr	r2, [pc, #336]	@ (8002150 <MX_GPIO_Init+0x19c>)
 8002000:	f043 0301 	orr.w	r3, r3, #1
 8002004:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002006:	4b52      	ldr	r3, [pc, #328]	@ (8002150 <MX_GPIO_Init+0x19c>)
 8002008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	60bb      	str	r3, [r7, #8]
 8002010:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002012:	4b4f      	ldr	r3, [pc, #316]	@ (8002150 <MX_GPIO_Init+0x19c>)
 8002014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002016:	4a4e      	ldr	r2, [pc, #312]	@ (8002150 <MX_GPIO_Init+0x19c>)
 8002018:	f043 0302 	orr.w	r3, r3, #2
 800201c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800201e:	4b4c      	ldr	r3, [pc, #304]	@ (8002150 <MX_GPIO_Init+0x19c>)
 8002020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	607b      	str	r3, [r7, #4]
 8002028:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_MD20A_24V_GPIO_Port, DIR_MD20A_24V_Pin, GPIO_PIN_RESET);
 800202a:	2200      	movs	r2, #0
 800202c:	2102      	movs	r1, #2
 800202e:	4849      	ldr	r0, [pc, #292]	@ (8002154 <MX_GPIO_Init+0x1a0>)
 8002030:	f002 fe7c 	bl	8004d2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_MD20A_18V_GPIO_Port, DIR_MD20A_18V_Pin, GPIO_PIN_RESET);
 8002034:	2200      	movs	r2, #0
 8002036:	2140      	movs	r1, #64	@ 0x40
 8002038:	4847      	ldr	r0, [pc, #284]	@ (8002158 <MX_GPIO_Init+0x1a4>)
 800203a:	f002 fe77 	bl	8004d2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800203e:	2320      	movs	r3, #32
 8002040:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002042:	2302      	movs	r3, #2
 8002044:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002046:	2300      	movs	r3, #0
 8002048:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204a:	2300      	movs	r3, #0
 800204c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800204e:	2305      	movs	r3, #5
 8002050:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002052:	f107 0314 	add.w	r3, r7, #20
 8002056:	4619      	mov	r1, r3
 8002058:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800205c:	f002 fce4 	bl	8004a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_MD20A_24V_Pin */
  GPIO_InitStruct.Pin = DIR_MD20A_24V_Pin;
 8002060:	2302      	movs	r3, #2
 8002062:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002064:	2301      	movs	r3, #1
 8002066:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002068:	2300      	movs	r3, #0
 800206a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206c:	2300      	movs	r3, #0
 800206e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_MD20A_24V_GPIO_Port, &GPIO_InitStruct);
 8002070:	f107 0314 	add.w	r3, r7, #20
 8002074:	4619      	mov	r1, r3
 8002076:	4837      	ldr	r0, [pc, #220]	@ (8002154 <MX_GPIO_Init+0x1a0>)
 8002078:	f002 fcd6 	bl	8004a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit_Switch_pen_2_Pin Proximity_Sensor_Pin Limit_Switch_Prismatic1_Pin Limit_Switch_Prismatic2_Pin
                           Limit_Switch_pen_1_Pin */
  GPIO_InitStruct.Pin = Limit_Switch_pen_2_Pin|Proximity_Sensor_Pin|Limit_Switch_Prismatic1_Pin|Limit_Switch_Prismatic2_Pin
 800207c:	f44f 4366 	mov.w	r3, #58880	@ 0xe600
 8002080:	617b      	str	r3, [r7, #20]
                          |Limit_Switch_pen_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002082:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002086:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002088:	2300      	movs	r3, #0
 800208a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800208c:	f107 0314 	add.w	r3, r7, #20
 8002090:	4619      	mov	r1, r3
 8002092:	4830      	ldr	r0, [pc, #192]	@ (8002154 <MX_GPIO_Init+0x1a0>)
 8002094:	f002 fcc8 	bl	8004a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_MD20A_18V_Pin */
  GPIO_InitStruct.Pin = DIR_MD20A_18V_Pin;
 8002098:	2340      	movs	r3, #64	@ 0x40
 800209a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800209c:	2301      	movs	r3, #1
 800209e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a4:	2300      	movs	r3, #0
 80020a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_MD20A_18V_GPIO_Port, &GPIO_InitStruct);
 80020a8:	f107 0314 	add.w	r3, r7, #20
 80020ac:	4619      	mov	r1, r3
 80020ae:	482a      	ldr	r0, [pc, #168]	@ (8002158 <MX_GPIO_Init+0x1a4>)
 80020b0:	f002 fcba 	bl	8004a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PS2_Joy_stick_Attention_Pin */
  GPIO_InitStruct.Pin = PS2_Joy_stick_Attention_Pin;
 80020b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020ba:	2300      	movs	r3, #0
 80020bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020be:	2300      	movs	r3, #0
 80020c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PS2_Joy_stick_Attention_GPIO_Port, &GPIO_InitStruct);
 80020c2:	f107 0314 	add.w	r3, r7, #20
 80020c6:	4619      	mov	r1, r3
 80020c8:	4823      	ldr	r0, [pc, #140]	@ (8002158 <MX_GPIO_Init+0x1a4>)
 80020ca:	f002 fcad 	bl	8004a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_Pin */
  GPIO_InitStruct.Pin = Emergency_Pin;
 80020ce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80020d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020d4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80020d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020da:	2300      	movs	r3, #0
 80020dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_GPIO_Port, &GPIO_InitStruct);
 80020de:	f107 0314 	add.w	r3, r7, #20
 80020e2:	4619      	mov	r1, r3
 80020e4:	481c      	ldr	r0, [pc, #112]	@ (8002158 <MX_GPIO_Init+0x1a4>)
 80020e6:	f002 fc9f 	bl	8004a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : Proximity_sensor_Pin */
  GPIO_InitStruct.Pin = Proximity_sensor_Pin;
 80020ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80020f0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80020f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f6:	2300      	movs	r3, #0
 80020f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Proximity_sensor_GPIO_Port, &GPIO_InitStruct);
 80020fa:	f107 0314 	add.w	r3, r7, #20
 80020fe:	4619      	mov	r1, r3
 8002100:	4815      	ldr	r0, [pc, #84]	@ (8002158 <MX_GPIO_Init+0x1a4>)
 8002102:	f002 fc91 	bl	8004a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002106:	2330      	movs	r3, #48	@ 0x30
 8002108:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210a:	2302      	movs	r3, #2
 800210c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210e:	2300      	movs	r3, #0
 8002110:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002112:	2300      	movs	r3, #0
 8002114:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002116:	2305      	movs	r3, #5
 8002118:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800211a:	f107 0314 	add.w	r3, r7, #20
 800211e:	4619      	mov	r1, r3
 8002120:	480c      	ldr	r0, [pc, #48]	@ (8002154 <MX_GPIO_Init+0x1a0>)
 8002122:	f002 fc81 	bl	8004a28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002126:	2200      	movs	r2, #0
 8002128:	2100      	movs	r1, #0
 800212a:	2017      	movs	r0, #23
 800212c:	f002 f909 	bl	8004342 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002130:	2017      	movs	r0, #23
 8002132:	f002 f920 	bl	8004376 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002136:	2200      	movs	r2, #0
 8002138:	2100      	movs	r1, #0
 800213a:	2028      	movs	r0, #40	@ 0x28
 800213c:	f002 f901 	bl	8004342 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002140:	2028      	movs	r0, #40	@ 0x28
 8002142:	f002 f918 	bl	8004376 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8002146:	bf00      	nop
 8002148:	3728      	adds	r7, #40	@ 0x28
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40021000 	.word	0x40021000
 8002154:	48000400 	.word	0x48000400
 8002158:	48000800 	.word	0x48000800

0800215c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	4603      	mov	r3, r0
 8002164:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_9) {
 8002166:	88fb      	ldrh	r3, [r7, #6]
 8002168:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800216c:	d103      	bne.n	8002176 <HAL_GPIO_EXTI_Callback+0x1a>
		State = 9;
 800216e:	4b1c      	ldr	r3, [pc, #112]	@ (80021e0 <HAL_GPIO_EXTI_Callback+0x84>)
 8002170:	2209      	movs	r2, #9
 8002172:	601a      	str	r2, [r3, #0]
	} else if (GPIO_Pin == GPIO_PIN_14) {
		State = 14;
	} else if (GPIO_Pin == GPIO_PIN_15) {
		State = 15;
	}
}
 8002174:	e02e      	b.n	80021d4 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_10) {
 8002176:	88fb      	ldrh	r3, [r7, #6]
 8002178:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800217c:	d103      	bne.n	8002186 <HAL_GPIO_EXTI_Callback+0x2a>
		State = 10;
 800217e:	4b18      	ldr	r3, [pc, #96]	@ (80021e0 <HAL_GPIO_EXTI_Callback+0x84>)
 8002180:	220a      	movs	r2, #10
 8002182:	601a      	str	r2, [r3, #0]
}
 8002184:	e026      	b.n	80021d4 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_11) {
 8002186:	88fb      	ldrh	r3, [r7, #6]
 8002188:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800218c:	d103      	bne.n	8002196 <HAL_GPIO_EXTI_Callback+0x3a>
		State = 11;
 800218e:	4b14      	ldr	r3, [pc, #80]	@ (80021e0 <HAL_GPIO_EXTI_Callback+0x84>)
 8002190:	220b      	movs	r2, #11
 8002192:	601a      	str	r2, [r3, #0]
}
 8002194:	e01e      	b.n	80021d4 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_12) {
 8002196:	88fb      	ldrh	r3, [r7, #6]
 8002198:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800219c:	d103      	bne.n	80021a6 <HAL_GPIO_EXTI_Callback+0x4a>
		State = 12;
 800219e:	4b10      	ldr	r3, [pc, #64]	@ (80021e0 <HAL_GPIO_EXTI_Callback+0x84>)
 80021a0:	220c      	movs	r2, #12
 80021a2:	601a      	str	r2, [r3, #0]
}
 80021a4:	e016      	b.n	80021d4 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_13) {
 80021a6:	88fb      	ldrh	r3, [r7, #6]
 80021a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021ac:	d103      	bne.n	80021b6 <HAL_GPIO_EXTI_Callback+0x5a>
		State = 13;
 80021ae:	4b0c      	ldr	r3, [pc, #48]	@ (80021e0 <HAL_GPIO_EXTI_Callback+0x84>)
 80021b0:	220d      	movs	r2, #13
 80021b2:	601a      	str	r2, [r3, #0]
}
 80021b4:	e00e      	b.n	80021d4 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_14) {
 80021b6:	88fb      	ldrh	r3, [r7, #6]
 80021b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80021bc:	d103      	bne.n	80021c6 <HAL_GPIO_EXTI_Callback+0x6a>
		State = 14;
 80021be:	4b08      	ldr	r3, [pc, #32]	@ (80021e0 <HAL_GPIO_EXTI_Callback+0x84>)
 80021c0:	220e      	movs	r2, #14
 80021c2:	601a      	str	r2, [r3, #0]
}
 80021c4:	e006      	b.n	80021d4 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_15) {
 80021c6:	88fb      	ldrh	r3, [r7, #6]
 80021c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80021cc:	d102      	bne.n	80021d4 <HAL_GPIO_EXTI_Callback+0x78>
		State = 15;
 80021ce:	4b04      	ldr	r3, [pc, #16]	@ (80021e0 <HAL_GPIO_EXTI_Callback+0x84>)
 80021d0:	220f      	movs	r2, #15
 80021d2:	601a      	str	r2, [r3, #0]
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	20000a50 	.word	0x20000a50

080021e4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a19      	ldr	r2, [pc, #100]	@ (8002254 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d12a      	bne.n	800224a <HAL_TIM_PeriodElapsedCallback+0x66>
		count_Tim2 += 1;
 80021f4:	4b18      	ldr	r3, [pc, #96]	@ (8002258 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	3301      	adds	r3, #1
 80021fa:	4a17      	ldr	r2, [pc, #92]	@ (8002258 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80021fc:	6013      	str	r3, [r2, #0]
		// Velocity Control
//		velocity_pris = Encoder_GetVelocity_mm(&encoder1);
//		setvelocity_pris = V_pris_posi_PID;
//		delta_velo_pris = setvelocity_pris - velocity_pris;
//		V_pris_velo_PID = Prismatic_velocity_control(delta_velo_pris);
		if (count_Tim2 >= 10) {
 80021fe:	4b16      	ldr	r3, [pc, #88]	@ (8002258 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2b09      	cmp	r3, #9
 8002204:	dd21      	ble.n	800224a <HAL_TIM_PeriodElapsedCallback+0x66>
			// Position Control
			position_pris = Encoder_GetPosition_mm(&encoder1);
 8002206:	4815      	ldr	r0, [pc, #84]	@ (800225c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002208:	f7fe faa9 	bl	800075e <Encoder_GetPosition_mm>
 800220c:	eef0 7a40 	vmov.f32	s15, s0
 8002210:	4b13      	ldr	r3, [pc, #76]	@ (8002260 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002212:	edc3 7a00 	vstr	s15, [r3]
			delta_posi_pris = setposition_pris - position_pris;
 8002216:	4b13      	ldr	r3, [pc, #76]	@ (8002264 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002218:	ed93 7a00 	vldr	s14, [r3]
 800221c:	4b10      	ldr	r3, [pc, #64]	@ (8002260 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800221e:	edd3 7a00 	vldr	s15, [r3]
 8002222:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002226:	4b10      	ldr	r3, [pc, #64]	@ (8002268 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002228:	edc3 7a00 	vstr	s15, [r3]
			V_pris_posi_PID = Prismatic_position_control(delta_posi_pris);
 800222c:	4b0e      	ldr	r3, [pc, #56]	@ (8002268 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800222e:	edd3 7a00 	vldr	s15, [r3]
 8002232:	eeb0 0a67 	vmov.f32	s0, s15
 8002236:	f000 f81b 	bl	8002270 <Prismatic_position_control>
 800223a:	eef0 7a40 	vmov.f32	s15, s0
 800223e:	4b0b      	ldr	r3, [pc, #44]	@ (800226c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002240:	edc3 7a00 	vstr	s15, [r3]
			count_Tim2 = 0;
 8002244:	4b04      	ldr	r3, [pc, #16]	@ (8002258 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002246:	2200      	movs	r2, #0
 8002248:	601a      	str	r2, [r3, #0]
		}
	}
}
 800224a:	bf00      	nop
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	200003d4 	.word	0x200003d4
 8002258:	200010c8 	.word	0x200010c8
 800225c:	200009c8 	.word	0x200009c8
 8002260:	200010f0 	.word	0x200010f0
 8002264:	200010f4 	.word	0x200010f4
 8002268:	2000110c 	.word	0x2000110c
 800226c:	200010f8 	.word	0x200010f8

08002270 <Prismatic_position_control>:

float Prismatic_position_control(float delta_posi) {
 8002270:	b480      	push	{r7}
 8002272:	b087      	sub	sp, #28
 8002274:	af00      	add	r7, sp, #0
 8002276:	ed87 0a01 	vstr	s0, [r7, #4]
	int anti_windup;
	error_posi_pris[0] = delta_posi;
 800227a:	4a4c      	ldr	r2, [pc, #304]	@ (80023ac <Prismatic_position_control+0x13c>)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6013      	str	r3, [r2, #0]
	Pris_posi_PID.Kp = 1;
 8002280:	4b4b      	ldr	r3, [pc, #300]	@ (80023b0 <Prismatic_position_control+0x140>)
 8002282:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002286:	619a      	str	r2, [r3, #24]
	Pris_posi_PID.Kd = 1;
 8002288:	4b49      	ldr	r3, [pc, #292]	@ (80023b0 <Prismatic_position_control+0x140>)
 800228a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800228e:	621a      	str	r2, [r3, #32]

	if (error_posi_pris[0] < 0 && error_posi_pris[1] > 0) {
 8002290:	4b46      	ldr	r3, [pc, #280]	@ (80023ac <Prismatic_position_control+0x13c>)
 8002292:	edd3 7a00 	vldr	s15, [r3]
 8002296:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800229a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800229e:	d50a      	bpl.n	80022b6 <Prismatic_position_control+0x46>
 80022a0:	4b42      	ldr	r3, [pc, #264]	@ (80023ac <Prismatic_position_control+0x13c>)
 80022a2:	edd3 7a01 	vldr	s15, [r3, #4]
 80022a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ae:	dd02      	ble.n	80022b6 <Prismatic_position_control+0x46>
		anti_windup = 0;
 80022b0:	2300      	movs	r3, #0
 80022b2:	617b      	str	r3, [r7, #20]
 80022b4:	e014      	b.n	80022e0 <Prismatic_position_control+0x70>
	} else if (error_posi_pris[0] > 0 && error_posi_pris[1] < 0) {
 80022b6:	4b3d      	ldr	r3, [pc, #244]	@ (80023ac <Prismatic_position_control+0x13c>)
 80022b8:	edd3 7a00 	vldr	s15, [r3]
 80022bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022c4:	dd0a      	ble.n	80022dc <Prismatic_position_control+0x6c>
 80022c6:	4b39      	ldr	r3, [pc, #228]	@ (80023ac <Prismatic_position_control+0x13c>)
 80022c8:	edd3 7a01 	vldr	s15, [r3, #4]
 80022cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d4:	d502      	bpl.n	80022dc <Prismatic_position_control+0x6c>
		anti_windup = 0;
 80022d6:	2300      	movs	r3, #0
 80022d8:	617b      	str	r3, [r7, #20]
 80022da:	e001      	b.n	80022e0 <Prismatic_position_control+0x70>
	} else {
		anti_windup = 1;
 80022dc:	2301      	movs	r3, #1
 80022de:	617b      	str	r3, [r7, #20]
	}

	if (V_pris_posi_PID >= 24 && anti_windup == 0) {
 80022e0:	4b34      	ldr	r3, [pc, #208]	@ (80023b4 <Prismatic_position_control+0x144>)
 80022e2:	edd3 7a00 	vldr	s15, [r3]
 80022e6:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 80022ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022f2:	db07      	blt.n	8002304 <Prismatic_position_control+0x94>
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d104      	bne.n	8002304 <Prismatic_position_control+0x94>
		Pris_posi_PID.Ki = 0;
 80022fa:	4b2d      	ldr	r3, [pc, #180]	@ (80023b0 <Prismatic_position_control+0x140>)
 80022fc:	f04f 0200 	mov.w	r2, #0
 8002300:	61da      	str	r2, [r3, #28]
 8002302:	e003      	b.n	800230c <Prismatic_position_control+0x9c>
	} else {
		Pris_posi_PID.Ki = 1;
 8002304:	4b2a      	ldr	r3, [pc, #168]	@ (80023b0 <Prismatic_position_control+0x140>)
 8002306:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800230a:	61da      	str	r2, [r3, #28]
 800230c:	4b28      	ldr	r3, [pc, #160]	@ (80023b0 <Prismatic_position_control+0x140>)
 800230e:	613b      	str	r3, [r7, #16]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	60fb      	str	r3, [r7, #12]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	ed93 7a00 	vldr	s14, [r3]
 800231a:	edd7 7a03 	vldr	s15, [r7, #12]
 800231e:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	edd3 6a01 	vldr	s13, [r3, #4]
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	edd3 7a03 	vldr	s15, [r3, #12]
 800232e:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8002332:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	edd3 6a02 	vldr	s13, [r3, #8]
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002342:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002346:	ee37 7a27 	vadd.f32	s14, s14, s15
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8002350:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002354:	edc7 7a02 	vstr	s15, [r7, #8]

    /* Update state */
    S->state[1] = S->state[0];
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	68da      	ldr	r2, [r3, #12]
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	68ba      	ldr	r2, [r7, #8]
 800236a:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 800236c:	68bb      	ldr	r3, [r7, #8]
	}

	V_pris_posi_PID = arm_pid_f32(&Pris_posi_PID, delta_posi);
 800236e:	4a11      	ldr	r2, [pc, #68]	@ (80023b4 <Prismatic_position_control+0x144>)
 8002370:	6013      	str	r3, [r2, #0]

	if (V_pris_posi_PID > 24) {
 8002372:	4b10      	ldr	r3, [pc, #64]	@ (80023b4 <Prismatic_position_control+0x144>)
 8002374:	edd3 7a00 	vldr	s15, [r3]
 8002378:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 800237c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002384:	dd02      	ble.n	800238c <Prismatic_position_control+0x11c>
		V_pris_posi_PID = 24;
 8002386:	4b0b      	ldr	r3, [pc, #44]	@ (80023b4 <Prismatic_position_control+0x144>)
 8002388:	4a0b      	ldr	r2, [pc, #44]	@ (80023b8 <Prismatic_position_control+0x148>)
 800238a:	601a      	str	r2, [r3, #0]
	}

	error_posi_pris[1] = error_posi_pris[0];
 800238c:	4b07      	ldr	r3, [pc, #28]	@ (80023ac <Prismatic_position_control+0x13c>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a06      	ldr	r2, [pc, #24]	@ (80023ac <Prismatic_position_control+0x13c>)
 8002392:	6053      	str	r3, [r2, #4]
	return V_pris_posi_PID;
 8002394:	4b07      	ldr	r3, [pc, #28]	@ (80023b4 <Prismatic_position_control+0x144>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	ee07 3a90 	vmov	s15, r3
}
 800239c:	eeb0 0a67 	vmov.f32	s0, s15
 80023a0:	371c      	adds	r7, #28
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	20001104 	.word	0x20001104
 80023b0:	200010cc 	.word	0x200010cc
 80023b4:	200010f8 	.word	0x200010f8
 80023b8:	41c00000 	.word	0x41c00000

080023bc <voltage_to_pwm>:
	V_rev_velo_PID = arm_pid_f32(&Rev_velo_PID, delta_velo);
	error_velo_rev[1] = error_velo_rev[0];
	return V_rev_velo_PID;
}

float voltage_to_pwm(float voltage) {
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	ed87 0a01 	vstr	s0, [r7, #4]
	float pwm = (voltage * 65535) / 24;
 80023c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80023ca:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80023f4 <voltage_to_pwm+0x38>
 80023ce:	ee27 7a87 	vmul.f32	s14, s15, s14
 80023d2:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 80023d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023da:	edc7 7a03 	vstr	s15, [r7, #12]
	return pwm;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	ee07 3a90 	vmov	s15, r3
}
 80023e4:	eeb0 0a67 	vmov.f32	s0, s15
 80023e8:	3714      	adds	r7, #20
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	477fff00 	.word	0x477fff00

080023f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023fc:	b672      	cpsid	i
}
 80023fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002400:	bf00      	nop
 8002402:	e7fd      	b.n	8002400 <Error_Handler+0x8>

08002404 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800240a:	4b0f      	ldr	r3, [pc, #60]	@ (8002448 <HAL_MspInit+0x44>)
 800240c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800240e:	4a0e      	ldr	r2, [pc, #56]	@ (8002448 <HAL_MspInit+0x44>)
 8002410:	f043 0301 	orr.w	r3, r3, #1
 8002414:	6613      	str	r3, [r2, #96]	@ 0x60
 8002416:	4b0c      	ldr	r3, [pc, #48]	@ (8002448 <HAL_MspInit+0x44>)
 8002418:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	607b      	str	r3, [r7, #4]
 8002420:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002422:	4b09      	ldr	r3, [pc, #36]	@ (8002448 <HAL_MspInit+0x44>)
 8002424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002426:	4a08      	ldr	r2, [pc, #32]	@ (8002448 <HAL_MspInit+0x44>)
 8002428:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800242c:	6593      	str	r3, [r2, #88]	@ 0x58
 800242e:	4b06      	ldr	r3, [pc, #24]	@ (8002448 <HAL_MspInit+0x44>)
 8002430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002432:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002436:	603b      	str	r3, [r7, #0]
 8002438:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800243a:	f002 fd4b 	bl	8004ed4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800243e:	bf00      	nop
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40021000 	.word	0x40021000

0800244c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b0a0      	sub	sp, #128	@ 0x80
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002454:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	605a      	str	r2, [r3, #4]
 800245e:	609a      	str	r2, [r3, #8]
 8002460:	60da      	str	r2, [r3, #12]
 8002462:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002464:	f107 0318 	add.w	r3, r7, #24
 8002468:	2254      	movs	r2, #84	@ 0x54
 800246a:	2100      	movs	r1, #0
 800246c:	4618      	mov	r0, r3
 800246e:	f008 fb3b 	bl	800aae8 <memset>
  if(hadc->Instance==ADC1)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800247a:	d13e      	bne.n	80024fa <HAL_ADC_MspInit+0xae>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800247c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002480:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002482:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002486:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002488:	f107 0318 	add.w	r3, r7, #24
 800248c:	4618      	mov	r0, r3
 800248e:	f003 fa5f 	bl	8005950 <HAL_RCCEx_PeriphCLKConfig>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002498:	f7ff ffae 	bl	80023f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800249c:	4b3a      	ldr	r3, [pc, #232]	@ (8002588 <HAL_ADC_MspInit+0x13c>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	3301      	adds	r3, #1
 80024a2:	4a39      	ldr	r2, [pc, #228]	@ (8002588 <HAL_ADC_MspInit+0x13c>)
 80024a4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80024a6:	4b38      	ldr	r3, [pc, #224]	@ (8002588 <HAL_ADC_MspInit+0x13c>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d10b      	bne.n	80024c6 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80024ae:	4b37      	ldr	r3, [pc, #220]	@ (800258c <HAL_ADC_MspInit+0x140>)
 80024b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024b2:	4a36      	ldr	r2, [pc, #216]	@ (800258c <HAL_ADC_MspInit+0x140>)
 80024b4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80024b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024ba:	4b34      	ldr	r3, [pc, #208]	@ (800258c <HAL_ADC_MspInit+0x140>)
 80024bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024c2:	617b      	str	r3, [r7, #20]
 80024c4:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c6:	4b31      	ldr	r3, [pc, #196]	@ (800258c <HAL_ADC_MspInit+0x140>)
 80024c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ca:	4a30      	ldr	r2, [pc, #192]	@ (800258c <HAL_ADC_MspInit+0x140>)
 80024cc:	f043 0301 	orr.w	r3, r3, #1
 80024d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024d2:	4b2e      	ldr	r3, [pc, #184]	@ (800258c <HAL_ADC_MspInit+0x140>)
 80024d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	613b      	str	r3, [r7, #16]
 80024dc:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = Current_Sensor_Pin|Current_SensorA1_Pin;
 80024de:	2303      	movs	r3, #3
 80024e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024e2:	2303      	movs	r3, #3
 80024e4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e6:	2300      	movs	r3, #0
 80024e8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ea:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80024ee:	4619      	mov	r1, r3
 80024f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024f4:	f002 fa98 	bl	8004a28 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 80024f8:	e042      	b.n	8002580 <HAL_ADC_MspInit+0x134>
  else if(hadc->Instance==ADC2)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a24      	ldr	r2, [pc, #144]	@ (8002590 <HAL_ADC_MspInit+0x144>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d13d      	bne.n	8002580 <HAL_ADC_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002504:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002508:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800250a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800250e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002510:	f107 0318 	add.w	r3, r7, #24
 8002514:	4618      	mov	r0, r3
 8002516:	f003 fa1b 	bl	8005950 <HAL_RCCEx_PeriphCLKConfig>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <HAL_ADC_MspInit+0xd8>
      Error_Handler();
 8002520:	f7ff ff6a 	bl	80023f8 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002524:	4b18      	ldr	r3, [pc, #96]	@ (8002588 <HAL_ADC_MspInit+0x13c>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	3301      	adds	r3, #1
 800252a:	4a17      	ldr	r2, [pc, #92]	@ (8002588 <HAL_ADC_MspInit+0x13c>)
 800252c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800252e:	4b16      	ldr	r3, [pc, #88]	@ (8002588 <HAL_ADC_MspInit+0x13c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d10b      	bne.n	800254e <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002536:	4b15      	ldr	r3, [pc, #84]	@ (800258c <HAL_ADC_MspInit+0x140>)
 8002538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800253a:	4a14      	ldr	r2, [pc, #80]	@ (800258c <HAL_ADC_MspInit+0x140>)
 800253c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002540:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002542:	4b12      	ldr	r3, [pc, #72]	@ (800258c <HAL_ADC_MspInit+0x140>)
 8002544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002546:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800254e:	4b0f      	ldr	r3, [pc, #60]	@ (800258c <HAL_ADC_MspInit+0x140>)
 8002550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002552:	4a0e      	ldr	r2, [pc, #56]	@ (800258c <HAL_ADC_MspInit+0x140>)
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800255a:	4b0c      	ldr	r3, [pc, #48]	@ (800258c <HAL_ADC_MspInit+0x140>)
 800255c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	60bb      	str	r3, [r7, #8]
 8002564:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Current_SensorA1_Pin;
 8002566:	2302      	movs	r3, #2
 8002568:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800256a:	2303      	movs	r3, #3
 800256c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256e:	2300      	movs	r3, #0
 8002570:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(Current_SensorA1_GPIO_Port, &GPIO_InitStruct);
 8002572:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002576:	4619      	mov	r1, r3
 8002578:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800257c:	f002 fa54 	bl	8004a28 <HAL_GPIO_Init>
}
 8002580:	bf00      	nop
 8002582:	3780      	adds	r7, #128	@ 0x80
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	200014d8 	.word	0x200014d8
 800258c:	40021000 	.word	0x40021000
 8002590:	50000100 	.word	0x50000100

08002594 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b088      	sub	sp, #32
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a3d      	ldr	r2, [pc, #244]	@ (8002698 <HAL_TIM_Base_MspInit+0x104>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d11c      	bne.n	80025e0 <HAL_TIM_Base_MspInit+0x4c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025a6:	4b3d      	ldr	r3, [pc, #244]	@ (800269c <HAL_TIM_Base_MspInit+0x108>)
 80025a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025aa:	4a3c      	ldr	r2, [pc, #240]	@ (800269c <HAL_TIM_Base_MspInit+0x108>)
 80025ac:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80025b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80025b2:	4b3a      	ldr	r3, [pc, #232]	@ (800269c <HAL_TIM_Base_MspInit+0x108>)
 80025b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025ba:	61fb      	str	r3, [r7, #28]
 80025bc:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80025be:	2200      	movs	r2, #0
 80025c0:	2100      	movs	r1, #0
 80025c2:	2018      	movs	r0, #24
 80025c4:	f001 febd 	bl	8004342 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80025c8:	2018      	movs	r0, #24
 80025ca:	f001 fed4 	bl	8004376 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80025ce:	2200      	movs	r2, #0
 80025d0:	2100      	movs	r1, #0
 80025d2:	2019      	movs	r0, #25
 80025d4:	f001 feb5 	bl	8004342 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80025d8:	2019      	movs	r0, #25
 80025da:	f001 fecc 	bl	8004376 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM20_MspInit 1 */

    /* USER CODE END TIM20_MspInit 1 */
  }

}
 80025de:	e056      	b.n	800268e <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM2)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025e8:	d114      	bne.n	8002614 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025ea:	4b2c      	ldr	r3, [pc, #176]	@ (800269c <HAL_TIM_Base_MspInit+0x108>)
 80025ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ee:	4a2b      	ldr	r2, [pc, #172]	@ (800269c <HAL_TIM_Base_MspInit+0x108>)
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80025f6:	4b29      	ldr	r3, [pc, #164]	@ (800269c <HAL_TIM_Base_MspInit+0x108>)
 80025f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	61bb      	str	r3, [r7, #24]
 8002600:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002602:	2200      	movs	r2, #0
 8002604:	2100      	movs	r1, #0
 8002606:	201c      	movs	r0, #28
 8002608:	f001 fe9b 	bl	8004342 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800260c:	201c      	movs	r0, #28
 800260e:	f001 feb2 	bl	8004376 <HAL_NVIC_EnableIRQ>
}
 8002612:	e03c      	b.n	800268e <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM8)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a21      	ldr	r2, [pc, #132]	@ (80026a0 <HAL_TIM_Base_MspInit+0x10c>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d10c      	bne.n	8002638 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800261e:	4b1f      	ldr	r3, [pc, #124]	@ (800269c <HAL_TIM_Base_MspInit+0x108>)
 8002620:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002622:	4a1e      	ldr	r2, [pc, #120]	@ (800269c <HAL_TIM_Base_MspInit+0x108>)
 8002624:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002628:	6613      	str	r3, [r2, #96]	@ 0x60
 800262a:	4b1c      	ldr	r3, [pc, #112]	@ (800269c <HAL_TIM_Base_MspInit+0x108>)
 800262c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800262e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002632:	617b      	str	r3, [r7, #20]
 8002634:	697b      	ldr	r3, [r7, #20]
}
 8002636:	e02a      	b.n	800268e <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM16)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a19      	ldr	r2, [pc, #100]	@ (80026a4 <HAL_TIM_Base_MspInit+0x110>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d114      	bne.n	800266c <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002642:	4b16      	ldr	r3, [pc, #88]	@ (800269c <HAL_TIM_Base_MspInit+0x108>)
 8002644:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002646:	4a15      	ldr	r2, [pc, #84]	@ (800269c <HAL_TIM_Base_MspInit+0x108>)
 8002648:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800264c:	6613      	str	r3, [r2, #96]	@ 0x60
 800264e:	4b13      	ldr	r3, [pc, #76]	@ (800269c <HAL_TIM_Base_MspInit+0x108>)
 8002650:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002656:	613b      	str	r3, [r7, #16]
 8002658:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800265a:	2200      	movs	r2, #0
 800265c:	2100      	movs	r1, #0
 800265e:	2019      	movs	r0, #25
 8002660:	f001 fe6f 	bl	8004342 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002664:	2019      	movs	r0, #25
 8002666:	f001 fe86 	bl	8004376 <HAL_NVIC_EnableIRQ>
}
 800266a:	e010      	b.n	800268e <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM20)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a0d      	ldr	r2, [pc, #52]	@ (80026a8 <HAL_TIM_Base_MspInit+0x114>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d10b      	bne.n	800268e <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8002676:	4b09      	ldr	r3, [pc, #36]	@ (800269c <HAL_TIM_Base_MspInit+0x108>)
 8002678:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800267a:	4a08      	ldr	r2, [pc, #32]	@ (800269c <HAL_TIM_Base_MspInit+0x108>)
 800267c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002680:	6613      	str	r3, [r2, #96]	@ 0x60
 8002682:	4b06      	ldr	r3, [pc, #24]	@ (800269c <HAL_TIM_Base_MspInit+0x108>)
 8002684:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002686:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	68fb      	ldr	r3, [r7, #12]
}
 800268e:	bf00      	nop
 8002690:	3720      	adds	r7, #32
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	40012c00 	.word	0x40012c00
 800269c:	40021000 	.word	0x40021000
 80026a0:	40013400 	.word	0x40013400
 80026a4:	40014400 	.word	0x40014400
 80026a8:	40015000 	.word	0x40015000

080026ac <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b08c      	sub	sp, #48	@ 0x30
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b4:	f107 031c 	add.w	r3, r7, #28
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	605a      	str	r2, [r3, #4]
 80026be:	609a      	str	r2, [r3, #8]
 80026c0:	60da      	str	r2, [r3, #12]
 80026c2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a2f      	ldr	r2, [pc, #188]	@ (8002788 <HAL_TIM_Encoder_MspInit+0xdc>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d129      	bne.n	8002722 <HAL_TIM_Encoder_MspInit+0x76>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026ce:	4b2f      	ldr	r3, [pc, #188]	@ (800278c <HAL_TIM_Encoder_MspInit+0xe0>)
 80026d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026d2:	4a2e      	ldr	r2, [pc, #184]	@ (800278c <HAL_TIM_Encoder_MspInit+0xe0>)
 80026d4:	f043 0302 	orr.w	r3, r3, #2
 80026d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80026da:	4b2c      	ldr	r3, [pc, #176]	@ (800278c <HAL_TIM_Encoder_MspInit+0xe0>)
 80026dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	61bb      	str	r3, [r7, #24]
 80026e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026e6:	4b29      	ldr	r3, [pc, #164]	@ (800278c <HAL_TIM_Encoder_MspInit+0xe0>)
 80026e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ea:	4a28      	ldr	r2, [pc, #160]	@ (800278c <HAL_TIM_Encoder_MspInit+0xe0>)
 80026ec:	f043 0301 	orr.w	r3, r3, #1
 80026f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026f2:	4b26      	ldr	r3, [pc, #152]	@ (800278c <HAL_TIM_Encoder_MspInit+0xe0>)
 80026f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	617b      	str	r3, [r7, #20]
 80026fc:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Encoder_1_Pin|Encoder_1A7_Pin;
 80026fe:	23c0      	movs	r3, #192	@ 0xc0
 8002700:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002702:	2302      	movs	r3, #2
 8002704:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002706:	2300      	movs	r3, #0
 8002708:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800270a:	2300      	movs	r3, #0
 800270c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800270e:	2302      	movs	r3, #2
 8002710:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002712:	f107 031c 	add.w	r3, r7, #28
 8002716:	4619      	mov	r1, r3
 8002718:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800271c:	f002 f984 	bl	8004a28 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002720:	e02e      	b.n	8002780 <HAL_TIM_Encoder_MspInit+0xd4>
  else if(htim_encoder->Instance==TIM4)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a1a      	ldr	r2, [pc, #104]	@ (8002790 <HAL_TIM_Encoder_MspInit+0xe4>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d129      	bne.n	8002780 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800272c:	4b17      	ldr	r3, [pc, #92]	@ (800278c <HAL_TIM_Encoder_MspInit+0xe0>)
 800272e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002730:	4a16      	ldr	r2, [pc, #88]	@ (800278c <HAL_TIM_Encoder_MspInit+0xe0>)
 8002732:	f043 0304 	orr.w	r3, r3, #4
 8002736:	6593      	str	r3, [r2, #88]	@ 0x58
 8002738:	4b14      	ldr	r3, [pc, #80]	@ (800278c <HAL_TIM_Encoder_MspInit+0xe0>)
 800273a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	613b      	str	r3, [r7, #16]
 8002742:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002744:	4b11      	ldr	r3, [pc, #68]	@ (800278c <HAL_TIM_Encoder_MspInit+0xe0>)
 8002746:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002748:	4a10      	ldr	r2, [pc, #64]	@ (800278c <HAL_TIM_Encoder_MspInit+0xe0>)
 800274a:	f043 0301 	orr.w	r3, r3, #1
 800274e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002750:	4b0e      	ldr	r3, [pc, #56]	@ (800278c <HAL_TIM_Encoder_MspInit+0xe0>)
 8002752:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	60fb      	str	r3, [r7, #12]
 800275a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder_2_Pin|Encoder_2A12_Pin;
 800275c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002760:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002762:	2302      	movs	r3, #2
 8002764:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002766:	2300      	movs	r3, #0
 8002768:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800276a:	2300      	movs	r3, #0
 800276c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800276e:	230a      	movs	r3, #10
 8002770:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002772:	f107 031c 	add.w	r3, r7, #28
 8002776:	4619      	mov	r1, r3
 8002778:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800277c:	f002 f954 	bl	8004a28 <HAL_GPIO_Init>
}
 8002780:	bf00      	nop
 8002782:	3730      	adds	r7, #48	@ 0x30
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40000400 	.word	0x40000400
 800278c:	40021000 	.word	0x40021000
 8002790:	40000800 	.word	0x40000800

08002794 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b08a      	sub	sp, #40	@ 0x28
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800279c:	f107 0314 	add.w	r3, r7, #20
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	605a      	str	r2, [r3, #4]
 80027a6:	609a      	str	r2, [r3, #8]
 80027a8:	60da      	str	r2, [r3, #12]
 80027aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a31      	ldr	r2, [pc, #196]	@ (8002878 <HAL_TIM_MspPostInit+0xe4>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d11d      	bne.n	80027f2 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM8_MspPostInit 0 */

    /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027b6:	4b31      	ldr	r3, [pc, #196]	@ (800287c <HAL_TIM_MspPostInit+0xe8>)
 80027b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027ba:	4a30      	ldr	r2, [pc, #192]	@ (800287c <HAL_TIM_MspPostInit+0xe8>)
 80027bc:	f043 0304 	orr.w	r3, r3, #4
 80027c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027c2:	4b2e      	ldr	r3, [pc, #184]	@ (800287c <HAL_TIM_MspPostInit+0xe8>)
 80027c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027c6:	f003 0304 	and.w	r3, r3, #4
 80027ca:	613b      	str	r3, [r7, #16]
 80027cc:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = PWM_Servo_Pin;
 80027ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80027d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d4:	2302      	movs	r3, #2
 80027d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d8:	2300      	movs	r3, #0
 80027da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027dc:	2300      	movs	r3, #0
 80027de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80027e0:	2304      	movs	r3, #4
 80027e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_Servo_GPIO_Port, &GPIO_InitStruct);
 80027e4:	f107 0314 	add.w	r3, r7, #20
 80027e8:	4619      	mov	r1, r3
 80027ea:	4825      	ldr	r0, [pc, #148]	@ (8002880 <HAL_TIM_MspPostInit+0xec>)
 80027ec:	f002 f91c 	bl	8004a28 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM20_MspPostInit 1 */

    /* USER CODE END TIM20_MspPostInit 1 */
  }

}
 80027f0:	e03d      	b.n	800286e <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM20)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a23      	ldr	r2, [pc, #140]	@ (8002884 <HAL_TIM_MspPostInit+0xf0>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d138      	bne.n	800286e <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027fc:	4b1f      	ldr	r3, [pc, #124]	@ (800287c <HAL_TIM_MspPostInit+0xe8>)
 80027fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002800:	4a1e      	ldr	r2, [pc, #120]	@ (800287c <HAL_TIM_MspPostInit+0xe8>)
 8002802:	f043 0302 	orr.w	r3, r3, #2
 8002806:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002808:	4b1c      	ldr	r3, [pc, #112]	@ (800287c <HAL_TIM_MspPostInit+0xe8>)
 800280a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	60fb      	str	r3, [r7, #12]
 8002812:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002814:	4b19      	ldr	r3, [pc, #100]	@ (800287c <HAL_TIM_MspPostInit+0xe8>)
 8002816:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002818:	4a18      	ldr	r2, [pc, #96]	@ (800287c <HAL_TIM_MspPostInit+0xe8>)
 800281a:	f043 0304 	orr.w	r3, r3, #4
 800281e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002820:	4b16      	ldr	r3, [pc, #88]	@ (800287c <HAL_TIM_MspPostInit+0xe8>)
 8002822:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002824:	f003 0304 	and.w	r3, r3, #4
 8002828:	60bb      	str	r3, [r7, #8]
 800282a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_MD20A_24V_Pin;
 800282c:	2304      	movs	r3, #4
 800282e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002830:	2302      	movs	r3, #2
 8002832:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002834:	2300      	movs	r3, #0
 8002836:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002838:	2300      	movs	r3, #0
 800283a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 800283c:	2303      	movs	r3, #3
 800283e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MD20A_24V_GPIO_Port, &GPIO_InitStruct);
 8002840:	f107 0314 	add.w	r3, r7, #20
 8002844:	4619      	mov	r1, r3
 8002846:	4810      	ldr	r0, [pc, #64]	@ (8002888 <HAL_TIM_MspPostInit+0xf4>)
 8002848:	f002 f8ee 	bl	8004a28 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_MD20A_18V_Pin;
 800284c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002850:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002852:	2302      	movs	r3, #2
 8002854:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002856:	2300      	movs	r3, #0
 8002858:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800285a:	2300      	movs	r3, #0
 800285c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM20;
 800285e:	2306      	movs	r3, #6
 8002860:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MD20A_18V_GPIO_Port, &GPIO_InitStruct);
 8002862:	f107 0314 	add.w	r3, r7, #20
 8002866:	4619      	mov	r1, r3
 8002868:	4805      	ldr	r0, [pc, #20]	@ (8002880 <HAL_TIM_MspPostInit+0xec>)
 800286a:	f002 f8dd 	bl	8004a28 <HAL_GPIO_Init>
}
 800286e:	bf00      	nop
 8002870:	3728      	adds	r7, #40	@ 0x28
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40013400 	.word	0x40013400
 800287c:	40021000 	.word	0x40021000
 8002880:	48000800 	.word	0x48000800
 8002884:	40015000 	.word	0x40015000
 8002888:	48000400 	.word	0x48000400

0800288c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b09e      	sub	sp, #120	@ 0x78
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002894:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	605a      	str	r2, [r3, #4]
 800289e:	609a      	str	r2, [r3, #8]
 80028a0:	60da      	str	r2, [r3, #12]
 80028a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028a4:	f107 0310 	add.w	r3, r7, #16
 80028a8:	2254      	movs	r2, #84	@ 0x54
 80028aa:	2100      	movs	r1, #0
 80028ac:	4618      	mov	r0, r3
 80028ae:	f008 f91b 	bl	800aae8 <memset>
  if(huart->Instance==USART2)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a37      	ldr	r2, [pc, #220]	@ (8002994 <HAL_UART_MspInit+0x108>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d167      	bne.n	800298c <HAL_UART_MspInit+0x100>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80028bc:	2302      	movs	r3, #2
 80028be:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80028c0:	2300      	movs	r3, #0
 80028c2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028c4:	f107 0310 	add.w	r3, r7, #16
 80028c8:	4618      	mov	r0, r3
 80028ca:	f003 f841 	bl	8005950 <HAL_RCCEx_PeriphCLKConfig>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80028d4:	f7ff fd90 	bl	80023f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80028d8:	4b2f      	ldr	r3, [pc, #188]	@ (8002998 <HAL_UART_MspInit+0x10c>)
 80028da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028dc:	4a2e      	ldr	r2, [pc, #184]	@ (8002998 <HAL_UART_MspInit+0x10c>)
 80028de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80028e4:	4b2c      	ldr	r3, [pc, #176]	@ (8002998 <HAL_UART_MspInit+0x10c>)
 80028e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ec:	60fb      	str	r3, [r7, #12]
 80028ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f0:	4b29      	ldr	r3, [pc, #164]	@ (8002998 <HAL_UART_MspInit+0x10c>)
 80028f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028f4:	4a28      	ldr	r2, [pc, #160]	@ (8002998 <HAL_UART_MspInit+0x10c>)
 80028f6:	f043 0301 	orr.w	r3, r3, #1
 80028fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028fc:	4b26      	ldr	r3, [pc, #152]	@ (8002998 <HAL_UART_MspInit+0x10c>)
 80028fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	60bb      	str	r3, [r7, #8]
 8002906:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002908:	230c      	movs	r3, #12
 800290a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800290c:	2302      	movs	r3, #2
 800290e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002910:	2300      	movs	r3, #0
 8002912:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002914:	2300      	movs	r3, #0
 8002916:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002918:	2307      	movs	r3, #7
 800291a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800291c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002920:	4619      	mov	r1, r3
 8002922:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002926:	f002 f87f 	bl	8004a28 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 800292a:	4b1c      	ldr	r3, [pc, #112]	@ (800299c <HAL_UART_MspInit+0x110>)
 800292c:	4a1c      	ldr	r2, [pc, #112]	@ (80029a0 <HAL_UART_MspInit+0x114>)
 800292e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002930:	4b1a      	ldr	r3, [pc, #104]	@ (800299c <HAL_UART_MspInit+0x110>)
 8002932:	221b      	movs	r2, #27
 8002934:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002936:	4b19      	ldr	r3, [pc, #100]	@ (800299c <HAL_UART_MspInit+0x110>)
 8002938:	2210      	movs	r2, #16
 800293a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800293c:	4b17      	ldr	r3, [pc, #92]	@ (800299c <HAL_UART_MspInit+0x110>)
 800293e:	2200      	movs	r2, #0
 8002940:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002942:	4b16      	ldr	r3, [pc, #88]	@ (800299c <HAL_UART_MspInit+0x110>)
 8002944:	2280      	movs	r2, #128	@ 0x80
 8002946:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002948:	4b14      	ldr	r3, [pc, #80]	@ (800299c <HAL_UART_MspInit+0x110>)
 800294a:	2200      	movs	r2, #0
 800294c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800294e:	4b13      	ldr	r3, [pc, #76]	@ (800299c <HAL_UART_MspInit+0x110>)
 8002950:	2200      	movs	r2, #0
 8002952:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002954:	4b11      	ldr	r3, [pc, #68]	@ (800299c <HAL_UART_MspInit+0x110>)
 8002956:	2200      	movs	r2, #0
 8002958:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800295a:	4b10      	ldr	r3, [pc, #64]	@ (800299c <HAL_UART_MspInit+0x110>)
 800295c:	2200      	movs	r2, #0
 800295e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002960:	480e      	ldr	r0, [pc, #56]	@ (800299c <HAL_UART_MspInit+0x110>)
 8002962:	f001 fd23 	bl	80043ac <HAL_DMA_Init>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d001      	beq.n	8002970 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 800296c:	f7ff fd44 	bl	80023f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a0a      	ldr	r2, [pc, #40]	@ (800299c <HAL_UART_MspInit+0x110>)
 8002974:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002976:	4a09      	ldr	r2, [pc, #36]	@ (800299c <HAL_UART_MspInit+0x110>)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800297c:	2200      	movs	r2, #0
 800297e:	2100      	movs	r1, #0
 8002980:	2026      	movs	r0, #38	@ 0x26
 8002982:	f001 fcde 	bl	8004342 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002986:	2026      	movs	r0, #38	@ 0x26
 8002988:	f001 fcf5 	bl	8004376 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800298c:	bf00      	nop
 800298e:	3778      	adds	r7, #120	@ 0x78
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	40004400 	.word	0x40004400
 8002998:	40021000 	.word	0x40021000
 800299c:	20000968 	.word	0x20000968
 80029a0:	40020008 	.word	0x40020008

080029a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80029a8:	bf00      	nop
 80029aa:	e7fd      	b.n	80029a8 <NMI_Handler+0x4>

080029ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029b0:	bf00      	nop
 80029b2:	e7fd      	b.n	80029b0 <HardFault_Handler+0x4>

080029b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029b8:	bf00      	nop
 80029ba:	e7fd      	b.n	80029b8 <MemManage_Handler+0x4>

080029bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029c0:	bf00      	nop
 80029c2:	e7fd      	b.n	80029c0 <BusFault_Handler+0x4>

080029c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029c8:	bf00      	nop
 80029ca:	e7fd      	b.n	80029c8 <UsageFault_Handler+0x4>

080029cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029d0:	bf00      	nop
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr

080029da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029da:	b480      	push	{r7}
 80029dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029de:	bf00      	nop
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029ec:	bf00      	nop
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr

080029f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029fa:	f000 f8eb 	bl	8002bd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029fe:	bf00      	nop
 8002a00:	bd80      	pop	{r7, pc}
	...

08002a04 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002a08:	4802      	ldr	r0, [pc, #8]	@ (8002a14 <DMA1_Channel1_IRQHandler+0x10>)
 8002a0a:	f001 feb2 	bl	8004772 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002a0e:	bf00      	nop
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	20000968 	.word	0x20000968

08002a18 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_pen_1_Pin);
 8002a1c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002a20:	f002 f99c 	bl	8004d5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002a24:	bf00      	nop
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002a2c:	4802      	ldr	r0, [pc, #8]	@ (8002a38 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8002a2e:	f003 ff4f 	bl	80068d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002a32:	bf00      	nop
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	20000308 	.word	0x20000308

08002a3c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002a40:	4803      	ldr	r0, [pc, #12]	@ (8002a50 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8002a42:	f003 ff45 	bl	80068d0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8002a46:	4803      	ldr	r0, [pc, #12]	@ (8002a54 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8002a48:	f003 ff42 	bl	80068d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002a4c:	bf00      	nop
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	20000308 	.word	0x20000308
 8002a54:	20000704 	.word	0x20000704

08002a58 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002a5c:	4802      	ldr	r0, [pc, #8]	@ (8002a68 <TIM2_IRQHandler+0x10>)
 8002a5e:	f003 ff37 	bl	80068d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002a62:	bf00      	nop
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	200003d4 	.word	0x200003d4

08002a6c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002a70:	4802      	ldr	r0, [pc, #8]	@ (8002a7c <USART2_IRQHandler+0x10>)
 8002a72:	f005 fe31 	bl	80086d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002a76:	bf00      	nop
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	2000089c 	.word	0x2000089c

08002a80 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_pen_2_Pin);
 8002a84:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002a88:	f002 f968 	bl	8004d5c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Emergency_Pin);
 8002a8c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002a90:	f002 f964 	bl	8004d5c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Proximity_sensor_Pin);
 8002a94:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002a98:	f002 f960 	bl	8004d5c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Proximity_Sensor_Pin);
 8002a9c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002aa0:	f002 f95c 	bl	8004d5c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_Prismatic1_Pin);
 8002aa4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002aa8:	f002 f958 	bl	8004d5c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_Prismatic2_Pin);
 8002aac:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002ab0:	f002 f954 	bl	8004d5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002ab4:	bf00      	nop
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002abc:	4b06      	ldr	r3, [pc, #24]	@ (8002ad8 <SystemInit+0x20>)
 8002abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ac2:	4a05      	ldr	r2, [pc, #20]	@ (8002ad8 <SystemInit+0x20>)
 8002ac4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ac8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002acc:	bf00      	nop
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	e000ed00 	.word	0xe000ed00

08002adc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002adc:	480d      	ldr	r0, [pc, #52]	@ (8002b14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002ade:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ae0:	f7ff ffea 	bl	8002ab8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ae4:	480c      	ldr	r0, [pc, #48]	@ (8002b18 <LoopForever+0x6>)
  ldr r1, =_edata
 8002ae6:	490d      	ldr	r1, [pc, #52]	@ (8002b1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ae8:	4a0d      	ldr	r2, [pc, #52]	@ (8002b20 <LoopForever+0xe>)
  movs r3, #0
 8002aea:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002aec:	e002      	b.n	8002af4 <LoopCopyDataInit>

08002aee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002aee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002af0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002af2:	3304      	adds	r3, #4

08002af4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002af4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002af6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002af8:	d3f9      	bcc.n	8002aee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002afa:	4a0a      	ldr	r2, [pc, #40]	@ (8002b24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002afc:	4c0a      	ldr	r4, [pc, #40]	@ (8002b28 <LoopForever+0x16>)
  movs r3, #0
 8002afe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b00:	e001      	b.n	8002b06 <LoopFillZerobss>

08002b02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b04:	3204      	adds	r2, #4

08002b06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b08:	d3fb      	bcc.n	8002b02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b0a:	f007 fff5 	bl	800aaf8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002b0e:	f7fe facf 	bl	80010b0 <main>

08002b12 <LoopForever>:

LoopForever:
    b LoopForever
 8002b12:	e7fe      	b.n	8002b12 <LoopForever>
  ldr   r0, =_estack
 8002b14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002b18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b1c:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8002b20:	0800abc4 	.word	0x0800abc4
  ldr r2, =_sbss
 8002b24:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8002b28:	200014e0 	.word	0x200014e0

08002b2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002b2c:	e7fe      	b.n	8002b2c <ADC1_2_IRQHandler>

08002b2e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b082      	sub	sp, #8
 8002b32:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002b34:	2300      	movs	r3, #0
 8002b36:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b38:	2003      	movs	r0, #3
 8002b3a:	f001 fbf7 	bl	800432c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b3e:	2000      	movs	r0, #0
 8002b40:	f000 f80e 	bl	8002b60 <HAL_InitTick>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d002      	beq.n	8002b50 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	71fb      	strb	r3, [r7, #7]
 8002b4e:	e001      	b.n	8002b54 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002b50:	f7ff fc58 	bl	8002404 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002b54:	79fb      	ldrb	r3, [r7, #7]

}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
	...

08002b60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002b6c:	4b16      	ldr	r3, [pc, #88]	@ (8002bc8 <HAL_InitTick+0x68>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d022      	beq.n	8002bba <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002b74:	4b15      	ldr	r3, [pc, #84]	@ (8002bcc <HAL_InitTick+0x6c>)
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	4b13      	ldr	r3, [pc, #76]	@ (8002bc8 <HAL_InitTick+0x68>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002b80:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f001 fc02 	bl	8004392 <HAL_SYSTICK_Config>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d10f      	bne.n	8002bb4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b0f      	cmp	r3, #15
 8002b98:	d809      	bhi.n	8002bae <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	6879      	ldr	r1, [r7, #4]
 8002b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8002ba2:	f001 fbce 	bl	8004342 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8002bd0 <HAL_InitTick+0x70>)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6013      	str	r3, [r2, #0]
 8002bac:	e007      	b.n	8002bbe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	73fb      	strb	r3, [r7, #15]
 8002bb2:	e004      	b.n	8002bbe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	73fb      	strb	r3, [r7, #15]
 8002bb8:	e001      	b.n	8002bbe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3710      	adds	r7, #16
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	20000208 	.word	0x20000208
 8002bcc:	20000200 	.word	0x20000200
 8002bd0:	20000204 	.word	0x20000204

08002bd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bd8:	4b05      	ldr	r3, [pc, #20]	@ (8002bf0 <HAL_IncTick+0x1c>)
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	4b05      	ldr	r3, [pc, #20]	@ (8002bf4 <HAL_IncTick+0x20>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4413      	add	r3, r2
 8002be2:	4a03      	ldr	r2, [pc, #12]	@ (8002bf0 <HAL_IncTick+0x1c>)
 8002be4:	6013      	str	r3, [r2, #0]
}
 8002be6:	bf00      	nop
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	200014dc 	.word	0x200014dc
 8002bf4:	20000208 	.word	0x20000208

08002bf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  return uwTick;
 8002bfc:	4b03      	ldr	r3, [pc, #12]	@ (8002c0c <HAL_GetTick+0x14>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	200014dc 	.word	0x200014dc

08002c10 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	431a      	orrs	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	609a      	str	r2, [r3, #8]
}
 8002c2a:	bf00      	nop
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr

08002c36 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002c36:	b480      	push	{r7}
 8002c38:	b083      	sub	sp, #12
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
 8002c3e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	609a      	str	r2, [r3, #8]
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b087      	sub	sp, #28
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
 8002c84:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	3360      	adds	r3, #96	@ 0x60
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	4413      	add	r3, r2
 8002c92:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	4b08      	ldr	r3, [pc, #32]	@ (8002cbc <LL_ADC_SetOffset+0x44>)
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002cb0:	bf00      	nop
 8002cb2:	371c      	adds	r7, #28
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr
 8002cbc:	03fff000 	.word	0x03fff000

08002cc0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	3360      	adds	r3, #96	@ 0x60
 8002cce:	461a      	mov	r2, r3
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	4413      	add	r3, r2
 8002cd6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3714      	adds	r7, #20
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b087      	sub	sp, #28
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	3360      	adds	r3, #96	@ 0x60
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	4413      	add	r3, r2
 8002d04:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	431a      	orrs	r2, r3
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002d16:	bf00      	nop
 8002d18:	371c      	adds	r7, #28
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr

08002d22 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002d22:	b480      	push	{r7}
 8002d24:	b087      	sub	sp, #28
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	60f8      	str	r0, [r7, #12]
 8002d2a:	60b9      	str	r1, [r7, #8]
 8002d2c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	3360      	adds	r3, #96	@ 0x60
 8002d32:	461a      	mov	r2, r3
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	4413      	add	r3, r2
 8002d3a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	431a      	orrs	r2, r3
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002d4c:	bf00      	nop
 8002d4e:	371c      	adds	r7, #28
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b087      	sub	sp, #28
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	3360      	adds	r3, #96	@ 0x60
 8002d68:	461a      	mov	r2, r3
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	4413      	add	r3, r2
 8002d70:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002d82:	bf00      	nop
 8002d84:	371c      	adds	r7, #28
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr

08002d8e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002d8e:	b480      	push	{r7}
 8002d90:	b083      	sub	sp, #12
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
 8002d96:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	695b      	ldr	r3, [r3, #20]
 8002d9c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	431a      	orrs	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	615a      	str	r2, [r3, #20]
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b087      	sub	sp, #28
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	3330      	adds	r3, #48	@ 0x30
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	0a1b      	lsrs	r3, r3, #8
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	f003 030c 	and.w	r3, r3, #12
 8002dd0:	4413      	add	r3, r2
 8002dd2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	f003 031f 	and.w	r3, r3, #31
 8002dde:	211f      	movs	r1, #31
 8002de0:	fa01 f303 	lsl.w	r3, r1, r3
 8002de4:	43db      	mvns	r3, r3
 8002de6:	401a      	ands	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	0e9b      	lsrs	r3, r3, #26
 8002dec:	f003 011f 	and.w	r1, r3, #31
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	f003 031f 	and.w	r3, r3, #31
 8002df6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002e00:	bf00      	nop
 8002e02:	371c      	adds	r7, #28
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b087      	sub	sp, #28
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	3314      	adds	r3, #20
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	0e5b      	lsrs	r3, r3, #25
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	4413      	add	r3, r2
 8002e2a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	0d1b      	lsrs	r3, r3, #20
 8002e34:	f003 031f 	and.w	r3, r3, #31
 8002e38:	2107      	movs	r1, #7
 8002e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e3e:	43db      	mvns	r3, r3
 8002e40:	401a      	ands	r2, r3
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	0d1b      	lsrs	r3, r3, #20
 8002e46:	f003 031f 	and.w	r3, r3, #31
 8002e4a:	6879      	ldr	r1, [r7, #4]
 8002e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e50:	431a      	orrs	r2, r3
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002e56:	bf00      	nop
 8002e58:	371c      	adds	r7, #28
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
	...

08002e64 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	401a      	ands	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f003 0318 	and.w	r3, r3, #24
 8002e86:	4908      	ldr	r1, [pc, #32]	@ (8002ea8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002e88:	40d9      	lsrs	r1, r3
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	400b      	ands	r3, r1
 8002e8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e92:	431a      	orrs	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002e9a:	bf00      	nop
 8002e9c:	3714      	adds	r7, #20
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	0007ffff 	.word	0x0007ffff

08002eac <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f003 031f 	and.w	r3, r3, #31
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002ed8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	6093      	str	r3, [r2, #8]
}
 8002ee0:	bf00      	nop
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002efc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f00:	d101      	bne.n	8002f06 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002f02:	2301      	movs	r3, #1
 8002f04:	e000      	b.n	8002f08 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002f24:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f28:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f50:	d101      	bne.n	8002f56 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002f52:	2301      	movs	r3, #1
 8002f54:	e000      	b.n	8002f58 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002f74:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f78:	f043 0201 	orr.w	r2, r3, #1
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d101      	bne.n	8002fa4 <LL_ADC_IsEnabled+0x18>
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e000      	b.n	8002fa6 <LL_ADC_IsEnabled+0x1a>
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	b083      	sub	sp, #12
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002fc2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002fc6:	f043 0204 	orr.w	r2, r3, #4
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002fce:	bf00      	nop
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b083      	sub	sp, #12
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 0304 	and.w	r3, r3, #4
 8002fea:	2b04      	cmp	r3, #4
 8002fec:	d101      	bne.n	8002ff2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e000      	b.n	8002ff4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f003 0308 	and.w	r3, r3, #8
 8003010:	2b08      	cmp	r3, #8
 8003012:	d101      	bne.n	8003018 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003014:	2301      	movs	r3, #1
 8003016:	e000      	b.n	800301a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
	...

08003028 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003028:	b590      	push	{r4, r7, lr}
 800302a:	b089      	sub	sp, #36	@ 0x24
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003030:	2300      	movs	r3, #0
 8003032:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003034:	2300      	movs	r3, #0
 8003036:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e1a9      	b.n	8003396 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800304c:	2b00      	cmp	r3, #0
 800304e:	d109      	bne.n	8003064 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f7ff f9fb 	bl	800244c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4618      	mov	r0, r3
 800306a:	f7ff ff3f 	bl	8002eec <LL_ADC_IsDeepPowerDownEnabled>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d004      	beq.n	800307e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4618      	mov	r0, r3
 800307a:	f7ff ff25 	bl	8002ec8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4618      	mov	r0, r3
 8003084:	f7ff ff5a 	bl	8002f3c <LL_ADC_IsInternalRegulatorEnabled>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d115      	bne.n	80030ba <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4618      	mov	r0, r3
 8003094:	f7ff ff3e 	bl	8002f14 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003098:	4b9c      	ldr	r3, [pc, #624]	@ (800330c <HAL_ADC_Init+0x2e4>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	099b      	lsrs	r3, r3, #6
 800309e:	4a9c      	ldr	r2, [pc, #624]	@ (8003310 <HAL_ADC_Init+0x2e8>)
 80030a0:	fba2 2303 	umull	r2, r3, r2, r3
 80030a4:	099b      	lsrs	r3, r3, #6
 80030a6:	3301      	adds	r3, #1
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80030ac:	e002      	b.n	80030b4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	3b01      	subs	r3, #1
 80030b2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1f9      	bne.n	80030ae <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4618      	mov	r0, r3
 80030c0:	f7ff ff3c 	bl	8002f3c <LL_ADC_IsInternalRegulatorEnabled>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10d      	bne.n	80030e6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ce:	f043 0210 	orr.w	r2, r3, #16
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030da:	f043 0201 	orr.w	r2, r3, #1
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7ff ff75 	bl	8002fda <LL_ADC_REG_IsConversionOngoing>
 80030f0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030f6:	f003 0310 	and.w	r3, r3, #16
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f040 8142 	bne.w	8003384 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	2b00      	cmp	r3, #0
 8003104:	f040 813e 	bne.w	8003384 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800310c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003110:	f043 0202 	orr.w	r2, r3, #2
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4618      	mov	r0, r3
 800311e:	f7ff ff35 	bl	8002f8c <LL_ADC_IsEnabled>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d141      	bne.n	80031ac <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003130:	d004      	beq.n	800313c <HAL_ADC_Init+0x114>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a77      	ldr	r2, [pc, #476]	@ (8003314 <HAL_ADC_Init+0x2ec>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d10f      	bne.n	800315c <HAL_ADC_Init+0x134>
 800313c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003140:	f7ff ff24 	bl	8002f8c <LL_ADC_IsEnabled>
 8003144:	4604      	mov	r4, r0
 8003146:	4873      	ldr	r0, [pc, #460]	@ (8003314 <HAL_ADC_Init+0x2ec>)
 8003148:	f7ff ff20 	bl	8002f8c <LL_ADC_IsEnabled>
 800314c:	4603      	mov	r3, r0
 800314e:	4323      	orrs	r3, r4
 8003150:	2b00      	cmp	r3, #0
 8003152:	bf0c      	ite	eq
 8003154:	2301      	moveq	r3, #1
 8003156:	2300      	movne	r3, #0
 8003158:	b2db      	uxtb	r3, r3
 800315a:	e012      	b.n	8003182 <HAL_ADC_Init+0x15a>
 800315c:	486e      	ldr	r0, [pc, #440]	@ (8003318 <HAL_ADC_Init+0x2f0>)
 800315e:	f7ff ff15 	bl	8002f8c <LL_ADC_IsEnabled>
 8003162:	4604      	mov	r4, r0
 8003164:	486d      	ldr	r0, [pc, #436]	@ (800331c <HAL_ADC_Init+0x2f4>)
 8003166:	f7ff ff11 	bl	8002f8c <LL_ADC_IsEnabled>
 800316a:	4603      	mov	r3, r0
 800316c:	431c      	orrs	r4, r3
 800316e:	486c      	ldr	r0, [pc, #432]	@ (8003320 <HAL_ADC_Init+0x2f8>)
 8003170:	f7ff ff0c 	bl	8002f8c <LL_ADC_IsEnabled>
 8003174:	4603      	mov	r3, r0
 8003176:	4323      	orrs	r3, r4
 8003178:	2b00      	cmp	r3, #0
 800317a:	bf0c      	ite	eq
 800317c:	2301      	moveq	r3, #1
 800317e:	2300      	movne	r3, #0
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d012      	beq.n	80031ac <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800318e:	d004      	beq.n	800319a <HAL_ADC_Init+0x172>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a5f      	ldr	r2, [pc, #380]	@ (8003314 <HAL_ADC_Init+0x2ec>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d101      	bne.n	800319e <HAL_ADC_Init+0x176>
 800319a:	4a62      	ldr	r2, [pc, #392]	@ (8003324 <HAL_ADC_Init+0x2fc>)
 800319c:	e000      	b.n	80031a0 <HAL_ADC_Init+0x178>
 800319e:	4a62      	ldr	r2, [pc, #392]	@ (8003328 <HAL_ADC_Init+0x300>)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	4619      	mov	r1, r3
 80031a6:	4610      	mov	r0, r2
 80031a8:	f7ff fd32 	bl	8002c10 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	7f5b      	ldrb	r3, [r3, #29]
 80031b0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80031b6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80031bc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80031c2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80031ca:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80031cc:	4313      	orrs	r3, r2
 80031ce:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d106      	bne.n	80031e8 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031de:	3b01      	subs	r3, #1
 80031e0:	045b      	lsls	r3, r3, #17
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d009      	beq.n	8003204 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031f4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031fc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031fe:	69ba      	ldr	r2, [r7, #24]
 8003200:	4313      	orrs	r3, r2
 8003202:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68da      	ldr	r2, [r3, #12]
 800320a:	4b48      	ldr	r3, [pc, #288]	@ (800332c <HAL_ADC_Init+0x304>)
 800320c:	4013      	ands	r3, r2
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	6812      	ldr	r2, [r2, #0]
 8003212:	69b9      	ldr	r1, [r7, #24]
 8003214:	430b      	orrs	r3, r1
 8003216:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	430a      	orrs	r2, r1
 800322c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4618      	mov	r0, r3
 8003234:	f7ff fee4 	bl	8003000 <LL_ADC_INJ_IsConversionOngoing>
 8003238:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d17f      	bne.n	8003340 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d17c      	bne.n	8003340 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800324a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003252:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003254:	4313      	orrs	r3, r2
 8003256:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003262:	f023 0302 	bic.w	r3, r3, #2
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	6812      	ldr	r2, [r2, #0]
 800326a:	69b9      	ldr	r1, [r7, #24]
 800326c:	430b      	orrs	r3, r1
 800326e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d017      	beq.n	80032a8 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	691a      	ldr	r2, [r3, #16]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003286:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003290:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003294:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	6911      	ldr	r1, [r2, #16]
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	6812      	ldr	r2, [r2, #0]
 80032a0:	430b      	orrs	r3, r1
 80032a2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80032a6:	e013      	b.n	80032d0 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	691a      	ldr	r2, [r3, #16]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80032b6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	6812      	ldr	r2, [r2, #0]
 80032c4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80032c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80032cc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d12a      	bne.n	8003330 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80032e4:	f023 0304 	bic.w	r3, r3, #4
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80032f0:	4311      	orrs	r1, r2
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80032f6:	4311      	orrs	r1, r2
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80032fc:	430a      	orrs	r2, r1
 80032fe:	431a      	orrs	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f042 0201 	orr.w	r2, r2, #1
 8003308:	611a      	str	r2, [r3, #16]
 800330a:	e019      	b.n	8003340 <HAL_ADC_Init+0x318>
 800330c:	20000200 	.word	0x20000200
 8003310:	053e2d63 	.word	0x053e2d63
 8003314:	50000100 	.word	0x50000100
 8003318:	50000400 	.word	0x50000400
 800331c:	50000500 	.word	0x50000500
 8003320:	50000600 	.word	0x50000600
 8003324:	50000300 	.word	0x50000300
 8003328:	50000700 	.word	0x50000700
 800332c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	691a      	ldr	r2, [r3, #16]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f022 0201 	bic.w	r2, r2, #1
 800333e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d10c      	bne.n	8003362 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800334e:	f023 010f 	bic.w	r1, r3, #15
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a1b      	ldr	r3, [r3, #32]
 8003356:	1e5a      	subs	r2, r3, #1
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	430a      	orrs	r2, r1
 800335e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003360:	e007      	b.n	8003372 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f022 020f 	bic.w	r2, r2, #15
 8003370:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003376:	f023 0303 	bic.w	r3, r3, #3
 800337a:	f043 0201 	orr.w	r2, r3, #1
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003382:	e007      	b.n	8003394 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003388:	f043 0210 	orr.w	r2, r3, #16
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003394:	7ffb      	ldrb	r3, [r7, #31]
}
 8003396:	4618      	mov	r0, r3
 8003398:	3724      	adds	r7, #36	@ 0x24
 800339a:	46bd      	mov	sp, r7
 800339c:	bd90      	pop	{r4, r7, pc}
 800339e:	bf00      	nop

080033a0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033b0:	d004      	beq.n	80033bc <HAL_ADC_Start+0x1c>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a67      	ldr	r2, [pc, #412]	@ (8003554 <HAL_ADC_Start+0x1b4>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d101      	bne.n	80033c0 <HAL_ADC_Start+0x20>
 80033bc:	4b66      	ldr	r3, [pc, #408]	@ (8003558 <HAL_ADC_Start+0x1b8>)
 80033be:	e000      	b.n	80033c2 <HAL_ADC_Start+0x22>
 80033c0:	4b66      	ldr	r3, [pc, #408]	@ (800355c <HAL_ADC_Start+0x1bc>)
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7ff fd72 	bl	8002eac <LL_ADC_GetMultimode>
 80033c8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7ff fe03 	bl	8002fda <LL_ADC_REG_IsConversionOngoing>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f040 80b4 	bne.w	8003544 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d101      	bne.n	80033ea <HAL_ADC_Start+0x4a>
 80033e6:	2302      	movs	r3, #2
 80033e8:	e0af      	b.n	800354a <HAL_ADC_Start+0x1aa>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 fd06 	bl	8003e04 <ADC_Enable>
 80033f8:	4603      	mov	r3, r0
 80033fa:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80033fc:	7dfb      	ldrb	r3, [r7, #23]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f040 809b 	bne.w	800353a <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003408:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800340c:	f023 0301 	bic.w	r3, r3, #1
 8003410:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a4d      	ldr	r2, [pc, #308]	@ (8003554 <HAL_ADC_Start+0x1b4>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d009      	beq.n	8003436 <HAL_ADC_Start+0x96>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a4e      	ldr	r2, [pc, #312]	@ (8003560 <HAL_ADC_Start+0x1c0>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d002      	beq.n	8003432 <HAL_ADC_Start+0x92>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	e003      	b.n	800343a <HAL_ADC_Start+0x9a>
 8003432:	4b4c      	ldr	r3, [pc, #304]	@ (8003564 <HAL_ADC_Start+0x1c4>)
 8003434:	e001      	b.n	800343a <HAL_ADC_Start+0x9a>
 8003436:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	6812      	ldr	r2, [r2, #0]
 800343e:	4293      	cmp	r3, r2
 8003440:	d002      	beq.n	8003448 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d105      	bne.n	8003454 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800344c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003458:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800345c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003460:	d106      	bne.n	8003470 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003466:	f023 0206 	bic.w	r2, r3, #6
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	661a      	str	r2, [r3, #96]	@ 0x60
 800346e:	e002      	b.n	8003476 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	221c      	movs	r2, #28
 800347c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a32      	ldr	r2, [pc, #200]	@ (8003554 <HAL_ADC_Start+0x1b4>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d009      	beq.n	80034a4 <HAL_ADC_Start+0x104>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a32      	ldr	r2, [pc, #200]	@ (8003560 <HAL_ADC_Start+0x1c0>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d002      	beq.n	80034a0 <HAL_ADC_Start+0x100>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	e003      	b.n	80034a8 <HAL_ADC_Start+0x108>
 80034a0:	4b30      	ldr	r3, [pc, #192]	@ (8003564 <HAL_ADC_Start+0x1c4>)
 80034a2:	e001      	b.n	80034a8 <HAL_ADC_Start+0x108>
 80034a4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	6812      	ldr	r2, [r2, #0]
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d008      	beq.n	80034c2 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d005      	beq.n	80034c2 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	2b05      	cmp	r3, #5
 80034ba:	d002      	beq.n	80034c2 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	2b09      	cmp	r3, #9
 80034c0:	d114      	bne.n	80034ec <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d007      	beq.n	80034e0 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034d4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80034d8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7ff fd64 	bl	8002fb2 <LL_ADC_REG_StartConversion>
 80034ea:	e02d      	b.n	8003548 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034f0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a15      	ldr	r2, [pc, #84]	@ (8003554 <HAL_ADC_Start+0x1b4>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d009      	beq.n	8003516 <HAL_ADC_Start+0x176>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a16      	ldr	r2, [pc, #88]	@ (8003560 <HAL_ADC_Start+0x1c0>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d002      	beq.n	8003512 <HAL_ADC_Start+0x172>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	e003      	b.n	800351a <HAL_ADC_Start+0x17a>
 8003512:	4b14      	ldr	r3, [pc, #80]	@ (8003564 <HAL_ADC_Start+0x1c4>)
 8003514:	e001      	b.n	800351a <HAL_ADC_Start+0x17a>
 8003516:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800351a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d00f      	beq.n	8003548 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800352c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003530:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003538:	e006      	b.n	8003548 <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003542:	e001      	b.n	8003548 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003544:	2302      	movs	r3, #2
 8003546:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003548:	7dfb      	ldrb	r3, [r7, #23]
}
 800354a:	4618      	mov	r0, r3
 800354c:	3718      	adds	r7, #24
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	50000100 	.word	0x50000100
 8003558:	50000300 	.word	0x50000300
 800355c:	50000700 	.word	0x50000700
 8003560:	50000500 	.word	0x50000500
 8003564:	50000400 	.word	0x50000400

08003568 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003576:	4618      	mov	r0, r3
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
	...

08003584 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b0b6      	sub	sp, #216	@ 0xd8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800358e:	2300      	movs	r3, #0
 8003590:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003594:	2300      	movs	r3, #0
 8003596:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d102      	bne.n	80035a8 <HAL_ADC_ConfigChannel+0x24>
 80035a2:	2302      	movs	r3, #2
 80035a4:	f000 bc13 	b.w	8003dce <HAL_ADC_ConfigChannel+0x84a>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7ff fd10 	bl	8002fda <LL_ADC_REG_IsConversionOngoing>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f040 83f3 	bne.w	8003da8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6818      	ldr	r0, [r3, #0]
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	6859      	ldr	r1, [r3, #4]
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	461a      	mov	r2, r3
 80035d0:	f7ff fbf0 	bl	8002db4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4618      	mov	r0, r3
 80035da:	f7ff fcfe 	bl	8002fda <LL_ADC_REG_IsConversionOngoing>
 80035de:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7ff fd0a 	bl	8003000 <LL_ADC_INJ_IsConversionOngoing>
 80035ec:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80035f0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f040 81d9 	bne.w	80039ac <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80035fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f040 81d4 	bne.w	80039ac <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800360c:	d10f      	bne.n	800362e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6818      	ldr	r0, [r3, #0]
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2200      	movs	r2, #0
 8003618:	4619      	mov	r1, r3
 800361a:	f7ff fbf7 	bl	8002e0c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003626:	4618      	mov	r0, r3
 8003628:	f7ff fbb1 	bl	8002d8e <LL_ADC_SetSamplingTimeCommonConfig>
 800362c:	e00e      	b.n	800364c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6818      	ldr	r0, [r3, #0]
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	6819      	ldr	r1, [r3, #0]
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	461a      	mov	r2, r3
 800363c:	f7ff fbe6 	bl	8002e0c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2100      	movs	r1, #0
 8003646:	4618      	mov	r0, r3
 8003648:	f7ff fba1 	bl	8002d8e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	695a      	ldr	r2, [r3, #20]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	08db      	lsrs	r3, r3, #3
 8003658:	f003 0303 	and.w	r3, r3, #3
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	fa02 f303 	lsl.w	r3, r2, r3
 8003662:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	2b04      	cmp	r3, #4
 800366c:	d022      	beq.n	80036b4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6818      	ldr	r0, [r3, #0]
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	6919      	ldr	r1, [r3, #16]
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800367e:	f7ff fafb 	bl	8002c78 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6818      	ldr	r0, [r3, #0]
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	6919      	ldr	r1, [r3, #16]
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	461a      	mov	r2, r3
 8003690:	f7ff fb47 	bl	8002d22 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6818      	ldr	r0, [r3, #0]
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d102      	bne.n	80036aa <HAL_ADC_ConfigChannel+0x126>
 80036a4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80036a8:	e000      	b.n	80036ac <HAL_ADC_ConfigChannel+0x128>
 80036aa:	2300      	movs	r3, #0
 80036ac:	461a      	mov	r2, r3
 80036ae:	f7ff fb53 	bl	8002d58 <LL_ADC_SetOffsetSaturation>
 80036b2:	e17b      	b.n	80039ac <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2100      	movs	r1, #0
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7ff fb00 	bl	8002cc0 <LL_ADC_GetOffsetChannel>
 80036c0:	4603      	mov	r3, r0
 80036c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10a      	bne.n	80036e0 <HAL_ADC_ConfigChannel+0x15c>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2100      	movs	r1, #0
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7ff faf5 	bl	8002cc0 <LL_ADC_GetOffsetChannel>
 80036d6:	4603      	mov	r3, r0
 80036d8:	0e9b      	lsrs	r3, r3, #26
 80036da:	f003 021f 	and.w	r2, r3, #31
 80036de:	e01e      	b.n	800371e <HAL_ADC_ConfigChannel+0x19a>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2100      	movs	r1, #0
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7ff faea 	bl	8002cc0 <LL_ADC_GetOffsetChannel>
 80036ec:	4603      	mov	r3, r0
 80036ee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80036f6:	fa93 f3a3 	rbit	r3, r3
 80036fa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80036fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003702:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003706:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800370e:	2320      	movs	r3, #32
 8003710:	e004      	b.n	800371c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003712:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003716:	fab3 f383 	clz	r3, r3
 800371a:	b2db      	uxtb	r3, r3
 800371c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003726:	2b00      	cmp	r3, #0
 8003728:	d105      	bne.n	8003736 <HAL_ADC_ConfigChannel+0x1b2>
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	0e9b      	lsrs	r3, r3, #26
 8003730:	f003 031f 	and.w	r3, r3, #31
 8003734:	e018      	b.n	8003768 <HAL_ADC_ConfigChannel+0x1e4>
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003742:	fa93 f3a3 	rbit	r3, r3
 8003746:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800374a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800374e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003752:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800375a:	2320      	movs	r3, #32
 800375c:	e004      	b.n	8003768 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800375e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003762:	fab3 f383 	clz	r3, r3
 8003766:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003768:	429a      	cmp	r2, r3
 800376a:	d106      	bne.n	800377a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2200      	movs	r2, #0
 8003772:	2100      	movs	r1, #0
 8003774:	4618      	mov	r0, r3
 8003776:	f7ff fab9 	bl	8002cec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2101      	movs	r1, #1
 8003780:	4618      	mov	r0, r3
 8003782:	f7ff fa9d 	bl	8002cc0 <LL_ADC_GetOffsetChannel>
 8003786:	4603      	mov	r3, r0
 8003788:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800378c:	2b00      	cmp	r3, #0
 800378e:	d10a      	bne.n	80037a6 <HAL_ADC_ConfigChannel+0x222>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2101      	movs	r1, #1
 8003796:	4618      	mov	r0, r3
 8003798:	f7ff fa92 	bl	8002cc0 <LL_ADC_GetOffsetChannel>
 800379c:	4603      	mov	r3, r0
 800379e:	0e9b      	lsrs	r3, r3, #26
 80037a0:	f003 021f 	and.w	r2, r3, #31
 80037a4:	e01e      	b.n	80037e4 <HAL_ADC_ConfigChannel+0x260>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2101      	movs	r1, #1
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7ff fa87 	bl	8002cc0 <LL_ADC_GetOffsetChannel>
 80037b2:	4603      	mov	r3, r0
 80037b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80037bc:	fa93 f3a3 	rbit	r3, r3
 80037c0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80037c4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80037c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80037cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d101      	bne.n	80037d8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80037d4:	2320      	movs	r3, #32
 80037d6:	e004      	b.n	80037e2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80037d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80037dc:	fab3 f383 	clz	r3, r3
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d105      	bne.n	80037fc <HAL_ADC_ConfigChannel+0x278>
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	0e9b      	lsrs	r3, r3, #26
 80037f6:	f003 031f 	and.w	r3, r3, #31
 80037fa:	e018      	b.n	800382e <HAL_ADC_ConfigChannel+0x2aa>
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003804:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003808:	fa93 f3a3 	rbit	r3, r3
 800380c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003810:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003814:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003818:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800381c:	2b00      	cmp	r3, #0
 800381e:	d101      	bne.n	8003824 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003820:	2320      	movs	r3, #32
 8003822:	e004      	b.n	800382e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003824:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003828:	fab3 f383 	clz	r3, r3
 800382c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800382e:	429a      	cmp	r2, r3
 8003830:	d106      	bne.n	8003840 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2200      	movs	r2, #0
 8003838:	2101      	movs	r1, #1
 800383a:	4618      	mov	r0, r3
 800383c:	f7ff fa56 	bl	8002cec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2102      	movs	r1, #2
 8003846:	4618      	mov	r0, r3
 8003848:	f7ff fa3a 	bl	8002cc0 <LL_ADC_GetOffsetChannel>
 800384c:	4603      	mov	r3, r0
 800384e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003852:	2b00      	cmp	r3, #0
 8003854:	d10a      	bne.n	800386c <HAL_ADC_ConfigChannel+0x2e8>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2102      	movs	r1, #2
 800385c:	4618      	mov	r0, r3
 800385e:	f7ff fa2f 	bl	8002cc0 <LL_ADC_GetOffsetChannel>
 8003862:	4603      	mov	r3, r0
 8003864:	0e9b      	lsrs	r3, r3, #26
 8003866:	f003 021f 	and.w	r2, r3, #31
 800386a:	e01e      	b.n	80038aa <HAL_ADC_ConfigChannel+0x326>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2102      	movs	r1, #2
 8003872:	4618      	mov	r0, r3
 8003874:	f7ff fa24 	bl	8002cc0 <LL_ADC_GetOffsetChannel>
 8003878:	4603      	mov	r3, r0
 800387a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800387e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003882:	fa93 f3a3 	rbit	r3, r3
 8003886:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800388a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800388e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003892:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003896:	2b00      	cmp	r3, #0
 8003898:	d101      	bne.n	800389e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800389a:	2320      	movs	r3, #32
 800389c:	e004      	b.n	80038a8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800389e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80038a2:	fab3 f383 	clz	r3, r3
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d105      	bne.n	80038c2 <HAL_ADC_ConfigChannel+0x33e>
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	0e9b      	lsrs	r3, r3, #26
 80038bc:	f003 031f 	and.w	r3, r3, #31
 80038c0:	e016      	b.n	80038f0 <HAL_ADC_ConfigChannel+0x36c>
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80038ce:	fa93 f3a3 	rbit	r3, r3
 80038d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80038d4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80038d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80038da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80038e2:	2320      	movs	r3, #32
 80038e4:	e004      	b.n	80038f0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80038e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80038ea:	fab3 f383 	clz	r3, r3
 80038ee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d106      	bne.n	8003902 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2200      	movs	r2, #0
 80038fa:	2102      	movs	r1, #2
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7ff f9f5 	bl	8002cec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2103      	movs	r1, #3
 8003908:	4618      	mov	r0, r3
 800390a:	f7ff f9d9 	bl	8002cc0 <LL_ADC_GetOffsetChannel>
 800390e:	4603      	mov	r3, r0
 8003910:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003914:	2b00      	cmp	r3, #0
 8003916:	d10a      	bne.n	800392e <HAL_ADC_ConfigChannel+0x3aa>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2103      	movs	r1, #3
 800391e:	4618      	mov	r0, r3
 8003920:	f7ff f9ce 	bl	8002cc0 <LL_ADC_GetOffsetChannel>
 8003924:	4603      	mov	r3, r0
 8003926:	0e9b      	lsrs	r3, r3, #26
 8003928:	f003 021f 	and.w	r2, r3, #31
 800392c:	e017      	b.n	800395e <HAL_ADC_ConfigChannel+0x3da>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2103      	movs	r1, #3
 8003934:	4618      	mov	r0, r3
 8003936:	f7ff f9c3 	bl	8002cc0 <LL_ADC_GetOffsetChannel>
 800393a:	4603      	mov	r3, r0
 800393c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800393e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003940:	fa93 f3a3 	rbit	r3, r3
 8003944:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003946:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003948:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800394a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800394c:	2b00      	cmp	r3, #0
 800394e:	d101      	bne.n	8003954 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003950:	2320      	movs	r3, #32
 8003952:	e003      	b.n	800395c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003954:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003956:	fab3 f383 	clz	r3, r3
 800395a:	b2db      	uxtb	r3, r3
 800395c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003966:	2b00      	cmp	r3, #0
 8003968:	d105      	bne.n	8003976 <HAL_ADC_ConfigChannel+0x3f2>
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	0e9b      	lsrs	r3, r3, #26
 8003970:	f003 031f 	and.w	r3, r3, #31
 8003974:	e011      	b.n	800399a <HAL_ADC_ConfigChannel+0x416>
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800397c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800397e:	fa93 f3a3 	rbit	r3, r3
 8003982:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003984:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003986:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003988:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800398e:	2320      	movs	r3, #32
 8003990:	e003      	b.n	800399a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003992:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003994:	fab3 f383 	clz	r3, r3
 8003998:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800399a:	429a      	cmp	r2, r3
 800399c:	d106      	bne.n	80039ac <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2200      	movs	r2, #0
 80039a4:	2103      	movs	r1, #3
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7ff f9a0 	bl	8002cec <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7ff faeb 	bl	8002f8c <LL_ADC_IsEnabled>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f040 813d 	bne.w	8003c38 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6818      	ldr	r0, [r3, #0]
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	6819      	ldr	r1, [r3, #0]
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	461a      	mov	r2, r3
 80039cc:	f7ff fa4a 	bl	8002e64 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	4aa2      	ldr	r2, [pc, #648]	@ (8003c60 <HAL_ADC_ConfigChannel+0x6dc>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	f040 812e 	bne.w	8003c38 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d10b      	bne.n	8003a04 <HAL_ADC_ConfigChannel+0x480>
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	0e9b      	lsrs	r3, r3, #26
 80039f2:	3301      	adds	r3, #1
 80039f4:	f003 031f 	and.w	r3, r3, #31
 80039f8:	2b09      	cmp	r3, #9
 80039fa:	bf94      	ite	ls
 80039fc:	2301      	movls	r3, #1
 80039fe:	2300      	movhi	r3, #0
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	e019      	b.n	8003a38 <HAL_ADC_ConfigChannel+0x4b4>
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a0c:	fa93 f3a3 	rbit	r3, r3
 8003a10:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003a12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a14:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003a16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d101      	bne.n	8003a20 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003a1c:	2320      	movs	r3, #32
 8003a1e:	e003      	b.n	8003a28 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003a20:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a22:	fab3 f383 	clz	r3, r3
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	3301      	adds	r3, #1
 8003a2a:	f003 031f 	and.w	r3, r3, #31
 8003a2e:	2b09      	cmp	r3, #9
 8003a30:	bf94      	ite	ls
 8003a32:	2301      	movls	r3, #1
 8003a34:	2300      	movhi	r3, #0
 8003a36:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d079      	beq.n	8003b30 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d107      	bne.n	8003a58 <HAL_ADC_ConfigChannel+0x4d4>
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	0e9b      	lsrs	r3, r3, #26
 8003a4e:	3301      	adds	r3, #1
 8003a50:	069b      	lsls	r3, r3, #26
 8003a52:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003a56:	e015      	b.n	8003a84 <HAL_ADC_ConfigChannel+0x500>
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a60:	fa93 f3a3 	rbit	r3, r3
 8003a64:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003a66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a68:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003a6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d101      	bne.n	8003a74 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003a70:	2320      	movs	r3, #32
 8003a72:	e003      	b.n	8003a7c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003a74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a76:	fab3 f383 	clz	r3, r3
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	069b      	lsls	r3, r3, #26
 8003a80:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d109      	bne.n	8003aa4 <HAL_ADC_ConfigChannel+0x520>
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	0e9b      	lsrs	r3, r3, #26
 8003a96:	3301      	adds	r3, #1
 8003a98:	f003 031f 	and.w	r3, r3, #31
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003aa2:	e017      	b.n	8003ad4 <HAL_ADC_ConfigChannel+0x550>
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003aac:	fa93 f3a3 	rbit	r3, r3
 8003ab0:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003ab2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ab4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003ab6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d101      	bne.n	8003ac0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003abc:	2320      	movs	r3, #32
 8003abe:	e003      	b.n	8003ac8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003ac0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ac2:	fab3 f383 	clz	r3, r3
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	3301      	adds	r3, #1
 8003aca:	f003 031f 	and.w	r3, r3, #31
 8003ace:	2101      	movs	r1, #1
 8003ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad4:	ea42 0103 	orr.w	r1, r2, r3
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d10a      	bne.n	8003afa <HAL_ADC_ConfigChannel+0x576>
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	0e9b      	lsrs	r3, r3, #26
 8003aea:	3301      	adds	r3, #1
 8003aec:	f003 021f 	and.w	r2, r3, #31
 8003af0:	4613      	mov	r3, r2
 8003af2:	005b      	lsls	r3, r3, #1
 8003af4:	4413      	add	r3, r2
 8003af6:	051b      	lsls	r3, r3, #20
 8003af8:	e018      	b.n	8003b2c <HAL_ADC_ConfigChannel+0x5a8>
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b02:	fa93 f3a3 	rbit	r3, r3
 8003b06:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003b08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003b0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003b12:	2320      	movs	r3, #32
 8003b14:	e003      	b.n	8003b1e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003b16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b18:	fab3 f383 	clz	r3, r3
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	3301      	adds	r3, #1
 8003b20:	f003 021f 	and.w	r2, r3, #31
 8003b24:	4613      	mov	r3, r2
 8003b26:	005b      	lsls	r3, r3, #1
 8003b28:	4413      	add	r3, r2
 8003b2a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b2c:	430b      	orrs	r3, r1
 8003b2e:	e07e      	b.n	8003c2e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d107      	bne.n	8003b4c <HAL_ADC_ConfigChannel+0x5c8>
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	0e9b      	lsrs	r3, r3, #26
 8003b42:	3301      	adds	r3, #1
 8003b44:	069b      	lsls	r3, r3, #26
 8003b46:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003b4a:	e015      	b.n	8003b78 <HAL_ADC_ConfigChannel+0x5f4>
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b54:	fa93 f3a3 	rbit	r3, r3
 8003b58:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b5c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d101      	bne.n	8003b68 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003b64:	2320      	movs	r3, #32
 8003b66:	e003      	b.n	8003b70 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b6a:	fab3 f383 	clz	r3, r3
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	3301      	adds	r3, #1
 8003b72:	069b      	lsls	r3, r3, #26
 8003b74:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d109      	bne.n	8003b98 <HAL_ADC_ConfigChannel+0x614>
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	0e9b      	lsrs	r3, r3, #26
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	f003 031f 	and.w	r3, r3, #31
 8003b90:	2101      	movs	r1, #1
 8003b92:	fa01 f303 	lsl.w	r3, r1, r3
 8003b96:	e017      	b.n	8003bc8 <HAL_ADC_ConfigChannel+0x644>
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b9e:	6a3b      	ldr	r3, [r7, #32]
 8003ba0:	fa93 f3a3 	rbit	r3, r3
 8003ba4:	61fb      	str	r3, [r7, #28]
  return result;
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d101      	bne.n	8003bb4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003bb0:	2320      	movs	r3, #32
 8003bb2:	e003      	b.n	8003bbc <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb6:	fab3 f383 	clz	r3, r3
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	f003 031f 	and.w	r3, r3, #31
 8003bc2:	2101      	movs	r1, #1
 8003bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc8:	ea42 0103 	orr.w	r1, r2, r3
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d10d      	bne.n	8003bf4 <HAL_ADC_ConfigChannel+0x670>
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	0e9b      	lsrs	r3, r3, #26
 8003bde:	3301      	adds	r3, #1
 8003be0:	f003 021f 	and.w	r2, r3, #31
 8003be4:	4613      	mov	r3, r2
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	4413      	add	r3, r2
 8003bea:	3b1e      	subs	r3, #30
 8003bec:	051b      	lsls	r3, r3, #20
 8003bee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003bf2:	e01b      	b.n	8003c2c <HAL_ADC_ConfigChannel+0x6a8>
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	fa93 f3a3 	rbit	r3, r3
 8003c00:	613b      	str	r3, [r7, #16]
  return result;
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d101      	bne.n	8003c10 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003c0c:	2320      	movs	r3, #32
 8003c0e:	e003      	b.n	8003c18 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	fab3 f383 	clz	r3, r3
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	3301      	adds	r3, #1
 8003c1a:	f003 021f 	and.w	r2, r3, #31
 8003c1e:	4613      	mov	r3, r2
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	4413      	add	r3, r2
 8003c24:	3b1e      	subs	r3, #30
 8003c26:	051b      	lsls	r3, r3, #20
 8003c28:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c2c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003c2e:	683a      	ldr	r2, [r7, #0]
 8003c30:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c32:	4619      	mov	r1, r3
 8003c34:	f7ff f8ea 	bl	8002e0c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	4b09      	ldr	r3, [pc, #36]	@ (8003c64 <HAL_ADC_ConfigChannel+0x6e0>)
 8003c3e:	4013      	ands	r3, r2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f000 80be 	beq.w	8003dc2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c4e:	d004      	beq.n	8003c5a <HAL_ADC_ConfigChannel+0x6d6>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a04      	ldr	r2, [pc, #16]	@ (8003c68 <HAL_ADC_ConfigChannel+0x6e4>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d10a      	bne.n	8003c70 <HAL_ADC_ConfigChannel+0x6ec>
 8003c5a:	4b04      	ldr	r3, [pc, #16]	@ (8003c6c <HAL_ADC_ConfigChannel+0x6e8>)
 8003c5c:	e009      	b.n	8003c72 <HAL_ADC_ConfigChannel+0x6ee>
 8003c5e:	bf00      	nop
 8003c60:	407f0000 	.word	0x407f0000
 8003c64:	80080000 	.word	0x80080000
 8003c68:	50000100 	.word	0x50000100
 8003c6c:	50000300 	.word	0x50000300
 8003c70:	4b59      	ldr	r3, [pc, #356]	@ (8003dd8 <HAL_ADC_ConfigChannel+0x854>)
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7fe fff2 	bl	8002c5c <LL_ADC_GetCommonPathInternalCh>
 8003c78:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a56      	ldr	r2, [pc, #344]	@ (8003ddc <HAL_ADC_ConfigChannel+0x858>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d004      	beq.n	8003c90 <HAL_ADC_ConfigChannel+0x70c>
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a55      	ldr	r2, [pc, #340]	@ (8003de0 <HAL_ADC_ConfigChannel+0x85c>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d13a      	bne.n	8003d06 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003c90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003c94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d134      	bne.n	8003d06 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ca4:	d005      	beq.n	8003cb2 <HAL_ADC_ConfigChannel+0x72e>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a4e      	ldr	r2, [pc, #312]	@ (8003de4 <HAL_ADC_ConfigChannel+0x860>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	f040 8085 	bne.w	8003dbc <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003cba:	d004      	beq.n	8003cc6 <HAL_ADC_ConfigChannel+0x742>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a49      	ldr	r2, [pc, #292]	@ (8003de8 <HAL_ADC_ConfigChannel+0x864>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d101      	bne.n	8003cca <HAL_ADC_ConfigChannel+0x746>
 8003cc6:	4a49      	ldr	r2, [pc, #292]	@ (8003dec <HAL_ADC_ConfigChannel+0x868>)
 8003cc8:	e000      	b.n	8003ccc <HAL_ADC_ConfigChannel+0x748>
 8003cca:	4a43      	ldr	r2, [pc, #268]	@ (8003dd8 <HAL_ADC_ConfigChannel+0x854>)
 8003ccc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003cd0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	4610      	mov	r0, r2
 8003cd8:	f7fe ffad 	bl	8002c36 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003cdc:	4b44      	ldr	r3, [pc, #272]	@ (8003df0 <HAL_ADC_ConfigChannel+0x86c>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	099b      	lsrs	r3, r3, #6
 8003ce2:	4a44      	ldr	r2, [pc, #272]	@ (8003df4 <HAL_ADC_ConfigChannel+0x870>)
 8003ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce8:	099b      	lsrs	r3, r3, #6
 8003cea:	1c5a      	adds	r2, r3, #1
 8003cec:	4613      	mov	r3, r2
 8003cee:	005b      	lsls	r3, r3, #1
 8003cf0:	4413      	add	r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003cf6:	e002      	b.n	8003cfe <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1f9      	bne.n	8003cf8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003d04:	e05a      	b.n	8003dbc <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a3b      	ldr	r2, [pc, #236]	@ (8003df8 <HAL_ADC_ConfigChannel+0x874>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d125      	bne.n	8003d5c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003d10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003d14:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d11f      	bne.n	8003d5c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a31      	ldr	r2, [pc, #196]	@ (8003de8 <HAL_ADC_ConfigChannel+0x864>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d104      	bne.n	8003d30 <HAL_ADC_ConfigChannel+0x7ac>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a34      	ldr	r2, [pc, #208]	@ (8003dfc <HAL_ADC_ConfigChannel+0x878>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d047      	beq.n	8003dc0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d38:	d004      	beq.n	8003d44 <HAL_ADC_ConfigChannel+0x7c0>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a2a      	ldr	r2, [pc, #168]	@ (8003de8 <HAL_ADC_ConfigChannel+0x864>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d101      	bne.n	8003d48 <HAL_ADC_ConfigChannel+0x7c4>
 8003d44:	4a29      	ldr	r2, [pc, #164]	@ (8003dec <HAL_ADC_ConfigChannel+0x868>)
 8003d46:	e000      	b.n	8003d4a <HAL_ADC_ConfigChannel+0x7c6>
 8003d48:	4a23      	ldr	r2, [pc, #140]	@ (8003dd8 <HAL_ADC_ConfigChannel+0x854>)
 8003d4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003d4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d52:	4619      	mov	r1, r3
 8003d54:	4610      	mov	r0, r2
 8003d56:	f7fe ff6e 	bl	8002c36 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d5a:	e031      	b.n	8003dc0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a27      	ldr	r2, [pc, #156]	@ (8003e00 <HAL_ADC_ConfigChannel+0x87c>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d12d      	bne.n	8003dc2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003d66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003d6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d127      	bne.n	8003dc2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a1c      	ldr	r2, [pc, #112]	@ (8003de8 <HAL_ADC_ConfigChannel+0x864>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d022      	beq.n	8003dc2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d84:	d004      	beq.n	8003d90 <HAL_ADC_ConfigChannel+0x80c>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a17      	ldr	r2, [pc, #92]	@ (8003de8 <HAL_ADC_ConfigChannel+0x864>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d101      	bne.n	8003d94 <HAL_ADC_ConfigChannel+0x810>
 8003d90:	4a16      	ldr	r2, [pc, #88]	@ (8003dec <HAL_ADC_ConfigChannel+0x868>)
 8003d92:	e000      	b.n	8003d96 <HAL_ADC_ConfigChannel+0x812>
 8003d94:	4a10      	ldr	r2, [pc, #64]	@ (8003dd8 <HAL_ADC_ConfigChannel+0x854>)
 8003d96:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003d9a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003d9e:	4619      	mov	r1, r3
 8003da0:	4610      	mov	r0, r2
 8003da2:	f7fe ff48 	bl	8002c36 <LL_ADC_SetCommonPathInternalCh>
 8003da6:	e00c      	b.n	8003dc2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dac:	f043 0220 	orr.w	r2, r3, #32
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003dba:	e002      	b.n	8003dc2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003dbc:	bf00      	nop
 8003dbe:	e000      	b.n	8003dc2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003dc0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003dca:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	37d8      	adds	r7, #216	@ 0xd8
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	50000700 	.word	0x50000700
 8003ddc:	c3210000 	.word	0xc3210000
 8003de0:	90c00010 	.word	0x90c00010
 8003de4:	50000600 	.word	0x50000600
 8003de8:	50000100 	.word	0x50000100
 8003dec:	50000300 	.word	0x50000300
 8003df0:	20000200 	.word	0x20000200
 8003df4:	053e2d63 	.word	0x053e2d63
 8003df8:	c7520000 	.word	0xc7520000
 8003dfc:	50000500 	.word	0x50000500
 8003e00:	cb840000 	.word	0xcb840000

08003e04 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7ff f8b9 	bl	8002f8c <LL_ADC_IsEnabled>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d176      	bne.n	8003f0e <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	689a      	ldr	r2, [r3, #8]
 8003e26:	4b3c      	ldr	r3, [pc, #240]	@ (8003f18 <ADC_Enable+0x114>)
 8003e28:	4013      	ands	r3, r2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00d      	beq.n	8003e4a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e32:	f043 0210 	orr.w	r2, r3, #16
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e3e:	f043 0201 	orr.w	r2, r3, #1
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e062      	b.n	8003f10 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7ff f888 	bl	8002f64 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e5c:	d004      	beq.n	8003e68 <ADC_Enable+0x64>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a2e      	ldr	r2, [pc, #184]	@ (8003f1c <ADC_Enable+0x118>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d101      	bne.n	8003e6c <ADC_Enable+0x68>
 8003e68:	4b2d      	ldr	r3, [pc, #180]	@ (8003f20 <ADC_Enable+0x11c>)
 8003e6a:	e000      	b.n	8003e6e <ADC_Enable+0x6a>
 8003e6c:	4b2d      	ldr	r3, [pc, #180]	@ (8003f24 <ADC_Enable+0x120>)
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7fe fef4 	bl	8002c5c <LL_ADC_GetCommonPathInternalCh>
 8003e74:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003e76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d013      	beq.n	8003ea6 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e7e:	4b2a      	ldr	r3, [pc, #168]	@ (8003f28 <ADC_Enable+0x124>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	099b      	lsrs	r3, r3, #6
 8003e84:	4a29      	ldr	r2, [pc, #164]	@ (8003f2c <ADC_Enable+0x128>)
 8003e86:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8a:	099b      	lsrs	r3, r3, #6
 8003e8c:	1c5a      	adds	r2, r3, #1
 8003e8e:	4613      	mov	r3, r2
 8003e90:	005b      	lsls	r3, r3, #1
 8003e92:	4413      	add	r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003e98:	e002      	b.n	8003ea0 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1f9      	bne.n	8003e9a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003ea6:	f7fe fea7 	bl	8002bf8 <HAL_GetTick>
 8003eaa:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003eac:	e028      	b.n	8003f00 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7ff f86a 	bl	8002f8c <LL_ADC_IsEnabled>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d104      	bne.n	8003ec8 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7ff f84e 	bl	8002f64 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003ec8:	f7fe fe96 	bl	8002bf8 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d914      	bls.n	8003f00 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0301 	and.w	r3, r3, #1
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d00d      	beq.n	8003f00 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ee8:	f043 0210 	orr.w	r2, r3, #16
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ef4:	f043 0201 	orr.w	r2, r3, #1
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e007      	b.n	8003f10 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d1cf      	bne.n	8003eae <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3710      	adds	r7, #16
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	8000003f 	.word	0x8000003f
 8003f1c:	50000100 	.word	0x50000100
 8003f20:	50000300 	.word	0x50000300
 8003f24:	50000700 	.word	0x50000700
 8003f28:	20000200 	.word	0x20000200
 8003f2c:	053e2d63 	.word	0x053e2d63

08003f30 <LL_ADC_IsEnabled>:
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d101      	bne.n	8003f48 <LL_ADC_IsEnabled+0x18>
 8003f44:	2301      	movs	r3, #1
 8003f46:	e000      	b.n	8003f4a <LL_ADC_IsEnabled+0x1a>
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr

08003f56 <LL_ADC_REG_IsConversionOngoing>:
{
 8003f56:	b480      	push	{r7}
 8003f58:	b083      	sub	sp, #12
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f003 0304 	and.w	r3, r3, #4
 8003f66:	2b04      	cmp	r3, #4
 8003f68:	d101      	bne.n	8003f6e <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e000      	b.n	8003f70 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003f7c:	b590      	push	{r4, r7, lr}
 8003f7e:	b0a1      	sub	sp, #132	@ 0x84
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f86:	2300      	movs	r3, #0
 8003f88:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d101      	bne.n	8003f9a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003f96:	2302      	movs	r3, #2
 8003f98:	e0e7      	b.n	800416a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003fb2:	d102      	bne.n	8003fba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003fb4:	4b6f      	ldr	r3, [pc, #444]	@ (8004174 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003fb6:	60bb      	str	r3, [r7, #8]
 8003fb8:	e009      	b.n	8003fce <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a6e      	ldr	r2, [pc, #440]	@ (8004178 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d102      	bne.n	8003fca <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003fc4:	4b6d      	ldr	r3, [pc, #436]	@ (800417c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003fc6:	60bb      	str	r3, [r7, #8]
 8003fc8:	e001      	b.n	8003fce <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003fca:	2300      	movs	r3, #0
 8003fcc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d10b      	bne.n	8003fec <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fd8:	f043 0220 	orr.w	r2, r3, #32
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e0be      	b.n	800416a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7ff ffb1 	bl	8003f56 <LL_ADC_REG_IsConversionOngoing>
 8003ff4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7ff ffab 	bl	8003f56 <LL_ADC_REG_IsConversionOngoing>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	f040 80a0 	bne.w	8004148 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004008:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800400a:	2b00      	cmp	r3, #0
 800400c:	f040 809c 	bne.w	8004148 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004018:	d004      	beq.n	8004024 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a55      	ldr	r2, [pc, #340]	@ (8004174 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d101      	bne.n	8004028 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004024:	4b56      	ldr	r3, [pc, #344]	@ (8004180 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004026:	e000      	b.n	800402a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004028:	4b56      	ldr	r3, [pc, #344]	@ (8004184 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800402a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d04b      	beq.n	80040cc <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004034:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	6859      	ldr	r1, [r3, #4]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004046:	035b      	lsls	r3, r3, #13
 8004048:	430b      	orrs	r3, r1
 800404a:	431a      	orrs	r2, r3
 800404c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800404e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004058:	d004      	beq.n	8004064 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a45      	ldr	r2, [pc, #276]	@ (8004174 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d10f      	bne.n	8004084 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004064:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004068:	f7ff ff62 	bl	8003f30 <LL_ADC_IsEnabled>
 800406c:	4604      	mov	r4, r0
 800406e:	4841      	ldr	r0, [pc, #260]	@ (8004174 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004070:	f7ff ff5e 	bl	8003f30 <LL_ADC_IsEnabled>
 8004074:	4603      	mov	r3, r0
 8004076:	4323      	orrs	r3, r4
 8004078:	2b00      	cmp	r3, #0
 800407a:	bf0c      	ite	eq
 800407c:	2301      	moveq	r3, #1
 800407e:	2300      	movne	r3, #0
 8004080:	b2db      	uxtb	r3, r3
 8004082:	e012      	b.n	80040aa <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004084:	483c      	ldr	r0, [pc, #240]	@ (8004178 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004086:	f7ff ff53 	bl	8003f30 <LL_ADC_IsEnabled>
 800408a:	4604      	mov	r4, r0
 800408c:	483b      	ldr	r0, [pc, #236]	@ (800417c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800408e:	f7ff ff4f 	bl	8003f30 <LL_ADC_IsEnabled>
 8004092:	4603      	mov	r3, r0
 8004094:	431c      	orrs	r4, r3
 8004096:	483c      	ldr	r0, [pc, #240]	@ (8004188 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004098:	f7ff ff4a 	bl	8003f30 <LL_ADC_IsEnabled>
 800409c:	4603      	mov	r3, r0
 800409e:	4323      	orrs	r3, r4
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	bf0c      	ite	eq
 80040a4:	2301      	moveq	r3, #1
 80040a6:	2300      	movne	r3, #0
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d056      	beq.n	800415c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80040ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80040b6:	f023 030f 	bic.w	r3, r3, #15
 80040ba:	683a      	ldr	r2, [r7, #0]
 80040bc:	6811      	ldr	r1, [r2, #0]
 80040be:	683a      	ldr	r2, [r7, #0]
 80040c0:	6892      	ldr	r2, [r2, #8]
 80040c2:	430a      	orrs	r2, r1
 80040c4:	431a      	orrs	r2, r3
 80040c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040c8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80040ca:	e047      	b.n	800415c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80040cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80040d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040d6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040e0:	d004      	beq.n	80040ec <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a23      	ldr	r2, [pc, #140]	@ (8004174 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d10f      	bne.n	800410c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80040ec:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80040f0:	f7ff ff1e 	bl	8003f30 <LL_ADC_IsEnabled>
 80040f4:	4604      	mov	r4, r0
 80040f6:	481f      	ldr	r0, [pc, #124]	@ (8004174 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80040f8:	f7ff ff1a 	bl	8003f30 <LL_ADC_IsEnabled>
 80040fc:	4603      	mov	r3, r0
 80040fe:	4323      	orrs	r3, r4
 8004100:	2b00      	cmp	r3, #0
 8004102:	bf0c      	ite	eq
 8004104:	2301      	moveq	r3, #1
 8004106:	2300      	movne	r3, #0
 8004108:	b2db      	uxtb	r3, r3
 800410a:	e012      	b.n	8004132 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800410c:	481a      	ldr	r0, [pc, #104]	@ (8004178 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800410e:	f7ff ff0f 	bl	8003f30 <LL_ADC_IsEnabled>
 8004112:	4604      	mov	r4, r0
 8004114:	4819      	ldr	r0, [pc, #100]	@ (800417c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004116:	f7ff ff0b 	bl	8003f30 <LL_ADC_IsEnabled>
 800411a:	4603      	mov	r3, r0
 800411c:	431c      	orrs	r4, r3
 800411e:	481a      	ldr	r0, [pc, #104]	@ (8004188 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004120:	f7ff ff06 	bl	8003f30 <LL_ADC_IsEnabled>
 8004124:	4603      	mov	r3, r0
 8004126:	4323      	orrs	r3, r4
 8004128:	2b00      	cmp	r3, #0
 800412a:	bf0c      	ite	eq
 800412c:	2301      	moveq	r3, #1
 800412e:	2300      	movne	r3, #0
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d012      	beq.n	800415c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004136:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800413e:	f023 030f 	bic.w	r3, r3, #15
 8004142:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004144:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004146:	e009      	b.n	800415c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800414c:	f043 0220 	orr.w	r2, r3, #32
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800415a:	e000      	b.n	800415e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800415c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004166:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800416a:	4618      	mov	r0, r3
 800416c:	3784      	adds	r7, #132	@ 0x84
 800416e:	46bd      	mov	sp, r7
 8004170:	bd90      	pop	{r4, r7, pc}
 8004172:	bf00      	nop
 8004174:	50000100 	.word	0x50000100
 8004178:	50000400 	.word	0x50000400
 800417c:	50000500 	.word	0x50000500
 8004180:	50000300 	.word	0x50000300
 8004184:	50000700 	.word	0x50000700
 8004188:	50000600 	.word	0x50000600

0800418c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800418c:	b480      	push	{r7}
 800418e:	b085      	sub	sp, #20
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f003 0307 	and.w	r3, r3, #7
 800419a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800419c:	4b0c      	ldr	r3, [pc, #48]	@ (80041d0 <__NVIC_SetPriorityGrouping+0x44>)
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041a2:	68ba      	ldr	r2, [r7, #8]
 80041a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80041a8:	4013      	ands	r3, r2
 80041aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80041b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041be:	4a04      	ldr	r2, [pc, #16]	@ (80041d0 <__NVIC_SetPriorityGrouping+0x44>)
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	60d3      	str	r3, [r2, #12]
}
 80041c4:	bf00      	nop
 80041c6:	3714      	adds	r7, #20
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr
 80041d0:	e000ed00 	.word	0xe000ed00

080041d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041d4:	b480      	push	{r7}
 80041d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041d8:	4b04      	ldr	r3, [pc, #16]	@ (80041ec <__NVIC_GetPriorityGrouping+0x18>)
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	0a1b      	lsrs	r3, r3, #8
 80041de:	f003 0307 	and.w	r3, r3, #7
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr
 80041ec:	e000ed00 	.word	0xe000ed00

080041f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	4603      	mov	r3, r0
 80041f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	db0b      	blt.n	800421a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004202:	79fb      	ldrb	r3, [r7, #7]
 8004204:	f003 021f 	and.w	r2, r3, #31
 8004208:	4907      	ldr	r1, [pc, #28]	@ (8004228 <__NVIC_EnableIRQ+0x38>)
 800420a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800420e:	095b      	lsrs	r3, r3, #5
 8004210:	2001      	movs	r0, #1
 8004212:	fa00 f202 	lsl.w	r2, r0, r2
 8004216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800421a:	bf00      	nop
 800421c:	370c      	adds	r7, #12
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	e000e100 	.word	0xe000e100

0800422c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	4603      	mov	r3, r0
 8004234:	6039      	str	r1, [r7, #0]
 8004236:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800423c:	2b00      	cmp	r3, #0
 800423e:	db0a      	blt.n	8004256 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	b2da      	uxtb	r2, r3
 8004244:	490c      	ldr	r1, [pc, #48]	@ (8004278 <__NVIC_SetPriority+0x4c>)
 8004246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800424a:	0112      	lsls	r2, r2, #4
 800424c:	b2d2      	uxtb	r2, r2
 800424e:	440b      	add	r3, r1
 8004250:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004254:	e00a      	b.n	800426c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	b2da      	uxtb	r2, r3
 800425a:	4908      	ldr	r1, [pc, #32]	@ (800427c <__NVIC_SetPriority+0x50>)
 800425c:	79fb      	ldrb	r3, [r7, #7]
 800425e:	f003 030f 	and.w	r3, r3, #15
 8004262:	3b04      	subs	r3, #4
 8004264:	0112      	lsls	r2, r2, #4
 8004266:	b2d2      	uxtb	r2, r2
 8004268:	440b      	add	r3, r1
 800426a:	761a      	strb	r2, [r3, #24]
}
 800426c:	bf00      	nop
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr
 8004278:	e000e100 	.word	0xe000e100
 800427c:	e000ed00 	.word	0xe000ed00

08004280 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004280:	b480      	push	{r7}
 8004282:	b089      	sub	sp, #36	@ 0x24
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f003 0307 	and.w	r3, r3, #7
 8004292:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	f1c3 0307 	rsb	r3, r3, #7
 800429a:	2b04      	cmp	r3, #4
 800429c:	bf28      	it	cs
 800429e:	2304      	movcs	r3, #4
 80042a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	3304      	adds	r3, #4
 80042a6:	2b06      	cmp	r3, #6
 80042a8:	d902      	bls.n	80042b0 <NVIC_EncodePriority+0x30>
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	3b03      	subs	r3, #3
 80042ae:	e000      	b.n	80042b2 <NVIC_EncodePriority+0x32>
 80042b0:	2300      	movs	r3, #0
 80042b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042b4:	f04f 32ff 	mov.w	r2, #4294967295
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	fa02 f303 	lsl.w	r3, r2, r3
 80042be:	43da      	mvns	r2, r3
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	401a      	ands	r2, r3
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042c8:	f04f 31ff 	mov.w	r1, #4294967295
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	fa01 f303 	lsl.w	r3, r1, r3
 80042d2:	43d9      	mvns	r1, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042d8:	4313      	orrs	r3, r2
         );
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3724      	adds	r7, #36	@ 0x24
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
	...

080042e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	3b01      	subs	r3, #1
 80042f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80042f8:	d301      	bcc.n	80042fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042fa:	2301      	movs	r3, #1
 80042fc:	e00f      	b.n	800431e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042fe:	4a0a      	ldr	r2, [pc, #40]	@ (8004328 <SysTick_Config+0x40>)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	3b01      	subs	r3, #1
 8004304:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004306:	210f      	movs	r1, #15
 8004308:	f04f 30ff 	mov.w	r0, #4294967295
 800430c:	f7ff ff8e 	bl	800422c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004310:	4b05      	ldr	r3, [pc, #20]	@ (8004328 <SysTick_Config+0x40>)
 8004312:	2200      	movs	r2, #0
 8004314:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004316:	4b04      	ldr	r3, [pc, #16]	@ (8004328 <SysTick_Config+0x40>)
 8004318:	2207      	movs	r2, #7
 800431a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3708      	adds	r7, #8
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	e000e010 	.word	0xe000e010

0800432c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f7ff ff29 	bl	800418c <__NVIC_SetPriorityGrouping>
}
 800433a:	bf00      	nop
 800433c:	3708      	adds	r7, #8
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}

08004342 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004342:	b580      	push	{r7, lr}
 8004344:	b086      	sub	sp, #24
 8004346:	af00      	add	r7, sp, #0
 8004348:	4603      	mov	r3, r0
 800434a:	60b9      	str	r1, [r7, #8]
 800434c:	607a      	str	r2, [r7, #4]
 800434e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004350:	f7ff ff40 	bl	80041d4 <__NVIC_GetPriorityGrouping>
 8004354:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	68b9      	ldr	r1, [r7, #8]
 800435a:	6978      	ldr	r0, [r7, #20]
 800435c:	f7ff ff90 	bl	8004280 <NVIC_EncodePriority>
 8004360:	4602      	mov	r2, r0
 8004362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004366:	4611      	mov	r1, r2
 8004368:	4618      	mov	r0, r3
 800436a:	f7ff ff5f 	bl	800422c <__NVIC_SetPriority>
}
 800436e:	bf00      	nop
 8004370:	3718      	adds	r7, #24
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}

08004376 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004376:	b580      	push	{r7, lr}
 8004378:	b082      	sub	sp, #8
 800437a:	af00      	add	r7, sp, #0
 800437c:	4603      	mov	r3, r0
 800437e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004384:	4618      	mov	r0, r3
 8004386:	f7ff ff33 	bl	80041f0 <__NVIC_EnableIRQ>
}
 800438a:	bf00      	nop
 800438c:	3708      	adds	r7, #8
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b082      	sub	sp, #8
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f7ff ffa4 	bl	80042e8 <SysTick_Config>
 80043a0:	4603      	mov	r3, r0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3708      	adds	r7, #8
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
	...

080043ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d101      	bne.n	80043be <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e08d      	b.n	80044da <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	461a      	mov	r2, r3
 80043c4:	4b47      	ldr	r3, [pc, #284]	@ (80044e4 <HAL_DMA_Init+0x138>)
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d80f      	bhi.n	80043ea <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	461a      	mov	r2, r3
 80043d0:	4b45      	ldr	r3, [pc, #276]	@ (80044e8 <HAL_DMA_Init+0x13c>)
 80043d2:	4413      	add	r3, r2
 80043d4:	4a45      	ldr	r2, [pc, #276]	@ (80044ec <HAL_DMA_Init+0x140>)
 80043d6:	fba2 2303 	umull	r2, r3, r2, r3
 80043da:	091b      	lsrs	r3, r3, #4
 80043dc:	009a      	lsls	r2, r3, #2
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a42      	ldr	r2, [pc, #264]	@ (80044f0 <HAL_DMA_Init+0x144>)
 80043e6:	641a      	str	r2, [r3, #64]	@ 0x40
 80043e8:	e00e      	b.n	8004408 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	461a      	mov	r2, r3
 80043f0:	4b40      	ldr	r3, [pc, #256]	@ (80044f4 <HAL_DMA_Init+0x148>)
 80043f2:	4413      	add	r3, r2
 80043f4:	4a3d      	ldr	r2, [pc, #244]	@ (80044ec <HAL_DMA_Init+0x140>)
 80043f6:	fba2 2303 	umull	r2, r3, r2, r3
 80043fa:	091b      	lsrs	r3, r3, #4
 80043fc:	009a      	lsls	r2, r3, #2
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a3c      	ldr	r2, [pc, #240]	@ (80044f8 <HAL_DMA_Init+0x14c>)
 8004406:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2202      	movs	r2, #2
 800440c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800441e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004422:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800442c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004438:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004444:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	4313      	orrs	r3, r2
 8004450:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 fa82 	bl	8004964 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004468:	d102      	bne.n	8004470 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685a      	ldr	r2, [r3, #4]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004478:	b2d2      	uxtb	r2, r2
 800447a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004484:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d010      	beq.n	80044b0 <HAL_DMA_Init+0x104>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	2b04      	cmp	r3, #4
 8004494:	d80c      	bhi.n	80044b0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 faa2 	bl	80049e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044a0:	2200      	movs	r2, #0
 80044a2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80044ac:	605a      	str	r2, [r3, #4]
 80044ae:	e008      	b.n	80044c2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3710      	adds	r7, #16
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	40020407 	.word	0x40020407
 80044e8:	bffdfff8 	.word	0xbffdfff8
 80044ec:	cccccccd 	.word	0xcccccccd
 80044f0:	40020000 	.word	0x40020000
 80044f4:	bffdfbf8 	.word	0xbffdfbf8
 80044f8:	40020400 	.word	0x40020400

080044fc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b086      	sub	sp, #24
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	607a      	str	r2, [r7, #4]
 8004508:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800450a:	2300      	movs	r3, #0
 800450c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004514:	2b01      	cmp	r3, #1
 8004516:	d101      	bne.n	800451c <HAL_DMA_Start_IT+0x20>
 8004518:	2302      	movs	r3, #2
 800451a:	e066      	b.n	80045ea <HAL_DMA_Start_IT+0xee>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800452a:	b2db      	uxtb	r3, r3
 800452c:	2b01      	cmp	r3, #1
 800452e:	d155      	bne.n	80045dc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2202      	movs	r2, #2
 8004534:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f022 0201 	bic.w	r2, r2, #1
 800454c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	68b9      	ldr	r1, [r7, #8]
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f000 f9c7 	bl	80048e8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800455e:	2b00      	cmp	r3, #0
 8004560:	d008      	beq.n	8004574 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f042 020e 	orr.w	r2, r2, #14
 8004570:	601a      	str	r2, [r3, #0]
 8004572:	e00f      	b.n	8004594 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f022 0204 	bic.w	r2, r2, #4
 8004582:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f042 020a 	orr.w	r2, r2, #10
 8004592:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d007      	beq.n	80045b2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045b0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d007      	beq.n	80045ca <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045c8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f042 0201 	orr.w	r2, r2, #1
 80045d8:	601a      	str	r2, [r3, #0]
 80045da:	e005      	b.n	80045e8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80045e4:	2302      	movs	r3, #2
 80045e6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80045e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3718      	adds	r7, #24
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80045f2:	b480      	push	{r7}
 80045f4:	b085      	sub	sp, #20
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045fa:	2300      	movs	r3, #0
 80045fc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b02      	cmp	r3, #2
 8004608:	d005      	beq.n	8004616 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2204      	movs	r2, #4
 800460e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	73fb      	strb	r3, [r7, #15]
 8004614:	e037      	b.n	8004686 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f022 020e 	bic.w	r2, r2, #14
 8004624:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004630:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004634:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f022 0201 	bic.w	r2, r2, #1
 8004644:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800464a:	f003 021f 	and.w	r2, r3, #31
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004652:	2101      	movs	r1, #1
 8004654:	fa01 f202 	lsl.w	r2, r1, r2
 8004658:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004662:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00c      	beq.n	8004686 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004676:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800467a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004684:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8004696:	7bfb      	ldrb	r3, [r7, #15]
}
 8004698:	4618      	mov	r0, r3
 800469a:	3714      	adds	r7, #20
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046ac:	2300      	movs	r3, #0
 80046ae:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d00d      	beq.n	80046d8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2204      	movs	r2, #4
 80046c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	73fb      	strb	r3, [r7, #15]
 80046d6:	e047      	b.n	8004768 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f022 020e 	bic.w	r2, r2, #14
 80046e6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f022 0201 	bic.w	r2, r2, #1
 80046f6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004702:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004706:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800470c:	f003 021f 	and.w	r2, r3, #31
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004714:	2101      	movs	r1, #1
 8004716:	fa01 f202 	lsl.w	r2, r1, r2
 800471a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004724:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00c      	beq.n	8004748 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004738:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800473c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004746:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800475c:	2b00      	cmp	r3, #0
 800475e:	d003      	beq.n	8004768 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	4798      	blx	r3
    }
  }
  return status;
 8004768:	7bfb      	ldrb	r3, [r7, #15]
}
 800476a:	4618      	mov	r0, r3
 800476c:	3710      	adds	r7, #16
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}

08004772 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004772:	b580      	push	{r7, lr}
 8004774:	b084      	sub	sp, #16
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800478e:	f003 031f 	and.w	r3, r3, #31
 8004792:	2204      	movs	r2, #4
 8004794:	409a      	lsls	r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	4013      	ands	r3, r2
 800479a:	2b00      	cmp	r3, #0
 800479c:	d026      	beq.n	80047ec <HAL_DMA_IRQHandler+0x7a>
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	f003 0304 	and.w	r3, r3, #4
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d021      	beq.n	80047ec <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0320 	and.w	r3, r3, #32
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d107      	bne.n	80047c6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f022 0204 	bic.w	r2, r2, #4
 80047c4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ca:	f003 021f 	and.w	r2, r3, #31
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d2:	2104      	movs	r1, #4
 80047d4:	fa01 f202 	lsl.w	r2, r1, r2
 80047d8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d071      	beq.n	80048c6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80047ea:	e06c      	b.n	80048c6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047f0:	f003 031f 	and.w	r3, r3, #31
 80047f4:	2202      	movs	r2, #2
 80047f6:	409a      	lsls	r2, r3
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	4013      	ands	r3, r2
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d02e      	beq.n	800485e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	2b00      	cmp	r3, #0
 8004808:	d029      	beq.n	800485e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0320 	and.w	r3, r3, #32
 8004814:	2b00      	cmp	r3, #0
 8004816:	d10b      	bne.n	8004830 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 020a 	bic.w	r2, r2, #10
 8004826:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004834:	f003 021f 	and.w	r2, r3, #31
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800483c:	2102      	movs	r1, #2
 800483e:	fa01 f202 	lsl.w	r2, r1, r2
 8004842:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004850:	2b00      	cmp	r3, #0
 8004852:	d038      	beq.n	80048c6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800485c:	e033      	b.n	80048c6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004862:	f003 031f 	and.w	r3, r3, #31
 8004866:	2208      	movs	r2, #8
 8004868:	409a      	lsls	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	4013      	ands	r3, r2
 800486e:	2b00      	cmp	r3, #0
 8004870:	d02a      	beq.n	80048c8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	f003 0308 	and.w	r3, r3, #8
 8004878:	2b00      	cmp	r3, #0
 800487a:	d025      	beq.n	80048c8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f022 020e 	bic.w	r2, r2, #14
 800488a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004890:	f003 021f 	and.w	r2, r3, #31
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004898:	2101      	movs	r1, #1
 800489a:	fa01 f202 	lsl.w	r2, r1, r2
 800489e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d004      	beq.n	80048c8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80048c6:	bf00      	nop
 80048c8:	bf00      	nop
}
 80048ca:	3710      	adds	r7, #16
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 80048dc:	4618      	mov	r0, r3
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b085      	sub	sp, #20
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
 80048f4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80048fe:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004904:	2b00      	cmp	r3, #0
 8004906:	d004      	beq.n	8004912 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004910:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004916:	f003 021f 	and.w	r2, r3, #31
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800491e:	2101      	movs	r1, #1
 8004920:	fa01 f202 	lsl.w	r2, r1, r2
 8004924:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	683a      	ldr	r2, [r7, #0]
 800492c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	2b10      	cmp	r3, #16
 8004934:	d108      	bne.n	8004948 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68ba      	ldr	r2, [r7, #8]
 8004944:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004946:	e007      	b.n	8004958 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68ba      	ldr	r2, [r7, #8]
 800494e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	60da      	str	r2, [r3, #12]
}
 8004958:	bf00      	nop
 800495a:	3714      	adds	r7, #20
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004964:	b480      	push	{r7}
 8004966:	b087      	sub	sp, #28
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	461a      	mov	r2, r3
 8004972:	4b16      	ldr	r3, [pc, #88]	@ (80049cc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004974:	429a      	cmp	r2, r3
 8004976:	d802      	bhi.n	800497e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004978:	4b15      	ldr	r3, [pc, #84]	@ (80049d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800497a:	617b      	str	r3, [r7, #20]
 800497c:	e001      	b.n	8004982 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800497e:	4b15      	ldr	r3, [pc, #84]	@ (80049d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004980:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	b2db      	uxtb	r3, r3
 800498c:	3b08      	subs	r3, #8
 800498e:	4a12      	ldr	r2, [pc, #72]	@ (80049d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004990:	fba2 2303 	umull	r2, r3, r2, r3
 8004994:	091b      	lsrs	r3, r3, #4
 8004996:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800499c:	089b      	lsrs	r3, r3, #2
 800499e:	009a      	lsls	r2, r3, #2
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	4413      	add	r3, r2
 80049a4:	461a      	mov	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a0b      	ldr	r2, [pc, #44]	@ (80049dc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80049ae:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f003 031f 	and.w	r3, r3, #31
 80049b6:	2201      	movs	r2, #1
 80049b8:	409a      	lsls	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80049be:	bf00      	nop
 80049c0:	371c      	adds	r7, #28
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop
 80049cc:	40020407 	.word	0x40020407
 80049d0:	40020800 	.word	0x40020800
 80049d4:	40020820 	.word	0x40020820
 80049d8:	cccccccd 	.word	0xcccccccd
 80049dc:	40020880 	.word	0x40020880

080049e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004a20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80049f4:	4413      	add	r3, r2
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	461a      	mov	r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a08      	ldr	r2, [pc, #32]	@ (8004a24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004a02:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	3b01      	subs	r3, #1
 8004a08:	f003 031f 	and.w	r3, r3, #31
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	409a      	lsls	r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004a14:	bf00      	nop
 8004a16:	3714      	adds	r7, #20
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr
 8004a20:	1000823f 	.word	0x1000823f
 8004a24:	40020940 	.word	0x40020940

08004a28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b087      	sub	sp, #28
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004a32:	2300      	movs	r3, #0
 8004a34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004a36:	e15a      	b.n	8004cee <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	2101      	movs	r1, #1
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	fa01 f303 	lsl.w	r3, r1, r3
 8004a44:	4013      	ands	r3, r2
 8004a46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	f000 814c 	beq.w	8004ce8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f003 0303 	and.w	r3, r3, #3
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d005      	beq.n	8004a68 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d130      	bne.n	8004aca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	005b      	lsls	r3, r3, #1
 8004a72:	2203      	movs	r2, #3
 8004a74:	fa02 f303 	lsl.w	r3, r2, r3
 8004a78:	43db      	mvns	r3, r3
 8004a7a:	693a      	ldr	r2, [r7, #16]
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	68da      	ldr	r2, [r3, #12]
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	005b      	lsls	r3, r3, #1
 8004a88:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	693a      	ldr	r2, [r7, #16]
 8004a96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa6:	43db      	mvns	r3, r3
 8004aa8:	693a      	ldr	r2, [r7, #16]
 8004aaa:	4013      	ands	r3, r2
 8004aac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	091b      	lsrs	r3, r3, #4
 8004ab4:	f003 0201 	and.w	r2, r3, #1
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	fa02 f303 	lsl.w	r3, r2, r3
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f003 0303 	and.w	r3, r3, #3
 8004ad2:	2b03      	cmp	r3, #3
 8004ad4:	d017      	beq.n	8004b06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	005b      	lsls	r3, r3, #1
 8004ae0:	2203      	movs	r2, #3
 8004ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae6:	43db      	mvns	r3, r3
 8004ae8:	693a      	ldr	r2, [r7, #16]
 8004aea:	4013      	ands	r3, r2
 8004aec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	689a      	ldr	r2, [r3, #8]
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	005b      	lsls	r3, r3, #1
 8004af6:	fa02 f303 	lsl.w	r3, r2, r3
 8004afa:	693a      	ldr	r2, [r7, #16]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f003 0303 	and.w	r3, r3, #3
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d123      	bne.n	8004b5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	08da      	lsrs	r2, r3, #3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	3208      	adds	r2, #8
 8004b1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	f003 0307 	and.w	r3, r3, #7
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	220f      	movs	r2, #15
 8004b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2e:	43db      	mvns	r3, r3
 8004b30:	693a      	ldr	r2, [r7, #16]
 8004b32:	4013      	ands	r3, r2
 8004b34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	691a      	ldr	r2, [r3, #16]
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	f003 0307 	and.w	r3, r3, #7
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	fa02 f303 	lsl.w	r3, r2, r3
 8004b46:	693a      	ldr	r2, [r7, #16]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	08da      	lsrs	r2, r3, #3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	3208      	adds	r2, #8
 8004b54:	6939      	ldr	r1, [r7, #16]
 8004b56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	005b      	lsls	r3, r3, #1
 8004b64:	2203      	movs	r2, #3
 8004b66:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6a:	43db      	mvns	r3, r3
 8004b6c:	693a      	ldr	r2, [r7, #16]
 8004b6e:	4013      	ands	r3, r2
 8004b70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f003 0203 	and.w	r2, r3, #3
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	005b      	lsls	r3, r3, #1
 8004b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b82:	693a      	ldr	r2, [r7, #16]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	693a      	ldr	r2, [r7, #16]
 8004b8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	f000 80a6 	beq.w	8004ce8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b9c:	4b5b      	ldr	r3, [pc, #364]	@ (8004d0c <HAL_GPIO_Init+0x2e4>)
 8004b9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ba0:	4a5a      	ldr	r2, [pc, #360]	@ (8004d0c <HAL_GPIO_Init+0x2e4>)
 8004ba2:	f043 0301 	orr.w	r3, r3, #1
 8004ba6:	6613      	str	r3, [r2, #96]	@ 0x60
 8004ba8:	4b58      	ldr	r3, [pc, #352]	@ (8004d0c <HAL_GPIO_Init+0x2e4>)
 8004baa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bac:	f003 0301 	and.w	r3, r3, #1
 8004bb0:	60bb      	str	r3, [r7, #8]
 8004bb2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004bb4:	4a56      	ldr	r2, [pc, #344]	@ (8004d10 <HAL_GPIO_Init+0x2e8>)
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	089b      	lsrs	r3, r3, #2
 8004bba:	3302      	adds	r3, #2
 8004bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	f003 0303 	and.w	r3, r3, #3
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	220f      	movs	r2, #15
 8004bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd0:	43db      	mvns	r3, r3
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004bde:	d01f      	beq.n	8004c20 <HAL_GPIO_Init+0x1f8>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a4c      	ldr	r2, [pc, #304]	@ (8004d14 <HAL_GPIO_Init+0x2ec>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d019      	beq.n	8004c1c <HAL_GPIO_Init+0x1f4>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a4b      	ldr	r2, [pc, #300]	@ (8004d18 <HAL_GPIO_Init+0x2f0>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d013      	beq.n	8004c18 <HAL_GPIO_Init+0x1f0>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a4a      	ldr	r2, [pc, #296]	@ (8004d1c <HAL_GPIO_Init+0x2f4>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d00d      	beq.n	8004c14 <HAL_GPIO_Init+0x1ec>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a49      	ldr	r2, [pc, #292]	@ (8004d20 <HAL_GPIO_Init+0x2f8>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d007      	beq.n	8004c10 <HAL_GPIO_Init+0x1e8>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a48      	ldr	r2, [pc, #288]	@ (8004d24 <HAL_GPIO_Init+0x2fc>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d101      	bne.n	8004c0c <HAL_GPIO_Init+0x1e4>
 8004c08:	2305      	movs	r3, #5
 8004c0a:	e00a      	b.n	8004c22 <HAL_GPIO_Init+0x1fa>
 8004c0c:	2306      	movs	r3, #6
 8004c0e:	e008      	b.n	8004c22 <HAL_GPIO_Init+0x1fa>
 8004c10:	2304      	movs	r3, #4
 8004c12:	e006      	b.n	8004c22 <HAL_GPIO_Init+0x1fa>
 8004c14:	2303      	movs	r3, #3
 8004c16:	e004      	b.n	8004c22 <HAL_GPIO_Init+0x1fa>
 8004c18:	2302      	movs	r3, #2
 8004c1a:	e002      	b.n	8004c22 <HAL_GPIO_Init+0x1fa>
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e000      	b.n	8004c22 <HAL_GPIO_Init+0x1fa>
 8004c20:	2300      	movs	r3, #0
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	f002 0203 	and.w	r2, r2, #3
 8004c28:	0092      	lsls	r2, r2, #2
 8004c2a:	4093      	lsls	r3, r2
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c32:	4937      	ldr	r1, [pc, #220]	@ (8004d10 <HAL_GPIO_Init+0x2e8>)
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	089b      	lsrs	r3, r3, #2
 8004c38:	3302      	adds	r3, #2
 8004c3a:	693a      	ldr	r2, [r7, #16]
 8004c3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c40:	4b39      	ldr	r3, [pc, #228]	@ (8004d28 <HAL_GPIO_Init+0x300>)
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	43db      	mvns	r3, r3
 8004c4a:	693a      	ldr	r2, [r7, #16]
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d003      	beq.n	8004c64 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004c5c:	693a      	ldr	r2, [r7, #16]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004c64:	4a30      	ldr	r2, [pc, #192]	@ (8004d28 <HAL_GPIO_Init+0x300>)
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004c6a:	4b2f      	ldr	r3, [pc, #188]	@ (8004d28 <HAL_GPIO_Init+0x300>)
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	43db      	mvns	r3, r3
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	4013      	ands	r3, r2
 8004c78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d003      	beq.n	8004c8e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004c86:	693a      	ldr	r2, [r7, #16]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004c8e:	4a26      	ldr	r2, [pc, #152]	@ (8004d28 <HAL_GPIO_Init+0x300>)
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004c94:	4b24      	ldr	r3, [pc, #144]	@ (8004d28 <HAL_GPIO_Init+0x300>)
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	43db      	mvns	r3, r3
 8004c9e:	693a      	ldr	r2, [r7, #16]
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d003      	beq.n	8004cb8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004cb0:	693a      	ldr	r2, [r7, #16]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004cb8:	4a1b      	ldr	r2, [pc, #108]	@ (8004d28 <HAL_GPIO_Init+0x300>)
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004cbe:	4b1a      	ldr	r3, [pc, #104]	@ (8004d28 <HAL_GPIO_Init+0x300>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	43db      	mvns	r3, r3
 8004cc8:	693a      	ldr	r2, [r7, #16]
 8004cca:	4013      	ands	r3, r2
 8004ccc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d003      	beq.n	8004ce2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004ce2:	4a11      	ldr	r2, [pc, #68]	@ (8004d28 <HAL_GPIO_Init+0x300>)
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	3301      	adds	r3, #1
 8004cec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	fa22 f303 	lsr.w	r3, r2, r3
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	f47f ae9d 	bne.w	8004a38 <HAL_GPIO_Init+0x10>
  }
}
 8004cfe:	bf00      	nop
 8004d00:	bf00      	nop
 8004d02:	371c      	adds	r7, #28
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr
 8004d0c:	40021000 	.word	0x40021000
 8004d10:	40010000 	.word	0x40010000
 8004d14:	48000400 	.word	0x48000400
 8004d18:	48000800 	.word	0x48000800
 8004d1c:	48000c00 	.word	0x48000c00
 8004d20:	48001000 	.word	0x48001000
 8004d24:	48001400 	.word	0x48001400
 8004d28:	40010400 	.word	0x40010400

08004d2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	460b      	mov	r3, r1
 8004d36:	807b      	strh	r3, [r7, #2]
 8004d38:	4613      	mov	r3, r2
 8004d3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d3c:	787b      	ldrb	r3, [r7, #1]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d003      	beq.n	8004d4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004d42:	887a      	ldrh	r2, [r7, #2]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004d48:	e002      	b.n	8004d50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004d4a:	887a      	ldrh	r2, [r7, #2]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004d50:	bf00      	nop
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	4603      	mov	r3, r0
 8004d64:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004d66:	4b08      	ldr	r3, [pc, #32]	@ (8004d88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d68:	695a      	ldr	r2, [r3, #20]
 8004d6a:	88fb      	ldrh	r3, [r7, #6]
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d006      	beq.n	8004d80 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004d72:	4a05      	ldr	r2, [pc, #20]	@ (8004d88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d74:	88fb      	ldrh	r3, [r7, #6]
 8004d76:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004d78:	88fb      	ldrh	r3, [r7, #6]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7fd f9ee 	bl	800215c <HAL_GPIO_EXTI_Callback>
  }
}
 8004d80:	bf00      	nop
 8004d82:	3708      	adds	r7, #8
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	40010400 	.word	0x40010400

08004d8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b085      	sub	sp, #20
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d141      	bne.n	8004e1e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d9a:	4b4b      	ldr	r3, [pc, #300]	@ (8004ec8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004da2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004da6:	d131      	bne.n	8004e0c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004da8:	4b47      	ldr	r3, [pc, #284]	@ (8004ec8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004daa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004dae:	4a46      	ldr	r2, [pc, #280]	@ (8004ec8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004db0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004db4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004db8:	4b43      	ldr	r3, [pc, #268]	@ (8004ec8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004dc0:	4a41      	ldr	r2, [pc, #260]	@ (8004ec8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dc2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004dc6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004dc8:	4b40      	ldr	r3, [pc, #256]	@ (8004ecc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2232      	movs	r2, #50	@ 0x32
 8004dce:	fb02 f303 	mul.w	r3, r2, r3
 8004dd2:	4a3f      	ldr	r2, [pc, #252]	@ (8004ed0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd8:	0c9b      	lsrs	r3, r3, #18
 8004dda:	3301      	adds	r3, #1
 8004ddc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004dde:	e002      	b.n	8004de6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	3b01      	subs	r3, #1
 8004de4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004de6:	4b38      	ldr	r3, [pc, #224]	@ (8004ec8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004df2:	d102      	bne.n	8004dfa <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1f2      	bne.n	8004de0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004dfa:	4b33      	ldr	r3, [pc, #204]	@ (8004ec8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e06:	d158      	bne.n	8004eba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e057      	b.n	8004ebc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e0c:	4b2e      	ldr	r3, [pc, #184]	@ (8004ec8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e12:	4a2d      	ldr	r2, [pc, #180]	@ (8004ec8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e18:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004e1c:	e04d      	b.n	8004eba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e24:	d141      	bne.n	8004eaa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e26:	4b28      	ldr	r3, [pc, #160]	@ (8004ec8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004e2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e32:	d131      	bne.n	8004e98 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e34:	4b24      	ldr	r3, [pc, #144]	@ (8004ec8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e3a:	4a23      	ldr	r2, [pc, #140]	@ (8004ec8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e40:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e44:	4b20      	ldr	r3, [pc, #128]	@ (8004ec8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004e4c:	4a1e      	ldr	r2, [pc, #120]	@ (8004ec8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004e52:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004e54:	4b1d      	ldr	r3, [pc, #116]	@ (8004ecc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2232      	movs	r2, #50	@ 0x32
 8004e5a:	fb02 f303 	mul.w	r3, r2, r3
 8004e5e:	4a1c      	ldr	r2, [pc, #112]	@ (8004ed0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004e60:	fba2 2303 	umull	r2, r3, r2, r3
 8004e64:	0c9b      	lsrs	r3, r3, #18
 8004e66:	3301      	adds	r3, #1
 8004e68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e6a:	e002      	b.n	8004e72 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e72:	4b15      	ldr	r3, [pc, #84]	@ (8004ec8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e7e:	d102      	bne.n	8004e86 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1f2      	bne.n	8004e6c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e86:	4b10      	ldr	r3, [pc, #64]	@ (8004ec8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e92:	d112      	bne.n	8004eba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	e011      	b.n	8004ebc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e98:	4b0b      	ldr	r3, [pc, #44]	@ (8004ec8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8004ec8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ea0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ea4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004ea8:	e007      	b.n	8004eba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004eaa:	4b07      	ldr	r3, [pc, #28]	@ (8004ec8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004eb2:	4a05      	ldr	r2, [pc, #20]	@ (8004ec8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eb4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004eb8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3714      	adds	r7, #20
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr
 8004ec8:	40007000 	.word	0x40007000
 8004ecc:	20000200 	.word	0x20000200
 8004ed0:	431bde83 	.word	0x431bde83

08004ed4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004ed8:	4b05      	ldr	r3, [pc, #20]	@ (8004ef0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	4a04      	ldr	r2, [pc, #16]	@ (8004ef0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004ede:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004ee2:	6093      	str	r3, [r2, #8]
}
 8004ee4:	bf00      	nop
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	40007000 	.word	0x40007000

08004ef4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b088      	sub	sp, #32
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d101      	bne.n	8004f06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e2fe      	b.n	8005504 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0301 	and.w	r3, r3, #1
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d075      	beq.n	8004ffe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f12:	4b97      	ldr	r3, [pc, #604]	@ (8005170 <HAL_RCC_OscConfig+0x27c>)
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f003 030c 	and.w	r3, r3, #12
 8004f1a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f1c:	4b94      	ldr	r3, [pc, #592]	@ (8005170 <HAL_RCC_OscConfig+0x27c>)
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	f003 0303 	and.w	r3, r3, #3
 8004f24:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	2b0c      	cmp	r3, #12
 8004f2a:	d102      	bne.n	8004f32 <HAL_RCC_OscConfig+0x3e>
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	2b03      	cmp	r3, #3
 8004f30:	d002      	beq.n	8004f38 <HAL_RCC_OscConfig+0x44>
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	2b08      	cmp	r3, #8
 8004f36:	d10b      	bne.n	8004f50 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f38:	4b8d      	ldr	r3, [pc, #564]	@ (8005170 <HAL_RCC_OscConfig+0x27c>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d05b      	beq.n	8004ffc <HAL_RCC_OscConfig+0x108>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d157      	bne.n	8004ffc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e2d9      	b.n	8005504 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f58:	d106      	bne.n	8004f68 <HAL_RCC_OscConfig+0x74>
 8004f5a:	4b85      	ldr	r3, [pc, #532]	@ (8005170 <HAL_RCC_OscConfig+0x27c>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a84      	ldr	r2, [pc, #528]	@ (8005170 <HAL_RCC_OscConfig+0x27c>)
 8004f60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f64:	6013      	str	r3, [r2, #0]
 8004f66:	e01d      	b.n	8004fa4 <HAL_RCC_OscConfig+0xb0>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f70:	d10c      	bne.n	8004f8c <HAL_RCC_OscConfig+0x98>
 8004f72:	4b7f      	ldr	r3, [pc, #508]	@ (8005170 <HAL_RCC_OscConfig+0x27c>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a7e      	ldr	r2, [pc, #504]	@ (8005170 <HAL_RCC_OscConfig+0x27c>)
 8004f78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f7c:	6013      	str	r3, [r2, #0]
 8004f7e:	4b7c      	ldr	r3, [pc, #496]	@ (8005170 <HAL_RCC_OscConfig+0x27c>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a7b      	ldr	r2, [pc, #492]	@ (8005170 <HAL_RCC_OscConfig+0x27c>)
 8004f84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f88:	6013      	str	r3, [r2, #0]
 8004f8a:	e00b      	b.n	8004fa4 <HAL_RCC_OscConfig+0xb0>
 8004f8c:	4b78      	ldr	r3, [pc, #480]	@ (8005170 <HAL_RCC_OscConfig+0x27c>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a77      	ldr	r2, [pc, #476]	@ (8005170 <HAL_RCC_OscConfig+0x27c>)
 8004f92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f96:	6013      	str	r3, [r2, #0]
 8004f98:	4b75      	ldr	r3, [pc, #468]	@ (8005170 <HAL_RCC_OscConfig+0x27c>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a74      	ldr	r2, [pc, #464]	@ (8005170 <HAL_RCC_OscConfig+0x27c>)
 8004f9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004fa2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d013      	beq.n	8004fd4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fac:	f7fd fe24 	bl	8002bf8 <HAL_GetTick>
 8004fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fb2:	e008      	b.n	8004fc6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fb4:	f7fd fe20 	bl	8002bf8 <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	2b64      	cmp	r3, #100	@ 0x64
 8004fc0:	d901      	bls.n	8004fc6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e29e      	b.n	8005504 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fc6:	4b6a      	ldr	r3, [pc, #424]	@ (8005170 <HAL_RCC_OscConfig+0x27c>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d0f0      	beq.n	8004fb4 <HAL_RCC_OscConfig+0xc0>
 8004fd2:	e014      	b.n	8004ffe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd4:	f7fd fe10 	bl	8002bf8 <HAL_GetTick>
 8004fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004fda:	e008      	b.n	8004fee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fdc:	f7fd fe0c 	bl	8002bf8 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	2b64      	cmp	r3, #100	@ 0x64
 8004fe8:	d901      	bls.n	8004fee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e28a      	b.n	8005504 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004fee:	4b60      	ldr	r3, [pc, #384]	@ (8005170 <HAL_RCC_OscConfig+0x27c>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1f0      	bne.n	8004fdc <HAL_RCC_OscConfig+0xe8>
 8004ffa:	e000      	b.n	8004ffe <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ffc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0302 	and.w	r3, r3, #2
 8005006:	2b00      	cmp	r3, #0
 8005008:	d075      	beq.n	80050f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800500a:	4b59      	ldr	r3, [pc, #356]	@ (8005170 <HAL_RCC_OscConfig+0x27c>)
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	f003 030c 	and.w	r3, r3, #12
 8005012:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005014:	4b56      	ldr	r3, [pc, #344]	@ (8005170 <HAL_RCC_OscConfig+0x27c>)
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	f003 0303 	and.w	r3, r3, #3
 800501c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	2b0c      	cmp	r3, #12
 8005022:	d102      	bne.n	800502a <HAL_RCC_OscConfig+0x136>
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	2b02      	cmp	r3, #2
 8005028:	d002      	beq.n	8005030 <HAL_RCC_OscConfig+0x13c>
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	2b04      	cmp	r3, #4
 800502e:	d11f      	bne.n	8005070 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005030:	4b4f      	ldr	r3, [pc, #316]	@ (8005170 <HAL_RCC_OscConfig+0x27c>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005038:	2b00      	cmp	r3, #0
 800503a:	d005      	beq.n	8005048 <HAL_RCC_OscConfig+0x154>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d101      	bne.n	8005048 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e25d      	b.n	8005504 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005048:	4b49      	ldr	r3, [pc, #292]	@ (8005170 <HAL_RCC_OscConfig+0x27c>)
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	061b      	lsls	r3, r3, #24
 8005056:	4946      	ldr	r1, [pc, #280]	@ (8005170 <HAL_RCC_OscConfig+0x27c>)
 8005058:	4313      	orrs	r3, r2
 800505a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800505c:	4b45      	ldr	r3, [pc, #276]	@ (8005174 <HAL_RCC_OscConfig+0x280>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4618      	mov	r0, r3
 8005062:	f7fd fd7d 	bl	8002b60 <HAL_InitTick>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d043      	beq.n	80050f4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e249      	b.n	8005504 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d023      	beq.n	80050c0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005078:	4b3d      	ldr	r3, [pc, #244]	@ (8005170 <HAL_RCC_OscConfig+0x27c>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a3c      	ldr	r2, [pc, #240]	@ (8005170 <HAL_RCC_OscConfig+0x27c>)
 800507e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005082:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005084:	f7fd fdb8 	bl	8002bf8 <HAL_GetTick>
 8005088:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800508a:	e008      	b.n	800509e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800508c:	f7fd fdb4 	bl	8002bf8 <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	2b02      	cmp	r3, #2
 8005098:	d901      	bls.n	800509e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e232      	b.n	8005504 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800509e:	4b34      	ldr	r3, [pc, #208]	@ (8005170 <HAL_RCC_OscConfig+0x27c>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d0f0      	beq.n	800508c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050aa:	4b31      	ldr	r3, [pc, #196]	@ (8005170 <HAL_RCC_OscConfig+0x27c>)
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	061b      	lsls	r3, r3, #24
 80050b8:	492d      	ldr	r1, [pc, #180]	@ (8005170 <HAL_RCC_OscConfig+0x27c>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	604b      	str	r3, [r1, #4]
 80050be:	e01a      	b.n	80050f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050c0:	4b2b      	ldr	r3, [pc, #172]	@ (8005170 <HAL_RCC_OscConfig+0x27c>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a2a      	ldr	r2, [pc, #168]	@ (8005170 <HAL_RCC_OscConfig+0x27c>)
 80050c6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050cc:	f7fd fd94 	bl	8002bf8 <HAL_GetTick>
 80050d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80050d2:	e008      	b.n	80050e6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050d4:	f7fd fd90 	bl	8002bf8 <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d901      	bls.n	80050e6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e20e      	b.n	8005504 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80050e6:	4b22      	ldr	r3, [pc, #136]	@ (8005170 <HAL_RCC_OscConfig+0x27c>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d1f0      	bne.n	80050d4 <HAL_RCC_OscConfig+0x1e0>
 80050f2:	e000      	b.n	80050f6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 0308 	and.w	r3, r3, #8
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d041      	beq.n	8005186 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	695b      	ldr	r3, [r3, #20]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d01c      	beq.n	8005144 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800510a:	4b19      	ldr	r3, [pc, #100]	@ (8005170 <HAL_RCC_OscConfig+0x27c>)
 800510c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005110:	4a17      	ldr	r2, [pc, #92]	@ (8005170 <HAL_RCC_OscConfig+0x27c>)
 8005112:	f043 0301 	orr.w	r3, r3, #1
 8005116:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800511a:	f7fd fd6d 	bl	8002bf8 <HAL_GetTick>
 800511e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005120:	e008      	b.n	8005134 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005122:	f7fd fd69 	bl	8002bf8 <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	2b02      	cmp	r3, #2
 800512e:	d901      	bls.n	8005134 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e1e7      	b.n	8005504 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005134:	4b0e      	ldr	r3, [pc, #56]	@ (8005170 <HAL_RCC_OscConfig+0x27c>)
 8005136:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800513a:	f003 0302 	and.w	r3, r3, #2
 800513e:	2b00      	cmp	r3, #0
 8005140:	d0ef      	beq.n	8005122 <HAL_RCC_OscConfig+0x22e>
 8005142:	e020      	b.n	8005186 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005144:	4b0a      	ldr	r3, [pc, #40]	@ (8005170 <HAL_RCC_OscConfig+0x27c>)
 8005146:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800514a:	4a09      	ldr	r2, [pc, #36]	@ (8005170 <HAL_RCC_OscConfig+0x27c>)
 800514c:	f023 0301 	bic.w	r3, r3, #1
 8005150:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005154:	f7fd fd50 	bl	8002bf8 <HAL_GetTick>
 8005158:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800515a:	e00d      	b.n	8005178 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800515c:	f7fd fd4c 	bl	8002bf8 <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	2b02      	cmp	r3, #2
 8005168:	d906      	bls.n	8005178 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e1ca      	b.n	8005504 <HAL_RCC_OscConfig+0x610>
 800516e:	bf00      	nop
 8005170:	40021000 	.word	0x40021000
 8005174:	20000204 	.word	0x20000204
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005178:	4b8c      	ldr	r3, [pc, #560]	@ (80053ac <HAL_RCC_OscConfig+0x4b8>)
 800517a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	2b00      	cmp	r3, #0
 8005184:	d1ea      	bne.n	800515c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0304 	and.w	r3, r3, #4
 800518e:	2b00      	cmp	r3, #0
 8005190:	f000 80a6 	beq.w	80052e0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005194:	2300      	movs	r3, #0
 8005196:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005198:	4b84      	ldr	r3, [pc, #528]	@ (80053ac <HAL_RCC_OscConfig+0x4b8>)
 800519a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800519c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d101      	bne.n	80051a8 <HAL_RCC_OscConfig+0x2b4>
 80051a4:	2301      	movs	r3, #1
 80051a6:	e000      	b.n	80051aa <HAL_RCC_OscConfig+0x2b6>
 80051a8:	2300      	movs	r3, #0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00d      	beq.n	80051ca <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051ae:	4b7f      	ldr	r3, [pc, #508]	@ (80053ac <HAL_RCC_OscConfig+0x4b8>)
 80051b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051b2:	4a7e      	ldr	r2, [pc, #504]	@ (80053ac <HAL_RCC_OscConfig+0x4b8>)
 80051b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80051ba:	4b7c      	ldr	r3, [pc, #496]	@ (80053ac <HAL_RCC_OscConfig+0x4b8>)
 80051bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051c2:	60fb      	str	r3, [r7, #12]
 80051c4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80051c6:	2301      	movs	r3, #1
 80051c8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051ca:	4b79      	ldr	r3, [pc, #484]	@ (80053b0 <HAL_RCC_OscConfig+0x4bc>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d118      	bne.n	8005208 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051d6:	4b76      	ldr	r3, [pc, #472]	@ (80053b0 <HAL_RCC_OscConfig+0x4bc>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a75      	ldr	r2, [pc, #468]	@ (80053b0 <HAL_RCC_OscConfig+0x4bc>)
 80051dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051e2:	f7fd fd09 	bl	8002bf8 <HAL_GetTick>
 80051e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051e8:	e008      	b.n	80051fc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051ea:	f7fd fd05 	bl	8002bf8 <HAL_GetTick>
 80051ee:	4602      	mov	r2, r0
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	1ad3      	subs	r3, r2, r3
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d901      	bls.n	80051fc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80051f8:	2303      	movs	r3, #3
 80051fa:	e183      	b.n	8005504 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051fc:	4b6c      	ldr	r3, [pc, #432]	@ (80053b0 <HAL_RCC_OscConfig+0x4bc>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005204:	2b00      	cmp	r3, #0
 8005206:	d0f0      	beq.n	80051ea <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	2b01      	cmp	r3, #1
 800520e:	d108      	bne.n	8005222 <HAL_RCC_OscConfig+0x32e>
 8005210:	4b66      	ldr	r3, [pc, #408]	@ (80053ac <HAL_RCC_OscConfig+0x4b8>)
 8005212:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005216:	4a65      	ldr	r2, [pc, #404]	@ (80053ac <HAL_RCC_OscConfig+0x4b8>)
 8005218:	f043 0301 	orr.w	r3, r3, #1
 800521c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005220:	e024      	b.n	800526c <HAL_RCC_OscConfig+0x378>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	2b05      	cmp	r3, #5
 8005228:	d110      	bne.n	800524c <HAL_RCC_OscConfig+0x358>
 800522a:	4b60      	ldr	r3, [pc, #384]	@ (80053ac <HAL_RCC_OscConfig+0x4b8>)
 800522c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005230:	4a5e      	ldr	r2, [pc, #376]	@ (80053ac <HAL_RCC_OscConfig+0x4b8>)
 8005232:	f043 0304 	orr.w	r3, r3, #4
 8005236:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800523a:	4b5c      	ldr	r3, [pc, #368]	@ (80053ac <HAL_RCC_OscConfig+0x4b8>)
 800523c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005240:	4a5a      	ldr	r2, [pc, #360]	@ (80053ac <HAL_RCC_OscConfig+0x4b8>)
 8005242:	f043 0301 	orr.w	r3, r3, #1
 8005246:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800524a:	e00f      	b.n	800526c <HAL_RCC_OscConfig+0x378>
 800524c:	4b57      	ldr	r3, [pc, #348]	@ (80053ac <HAL_RCC_OscConfig+0x4b8>)
 800524e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005252:	4a56      	ldr	r2, [pc, #344]	@ (80053ac <HAL_RCC_OscConfig+0x4b8>)
 8005254:	f023 0301 	bic.w	r3, r3, #1
 8005258:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800525c:	4b53      	ldr	r3, [pc, #332]	@ (80053ac <HAL_RCC_OscConfig+0x4b8>)
 800525e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005262:	4a52      	ldr	r2, [pc, #328]	@ (80053ac <HAL_RCC_OscConfig+0x4b8>)
 8005264:	f023 0304 	bic.w	r3, r3, #4
 8005268:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d016      	beq.n	80052a2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005274:	f7fd fcc0 	bl	8002bf8 <HAL_GetTick>
 8005278:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800527a:	e00a      	b.n	8005292 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800527c:	f7fd fcbc 	bl	8002bf8 <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	f241 3288 	movw	r2, #5000	@ 0x1388
 800528a:	4293      	cmp	r3, r2
 800528c:	d901      	bls.n	8005292 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e138      	b.n	8005504 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005292:	4b46      	ldr	r3, [pc, #280]	@ (80053ac <HAL_RCC_OscConfig+0x4b8>)
 8005294:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005298:	f003 0302 	and.w	r3, r3, #2
 800529c:	2b00      	cmp	r3, #0
 800529e:	d0ed      	beq.n	800527c <HAL_RCC_OscConfig+0x388>
 80052a0:	e015      	b.n	80052ce <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052a2:	f7fd fca9 	bl	8002bf8 <HAL_GetTick>
 80052a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80052a8:	e00a      	b.n	80052c0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052aa:	f7fd fca5 	bl	8002bf8 <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d901      	bls.n	80052c0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e121      	b.n	8005504 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80052c0:	4b3a      	ldr	r3, [pc, #232]	@ (80053ac <HAL_RCC_OscConfig+0x4b8>)
 80052c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052c6:	f003 0302 	and.w	r3, r3, #2
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1ed      	bne.n	80052aa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80052ce:	7ffb      	ldrb	r3, [r7, #31]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d105      	bne.n	80052e0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052d4:	4b35      	ldr	r3, [pc, #212]	@ (80053ac <HAL_RCC_OscConfig+0x4b8>)
 80052d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052d8:	4a34      	ldr	r2, [pc, #208]	@ (80053ac <HAL_RCC_OscConfig+0x4b8>)
 80052da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052de:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0320 	and.w	r3, r3, #32
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d03c      	beq.n	8005366 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	699b      	ldr	r3, [r3, #24]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d01c      	beq.n	800532e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80052f4:	4b2d      	ldr	r3, [pc, #180]	@ (80053ac <HAL_RCC_OscConfig+0x4b8>)
 80052f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80052fa:	4a2c      	ldr	r2, [pc, #176]	@ (80053ac <HAL_RCC_OscConfig+0x4b8>)
 80052fc:	f043 0301 	orr.w	r3, r3, #1
 8005300:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005304:	f7fd fc78 	bl	8002bf8 <HAL_GetTick>
 8005308:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800530a:	e008      	b.n	800531e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800530c:	f7fd fc74 	bl	8002bf8 <HAL_GetTick>
 8005310:	4602      	mov	r2, r0
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	2b02      	cmp	r3, #2
 8005318:	d901      	bls.n	800531e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	e0f2      	b.n	8005504 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800531e:	4b23      	ldr	r3, [pc, #140]	@ (80053ac <HAL_RCC_OscConfig+0x4b8>)
 8005320:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005324:	f003 0302 	and.w	r3, r3, #2
 8005328:	2b00      	cmp	r3, #0
 800532a:	d0ef      	beq.n	800530c <HAL_RCC_OscConfig+0x418>
 800532c:	e01b      	b.n	8005366 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800532e:	4b1f      	ldr	r3, [pc, #124]	@ (80053ac <HAL_RCC_OscConfig+0x4b8>)
 8005330:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005334:	4a1d      	ldr	r2, [pc, #116]	@ (80053ac <HAL_RCC_OscConfig+0x4b8>)
 8005336:	f023 0301 	bic.w	r3, r3, #1
 800533a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800533e:	f7fd fc5b 	bl	8002bf8 <HAL_GetTick>
 8005342:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005344:	e008      	b.n	8005358 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005346:	f7fd fc57 	bl	8002bf8 <HAL_GetTick>
 800534a:	4602      	mov	r2, r0
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	1ad3      	subs	r3, r2, r3
 8005350:	2b02      	cmp	r3, #2
 8005352:	d901      	bls.n	8005358 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005354:	2303      	movs	r3, #3
 8005356:	e0d5      	b.n	8005504 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005358:	4b14      	ldr	r3, [pc, #80]	@ (80053ac <HAL_RCC_OscConfig+0x4b8>)
 800535a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800535e:	f003 0302 	and.w	r3, r3, #2
 8005362:	2b00      	cmp	r3, #0
 8005364:	d1ef      	bne.n	8005346 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	69db      	ldr	r3, [r3, #28]
 800536a:	2b00      	cmp	r3, #0
 800536c:	f000 80c9 	beq.w	8005502 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005370:	4b0e      	ldr	r3, [pc, #56]	@ (80053ac <HAL_RCC_OscConfig+0x4b8>)
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f003 030c 	and.w	r3, r3, #12
 8005378:	2b0c      	cmp	r3, #12
 800537a:	f000 8083 	beq.w	8005484 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	69db      	ldr	r3, [r3, #28]
 8005382:	2b02      	cmp	r3, #2
 8005384:	d15e      	bne.n	8005444 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005386:	4b09      	ldr	r3, [pc, #36]	@ (80053ac <HAL_RCC_OscConfig+0x4b8>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a08      	ldr	r2, [pc, #32]	@ (80053ac <HAL_RCC_OscConfig+0x4b8>)
 800538c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005390:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005392:	f7fd fc31 	bl	8002bf8 <HAL_GetTick>
 8005396:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005398:	e00c      	b.n	80053b4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800539a:	f7fd fc2d 	bl	8002bf8 <HAL_GetTick>
 800539e:	4602      	mov	r2, r0
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	2b02      	cmp	r3, #2
 80053a6:	d905      	bls.n	80053b4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80053a8:	2303      	movs	r3, #3
 80053aa:	e0ab      	b.n	8005504 <HAL_RCC_OscConfig+0x610>
 80053ac:	40021000 	.word	0x40021000
 80053b0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053b4:	4b55      	ldr	r3, [pc, #340]	@ (800550c <HAL_RCC_OscConfig+0x618>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d1ec      	bne.n	800539a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053c0:	4b52      	ldr	r3, [pc, #328]	@ (800550c <HAL_RCC_OscConfig+0x618>)
 80053c2:	68da      	ldr	r2, [r3, #12]
 80053c4:	4b52      	ldr	r3, [pc, #328]	@ (8005510 <HAL_RCC_OscConfig+0x61c>)
 80053c6:	4013      	ands	r3, r2
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	6a11      	ldr	r1, [r2, #32]
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80053d0:	3a01      	subs	r2, #1
 80053d2:	0112      	lsls	r2, r2, #4
 80053d4:	4311      	orrs	r1, r2
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80053da:	0212      	lsls	r2, r2, #8
 80053dc:	4311      	orrs	r1, r2
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80053e2:	0852      	lsrs	r2, r2, #1
 80053e4:	3a01      	subs	r2, #1
 80053e6:	0552      	lsls	r2, r2, #21
 80053e8:	4311      	orrs	r1, r2
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80053ee:	0852      	lsrs	r2, r2, #1
 80053f0:	3a01      	subs	r2, #1
 80053f2:	0652      	lsls	r2, r2, #25
 80053f4:	4311      	orrs	r1, r2
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80053fa:	06d2      	lsls	r2, r2, #27
 80053fc:	430a      	orrs	r2, r1
 80053fe:	4943      	ldr	r1, [pc, #268]	@ (800550c <HAL_RCC_OscConfig+0x618>)
 8005400:	4313      	orrs	r3, r2
 8005402:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005404:	4b41      	ldr	r3, [pc, #260]	@ (800550c <HAL_RCC_OscConfig+0x618>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a40      	ldr	r2, [pc, #256]	@ (800550c <HAL_RCC_OscConfig+0x618>)
 800540a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800540e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005410:	4b3e      	ldr	r3, [pc, #248]	@ (800550c <HAL_RCC_OscConfig+0x618>)
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	4a3d      	ldr	r2, [pc, #244]	@ (800550c <HAL_RCC_OscConfig+0x618>)
 8005416:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800541a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800541c:	f7fd fbec 	bl	8002bf8 <HAL_GetTick>
 8005420:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005422:	e008      	b.n	8005436 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005424:	f7fd fbe8 	bl	8002bf8 <HAL_GetTick>
 8005428:	4602      	mov	r2, r0
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	2b02      	cmp	r3, #2
 8005430:	d901      	bls.n	8005436 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e066      	b.n	8005504 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005436:	4b35      	ldr	r3, [pc, #212]	@ (800550c <HAL_RCC_OscConfig+0x618>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d0f0      	beq.n	8005424 <HAL_RCC_OscConfig+0x530>
 8005442:	e05e      	b.n	8005502 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005444:	4b31      	ldr	r3, [pc, #196]	@ (800550c <HAL_RCC_OscConfig+0x618>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a30      	ldr	r2, [pc, #192]	@ (800550c <HAL_RCC_OscConfig+0x618>)
 800544a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800544e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005450:	f7fd fbd2 	bl	8002bf8 <HAL_GetTick>
 8005454:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005456:	e008      	b.n	800546a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005458:	f7fd fbce 	bl	8002bf8 <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	2b02      	cmp	r3, #2
 8005464:	d901      	bls.n	800546a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e04c      	b.n	8005504 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800546a:	4b28      	ldr	r3, [pc, #160]	@ (800550c <HAL_RCC_OscConfig+0x618>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1f0      	bne.n	8005458 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005476:	4b25      	ldr	r3, [pc, #148]	@ (800550c <HAL_RCC_OscConfig+0x618>)
 8005478:	68da      	ldr	r2, [r3, #12]
 800547a:	4924      	ldr	r1, [pc, #144]	@ (800550c <HAL_RCC_OscConfig+0x618>)
 800547c:	4b25      	ldr	r3, [pc, #148]	@ (8005514 <HAL_RCC_OscConfig+0x620>)
 800547e:	4013      	ands	r3, r2
 8005480:	60cb      	str	r3, [r1, #12]
 8005482:	e03e      	b.n	8005502 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	69db      	ldr	r3, [r3, #28]
 8005488:	2b01      	cmp	r3, #1
 800548a:	d101      	bne.n	8005490 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e039      	b.n	8005504 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005490:	4b1e      	ldr	r3, [pc, #120]	@ (800550c <HAL_RCC_OscConfig+0x618>)
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	f003 0203 	and.w	r2, r3, #3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a1b      	ldr	r3, [r3, #32]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d12c      	bne.n	80054fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ae:	3b01      	subs	r3, #1
 80054b0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d123      	bne.n	80054fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054c0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d11b      	bne.n	80054fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054d0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d113      	bne.n	80054fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054e0:	085b      	lsrs	r3, r3, #1
 80054e2:	3b01      	subs	r3, #1
 80054e4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d109      	bne.n	80054fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054f4:	085b      	lsrs	r3, r3, #1
 80054f6:	3b01      	subs	r3, #1
 80054f8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d001      	beq.n	8005502 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e000      	b.n	8005504 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	3720      	adds	r7, #32
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	40021000 	.word	0x40021000
 8005510:	019f800c 	.word	0x019f800c
 8005514:	feeefffc 	.word	0xfeeefffc

08005518 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b086      	sub	sp, #24
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005522:	2300      	movs	r3, #0
 8005524:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d101      	bne.n	8005530 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e11e      	b.n	800576e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005530:	4b91      	ldr	r3, [pc, #580]	@ (8005778 <HAL_RCC_ClockConfig+0x260>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 030f 	and.w	r3, r3, #15
 8005538:	683a      	ldr	r2, [r7, #0]
 800553a:	429a      	cmp	r2, r3
 800553c:	d910      	bls.n	8005560 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800553e:	4b8e      	ldr	r3, [pc, #568]	@ (8005778 <HAL_RCC_ClockConfig+0x260>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f023 020f 	bic.w	r2, r3, #15
 8005546:	498c      	ldr	r1, [pc, #560]	@ (8005778 <HAL_RCC_ClockConfig+0x260>)
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	4313      	orrs	r3, r2
 800554c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800554e:	4b8a      	ldr	r3, [pc, #552]	@ (8005778 <HAL_RCC_ClockConfig+0x260>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 030f 	and.w	r3, r3, #15
 8005556:	683a      	ldr	r2, [r7, #0]
 8005558:	429a      	cmp	r2, r3
 800555a:	d001      	beq.n	8005560 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e106      	b.n	800576e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 0301 	and.w	r3, r3, #1
 8005568:	2b00      	cmp	r3, #0
 800556a:	d073      	beq.n	8005654 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	2b03      	cmp	r3, #3
 8005572:	d129      	bne.n	80055c8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005574:	4b81      	ldr	r3, [pc, #516]	@ (800577c <HAL_RCC_ClockConfig+0x264>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800557c:	2b00      	cmp	r3, #0
 800557e:	d101      	bne.n	8005584 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e0f4      	b.n	800576e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005584:	f000 f99e 	bl	80058c4 <RCC_GetSysClockFreqFromPLLSource>
 8005588:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	4a7c      	ldr	r2, [pc, #496]	@ (8005780 <HAL_RCC_ClockConfig+0x268>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d93f      	bls.n	8005612 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005592:	4b7a      	ldr	r3, [pc, #488]	@ (800577c <HAL_RCC_ClockConfig+0x264>)
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d009      	beq.n	80055b2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d033      	beq.n	8005612 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d12f      	bne.n	8005612 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80055b2:	4b72      	ldr	r3, [pc, #456]	@ (800577c <HAL_RCC_ClockConfig+0x264>)
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80055ba:	4a70      	ldr	r2, [pc, #448]	@ (800577c <HAL_RCC_ClockConfig+0x264>)
 80055bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055c0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80055c2:	2380      	movs	r3, #128	@ 0x80
 80055c4:	617b      	str	r3, [r7, #20]
 80055c6:	e024      	b.n	8005612 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	2b02      	cmp	r3, #2
 80055ce:	d107      	bne.n	80055e0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055d0:	4b6a      	ldr	r3, [pc, #424]	@ (800577c <HAL_RCC_ClockConfig+0x264>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d109      	bne.n	80055f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e0c6      	b.n	800576e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055e0:	4b66      	ldr	r3, [pc, #408]	@ (800577c <HAL_RCC_ClockConfig+0x264>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d101      	bne.n	80055f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e0be      	b.n	800576e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80055f0:	f000 f8ce 	bl	8005790 <HAL_RCC_GetSysClockFreq>
 80055f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	4a61      	ldr	r2, [pc, #388]	@ (8005780 <HAL_RCC_ClockConfig+0x268>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d909      	bls.n	8005612 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80055fe:	4b5f      	ldr	r3, [pc, #380]	@ (800577c <HAL_RCC_ClockConfig+0x264>)
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005606:	4a5d      	ldr	r2, [pc, #372]	@ (800577c <HAL_RCC_ClockConfig+0x264>)
 8005608:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800560c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800560e:	2380      	movs	r3, #128	@ 0x80
 8005610:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005612:	4b5a      	ldr	r3, [pc, #360]	@ (800577c <HAL_RCC_ClockConfig+0x264>)
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	f023 0203 	bic.w	r2, r3, #3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	4957      	ldr	r1, [pc, #348]	@ (800577c <HAL_RCC_ClockConfig+0x264>)
 8005620:	4313      	orrs	r3, r2
 8005622:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005624:	f7fd fae8 	bl	8002bf8 <HAL_GetTick>
 8005628:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800562a:	e00a      	b.n	8005642 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800562c:	f7fd fae4 	bl	8002bf8 <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	f241 3288 	movw	r2, #5000	@ 0x1388
 800563a:	4293      	cmp	r3, r2
 800563c:	d901      	bls.n	8005642 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e095      	b.n	800576e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005642:	4b4e      	ldr	r3, [pc, #312]	@ (800577c <HAL_RCC_ClockConfig+0x264>)
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	f003 020c 	and.w	r2, r3, #12
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	429a      	cmp	r2, r3
 8005652:	d1eb      	bne.n	800562c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0302 	and.w	r3, r3, #2
 800565c:	2b00      	cmp	r3, #0
 800565e:	d023      	beq.n	80056a8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 0304 	and.w	r3, r3, #4
 8005668:	2b00      	cmp	r3, #0
 800566a:	d005      	beq.n	8005678 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800566c:	4b43      	ldr	r3, [pc, #268]	@ (800577c <HAL_RCC_ClockConfig+0x264>)
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	4a42      	ldr	r2, [pc, #264]	@ (800577c <HAL_RCC_ClockConfig+0x264>)
 8005672:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005676:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0308 	and.w	r3, r3, #8
 8005680:	2b00      	cmp	r3, #0
 8005682:	d007      	beq.n	8005694 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005684:	4b3d      	ldr	r3, [pc, #244]	@ (800577c <HAL_RCC_ClockConfig+0x264>)
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800568c:	4a3b      	ldr	r2, [pc, #236]	@ (800577c <HAL_RCC_ClockConfig+0x264>)
 800568e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005692:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005694:	4b39      	ldr	r3, [pc, #228]	@ (800577c <HAL_RCC_ClockConfig+0x264>)
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	4936      	ldr	r1, [pc, #216]	@ (800577c <HAL_RCC_ClockConfig+0x264>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	608b      	str	r3, [r1, #8]
 80056a6:	e008      	b.n	80056ba <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	2b80      	cmp	r3, #128	@ 0x80
 80056ac:	d105      	bne.n	80056ba <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80056ae:	4b33      	ldr	r3, [pc, #204]	@ (800577c <HAL_RCC_ClockConfig+0x264>)
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	4a32      	ldr	r2, [pc, #200]	@ (800577c <HAL_RCC_ClockConfig+0x264>)
 80056b4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80056b8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80056ba:	4b2f      	ldr	r3, [pc, #188]	@ (8005778 <HAL_RCC_ClockConfig+0x260>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 030f 	and.w	r3, r3, #15
 80056c2:	683a      	ldr	r2, [r7, #0]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d21d      	bcs.n	8005704 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056c8:	4b2b      	ldr	r3, [pc, #172]	@ (8005778 <HAL_RCC_ClockConfig+0x260>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f023 020f 	bic.w	r2, r3, #15
 80056d0:	4929      	ldr	r1, [pc, #164]	@ (8005778 <HAL_RCC_ClockConfig+0x260>)
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80056d8:	f7fd fa8e 	bl	8002bf8 <HAL_GetTick>
 80056dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056de:	e00a      	b.n	80056f6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056e0:	f7fd fa8a 	bl	8002bf8 <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d901      	bls.n	80056f6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80056f2:	2303      	movs	r3, #3
 80056f4:	e03b      	b.n	800576e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056f6:	4b20      	ldr	r3, [pc, #128]	@ (8005778 <HAL_RCC_ClockConfig+0x260>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 030f 	and.w	r3, r3, #15
 80056fe:	683a      	ldr	r2, [r7, #0]
 8005700:	429a      	cmp	r2, r3
 8005702:	d1ed      	bne.n	80056e0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0304 	and.w	r3, r3, #4
 800570c:	2b00      	cmp	r3, #0
 800570e:	d008      	beq.n	8005722 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005710:	4b1a      	ldr	r3, [pc, #104]	@ (800577c <HAL_RCC_ClockConfig+0x264>)
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	4917      	ldr	r1, [pc, #92]	@ (800577c <HAL_RCC_ClockConfig+0x264>)
 800571e:	4313      	orrs	r3, r2
 8005720:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 0308 	and.w	r3, r3, #8
 800572a:	2b00      	cmp	r3, #0
 800572c:	d009      	beq.n	8005742 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800572e:	4b13      	ldr	r3, [pc, #76]	@ (800577c <HAL_RCC_ClockConfig+0x264>)
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	00db      	lsls	r3, r3, #3
 800573c:	490f      	ldr	r1, [pc, #60]	@ (800577c <HAL_RCC_ClockConfig+0x264>)
 800573e:	4313      	orrs	r3, r2
 8005740:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005742:	f000 f825 	bl	8005790 <HAL_RCC_GetSysClockFreq>
 8005746:	4602      	mov	r2, r0
 8005748:	4b0c      	ldr	r3, [pc, #48]	@ (800577c <HAL_RCC_ClockConfig+0x264>)
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	091b      	lsrs	r3, r3, #4
 800574e:	f003 030f 	and.w	r3, r3, #15
 8005752:	490c      	ldr	r1, [pc, #48]	@ (8005784 <HAL_RCC_ClockConfig+0x26c>)
 8005754:	5ccb      	ldrb	r3, [r1, r3]
 8005756:	f003 031f 	and.w	r3, r3, #31
 800575a:	fa22 f303 	lsr.w	r3, r2, r3
 800575e:	4a0a      	ldr	r2, [pc, #40]	@ (8005788 <HAL_RCC_ClockConfig+0x270>)
 8005760:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005762:	4b0a      	ldr	r3, [pc, #40]	@ (800578c <HAL_RCC_ClockConfig+0x274>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4618      	mov	r0, r3
 8005768:	f7fd f9fa 	bl	8002b60 <HAL_InitTick>
 800576c:	4603      	mov	r3, r0
}
 800576e:	4618      	mov	r0, r3
 8005770:	3718      	adds	r7, #24
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	40022000 	.word	0x40022000
 800577c:	40021000 	.word	0x40021000
 8005780:	04c4b400 	.word	0x04c4b400
 8005784:	0800ab74 	.word	0x0800ab74
 8005788:	20000200 	.word	0x20000200
 800578c:	20000204 	.word	0x20000204

08005790 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005790:	b480      	push	{r7}
 8005792:	b087      	sub	sp, #28
 8005794:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005796:	4b2c      	ldr	r3, [pc, #176]	@ (8005848 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	f003 030c 	and.w	r3, r3, #12
 800579e:	2b04      	cmp	r3, #4
 80057a0:	d102      	bne.n	80057a8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80057a2:	4b2a      	ldr	r3, [pc, #168]	@ (800584c <HAL_RCC_GetSysClockFreq+0xbc>)
 80057a4:	613b      	str	r3, [r7, #16]
 80057a6:	e047      	b.n	8005838 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80057a8:	4b27      	ldr	r3, [pc, #156]	@ (8005848 <HAL_RCC_GetSysClockFreq+0xb8>)
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	f003 030c 	and.w	r3, r3, #12
 80057b0:	2b08      	cmp	r3, #8
 80057b2:	d102      	bne.n	80057ba <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80057b4:	4b26      	ldr	r3, [pc, #152]	@ (8005850 <HAL_RCC_GetSysClockFreq+0xc0>)
 80057b6:	613b      	str	r3, [r7, #16]
 80057b8:	e03e      	b.n	8005838 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80057ba:	4b23      	ldr	r3, [pc, #140]	@ (8005848 <HAL_RCC_GetSysClockFreq+0xb8>)
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	f003 030c 	and.w	r3, r3, #12
 80057c2:	2b0c      	cmp	r3, #12
 80057c4:	d136      	bne.n	8005834 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80057c6:	4b20      	ldr	r3, [pc, #128]	@ (8005848 <HAL_RCC_GetSysClockFreq+0xb8>)
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	f003 0303 	and.w	r3, r3, #3
 80057ce:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80057d0:	4b1d      	ldr	r3, [pc, #116]	@ (8005848 <HAL_RCC_GetSysClockFreq+0xb8>)
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	091b      	lsrs	r3, r3, #4
 80057d6:	f003 030f 	and.w	r3, r3, #15
 80057da:	3301      	adds	r3, #1
 80057dc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2b03      	cmp	r3, #3
 80057e2:	d10c      	bne.n	80057fe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80057e4:	4a1a      	ldr	r2, [pc, #104]	@ (8005850 <HAL_RCC_GetSysClockFreq+0xc0>)
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ec:	4a16      	ldr	r2, [pc, #88]	@ (8005848 <HAL_RCC_GetSysClockFreq+0xb8>)
 80057ee:	68d2      	ldr	r2, [r2, #12]
 80057f0:	0a12      	lsrs	r2, r2, #8
 80057f2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80057f6:	fb02 f303 	mul.w	r3, r2, r3
 80057fa:	617b      	str	r3, [r7, #20]
      break;
 80057fc:	e00c      	b.n	8005818 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80057fe:	4a13      	ldr	r2, [pc, #76]	@ (800584c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	fbb2 f3f3 	udiv	r3, r2, r3
 8005806:	4a10      	ldr	r2, [pc, #64]	@ (8005848 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005808:	68d2      	ldr	r2, [r2, #12]
 800580a:	0a12      	lsrs	r2, r2, #8
 800580c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005810:	fb02 f303 	mul.w	r3, r2, r3
 8005814:	617b      	str	r3, [r7, #20]
      break;
 8005816:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005818:	4b0b      	ldr	r3, [pc, #44]	@ (8005848 <HAL_RCC_GetSysClockFreq+0xb8>)
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	0e5b      	lsrs	r3, r3, #25
 800581e:	f003 0303 	and.w	r3, r3, #3
 8005822:	3301      	adds	r3, #1
 8005824:	005b      	lsls	r3, r3, #1
 8005826:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005828:	697a      	ldr	r2, [r7, #20]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005830:	613b      	str	r3, [r7, #16]
 8005832:	e001      	b.n	8005838 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005834:	2300      	movs	r3, #0
 8005836:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005838:	693b      	ldr	r3, [r7, #16]
}
 800583a:	4618      	mov	r0, r3
 800583c:	371c      	adds	r7, #28
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
 8005846:	bf00      	nop
 8005848:	40021000 	.word	0x40021000
 800584c:	00f42400 	.word	0x00f42400
 8005850:	016e3600 	.word	0x016e3600

08005854 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005854:	b480      	push	{r7}
 8005856:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005858:	4b03      	ldr	r3, [pc, #12]	@ (8005868 <HAL_RCC_GetHCLKFreq+0x14>)
 800585a:	681b      	ldr	r3, [r3, #0]
}
 800585c:	4618      	mov	r0, r3
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop
 8005868:	20000200 	.word	0x20000200

0800586c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005870:	f7ff fff0 	bl	8005854 <HAL_RCC_GetHCLKFreq>
 8005874:	4602      	mov	r2, r0
 8005876:	4b06      	ldr	r3, [pc, #24]	@ (8005890 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	0a1b      	lsrs	r3, r3, #8
 800587c:	f003 0307 	and.w	r3, r3, #7
 8005880:	4904      	ldr	r1, [pc, #16]	@ (8005894 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005882:	5ccb      	ldrb	r3, [r1, r3]
 8005884:	f003 031f 	and.w	r3, r3, #31
 8005888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800588c:	4618      	mov	r0, r3
 800588e:	bd80      	pop	{r7, pc}
 8005890:	40021000 	.word	0x40021000
 8005894:	0800ab84 	.word	0x0800ab84

08005898 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800589c:	f7ff ffda 	bl	8005854 <HAL_RCC_GetHCLKFreq>
 80058a0:	4602      	mov	r2, r0
 80058a2:	4b06      	ldr	r3, [pc, #24]	@ (80058bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	0adb      	lsrs	r3, r3, #11
 80058a8:	f003 0307 	and.w	r3, r3, #7
 80058ac:	4904      	ldr	r1, [pc, #16]	@ (80058c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80058ae:	5ccb      	ldrb	r3, [r1, r3]
 80058b0:	f003 031f 	and.w	r3, r3, #31
 80058b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	40021000 	.word	0x40021000
 80058c0:	0800ab84 	.word	0x0800ab84

080058c4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b087      	sub	sp, #28
 80058c8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80058ca:	4b1e      	ldr	r3, [pc, #120]	@ (8005944 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	f003 0303 	and.w	r3, r3, #3
 80058d2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80058d4:	4b1b      	ldr	r3, [pc, #108]	@ (8005944 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	091b      	lsrs	r3, r3, #4
 80058da:	f003 030f 	and.w	r3, r3, #15
 80058de:	3301      	adds	r3, #1
 80058e0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	2b03      	cmp	r3, #3
 80058e6:	d10c      	bne.n	8005902 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80058e8:	4a17      	ldr	r2, [pc, #92]	@ (8005948 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f0:	4a14      	ldr	r2, [pc, #80]	@ (8005944 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80058f2:	68d2      	ldr	r2, [r2, #12]
 80058f4:	0a12      	lsrs	r2, r2, #8
 80058f6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80058fa:	fb02 f303 	mul.w	r3, r2, r3
 80058fe:	617b      	str	r3, [r7, #20]
    break;
 8005900:	e00c      	b.n	800591c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005902:	4a12      	ldr	r2, [pc, #72]	@ (800594c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	fbb2 f3f3 	udiv	r3, r2, r3
 800590a:	4a0e      	ldr	r2, [pc, #56]	@ (8005944 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800590c:	68d2      	ldr	r2, [r2, #12]
 800590e:	0a12      	lsrs	r2, r2, #8
 8005910:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005914:	fb02 f303 	mul.w	r3, r2, r3
 8005918:	617b      	str	r3, [r7, #20]
    break;
 800591a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800591c:	4b09      	ldr	r3, [pc, #36]	@ (8005944 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	0e5b      	lsrs	r3, r3, #25
 8005922:	f003 0303 	and.w	r3, r3, #3
 8005926:	3301      	adds	r3, #1
 8005928:	005b      	lsls	r3, r3, #1
 800592a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800592c:	697a      	ldr	r2, [r7, #20]
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	fbb2 f3f3 	udiv	r3, r2, r3
 8005934:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005936:	687b      	ldr	r3, [r7, #4]
}
 8005938:	4618      	mov	r0, r3
 800593a:	371c      	adds	r7, #28
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr
 8005944:	40021000 	.word	0x40021000
 8005948:	016e3600 	.word	0x016e3600
 800594c:	00f42400 	.word	0x00f42400

08005950 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b086      	sub	sp, #24
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005958:	2300      	movs	r3, #0
 800595a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800595c:	2300      	movs	r3, #0
 800595e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005968:	2b00      	cmp	r3, #0
 800596a:	f000 8098 	beq.w	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800596e:	2300      	movs	r3, #0
 8005970:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005972:	4b43      	ldr	r3, [pc, #268]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005976:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800597a:	2b00      	cmp	r3, #0
 800597c:	d10d      	bne.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800597e:	4b40      	ldr	r3, [pc, #256]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005982:	4a3f      	ldr	r2, [pc, #252]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005984:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005988:	6593      	str	r3, [r2, #88]	@ 0x58
 800598a:	4b3d      	ldr	r3, [pc, #244]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800598c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800598e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005992:	60bb      	str	r3, [r7, #8]
 8005994:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005996:	2301      	movs	r3, #1
 8005998:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800599a:	4b3a      	ldr	r3, [pc, #232]	@ (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a39      	ldr	r2, [pc, #228]	@ (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80059a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80059a6:	f7fd f927 	bl	8002bf8 <HAL_GetTick>
 80059aa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80059ac:	e009      	b.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059ae:	f7fd f923 	bl	8002bf8 <HAL_GetTick>
 80059b2:	4602      	mov	r2, r0
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	d902      	bls.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	74fb      	strb	r3, [r7, #19]
        break;
 80059c0:	e005      	b.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80059c2:	4b30      	ldr	r3, [pc, #192]	@ (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d0ef      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80059ce:	7cfb      	ldrb	r3, [r7, #19]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d159      	bne.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80059d4:	4b2a      	ldr	r3, [pc, #168]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059de:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d01e      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059ea:	697a      	ldr	r2, [r7, #20]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d019      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80059f0:	4b23      	ldr	r3, [pc, #140]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059fa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80059fc:	4b20      	ldr	r3, [pc, #128]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a02:	4a1f      	ldr	r2, [pc, #124]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005a0c:	4b1c      	ldr	r3, [pc, #112]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a12:	4a1b      	ldr	r2, [pc, #108]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005a1c:	4a18      	ldr	r2, [pc, #96]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	f003 0301 	and.w	r3, r3, #1
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d016      	beq.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a2e:	f7fd f8e3 	bl	8002bf8 <HAL_GetTick>
 8005a32:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a34:	e00b      	b.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a36:	f7fd f8df 	bl	8002bf8 <HAL_GetTick>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d902      	bls.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	74fb      	strb	r3, [r7, #19]
            break;
 8005a4c:	e006      	b.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a4e:	4b0c      	ldr	r3, [pc, #48]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a54:	f003 0302 	and.w	r3, r3, #2
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d0ec      	beq.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005a5c:	7cfb      	ldrb	r3, [r7, #19]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d10b      	bne.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a62:	4b07      	ldr	r3, [pc, #28]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a70:	4903      	ldr	r1, [pc, #12]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a72:	4313      	orrs	r3, r2
 8005a74:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005a78:	e008      	b.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a7a:	7cfb      	ldrb	r3, [r7, #19]
 8005a7c:	74bb      	strb	r3, [r7, #18]
 8005a7e:	e005      	b.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005a80:	40021000 	.word	0x40021000
 8005a84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a88:	7cfb      	ldrb	r3, [r7, #19]
 8005a8a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a8c:	7c7b      	ldrb	r3, [r7, #17]
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d105      	bne.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a92:	4ba7      	ldr	r3, [pc, #668]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a96:	4aa6      	ldr	r2, [pc, #664]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a9c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 0301 	and.w	r3, r3, #1
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00a      	beq.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005aaa:	4ba1      	ldr	r3, [pc, #644]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ab0:	f023 0203 	bic.w	r2, r3, #3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	499d      	ldr	r1, [pc, #628]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005aba:	4313      	orrs	r3, r2
 8005abc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 0302 	and.w	r3, r3, #2
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d00a      	beq.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005acc:	4b98      	ldr	r3, [pc, #608]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ad2:	f023 020c 	bic.w	r2, r3, #12
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	4995      	ldr	r1, [pc, #596]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005adc:	4313      	orrs	r3, r2
 8005ade:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 0304 	and.w	r3, r3, #4
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00a      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005aee:	4b90      	ldr	r3, [pc, #576]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005af4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	498c      	ldr	r1, [pc, #560]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005afe:	4313      	orrs	r3, r2
 8005b00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0308 	and.w	r3, r3, #8
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d00a      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005b10:	4b87      	ldr	r3, [pc, #540]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b16:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	4984      	ldr	r1, [pc, #528]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b20:	4313      	orrs	r3, r2
 8005b22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0310 	and.w	r3, r3, #16
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00a      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005b32:	4b7f      	ldr	r3, [pc, #508]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b38:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	695b      	ldr	r3, [r3, #20]
 8005b40:	497b      	ldr	r1, [pc, #492]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b42:	4313      	orrs	r3, r2
 8005b44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 0320 	and.w	r3, r3, #32
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d00a      	beq.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005b54:	4b76      	ldr	r3, [pc, #472]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b5a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	4973      	ldr	r1, [pc, #460]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b64:	4313      	orrs	r3, r2
 8005b66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d00a      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b76:	4b6e      	ldr	r3, [pc, #440]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b7c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	69db      	ldr	r3, [r3, #28]
 8005b84:	496a      	ldr	r1, [pc, #424]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b86:	4313      	orrs	r3, r2
 8005b88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d00a      	beq.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005b98:	4b65      	ldr	r3, [pc, #404]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b9e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a1b      	ldr	r3, [r3, #32]
 8005ba6:	4962      	ldr	r1, [pc, #392]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00a      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005bba:	4b5d      	ldr	r3, [pc, #372]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bc0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bc8:	4959      	ldr	r1, [pc, #356]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d00a      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005bdc:	4b54      	ldr	r3, [pc, #336]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bde:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005be2:	f023 0203 	bic.w	r2, r3, #3
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bea:	4951      	ldr	r1, [pc, #324]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bec:	4313      	orrs	r3, r2
 8005bee:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d00a      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005bfe:	4b4c      	ldr	r3, [pc, #304]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c04:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c0c:	4948      	ldr	r1, [pc, #288]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d015      	beq.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c20:	4b43      	ldr	r3, [pc, #268]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c26:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c2e:	4940      	ldr	r1, [pc, #256]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c30:	4313      	orrs	r3, r2
 8005c32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c3e:	d105      	bne.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c40:	4b3b      	ldr	r3, [pc, #236]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	4a3a      	ldr	r2, [pc, #232]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c4a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d015      	beq.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005c58:	4b35      	ldr	r3, [pc, #212]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c5e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c66:	4932      	ldr	r1, [pc, #200]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c72:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c76:	d105      	bne.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c78:	4b2d      	ldr	r3, [pc, #180]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	4a2c      	ldr	r2, [pc, #176]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c82:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d015      	beq.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005c90:	4b27      	ldr	r3, [pc, #156]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c96:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c9e:	4924      	ldr	r1, [pc, #144]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005caa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005cae:	d105      	bne.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005cb0:	4b1f      	ldr	r3, [pc, #124]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	4a1e      	ldr	r2, [pc, #120]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005cba:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d015      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005cc8:	4b19      	ldr	r3, [pc, #100]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cd6:	4916      	ldr	r1, [pc, #88]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ce2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ce6:	d105      	bne.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ce8:	4b11      	ldr	r3, [pc, #68]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	4a10      	ldr	r2, [pc, #64]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005cf2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d019      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005d00:	4b0b      	ldr	r3, [pc, #44]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d06:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d0e:	4908      	ldr	r1, [pc, #32]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d10:	4313      	orrs	r3, r2
 8005d12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d1e:	d109      	bne.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d20:	4b03      	ldr	r3, [pc, #12]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	4a02      	ldr	r2, [pc, #8]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d2a:	60d3      	str	r3, [r2, #12]
 8005d2c:	e002      	b.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005d2e:	bf00      	nop
 8005d30:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d015      	beq.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005d40:	4b29      	ldr	r3, [pc, #164]	@ (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d46:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d4e:	4926      	ldr	r1, [pc, #152]	@ (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d50:	4313      	orrs	r3, r2
 8005d52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d5e:	d105      	bne.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005d60:	4b21      	ldr	r3, [pc, #132]	@ (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	4a20      	ldr	r2, [pc, #128]	@ (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d6a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d015      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005d78:	4b1b      	ldr	r3, [pc, #108]	@ (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d7e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d86:	4918      	ldr	r1, [pc, #96]	@ (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d96:	d105      	bne.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005d98:	4b13      	ldr	r3, [pc, #76]	@ (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	4a12      	ldr	r2, [pc, #72]	@ (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005da2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d015      	beq.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005db0:	4b0d      	ldr	r3, [pc, #52]	@ (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005db2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005db6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dbe:	490a      	ldr	r1, [pc, #40]	@ (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005dce:	d105      	bne.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005dd0:	4b05      	ldr	r3, [pc, #20]	@ (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	4a04      	ldr	r2, [pc, #16]	@ (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005dd6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005dda:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005ddc:	7cbb      	ldrb	r3, [r7, #18]
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3718      	adds	r7, #24
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	40021000 	.word	0x40021000

08005dec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b082      	sub	sp, #8
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d101      	bne.n	8005dfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e054      	b.n	8005ea8 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d111      	bne.n	8005e2e <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f001 ffd4 	bl	8007dc0 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d102      	bne.n	8005e26 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a23      	ldr	r2, [pc, #140]	@ (8005eb0 <HAL_TIM_Base_Init+0xc4>)
 8005e24:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2202      	movs	r2, #2
 8005e32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	3304      	adds	r3, #4
 8005e3e:	4619      	mov	r1, r3
 8005e40:	4610      	mov	r0, r2
 8005e42:	f001 fb1d 	bl	8007480 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2201      	movs	r2, #1
 8005e62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2201      	movs	r2, #1
 8005e72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2201      	movs	r2, #1
 8005e82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2201      	movs	r2, #1
 8005e92:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3708      	adds	r7, #8
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	08002595 	.word	0x08002595

08005eb4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b085      	sub	sp, #20
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d001      	beq.n	8005ecc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e04c      	b.n	8005f66 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2202      	movs	r2, #2
 8005ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a26      	ldr	r2, [pc, #152]	@ (8005f74 <HAL_TIM_Base_Start+0xc0>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d022      	beq.n	8005f24 <HAL_TIM_Base_Start+0x70>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ee6:	d01d      	beq.n	8005f24 <HAL_TIM_Base_Start+0x70>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a22      	ldr	r2, [pc, #136]	@ (8005f78 <HAL_TIM_Base_Start+0xc4>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d018      	beq.n	8005f24 <HAL_TIM_Base_Start+0x70>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a21      	ldr	r2, [pc, #132]	@ (8005f7c <HAL_TIM_Base_Start+0xc8>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d013      	beq.n	8005f24 <HAL_TIM_Base_Start+0x70>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a1f      	ldr	r2, [pc, #124]	@ (8005f80 <HAL_TIM_Base_Start+0xcc>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d00e      	beq.n	8005f24 <HAL_TIM_Base_Start+0x70>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a1e      	ldr	r2, [pc, #120]	@ (8005f84 <HAL_TIM_Base_Start+0xd0>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d009      	beq.n	8005f24 <HAL_TIM_Base_Start+0x70>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a1c      	ldr	r2, [pc, #112]	@ (8005f88 <HAL_TIM_Base_Start+0xd4>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d004      	beq.n	8005f24 <HAL_TIM_Base_Start+0x70>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a1b      	ldr	r2, [pc, #108]	@ (8005f8c <HAL_TIM_Base_Start+0xd8>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d115      	bne.n	8005f50 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	689a      	ldr	r2, [r3, #8]
 8005f2a:	4b19      	ldr	r3, [pc, #100]	@ (8005f90 <HAL_TIM_Base_Start+0xdc>)
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2b06      	cmp	r3, #6
 8005f34:	d015      	beq.n	8005f62 <HAL_TIM_Base_Start+0xae>
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f3c:	d011      	beq.n	8005f62 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f042 0201 	orr.w	r2, r2, #1
 8005f4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f4e:	e008      	b.n	8005f62 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f042 0201 	orr.w	r2, r2, #1
 8005f5e:	601a      	str	r2, [r3, #0]
 8005f60:	e000      	b.n	8005f64 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3714      	adds	r7, #20
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr
 8005f72:	bf00      	nop
 8005f74:	40012c00 	.word	0x40012c00
 8005f78:	40000400 	.word	0x40000400
 8005f7c:	40000800 	.word	0x40000800
 8005f80:	40000c00 	.word	0x40000c00
 8005f84:	40013400 	.word	0x40013400
 8005f88:	40014000 	.word	0x40014000
 8005f8c:	40015000 	.word	0x40015000
 8005f90:	00010007 	.word	0x00010007

08005f94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b085      	sub	sp, #20
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d001      	beq.n	8005fac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e054      	b.n	8006056 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2202      	movs	r2, #2
 8005fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	68da      	ldr	r2, [r3, #12]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f042 0201 	orr.w	r2, r2, #1
 8005fc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a26      	ldr	r2, [pc, #152]	@ (8006064 <HAL_TIM_Base_Start_IT+0xd0>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d022      	beq.n	8006014 <HAL_TIM_Base_Start_IT+0x80>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fd6:	d01d      	beq.n	8006014 <HAL_TIM_Base_Start_IT+0x80>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a22      	ldr	r2, [pc, #136]	@ (8006068 <HAL_TIM_Base_Start_IT+0xd4>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d018      	beq.n	8006014 <HAL_TIM_Base_Start_IT+0x80>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a21      	ldr	r2, [pc, #132]	@ (800606c <HAL_TIM_Base_Start_IT+0xd8>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d013      	beq.n	8006014 <HAL_TIM_Base_Start_IT+0x80>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a1f      	ldr	r2, [pc, #124]	@ (8006070 <HAL_TIM_Base_Start_IT+0xdc>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d00e      	beq.n	8006014 <HAL_TIM_Base_Start_IT+0x80>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a1e      	ldr	r2, [pc, #120]	@ (8006074 <HAL_TIM_Base_Start_IT+0xe0>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d009      	beq.n	8006014 <HAL_TIM_Base_Start_IT+0x80>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a1c      	ldr	r2, [pc, #112]	@ (8006078 <HAL_TIM_Base_Start_IT+0xe4>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d004      	beq.n	8006014 <HAL_TIM_Base_Start_IT+0x80>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a1b      	ldr	r2, [pc, #108]	@ (800607c <HAL_TIM_Base_Start_IT+0xe8>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d115      	bne.n	8006040 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	689a      	ldr	r2, [r3, #8]
 800601a:	4b19      	ldr	r3, [pc, #100]	@ (8006080 <HAL_TIM_Base_Start_IT+0xec>)
 800601c:	4013      	ands	r3, r2
 800601e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2b06      	cmp	r3, #6
 8006024:	d015      	beq.n	8006052 <HAL_TIM_Base_Start_IT+0xbe>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800602c:	d011      	beq.n	8006052 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f042 0201 	orr.w	r2, r2, #1
 800603c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800603e:	e008      	b.n	8006052 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f042 0201 	orr.w	r2, r2, #1
 800604e:	601a      	str	r2, [r3, #0]
 8006050:	e000      	b.n	8006054 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006052:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	3714      	adds	r7, #20
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop
 8006064:	40012c00 	.word	0x40012c00
 8006068:	40000400 	.word	0x40000400
 800606c:	40000800 	.word	0x40000800
 8006070:	40000c00 	.word	0x40000c00
 8006074:	40013400 	.word	0x40013400
 8006078:	40014000 	.word	0x40014000
 800607c:	40015000 	.word	0x40015000
 8006080:	00010007 	.word	0x00010007

08006084 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d101      	bne.n	8006096 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e054      	b.n	8006140 <HAL_TIM_OC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800609c:	b2db      	uxtb	r3, r3
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d111      	bne.n	80060c6 <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f001 fe88 	bl	8007dc0 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d102      	bne.n	80060be <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	4a23      	ldr	r2, [pc, #140]	@ (8006148 <HAL_TIM_OC_Init+0xc4>)
 80060bc:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2202      	movs	r2, #2
 80060ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	3304      	adds	r3, #4
 80060d6:	4619      	mov	r1, r3
 80060d8:	4610      	mov	r0, r2
 80060da:	f001 f9d1 	bl	8007480 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2201      	movs	r2, #1
 80060e2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2201      	movs	r2, #1
 80060ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2201      	movs	r2, #1
 80060f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2201      	movs	r2, #1
 80060fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2201      	movs	r2, #1
 8006102:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2201      	movs	r2, #1
 800610a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2201      	movs	r2, #1
 8006112:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2201      	movs	r2, #1
 800611a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2201      	movs	r2, #1
 8006122:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2201      	movs	r2, #1
 800612a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2201      	movs	r2, #1
 8006132:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2201      	movs	r2, #1
 800613a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	3708      	adds	r7, #8
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	0800614d 	.word	0x0800614d

0800614c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006154:	bf00      	nop
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d101      	bne.n	8006172 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e054      	b.n	800621c <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006178:	b2db      	uxtb	r3, r3
 800617a:	2b00      	cmp	r3, #0
 800617c:	d111      	bne.n	80061a2 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f001 fe1a 	bl	8007dc0 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006190:	2b00      	cmp	r3, #0
 8006192:	d102      	bne.n	800619a <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4a23      	ldr	r2, [pc, #140]	@ (8006224 <HAL_TIM_PWM_Init+0xc4>)
 8006198:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2202      	movs	r2, #2
 80061a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	3304      	adds	r3, #4
 80061b2:	4619      	mov	r1, r3
 80061b4:	4610      	mov	r0, r2
 80061b6:	f001 f963 	bl	8007480 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2201      	movs	r2, #1
 80061be:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2201      	movs	r2, #1
 80061c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2201      	movs	r2, #1
 80061ce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2201      	movs	r2, #1
 80061d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2201      	movs	r2, #1
 80061de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2201      	movs	r2, #1
 80061e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2201      	movs	r2, #1
 80061ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2201      	movs	r2, #1
 80061f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2201      	movs	r2, #1
 80061fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2201      	movs	r2, #1
 8006206:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2201      	movs	r2, #1
 800620e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2201      	movs	r2, #1
 8006216:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800621a:	2300      	movs	r3, #0
}
 800621c:	4618      	mov	r0, r3
 800621e:	3708      	adds	r7, #8
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}
 8006224:	08006229 	.word	0x08006229

08006228 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006230:	bf00      	nop
 8006232:	370c      	adds	r7, #12
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr

0800623c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d109      	bne.n	8006260 <HAL_TIM_PWM_Start+0x24>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006252:	b2db      	uxtb	r3, r3
 8006254:	2b01      	cmp	r3, #1
 8006256:	bf14      	ite	ne
 8006258:	2301      	movne	r3, #1
 800625a:	2300      	moveq	r3, #0
 800625c:	b2db      	uxtb	r3, r3
 800625e:	e03c      	b.n	80062da <HAL_TIM_PWM_Start+0x9e>
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	2b04      	cmp	r3, #4
 8006264:	d109      	bne.n	800627a <HAL_TIM_PWM_Start+0x3e>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800626c:	b2db      	uxtb	r3, r3
 800626e:	2b01      	cmp	r3, #1
 8006270:	bf14      	ite	ne
 8006272:	2301      	movne	r3, #1
 8006274:	2300      	moveq	r3, #0
 8006276:	b2db      	uxtb	r3, r3
 8006278:	e02f      	b.n	80062da <HAL_TIM_PWM_Start+0x9e>
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	2b08      	cmp	r3, #8
 800627e:	d109      	bne.n	8006294 <HAL_TIM_PWM_Start+0x58>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006286:	b2db      	uxtb	r3, r3
 8006288:	2b01      	cmp	r3, #1
 800628a:	bf14      	ite	ne
 800628c:	2301      	movne	r3, #1
 800628e:	2300      	moveq	r3, #0
 8006290:	b2db      	uxtb	r3, r3
 8006292:	e022      	b.n	80062da <HAL_TIM_PWM_Start+0x9e>
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	2b0c      	cmp	r3, #12
 8006298:	d109      	bne.n	80062ae <HAL_TIM_PWM_Start+0x72>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	bf14      	ite	ne
 80062a6:	2301      	movne	r3, #1
 80062a8:	2300      	moveq	r3, #0
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	e015      	b.n	80062da <HAL_TIM_PWM_Start+0x9e>
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	2b10      	cmp	r3, #16
 80062b2:	d109      	bne.n	80062c8 <HAL_TIM_PWM_Start+0x8c>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	2b01      	cmp	r3, #1
 80062be:	bf14      	ite	ne
 80062c0:	2301      	movne	r3, #1
 80062c2:	2300      	moveq	r3, #0
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	e008      	b.n	80062da <HAL_TIM_PWM_Start+0x9e>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	bf14      	ite	ne
 80062d4:	2301      	movne	r3, #1
 80062d6:	2300      	moveq	r3, #0
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d001      	beq.n	80062e2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e0a6      	b.n	8006430 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d104      	bne.n	80062f2 <HAL_TIM_PWM_Start+0xb6>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2202      	movs	r2, #2
 80062ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80062f0:	e023      	b.n	800633a <HAL_TIM_PWM_Start+0xfe>
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	2b04      	cmp	r3, #4
 80062f6:	d104      	bne.n	8006302 <HAL_TIM_PWM_Start+0xc6>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2202      	movs	r2, #2
 80062fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006300:	e01b      	b.n	800633a <HAL_TIM_PWM_Start+0xfe>
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	2b08      	cmp	r3, #8
 8006306:	d104      	bne.n	8006312 <HAL_TIM_PWM_Start+0xd6>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2202      	movs	r2, #2
 800630c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006310:	e013      	b.n	800633a <HAL_TIM_PWM_Start+0xfe>
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	2b0c      	cmp	r3, #12
 8006316:	d104      	bne.n	8006322 <HAL_TIM_PWM_Start+0xe6>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2202      	movs	r2, #2
 800631c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006320:	e00b      	b.n	800633a <HAL_TIM_PWM_Start+0xfe>
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	2b10      	cmp	r3, #16
 8006326:	d104      	bne.n	8006332 <HAL_TIM_PWM_Start+0xf6>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2202      	movs	r2, #2
 800632c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006330:	e003      	b.n	800633a <HAL_TIM_PWM_Start+0xfe>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2202      	movs	r2, #2
 8006336:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2201      	movs	r2, #1
 8006340:	6839      	ldr	r1, [r7, #0]
 8006342:	4618      	mov	r0, r3
 8006344:	f001 fd16 	bl	8007d74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a3a      	ldr	r2, [pc, #232]	@ (8006438 <HAL_TIM_PWM_Start+0x1fc>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d018      	beq.n	8006384 <HAL_TIM_PWM_Start+0x148>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a39      	ldr	r2, [pc, #228]	@ (800643c <HAL_TIM_PWM_Start+0x200>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d013      	beq.n	8006384 <HAL_TIM_PWM_Start+0x148>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a37      	ldr	r2, [pc, #220]	@ (8006440 <HAL_TIM_PWM_Start+0x204>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d00e      	beq.n	8006384 <HAL_TIM_PWM_Start+0x148>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a36      	ldr	r2, [pc, #216]	@ (8006444 <HAL_TIM_PWM_Start+0x208>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d009      	beq.n	8006384 <HAL_TIM_PWM_Start+0x148>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a34      	ldr	r2, [pc, #208]	@ (8006448 <HAL_TIM_PWM_Start+0x20c>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d004      	beq.n	8006384 <HAL_TIM_PWM_Start+0x148>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a33      	ldr	r2, [pc, #204]	@ (800644c <HAL_TIM_PWM_Start+0x210>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d101      	bne.n	8006388 <HAL_TIM_PWM_Start+0x14c>
 8006384:	2301      	movs	r3, #1
 8006386:	e000      	b.n	800638a <HAL_TIM_PWM_Start+0x14e>
 8006388:	2300      	movs	r3, #0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d007      	beq.n	800639e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800639c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a25      	ldr	r2, [pc, #148]	@ (8006438 <HAL_TIM_PWM_Start+0x1fc>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d022      	beq.n	80063ee <HAL_TIM_PWM_Start+0x1b2>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063b0:	d01d      	beq.n	80063ee <HAL_TIM_PWM_Start+0x1b2>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a26      	ldr	r2, [pc, #152]	@ (8006450 <HAL_TIM_PWM_Start+0x214>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d018      	beq.n	80063ee <HAL_TIM_PWM_Start+0x1b2>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a24      	ldr	r2, [pc, #144]	@ (8006454 <HAL_TIM_PWM_Start+0x218>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d013      	beq.n	80063ee <HAL_TIM_PWM_Start+0x1b2>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a23      	ldr	r2, [pc, #140]	@ (8006458 <HAL_TIM_PWM_Start+0x21c>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d00e      	beq.n	80063ee <HAL_TIM_PWM_Start+0x1b2>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a19      	ldr	r2, [pc, #100]	@ (800643c <HAL_TIM_PWM_Start+0x200>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d009      	beq.n	80063ee <HAL_TIM_PWM_Start+0x1b2>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a18      	ldr	r2, [pc, #96]	@ (8006440 <HAL_TIM_PWM_Start+0x204>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d004      	beq.n	80063ee <HAL_TIM_PWM_Start+0x1b2>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a18      	ldr	r2, [pc, #96]	@ (800644c <HAL_TIM_PWM_Start+0x210>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d115      	bne.n	800641a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	689a      	ldr	r2, [r3, #8]
 80063f4:	4b19      	ldr	r3, [pc, #100]	@ (800645c <HAL_TIM_PWM_Start+0x220>)
 80063f6:	4013      	ands	r3, r2
 80063f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2b06      	cmp	r3, #6
 80063fe:	d015      	beq.n	800642c <HAL_TIM_PWM_Start+0x1f0>
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006406:	d011      	beq.n	800642c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f042 0201 	orr.w	r2, r2, #1
 8006416:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006418:	e008      	b.n	800642c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f042 0201 	orr.w	r2, r2, #1
 8006428:	601a      	str	r2, [r3, #0]
 800642a:	e000      	b.n	800642e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800642c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800642e:	2300      	movs	r3, #0
}
 8006430:	4618      	mov	r0, r3
 8006432:	3710      	adds	r7, #16
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}
 8006438:	40012c00 	.word	0x40012c00
 800643c:	40013400 	.word	0x40013400
 8006440:	40014000 	.word	0x40014000
 8006444:	40014400 	.word	0x40014400
 8006448:	40014800 	.word	0x40014800
 800644c:	40015000 	.word	0x40015000
 8006450:	40000400 	.word	0x40000400
 8006454:	40000800 	.word	0x40000800
 8006458:	40000c00 	.word	0x40000c00
 800645c:	00010007 	.word	0x00010007

08006460 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d101      	bne.n	8006474 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	e04c      	b.n	800650e <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800647a:	b2db      	uxtb	r3, r3
 800647c:	2b00      	cmp	r3, #0
 800647e:	d111      	bne.n	80064a4 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f001 fc99 	bl	8007dc0 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006492:	2b00      	cmp	r3, #0
 8006494:	d102      	bne.n	800649c <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a1f      	ldr	r2, [pc, #124]	@ (8006518 <HAL_TIM_OnePulse_Init+0xb8>)
 800649a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2202      	movs	r2, #2
 80064a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	3304      	adds	r3, #4
 80064b4:	4619      	mov	r1, r3
 80064b6:	4610      	mov	r0, r2
 80064b8:	f000 ffe2 	bl	8007480 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f022 0208 	bic.w	r2, r2, #8
 80064ca:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	6819      	ldr	r1, [r3, #0]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	683a      	ldr	r2, [r7, #0]
 80064d8:	430a      	orrs	r2, r1
 80064da:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800650c:	2300      	movs	r3, #0
}
 800650e:	4618      	mov	r0, r3
 8006510:	3708      	adds	r7, #8
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	0800651d 	.word	0x0800651d

0800651c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8006524:	bf00      	nop
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006540:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006548:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006550:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006558:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800655a:	7bfb      	ldrb	r3, [r7, #15]
 800655c:	2b01      	cmp	r3, #1
 800655e:	d108      	bne.n	8006572 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006560:	7bbb      	ldrb	r3, [r7, #14]
 8006562:	2b01      	cmp	r3, #1
 8006564:	d105      	bne.n	8006572 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006566:	7b7b      	ldrb	r3, [r7, #13]
 8006568:	2b01      	cmp	r3, #1
 800656a:	d102      	bne.n	8006572 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800656c:	7b3b      	ldrb	r3, [r7, #12]
 800656e:	2b01      	cmp	r3, #1
 8006570:	d001      	beq.n	8006576 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e059      	b.n	800662a <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2202      	movs	r2, #2
 800657a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2202      	movs	r2, #2
 8006582:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2202      	movs	r2, #2
 800658a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2202      	movs	r2, #2
 8006592:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	68da      	ldr	r2, [r3, #12]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f042 0202 	orr.w	r2, r2, #2
 80065a4:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	68da      	ldr	r2, [r3, #12]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f042 0204 	orr.w	r2, r2, #4
 80065b4:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	2201      	movs	r2, #1
 80065bc:	2100      	movs	r1, #0
 80065be:	4618      	mov	r0, r3
 80065c0:	f001 fbd8 	bl	8007d74 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	2201      	movs	r2, #1
 80065ca:	2104      	movs	r1, #4
 80065cc:	4618      	mov	r0, r3
 80065ce:	f001 fbd1 	bl	8007d74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a17      	ldr	r2, [pc, #92]	@ (8006634 <HAL_TIM_OnePulse_Start_IT+0x104>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d018      	beq.n	800660e <HAL_TIM_OnePulse_Start_IT+0xde>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a15      	ldr	r2, [pc, #84]	@ (8006638 <HAL_TIM_OnePulse_Start_IT+0x108>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d013      	beq.n	800660e <HAL_TIM_OnePulse_Start_IT+0xde>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a14      	ldr	r2, [pc, #80]	@ (800663c <HAL_TIM_OnePulse_Start_IT+0x10c>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d00e      	beq.n	800660e <HAL_TIM_OnePulse_Start_IT+0xde>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a12      	ldr	r2, [pc, #72]	@ (8006640 <HAL_TIM_OnePulse_Start_IT+0x110>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d009      	beq.n	800660e <HAL_TIM_OnePulse_Start_IT+0xde>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a11      	ldr	r2, [pc, #68]	@ (8006644 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d004      	beq.n	800660e <HAL_TIM_OnePulse_Start_IT+0xde>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a0f      	ldr	r2, [pc, #60]	@ (8006648 <HAL_TIM_OnePulse_Start_IT+0x118>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d101      	bne.n	8006612 <HAL_TIM_OnePulse_Start_IT+0xe2>
 800660e:	2301      	movs	r3, #1
 8006610:	e000      	b.n	8006614 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8006612:	2300      	movs	r3, #0
 8006614:	2b00      	cmp	r3, #0
 8006616:	d007      	beq.n	8006628 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006626:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8006628:	2300      	movs	r3, #0
}
 800662a:	4618      	mov	r0, r3
 800662c:	3710      	adds	r7, #16
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
 8006632:	bf00      	nop
 8006634:	40012c00 	.word	0x40012c00
 8006638:	40013400 	.word	0x40013400
 800663c:	40014000 	.word	0x40014000
 8006640:	40014400 	.word	0x40014400
 8006644:	40014800 	.word	0x40014800
 8006648:	40015000 	.word	0x40015000

0800664c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b086      	sub	sp, #24
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d101      	bne.n	8006660 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	e0a2      	b.n	80067a6 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006666:	b2db      	uxtb	r3, r3
 8006668:	2b00      	cmp	r3, #0
 800666a:	d111      	bne.n	8006690 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f001 fba3 	bl	8007dc0 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800667e:	2b00      	cmp	r3, #0
 8006680:	d102      	bne.n	8006688 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a4a      	ldr	r2, [pc, #296]	@ (80067b0 <HAL_TIM_Encoder_Init+0x164>)
 8006686:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2202      	movs	r2, #2
 8006694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	6812      	ldr	r2, [r2, #0]
 80066a2:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80066a6:	f023 0307 	bic.w	r3, r3, #7
 80066aa:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	3304      	adds	r3, #4
 80066b4:	4619      	mov	r1, r3
 80066b6:	4610      	mov	r0, r2
 80066b8:	f000 fee2 	bl	8007480 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	699b      	ldr	r3, [r3, #24]
 80066ca:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	6a1b      	ldr	r3, [r3, #32]
 80066d2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	697a      	ldr	r2, [r7, #20]
 80066da:	4313      	orrs	r3, r2
 80066dc:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066e4:	f023 0303 	bic.w	r3, r3, #3
 80066e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	689a      	ldr	r2, [r3, #8]
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	699b      	ldr	r3, [r3, #24]
 80066f2:	021b      	lsls	r3, r3, #8
 80066f4:	4313      	orrs	r3, r2
 80066f6:	693a      	ldr	r2, [r7, #16]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006702:	f023 030c 	bic.w	r3, r3, #12
 8006706:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800670e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006712:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	68da      	ldr	r2, [r3, #12]
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	69db      	ldr	r3, [r3, #28]
 800671c:	021b      	lsls	r3, r3, #8
 800671e:	4313      	orrs	r3, r2
 8006720:	693a      	ldr	r2, [r7, #16]
 8006722:	4313      	orrs	r3, r2
 8006724:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	011a      	lsls	r2, r3, #4
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	6a1b      	ldr	r3, [r3, #32]
 8006730:	031b      	lsls	r3, r3, #12
 8006732:	4313      	orrs	r3, r2
 8006734:	693a      	ldr	r2, [r7, #16]
 8006736:	4313      	orrs	r3, r2
 8006738:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006740:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006748:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	685a      	ldr	r2, [r3, #4]
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	695b      	ldr	r3, [r3, #20]
 8006752:	011b      	lsls	r3, r3, #4
 8006754:	4313      	orrs	r3, r2
 8006756:	68fa      	ldr	r2, [r7, #12]
 8006758:	4313      	orrs	r3, r2
 800675a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	697a      	ldr	r2, [r7, #20]
 8006762:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	693a      	ldr	r2, [r7, #16]
 800676a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3718      	adds	r7, #24
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	080026ad 	.word	0x080026ad

080067b4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80067c4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80067cc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80067d4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80067dc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d110      	bne.n	8006806 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80067e4:	7bfb      	ldrb	r3, [r7, #15]
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d102      	bne.n	80067f0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80067ea:	7b7b      	ldrb	r3, [r7, #13]
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d001      	beq.n	80067f4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	e069      	b.n	80068c8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2202      	movs	r2, #2
 80067f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2202      	movs	r2, #2
 8006800:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006804:	e031      	b.n	800686a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	2b04      	cmp	r3, #4
 800680a:	d110      	bne.n	800682e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800680c:	7bbb      	ldrb	r3, [r7, #14]
 800680e:	2b01      	cmp	r3, #1
 8006810:	d102      	bne.n	8006818 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006812:	7b3b      	ldrb	r3, [r7, #12]
 8006814:	2b01      	cmp	r3, #1
 8006816:	d001      	beq.n	800681c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	e055      	b.n	80068c8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2202      	movs	r2, #2
 8006820:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2202      	movs	r2, #2
 8006828:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800682c:	e01d      	b.n	800686a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800682e:	7bfb      	ldrb	r3, [r7, #15]
 8006830:	2b01      	cmp	r3, #1
 8006832:	d108      	bne.n	8006846 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006834:	7bbb      	ldrb	r3, [r7, #14]
 8006836:	2b01      	cmp	r3, #1
 8006838:	d105      	bne.n	8006846 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800683a:	7b7b      	ldrb	r3, [r7, #13]
 800683c:	2b01      	cmp	r3, #1
 800683e:	d102      	bne.n	8006846 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006840:	7b3b      	ldrb	r3, [r7, #12]
 8006842:	2b01      	cmp	r3, #1
 8006844:	d001      	beq.n	800684a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e03e      	b.n	80068c8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2202      	movs	r2, #2
 800684e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2202      	movs	r2, #2
 8006856:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2202      	movs	r2, #2
 800685e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2202      	movs	r2, #2
 8006866:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d003      	beq.n	8006878 <HAL_TIM_Encoder_Start+0xc4>
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	2b04      	cmp	r3, #4
 8006874:	d008      	beq.n	8006888 <HAL_TIM_Encoder_Start+0xd4>
 8006876:	e00f      	b.n	8006898 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	2201      	movs	r2, #1
 800687e:	2100      	movs	r1, #0
 8006880:	4618      	mov	r0, r3
 8006882:	f001 fa77 	bl	8007d74 <TIM_CCxChannelCmd>
      break;
 8006886:	e016      	b.n	80068b6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2201      	movs	r2, #1
 800688e:	2104      	movs	r1, #4
 8006890:	4618      	mov	r0, r3
 8006892:	f001 fa6f 	bl	8007d74 <TIM_CCxChannelCmd>
      break;
 8006896:	e00e      	b.n	80068b6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2201      	movs	r2, #1
 800689e:	2100      	movs	r1, #0
 80068a0:	4618      	mov	r0, r3
 80068a2:	f001 fa67 	bl	8007d74 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2201      	movs	r2, #1
 80068ac:	2104      	movs	r1, #4
 80068ae:	4618      	mov	r0, r3
 80068b0:	f001 fa60 	bl	8007d74 <TIM_CCxChannelCmd>
      break;
 80068b4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f042 0201 	orr.w	r2, r2, #1
 80068c4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80068c6:	2300      	movs	r3, #0
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3710      	adds	r7, #16
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	691b      	ldr	r3, [r3, #16]
 80068e6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	f003 0302 	and.w	r3, r3, #2
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d026      	beq.n	8006940 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f003 0302 	and.w	r3, r3, #2
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d021      	beq.n	8006940 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f06f 0202 	mvn.w	r2, #2
 8006904:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2201      	movs	r2, #1
 800690a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	699b      	ldr	r3, [r3, #24]
 8006912:	f003 0303 	and.w	r3, r3, #3
 8006916:	2b00      	cmp	r3, #0
 8006918:	d005      	beq.n	8006926 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	4798      	blx	r3
 8006924:	e009      	b.n	800693a <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	f003 0304 	and.w	r3, r3, #4
 8006946:	2b00      	cmp	r3, #0
 8006948:	d026      	beq.n	8006998 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f003 0304 	and.w	r3, r3, #4
 8006950:	2b00      	cmp	r3, #0
 8006952:	d021      	beq.n	8006998 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f06f 0204 	mvn.w	r2, #4
 800695c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2202      	movs	r2, #2
 8006962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	699b      	ldr	r3, [r3, #24]
 800696a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800696e:	2b00      	cmp	r3, #0
 8006970:	d005      	beq.n	800697e <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	4798      	blx	r3
 800697c:	e009      	b.n	8006992 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	f003 0308 	and.w	r3, r3, #8
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d026      	beq.n	80069f0 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f003 0308 	and.w	r3, r3, #8
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d021      	beq.n	80069f0 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f06f 0208 	mvn.w	r2, #8
 80069b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2204      	movs	r2, #4
 80069ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	69db      	ldr	r3, [r3, #28]
 80069c2:	f003 0303 	and.w	r3, r3, #3
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d005      	beq.n	80069d6 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	4798      	blx	r3
 80069d4:	e009      	b.n	80069ea <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	f003 0310 	and.w	r3, r3, #16
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d026      	beq.n	8006a48 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f003 0310 	and.w	r3, r3, #16
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d021      	beq.n	8006a48 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f06f 0210 	mvn.w	r2, #16
 8006a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2208      	movs	r2, #8
 8006a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	69db      	ldr	r3, [r3, #28]
 8006a1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d005      	beq.n	8006a2e <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	4798      	blx	r3
 8006a2c:	e009      	b.n	8006a42 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2200      	movs	r2, #0
 8006a46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	f003 0301 	and.w	r3, r3, #1
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d00e      	beq.n	8006a70 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f003 0301 	and.w	r3, r3, #1
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d009      	beq.n	8006a70 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f06f 0201 	mvn.w	r2, #1
 8006a64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d104      	bne.n	8006a84 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d00e      	beq.n	8006aa2 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d009      	beq.n	8006aa2 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006a96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d00e      	beq.n	8006aca <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d009      	beq.n	8006aca <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006abe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d00e      	beq.n	8006af2 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d009      	beq.n	8006af2 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006ae6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	f003 0320 	and.w	r3, r3, #32
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d00e      	beq.n	8006b1a <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f003 0320 	and.w	r3, r3, #32
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d009      	beq.n	8006b1a <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f06f 0220 	mvn.w	r2, #32
 8006b0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d00e      	beq.n	8006b42 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d009      	beq.n	8006b42 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006b36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00e      	beq.n	8006b6a <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d009      	beq.n	8006b6a <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006b5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d00e      	beq.n	8006b92 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d009      	beq.n	8006b92 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006b86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d00e      	beq.n	8006bba <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d009      	beq.n	8006bba <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006bae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006bba:	bf00      	nop
 8006bbc:	3710      	adds	r7, #16
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
	...

08006bc4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b086      	sub	sp, #24
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	60b9      	str	r1, [r7, #8]
 8006bce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d101      	bne.n	8006be2 <HAL_TIM_OC_ConfigChannel+0x1e>
 8006bde:	2302      	movs	r3, #2
 8006be0:	e066      	b.n	8006cb0 <HAL_TIM_OC_ConfigChannel+0xec>
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2201      	movs	r2, #1
 8006be6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2b14      	cmp	r3, #20
 8006bee:	d857      	bhi.n	8006ca0 <HAL_TIM_OC_ConfigChannel+0xdc>
 8006bf0:	a201      	add	r2, pc, #4	@ (adr r2, 8006bf8 <HAL_TIM_OC_ConfigChannel+0x34>)
 8006bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bf6:	bf00      	nop
 8006bf8:	08006c4d 	.word	0x08006c4d
 8006bfc:	08006ca1 	.word	0x08006ca1
 8006c00:	08006ca1 	.word	0x08006ca1
 8006c04:	08006ca1 	.word	0x08006ca1
 8006c08:	08006c5b 	.word	0x08006c5b
 8006c0c:	08006ca1 	.word	0x08006ca1
 8006c10:	08006ca1 	.word	0x08006ca1
 8006c14:	08006ca1 	.word	0x08006ca1
 8006c18:	08006c69 	.word	0x08006c69
 8006c1c:	08006ca1 	.word	0x08006ca1
 8006c20:	08006ca1 	.word	0x08006ca1
 8006c24:	08006ca1 	.word	0x08006ca1
 8006c28:	08006c77 	.word	0x08006c77
 8006c2c:	08006ca1 	.word	0x08006ca1
 8006c30:	08006ca1 	.word	0x08006ca1
 8006c34:	08006ca1 	.word	0x08006ca1
 8006c38:	08006c85 	.word	0x08006c85
 8006c3c:	08006ca1 	.word	0x08006ca1
 8006c40:	08006ca1 	.word	0x08006ca1
 8006c44:	08006ca1 	.word	0x08006ca1
 8006c48:	08006c93 	.word	0x08006c93
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	68b9      	ldr	r1, [r7, #8]
 8006c52:	4618      	mov	r0, r3
 8006c54:	f000 fcc8 	bl	80075e8 <TIM_OC1_SetConfig>
      break;
 8006c58:	e025      	b.n	8006ca6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	68b9      	ldr	r1, [r7, #8]
 8006c60:	4618      	mov	r0, r3
 8006c62:	f000 fd5b 	bl	800771c <TIM_OC2_SetConfig>
      break;
 8006c66:	e01e      	b.n	8006ca6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	68b9      	ldr	r1, [r7, #8]
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f000 fde8 	bl	8007844 <TIM_OC3_SetConfig>
      break;
 8006c74:	e017      	b.n	8006ca6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68b9      	ldr	r1, [r7, #8]
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f000 fe73 	bl	8007968 <TIM_OC4_SetConfig>
      break;
 8006c82:	e010      	b.n	8006ca6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	68b9      	ldr	r1, [r7, #8]
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f000 ff00 	bl	8007a90 <TIM_OC5_SetConfig>
      break;
 8006c90:	e009      	b.n	8006ca6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	68b9      	ldr	r1, [r7, #8]
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f000 ff63 	bl	8007b64 <TIM_OC6_SetConfig>
      break;
 8006c9e:	e002      	b.n	8006ca6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ca4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006cae:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3718      	adds	r7, #24
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b086      	sub	sp, #24
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d101      	bne.n	8006cd6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006cd2:	2302      	movs	r3, #2
 8006cd4:	e0ff      	b.n	8006ed6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2201      	movs	r2, #1
 8006cda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2b14      	cmp	r3, #20
 8006ce2:	f200 80f0 	bhi.w	8006ec6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006ce6:	a201      	add	r2, pc, #4	@ (adr r2, 8006cec <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cec:	08006d41 	.word	0x08006d41
 8006cf0:	08006ec7 	.word	0x08006ec7
 8006cf4:	08006ec7 	.word	0x08006ec7
 8006cf8:	08006ec7 	.word	0x08006ec7
 8006cfc:	08006d81 	.word	0x08006d81
 8006d00:	08006ec7 	.word	0x08006ec7
 8006d04:	08006ec7 	.word	0x08006ec7
 8006d08:	08006ec7 	.word	0x08006ec7
 8006d0c:	08006dc3 	.word	0x08006dc3
 8006d10:	08006ec7 	.word	0x08006ec7
 8006d14:	08006ec7 	.word	0x08006ec7
 8006d18:	08006ec7 	.word	0x08006ec7
 8006d1c:	08006e03 	.word	0x08006e03
 8006d20:	08006ec7 	.word	0x08006ec7
 8006d24:	08006ec7 	.word	0x08006ec7
 8006d28:	08006ec7 	.word	0x08006ec7
 8006d2c:	08006e45 	.word	0x08006e45
 8006d30:	08006ec7 	.word	0x08006ec7
 8006d34:	08006ec7 	.word	0x08006ec7
 8006d38:	08006ec7 	.word	0x08006ec7
 8006d3c:	08006e85 	.word	0x08006e85
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68b9      	ldr	r1, [r7, #8]
 8006d46:	4618      	mov	r0, r3
 8006d48:	f000 fc4e 	bl	80075e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	699a      	ldr	r2, [r3, #24]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f042 0208 	orr.w	r2, r2, #8
 8006d5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	699a      	ldr	r2, [r3, #24]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f022 0204 	bic.w	r2, r2, #4
 8006d6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	6999      	ldr	r1, [r3, #24]
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	691a      	ldr	r2, [r3, #16]
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	430a      	orrs	r2, r1
 8006d7c:	619a      	str	r2, [r3, #24]
      break;
 8006d7e:	e0a5      	b.n	8006ecc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	68b9      	ldr	r1, [r7, #8]
 8006d86:	4618      	mov	r0, r3
 8006d88:	f000 fcc8 	bl	800771c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	699a      	ldr	r2, [r3, #24]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	699a      	ldr	r2, [r3, #24]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006daa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	6999      	ldr	r1, [r3, #24]
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	021a      	lsls	r2, r3, #8
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	430a      	orrs	r2, r1
 8006dbe:	619a      	str	r2, [r3, #24]
      break;
 8006dc0:	e084      	b.n	8006ecc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	68b9      	ldr	r1, [r7, #8]
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f000 fd3b 	bl	8007844 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	69da      	ldr	r2, [r3, #28]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f042 0208 	orr.w	r2, r2, #8
 8006ddc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	69da      	ldr	r2, [r3, #28]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f022 0204 	bic.w	r2, r2, #4
 8006dec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	69d9      	ldr	r1, [r3, #28]
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	691a      	ldr	r2, [r3, #16]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	430a      	orrs	r2, r1
 8006dfe:	61da      	str	r2, [r3, #28]
      break;
 8006e00:	e064      	b.n	8006ecc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	68b9      	ldr	r1, [r7, #8]
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f000 fdad 	bl	8007968 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	69da      	ldr	r2, [r3, #28]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006e1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	69da      	ldr	r2, [r3, #28]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	69d9      	ldr	r1, [r3, #28]
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	691b      	ldr	r3, [r3, #16]
 8006e38:	021a      	lsls	r2, r3, #8
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	430a      	orrs	r2, r1
 8006e40:	61da      	str	r2, [r3, #28]
      break;
 8006e42:	e043      	b.n	8006ecc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	68b9      	ldr	r1, [r7, #8]
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f000 fe20 	bl	8007a90 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f042 0208 	orr.w	r2, r2, #8
 8006e5e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f022 0204 	bic.w	r2, r2, #4
 8006e6e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	691a      	ldr	r2, [r3, #16]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	430a      	orrs	r2, r1
 8006e80:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006e82:	e023      	b.n	8006ecc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	68b9      	ldr	r1, [r7, #8]
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f000 fe6a 	bl	8007b64 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006e9e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006eae:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	021a      	lsls	r2, r3, #8
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	430a      	orrs	r2, r1
 8006ec2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006ec4:	e002      	b.n	8006ecc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	75fb      	strb	r3, [r7, #23]
      break;
 8006eca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006ed4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3718      	adds	r7, #24
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop

08006ee0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006eea:	2300      	movs	r3, #0
 8006eec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d101      	bne.n	8006efc <HAL_TIM_ConfigClockSource+0x1c>
 8006ef8:	2302      	movs	r3, #2
 8006efa:	e0f6      	b.n	80070ea <HAL_TIM_ConfigClockSource+0x20a>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2201      	movs	r2, #1
 8006f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2202      	movs	r2, #2
 8006f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006f1a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006f1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006f26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68ba      	ldr	r2, [r7, #8]
 8006f2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a6f      	ldr	r2, [pc, #444]	@ (80070f4 <HAL_TIM_ConfigClockSource+0x214>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	f000 80c1 	beq.w	80070be <HAL_TIM_ConfigClockSource+0x1de>
 8006f3c:	4a6d      	ldr	r2, [pc, #436]	@ (80070f4 <HAL_TIM_ConfigClockSource+0x214>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	f200 80c6 	bhi.w	80070d0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f44:	4a6c      	ldr	r2, [pc, #432]	@ (80070f8 <HAL_TIM_ConfigClockSource+0x218>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	f000 80b9 	beq.w	80070be <HAL_TIM_ConfigClockSource+0x1de>
 8006f4c:	4a6a      	ldr	r2, [pc, #424]	@ (80070f8 <HAL_TIM_ConfigClockSource+0x218>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	f200 80be 	bhi.w	80070d0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f54:	4a69      	ldr	r2, [pc, #420]	@ (80070fc <HAL_TIM_ConfigClockSource+0x21c>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	f000 80b1 	beq.w	80070be <HAL_TIM_ConfigClockSource+0x1de>
 8006f5c:	4a67      	ldr	r2, [pc, #412]	@ (80070fc <HAL_TIM_ConfigClockSource+0x21c>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	f200 80b6 	bhi.w	80070d0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f64:	4a66      	ldr	r2, [pc, #408]	@ (8007100 <HAL_TIM_ConfigClockSource+0x220>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	f000 80a9 	beq.w	80070be <HAL_TIM_ConfigClockSource+0x1de>
 8006f6c:	4a64      	ldr	r2, [pc, #400]	@ (8007100 <HAL_TIM_ConfigClockSource+0x220>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	f200 80ae 	bhi.w	80070d0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f74:	4a63      	ldr	r2, [pc, #396]	@ (8007104 <HAL_TIM_ConfigClockSource+0x224>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	f000 80a1 	beq.w	80070be <HAL_TIM_ConfigClockSource+0x1de>
 8006f7c:	4a61      	ldr	r2, [pc, #388]	@ (8007104 <HAL_TIM_ConfigClockSource+0x224>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	f200 80a6 	bhi.w	80070d0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f84:	4a60      	ldr	r2, [pc, #384]	@ (8007108 <HAL_TIM_ConfigClockSource+0x228>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	f000 8099 	beq.w	80070be <HAL_TIM_ConfigClockSource+0x1de>
 8006f8c:	4a5e      	ldr	r2, [pc, #376]	@ (8007108 <HAL_TIM_ConfigClockSource+0x228>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	f200 809e 	bhi.w	80070d0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f94:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006f98:	f000 8091 	beq.w	80070be <HAL_TIM_ConfigClockSource+0x1de>
 8006f9c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006fa0:	f200 8096 	bhi.w	80070d0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006fa4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006fa8:	f000 8089 	beq.w	80070be <HAL_TIM_ConfigClockSource+0x1de>
 8006fac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006fb0:	f200 808e 	bhi.w	80070d0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006fb4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fb8:	d03e      	beq.n	8007038 <HAL_TIM_ConfigClockSource+0x158>
 8006fba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fbe:	f200 8087 	bhi.w	80070d0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006fc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fc6:	f000 8086 	beq.w	80070d6 <HAL_TIM_ConfigClockSource+0x1f6>
 8006fca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fce:	d87f      	bhi.n	80070d0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006fd0:	2b70      	cmp	r3, #112	@ 0x70
 8006fd2:	d01a      	beq.n	800700a <HAL_TIM_ConfigClockSource+0x12a>
 8006fd4:	2b70      	cmp	r3, #112	@ 0x70
 8006fd6:	d87b      	bhi.n	80070d0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006fd8:	2b60      	cmp	r3, #96	@ 0x60
 8006fda:	d050      	beq.n	800707e <HAL_TIM_ConfigClockSource+0x19e>
 8006fdc:	2b60      	cmp	r3, #96	@ 0x60
 8006fde:	d877      	bhi.n	80070d0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006fe0:	2b50      	cmp	r3, #80	@ 0x50
 8006fe2:	d03c      	beq.n	800705e <HAL_TIM_ConfigClockSource+0x17e>
 8006fe4:	2b50      	cmp	r3, #80	@ 0x50
 8006fe6:	d873      	bhi.n	80070d0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006fe8:	2b40      	cmp	r3, #64	@ 0x40
 8006fea:	d058      	beq.n	800709e <HAL_TIM_ConfigClockSource+0x1be>
 8006fec:	2b40      	cmp	r3, #64	@ 0x40
 8006fee:	d86f      	bhi.n	80070d0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ff0:	2b30      	cmp	r3, #48	@ 0x30
 8006ff2:	d064      	beq.n	80070be <HAL_TIM_ConfigClockSource+0x1de>
 8006ff4:	2b30      	cmp	r3, #48	@ 0x30
 8006ff6:	d86b      	bhi.n	80070d0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ff8:	2b20      	cmp	r3, #32
 8006ffa:	d060      	beq.n	80070be <HAL_TIM_ConfigClockSource+0x1de>
 8006ffc:	2b20      	cmp	r3, #32
 8006ffe:	d867      	bhi.n	80070d0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007000:	2b00      	cmp	r3, #0
 8007002:	d05c      	beq.n	80070be <HAL_TIM_ConfigClockSource+0x1de>
 8007004:	2b10      	cmp	r3, #16
 8007006:	d05a      	beq.n	80070be <HAL_TIM_ConfigClockSource+0x1de>
 8007008:	e062      	b.n	80070d0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800701a:	f000 fe8b 	bl	8007d34 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800702c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	68ba      	ldr	r2, [r7, #8]
 8007034:	609a      	str	r2, [r3, #8]
      break;
 8007036:	e04f      	b.n	80070d8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007048:	f000 fe74 	bl	8007d34 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	689a      	ldr	r2, [r3, #8]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800705a:	609a      	str	r2, [r3, #8]
      break;
 800705c:	e03c      	b.n	80070d8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800706a:	461a      	mov	r2, r3
 800706c:	f000 fde6 	bl	8007c3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	2150      	movs	r1, #80	@ 0x50
 8007076:	4618      	mov	r0, r3
 8007078:	f000 fe3f 	bl	8007cfa <TIM_ITRx_SetConfig>
      break;
 800707c:	e02c      	b.n	80070d8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800708a:	461a      	mov	r2, r3
 800708c:	f000 fe05 	bl	8007c9a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	2160      	movs	r1, #96	@ 0x60
 8007096:	4618      	mov	r0, r3
 8007098:	f000 fe2f 	bl	8007cfa <TIM_ITRx_SetConfig>
      break;
 800709c:	e01c      	b.n	80070d8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80070aa:	461a      	mov	r2, r3
 80070ac:	f000 fdc6 	bl	8007c3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	2140      	movs	r1, #64	@ 0x40
 80070b6:	4618      	mov	r0, r3
 80070b8:	f000 fe1f 	bl	8007cfa <TIM_ITRx_SetConfig>
      break;
 80070bc:	e00c      	b.n	80070d8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4619      	mov	r1, r3
 80070c8:	4610      	mov	r0, r2
 80070ca:	f000 fe16 	bl	8007cfa <TIM_ITRx_SetConfig>
      break;
 80070ce:	e003      	b.n	80070d8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	73fb      	strb	r3, [r7, #15]
      break;
 80070d4:	e000      	b.n	80070d8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80070d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2201      	movs	r2, #1
 80070dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80070e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3710      	adds	r7, #16
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	00100070 	.word	0x00100070
 80070f8:	00100060 	.word	0x00100060
 80070fc:	00100050 	.word	0x00100050
 8007100:	00100040 	.word	0x00100040
 8007104:	00100030 	.word	0x00100030
 8007108:	00100020 	.word	0x00100020

0800710c <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8007114:	bf00      	nop
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007120:	b480      	push	{r7}
 8007122:	b083      	sub	sp, #12
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007128:	bf00      	nop
 800712a:	370c      	adds	r7, #12
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr

08007134 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800713c:	bf00      	nop
 800713e:	370c      	adds	r7, #12
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr

08007148 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8007150:	bf00      	nop
 8007152:	370c      	adds	r7, #12
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr

0800715c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007164:	bf00      	nop
 8007166:	370c      	adds	r7, #12
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8007178:	bf00      	nop
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800718c:	bf00      	nop
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80071a0:	bf00      	nop
 80071a2:	370c      	adds	r7, #12
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80071b4:	bf00      	nop
 80071b6:	370c      	adds	r7, #12
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b087      	sub	sp, #28
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	460b      	mov	r3, r1
 80071ca:	607a      	str	r2, [r7, #4]
 80071cc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80071ce:	2300      	movs	r3, #0
 80071d0:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d101      	bne.n	80071dc <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	e14a      	b.n	8007472 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	f040 80dd 	bne.w	80073a4 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 80071ea:	7afb      	ldrb	r3, [r7, #11]
 80071ec:	2b1f      	cmp	r3, #31
 80071ee:	f200 80d6 	bhi.w	800739e <HAL_TIM_RegisterCallback+0x1de>
 80071f2:	a201      	add	r2, pc, #4	@ (adr r2, 80071f8 <HAL_TIM_RegisterCallback+0x38>)
 80071f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f8:	08007279 	.word	0x08007279
 80071fc:	08007281 	.word	0x08007281
 8007200:	08007289 	.word	0x08007289
 8007204:	08007291 	.word	0x08007291
 8007208:	08007299 	.word	0x08007299
 800720c:	080072a1 	.word	0x080072a1
 8007210:	080072a9 	.word	0x080072a9
 8007214:	080072b1 	.word	0x080072b1
 8007218:	080072b9 	.word	0x080072b9
 800721c:	080072c1 	.word	0x080072c1
 8007220:	080072c9 	.word	0x080072c9
 8007224:	080072d1 	.word	0x080072d1
 8007228:	080072d9 	.word	0x080072d9
 800722c:	080072e1 	.word	0x080072e1
 8007230:	080072eb 	.word	0x080072eb
 8007234:	080072f5 	.word	0x080072f5
 8007238:	080072ff 	.word	0x080072ff
 800723c:	08007309 	.word	0x08007309
 8007240:	08007313 	.word	0x08007313
 8007244:	0800731d 	.word	0x0800731d
 8007248:	08007327 	.word	0x08007327
 800724c:	08007331 	.word	0x08007331
 8007250:	0800733b 	.word	0x0800733b
 8007254:	08007345 	.word	0x08007345
 8007258:	0800734f 	.word	0x0800734f
 800725c:	08007359 	.word	0x08007359
 8007260:	08007363 	.word	0x08007363
 8007264:	0800736d 	.word	0x0800736d
 8007268:	08007377 	.word	0x08007377
 800726c:	08007381 	.word	0x08007381
 8007270:	0800738b 	.word	0x0800738b
 8007274:	08007395 	.word	0x08007395
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800727e:	e0f7      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	687a      	ldr	r2, [r7, #4]
 8007284:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8007286:	e0f3      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800728e:	e0ef      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8007296:	e0eb      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800729e:	e0e7      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80072a6:	e0e3      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80072ae:	e0df      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80072b6:	e0db      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	687a      	ldr	r2, [r7, #4]
 80072bc:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80072be:	e0d7      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80072c6:	e0d3      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80072ce:	e0cf      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80072d6:	e0cb      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80072de:	e0c7      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80072e8:	e0c2      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 80072f2:	e0bd      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 80072fc:	e0b8      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8007306:	e0b3      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8007310:	e0ae      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800731a:	e0a9      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	687a      	ldr	r2, [r7, #4]
 8007320:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8007324:	e0a4      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800732e:	e09f      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8007338:	e09a      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8007342:	e095      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800734c:	e090      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8007356:	e08b      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8007360:	e086      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800736a:	e081      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8007374:	e07c      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800737e:	e077      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8007388:	e072      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8007392:	e06d      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800739c:	e068      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	75fb      	strb	r3, [r7, #23]
        break;
 80073a2:	e065      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d15d      	bne.n	800746c <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 80073b0:	7afb      	ldrb	r3, [r7, #11]
 80073b2:	2b0d      	cmp	r3, #13
 80073b4:	d857      	bhi.n	8007466 <HAL_TIM_RegisterCallback+0x2a6>
 80073b6:	a201      	add	r2, pc, #4	@ (adr r2, 80073bc <HAL_TIM_RegisterCallback+0x1fc>)
 80073b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073bc:	080073f5 	.word	0x080073f5
 80073c0:	080073fd 	.word	0x080073fd
 80073c4:	08007405 	.word	0x08007405
 80073c8:	0800740d 	.word	0x0800740d
 80073cc:	08007415 	.word	0x08007415
 80073d0:	0800741d 	.word	0x0800741d
 80073d4:	08007425 	.word	0x08007425
 80073d8:	0800742d 	.word	0x0800742d
 80073dc:	08007435 	.word	0x08007435
 80073e0:	0800743d 	.word	0x0800743d
 80073e4:	08007445 	.word	0x08007445
 80073e8:	0800744d 	.word	0x0800744d
 80073ec:	08007455 	.word	0x08007455
 80073f0:	0800745d 	.word	0x0800745d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	687a      	ldr	r2, [r7, #4]
 80073f8:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80073fa:	e039      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8007402:	e035      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800740a:	e031      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8007412:	e02d      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800741a:	e029      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8007422:	e025      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	687a      	ldr	r2, [r7, #4]
 8007428:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800742a:	e021      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8007432:	e01d      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800743a:	e019      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8007442:	e015      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800744a:	e011      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8007452:	e00d      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800745a:	e009      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8007464:	e004      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	75fb      	strb	r3, [r7, #23]
        break;
 800746a:	e001      	b.n	8007470 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007470:	7dfb      	ldrb	r3, [r7, #23]
}
 8007472:	4618      	mov	r0, r3
 8007474:	371c      	adds	r7, #28
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr
 800747e:	bf00      	nop

08007480 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007480:	b480      	push	{r7}
 8007482:	b085      	sub	sp, #20
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	4a4c      	ldr	r2, [pc, #304]	@ (80075c4 <TIM_Base_SetConfig+0x144>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d017      	beq.n	80074c8 <TIM_Base_SetConfig+0x48>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800749e:	d013      	beq.n	80074c8 <TIM_Base_SetConfig+0x48>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	4a49      	ldr	r2, [pc, #292]	@ (80075c8 <TIM_Base_SetConfig+0x148>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d00f      	beq.n	80074c8 <TIM_Base_SetConfig+0x48>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	4a48      	ldr	r2, [pc, #288]	@ (80075cc <TIM_Base_SetConfig+0x14c>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d00b      	beq.n	80074c8 <TIM_Base_SetConfig+0x48>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	4a47      	ldr	r2, [pc, #284]	@ (80075d0 <TIM_Base_SetConfig+0x150>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d007      	beq.n	80074c8 <TIM_Base_SetConfig+0x48>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	4a46      	ldr	r2, [pc, #280]	@ (80075d4 <TIM_Base_SetConfig+0x154>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d003      	beq.n	80074c8 <TIM_Base_SetConfig+0x48>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	4a45      	ldr	r2, [pc, #276]	@ (80075d8 <TIM_Base_SetConfig+0x158>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d108      	bne.n	80074da <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	68fa      	ldr	r2, [r7, #12]
 80074d6:	4313      	orrs	r3, r2
 80074d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	4a39      	ldr	r2, [pc, #228]	@ (80075c4 <TIM_Base_SetConfig+0x144>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d023      	beq.n	800752a <TIM_Base_SetConfig+0xaa>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074e8:	d01f      	beq.n	800752a <TIM_Base_SetConfig+0xaa>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4a36      	ldr	r2, [pc, #216]	@ (80075c8 <TIM_Base_SetConfig+0x148>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d01b      	beq.n	800752a <TIM_Base_SetConfig+0xaa>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	4a35      	ldr	r2, [pc, #212]	@ (80075cc <TIM_Base_SetConfig+0x14c>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d017      	beq.n	800752a <TIM_Base_SetConfig+0xaa>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	4a34      	ldr	r2, [pc, #208]	@ (80075d0 <TIM_Base_SetConfig+0x150>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d013      	beq.n	800752a <TIM_Base_SetConfig+0xaa>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	4a33      	ldr	r2, [pc, #204]	@ (80075d4 <TIM_Base_SetConfig+0x154>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d00f      	beq.n	800752a <TIM_Base_SetConfig+0xaa>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	4a33      	ldr	r2, [pc, #204]	@ (80075dc <TIM_Base_SetConfig+0x15c>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d00b      	beq.n	800752a <TIM_Base_SetConfig+0xaa>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	4a32      	ldr	r2, [pc, #200]	@ (80075e0 <TIM_Base_SetConfig+0x160>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d007      	beq.n	800752a <TIM_Base_SetConfig+0xaa>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4a31      	ldr	r2, [pc, #196]	@ (80075e4 <TIM_Base_SetConfig+0x164>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d003      	beq.n	800752a <TIM_Base_SetConfig+0xaa>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4a2c      	ldr	r2, [pc, #176]	@ (80075d8 <TIM_Base_SetConfig+0x158>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d108      	bne.n	800753c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007530:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	68fa      	ldr	r2, [r7, #12]
 8007538:	4313      	orrs	r3, r2
 800753a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	695b      	ldr	r3, [r3, #20]
 8007546:	4313      	orrs	r3, r2
 8007548:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	68fa      	ldr	r2, [r7, #12]
 800754e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	689a      	ldr	r2, [r3, #8]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	4a18      	ldr	r2, [pc, #96]	@ (80075c4 <TIM_Base_SetConfig+0x144>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d013      	beq.n	8007590 <TIM_Base_SetConfig+0x110>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	4a1a      	ldr	r2, [pc, #104]	@ (80075d4 <TIM_Base_SetConfig+0x154>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d00f      	beq.n	8007590 <TIM_Base_SetConfig+0x110>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	4a1a      	ldr	r2, [pc, #104]	@ (80075dc <TIM_Base_SetConfig+0x15c>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d00b      	beq.n	8007590 <TIM_Base_SetConfig+0x110>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	4a19      	ldr	r2, [pc, #100]	@ (80075e0 <TIM_Base_SetConfig+0x160>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d007      	beq.n	8007590 <TIM_Base_SetConfig+0x110>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	4a18      	ldr	r2, [pc, #96]	@ (80075e4 <TIM_Base_SetConfig+0x164>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d003      	beq.n	8007590 <TIM_Base_SetConfig+0x110>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	4a13      	ldr	r2, [pc, #76]	@ (80075d8 <TIM_Base_SetConfig+0x158>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d103      	bne.n	8007598 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	691a      	ldr	r2, [r3, #16]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	691b      	ldr	r3, [r3, #16]
 80075a2:	f003 0301 	and.w	r3, r3, #1
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d105      	bne.n	80075b6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	691b      	ldr	r3, [r3, #16]
 80075ae:	f023 0201 	bic.w	r2, r3, #1
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	611a      	str	r2, [r3, #16]
  }
}
 80075b6:	bf00      	nop
 80075b8:	3714      	adds	r7, #20
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr
 80075c2:	bf00      	nop
 80075c4:	40012c00 	.word	0x40012c00
 80075c8:	40000400 	.word	0x40000400
 80075cc:	40000800 	.word	0x40000800
 80075d0:	40000c00 	.word	0x40000c00
 80075d4:	40013400 	.word	0x40013400
 80075d8:	40015000 	.word	0x40015000
 80075dc:	40014000 	.word	0x40014000
 80075e0:	40014400 	.word	0x40014400
 80075e4:	40014800 	.word	0x40014800

080075e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b087      	sub	sp, #28
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a1b      	ldr	r3, [r3, #32]
 80075f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6a1b      	ldr	r3, [r3, #32]
 80075fc:	f023 0201 	bic.w	r2, r3, #1
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	699b      	ldr	r3, [r3, #24]
 800760e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007616:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800761a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f023 0303 	bic.w	r3, r3, #3
 8007622:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	68fa      	ldr	r2, [r7, #12]
 800762a:	4313      	orrs	r3, r2
 800762c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	f023 0302 	bic.w	r3, r3, #2
 8007634:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	697a      	ldr	r2, [r7, #20]
 800763c:	4313      	orrs	r3, r2
 800763e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	4a30      	ldr	r2, [pc, #192]	@ (8007704 <TIM_OC1_SetConfig+0x11c>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d013      	beq.n	8007670 <TIM_OC1_SetConfig+0x88>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4a2f      	ldr	r2, [pc, #188]	@ (8007708 <TIM_OC1_SetConfig+0x120>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d00f      	beq.n	8007670 <TIM_OC1_SetConfig+0x88>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	4a2e      	ldr	r2, [pc, #184]	@ (800770c <TIM_OC1_SetConfig+0x124>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d00b      	beq.n	8007670 <TIM_OC1_SetConfig+0x88>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	4a2d      	ldr	r2, [pc, #180]	@ (8007710 <TIM_OC1_SetConfig+0x128>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d007      	beq.n	8007670 <TIM_OC1_SetConfig+0x88>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	4a2c      	ldr	r2, [pc, #176]	@ (8007714 <TIM_OC1_SetConfig+0x12c>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d003      	beq.n	8007670 <TIM_OC1_SetConfig+0x88>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	4a2b      	ldr	r2, [pc, #172]	@ (8007718 <TIM_OC1_SetConfig+0x130>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d10c      	bne.n	800768a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	f023 0308 	bic.w	r3, r3, #8
 8007676:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	68db      	ldr	r3, [r3, #12]
 800767c:	697a      	ldr	r2, [r7, #20]
 800767e:	4313      	orrs	r3, r2
 8007680:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	f023 0304 	bic.w	r3, r3, #4
 8007688:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	4a1d      	ldr	r2, [pc, #116]	@ (8007704 <TIM_OC1_SetConfig+0x11c>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d013      	beq.n	80076ba <TIM_OC1_SetConfig+0xd2>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	4a1c      	ldr	r2, [pc, #112]	@ (8007708 <TIM_OC1_SetConfig+0x120>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d00f      	beq.n	80076ba <TIM_OC1_SetConfig+0xd2>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	4a1b      	ldr	r2, [pc, #108]	@ (800770c <TIM_OC1_SetConfig+0x124>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d00b      	beq.n	80076ba <TIM_OC1_SetConfig+0xd2>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	4a1a      	ldr	r2, [pc, #104]	@ (8007710 <TIM_OC1_SetConfig+0x128>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d007      	beq.n	80076ba <TIM_OC1_SetConfig+0xd2>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	4a19      	ldr	r2, [pc, #100]	@ (8007714 <TIM_OC1_SetConfig+0x12c>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d003      	beq.n	80076ba <TIM_OC1_SetConfig+0xd2>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	4a18      	ldr	r2, [pc, #96]	@ (8007718 <TIM_OC1_SetConfig+0x130>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d111      	bne.n	80076de <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80076c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80076c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	695b      	ldr	r3, [r3, #20]
 80076ce:	693a      	ldr	r2, [r7, #16]
 80076d0:	4313      	orrs	r3, r2
 80076d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	699b      	ldr	r3, [r3, #24]
 80076d8:	693a      	ldr	r2, [r7, #16]
 80076da:	4313      	orrs	r3, r2
 80076dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	693a      	ldr	r2, [r7, #16]
 80076e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	68fa      	ldr	r2, [r7, #12]
 80076e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	685a      	ldr	r2, [r3, #4]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	697a      	ldr	r2, [r7, #20]
 80076f6:	621a      	str	r2, [r3, #32]
}
 80076f8:	bf00      	nop
 80076fa:	371c      	adds	r7, #28
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr
 8007704:	40012c00 	.word	0x40012c00
 8007708:	40013400 	.word	0x40013400
 800770c:	40014000 	.word	0x40014000
 8007710:	40014400 	.word	0x40014400
 8007714:	40014800 	.word	0x40014800
 8007718:	40015000 	.word	0x40015000

0800771c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800771c:	b480      	push	{r7}
 800771e:	b087      	sub	sp, #28
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6a1b      	ldr	r3, [r3, #32]
 800772a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6a1b      	ldr	r3, [r3, #32]
 8007730:	f023 0210 	bic.w	r2, r3, #16
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	699b      	ldr	r3, [r3, #24]
 8007742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800774a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800774e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007756:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	021b      	lsls	r3, r3, #8
 800775e:	68fa      	ldr	r2, [r7, #12]
 8007760:	4313      	orrs	r3, r2
 8007762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	f023 0320 	bic.w	r3, r3, #32
 800776a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	011b      	lsls	r3, r3, #4
 8007772:	697a      	ldr	r2, [r7, #20]
 8007774:	4313      	orrs	r3, r2
 8007776:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	4a2c      	ldr	r2, [pc, #176]	@ (800782c <TIM_OC2_SetConfig+0x110>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d007      	beq.n	8007790 <TIM_OC2_SetConfig+0x74>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	4a2b      	ldr	r2, [pc, #172]	@ (8007830 <TIM_OC2_SetConfig+0x114>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d003      	beq.n	8007790 <TIM_OC2_SetConfig+0x74>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	4a2a      	ldr	r2, [pc, #168]	@ (8007834 <TIM_OC2_SetConfig+0x118>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d10d      	bne.n	80077ac <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007796:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	68db      	ldr	r3, [r3, #12]
 800779c:	011b      	lsls	r3, r3, #4
 800779e:	697a      	ldr	r2, [r7, #20]
 80077a0:	4313      	orrs	r3, r2
 80077a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80077aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	4a1f      	ldr	r2, [pc, #124]	@ (800782c <TIM_OC2_SetConfig+0x110>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d013      	beq.n	80077dc <TIM_OC2_SetConfig+0xc0>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	4a1e      	ldr	r2, [pc, #120]	@ (8007830 <TIM_OC2_SetConfig+0x114>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d00f      	beq.n	80077dc <TIM_OC2_SetConfig+0xc0>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	4a1e      	ldr	r2, [pc, #120]	@ (8007838 <TIM_OC2_SetConfig+0x11c>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d00b      	beq.n	80077dc <TIM_OC2_SetConfig+0xc0>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	4a1d      	ldr	r2, [pc, #116]	@ (800783c <TIM_OC2_SetConfig+0x120>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d007      	beq.n	80077dc <TIM_OC2_SetConfig+0xc0>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	4a1c      	ldr	r2, [pc, #112]	@ (8007840 <TIM_OC2_SetConfig+0x124>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d003      	beq.n	80077dc <TIM_OC2_SetConfig+0xc0>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	4a17      	ldr	r2, [pc, #92]	@ (8007834 <TIM_OC2_SetConfig+0x118>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d113      	bne.n	8007804 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80077e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80077ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	695b      	ldr	r3, [r3, #20]
 80077f0:	009b      	lsls	r3, r3, #2
 80077f2:	693a      	ldr	r2, [r7, #16]
 80077f4:	4313      	orrs	r3, r2
 80077f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	699b      	ldr	r3, [r3, #24]
 80077fc:	009b      	lsls	r3, r3, #2
 80077fe:	693a      	ldr	r2, [r7, #16]
 8007800:	4313      	orrs	r3, r2
 8007802:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	693a      	ldr	r2, [r7, #16]
 8007808:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	68fa      	ldr	r2, [r7, #12]
 800780e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	685a      	ldr	r2, [r3, #4]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	697a      	ldr	r2, [r7, #20]
 800781c:	621a      	str	r2, [r3, #32]
}
 800781e:	bf00      	nop
 8007820:	371c      	adds	r7, #28
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr
 800782a:	bf00      	nop
 800782c:	40012c00 	.word	0x40012c00
 8007830:	40013400 	.word	0x40013400
 8007834:	40015000 	.word	0x40015000
 8007838:	40014000 	.word	0x40014000
 800783c:	40014400 	.word	0x40014400
 8007840:	40014800 	.word	0x40014800

08007844 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007844:	b480      	push	{r7}
 8007846:	b087      	sub	sp, #28
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6a1b      	ldr	r3, [r3, #32]
 8007852:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6a1b      	ldr	r3, [r3, #32]
 8007858:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	69db      	ldr	r3, [r3, #28]
 800786a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007872:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f023 0303 	bic.w	r3, r3, #3
 800787e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	68fa      	ldr	r2, [r7, #12]
 8007886:	4313      	orrs	r3, r2
 8007888:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007890:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	021b      	lsls	r3, r3, #8
 8007898:	697a      	ldr	r2, [r7, #20]
 800789a:	4313      	orrs	r3, r2
 800789c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	4a2b      	ldr	r2, [pc, #172]	@ (8007950 <TIM_OC3_SetConfig+0x10c>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d007      	beq.n	80078b6 <TIM_OC3_SetConfig+0x72>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	4a2a      	ldr	r2, [pc, #168]	@ (8007954 <TIM_OC3_SetConfig+0x110>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d003      	beq.n	80078b6 <TIM_OC3_SetConfig+0x72>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4a29      	ldr	r2, [pc, #164]	@ (8007958 <TIM_OC3_SetConfig+0x114>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d10d      	bne.n	80078d2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80078bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	021b      	lsls	r3, r3, #8
 80078c4:	697a      	ldr	r2, [r7, #20]
 80078c6:	4313      	orrs	r3, r2
 80078c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80078d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4a1e      	ldr	r2, [pc, #120]	@ (8007950 <TIM_OC3_SetConfig+0x10c>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d013      	beq.n	8007902 <TIM_OC3_SetConfig+0xbe>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4a1d      	ldr	r2, [pc, #116]	@ (8007954 <TIM_OC3_SetConfig+0x110>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d00f      	beq.n	8007902 <TIM_OC3_SetConfig+0xbe>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4a1d      	ldr	r2, [pc, #116]	@ (800795c <TIM_OC3_SetConfig+0x118>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d00b      	beq.n	8007902 <TIM_OC3_SetConfig+0xbe>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4a1c      	ldr	r2, [pc, #112]	@ (8007960 <TIM_OC3_SetConfig+0x11c>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d007      	beq.n	8007902 <TIM_OC3_SetConfig+0xbe>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4a1b      	ldr	r2, [pc, #108]	@ (8007964 <TIM_OC3_SetConfig+0x120>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d003      	beq.n	8007902 <TIM_OC3_SetConfig+0xbe>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4a16      	ldr	r2, [pc, #88]	@ (8007958 <TIM_OC3_SetConfig+0x114>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d113      	bne.n	800792a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007908:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007910:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	695b      	ldr	r3, [r3, #20]
 8007916:	011b      	lsls	r3, r3, #4
 8007918:	693a      	ldr	r2, [r7, #16]
 800791a:	4313      	orrs	r3, r2
 800791c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	699b      	ldr	r3, [r3, #24]
 8007922:	011b      	lsls	r3, r3, #4
 8007924:	693a      	ldr	r2, [r7, #16]
 8007926:	4313      	orrs	r3, r2
 8007928:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	693a      	ldr	r2, [r7, #16]
 800792e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	68fa      	ldr	r2, [r7, #12]
 8007934:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	685a      	ldr	r2, [r3, #4]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	697a      	ldr	r2, [r7, #20]
 8007942:	621a      	str	r2, [r3, #32]
}
 8007944:	bf00      	nop
 8007946:	371c      	adds	r7, #28
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr
 8007950:	40012c00 	.word	0x40012c00
 8007954:	40013400 	.word	0x40013400
 8007958:	40015000 	.word	0x40015000
 800795c:	40014000 	.word	0x40014000
 8007960:	40014400 	.word	0x40014400
 8007964:	40014800 	.word	0x40014800

08007968 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007968:	b480      	push	{r7}
 800796a:	b087      	sub	sp, #28
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6a1b      	ldr	r3, [r3, #32]
 8007976:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6a1b      	ldr	r3, [r3, #32]
 800797c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	69db      	ldr	r3, [r3, #28]
 800798e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007996:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800799a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80079a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	021b      	lsls	r3, r3, #8
 80079aa:	68fa      	ldr	r2, [r7, #12]
 80079ac:	4313      	orrs	r3, r2
 80079ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80079b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	031b      	lsls	r3, r3, #12
 80079be:	697a      	ldr	r2, [r7, #20]
 80079c0:	4313      	orrs	r3, r2
 80079c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	4a2c      	ldr	r2, [pc, #176]	@ (8007a78 <TIM_OC4_SetConfig+0x110>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d007      	beq.n	80079dc <TIM_OC4_SetConfig+0x74>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	4a2b      	ldr	r2, [pc, #172]	@ (8007a7c <TIM_OC4_SetConfig+0x114>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d003      	beq.n	80079dc <TIM_OC4_SetConfig+0x74>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	4a2a      	ldr	r2, [pc, #168]	@ (8007a80 <TIM_OC4_SetConfig+0x118>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d10d      	bne.n	80079f8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80079e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	68db      	ldr	r3, [r3, #12]
 80079e8:	031b      	lsls	r3, r3, #12
 80079ea:	697a      	ldr	r2, [r7, #20]
 80079ec:	4313      	orrs	r3, r2
 80079ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80079f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	4a1f      	ldr	r2, [pc, #124]	@ (8007a78 <TIM_OC4_SetConfig+0x110>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d013      	beq.n	8007a28 <TIM_OC4_SetConfig+0xc0>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	4a1e      	ldr	r2, [pc, #120]	@ (8007a7c <TIM_OC4_SetConfig+0x114>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d00f      	beq.n	8007a28 <TIM_OC4_SetConfig+0xc0>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	4a1e      	ldr	r2, [pc, #120]	@ (8007a84 <TIM_OC4_SetConfig+0x11c>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d00b      	beq.n	8007a28 <TIM_OC4_SetConfig+0xc0>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	4a1d      	ldr	r2, [pc, #116]	@ (8007a88 <TIM_OC4_SetConfig+0x120>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d007      	beq.n	8007a28 <TIM_OC4_SetConfig+0xc0>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	4a1c      	ldr	r2, [pc, #112]	@ (8007a8c <TIM_OC4_SetConfig+0x124>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d003      	beq.n	8007a28 <TIM_OC4_SetConfig+0xc0>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	4a17      	ldr	r2, [pc, #92]	@ (8007a80 <TIM_OC4_SetConfig+0x118>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d113      	bne.n	8007a50 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007a2e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007a36:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	695b      	ldr	r3, [r3, #20]
 8007a3c:	019b      	lsls	r3, r3, #6
 8007a3e:	693a      	ldr	r2, [r7, #16]
 8007a40:	4313      	orrs	r3, r2
 8007a42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	699b      	ldr	r3, [r3, #24]
 8007a48:	019b      	lsls	r3, r3, #6
 8007a4a:	693a      	ldr	r2, [r7, #16]
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	693a      	ldr	r2, [r7, #16]
 8007a54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	685a      	ldr	r2, [r3, #4]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	697a      	ldr	r2, [r7, #20]
 8007a68:	621a      	str	r2, [r3, #32]
}
 8007a6a:	bf00      	nop
 8007a6c:	371c      	adds	r7, #28
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr
 8007a76:	bf00      	nop
 8007a78:	40012c00 	.word	0x40012c00
 8007a7c:	40013400 	.word	0x40013400
 8007a80:	40015000 	.word	0x40015000
 8007a84:	40014000 	.word	0x40014000
 8007a88:	40014400 	.word	0x40014400
 8007a8c:	40014800 	.word	0x40014800

08007a90 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b087      	sub	sp, #28
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6a1b      	ldr	r3, [r3, #32]
 8007a9e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6a1b      	ldr	r3, [r3, #32]
 8007aa4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007abe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ac2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	68fa      	ldr	r2, [r7, #12]
 8007aca:	4313      	orrs	r3, r2
 8007acc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007ad4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	041b      	lsls	r3, r3, #16
 8007adc:	693a      	ldr	r2, [r7, #16]
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	4a19      	ldr	r2, [pc, #100]	@ (8007b4c <TIM_OC5_SetConfig+0xbc>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d013      	beq.n	8007b12 <TIM_OC5_SetConfig+0x82>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	4a18      	ldr	r2, [pc, #96]	@ (8007b50 <TIM_OC5_SetConfig+0xc0>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d00f      	beq.n	8007b12 <TIM_OC5_SetConfig+0x82>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	4a17      	ldr	r2, [pc, #92]	@ (8007b54 <TIM_OC5_SetConfig+0xc4>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d00b      	beq.n	8007b12 <TIM_OC5_SetConfig+0x82>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4a16      	ldr	r2, [pc, #88]	@ (8007b58 <TIM_OC5_SetConfig+0xc8>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d007      	beq.n	8007b12 <TIM_OC5_SetConfig+0x82>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	4a15      	ldr	r2, [pc, #84]	@ (8007b5c <TIM_OC5_SetConfig+0xcc>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d003      	beq.n	8007b12 <TIM_OC5_SetConfig+0x82>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	4a14      	ldr	r2, [pc, #80]	@ (8007b60 <TIM_OC5_SetConfig+0xd0>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d109      	bne.n	8007b26 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b18:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	695b      	ldr	r3, [r3, #20]
 8007b1e:	021b      	lsls	r3, r3, #8
 8007b20:	697a      	ldr	r2, [r7, #20]
 8007b22:	4313      	orrs	r3, r2
 8007b24:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	697a      	ldr	r2, [r7, #20]
 8007b2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	68fa      	ldr	r2, [r7, #12]
 8007b30:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	685a      	ldr	r2, [r3, #4]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	693a      	ldr	r2, [r7, #16]
 8007b3e:	621a      	str	r2, [r3, #32]
}
 8007b40:	bf00      	nop
 8007b42:	371c      	adds	r7, #28
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr
 8007b4c:	40012c00 	.word	0x40012c00
 8007b50:	40013400 	.word	0x40013400
 8007b54:	40014000 	.word	0x40014000
 8007b58:	40014400 	.word	0x40014400
 8007b5c:	40014800 	.word	0x40014800
 8007b60:	40015000 	.word	0x40015000

08007b64 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b087      	sub	sp, #28
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6a1b      	ldr	r3, [r3, #32]
 8007b72:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6a1b      	ldr	r3, [r3, #32]
 8007b78:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007b92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	021b      	lsls	r3, r3, #8
 8007b9e:	68fa      	ldr	r2, [r7, #12]
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007baa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	689b      	ldr	r3, [r3, #8]
 8007bb0:	051b      	lsls	r3, r3, #20
 8007bb2:	693a      	ldr	r2, [r7, #16]
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	4a1a      	ldr	r2, [pc, #104]	@ (8007c24 <TIM_OC6_SetConfig+0xc0>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d013      	beq.n	8007be8 <TIM_OC6_SetConfig+0x84>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	4a19      	ldr	r2, [pc, #100]	@ (8007c28 <TIM_OC6_SetConfig+0xc4>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d00f      	beq.n	8007be8 <TIM_OC6_SetConfig+0x84>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	4a18      	ldr	r2, [pc, #96]	@ (8007c2c <TIM_OC6_SetConfig+0xc8>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d00b      	beq.n	8007be8 <TIM_OC6_SetConfig+0x84>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	4a17      	ldr	r2, [pc, #92]	@ (8007c30 <TIM_OC6_SetConfig+0xcc>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d007      	beq.n	8007be8 <TIM_OC6_SetConfig+0x84>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	4a16      	ldr	r2, [pc, #88]	@ (8007c34 <TIM_OC6_SetConfig+0xd0>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d003      	beq.n	8007be8 <TIM_OC6_SetConfig+0x84>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	4a15      	ldr	r2, [pc, #84]	@ (8007c38 <TIM_OC6_SetConfig+0xd4>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d109      	bne.n	8007bfc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007bee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	695b      	ldr	r3, [r3, #20]
 8007bf4:	029b      	lsls	r3, r3, #10
 8007bf6:	697a      	ldr	r2, [r7, #20]
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	697a      	ldr	r2, [r7, #20]
 8007c00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	68fa      	ldr	r2, [r7, #12]
 8007c06:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	685a      	ldr	r2, [r3, #4]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	693a      	ldr	r2, [r7, #16]
 8007c14:	621a      	str	r2, [r3, #32]
}
 8007c16:	bf00      	nop
 8007c18:	371c      	adds	r7, #28
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr
 8007c22:	bf00      	nop
 8007c24:	40012c00 	.word	0x40012c00
 8007c28:	40013400 	.word	0x40013400
 8007c2c:	40014000 	.word	0x40014000
 8007c30:	40014400 	.word	0x40014400
 8007c34:	40014800 	.word	0x40014800
 8007c38:	40015000 	.word	0x40015000

08007c3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b087      	sub	sp, #28
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	60f8      	str	r0, [r7, #12]
 8007c44:	60b9      	str	r1, [r7, #8]
 8007c46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	6a1b      	ldr	r3, [r3, #32]
 8007c4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	6a1b      	ldr	r3, [r3, #32]
 8007c52:	f023 0201 	bic.w	r2, r3, #1
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	699b      	ldr	r3, [r3, #24]
 8007c5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007c66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	011b      	lsls	r3, r3, #4
 8007c6c:	693a      	ldr	r2, [r7, #16]
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	f023 030a 	bic.w	r3, r3, #10
 8007c78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007c7a:	697a      	ldr	r2, [r7, #20]
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	693a      	ldr	r2, [r7, #16]
 8007c86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	697a      	ldr	r2, [r7, #20]
 8007c8c:	621a      	str	r2, [r3, #32]
}
 8007c8e:	bf00      	nop
 8007c90:	371c      	adds	r7, #28
 8007c92:	46bd      	mov	sp, r7
 8007c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c98:	4770      	bx	lr

08007c9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c9a:	b480      	push	{r7}
 8007c9c:	b087      	sub	sp, #28
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	60f8      	str	r0, [r7, #12]
 8007ca2:	60b9      	str	r1, [r7, #8]
 8007ca4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	6a1b      	ldr	r3, [r3, #32]
 8007caa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	6a1b      	ldr	r3, [r3, #32]
 8007cb0:	f023 0210 	bic.w	r2, r3, #16
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	699b      	ldr	r3, [r3, #24]
 8007cbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007cc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	031b      	lsls	r3, r3, #12
 8007cca:	693a      	ldr	r2, [r7, #16]
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007cd6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	011b      	lsls	r3, r3, #4
 8007cdc:	697a      	ldr	r2, [r7, #20]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	693a      	ldr	r2, [r7, #16]
 8007ce6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	697a      	ldr	r2, [r7, #20]
 8007cec:	621a      	str	r2, [r3, #32]
}
 8007cee:	bf00      	nop
 8007cf0:	371c      	adds	r7, #28
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr

08007cfa <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007cfa:	b480      	push	{r7}
 8007cfc:	b085      	sub	sp, #20
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
 8007d02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007d10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d16:	683a      	ldr	r2, [r7, #0]
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	f043 0307 	orr.w	r3, r3, #7
 8007d20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	68fa      	ldr	r2, [r7, #12]
 8007d26:	609a      	str	r2, [r3, #8]
}
 8007d28:	bf00      	nop
 8007d2a:	3714      	adds	r7, #20
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr

08007d34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b087      	sub	sp, #28
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	60b9      	str	r1, [r7, #8]
 8007d3e:	607a      	str	r2, [r7, #4]
 8007d40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007d4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	021a      	lsls	r2, r3, #8
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	431a      	orrs	r2, r3
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	697a      	ldr	r2, [r7, #20]
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	697a      	ldr	r2, [r7, #20]
 8007d66:	609a      	str	r2, [r3, #8]
}
 8007d68:	bf00      	nop
 8007d6a:	371c      	adds	r7, #28
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr

08007d74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b087      	sub	sp, #28
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	60b9      	str	r1, [r7, #8]
 8007d7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	f003 031f 	and.w	r3, r3, #31
 8007d86:	2201      	movs	r2, #1
 8007d88:	fa02 f303 	lsl.w	r3, r2, r3
 8007d8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	6a1a      	ldr	r2, [r3, #32]
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	43db      	mvns	r3, r3
 8007d96:	401a      	ands	r2, r3
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	6a1a      	ldr	r2, [r3, #32]
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	f003 031f 	and.w	r3, r3, #31
 8007da6:	6879      	ldr	r1, [r7, #4]
 8007da8:	fa01 f303 	lsl.w	r3, r1, r3
 8007dac:	431a      	orrs	r2, r3
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	621a      	str	r2, [r3, #32]
}
 8007db2:	bf00      	nop
 8007db4:	371c      	adds	r7, #28
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr
	...

08007dc0 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b083      	sub	sp, #12
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	4a26      	ldr	r2, [pc, #152]	@ (8007e64 <TIM_ResetCallback+0xa4>)
 8007dcc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	4a25      	ldr	r2, [pc, #148]	@ (8007e68 <TIM_ResetCallback+0xa8>)
 8007dd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	4a24      	ldr	r2, [pc, #144]	@ (8007e6c <TIM_ResetCallback+0xac>)
 8007ddc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	4a23      	ldr	r2, [pc, #140]	@ (8007e70 <TIM_ResetCallback+0xb0>)
 8007de4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	4a22      	ldr	r2, [pc, #136]	@ (8007e74 <TIM_ResetCallback+0xb4>)
 8007dec:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	4a21      	ldr	r2, [pc, #132]	@ (8007e78 <TIM_ResetCallback+0xb8>)
 8007df4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	4a20      	ldr	r2, [pc, #128]	@ (8007e7c <TIM_ResetCallback+0xbc>)
 8007dfc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	4a1f      	ldr	r2, [pc, #124]	@ (8007e80 <TIM_ResetCallback+0xc0>)
 8007e04:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	4a1e      	ldr	r2, [pc, #120]	@ (8007e84 <TIM_ResetCallback+0xc4>)
 8007e0c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	4a1d      	ldr	r2, [pc, #116]	@ (8007e88 <TIM_ResetCallback+0xc8>)
 8007e14:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	4a1c      	ldr	r2, [pc, #112]	@ (8007e8c <TIM_ResetCallback+0xcc>)
 8007e1c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	4a1b      	ldr	r2, [pc, #108]	@ (8007e90 <TIM_ResetCallback+0xd0>)
 8007e24:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	4a1a      	ldr	r2, [pc, #104]	@ (8007e94 <TIM_ResetCallback+0xd4>)
 8007e2c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	4a19      	ldr	r2, [pc, #100]	@ (8007e98 <TIM_ResetCallback+0xd8>)
 8007e34:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	4a18      	ldr	r2, [pc, #96]	@ (8007e9c <TIM_ResetCallback+0xdc>)
 8007e3c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	4a17      	ldr	r2, [pc, #92]	@ (8007ea0 <TIM_ResetCallback+0xe0>)
 8007e44:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	4a16      	ldr	r2, [pc, #88]	@ (8007ea4 <TIM_ResetCallback+0xe4>)
 8007e4c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	4a15      	ldr	r2, [pc, #84]	@ (8007ea8 <TIM_ResetCallback+0xe8>)
 8007e54:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8007e58:	bf00      	nop
 8007e5a:	370c      	adds	r7, #12
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr
 8007e64:	080021e5 	.word	0x080021e5
 8007e68:	0800710d 	.word	0x0800710d
 8007e6c:	08007185 	.word	0x08007185
 8007e70:	08007199 	.word	0x08007199
 8007e74:	08007135 	.word	0x08007135
 8007e78:	08007149 	.word	0x08007149
 8007e7c:	08007121 	.word	0x08007121
 8007e80:	0800715d 	.word	0x0800715d
 8007e84:	08007171 	.word	0x08007171
 8007e88:	080071ad 	.word	0x080071ad
 8007e8c:	08008101 	.word	0x08008101
 8007e90:	08008115 	.word	0x08008115
 8007e94:	08008129 	.word	0x08008129
 8007e98:	0800813d 	.word	0x0800813d
 8007e9c:	08008151 	.word	0x08008151
 8007ea0:	08008165 	.word	0x08008165
 8007ea4:	08008179 	.word	0x08008179
 8007ea8:	0800818d 	.word	0x0800818d

08007eac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b085      	sub	sp, #20
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	d101      	bne.n	8007ec4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ec0:	2302      	movs	r3, #2
 8007ec2:	e074      	b.n	8007fae <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2202      	movs	r2, #2
 8007ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	689b      	ldr	r3, [r3, #8]
 8007ee2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a34      	ldr	r2, [pc, #208]	@ (8007fbc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d009      	beq.n	8007f02 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a33      	ldr	r2, [pc, #204]	@ (8007fc0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d004      	beq.n	8007f02 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a31      	ldr	r2, [pc, #196]	@ (8007fc4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d108      	bne.n	8007f14 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007f08:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	68fa      	ldr	r2, [r7, #12]
 8007f10:	4313      	orrs	r3, r2
 8007f12:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007f1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	68fa      	ldr	r2, [r7, #12]
 8007f26:	4313      	orrs	r3, r2
 8007f28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	68fa      	ldr	r2, [r7, #12]
 8007f30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a21      	ldr	r2, [pc, #132]	@ (8007fbc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d022      	beq.n	8007f82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f44:	d01d      	beq.n	8007f82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a1f      	ldr	r2, [pc, #124]	@ (8007fc8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d018      	beq.n	8007f82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a1d      	ldr	r2, [pc, #116]	@ (8007fcc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d013      	beq.n	8007f82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a1c      	ldr	r2, [pc, #112]	@ (8007fd0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d00e      	beq.n	8007f82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a15      	ldr	r2, [pc, #84]	@ (8007fc0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d009      	beq.n	8007f82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a18      	ldr	r2, [pc, #96]	@ (8007fd4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d004      	beq.n	8007f82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a11      	ldr	r2, [pc, #68]	@ (8007fc4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d10c      	bne.n	8007f9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	68ba      	ldr	r2, [r7, #8]
 8007f90:	4313      	orrs	r3, r2
 8007f92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	68ba      	ldr	r2, [r7, #8]
 8007f9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007fac:	2300      	movs	r3, #0
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3714      	adds	r7, #20
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr
 8007fba:	bf00      	nop
 8007fbc:	40012c00 	.word	0x40012c00
 8007fc0:	40013400 	.word	0x40013400
 8007fc4:	40015000 	.word	0x40015000
 8007fc8:	40000400 	.word	0x40000400
 8007fcc:	40000800 	.word	0x40000800
 8007fd0:	40000c00 	.word	0x40000c00
 8007fd4:	40014000 	.word	0x40014000

08007fd8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b085      	sub	sp, #20
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d101      	bne.n	8007ff4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007ff0:	2302      	movs	r3, #2
 8007ff2:	e078      	b.n	80080e6 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	68db      	ldr	r3, [r3, #12]
 8008006:	4313      	orrs	r3, r2
 8008008:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	4313      	orrs	r3, r2
 8008016:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	4313      	orrs	r3, r2
 8008024:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4313      	orrs	r3, r2
 8008032:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	691b      	ldr	r3, [r3, #16]
 800803e:	4313      	orrs	r3, r2
 8008040:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	695b      	ldr	r3, [r3, #20]
 800804c:	4313      	orrs	r3, r2
 800804e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800805a:	4313      	orrs	r3, r2
 800805c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	699b      	ldr	r3, [r3, #24]
 8008068:	041b      	lsls	r3, r3, #16
 800806a:	4313      	orrs	r3, r2
 800806c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	69db      	ldr	r3, [r3, #28]
 8008078:	4313      	orrs	r3, r2
 800807a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a1c      	ldr	r2, [pc, #112]	@ (80080f4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d009      	beq.n	800809a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a1b      	ldr	r2, [pc, #108]	@ (80080f8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d004      	beq.n	800809a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a19      	ldr	r2, [pc, #100]	@ (80080fc <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d11c      	bne.n	80080d4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080a4:	051b      	lsls	r3, r3, #20
 80080a6:	4313      	orrs	r3, r2
 80080a8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	6a1b      	ldr	r3, [r3, #32]
 80080b4:	4313      	orrs	r3, r2
 80080b6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080c2:	4313      	orrs	r3, r2
 80080c4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080d0:	4313      	orrs	r3, r2
 80080d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	68fa      	ldr	r2, [r7, #12]
 80080da:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2200      	movs	r2, #0
 80080e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80080e4:	2300      	movs	r3, #0
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3714      	adds	r7, #20
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr
 80080f2:	bf00      	nop
 80080f4:	40012c00 	.word	0x40012c00
 80080f8:	40013400 	.word	0x40013400
 80080fc:	40015000 	.word	0x40015000

08008100 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008100:	b480      	push	{r7}
 8008102:	b083      	sub	sp, #12
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008108:	bf00      	nop
 800810a:	370c      	adds	r7, #12
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr

08008114 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008114:	b480      	push	{r7}
 8008116:	b083      	sub	sp, #12
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800811c:	bf00      	nop
 800811e:	370c      	adds	r7, #12
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr

08008128 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008128:	b480      	push	{r7}
 800812a:	b083      	sub	sp, #12
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008130:	bf00      	nop
 8008132:	370c      	adds	r7, #12
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr

0800813c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800813c:	b480      	push	{r7}
 800813e:	b083      	sub	sp, #12
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008144:	bf00      	nop
 8008146:	370c      	adds	r7, #12
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr

08008150 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008150:	b480      	push	{r7}
 8008152:	b083      	sub	sp, #12
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008158:	bf00      	nop
 800815a:	370c      	adds	r7, #12
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr

08008164 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008164:	b480      	push	{r7}
 8008166:	b083      	sub	sp, #12
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800816c:	bf00      	nop
 800816e:	370c      	adds	r7, #12
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr

08008178 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008178:	b480      	push	{r7}
 800817a:	b083      	sub	sp, #12
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008180:	bf00      	nop
 8008182:	370c      	adds	r7, #12
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr

0800818c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800818c:	b480      	push	{r7}
 800818e:	b083      	sub	sp, #12
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008194:	bf00      	nop
 8008196:	370c      	adds	r7, #12
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr

080081a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b082      	sub	sp, #8
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d101      	bne.n	80081b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80081ae:	2301      	movs	r3, #1
 80081b0:	e050      	b.n	8008254 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d114      	bne.n	80081e6 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f000 fe37 	bl	8008e38 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d103      	bne.n	80081dc <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	4a21      	ldr	r2, [pc, #132]	@ (800825c <HAL_UART_Init+0xbc>)
 80081d8:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2224      	movs	r2, #36	@ 0x24
 80081ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f022 0201 	bic.w	r2, r2, #1
 80081fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008202:	2b00      	cmp	r3, #0
 8008204:	d002      	beq.n	800820c <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f001 f964 	bl	80094d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f000 fe65 	bl	8008edc <UART_SetConfig>
 8008212:	4603      	mov	r3, r0
 8008214:	2b01      	cmp	r3, #1
 8008216:	d101      	bne.n	800821c <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8008218:	2301      	movs	r3, #1
 800821a:	e01b      	b.n	8008254 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	685a      	ldr	r2, [r3, #4]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800822a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	689a      	ldr	r2, [r3, #8]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800823a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f042 0201 	orr.w	r2, r2, #1
 800824a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f001 f9e3 	bl	8009618 <UART_CheckIdleState>
 8008252:	4603      	mov	r3, r0
}
 8008254:	4618      	mov	r0, r3
 8008256:	3708      	adds	r7, #8
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}
 800825c:	0800288d 	.word	0x0800288d

08008260 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8008260:	b480      	push	{r7}
 8008262:	b087      	sub	sp, #28
 8008264:	af00      	add	r7, sp, #0
 8008266:	60f8      	str	r0, [r7, #12]
 8008268:	460b      	mov	r3, r1
 800826a:	607a      	str	r2, [r7, #4]
 800826c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800826e:	2300      	movs	r3, #0
 8008270:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d109      	bne.n	800828c <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800827e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 8008288:	2301      	movs	r3, #1
 800828a:	e09c      	b.n	80083c6 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008292:	2b20      	cmp	r3, #32
 8008294:	d16c      	bne.n	8008370 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8008296:	7afb      	ldrb	r3, [r7, #11]
 8008298:	2b0c      	cmp	r3, #12
 800829a:	d85e      	bhi.n	800835a <HAL_UART_RegisterCallback+0xfa>
 800829c:	a201      	add	r2, pc, #4	@ (adr r2, 80082a4 <HAL_UART_RegisterCallback+0x44>)
 800829e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a2:	bf00      	nop
 80082a4:	080082d9 	.word	0x080082d9
 80082a8:	080082e3 	.word	0x080082e3
 80082ac:	080082ed 	.word	0x080082ed
 80082b0:	080082f7 	.word	0x080082f7
 80082b4:	08008301 	.word	0x08008301
 80082b8:	0800830b 	.word	0x0800830b
 80082bc:	08008315 	.word	0x08008315
 80082c0:	0800831f 	.word	0x0800831f
 80082c4:	08008329 	.word	0x08008329
 80082c8:	08008333 	.word	0x08008333
 80082cc:	0800833d 	.word	0x0800833d
 80082d0:	08008347 	.word	0x08008347
 80082d4:	08008351 	.word	0x08008351
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 80082e0:	e070      	b.n	80083c4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 80082ea:	e06b      	b.n	80083c4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 80082f4:	e066      	b.n	80083c4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	687a      	ldr	r2, [r7, #4]
 80082fa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 80082fe:	e061      	b.n	80083c4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8008308:	e05c      	b.n	80083c4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8008312:	e057      	b.n	80083c4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	687a      	ldr	r2, [r7, #4]
 8008318:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800831c:	e052      	b.n	80083c4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8008326:	e04d      	b.n	80083c4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	687a      	ldr	r2, [r7, #4]
 800832c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8008330:	e048      	b.n	80083c4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800833a:	e043      	b.n	80083c4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8008344:	e03e      	b.n	80083c4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800834e:	e039      	b.n	80083c4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008358:	e034      	b.n	80083c4 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008360:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800836a:	2301      	movs	r3, #1
 800836c:	75fb      	strb	r3, [r7, #23]
        break;
 800836e:	e029      	b.n	80083c4 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008376:	2b00      	cmp	r3, #0
 8008378:	d11a      	bne.n	80083b0 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800837a:	7afb      	ldrb	r3, [r7, #11]
 800837c:	2b0b      	cmp	r3, #11
 800837e:	d002      	beq.n	8008386 <HAL_UART_RegisterCallback+0x126>
 8008380:	2b0c      	cmp	r3, #12
 8008382:	d005      	beq.n	8008390 <HAL_UART_RegisterCallback+0x130>
 8008384:	e009      	b.n	800839a <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	687a      	ldr	r2, [r7, #4]
 800838a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800838e:	e019      	b.n	80083c4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008398:	e014      	b.n	80083c4 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083a0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 80083aa:	2301      	movs	r3, #1
 80083ac:	75fb      	strb	r3, [r7, #23]
        break;
 80083ae:	e009      	b.n	80083c4 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083b6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 80083c0:	2301      	movs	r3, #1
 80083c2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80083c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	371c      	adds	r7, #28
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr
 80083d2:	bf00      	nop

080083d4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b08a      	sub	sp, #40	@ 0x28
 80083d8:	af00      	add	r7, sp, #0
 80083da:	60f8      	str	r0, [r7, #12]
 80083dc:	60b9      	str	r1, [r7, #8]
 80083de:	4613      	mov	r3, r2
 80083e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80083e8:	2b20      	cmp	r3, #32
 80083ea:	d137      	bne.n	800845c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d002      	beq.n	80083f8 <HAL_UART_Receive_IT+0x24>
 80083f2:	88fb      	ldrh	r3, [r7, #6]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d101      	bne.n	80083fc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80083f8:	2301      	movs	r3, #1
 80083fa:	e030      	b.n	800845e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2200      	movs	r2, #0
 8008400:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a18      	ldr	r2, [pc, #96]	@ (8008468 <HAL_UART_Receive_IT+0x94>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d01f      	beq.n	800844c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008416:	2b00      	cmp	r3, #0
 8008418:	d018      	beq.n	800844c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	e853 3f00 	ldrex	r3, [r3]
 8008426:	613b      	str	r3, [r7, #16]
   return(result);
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800842e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	461a      	mov	r2, r3
 8008436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008438:	623b      	str	r3, [r7, #32]
 800843a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800843c:	69f9      	ldr	r1, [r7, #28]
 800843e:	6a3a      	ldr	r2, [r7, #32]
 8008440:	e841 2300 	strex	r3, r2, [r1]
 8008444:	61bb      	str	r3, [r7, #24]
   return(result);
 8008446:	69bb      	ldr	r3, [r7, #24]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d1e6      	bne.n	800841a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800844c:	88fb      	ldrh	r3, [r7, #6]
 800844e:	461a      	mov	r2, r3
 8008450:	68b9      	ldr	r1, [r7, #8]
 8008452:	68f8      	ldr	r0, [r7, #12]
 8008454:	f001 f9f8 	bl	8009848 <UART_Start_Receive_IT>
 8008458:	4603      	mov	r3, r0
 800845a:	e000      	b.n	800845e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800845c:	2302      	movs	r3, #2
  }
}
 800845e:	4618      	mov	r0, r3
 8008460:	3728      	adds	r7, #40	@ 0x28
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	40008000 	.word	0x40008000

0800846c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b08a      	sub	sp, #40	@ 0x28
 8008470:	af00      	add	r7, sp, #0
 8008472:	60f8      	str	r0, [r7, #12]
 8008474:	60b9      	str	r1, [r7, #8]
 8008476:	4613      	mov	r3, r2
 8008478:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008480:	2b20      	cmp	r3, #32
 8008482:	d167      	bne.n	8008554 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d002      	beq.n	8008490 <HAL_UART_Transmit_DMA+0x24>
 800848a:	88fb      	ldrh	r3, [r7, #6]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d101      	bne.n	8008494 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008490:	2301      	movs	r3, #1
 8008492:	e060      	b.n	8008556 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	68ba      	ldr	r2, [r7, #8]
 8008498:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	88fa      	ldrh	r2, [r7, #6]
 800849e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	88fa      	ldrh	r2, [r7, #6]
 80084a6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2200      	movs	r2, #0
 80084ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2221      	movs	r2, #33	@ 0x21
 80084b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d028      	beq.n	8008514 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80084c6:	4a26      	ldr	r2, [pc, #152]	@ (8008560 <HAL_UART_Transmit_DMA+0xf4>)
 80084c8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80084ce:	4a25      	ldr	r2, [pc, #148]	@ (8008564 <HAL_UART_Transmit_DMA+0xf8>)
 80084d0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80084d6:	4a24      	ldr	r2, [pc, #144]	@ (8008568 <HAL_UART_Transmit_DMA+0xfc>)
 80084d8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80084de:	2200      	movs	r2, #0
 80084e0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084ea:	4619      	mov	r1, r3
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	3328      	adds	r3, #40	@ 0x28
 80084f2:	461a      	mov	r2, r3
 80084f4:	88fb      	ldrh	r3, [r7, #6]
 80084f6:	f7fc f801 	bl	80044fc <HAL_DMA_Start_IT>
 80084fa:	4603      	mov	r3, r0
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d009      	beq.n	8008514 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2210      	movs	r2, #16
 8008504:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2220      	movs	r2, #32
 800850c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8008510:	2301      	movs	r3, #1
 8008512:	e020      	b.n	8008556 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	2240      	movs	r2, #64	@ 0x40
 800851a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	3308      	adds	r3, #8
 8008522:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	e853 3f00 	ldrex	r3, [r3]
 800852a:	613b      	str	r3, [r7, #16]
   return(result);
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008532:	627b      	str	r3, [r7, #36]	@ 0x24
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	3308      	adds	r3, #8
 800853a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800853c:	623a      	str	r2, [r7, #32]
 800853e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008540:	69f9      	ldr	r1, [r7, #28]
 8008542:	6a3a      	ldr	r2, [r7, #32]
 8008544:	e841 2300 	strex	r3, r2, [r1]
 8008548:	61bb      	str	r3, [r7, #24]
   return(result);
 800854a:	69bb      	ldr	r3, [r7, #24]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d1e5      	bne.n	800851c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008550:	2300      	movs	r3, #0
 8008552:	e000      	b.n	8008556 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008554:	2302      	movs	r3, #2
  }
}
 8008556:	4618      	mov	r0, r3
 8008558:	3728      	adds	r7, #40	@ 0x28
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop
 8008560:	08009bdb 	.word	0x08009bdb
 8008564:	08009c79 	.word	0x08009c79
 8008568:	08009c99 	.word	0x08009c99

0800856c <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b09a      	sub	sp, #104	@ 0x68
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800857a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800857c:	e853 3f00 	ldrex	r3, [r3]
 8008580:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008582:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008584:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008588:	667b      	str	r3, [r7, #100]	@ 0x64
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	461a      	mov	r2, r3
 8008590:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008592:	657b      	str	r3, [r7, #84]	@ 0x54
 8008594:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008596:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008598:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800859a:	e841 2300 	strex	r3, r2, [r1]
 800859e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80085a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d1e6      	bne.n	8008574 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	3308      	adds	r3, #8
 80085ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085b0:	e853 3f00 	ldrex	r3, [r3]
 80085b4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80085b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80085bc:	f023 0301 	bic.w	r3, r3, #1
 80085c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	3308      	adds	r3, #8
 80085c8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80085ca:	643a      	str	r2, [r7, #64]	@ 0x40
 80085cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80085d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80085d2:	e841 2300 	strex	r3, r2, [r1]
 80085d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80085d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d1e3      	bne.n	80085a6 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085e2:	2b01      	cmp	r3, #1
 80085e4:	d118      	bne.n	8008618 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ec:	6a3b      	ldr	r3, [r7, #32]
 80085ee:	e853 3f00 	ldrex	r3, [r3]
 80085f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80085f4:	69fb      	ldr	r3, [r7, #28]
 80085f6:	f023 0310 	bic.w	r3, r3, #16
 80085fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	461a      	mov	r2, r3
 8008602:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008604:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008606:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008608:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800860a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800860c:	e841 2300 	strex	r3, r2, [r1]
 8008610:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008614:	2b00      	cmp	r3, #0
 8008616:	d1e6      	bne.n	80085e6 <HAL_UART_AbortReceive+0x7a>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	689b      	ldr	r3, [r3, #8]
 800861e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008622:	2b40      	cmp	r3, #64	@ 0x40
 8008624:	d13b      	bne.n	800869e <HAL_UART_AbortReceive+0x132>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	3308      	adds	r3, #8
 800862c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	e853 3f00 	ldrex	r3, [r3]
 8008634:	60bb      	str	r3, [r7, #8]
   return(result);
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800863c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	3308      	adds	r3, #8
 8008644:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008646:	61ba      	str	r2, [r7, #24]
 8008648:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800864a:	6979      	ldr	r1, [r7, #20]
 800864c:	69ba      	ldr	r2, [r7, #24]
 800864e:	e841 2300 	strex	r3, r2, [r1]
 8008652:	613b      	str	r3, [r7, #16]
   return(result);
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d1e5      	bne.n	8008626 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008660:	2b00      	cmp	r3, #0
 8008662:	d01c      	beq.n	800869e <HAL_UART_AbortReceive+0x132>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800866a:	2200      	movs	r2, #0
 800866c:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008674:	4618      	mov	r0, r3
 8008676:	f7fb ffbc 	bl	80045f2 <HAL_DMA_Abort>
 800867a:	4603      	mov	r3, r0
 800867c:	2b00      	cmp	r3, #0
 800867e:	d00e      	beq.n	800869e <HAL_UART_AbortReceive+0x132>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008686:	4618      	mov	r0, r3
 8008688:	f7fc f922 	bl	80048d0 <HAL_DMA_GetError>
 800868c:	4603      	mov	r3, r0
 800868e:	2b20      	cmp	r3, #32
 8008690:	d105      	bne.n	800869e <HAL_UART_AbortReceive+0x132>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2210      	movs	r2, #16
 8008696:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800869a:	2303      	movs	r3, #3
 800869c:	e017      	b.n	80086ce <HAL_UART_AbortReceive+0x162>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	220f      	movs	r2, #15
 80086ac:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	699a      	ldr	r2, [r3, #24]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f042 0208 	orr.w	r2, r2, #8
 80086bc:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2220      	movs	r2, #32
 80086c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2200      	movs	r2, #0
 80086ca:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 80086cc:	2300      	movs	r3, #0
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3768      	adds	r7, #104	@ 0x68
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}
	...

080086d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b0ba      	sub	sp, #232	@ 0xe8
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	69db      	ldr	r3, [r3, #28]
 80086e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	689b      	ldr	r3, [r3, #8]
 80086fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80086fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008702:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008706:	4013      	ands	r3, r2
 8008708:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800870c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008710:	2b00      	cmp	r3, #0
 8008712:	d11b      	bne.n	800874c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008718:	f003 0320 	and.w	r3, r3, #32
 800871c:	2b00      	cmp	r3, #0
 800871e:	d015      	beq.n	800874c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008724:	f003 0320 	and.w	r3, r3, #32
 8008728:	2b00      	cmp	r3, #0
 800872a:	d105      	bne.n	8008738 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800872c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008730:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008734:	2b00      	cmp	r3, #0
 8008736:	d009      	beq.n	800874c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800873c:	2b00      	cmp	r3, #0
 800873e:	f000 8312 	beq.w	8008d66 <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	4798      	blx	r3
      }
      return;
 800874a:	e30c      	b.n	8008d66 <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800874c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008750:	2b00      	cmp	r3, #0
 8008752:	f000 8129 	beq.w	80089a8 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008756:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800875a:	4b90      	ldr	r3, [pc, #576]	@ (800899c <HAL_UART_IRQHandler+0x2c4>)
 800875c:	4013      	ands	r3, r2
 800875e:	2b00      	cmp	r3, #0
 8008760:	d106      	bne.n	8008770 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008762:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008766:	4b8e      	ldr	r3, [pc, #568]	@ (80089a0 <HAL_UART_IRQHandler+0x2c8>)
 8008768:	4013      	ands	r3, r2
 800876a:	2b00      	cmp	r3, #0
 800876c:	f000 811c 	beq.w	80089a8 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008774:	f003 0301 	and.w	r3, r3, #1
 8008778:	2b00      	cmp	r3, #0
 800877a:	d011      	beq.n	80087a0 <HAL_UART_IRQHandler+0xc8>
 800877c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008780:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008784:	2b00      	cmp	r3, #0
 8008786:	d00b      	beq.n	80087a0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	2201      	movs	r2, #1
 800878e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008796:	f043 0201 	orr.w	r2, r3, #1
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80087a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087a4:	f003 0302 	and.w	r3, r3, #2
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d011      	beq.n	80087d0 <HAL_UART_IRQHandler+0xf8>
 80087ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80087b0:	f003 0301 	and.w	r3, r3, #1
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d00b      	beq.n	80087d0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	2202      	movs	r2, #2
 80087be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087c6:	f043 0204 	orr.w	r2, r3, #4
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80087d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087d4:	f003 0304 	and.w	r3, r3, #4
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d011      	beq.n	8008800 <HAL_UART_IRQHandler+0x128>
 80087dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80087e0:	f003 0301 	and.w	r3, r3, #1
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d00b      	beq.n	8008800 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	2204      	movs	r2, #4
 80087ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087f6:	f043 0202 	orr.w	r2, r3, #2
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008804:	f003 0308 	and.w	r3, r3, #8
 8008808:	2b00      	cmp	r3, #0
 800880a:	d017      	beq.n	800883c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800880c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008810:	f003 0320 	and.w	r3, r3, #32
 8008814:	2b00      	cmp	r3, #0
 8008816:	d105      	bne.n	8008824 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008818:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800881c:	4b5f      	ldr	r3, [pc, #380]	@ (800899c <HAL_UART_IRQHandler+0x2c4>)
 800881e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008820:	2b00      	cmp	r3, #0
 8008822:	d00b      	beq.n	800883c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	2208      	movs	r2, #8
 800882a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008832:	f043 0208 	orr.w	r2, r3, #8
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800883c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008840:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008844:	2b00      	cmp	r3, #0
 8008846:	d012      	beq.n	800886e <HAL_UART_IRQHandler+0x196>
 8008848:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800884c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008850:	2b00      	cmp	r3, #0
 8008852:	d00c      	beq.n	800886e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800885c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008864:	f043 0220 	orr.w	r2, r3, #32
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008874:	2b00      	cmp	r3, #0
 8008876:	f000 8278 	beq.w	8008d6a <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800887a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800887e:	f003 0320 	and.w	r3, r3, #32
 8008882:	2b00      	cmp	r3, #0
 8008884:	d013      	beq.n	80088ae <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008886:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800888a:	f003 0320 	and.w	r3, r3, #32
 800888e:	2b00      	cmp	r3, #0
 8008890:	d105      	bne.n	800889e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008892:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008896:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800889a:	2b00      	cmp	r3, #0
 800889c:	d007      	beq.n	80088ae <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d003      	beq.n	80088ae <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088b4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	689b      	ldr	r3, [r3, #8]
 80088be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088c2:	2b40      	cmp	r3, #64	@ 0x40
 80088c4:	d005      	beq.n	80088d2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80088c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80088ca:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d058      	beq.n	8008984 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f001 f91b 	bl	8009b0e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088e2:	2b40      	cmp	r3, #64	@ 0x40
 80088e4:	d148      	bne.n	8008978 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	3308      	adds	r3, #8
 80088ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80088f4:	e853 3f00 	ldrex	r3, [r3]
 80088f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80088fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008900:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008904:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	3308      	adds	r3, #8
 800890e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008912:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008916:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800891a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800891e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008922:	e841 2300 	strex	r3, r2, [r1]
 8008926:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800892a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800892e:	2b00      	cmp	r3, #0
 8008930:	d1d9      	bne.n	80088e6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008938:	2b00      	cmp	r3, #0
 800893a:	d017      	beq.n	800896c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008942:	4a18      	ldr	r2, [pc, #96]	@ (80089a4 <HAL_UART_IRQHandler+0x2cc>)
 8008944:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800894c:	4618      	mov	r0, r3
 800894e:	f7fb fea9 	bl	80046a4 <HAL_DMA_Abort_IT>
 8008952:	4603      	mov	r3, r0
 8008954:	2b00      	cmp	r3, #0
 8008956:	d01f      	beq.n	8008998 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800895e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008966:	4610      	mov	r0, r2
 8008968:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800896a:	e015      	b.n	8008998 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008976:	e00f      	b.n	8008998 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008982:	e009      	b.n	8008998 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2200      	movs	r2, #0
 8008992:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008996:	e1e8      	b.n	8008d6a <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008998:	bf00      	nop
    return;
 800899a:	e1e6      	b.n	8008d6a <HAL_UART_IRQHandler+0x692>
 800899c:	10000001 	.word	0x10000001
 80089a0:	04000120 	.word	0x04000120
 80089a4:	08009d1d 	.word	0x08009d1d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	f040 8176 	bne.w	8008c9e <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80089b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089b6:	f003 0310 	and.w	r3, r3, #16
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	f000 816f 	beq.w	8008c9e <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80089c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089c4:	f003 0310 	and.w	r3, r3, #16
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	f000 8168 	beq.w	8008c9e <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	2210      	movs	r2, #16
 80089d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	689b      	ldr	r3, [r3, #8]
 80089dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089e0:	2b40      	cmp	r3, #64	@ 0x40
 80089e2:	f040 80dc 	bne.w	8008b9e <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80089f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	f000 80b1 	beq.w	8008b60 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008a04:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	f080 80a9 	bcs.w	8008b60 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008a14:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f003 0320 	and.w	r3, r3, #32
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	f040 8087 	bne.w	8008b3a <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a34:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008a38:	e853 3f00 	ldrex	r3, [r3]
 8008a3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008a40:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008a44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a48:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	461a      	mov	r2, r3
 8008a52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008a56:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008a5a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a5e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008a62:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008a66:	e841 2300 	strex	r3, r2, [r1]
 8008a6a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008a6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d1da      	bne.n	8008a2c <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	3308      	adds	r3, #8
 8008a7c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008a80:	e853 3f00 	ldrex	r3, [r3]
 8008a84:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008a86:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008a88:	f023 0301 	bic.w	r3, r3, #1
 8008a8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	3308      	adds	r3, #8
 8008a96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008a9a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008a9e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008aa2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008aa6:	e841 2300 	strex	r3, r2, [r1]
 8008aaa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008aac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d1e1      	bne.n	8008a76 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	3308      	adds	r3, #8
 8008ab8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008abc:	e853 3f00 	ldrex	r3, [r3]
 8008ac0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008ac2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008ac4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ac8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	3308      	adds	r3, #8
 8008ad2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008ad6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008ad8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ada:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008adc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008ade:	e841 2300 	strex	r3, r2, [r1]
 8008ae2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008ae4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d1e3      	bne.n	8008ab2 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2220      	movs	r2, #32
 8008aee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2200      	movs	r2, #0
 8008af6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008afe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b00:	e853 3f00 	ldrex	r3, [r3]
 8008b04:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008b06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b08:	f023 0310 	bic.w	r3, r3, #16
 8008b0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	461a      	mov	r2, r3
 8008b16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b1a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008b1c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b1e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008b20:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008b22:	e841 2300 	strex	r3, r2, [r1]
 8008b26:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008b28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d1e4      	bne.n	8008af8 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b34:	4618      	mov	r0, r3
 8008b36:	f7fb fd5c 	bl	80045f2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2202      	movs	r2, #2
 8008b3e:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008b46:	687a      	ldr	r2, [r7, #4]
 8008b48:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8008b4c:	687a      	ldr	r2, [r7, #4]
 8008b4e:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8008b52:	b292      	uxth	r2, r2
 8008b54:	1a8a      	subs	r2, r1, r2
 8008b56:	b292      	uxth	r2, r2
 8008b58:	4611      	mov	r1, r2
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008b5e:	e106      	b.n	8008d6e <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008b66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	f040 80ff 	bne.w	8008d6e <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f003 0320 	and.w	r3, r3, #32
 8008b7e:	2b20      	cmp	r3, #32
 8008b80:	f040 80f5 	bne.w	8008d6e <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2202      	movs	r2, #2
 8008b88:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008b90:	687a      	ldr	r2, [r7, #4]
 8008b92:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8008b96:	4611      	mov	r1, r2
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	4798      	blx	r3
      return;
 8008b9c:	e0e7      	b.n	8008d6e <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	1ad3      	subs	r3, r2, r3
 8008bae:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	f000 80d9 	beq.w	8008d72 <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 8008bc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	f000 80d4 	beq.w	8008d72 <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bd2:	e853 3f00 	ldrex	r3, [r3]
 8008bd6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008bd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bda:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008bde:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	461a      	mov	r2, r3
 8008be8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008bec:	647b      	str	r3, [r7, #68]	@ 0x44
 8008bee:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bf0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008bf2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008bf4:	e841 2300 	strex	r3, r2, [r1]
 8008bf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008bfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d1e4      	bne.n	8008bca <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	3308      	adds	r3, #8
 8008c06:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c0a:	e853 3f00 	ldrex	r3, [r3]
 8008c0e:	623b      	str	r3, [r7, #32]
   return(result);
 8008c10:	6a3b      	ldr	r3, [r7, #32]
 8008c12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008c16:	f023 0301 	bic.w	r3, r3, #1
 8008c1a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	3308      	adds	r3, #8
 8008c24:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008c28:	633a      	str	r2, [r7, #48]	@ 0x30
 8008c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c2c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c30:	e841 2300 	strex	r3, r2, [r1]
 8008c34:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d1e1      	bne.n	8008c00 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2220      	movs	r2, #32
 8008c40:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2200      	movs	r2, #0
 8008c48:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	e853 3f00 	ldrex	r3, [r3]
 8008c5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	f023 0310 	bic.w	r3, r3, #16
 8008c64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008c72:	61fb      	str	r3, [r7, #28]
 8008c74:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c76:	69b9      	ldr	r1, [r7, #24]
 8008c78:	69fa      	ldr	r2, [r7, #28]
 8008c7a:	e841 2300 	strex	r3, r2, [r1]
 8008c7e:	617b      	str	r3, [r7, #20]
   return(result);
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d1e4      	bne.n	8008c50 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2202      	movs	r2, #2
 8008c8a:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008c92:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8008c96:	4611      	mov	r1, r2
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008c9c:	e069      	b.n	8008d72 <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ca2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d010      	beq.n	8008ccc <HAL_UART_IRQHandler+0x5f4>
 8008caa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008cae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d00a      	beq.n	8008ccc <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008cbe:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008cca:	e055      	b.n	8008d78 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008ccc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d014      	beq.n	8008d02 <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008cd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008cdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d105      	bne.n	8008cf0 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008ce4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ce8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d008      	beq.n	8008d02 <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d03e      	beq.n	8008d76 <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	4798      	blx	r3
    }
    return;
 8008d00:	e039      	b.n	8008d76 <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d009      	beq.n	8008d22 <HAL_UART_IRQHandler+0x64a>
 8008d0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d003      	beq.n	8008d22 <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f001 f812 	bl	8009d44 <UART_EndTransmit_IT>
    return;
 8008d20:	e02a      	b.n	8008d78 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d00b      	beq.n	8008d46 <HAL_UART_IRQHandler+0x66e>
 8008d2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d32:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d005      	beq.n	8008d46 <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008d44:	e018      	b.n	8008d78 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d4a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d012      	beq.n	8008d78 <HAL_UART_IRQHandler+0x6a0>
 8008d52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	da0e      	bge.n	8008d78 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008d64:	e008      	b.n	8008d78 <HAL_UART_IRQHandler+0x6a0>
      return;
 8008d66:	bf00      	nop
 8008d68:	e006      	b.n	8008d78 <HAL_UART_IRQHandler+0x6a0>
    return;
 8008d6a:	bf00      	nop
 8008d6c:	e004      	b.n	8008d78 <HAL_UART_IRQHandler+0x6a0>
      return;
 8008d6e:	bf00      	nop
 8008d70:	e002      	b.n	8008d78 <HAL_UART_IRQHandler+0x6a0>
      return;
 8008d72:	bf00      	nop
 8008d74:	e000      	b.n	8008d78 <HAL_UART_IRQHandler+0x6a0>
    return;
 8008d76:	bf00      	nop
  }
}
 8008d78:	37e8      	adds	r7, #232	@ 0xe8
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
 8008d7e:	bf00      	nop

08008d80 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b083      	sub	sp, #12
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008d88:	bf00      	nop
 8008d8a:	370c      	adds	r7, #12
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr

08008d94 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008d9c:	bf00      	nop
 8008d9e:	370c      	adds	r7, #12
 8008da0:	46bd      	mov	sp, r7
 8008da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da6:	4770      	bx	lr

08008da8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b083      	sub	sp, #12
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008db0:	bf00      	nop
 8008db2:	370c      	adds	r7, #12
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr

08008dbc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b083      	sub	sp, #12
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008dc4:	bf00      	nop
 8008dc6:	370c      	adds	r7, #12
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr

08008dd0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b083      	sub	sp, #12
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008dd8:	bf00      	nop
 8008dda:	370c      	adds	r7, #12
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr

08008de4 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b083      	sub	sp, #12
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8008dec:	bf00      	nop
 8008dee:	370c      	adds	r7, #12
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr

08008df8 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b083      	sub	sp, #12
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8008e00:	bf00      	nop
 8008e02:	370c      	adds	r7, #12
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr

08008e0c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b083      	sub	sp, #12
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8008e14:	bf00      	nop
 8008e16:	370c      	adds	r7, #12
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr

08008e20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b083      	sub	sp, #12
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	460b      	mov	r3, r1
 8008e2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008e2c:	bf00      	nop
 8008e2e:	370c      	adds	r7, #12
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr

08008e38 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b083      	sub	sp, #12
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	4a1a      	ldr	r2, [pc, #104]	@ (8008eac <UART_InitCallbacksToDefault+0x74>)
 8008e44:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	4a19      	ldr	r2, [pc, #100]	@ (8008eb0 <UART_InitCallbacksToDefault+0x78>)
 8008e4c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	4a18      	ldr	r2, [pc, #96]	@ (8008eb4 <UART_InitCallbacksToDefault+0x7c>)
 8008e54:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	4a17      	ldr	r2, [pc, #92]	@ (8008eb8 <UART_InitCallbacksToDefault+0x80>)
 8008e5c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	4a16      	ldr	r2, [pc, #88]	@ (8008ebc <UART_InitCallbacksToDefault+0x84>)
 8008e64:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	4a15      	ldr	r2, [pc, #84]	@ (8008ec0 <UART_InitCallbacksToDefault+0x88>)
 8008e6c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	4a14      	ldr	r2, [pc, #80]	@ (8008ec4 <UART_InitCallbacksToDefault+0x8c>)
 8008e74:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	4a13      	ldr	r2, [pc, #76]	@ (8008ec8 <UART_InitCallbacksToDefault+0x90>)
 8008e7c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	4a12      	ldr	r2, [pc, #72]	@ (8008ecc <UART_InitCallbacksToDefault+0x94>)
 8008e84:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	4a11      	ldr	r2, [pc, #68]	@ (8008ed0 <UART_InitCallbacksToDefault+0x98>)
 8008e8c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	4a10      	ldr	r2, [pc, #64]	@ (8008ed4 <UART_InitCallbacksToDefault+0x9c>)
 8008e94:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	4a0f      	ldr	r2, [pc, #60]	@ (8008ed8 <UART_InitCallbacksToDefault+0xa0>)
 8008e9c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8008ea0:	bf00      	nop
 8008ea2:	370c      	adds	r7, #12
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr
 8008eac:	08008d95 	.word	0x08008d95
 8008eb0:	08008d81 	.word	0x08008d81
 8008eb4:	08008dbd 	.word	0x08008dbd
 8008eb8:	08008da9 	.word	0x08008da9
 8008ebc:	08008dd1 	.word	0x08008dd1
 8008ec0:	08008de5 	.word	0x08008de5
 8008ec4:	08008df9 	.word	0x08008df9
 8008ec8:	08008e0d 	.word	0x08008e0d
 8008ecc:	0800a809 	.word	0x0800a809
 8008ed0:	0800a81d 	.word	0x0800a81d
 8008ed4:	0800a831 	.word	0x0800a831
 8008ed8:	08008e21 	.word	0x08008e21

08008edc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008edc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ee0:	b08c      	sub	sp, #48	@ 0x30
 8008ee2:	af00      	add	r7, sp, #0
 8008ee4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	689a      	ldr	r2, [r3, #8]
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	691b      	ldr	r3, [r3, #16]
 8008ef4:	431a      	orrs	r2, r3
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	695b      	ldr	r3, [r3, #20]
 8008efa:	431a      	orrs	r2, r3
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	69db      	ldr	r3, [r3, #28]
 8008f00:	4313      	orrs	r3, r2
 8008f02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	681a      	ldr	r2, [r3, #0]
 8008f0a:	4baa      	ldr	r3, [pc, #680]	@ (80091b4 <UART_SetConfig+0x2d8>)
 8008f0c:	4013      	ands	r3, r2
 8008f0e:	697a      	ldr	r2, [r7, #20]
 8008f10:	6812      	ldr	r2, [r2, #0]
 8008f12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008f14:	430b      	orrs	r3, r1
 8008f16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	68da      	ldr	r2, [r3, #12]
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	430a      	orrs	r2, r1
 8008f2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	699b      	ldr	r3, [r3, #24]
 8008f32:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a9f      	ldr	r2, [pc, #636]	@ (80091b8 <UART_SetConfig+0x2dc>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d004      	beq.n	8008f48 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	6a1b      	ldr	r3, [r3, #32]
 8008f42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f44:	4313      	orrs	r3, r2
 8008f46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	689b      	ldr	r3, [r3, #8]
 8008f4e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008f52:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008f56:	697a      	ldr	r2, [r7, #20]
 8008f58:	6812      	ldr	r2, [r2, #0]
 8008f5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008f5c:	430b      	orrs	r3, r1
 8008f5e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f66:	f023 010f 	bic.w	r1, r3, #15
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	430a      	orrs	r2, r1
 8008f74:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a90      	ldr	r2, [pc, #576]	@ (80091bc <UART_SetConfig+0x2e0>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d125      	bne.n	8008fcc <UART_SetConfig+0xf0>
 8008f80:	4b8f      	ldr	r3, [pc, #572]	@ (80091c0 <UART_SetConfig+0x2e4>)
 8008f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f86:	f003 0303 	and.w	r3, r3, #3
 8008f8a:	2b03      	cmp	r3, #3
 8008f8c:	d81a      	bhi.n	8008fc4 <UART_SetConfig+0xe8>
 8008f8e:	a201      	add	r2, pc, #4	@ (adr r2, 8008f94 <UART_SetConfig+0xb8>)
 8008f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f94:	08008fa5 	.word	0x08008fa5
 8008f98:	08008fb5 	.word	0x08008fb5
 8008f9c:	08008fad 	.word	0x08008fad
 8008fa0:	08008fbd 	.word	0x08008fbd
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008faa:	e116      	b.n	80091da <UART_SetConfig+0x2fe>
 8008fac:	2302      	movs	r3, #2
 8008fae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fb2:	e112      	b.n	80091da <UART_SetConfig+0x2fe>
 8008fb4:	2304      	movs	r3, #4
 8008fb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fba:	e10e      	b.n	80091da <UART_SetConfig+0x2fe>
 8008fbc:	2308      	movs	r3, #8
 8008fbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fc2:	e10a      	b.n	80091da <UART_SetConfig+0x2fe>
 8008fc4:	2310      	movs	r3, #16
 8008fc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fca:	e106      	b.n	80091da <UART_SetConfig+0x2fe>
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	4a7c      	ldr	r2, [pc, #496]	@ (80091c4 <UART_SetConfig+0x2e8>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d138      	bne.n	8009048 <UART_SetConfig+0x16c>
 8008fd6:	4b7a      	ldr	r3, [pc, #488]	@ (80091c0 <UART_SetConfig+0x2e4>)
 8008fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008fdc:	f003 030c 	and.w	r3, r3, #12
 8008fe0:	2b0c      	cmp	r3, #12
 8008fe2:	d82d      	bhi.n	8009040 <UART_SetConfig+0x164>
 8008fe4:	a201      	add	r2, pc, #4	@ (adr r2, 8008fec <UART_SetConfig+0x110>)
 8008fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fea:	bf00      	nop
 8008fec:	08009021 	.word	0x08009021
 8008ff0:	08009041 	.word	0x08009041
 8008ff4:	08009041 	.word	0x08009041
 8008ff8:	08009041 	.word	0x08009041
 8008ffc:	08009031 	.word	0x08009031
 8009000:	08009041 	.word	0x08009041
 8009004:	08009041 	.word	0x08009041
 8009008:	08009041 	.word	0x08009041
 800900c:	08009029 	.word	0x08009029
 8009010:	08009041 	.word	0x08009041
 8009014:	08009041 	.word	0x08009041
 8009018:	08009041 	.word	0x08009041
 800901c:	08009039 	.word	0x08009039
 8009020:	2300      	movs	r3, #0
 8009022:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009026:	e0d8      	b.n	80091da <UART_SetConfig+0x2fe>
 8009028:	2302      	movs	r3, #2
 800902a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800902e:	e0d4      	b.n	80091da <UART_SetConfig+0x2fe>
 8009030:	2304      	movs	r3, #4
 8009032:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009036:	e0d0      	b.n	80091da <UART_SetConfig+0x2fe>
 8009038:	2308      	movs	r3, #8
 800903a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800903e:	e0cc      	b.n	80091da <UART_SetConfig+0x2fe>
 8009040:	2310      	movs	r3, #16
 8009042:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009046:	e0c8      	b.n	80091da <UART_SetConfig+0x2fe>
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a5e      	ldr	r2, [pc, #376]	@ (80091c8 <UART_SetConfig+0x2ec>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d125      	bne.n	800909e <UART_SetConfig+0x1c2>
 8009052:	4b5b      	ldr	r3, [pc, #364]	@ (80091c0 <UART_SetConfig+0x2e4>)
 8009054:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009058:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800905c:	2b30      	cmp	r3, #48	@ 0x30
 800905e:	d016      	beq.n	800908e <UART_SetConfig+0x1b2>
 8009060:	2b30      	cmp	r3, #48	@ 0x30
 8009062:	d818      	bhi.n	8009096 <UART_SetConfig+0x1ba>
 8009064:	2b20      	cmp	r3, #32
 8009066:	d00a      	beq.n	800907e <UART_SetConfig+0x1a2>
 8009068:	2b20      	cmp	r3, #32
 800906a:	d814      	bhi.n	8009096 <UART_SetConfig+0x1ba>
 800906c:	2b00      	cmp	r3, #0
 800906e:	d002      	beq.n	8009076 <UART_SetConfig+0x19a>
 8009070:	2b10      	cmp	r3, #16
 8009072:	d008      	beq.n	8009086 <UART_SetConfig+0x1aa>
 8009074:	e00f      	b.n	8009096 <UART_SetConfig+0x1ba>
 8009076:	2300      	movs	r3, #0
 8009078:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800907c:	e0ad      	b.n	80091da <UART_SetConfig+0x2fe>
 800907e:	2302      	movs	r3, #2
 8009080:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009084:	e0a9      	b.n	80091da <UART_SetConfig+0x2fe>
 8009086:	2304      	movs	r3, #4
 8009088:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800908c:	e0a5      	b.n	80091da <UART_SetConfig+0x2fe>
 800908e:	2308      	movs	r3, #8
 8009090:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009094:	e0a1      	b.n	80091da <UART_SetConfig+0x2fe>
 8009096:	2310      	movs	r3, #16
 8009098:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800909c:	e09d      	b.n	80091da <UART_SetConfig+0x2fe>
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	4a4a      	ldr	r2, [pc, #296]	@ (80091cc <UART_SetConfig+0x2f0>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d125      	bne.n	80090f4 <UART_SetConfig+0x218>
 80090a8:	4b45      	ldr	r3, [pc, #276]	@ (80091c0 <UART_SetConfig+0x2e4>)
 80090aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090ae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80090b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80090b4:	d016      	beq.n	80090e4 <UART_SetConfig+0x208>
 80090b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80090b8:	d818      	bhi.n	80090ec <UART_SetConfig+0x210>
 80090ba:	2b80      	cmp	r3, #128	@ 0x80
 80090bc:	d00a      	beq.n	80090d4 <UART_SetConfig+0x1f8>
 80090be:	2b80      	cmp	r3, #128	@ 0x80
 80090c0:	d814      	bhi.n	80090ec <UART_SetConfig+0x210>
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d002      	beq.n	80090cc <UART_SetConfig+0x1f0>
 80090c6:	2b40      	cmp	r3, #64	@ 0x40
 80090c8:	d008      	beq.n	80090dc <UART_SetConfig+0x200>
 80090ca:	e00f      	b.n	80090ec <UART_SetConfig+0x210>
 80090cc:	2300      	movs	r3, #0
 80090ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090d2:	e082      	b.n	80091da <UART_SetConfig+0x2fe>
 80090d4:	2302      	movs	r3, #2
 80090d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090da:	e07e      	b.n	80091da <UART_SetConfig+0x2fe>
 80090dc:	2304      	movs	r3, #4
 80090de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090e2:	e07a      	b.n	80091da <UART_SetConfig+0x2fe>
 80090e4:	2308      	movs	r3, #8
 80090e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090ea:	e076      	b.n	80091da <UART_SetConfig+0x2fe>
 80090ec:	2310      	movs	r3, #16
 80090ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090f2:	e072      	b.n	80091da <UART_SetConfig+0x2fe>
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4a35      	ldr	r2, [pc, #212]	@ (80091d0 <UART_SetConfig+0x2f4>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d12a      	bne.n	8009154 <UART_SetConfig+0x278>
 80090fe:	4b30      	ldr	r3, [pc, #192]	@ (80091c0 <UART_SetConfig+0x2e4>)
 8009100:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009104:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009108:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800910c:	d01a      	beq.n	8009144 <UART_SetConfig+0x268>
 800910e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009112:	d81b      	bhi.n	800914c <UART_SetConfig+0x270>
 8009114:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009118:	d00c      	beq.n	8009134 <UART_SetConfig+0x258>
 800911a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800911e:	d815      	bhi.n	800914c <UART_SetConfig+0x270>
 8009120:	2b00      	cmp	r3, #0
 8009122:	d003      	beq.n	800912c <UART_SetConfig+0x250>
 8009124:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009128:	d008      	beq.n	800913c <UART_SetConfig+0x260>
 800912a:	e00f      	b.n	800914c <UART_SetConfig+0x270>
 800912c:	2300      	movs	r3, #0
 800912e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009132:	e052      	b.n	80091da <UART_SetConfig+0x2fe>
 8009134:	2302      	movs	r3, #2
 8009136:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800913a:	e04e      	b.n	80091da <UART_SetConfig+0x2fe>
 800913c:	2304      	movs	r3, #4
 800913e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009142:	e04a      	b.n	80091da <UART_SetConfig+0x2fe>
 8009144:	2308      	movs	r3, #8
 8009146:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800914a:	e046      	b.n	80091da <UART_SetConfig+0x2fe>
 800914c:	2310      	movs	r3, #16
 800914e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009152:	e042      	b.n	80091da <UART_SetConfig+0x2fe>
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4a17      	ldr	r2, [pc, #92]	@ (80091b8 <UART_SetConfig+0x2dc>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d13a      	bne.n	80091d4 <UART_SetConfig+0x2f8>
 800915e:	4b18      	ldr	r3, [pc, #96]	@ (80091c0 <UART_SetConfig+0x2e4>)
 8009160:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009164:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009168:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800916c:	d01a      	beq.n	80091a4 <UART_SetConfig+0x2c8>
 800916e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009172:	d81b      	bhi.n	80091ac <UART_SetConfig+0x2d0>
 8009174:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009178:	d00c      	beq.n	8009194 <UART_SetConfig+0x2b8>
 800917a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800917e:	d815      	bhi.n	80091ac <UART_SetConfig+0x2d0>
 8009180:	2b00      	cmp	r3, #0
 8009182:	d003      	beq.n	800918c <UART_SetConfig+0x2b0>
 8009184:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009188:	d008      	beq.n	800919c <UART_SetConfig+0x2c0>
 800918a:	e00f      	b.n	80091ac <UART_SetConfig+0x2d0>
 800918c:	2300      	movs	r3, #0
 800918e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009192:	e022      	b.n	80091da <UART_SetConfig+0x2fe>
 8009194:	2302      	movs	r3, #2
 8009196:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800919a:	e01e      	b.n	80091da <UART_SetConfig+0x2fe>
 800919c:	2304      	movs	r3, #4
 800919e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80091a2:	e01a      	b.n	80091da <UART_SetConfig+0x2fe>
 80091a4:	2308      	movs	r3, #8
 80091a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80091aa:	e016      	b.n	80091da <UART_SetConfig+0x2fe>
 80091ac:	2310      	movs	r3, #16
 80091ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80091b2:	e012      	b.n	80091da <UART_SetConfig+0x2fe>
 80091b4:	cfff69f3 	.word	0xcfff69f3
 80091b8:	40008000 	.word	0x40008000
 80091bc:	40013800 	.word	0x40013800
 80091c0:	40021000 	.word	0x40021000
 80091c4:	40004400 	.word	0x40004400
 80091c8:	40004800 	.word	0x40004800
 80091cc:	40004c00 	.word	0x40004c00
 80091d0:	40005000 	.word	0x40005000
 80091d4:	2310      	movs	r3, #16
 80091d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4aae      	ldr	r2, [pc, #696]	@ (8009498 <UART_SetConfig+0x5bc>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	f040 8097 	bne.w	8009314 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80091e6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80091ea:	2b08      	cmp	r3, #8
 80091ec:	d823      	bhi.n	8009236 <UART_SetConfig+0x35a>
 80091ee:	a201      	add	r2, pc, #4	@ (adr r2, 80091f4 <UART_SetConfig+0x318>)
 80091f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091f4:	08009219 	.word	0x08009219
 80091f8:	08009237 	.word	0x08009237
 80091fc:	08009221 	.word	0x08009221
 8009200:	08009237 	.word	0x08009237
 8009204:	08009227 	.word	0x08009227
 8009208:	08009237 	.word	0x08009237
 800920c:	08009237 	.word	0x08009237
 8009210:	08009237 	.word	0x08009237
 8009214:	0800922f 	.word	0x0800922f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009218:	f7fc fb28 	bl	800586c <HAL_RCC_GetPCLK1Freq>
 800921c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800921e:	e010      	b.n	8009242 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009220:	4b9e      	ldr	r3, [pc, #632]	@ (800949c <UART_SetConfig+0x5c0>)
 8009222:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009224:	e00d      	b.n	8009242 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009226:	f7fc fab3 	bl	8005790 <HAL_RCC_GetSysClockFreq>
 800922a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800922c:	e009      	b.n	8009242 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800922e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009232:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009234:	e005      	b.n	8009242 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8009236:	2300      	movs	r3, #0
 8009238:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800923a:	2301      	movs	r3, #1
 800923c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009240:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009244:	2b00      	cmp	r3, #0
 8009246:	f000 8130 	beq.w	80094aa <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800924e:	4a94      	ldr	r2, [pc, #592]	@ (80094a0 <UART_SetConfig+0x5c4>)
 8009250:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009254:	461a      	mov	r2, r3
 8009256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009258:	fbb3 f3f2 	udiv	r3, r3, r2
 800925c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	685a      	ldr	r2, [r3, #4]
 8009262:	4613      	mov	r3, r2
 8009264:	005b      	lsls	r3, r3, #1
 8009266:	4413      	add	r3, r2
 8009268:	69ba      	ldr	r2, [r7, #24]
 800926a:	429a      	cmp	r2, r3
 800926c:	d305      	bcc.n	800927a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009274:	69ba      	ldr	r2, [r7, #24]
 8009276:	429a      	cmp	r2, r3
 8009278:	d903      	bls.n	8009282 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800927a:	2301      	movs	r3, #1
 800927c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009280:	e113      	b.n	80094aa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009284:	2200      	movs	r2, #0
 8009286:	60bb      	str	r3, [r7, #8]
 8009288:	60fa      	str	r2, [r7, #12]
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800928e:	4a84      	ldr	r2, [pc, #528]	@ (80094a0 <UART_SetConfig+0x5c4>)
 8009290:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009294:	b29b      	uxth	r3, r3
 8009296:	2200      	movs	r2, #0
 8009298:	603b      	str	r3, [r7, #0]
 800929a:	607a      	str	r2, [r7, #4]
 800929c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80092a4:	f7f6 ffb8 	bl	8000218 <__aeabi_uldivmod>
 80092a8:	4602      	mov	r2, r0
 80092aa:	460b      	mov	r3, r1
 80092ac:	4610      	mov	r0, r2
 80092ae:	4619      	mov	r1, r3
 80092b0:	f04f 0200 	mov.w	r2, #0
 80092b4:	f04f 0300 	mov.w	r3, #0
 80092b8:	020b      	lsls	r3, r1, #8
 80092ba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80092be:	0202      	lsls	r2, r0, #8
 80092c0:	6979      	ldr	r1, [r7, #20]
 80092c2:	6849      	ldr	r1, [r1, #4]
 80092c4:	0849      	lsrs	r1, r1, #1
 80092c6:	2000      	movs	r0, #0
 80092c8:	460c      	mov	r4, r1
 80092ca:	4605      	mov	r5, r0
 80092cc:	eb12 0804 	adds.w	r8, r2, r4
 80092d0:	eb43 0905 	adc.w	r9, r3, r5
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	2200      	movs	r2, #0
 80092da:	469a      	mov	sl, r3
 80092dc:	4693      	mov	fp, r2
 80092de:	4652      	mov	r2, sl
 80092e0:	465b      	mov	r3, fp
 80092e2:	4640      	mov	r0, r8
 80092e4:	4649      	mov	r1, r9
 80092e6:	f7f6 ff97 	bl	8000218 <__aeabi_uldivmod>
 80092ea:	4602      	mov	r2, r0
 80092ec:	460b      	mov	r3, r1
 80092ee:	4613      	mov	r3, r2
 80092f0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80092f2:	6a3b      	ldr	r3, [r7, #32]
 80092f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80092f8:	d308      	bcc.n	800930c <UART_SetConfig+0x430>
 80092fa:	6a3b      	ldr	r3, [r7, #32]
 80092fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009300:	d204      	bcs.n	800930c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	6a3a      	ldr	r2, [r7, #32]
 8009308:	60da      	str	r2, [r3, #12]
 800930a:	e0ce      	b.n	80094aa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800930c:	2301      	movs	r3, #1
 800930e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009312:	e0ca      	b.n	80094aa <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	69db      	ldr	r3, [r3, #28]
 8009318:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800931c:	d166      	bne.n	80093ec <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800931e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009322:	2b08      	cmp	r3, #8
 8009324:	d827      	bhi.n	8009376 <UART_SetConfig+0x49a>
 8009326:	a201      	add	r2, pc, #4	@ (adr r2, 800932c <UART_SetConfig+0x450>)
 8009328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800932c:	08009351 	.word	0x08009351
 8009330:	08009359 	.word	0x08009359
 8009334:	08009361 	.word	0x08009361
 8009338:	08009377 	.word	0x08009377
 800933c:	08009367 	.word	0x08009367
 8009340:	08009377 	.word	0x08009377
 8009344:	08009377 	.word	0x08009377
 8009348:	08009377 	.word	0x08009377
 800934c:	0800936f 	.word	0x0800936f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009350:	f7fc fa8c 	bl	800586c <HAL_RCC_GetPCLK1Freq>
 8009354:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009356:	e014      	b.n	8009382 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009358:	f7fc fa9e 	bl	8005898 <HAL_RCC_GetPCLK2Freq>
 800935c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800935e:	e010      	b.n	8009382 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009360:	4b4e      	ldr	r3, [pc, #312]	@ (800949c <UART_SetConfig+0x5c0>)
 8009362:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009364:	e00d      	b.n	8009382 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009366:	f7fc fa13 	bl	8005790 <HAL_RCC_GetSysClockFreq>
 800936a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800936c:	e009      	b.n	8009382 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800936e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009372:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009374:	e005      	b.n	8009382 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009376:	2300      	movs	r3, #0
 8009378:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800937a:	2301      	movs	r3, #1
 800937c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009380:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009384:	2b00      	cmp	r3, #0
 8009386:	f000 8090 	beq.w	80094aa <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800938e:	4a44      	ldr	r2, [pc, #272]	@ (80094a0 <UART_SetConfig+0x5c4>)
 8009390:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009394:	461a      	mov	r2, r3
 8009396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009398:	fbb3 f3f2 	udiv	r3, r3, r2
 800939c:	005a      	lsls	r2, r3, #1
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	685b      	ldr	r3, [r3, #4]
 80093a2:	085b      	lsrs	r3, r3, #1
 80093a4:	441a      	add	r2, r3
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80093ae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80093b0:	6a3b      	ldr	r3, [r7, #32]
 80093b2:	2b0f      	cmp	r3, #15
 80093b4:	d916      	bls.n	80093e4 <UART_SetConfig+0x508>
 80093b6:	6a3b      	ldr	r3, [r7, #32]
 80093b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80093bc:	d212      	bcs.n	80093e4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80093be:	6a3b      	ldr	r3, [r7, #32]
 80093c0:	b29b      	uxth	r3, r3
 80093c2:	f023 030f 	bic.w	r3, r3, #15
 80093c6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80093c8:	6a3b      	ldr	r3, [r7, #32]
 80093ca:	085b      	lsrs	r3, r3, #1
 80093cc:	b29b      	uxth	r3, r3
 80093ce:	f003 0307 	and.w	r3, r3, #7
 80093d2:	b29a      	uxth	r2, r3
 80093d4:	8bfb      	ldrh	r3, [r7, #30]
 80093d6:	4313      	orrs	r3, r2
 80093d8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	8bfa      	ldrh	r2, [r7, #30]
 80093e0:	60da      	str	r2, [r3, #12]
 80093e2:	e062      	b.n	80094aa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80093e4:	2301      	movs	r3, #1
 80093e6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80093ea:	e05e      	b.n	80094aa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80093ec:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80093f0:	2b08      	cmp	r3, #8
 80093f2:	d828      	bhi.n	8009446 <UART_SetConfig+0x56a>
 80093f4:	a201      	add	r2, pc, #4	@ (adr r2, 80093fc <UART_SetConfig+0x520>)
 80093f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093fa:	bf00      	nop
 80093fc:	08009421 	.word	0x08009421
 8009400:	08009429 	.word	0x08009429
 8009404:	08009431 	.word	0x08009431
 8009408:	08009447 	.word	0x08009447
 800940c:	08009437 	.word	0x08009437
 8009410:	08009447 	.word	0x08009447
 8009414:	08009447 	.word	0x08009447
 8009418:	08009447 	.word	0x08009447
 800941c:	0800943f 	.word	0x0800943f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009420:	f7fc fa24 	bl	800586c <HAL_RCC_GetPCLK1Freq>
 8009424:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009426:	e014      	b.n	8009452 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009428:	f7fc fa36 	bl	8005898 <HAL_RCC_GetPCLK2Freq>
 800942c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800942e:	e010      	b.n	8009452 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009430:	4b1a      	ldr	r3, [pc, #104]	@ (800949c <UART_SetConfig+0x5c0>)
 8009432:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009434:	e00d      	b.n	8009452 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009436:	f7fc f9ab 	bl	8005790 <HAL_RCC_GetSysClockFreq>
 800943a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800943c:	e009      	b.n	8009452 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800943e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009442:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009444:	e005      	b.n	8009452 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009446:	2300      	movs	r3, #0
 8009448:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800944a:	2301      	movs	r3, #1
 800944c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009450:	bf00      	nop
    }

    if (pclk != 0U)
 8009452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009454:	2b00      	cmp	r3, #0
 8009456:	d028      	beq.n	80094aa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800945c:	4a10      	ldr	r2, [pc, #64]	@ (80094a0 <UART_SetConfig+0x5c4>)
 800945e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009462:	461a      	mov	r2, r3
 8009464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009466:	fbb3 f2f2 	udiv	r2, r3, r2
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	685b      	ldr	r3, [r3, #4]
 800946e:	085b      	lsrs	r3, r3, #1
 8009470:	441a      	add	r2, r3
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	fbb2 f3f3 	udiv	r3, r2, r3
 800947a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800947c:	6a3b      	ldr	r3, [r7, #32]
 800947e:	2b0f      	cmp	r3, #15
 8009480:	d910      	bls.n	80094a4 <UART_SetConfig+0x5c8>
 8009482:	6a3b      	ldr	r3, [r7, #32]
 8009484:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009488:	d20c      	bcs.n	80094a4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800948a:	6a3b      	ldr	r3, [r7, #32]
 800948c:	b29a      	uxth	r2, r3
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	60da      	str	r2, [r3, #12]
 8009494:	e009      	b.n	80094aa <UART_SetConfig+0x5ce>
 8009496:	bf00      	nop
 8009498:	40008000 	.word	0x40008000
 800949c:	00f42400 	.word	0x00f42400
 80094a0:	0800ab8c 	.word	0x0800ab8c
      }
      else
      {
        ret = HAL_ERROR;
 80094a4:	2301      	movs	r3, #1
 80094a6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	2201      	movs	r2, #1
 80094ae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	2201      	movs	r2, #1
 80094b6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	2200      	movs	r2, #0
 80094be:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80094c0:	697b      	ldr	r3, [r7, #20]
 80094c2:	2200      	movs	r2, #0
 80094c4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80094c6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3730      	adds	r7, #48	@ 0x30
 80094ce:	46bd      	mov	sp, r7
 80094d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080094d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b083      	sub	sp, #12
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094e0:	f003 0308 	and.w	r3, r3, #8
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d00a      	beq.n	80094fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	685b      	ldr	r3, [r3, #4]
 80094ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	430a      	orrs	r2, r1
 80094fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009502:	f003 0301 	and.w	r3, r3, #1
 8009506:	2b00      	cmp	r3, #0
 8009508:	d00a      	beq.n	8009520 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	685b      	ldr	r3, [r3, #4]
 8009510:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	430a      	orrs	r2, r1
 800951e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009524:	f003 0302 	and.w	r3, r3, #2
 8009528:	2b00      	cmp	r3, #0
 800952a:	d00a      	beq.n	8009542 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	685b      	ldr	r3, [r3, #4]
 8009532:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	430a      	orrs	r2, r1
 8009540:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009546:	f003 0304 	and.w	r3, r3, #4
 800954a:	2b00      	cmp	r3, #0
 800954c:	d00a      	beq.n	8009564 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	430a      	orrs	r2, r1
 8009562:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009568:	f003 0310 	and.w	r3, r3, #16
 800956c:	2b00      	cmp	r3, #0
 800956e:	d00a      	beq.n	8009586 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	689b      	ldr	r3, [r3, #8]
 8009576:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	430a      	orrs	r2, r1
 8009584:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800958a:	f003 0320 	and.w	r3, r3, #32
 800958e:	2b00      	cmp	r3, #0
 8009590:	d00a      	beq.n	80095a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	689b      	ldr	r3, [r3, #8]
 8009598:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	430a      	orrs	r2, r1
 80095a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d01a      	beq.n	80095ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	685b      	ldr	r3, [r3, #4]
 80095ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	430a      	orrs	r2, r1
 80095c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80095d2:	d10a      	bne.n	80095ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	430a      	orrs	r2, r1
 80095e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d00a      	beq.n	800960c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	685b      	ldr	r3, [r3, #4]
 80095fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	430a      	orrs	r2, r1
 800960a:	605a      	str	r2, [r3, #4]
  }
}
 800960c:	bf00      	nop
 800960e:	370c      	adds	r7, #12
 8009610:	46bd      	mov	sp, r7
 8009612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009616:	4770      	bx	lr

08009618 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b098      	sub	sp, #96	@ 0x60
 800961c:	af02      	add	r7, sp, #8
 800961e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2200      	movs	r2, #0
 8009624:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009628:	f7f9 fae6 	bl	8002bf8 <HAL_GetTick>
 800962c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f003 0308 	and.w	r3, r3, #8
 8009638:	2b08      	cmp	r3, #8
 800963a:	d12f      	bne.n	800969c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800963c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009640:	9300      	str	r3, [sp, #0]
 8009642:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009644:	2200      	movs	r2, #0
 8009646:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f000 f88e 	bl	800976c <UART_WaitOnFlagUntilTimeout>
 8009650:	4603      	mov	r3, r0
 8009652:	2b00      	cmp	r3, #0
 8009654:	d022      	beq.n	800969c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800965c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800965e:	e853 3f00 	ldrex	r3, [r3]
 8009662:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009666:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800966a:	653b      	str	r3, [r7, #80]	@ 0x50
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	461a      	mov	r2, r3
 8009672:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009674:	647b      	str	r3, [r7, #68]	@ 0x44
 8009676:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009678:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800967a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800967c:	e841 2300 	strex	r3, r2, [r1]
 8009680:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009682:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009684:	2b00      	cmp	r3, #0
 8009686:	d1e6      	bne.n	8009656 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2220      	movs	r2, #32
 800968c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2200      	movs	r2, #0
 8009694:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009698:	2303      	movs	r3, #3
 800969a:	e063      	b.n	8009764 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f003 0304 	and.w	r3, r3, #4
 80096a6:	2b04      	cmp	r3, #4
 80096a8:	d149      	bne.n	800973e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80096aa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80096ae:	9300      	str	r3, [sp, #0]
 80096b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80096b2:	2200      	movs	r2, #0
 80096b4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f000 f857 	bl	800976c <UART_WaitOnFlagUntilTimeout>
 80096be:	4603      	mov	r3, r0
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d03c      	beq.n	800973e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096cc:	e853 3f00 	ldrex	r3, [r3]
 80096d0:	623b      	str	r3, [r7, #32]
   return(result);
 80096d2:	6a3b      	ldr	r3, [r7, #32]
 80096d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80096d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	461a      	mov	r2, r3
 80096e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80096e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80096e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80096ea:	e841 2300 	strex	r3, r2, [r1]
 80096ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80096f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d1e6      	bne.n	80096c4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	3308      	adds	r3, #8
 80096fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	e853 3f00 	ldrex	r3, [r3]
 8009704:	60fb      	str	r3, [r7, #12]
   return(result);
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	f023 0301 	bic.w	r3, r3, #1
 800970c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	3308      	adds	r3, #8
 8009714:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009716:	61fa      	str	r2, [r7, #28]
 8009718:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800971a:	69b9      	ldr	r1, [r7, #24]
 800971c:	69fa      	ldr	r2, [r7, #28]
 800971e:	e841 2300 	strex	r3, r2, [r1]
 8009722:	617b      	str	r3, [r7, #20]
   return(result);
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d1e5      	bne.n	80096f6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2220      	movs	r2, #32
 800972e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2200      	movs	r2, #0
 8009736:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800973a:	2303      	movs	r3, #3
 800973c:	e012      	b.n	8009764 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2220      	movs	r2, #32
 8009742:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2220      	movs	r2, #32
 800974a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2200      	movs	r2, #0
 8009752:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2200      	movs	r2, #0
 8009758:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2200      	movs	r2, #0
 800975e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009762:	2300      	movs	r3, #0
}
 8009764:	4618      	mov	r0, r3
 8009766:	3758      	adds	r7, #88	@ 0x58
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}

0800976c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b084      	sub	sp, #16
 8009770:	af00      	add	r7, sp, #0
 8009772:	60f8      	str	r0, [r7, #12]
 8009774:	60b9      	str	r1, [r7, #8]
 8009776:	603b      	str	r3, [r7, #0]
 8009778:	4613      	mov	r3, r2
 800977a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800977c:	e04f      	b.n	800981e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800977e:	69bb      	ldr	r3, [r7, #24]
 8009780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009784:	d04b      	beq.n	800981e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009786:	f7f9 fa37 	bl	8002bf8 <HAL_GetTick>
 800978a:	4602      	mov	r2, r0
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	1ad3      	subs	r3, r2, r3
 8009790:	69ba      	ldr	r2, [r7, #24]
 8009792:	429a      	cmp	r2, r3
 8009794:	d302      	bcc.n	800979c <UART_WaitOnFlagUntilTimeout+0x30>
 8009796:	69bb      	ldr	r3, [r7, #24]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d101      	bne.n	80097a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800979c:	2303      	movs	r3, #3
 800979e:	e04e      	b.n	800983e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f003 0304 	and.w	r3, r3, #4
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d037      	beq.n	800981e <UART_WaitOnFlagUntilTimeout+0xb2>
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	2b80      	cmp	r3, #128	@ 0x80
 80097b2:	d034      	beq.n	800981e <UART_WaitOnFlagUntilTimeout+0xb2>
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	2b40      	cmp	r3, #64	@ 0x40
 80097b8:	d031      	beq.n	800981e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	69db      	ldr	r3, [r3, #28]
 80097c0:	f003 0308 	and.w	r3, r3, #8
 80097c4:	2b08      	cmp	r3, #8
 80097c6:	d110      	bne.n	80097ea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	2208      	movs	r2, #8
 80097ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80097d0:	68f8      	ldr	r0, [r7, #12]
 80097d2:	f000 f99c 	bl	8009b0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2208      	movs	r2, #8
 80097da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	2200      	movs	r2, #0
 80097e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80097e6:	2301      	movs	r3, #1
 80097e8:	e029      	b.n	800983e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	69db      	ldr	r3, [r3, #28]
 80097f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80097f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80097f8:	d111      	bne.n	800981e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009802:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009804:	68f8      	ldr	r0, [r7, #12]
 8009806:	f000 f982 	bl	8009b0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2220      	movs	r2, #32
 800980e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	2200      	movs	r2, #0
 8009816:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800981a:	2303      	movs	r3, #3
 800981c:	e00f      	b.n	800983e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	69da      	ldr	r2, [r3, #28]
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	4013      	ands	r3, r2
 8009828:	68ba      	ldr	r2, [r7, #8]
 800982a:	429a      	cmp	r2, r3
 800982c:	bf0c      	ite	eq
 800982e:	2301      	moveq	r3, #1
 8009830:	2300      	movne	r3, #0
 8009832:	b2db      	uxtb	r3, r3
 8009834:	461a      	mov	r2, r3
 8009836:	79fb      	ldrb	r3, [r7, #7]
 8009838:	429a      	cmp	r2, r3
 800983a:	d0a0      	beq.n	800977e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800983c:	2300      	movs	r3, #0
}
 800983e:	4618      	mov	r0, r3
 8009840:	3710      	adds	r7, #16
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}
	...

08009848 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009848:	b480      	push	{r7}
 800984a:	b0a3      	sub	sp, #140	@ 0x8c
 800984c:	af00      	add	r7, sp, #0
 800984e:	60f8      	str	r0, [r7, #12]
 8009850:	60b9      	str	r1, [r7, #8]
 8009852:	4613      	mov	r3, r2
 8009854:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	68ba      	ldr	r2, [r7, #8]
 800985a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	88fa      	ldrh	r2, [r7, #6]
 8009860:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	88fa      	ldrh	r2, [r7, #6]
 8009868:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	2200      	movs	r2, #0
 8009870:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	689b      	ldr	r3, [r3, #8]
 8009876:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800987a:	d10e      	bne.n	800989a <UART_Start_Receive_IT+0x52>
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	691b      	ldr	r3, [r3, #16]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d105      	bne.n	8009890 <UART_Start_Receive_IT+0x48>
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800988a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800988e:	e02d      	b.n	80098ec <UART_Start_Receive_IT+0xa4>
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	22ff      	movs	r2, #255	@ 0xff
 8009894:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009898:	e028      	b.n	80098ec <UART_Start_Receive_IT+0xa4>
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	689b      	ldr	r3, [r3, #8]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d10d      	bne.n	80098be <UART_Start_Receive_IT+0x76>
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	691b      	ldr	r3, [r3, #16]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d104      	bne.n	80098b4 <UART_Start_Receive_IT+0x6c>
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	22ff      	movs	r2, #255	@ 0xff
 80098ae:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80098b2:	e01b      	b.n	80098ec <UART_Start_Receive_IT+0xa4>
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	227f      	movs	r2, #127	@ 0x7f
 80098b8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80098bc:	e016      	b.n	80098ec <UART_Start_Receive_IT+0xa4>
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	689b      	ldr	r3, [r3, #8]
 80098c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80098c6:	d10d      	bne.n	80098e4 <UART_Start_Receive_IT+0x9c>
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	691b      	ldr	r3, [r3, #16]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d104      	bne.n	80098da <UART_Start_Receive_IT+0x92>
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	227f      	movs	r2, #127	@ 0x7f
 80098d4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80098d8:	e008      	b.n	80098ec <UART_Start_Receive_IT+0xa4>
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	223f      	movs	r2, #63	@ 0x3f
 80098de:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80098e2:	e003      	b.n	80098ec <UART_Start_Receive_IT+0xa4>
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	2200      	movs	r2, #0
 80098e8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	2200      	movs	r2, #0
 80098f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	2222      	movs	r2, #34	@ 0x22
 80098f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	3308      	adds	r3, #8
 8009902:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009904:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009906:	e853 3f00 	ldrex	r3, [r3]
 800990a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800990c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800990e:	f043 0301 	orr.w	r3, r3, #1
 8009912:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	3308      	adds	r3, #8
 800991c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009920:	673a      	str	r2, [r7, #112]	@ 0x70
 8009922:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009924:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8009926:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009928:	e841 2300 	strex	r3, r2, [r1]
 800992c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800992e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009930:	2b00      	cmp	r3, #0
 8009932:	d1e3      	bne.n	80098fc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009938:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800993c:	d14f      	bne.n	80099de <UART_Start_Receive_IT+0x196>
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009944:	88fa      	ldrh	r2, [r7, #6]
 8009946:	429a      	cmp	r2, r3
 8009948:	d349      	bcc.n	80099de <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	689b      	ldr	r3, [r3, #8]
 800994e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009952:	d107      	bne.n	8009964 <UART_Start_Receive_IT+0x11c>
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	691b      	ldr	r3, [r3, #16]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d103      	bne.n	8009964 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	4a47      	ldr	r2, [pc, #284]	@ (8009a7c <UART_Start_Receive_IT+0x234>)
 8009960:	675a      	str	r2, [r3, #116]	@ 0x74
 8009962:	e002      	b.n	800996a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	4a46      	ldr	r2, [pc, #280]	@ (8009a80 <UART_Start_Receive_IT+0x238>)
 8009968:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	691b      	ldr	r3, [r3, #16]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d01a      	beq.n	80099a8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009978:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800997a:	e853 3f00 	ldrex	r3, [r3]
 800997e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009980:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009982:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009986:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	461a      	mov	r2, r3
 8009990:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009994:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009996:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009998:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800999a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800999c:	e841 2300 	strex	r3, r2, [r1]
 80099a0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80099a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d1e4      	bne.n	8009972 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	3308      	adds	r3, #8
 80099ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099b2:	e853 3f00 	ldrex	r3, [r3]
 80099b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80099b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80099be:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	3308      	adds	r3, #8
 80099c6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80099c8:	64ba      	str	r2, [r7, #72]	@ 0x48
 80099ca:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099cc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80099ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80099d0:	e841 2300 	strex	r3, r2, [r1]
 80099d4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80099d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d1e5      	bne.n	80099a8 <UART_Start_Receive_IT+0x160>
 80099dc:	e046      	b.n	8009a6c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	689b      	ldr	r3, [r3, #8]
 80099e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099e6:	d107      	bne.n	80099f8 <UART_Start_Receive_IT+0x1b0>
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	691b      	ldr	r3, [r3, #16]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d103      	bne.n	80099f8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	4a24      	ldr	r2, [pc, #144]	@ (8009a84 <UART_Start_Receive_IT+0x23c>)
 80099f4:	675a      	str	r2, [r3, #116]	@ 0x74
 80099f6:	e002      	b.n	80099fe <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	4a23      	ldr	r2, [pc, #140]	@ (8009a88 <UART_Start_Receive_IT+0x240>)
 80099fc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	691b      	ldr	r3, [r3, #16]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d019      	beq.n	8009a3a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a0e:	e853 3f00 	ldrex	r3, [r3]
 8009a12:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a16:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8009a1a:	677b      	str	r3, [r7, #116]	@ 0x74
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	461a      	mov	r2, r3
 8009a22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009a24:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a26:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a28:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009a2a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009a2c:	e841 2300 	strex	r3, r2, [r1]
 8009a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d1e6      	bne.n	8009a06 <UART_Start_Receive_IT+0x1be>
 8009a38:	e018      	b.n	8009a6c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	e853 3f00 	ldrex	r3, [r3]
 8009a46:	613b      	str	r3, [r7, #16]
   return(result);
 8009a48:	693b      	ldr	r3, [r7, #16]
 8009a4a:	f043 0320 	orr.w	r3, r3, #32
 8009a4e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	461a      	mov	r2, r3
 8009a56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009a58:	623b      	str	r3, [r7, #32]
 8009a5a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a5c:	69f9      	ldr	r1, [r7, #28]
 8009a5e:	6a3a      	ldr	r2, [r7, #32]
 8009a60:	e841 2300 	strex	r3, r2, [r1]
 8009a64:	61bb      	str	r3, [r7, #24]
   return(result);
 8009a66:	69bb      	ldr	r3, [r7, #24]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d1e6      	bne.n	8009a3a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8009a6c:	2300      	movs	r3, #0
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	378c      	adds	r7, #140	@ 0x8c
 8009a72:	46bd      	mov	sp, r7
 8009a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a78:	4770      	bx	lr
 8009a7a:	bf00      	nop
 8009a7c:	0800a491 	.word	0x0800a491
 8009a80:	0800a121 	.word	0x0800a121
 8009a84:	08009f61 	.word	0x08009f61
 8009a88:	08009da1 	.word	0x08009da1

08009a8c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b08f      	sub	sp, #60	@ 0x3c
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a9a:	6a3b      	ldr	r3, [r7, #32]
 8009a9c:	e853 3f00 	ldrex	r3, [r3]
 8009aa0:	61fb      	str	r3, [r7, #28]
   return(result);
 8009aa2:	69fb      	ldr	r3, [r7, #28]
 8009aa4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009aa8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	461a      	mov	r2, r3
 8009ab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009ab4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ab6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009ab8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009aba:	e841 2300 	strex	r3, r2, [r1]
 8009abe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d1e6      	bne.n	8009a94 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	3308      	adds	r3, #8
 8009acc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	e853 3f00 	ldrex	r3, [r3]
 8009ad4:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009adc:	633b      	str	r3, [r7, #48]	@ 0x30
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	3308      	adds	r3, #8
 8009ae4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ae6:	61ba      	str	r2, [r7, #24]
 8009ae8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aea:	6979      	ldr	r1, [r7, #20]
 8009aec:	69ba      	ldr	r2, [r7, #24]
 8009aee:	e841 2300 	strex	r3, r2, [r1]
 8009af2:	613b      	str	r3, [r7, #16]
   return(result);
 8009af4:	693b      	ldr	r3, [r7, #16]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d1e5      	bne.n	8009ac6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2220      	movs	r2, #32
 8009afe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8009b02:	bf00      	nop
 8009b04:	373c      	adds	r7, #60	@ 0x3c
 8009b06:	46bd      	mov	sp, r7
 8009b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0c:	4770      	bx	lr

08009b0e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009b0e:	b480      	push	{r7}
 8009b10:	b095      	sub	sp, #84	@ 0x54
 8009b12:	af00      	add	r7, sp, #0
 8009b14:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b1e:	e853 3f00 	ldrex	r3, [r3]
 8009b22:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b26:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009b2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	461a      	mov	r2, r3
 8009b32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b34:	643b      	str	r3, [r7, #64]	@ 0x40
 8009b36:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b38:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009b3a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009b3c:	e841 2300 	strex	r3, r2, [r1]
 8009b40:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d1e6      	bne.n	8009b16 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	3308      	adds	r3, #8
 8009b4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b50:	6a3b      	ldr	r3, [r7, #32]
 8009b52:	e853 3f00 	ldrex	r3, [r3]
 8009b56:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b58:	69fb      	ldr	r3, [r7, #28]
 8009b5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009b5e:	f023 0301 	bic.w	r3, r3, #1
 8009b62:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	3308      	adds	r3, #8
 8009b6a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009b6c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009b72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b74:	e841 2300 	strex	r3, r2, [r1]
 8009b78:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d1e3      	bne.n	8009b48 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b84:	2b01      	cmp	r3, #1
 8009b86:	d118      	bne.n	8009bba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	e853 3f00 	ldrex	r3, [r3]
 8009b94:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	f023 0310 	bic.w	r3, r3, #16
 8009b9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	461a      	mov	r2, r3
 8009ba4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ba6:	61bb      	str	r3, [r7, #24]
 8009ba8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009baa:	6979      	ldr	r1, [r7, #20]
 8009bac:	69ba      	ldr	r2, [r7, #24]
 8009bae:	e841 2300 	strex	r3, r2, [r1]
 8009bb2:	613b      	str	r3, [r7, #16]
   return(result);
 8009bb4:	693b      	ldr	r3, [r7, #16]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d1e6      	bne.n	8009b88 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2220      	movs	r2, #32
 8009bbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009bce:	bf00      	nop
 8009bd0:	3754      	adds	r7, #84	@ 0x54
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd8:	4770      	bx	lr

08009bda <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009bda:	b580      	push	{r7, lr}
 8009bdc:	b090      	sub	sp, #64	@ 0x40
 8009bde:	af00      	add	r7, sp, #0
 8009be0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009be6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f003 0320 	and.w	r3, r3, #32
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d137      	bne.n	8009c66 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8009bf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009bfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	3308      	adds	r3, #8
 8009c04:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c08:	e853 3f00 	ldrex	r3, [r3]
 8009c0c:	623b      	str	r3, [r7, #32]
   return(result);
 8009c0e:	6a3b      	ldr	r3, [r7, #32]
 8009c10:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009c14:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009c16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	3308      	adds	r3, #8
 8009c1c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009c1e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009c24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c26:	e841 2300 	strex	r3, r2, [r1]
 8009c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d1e5      	bne.n	8009bfe <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009c32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	e853 3f00 	ldrex	r3, [r3]
 8009c3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c46:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	461a      	mov	r2, r3
 8009c4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c50:	61fb      	str	r3, [r7, #28]
 8009c52:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c54:	69b9      	ldr	r1, [r7, #24]
 8009c56:	69fa      	ldr	r2, [r7, #28]
 8009c58:	e841 2300 	strex	r3, r2, [r1]
 8009c5c:	617b      	str	r3, [r7, #20]
   return(result);
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d1e6      	bne.n	8009c32 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009c64:	e004      	b.n	8009c70 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 8009c66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c68:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009c6c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009c6e:	4798      	blx	r3
}
 8009c70:	bf00      	nop
 8009c72:	3740      	adds	r7, #64	@ 0x40
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}

08009c78 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b084      	sub	sp, #16
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c84:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009c8c:	68f8      	ldr	r0, [r7, #12]
 8009c8e:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c90:	bf00      	nop
 8009c92:	3710      	adds	r7, #16
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}

08009c98 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b086      	sub	sp, #24
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ca4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009cac:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009cb4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	689b      	ldr	r3, [r3, #8]
 8009cbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009cc0:	2b80      	cmp	r3, #128	@ 0x80
 8009cc2:	d109      	bne.n	8009cd8 <UART_DMAError+0x40>
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	2b21      	cmp	r3, #33	@ 0x21
 8009cc8:	d106      	bne.n	8009cd8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8009cd2:	6978      	ldr	r0, [r7, #20]
 8009cd4:	f7ff feda 	bl	8009a8c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	689b      	ldr	r3, [r3, #8]
 8009cde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ce2:	2b40      	cmp	r3, #64	@ 0x40
 8009ce4:	d109      	bne.n	8009cfa <UART_DMAError+0x62>
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2b22      	cmp	r3, #34	@ 0x22
 8009cea:	d106      	bne.n	8009cfa <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8009cf4:	6978      	ldr	r0, [r7, #20]
 8009cf6:	f7ff ff0a 	bl	8009b0e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d00:	f043 0210 	orr.w	r2, r3, #16
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009d10:	6978      	ldr	r0, [r7, #20]
 8009d12:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d14:	bf00      	nop
 8009d16:	3718      	adds	r7, #24
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}

08009d1c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b084      	sub	sp, #16
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d28:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009d38:	68f8      	ldr	r0, [r7, #12]
 8009d3a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d3c:	bf00      	nop
 8009d3e:	3710      	adds	r7, #16
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}

08009d44 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b088      	sub	sp, #32
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	e853 3f00 	ldrex	r3, [r3]
 8009d58:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d60:	61fb      	str	r3, [r7, #28]
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	461a      	mov	r2, r3
 8009d68:	69fb      	ldr	r3, [r7, #28]
 8009d6a:	61bb      	str	r3, [r7, #24]
 8009d6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d6e:	6979      	ldr	r1, [r7, #20]
 8009d70:	69ba      	ldr	r2, [r7, #24]
 8009d72:	e841 2300 	strex	r3, r2, [r1]
 8009d76:	613b      	str	r3, [r7, #16]
   return(result);
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d1e6      	bne.n	8009d4c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2220      	movs	r2, #32
 8009d82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d96:	bf00      	nop
 8009d98:	3720      	adds	r7, #32
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
	...

08009da0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b09c      	sub	sp, #112	@ 0x70
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009dae:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009db8:	2b22      	cmp	r3, #34	@ 0x22
 8009dba:	f040 80c2 	bne.w	8009f42 <UART_RxISR_8BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dc4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009dc8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009dcc:	b2d9      	uxtb	r1, r3
 8009dce:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009dd2:	b2da      	uxtb	r2, r3
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009dd8:	400a      	ands	r2, r1
 8009dda:	b2d2      	uxtb	r2, r2
 8009ddc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009de2:	1c5a      	adds	r2, r3, #1
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009dee:	b29b      	uxth	r3, r3
 8009df0:	3b01      	subs	r3, #1
 8009df2:	b29a      	uxth	r2, r3
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009e00:	b29b      	uxth	r3, r3
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	f040 80a5 	bne.w	8009f52 <UART_RxISR_8BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e10:	e853 3f00 	ldrex	r3, [r3]
 8009e14:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009e16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009e1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	461a      	mov	r2, r3
 8009e24:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009e26:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009e28:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e2a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009e2c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009e2e:	e841 2300 	strex	r3, r2, [r1]
 8009e32:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009e34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d1e6      	bne.n	8009e08 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	3308      	adds	r3, #8
 8009e40:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e44:	e853 3f00 	ldrex	r3, [r3]
 8009e48:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009e4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e4c:	f023 0301 	bic.w	r3, r3, #1
 8009e50:	667b      	str	r3, [r7, #100]	@ 0x64
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	3308      	adds	r3, #8
 8009e58:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009e5a:	647a      	str	r2, [r7, #68]	@ 0x44
 8009e5c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e5e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009e60:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009e62:	e841 2300 	strex	r3, r2, [r1]
 8009e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009e68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d1e5      	bne.n	8009e3a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2220      	movs	r2, #32
 8009e72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	4a35      	ldr	r2, [pc, #212]	@ (8009f5c <UART_RxISR_8BIT+0x1bc>)
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d01f      	beq.n	8009ecc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	685b      	ldr	r3, [r3, #4]
 8009e92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d018      	beq.n	8009ecc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ea2:	e853 3f00 	ldrex	r3, [r3]
 8009ea6:	623b      	str	r3, [r7, #32]
   return(result);
 8009ea8:	6a3b      	ldr	r3, [r7, #32]
 8009eaa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009eae:	663b      	str	r3, [r7, #96]	@ 0x60
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	461a      	mov	r2, r3
 8009eb6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009eb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8009eba:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ebc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009ebe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ec0:	e841 2300 	strex	r3, r2, [r1]
 8009ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d1e6      	bne.n	8009e9a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ed0:	2b01      	cmp	r3, #1
 8009ed2:	d130      	bne.n	8009f36 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	e853 3f00 	ldrex	r3, [r3]
 8009ee6:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f023 0310 	bic.w	r3, r3, #16
 8009eee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	461a      	mov	r2, r3
 8009ef6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ef8:	61fb      	str	r3, [r7, #28]
 8009efa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009efc:	69b9      	ldr	r1, [r7, #24]
 8009efe:	69fa      	ldr	r2, [r7, #28]
 8009f00:	e841 2300 	strex	r3, r2, [r1]
 8009f04:	617b      	str	r3, [r7, #20]
   return(result);
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d1e6      	bne.n	8009eda <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	69db      	ldr	r3, [r3, #28]
 8009f12:	f003 0310 	and.w	r3, r3, #16
 8009f16:	2b10      	cmp	r3, #16
 8009f18:	d103      	bne.n	8009f22 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	2210      	movs	r2, #16
 8009f20:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009f28:	687a      	ldr	r2, [r7, #4]
 8009f2a:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8009f2e:	4611      	mov	r1, r2
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009f34:	e00d      	b.n	8009f52 <UART_RxISR_8BIT+0x1b2>
        huart->RxCpltCallback(huart);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	4798      	blx	r3
}
 8009f40:	e007      	b.n	8009f52 <UART_RxISR_8BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	699a      	ldr	r2, [r3, #24]
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f042 0208 	orr.w	r2, r2, #8
 8009f50:	619a      	str	r2, [r3, #24]
}
 8009f52:	bf00      	nop
 8009f54:	3770      	adds	r7, #112	@ 0x70
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}
 8009f5a:	bf00      	nop
 8009f5c:	40008000 	.word	0x40008000

08009f60 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b09c      	sub	sp, #112	@ 0x70
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009f6e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009f78:	2b22      	cmp	r3, #34	@ 0x22
 8009f7a:	f040 80c2 	bne.w	800a102 <UART_RxISR_16BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f84:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f8c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009f8e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8009f92:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009f96:	4013      	ands	r3, r2
 8009f98:	b29a      	uxth	r2, r3
 8009f9a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009f9c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009fa2:	1c9a      	adds	r2, r3, #2
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009fae:	b29b      	uxth	r3, r3
 8009fb0:	3b01      	subs	r3, #1
 8009fb2:	b29a      	uxth	r2, r3
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009fc0:	b29b      	uxth	r3, r3
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	f040 80a5 	bne.w	800a112 <UART_RxISR_16BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009fd0:	e853 3f00 	ldrex	r3, [r3]
 8009fd4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009fd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009fd8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009fdc:	667b      	str	r3, [r7, #100]	@ 0x64
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	461a      	mov	r2, r3
 8009fe4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009fe6:	657b      	str	r3, [r7, #84]	@ 0x54
 8009fe8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fea:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009fec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009fee:	e841 2300 	strex	r3, r2, [r1]
 8009ff2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009ff4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d1e6      	bne.n	8009fc8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	3308      	adds	r3, #8
 800a000:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a004:	e853 3f00 	ldrex	r3, [r3]
 800a008:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a00a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a00c:	f023 0301 	bic.w	r3, r3, #1
 800a010:	663b      	str	r3, [r7, #96]	@ 0x60
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	3308      	adds	r3, #8
 800a018:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a01a:	643a      	str	r2, [r7, #64]	@ 0x40
 800a01c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a01e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a020:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a022:	e841 2300 	strex	r3, r2, [r1]
 800a026:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d1e5      	bne.n	8009ffa <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2220      	movs	r2, #32
 800a032:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2200      	movs	r2, #0
 800a03a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2200      	movs	r2, #0
 800a040:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4a35      	ldr	r2, [pc, #212]	@ (800a11c <UART_RxISR_16BIT+0x1bc>)
 800a048:	4293      	cmp	r3, r2
 800a04a:	d01f      	beq.n	800a08c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	685b      	ldr	r3, [r3, #4]
 800a052:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a056:	2b00      	cmp	r3, #0
 800a058:	d018      	beq.n	800a08c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a060:	6a3b      	ldr	r3, [r7, #32]
 800a062:	e853 3f00 	ldrex	r3, [r3]
 800a066:	61fb      	str	r3, [r7, #28]
   return(result);
 800a068:	69fb      	ldr	r3, [r7, #28]
 800a06a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a06e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	461a      	mov	r2, r3
 800a076:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a078:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a07a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a07c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a07e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a080:	e841 2300 	strex	r3, r2, [r1]
 800a084:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d1e6      	bne.n	800a05a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a090:	2b01      	cmp	r3, #1
 800a092:	d130      	bne.n	800a0f6 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2200      	movs	r2, #0
 800a098:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	e853 3f00 	ldrex	r3, [r3]
 800a0a6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	f023 0310 	bic.w	r3, r3, #16
 800a0ae:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	461a      	mov	r2, r3
 800a0b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a0b8:	61bb      	str	r3, [r7, #24]
 800a0ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0bc:	6979      	ldr	r1, [r7, #20]
 800a0be:	69ba      	ldr	r2, [r7, #24]
 800a0c0:	e841 2300 	strex	r3, r2, [r1]
 800a0c4:	613b      	str	r3, [r7, #16]
   return(result);
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d1e6      	bne.n	800a09a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	69db      	ldr	r3, [r3, #28]
 800a0d2:	f003 0310 	and.w	r3, r3, #16
 800a0d6:	2b10      	cmp	r3, #16
 800a0d8:	d103      	bne.n	800a0e2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	2210      	movs	r2, #16
 800a0e0:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800a0ee:	4611      	mov	r1, r2
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a0f4:	e00d      	b.n	800a112 <UART_RxISR_16BIT+0x1b2>
        huart->RxCpltCallback(huart);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	4798      	blx	r3
}
 800a100:	e007      	b.n	800a112 <UART_RxISR_16BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	699a      	ldr	r2, [r3, #24]
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f042 0208 	orr.w	r2, r2, #8
 800a110:	619a      	str	r2, [r3, #24]
}
 800a112:	bf00      	nop
 800a114:	3770      	adds	r7, #112	@ 0x70
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}
 800a11a:	bf00      	nop
 800a11c:	40008000 	.word	0x40008000

0800a120 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b0ac      	sub	sp, #176	@ 0xb0
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a12e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	69db      	ldr	r3, [r3, #28]
 800a138:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	689b      	ldr	r3, [r3, #8]
 800a14c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a156:	2b22      	cmp	r3, #34	@ 0x22
 800a158:	f040 8189 	bne.w	800a46e <UART_RxISR_8BIT_FIFOEN+0x34e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a162:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a166:	e12c      	b.n	800a3c2 <UART_RxISR_8BIT_FIFOEN+0x2a2>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a16e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a172:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800a176:	b2d9      	uxtb	r1, r3
 800a178:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800a17c:	b2da      	uxtb	r2, r3
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a182:	400a      	ands	r2, r1
 800a184:	b2d2      	uxtb	r2, r2
 800a186:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a18c:	1c5a      	adds	r2, r3, #1
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a198:	b29b      	uxth	r3, r3
 800a19a:	3b01      	subs	r3, #1
 800a19c:	b29a      	uxth	r2, r3
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	69db      	ldr	r3, [r3, #28]
 800a1aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a1ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a1b2:	f003 0307 	and.w	r3, r3, #7
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d055      	beq.n	800a266 <UART_RxISR_8BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a1ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a1be:	f003 0301 	and.w	r3, r3, #1
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d011      	beq.n	800a1ea <UART_RxISR_8BIT_FIFOEN+0xca>
 800a1c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a1ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d00b      	beq.n	800a1ea <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a1e0:	f043 0201 	orr.w	r2, r3, #1
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a1ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a1ee:	f003 0302 	and.w	r3, r3, #2
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d011      	beq.n	800a21a <UART_RxISR_8BIT_FIFOEN+0xfa>
 800a1f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a1fa:	f003 0301 	and.w	r3, r3, #1
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d00b      	beq.n	800a21a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	2202      	movs	r2, #2
 800a208:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a210:	f043 0204 	orr.w	r2, r3, #4
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a21a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a21e:	f003 0304 	and.w	r3, r3, #4
 800a222:	2b00      	cmp	r3, #0
 800a224:	d011      	beq.n	800a24a <UART_RxISR_8BIT_FIFOEN+0x12a>
 800a226:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a22a:	f003 0301 	and.w	r3, r3, #1
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d00b      	beq.n	800a24a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	2204      	movs	r2, #4
 800a238:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a240:	f043 0202 	orr.w	r2, r3, #2
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a250:	2b00      	cmp	r3, #0
 800a252:	d008      	beq.n	800a266 <UART_RxISR_8BIT_FIFOEN+0x146>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2200      	movs	r2, #0
 800a262:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a26c:	b29b      	uxth	r3, r3
 800a26e:	2b00      	cmp	r3, #0
 800a270:	f040 80a7 	bne.w	800a3c2 <UART_RxISR_8BIT_FIFOEN+0x2a2>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a27a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a27c:	e853 3f00 	ldrex	r3, [r3]
 800a280:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800a282:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a284:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a288:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	461a      	mov	r2, r3
 800a292:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a296:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a298:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a29a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800a29c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a29e:	e841 2300 	strex	r3, r2, [r1]
 800a2a2:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800a2a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d1e4      	bne.n	800a274 <UART_RxISR_8BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	3308      	adds	r3, #8
 800a2b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a2b4:	e853 3f00 	ldrex	r3, [r3]
 800a2b8:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800a2ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a2bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a2c0:	f023 0301 	bic.w	r3, r3, #1
 800a2c4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	3308      	adds	r3, #8
 800a2ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a2d2:	66ba      	str	r2, [r7, #104]	@ 0x68
 800a2d4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2d6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800a2d8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a2da:	e841 2300 	strex	r3, r2, [r1]
 800a2de:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a2e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d1e1      	bne.n	800a2aa <UART_RxISR_8BIT_FIFOEN+0x18a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2220      	movs	r2, #32
 800a2ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	4a62      	ldr	r2, [pc, #392]	@ (800a488 <UART_RxISR_8BIT_FIFOEN+0x368>)
 800a300:	4293      	cmp	r3, r2
 800a302:	d021      	beq.n	800a348 <UART_RxISR_8BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	685b      	ldr	r3, [r3, #4]
 800a30a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d01a      	beq.n	800a348 <UART_RxISR_8BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a318:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a31a:	e853 3f00 	ldrex	r3, [r3]
 800a31e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a320:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a322:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a326:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	461a      	mov	r2, r3
 800a330:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a334:	657b      	str	r3, [r7, #84]	@ 0x54
 800a336:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a338:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a33a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a33c:	e841 2300 	strex	r3, r2, [r1]
 800a340:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a342:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a344:	2b00      	cmp	r3, #0
 800a346:	d1e4      	bne.n	800a312 <UART_RxISR_8BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a34c:	2b01      	cmp	r3, #1
 800a34e:	d132      	bne.n	800a3b6 <UART_RxISR_8BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2200      	movs	r2, #0
 800a354:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a35c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a35e:	e853 3f00 	ldrex	r3, [r3]
 800a362:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a366:	f023 0310 	bic.w	r3, r3, #16
 800a36a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	461a      	mov	r2, r3
 800a374:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a378:	643b      	str	r3, [r7, #64]	@ 0x40
 800a37a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a37c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a37e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a380:	e841 2300 	strex	r3, r2, [r1]
 800a384:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d1e4      	bne.n	800a356 <UART_RxISR_8BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	69db      	ldr	r3, [r3, #28]
 800a392:	f003 0310 	and.w	r3, r3, #16
 800a396:	2b10      	cmp	r3, #16
 800a398:	d103      	bne.n	800a3a2 <UART_RxISR_8BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	2210      	movs	r2, #16
 800a3a0:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a3a8:	687a      	ldr	r2, [r7, #4]
 800a3aa:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800a3ae:	4611      	mov	r1, r2
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	4798      	blx	r3
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800a3b4:	e010      	b.n	800a3d8 <UART_RxISR_8BIT_FIFOEN+0x2b8>
          huart->RxCpltCallback(huart);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	4798      	blx	r3
        break;
 800a3c0:	e00a      	b.n	800a3d8 <UART_RxISR_8BIT_FIFOEN+0x2b8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a3c2:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d006      	beq.n	800a3d8 <UART_RxISR_8BIT_FIFOEN+0x2b8>
 800a3ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a3ce:	f003 0320 	and.w	r3, r3, #32
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	f47f aec8 	bne.w	800a168 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a3de:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a3e2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d049      	beq.n	800a47e <UART_RxISR_8BIT_FIFOEN+0x35e>
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a3f0:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800a3f4:	429a      	cmp	r2, r3
 800a3f6:	d242      	bcs.n	800a47e <UART_RxISR_8BIT_FIFOEN+0x35e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	3308      	adds	r3, #8
 800a3fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a400:	6a3b      	ldr	r3, [r7, #32]
 800a402:	e853 3f00 	ldrex	r3, [r3]
 800a406:	61fb      	str	r3, [r7, #28]
   return(result);
 800a408:	69fb      	ldr	r3, [r7, #28]
 800a40a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a40e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	3308      	adds	r3, #8
 800a418:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a41c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a41e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a420:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a422:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a424:	e841 2300 	strex	r3, r2, [r1]
 800a428:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a42a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d1e3      	bne.n	800a3f8 <UART_RxISR_8BIT_FIFOEN+0x2d8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	4a16      	ldr	r2, [pc, #88]	@ (800a48c <UART_RxISR_8BIT_FIFOEN+0x36c>)
 800a434:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	e853 3f00 	ldrex	r3, [r3]
 800a442:	60bb      	str	r3, [r7, #8]
   return(result);
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	f043 0320 	orr.w	r3, r3, #32
 800a44a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	461a      	mov	r2, r3
 800a454:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a458:	61bb      	str	r3, [r7, #24]
 800a45a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a45c:	6979      	ldr	r1, [r7, #20]
 800a45e:	69ba      	ldr	r2, [r7, #24]
 800a460:	e841 2300 	strex	r3, r2, [r1]
 800a464:	613b      	str	r3, [r7, #16]
   return(result);
 800a466:	693b      	ldr	r3, [r7, #16]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d1e4      	bne.n	800a436 <UART_RxISR_8BIT_FIFOEN+0x316>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a46c:	e007      	b.n	800a47e <UART_RxISR_8BIT_FIFOEN+0x35e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	699a      	ldr	r2, [r3, #24]
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f042 0208 	orr.w	r2, r2, #8
 800a47c:	619a      	str	r2, [r3, #24]
}
 800a47e:	bf00      	nop
 800a480:	37b0      	adds	r7, #176	@ 0xb0
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}
 800a486:	bf00      	nop
 800a488:	40008000 	.word	0x40008000
 800a48c:	08009da1 	.word	0x08009da1

0800a490 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b0ae      	sub	sp, #184	@ 0xb8
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a49e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	69db      	ldr	r3, [r3, #28]
 800a4a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	689b      	ldr	r3, [r3, #8]
 800a4bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a4c6:	2b22      	cmp	r3, #34	@ 0x22
 800a4c8:	f040 818d 	bne.w	800a7e6 <UART_RxISR_16BIT_FIFOEN+0x356>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a4d2:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a4d6:	e130      	b.n	800a73a <UART_RxISR_16BIT_FIFOEN+0x2aa>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4de:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a4e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800a4ea:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800a4ee:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800a4f2:	4013      	ands	r3, r2
 800a4f4:	b29a      	uxth	r2, r3
 800a4f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a4fa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a500:	1c9a      	adds	r2, r3, #2
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a50c:	b29b      	uxth	r3, r3
 800a50e:	3b01      	subs	r3, #1
 800a510:	b29a      	uxth	r2, r3
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	69db      	ldr	r3, [r3, #28]
 800a51e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a522:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a526:	f003 0307 	and.w	r3, r3, #7
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d055      	beq.n	800a5da <UART_RxISR_16BIT_FIFOEN+0x14a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a52e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a532:	f003 0301 	and.w	r3, r3, #1
 800a536:	2b00      	cmp	r3, #0
 800a538:	d011      	beq.n	800a55e <UART_RxISR_16BIT_FIFOEN+0xce>
 800a53a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a53e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a542:	2b00      	cmp	r3, #0
 800a544:	d00b      	beq.n	800a55e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	2201      	movs	r2, #1
 800a54c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a554:	f043 0201 	orr.w	r2, r3, #1
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a55e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a562:	f003 0302 	and.w	r3, r3, #2
 800a566:	2b00      	cmp	r3, #0
 800a568:	d011      	beq.n	800a58e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800a56a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a56e:	f003 0301 	and.w	r3, r3, #1
 800a572:	2b00      	cmp	r3, #0
 800a574:	d00b      	beq.n	800a58e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	2202      	movs	r2, #2
 800a57c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a584:	f043 0204 	orr.w	r2, r3, #4
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a58e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a592:	f003 0304 	and.w	r3, r3, #4
 800a596:	2b00      	cmp	r3, #0
 800a598:	d011      	beq.n	800a5be <UART_RxISR_16BIT_FIFOEN+0x12e>
 800a59a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a59e:	f003 0301 	and.w	r3, r3, #1
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d00b      	beq.n	800a5be <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	2204      	movs	r2, #4
 800a5ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a5b4:	f043 0202 	orr.w	r2, r3, #2
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d008      	beq.n	800a5da <UART_RxISR_16BIT_FIFOEN+0x14a>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a5e0:	b29b      	uxth	r3, r3
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	f040 80a9 	bne.w	800a73a <UART_RxISR_16BIT_FIFOEN+0x2aa>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a5f0:	e853 3f00 	ldrex	r3, [r3]
 800a5f4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a5f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a5f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a5fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	461a      	mov	r2, r3
 800a606:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a60a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a60e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a610:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a612:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a616:	e841 2300 	strex	r3, r2, [r1]
 800a61a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a61c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d1e2      	bne.n	800a5e8 <UART_RxISR_16BIT_FIFOEN+0x158>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	3308      	adds	r3, #8
 800a628:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a62a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a62c:	e853 3f00 	ldrex	r3, [r3]
 800a630:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a632:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a634:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a638:	f023 0301 	bic.w	r3, r3, #1
 800a63c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	3308      	adds	r3, #8
 800a646:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800a64a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a64c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a64e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a650:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a652:	e841 2300 	strex	r3, r2, [r1]
 800a656:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a658:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d1e1      	bne.n	800a622 <UART_RxISR_16BIT_FIFOEN+0x192>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2220      	movs	r2, #32
 800a662:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2200      	movs	r2, #0
 800a66a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2200      	movs	r2, #0
 800a670:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	4a62      	ldr	r2, [pc, #392]	@ (800a800 <UART_RxISR_16BIT_FIFOEN+0x370>)
 800a678:	4293      	cmp	r3, r2
 800a67a:	d021      	beq.n	800a6c0 <UART_RxISR_16BIT_FIFOEN+0x230>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	685b      	ldr	r3, [r3, #4]
 800a682:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a686:	2b00      	cmp	r3, #0
 800a688:	d01a      	beq.n	800a6c0 <UART_RxISR_16BIT_FIFOEN+0x230>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a690:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a692:	e853 3f00 	ldrex	r3, [r3]
 800a696:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a698:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a69a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a69e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	461a      	mov	r2, r3
 800a6a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a6ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a6ae:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6b0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a6b2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a6b4:	e841 2300 	strex	r3, r2, [r1]
 800a6b8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a6ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d1e4      	bne.n	800a68a <UART_RxISR_16BIT_FIFOEN+0x1fa>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6c4:	2b01      	cmp	r3, #1
 800a6c6:	d132      	bne.n	800a72e <UART_RxISR_16BIT_FIFOEN+0x29e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6d6:	e853 3f00 	ldrex	r3, [r3]
 800a6da:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a6dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6de:	f023 0310 	bic.w	r3, r3, #16
 800a6e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	461a      	mov	r2, r3
 800a6ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a6f0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a6f2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a6f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a6f8:	e841 2300 	strex	r3, r2, [r1]
 800a6fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a6fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a700:	2b00      	cmp	r3, #0
 800a702:	d1e4      	bne.n	800a6ce <UART_RxISR_16BIT_FIFOEN+0x23e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	69db      	ldr	r3, [r3, #28]
 800a70a:	f003 0310 	and.w	r3, r3, #16
 800a70e:	2b10      	cmp	r3, #16
 800a710:	d103      	bne.n	800a71a <UART_RxISR_16BIT_FIFOEN+0x28a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	2210      	movs	r2, #16
 800a718:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a720:	687a      	ldr	r2, [r7, #4]
 800a722:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800a726:	4611      	mov	r1, r2
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	4798      	blx	r3
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800a72c:	e010      	b.n	800a750 <UART_RxISR_16BIT_FIFOEN+0x2c0>
          huart->RxCpltCallback(huart);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	4798      	blx	r3
        break;
 800a738:	e00a      	b.n	800a750 <UART_RxISR_16BIT_FIFOEN+0x2c0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a73a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d006      	beq.n	800a750 <UART_RxISR_16BIT_FIFOEN+0x2c0>
 800a742:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a746:	f003 0320 	and.w	r3, r3, #32
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	f47f aec4 	bne.w	800a4d8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a756:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a75a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d049      	beq.n	800a7f6 <UART_RxISR_16BIT_FIFOEN+0x366>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a768:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800a76c:	429a      	cmp	r2, r3
 800a76e:	d242      	bcs.n	800a7f6 <UART_RxISR_16BIT_FIFOEN+0x366>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	3308      	adds	r3, #8
 800a776:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a77a:	e853 3f00 	ldrex	r3, [r3]
 800a77e:	623b      	str	r3, [r7, #32]
   return(result);
 800a780:	6a3b      	ldr	r3, [r7, #32]
 800a782:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a786:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	3308      	adds	r3, #8
 800a790:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a794:	633a      	str	r2, [r7, #48]	@ 0x30
 800a796:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a798:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a79a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a79c:	e841 2300 	strex	r3, r2, [r1]
 800a7a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a7a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d1e3      	bne.n	800a770 <UART_RxISR_16BIT_FIFOEN+0x2e0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	4a16      	ldr	r2, [pc, #88]	@ (800a804 <UART_RxISR_16BIT_FIFOEN+0x374>)
 800a7ac:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	e853 3f00 	ldrex	r3, [r3]
 800a7ba:	60fb      	str	r3, [r7, #12]
   return(result);
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	f043 0320 	orr.w	r3, r3, #32
 800a7c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	461a      	mov	r2, r3
 800a7cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a7d0:	61fb      	str	r3, [r7, #28]
 800a7d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7d4:	69b9      	ldr	r1, [r7, #24]
 800a7d6:	69fa      	ldr	r2, [r7, #28]
 800a7d8:	e841 2300 	strex	r3, r2, [r1]
 800a7dc:	617b      	str	r3, [r7, #20]
   return(result);
 800a7de:	697b      	ldr	r3, [r7, #20]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d1e4      	bne.n	800a7ae <UART_RxISR_16BIT_FIFOEN+0x31e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a7e4:	e007      	b.n	800a7f6 <UART_RxISR_16BIT_FIFOEN+0x366>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	699a      	ldr	r2, [r3, #24]
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f042 0208 	orr.w	r2, r2, #8
 800a7f4:	619a      	str	r2, [r3, #24]
}
 800a7f6:	bf00      	nop
 800a7f8:	37b8      	adds	r7, #184	@ 0xb8
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}
 800a7fe:	bf00      	nop
 800a800:	40008000 	.word	0x40008000
 800a804:	08009f61 	.word	0x08009f61

0800a808 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a808:	b480      	push	{r7}
 800a80a:	b083      	sub	sp, #12
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a810:	bf00      	nop
 800a812:	370c      	adds	r7, #12
 800a814:	46bd      	mov	sp, r7
 800a816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81a:	4770      	bx	lr

0800a81c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a81c:	b480      	push	{r7}
 800a81e:	b083      	sub	sp, #12
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a824:	bf00      	nop
 800a826:	370c      	adds	r7, #12
 800a828:	46bd      	mov	sp, r7
 800a82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82e:	4770      	bx	lr

0800a830 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a830:	b480      	push	{r7}
 800a832:	b083      	sub	sp, #12
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a838:	bf00      	nop
 800a83a:	370c      	adds	r7, #12
 800a83c:	46bd      	mov	sp, r7
 800a83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a842:	4770      	bx	lr

0800a844 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a844:	b480      	push	{r7}
 800a846:	b085      	sub	sp, #20
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a852:	2b01      	cmp	r3, #1
 800a854:	d101      	bne.n	800a85a <HAL_UARTEx_DisableFifoMode+0x16>
 800a856:	2302      	movs	r3, #2
 800a858:	e027      	b.n	800a8aa <HAL_UARTEx_DisableFifoMode+0x66>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2201      	movs	r2, #1
 800a85e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2224      	movs	r2, #36	@ 0x24
 800a866:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	681a      	ldr	r2, [r3, #0]
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f022 0201 	bic.w	r2, r2, #1
 800a880:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a888:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2200      	movs	r2, #0
 800a88e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	68fa      	ldr	r2, [r7, #12]
 800a896:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2220      	movs	r2, #32
 800a89c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a8a8:	2300      	movs	r3, #0
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3714      	adds	r7, #20
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b4:	4770      	bx	lr

0800a8b6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a8b6:	b580      	push	{r7, lr}
 800a8b8:	b084      	sub	sp, #16
 800a8ba:	af00      	add	r7, sp, #0
 800a8bc:	6078      	str	r0, [r7, #4]
 800a8be:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a8c6:	2b01      	cmp	r3, #1
 800a8c8:	d101      	bne.n	800a8ce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a8ca:	2302      	movs	r3, #2
 800a8cc:	e02d      	b.n	800a92a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2201      	movs	r2, #1
 800a8d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2224      	movs	r2, #36	@ 0x24
 800a8da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	681a      	ldr	r2, [r3, #0]
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f022 0201 	bic.w	r2, r2, #1
 800a8f4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	689b      	ldr	r3, [r3, #8]
 800a8fc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	683a      	ldr	r2, [r7, #0]
 800a906:	430a      	orrs	r2, r1
 800a908:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f000 f850 	bl	800a9b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	68fa      	ldr	r2, [r7, #12]
 800a916:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2220      	movs	r2, #32
 800a91c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2200      	movs	r2, #0
 800a924:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a928:	2300      	movs	r3, #0
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	3710      	adds	r7, #16
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}

0800a932 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a932:	b580      	push	{r7, lr}
 800a934:	b084      	sub	sp, #16
 800a936:	af00      	add	r7, sp, #0
 800a938:	6078      	str	r0, [r7, #4]
 800a93a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a942:	2b01      	cmp	r3, #1
 800a944:	d101      	bne.n	800a94a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a946:	2302      	movs	r3, #2
 800a948:	e02d      	b.n	800a9a6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2201      	movs	r2, #1
 800a94e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2224      	movs	r2, #36	@ 0x24
 800a956:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	681a      	ldr	r2, [r3, #0]
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f022 0201 	bic.w	r2, r2, #1
 800a970:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	689b      	ldr	r3, [r3, #8]
 800a978:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	683a      	ldr	r2, [r7, #0]
 800a982:	430a      	orrs	r2, r1
 800a984:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f000 f812 	bl	800a9b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	68fa      	ldr	r2, [r7, #12]
 800a992:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2220      	movs	r2, #32
 800a998:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a9a4:	2300      	movs	r3, #0
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3710      	adds	r7, #16
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}
	...

0800a9b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b085      	sub	sp, #20
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d108      	bne.n	800a9d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2201      	movs	r2, #1
 800a9c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2201      	movs	r2, #1
 800a9cc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a9d0:	e031      	b.n	800aa36 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a9d2:	2308      	movs	r3, #8
 800a9d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a9d6:	2308      	movs	r3, #8
 800a9d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	689b      	ldr	r3, [r3, #8]
 800a9e0:	0e5b      	lsrs	r3, r3, #25
 800a9e2:	b2db      	uxtb	r3, r3
 800a9e4:	f003 0307 	and.w	r3, r3, #7
 800a9e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	689b      	ldr	r3, [r3, #8]
 800a9f0:	0f5b      	lsrs	r3, r3, #29
 800a9f2:	b2db      	uxtb	r3, r3
 800a9f4:	f003 0307 	and.w	r3, r3, #7
 800a9f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a9fa:	7bbb      	ldrb	r3, [r7, #14]
 800a9fc:	7b3a      	ldrb	r2, [r7, #12]
 800a9fe:	4911      	ldr	r1, [pc, #68]	@ (800aa44 <UARTEx_SetNbDataToProcess+0x94>)
 800aa00:	5c8a      	ldrb	r2, [r1, r2]
 800aa02:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800aa06:	7b3a      	ldrb	r2, [r7, #12]
 800aa08:	490f      	ldr	r1, [pc, #60]	@ (800aa48 <UARTEx_SetNbDataToProcess+0x98>)
 800aa0a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aa0c:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa10:	b29a      	uxth	r2, r3
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aa18:	7bfb      	ldrb	r3, [r7, #15]
 800aa1a:	7b7a      	ldrb	r2, [r7, #13]
 800aa1c:	4909      	ldr	r1, [pc, #36]	@ (800aa44 <UARTEx_SetNbDataToProcess+0x94>)
 800aa1e:	5c8a      	ldrb	r2, [r1, r2]
 800aa20:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800aa24:	7b7a      	ldrb	r2, [r7, #13]
 800aa26:	4908      	ldr	r1, [pc, #32]	@ (800aa48 <UARTEx_SetNbDataToProcess+0x98>)
 800aa28:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aa2a:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa2e:	b29a      	uxth	r2, r3
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800aa36:	bf00      	nop
 800aa38:	3714      	adds	r7, #20
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa40:	4770      	bx	lr
 800aa42:	bf00      	nop
 800aa44:	0800aba4 	.word	0x0800aba4
 800aa48:	0800abac 	.word	0x0800abac

0800aa4c <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b082      	sub	sp, #8
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
 800aa54:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	ed93 7a06 	vldr	s14, [r3, #24]
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	edd3 7a07 	vldr	s15, [r3, #28]
 800aa62:	ee37 7a27 	vadd.f32	s14, s14, s15
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	edd3 7a08 	vldr	s15, [r3, #32]
 800aa6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	edd3 7a06 	vldr	s15, [r3, #24]
 800aa7c:	eeb1 7a67 	vneg.f32	s14, s15
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	edd3 7a08 	vldr	s15, [r3, #32]
 800aa86:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800aa8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6a1a      	ldr	r2, [r3, #32]
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d006      	beq.n	800aab0 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	330c      	adds	r3, #12
 800aaa6:	220c      	movs	r2, #12
 800aaa8:	2100      	movs	r1, #0
 800aaaa:	4618      	mov	r0, r3
 800aaac:	f000 f81c 	bl	800aae8 <memset>
  }

}
 800aab0:	bf00      	nop
 800aab2:	3708      	adds	r7, #8
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}

0800aab8 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800aab8:	b480      	push	{r7}
 800aaba:	b085      	sub	sp, #20
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	60f8      	str	r0, [r7, #12]
 800aac0:	607b      	str	r3, [r7, #4]
 800aac2:	460b      	mov	r3, r1
 800aac4:	817b      	strh	r3, [r7, #10]
 800aac6:	4613      	mov	r3, r2
 800aac8:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	897a      	ldrh	r2, [r7, #10]
 800aace:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	893a      	ldrh	r2, [r7, #8]
 800aad4:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	687a      	ldr	r2, [r7, #4]
 800aada:	605a      	str	r2, [r3, #4]
}
 800aadc:	bf00      	nop
 800aade:	3714      	adds	r7, #20
 800aae0:	46bd      	mov	sp, r7
 800aae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae6:	4770      	bx	lr

0800aae8 <memset>:
 800aae8:	4402      	add	r2, r0
 800aaea:	4603      	mov	r3, r0
 800aaec:	4293      	cmp	r3, r2
 800aaee:	d100      	bne.n	800aaf2 <memset+0xa>
 800aaf0:	4770      	bx	lr
 800aaf2:	f803 1b01 	strb.w	r1, [r3], #1
 800aaf6:	e7f9      	b.n	800aaec <memset+0x4>

0800aaf8 <__libc_init_array>:
 800aaf8:	b570      	push	{r4, r5, r6, lr}
 800aafa:	4d0d      	ldr	r5, [pc, #52]	@ (800ab30 <__libc_init_array+0x38>)
 800aafc:	4c0d      	ldr	r4, [pc, #52]	@ (800ab34 <__libc_init_array+0x3c>)
 800aafe:	1b64      	subs	r4, r4, r5
 800ab00:	10a4      	asrs	r4, r4, #2
 800ab02:	2600      	movs	r6, #0
 800ab04:	42a6      	cmp	r6, r4
 800ab06:	d109      	bne.n	800ab1c <__libc_init_array+0x24>
 800ab08:	4d0b      	ldr	r5, [pc, #44]	@ (800ab38 <__libc_init_array+0x40>)
 800ab0a:	4c0c      	ldr	r4, [pc, #48]	@ (800ab3c <__libc_init_array+0x44>)
 800ab0c:	f000 f826 	bl	800ab5c <_init>
 800ab10:	1b64      	subs	r4, r4, r5
 800ab12:	10a4      	asrs	r4, r4, #2
 800ab14:	2600      	movs	r6, #0
 800ab16:	42a6      	cmp	r6, r4
 800ab18:	d105      	bne.n	800ab26 <__libc_init_array+0x2e>
 800ab1a:	bd70      	pop	{r4, r5, r6, pc}
 800ab1c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab20:	4798      	blx	r3
 800ab22:	3601      	adds	r6, #1
 800ab24:	e7ee      	b.n	800ab04 <__libc_init_array+0xc>
 800ab26:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab2a:	4798      	blx	r3
 800ab2c:	3601      	adds	r6, #1
 800ab2e:	e7f2      	b.n	800ab16 <__libc_init_array+0x1e>
 800ab30:	0800abbc 	.word	0x0800abbc
 800ab34:	0800abbc 	.word	0x0800abbc
 800ab38:	0800abbc 	.word	0x0800abbc
 800ab3c:	0800abc0 	.word	0x0800abc0

0800ab40 <memcpy>:
 800ab40:	440a      	add	r2, r1
 800ab42:	4291      	cmp	r1, r2
 800ab44:	f100 33ff 	add.w	r3, r0, #4294967295
 800ab48:	d100      	bne.n	800ab4c <memcpy+0xc>
 800ab4a:	4770      	bx	lr
 800ab4c:	b510      	push	{r4, lr}
 800ab4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab52:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab56:	4291      	cmp	r1, r2
 800ab58:	d1f9      	bne.n	800ab4e <memcpy+0xe>
 800ab5a:	bd10      	pop	{r4, pc}

0800ab5c <_init>:
 800ab5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab5e:	bf00      	nop
 800ab60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab62:	bc08      	pop	{r3}
 800ab64:	469e      	mov	lr, r3
 800ab66:	4770      	bx	lr

0800ab68 <_fini>:
 800ab68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab6a:	bf00      	nop
 800ab6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab6e:	bc08      	pop	{r3}
 800ab70:	469e      	mov	lr, r3
 800ab72:	4770      	bx	lr
