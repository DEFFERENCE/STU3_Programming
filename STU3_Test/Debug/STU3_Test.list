
STU3_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d15c  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800d334  0800d334  0000e334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d374  0800d374  0000f290  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d374  0800d374  0000e374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d37c  0800d37c  0000f290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d37c  0800d37c  0000e37c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d380  0800d380  0000e380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000290  20000000  0800d384  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019cc  20000290  0800d614  0000f290  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001c5c  0800d614  0000fc5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f290  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027cbe  00000000  00000000  0000f2c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004950  00000000  00000000  00036f7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bf8  00000000  00000000  0003b8d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015c3  00000000  00000000  0003d4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000056f5  00000000  00000000  0003ea8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026aeb  00000000  00000000  00044180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a5b5  00000000  00000000  0006ac6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00185220  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ab0  00000000  00000000  00185264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0018cd14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000290 	.word	0x20000290
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800d31c 	.word	0x0800d31c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000294 	.word	0x20000294
 8000214:	0800d31c 	.word	0x0800d31c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__gedf2>:
 8000590:	f04f 3cff 	mov.w	ip, #4294967295
 8000594:	e006      	b.n	80005a4 <__cmpdf2+0x4>
 8000596:	bf00      	nop

08000598 <__ledf2>:
 8000598:	f04f 0c01 	mov.w	ip, #1
 800059c:	e002      	b.n	80005a4 <__cmpdf2+0x4>
 800059e:	bf00      	nop

080005a0 <__cmpdf2>:
 80005a0:	f04f 0c01 	mov.w	ip, #1
 80005a4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80005a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005b4:	bf18      	it	ne
 80005b6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80005ba:	d01b      	beq.n	80005f4 <__cmpdf2+0x54>
 80005bc:	b001      	add	sp, #4
 80005be:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80005c2:	bf0c      	ite	eq
 80005c4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80005c8:	ea91 0f03 	teqne	r1, r3
 80005cc:	bf02      	ittt	eq
 80005ce:	ea90 0f02 	teqeq	r0, r2
 80005d2:	2000      	moveq	r0, #0
 80005d4:	4770      	bxeq	lr
 80005d6:	f110 0f00 	cmn.w	r0, #0
 80005da:	ea91 0f03 	teq	r1, r3
 80005de:	bf58      	it	pl
 80005e0:	4299      	cmppl	r1, r3
 80005e2:	bf08      	it	eq
 80005e4:	4290      	cmpeq	r0, r2
 80005e6:	bf2c      	ite	cs
 80005e8:	17d8      	asrcs	r0, r3, #31
 80005ea:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80005ee:	f040 0001 	orr.w	r0, r0, #1
 80005f2:	4770      	bx	lr
 80005f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005fc:	d102      	bne.n	8000604 <__cmpdf2+0x64>
 80005fe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000602:	d107      	bne.n	8000614 <__cmpdf2+0x74>
 8000604:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000608:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800060c:	d1d6      	bne.n	80005bc <__cmpdf2+0x1c>
 800060e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000612:	d0d3      	beq.n	80005bc <__cmpdf2+0x1c>
 8000614:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop

0800061c <__aeabi_cdrcmple>:
 800061c:	4684      	mov	ip, r0
 800061e:	4610      	mov	r0, r2
 8000620:	4662      	mov	r2, ip
 8000622:	468c      	mov	ip, r1
 8000624:	4619      	mov	r1, r3
 8000626:	4663      	mov	r3, ip
 8000628:	e000      	b.n	800062c <__aeabi_cdcmpeq>
 800062a:	bf00      	nop

0800062c <__aeabi_cdcmpeq>:
 800062c:	b501      	push	{r0, lr}
 800062e:	f7ff ffb7 	bl	80005a0 <__cmpdf2>
 8000632:	2800      	cmp	r0, #0
 8000634:	bf48      	it	mi
 8000636:	f110 0f00 	cmnmi.w	r0, #0
 800063a:	bd01      	pop	{r0, pc}

0800063c <__aeabi_dcmpeq>:
 800063c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000640:	f7ff fff4 	bl	800062c <__aeabi_cdcmpeq>
 8000644:	bf0c      	ite	eq
 8000646:	2001      	moveq	r0, #1
 8000648:	2000      	movne	r0, #0
 800064a:	f85d fb08 	ldr.w	pc, [sp], #8
 800064e:	bf00      	nop

08000650 <__aeabi_dcmplt>:
 8000650:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000654:	f7ff ffea 	bl	800062c <__aeabi_cdcmpeq>
 8000658:	bf34      	ite	cc
 800065a:	2001      	movcc	r0, #1
 800065c:	2000      	movcs	r0, #0
 800065e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000662:	bf00      	nop

08000664 <__aeabi_dcmple>:
 8000664:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000668:	f7ff ffe0 	bl	800062c <__aeabi_cdcmpeq>
 800066c:	bf94      	ite	ls
 800066e:	2001      	movls	r0, #1
 8000670:	2000      	movhi	r0, #0
 8000672:	f85d fb08 	ldr.w	pc, [sp], #8
 8000676:	bf00      	nop

08000678 <__aeabi_dcmpge>:
 8000678:	f84d ed08 	str.w	lr, [sp, #-8]!
 800067c:	f7ff ffce 	bl	800061c <__aeabi_cdrcmple>
 8000680:	bf94      	ite	ls
 8000682:	2001      	movls	r0, #1
 8000684:	2000      	movhi	r0, #0
 8000686:	f85d fb08 	ldr.w	pc, [sp], #8
 800068a:	bf00      	nop

0800068c <__aeabi_dcmpgt>:
 800068c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000690:	f7ff ffc4 	bl	800061c <__aeabi_cdrcmple>
 8000694:	bf34      	ite	cc
 8000696:	2001      	movcc	r0, #1
 8000698:	2000      	movcs	r0, #0
 800069a:	f85d fb08 	ldr.w	pc, [sp], #8
 800069e:	bf00      	nop

080006a0 <__aeabi_uldivmod>:
 80006a0:	b953      	cbnz	r3, 80006b8 <__aeabi_uldivmod+0x18>
 80006a2:	b94a      	cbnz	r2, 80006b8 <__aeabi_uldivmod+0x18>
 80006a4:	2900      	cmp	r1, #0
 80006a6:	bf08      	it	eq
 80006a8:	2800      	cmpeq	r0, #0
 80006aa:	bf1c      	itt	ne
 80006ac:	f04f 31ff 	movne.w	r1, #4294967295
 80006b0:	f04f 30ff 	movne.w	r0, #4294967295
 80006b4:	f000 b988 	b.w	80009c8 <__aeabi_idiv0>
 80006b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80006bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006c0:	f000 f806 	bl	80006d0 <__udivmoddi4>
 80006c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006cc:	b004      	add	sp, #16
 80006ce:	4770      	bx	lr

080006d0 <__udivmoddi4>:
 80006d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006d4:	9d08      	ldr	r5, [sp, #32]
 80006d6:	468e      	mov	lr, r1
 80006d8:	4604      	mov	r4, r0
 80006da:	4688      	mov	r8, r1
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d14a      	bne.n	8000776 <__udivmoddi4+0xa6>
 80006e0:	428a      	cmp	r2, r1
 80006e2:	4617      	mov	r7, r2
 80006e4:	d962      	bls.n	80007ac <__udivmoddi4+0xdc>
 80006e6:	fab2 f682 	clz	r6, r2
 80006ea:	b14e      	cbz	r6, 8000700 <__udivmoddi4+0x30>
 80006ec:	f1c6 0320 	rsb	r3, r6, #32
 80006f0:	fa01 f806 	lsl.w	r8, r1, r6
 80006f4:	fa20 f303 	lsr.w	r3, r0, r3
 80006f8:	40b7      	lsls	r7, r6
 80006fa:	ea43 0808 	orr.w	r8, r3, r8
 80006fe:	40b4      	lsls	r4, r6
 8000700:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000704:	fa1f fc87 	uxth.w	ip, r7
 8000708:	fbb8 f1fe 	udiv	r1, r8, lr
 800070c:	0c23      	lsrs	r3, r4, #16
 800070e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000712:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000716:	fb01 f20c 	mul.w	r2, r1, ip
 800071a:	429a      	cmp	r2, r3
 800071c:	d909      	bls.n	8000732 <__udivmoddi4+0x62>
 800071e:	18fb      	adds	r3, r7, r3
 8000720:	f101 30ff 	add.w	r0, r1, #4294967295
 8000724:	f080 80ea 	bcs.w	80008fc <__udivmoddi4+0x22c>
 8000728:	429a      	cmp	r2, r3
 800072a:	f240 80e7 	bls.w	80008fc <__udivmoddi4+0x22c>
 800072e:	3902      	subs	r1, #2
 8000730:	443b      	add	r3, r7
 8000732:	1a9a      	subs	r2, r3, r2
 8000734:	b2a3      	uxth	r3, r4
 8000736:	fbb2 f0fe 	udiv	r0, r2, lr
 800073a:	fb0e 2210 	mls	r2, lr, r0, r2
 800073e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000742:	fb00 fc0c 	mul.w	ip, r0, ip
 8000746:	459c      	cmp	ip, r3
 8000748:	d909      	bls.n	800075e <__udivmoddi4+0x8e>
 800074a:	18fb      	adds	r3, r7, r3
 800074c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000750:	f080 80d6 	bcs.w	8000900 <__udivmoddi4+0x230>
 8000754:	459c      	cmp	ip, r3
 8000756:	f240 80d3 	bls.w	8000900 <__udivmoddi4+0x230>
 800075a:	443b      	add	r3, r7
 800075c:	3802      	subs	r0, #2
 800075e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000762:	eba3 030c 	sub.w	r3, r3, ip
 8000766:	2100      	movs	r1, #0
 8000768:	b11d      	cbz	r5, 8000772 <__udivmoddi4+0xa2>
 800076a:	40f3      	lsrs	r3, r6
 800076c:	2200      	movs	r2, #0
 800076e:	e9c5 3200 	strd	r3, r2, [r5]
 8000772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000776:	428b      	cmp	r3, r1
 8000778:	d905      	bls.n	8000786 <__udivmoddi4+0xb6>
 800077a:	b10d      	cbz	r5, 8000780 <__udivmoddi4+0xb0>
 800077c:	e9c5 0100 	strd	r0, r1, [r5]
 8000780:	2100      	movs	r1, #0
 8000782:	4608      	mov	r0, r1
 8000784:	e7f5      	b.n	8000772 <__udivmoddi4+0xa2>
 8000786:	fab3 f183 	clz	r1, r3
 800078a:	2900      	cmp	r1, #0
 800078c:	d146      	bne.n	800081c <__udivmoddi4+0x14c>
 800078e:	4573      	cmp	r3, lr
 8000790:	d302      	bcc.n	8000798 <__udivmoddi4+0xc8>
 8000792:	4282      	cmp	r2, r0
 8000794:	f200 8105 	bhi.w	80009a2 <__udivmoddi4+0x2d2>
 8000798:	1a84      	subs	r4, r0, r2
 800079a:	eb6e 0203 	sbc.w	r2, lr, r3
 800079e:	2001      	movs	r0, #1
 80007a0:	4690      	mov	r8, r2
 80007a2:	2d00      	cmp	r5, #0
 80007a4:	d0e5      	beq.n	8000772 <__udivmoddi4+0xa2>
 80007a6:	e9c5 4800 	strd	r4, r8, [r5]
 80007aa:	e7e2      	b.n	8000772 <__udivmoddi4+0xa2>
 80007ac:	2a00      	cmp	r2, #0
 80007ae:	f000 8090 	beq.w	80008d2 <__udivmoddi4+0x202>
 80007b2:	fab2 f682 	clz	r6, r2
 80007b6:	2e00      	cmp	r6, #0
 80007b8:	f040 80a4 	bne.w	8000904 <__udivmoddi4+0x234>
 80007bc:	1a8a      	subs	r2, r1, r2
 80007be:	0c03      	lsrs	r3, r0, #16
 80007c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007c4:	b280      	uxth	r0, r0
 80007c6:	b2bc      	uxth	r4, r7
 80007c8:	2101      	movs	r1, #1
 80007ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80007ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80007d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80007d6:	fb04 f20c 	mul.w	r2, r4, ip
 80007da:	429a      	cmp	r2, r3
 80007dc:	d907      	bls.n	80007ee <__udivmoddi4+0x11e>
 80007de:	18fb      	adds	r3, r7, r3
 80007e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80007e4:	d202      	bcs.n	80007ec <__udivmoddi4+0x11c>
 80007e6:	429a      	cmp	r2, r3
 80007e8:	f200 80e0 	bhi.w	80009ac <__udivmoddi4+0x2dc>
 80007ec:	46c4      	mov	ip, r8
 80007ee:	1a9b      	subs	r3, r3, r2
 80007f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80007f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80007f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80007fc:	fb02 f404 	mul.w	r4, r2, r4
 8000800:	429c      	cmp	r4, r3
 8000802:	d907      	bls.n	8000814 <__udivmoddi4+0x144>
 8000804:	18fb      	adds	r3, r7, r3
 8000806:	f102 30ff 	add.w	r0, r2, #4294967295
 800080a:	d202      	bcs.n	8000812 <__udivmoddi4+0x142>
 800080c:	429c      	cmp	r4, r3
 800080e:	f200 80ca 	bhi.w	80009a6 <__udivmoddi4+0x2d6>
 8000812:	4602      	mov	r2, r0
 8000814:	1b1b      	subs	r3, r3, r4
 8000816:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800081a:	e7a5      	b.n	8000768 <__udivmoddi4+0x98>
 800081c:	f1c1 0620 	rsb	r6, r1, #32
 8000820:	408b      	lsls	r3, r1
 8000822:	fa22 f706 	lsr.w	r7, r2, r6
 8000826:	431f      	orrs	r7, r3
 8000828:	fa0e f401 	lsl.w	r4, lr, r1
 800082c:	fa20 f306 	lsr.w	r3, r0, r6
 8000830:	fa2e fe06 	lsr.w	lr, lr, r6
 8000834:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000838:	4323      	orrs	r3, r4
 800083a:	fa00 f801 	lsl.w	r8, r0, r1
 800083e:	fa1f fc87 	uxth.w	ip, r7
 8000842:	fbbe f0f9 	udiv	r0, lr, r9
 8000846:	0c1c      	lsrs	r4, r3, #16
 8000848:	fb09 ee10 	mls	lr, r9, r0, lr
 800084c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000850:	fb00 fe0c 	mul.w	lr, r0, ip
 8000854:	45a6      	cmp	lr, r4
 8000856:	fa02 f201 	lsl.w	r2, r2, r1
 800085a:	d909      	bls.n	8000870 <__udivmoddi4+0x1a0>
 800085c:	193c      	adds	r4, r7, r4
 800085e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000862:	f080 809c 	bcs.w	800099e <__udivmoddi4+0x2ce>
 8000866:	45a6      	cmp	lr, r4
 8000868:	f240 8099 	bls.w	800099e <__udivmoddi4+0x2ce>
 800086c:	3802      	subs	r0, #2
 800086e:	443c      	add	r4, r7
 8000870:	eba4 040e 	sub.w	r4, r4, lr
 8000874:	fa1f fe83 	uxth.w	lr, r3
 8000878:	fbb4 f3f9 	udiv	r3, r4, r9
 800087c:	fb09 4413 	mls	r4, r9, r3, r4
 8000880:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000884:	fb03 fc0c 	mul.w	ip, r3, ip
 8000888:	45a4      	cmp	ip, r4
 800088a:	d908      	bls.n	800089e <__udivmoddi4+0x1ce>
 800088c:	193c      	adds	r4, r7, r4
 800088e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000892:	f080 8082 	bcs.w	800099a <__udivmoddi4+0x2ca>
 8000896:	45a4      	cmp	ip, r4
 8000898:	d97f      	bls.n	800099a <__udivmoddi4+0x2ca>
 800089a:	3b02      	subs	r3, #2
 800089c:	443c      	add	r4, r7
 800089e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80008a2:	eba4 040c 	sub.w	r4, r4, ip
 80008a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80008aa:	4564      	cmp	r4, ip
 80008ac:	4673      	mov	r3, lr
 80008ae:	46e1      	mov	r9, ip
 80008b0:	d362      	bcc.n	8000978 <__udivmoddi4+0x2a8>
 80008b2:	d05f      	beq.n	8000974 <__udivmoddi4+0x2a4>
 80008b4:	b15d      	cbz	r5, 80008ce <__udivmoddi4+0x1fe>
 80008b6:	ebb8 0203 	subs.w	r2, r8, r3
 80008ba:	eb64 0409 	sbc.w	r4, r4, r9
 80008be:	fa04 f606 	lsl.w	r6, r4, r6
 80008c2:	fa22 f301 	lsr.w	r3, r2, r1
 80008c6:	431e      	orrs	r6, r3
 80008c8:	40cc      	lsrs	r4, r1
 80008ca:	e9c5 6400 	strd	r6, r4, [r5]
 80008ce:	2100      	movs	r1, #0
 80008d0:	e74f      	b.n	8000772 <__udivmoddi4+0xa2>
 80008d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80008d6:	0c01      	lsrs	r1, r0, #16
 80008d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80008dc:	b280      	uxth	r0, r0
 80008de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80008e2:	463b      	mov	r3, r7
 80008e4:	4638      	mov	r0, r7
 80008e6:	463c      	mov	r4, r7
 80008e8:	46b8      	mov	r8, r7
 80008ea:	46be      	mov	lr, r7
 80008ec:	2620      	movs	r6, #32
 80008ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80008f2:	eba2 0208 	sub.w	r2, r2, r8
 80008f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80008fa:	e766      	b.n	80007ca <__udivmoddi4+0xfa>
 80008fc:	4601      	mov	r1, r0
 80008fe:	e718      	b.n	8000732 <__udivmoddi4+0x62>
 8000900:	4610      	mov	r0, r2
 8000902:	e72c      	b.n	800075e <__udivmoddi4+0x8e>
 8000904:	f1c6 0220 	rsb	r2, r6, #32
 8000908:	fa2e f302 	lsr.w	r3, lr, r2
 800090c:	40b7      	lsls	r7, r6
 800090e:	40b1      	lsls	r1, r6
 8000910:	fa20 f202 	lsr.w	r2, r0, r2
 8000914:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000918:	430a      	orrs	r2, r1
 800091a:	fbb3 f8fe 	udiv	r8, r3, lr
 800091e:	b2bc      	uxth	r4, r7
 8000920:	fb0e 3318 	mls	r3, lr, r8, r3
 8000924:	0c11      	lsrs	r1, r2, #16
 8000926:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800092a:	fb08 f904 	mul.w	r9, r8, r4
 800092e:	40b0      	lsls	r0, r6
 8000930:	4589      	cmp	r9, r1
 8000932:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000936:	b280      	uxth	r0, r0
 8000938:	d93e      	bls.n	80009b8 <__udivmoddi4+0x2e8>
 800093a:	1879      	adds	r1, r7, r1
 800093c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000940:	d201      	bcs.n	8000946 <__udivmoddi4+0x276>
 8000942:	4589      	cmp	r9, r1
 8000944:	d81f      	bhi.n	8000986 <__udivmoddi4+0x2b6>
 8000946:	eba1 0109 	sub.w	r1, r1, r9
 800094a:	fbb1 f9fe 	udiv	r9, r1, lr
 800094e:	fb09 f804 	mul.w	r8, r9, r4
 8000952:	fb0e 1119 	mls	r1, lr, r9, r1
 8000956:	b292      	uxth	r2, r2
 8000958:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800095c:	4542      	cmp	r2, r8
 800095e:	d229      	bcs.n	80009b4 <__udivmoddi4+0x2e4>
 8000960:	18ba      	adds	r2, r7, r2
 8000962:	f109 31ff 	add.w	r1, r9, #4294967295
 8000966:	d2c4      	bcs.n	80008f2 <__udivmoddi4+0x222>
 8000968:	4542      	cmp	r2, r8
 800096a:	d2c2      	bcs.n	80008f2 <__udivmoddi4+0x222>
 800096c:	f1a9 0102 	sub.w	r1, r9, #2
 8000970:	443a      	add	r2, r7
 8000972:	e7be      	b.n	80008f2 <__udivmoddi4+0x222>
 8000974:	45f0      	cmp	r8, lr
 8000976:	d29d      	bcs.n	80008b4 <__udivmoddi4+0x1e4>
 8000978:	ebbe 0302 	subs.w	r3, lr, r2
 800097c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000980:	3801      	subs	r0, #1
 8000982:	46e1      	mov	r9, ip
 8000984:	e796      	b.n	80008b4 <__udivmoddi4+0x1e4>
 8000986:	eba7 0909 	sub.w	r9, r7, r9
 800098a:	4449      	add	r1, r9
 800098c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000990:	fbb1 f9fe 	udiv	r9, r1, lr
 8000994:	fb09 f804 	mul.w	r8, r9, r4
 8000998:	e7db      	b.n	8000952 <__udivmoddi4+0x282>
 800099a:	4673      	mov	r3, lr
 800099c:	e77f      	b.n	800089e <__udivmoddi4+0x1ce>
 800099e:	4650      	mov	r0, sl
 80009a0:	e766      	b.n	8000870 <__udivmoddi4+0x1a0>
 80009a2:	4608      	mov	r0, r1
 80009a4:	e6fd      	b.n	80007a2 <__udivmoddi4+0xd2>
 80009a6:	443b      	add	r3, r7
 80009a8:	3a02      	subs	r2, #2
 80009aa:	e733      	b.n	8000814 <__udivmoddi4+0x144>
 80009ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80009b0:	443b      	add	r3, r7
 80009b2:	e71c      	b.n	80007ee <__udivmoddi4+0x11e>
 80009b4:	4649      	mov	r1, r9
 80009b6:	e79c      	b.n	80008f2 <__udivmoddi4+0x222>
 80009b8:	eba1 0109 	sub.w	r1, r1, r9
 80009bc:	46c4      	mov	ip, r8
 80009be:	fbb1 f9fe 	udiv	r9, r1, lr
 80009c2:	fb09 f804 	mul.w	r8, r9, r4
 80009c6:	e7c4      	b.n	8000952 <__udivmoddi4+0x282>

080009c8 <__aeabi_idiv0>:
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <Encoder_Init>:
#define Count_PER_REV 12000.0f
#define TWO_PI 6.283185f
#define PI 3.14286f
#define Lead 11.0f

void Encoder_Init(Encoder *enc, TIM_HandleTypeDef *htim) {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	6039      	str	r1, [r7, #0]
    enc->htim = htim;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	683a      	ldr	r2, [r7, #0]
 80009da:	601a      	str	r2, [r3, #0]
    HAL_TIM_Encoder_Start(htim, TIM_CHANNEL_ALL);
 80009dc:	213c      	movs	r1, #60	@ 0x3c
 80009de:	6838      	ldr	r0, [r7, #0]
 80009e0:	f007 fdf8 	bl	80085d4 <HAL_TIM_Encoder_Start>

    enc->lastRawPosition = __HAL_TIM_GET_COUNTER(htim);
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009ea:	461a      	mov	r2, r3
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	605a      	str	r2, [r3, #4]
    enc->position = 0;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	f04f 0200 	mov.w	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
    enc->velocity = 0;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	f04f 0200 	mov.w	r2, #0
 80009fe:	60da      	str	r2, [r3, #12]
    enc->acceleration = 0;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	f04f 0200 	mov.w	r2, #0
 8000a06:	611a      	str	r2, [r3, #16]
    enc->lastPosition = 0;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	f04f 0200 	mov.w	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]
    enc->lastVelocity = 0;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	f04f 0200 	mov.w	r2, #0
 8000a16:	61da      	str	r2, [r3, #28]
}
 8000a18:	bf00      	nop
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <Encoder_Update>:

void Encoder_Update(Encoder *enc, float dt) {
 8000a20:	b480      	push	{r7}
 8000a22:	b085      	sub	sp, #20
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	ed87 0a00 	vstr	s0, [r7]
    int32_t rawPosition = __HAL_TIM_GET_COUNTER(enc->htim);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a34:	60bb      	str	r3, [r7, #8]
    int32_t deltaRaw = rawPosition - enc->lastRawPosition;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	68ba      	ldr	r2, [r7, #8]
 8000a3c:	1ad3      	subs	r3, r2, r3
 8000a3e:	60fb      	str	r3, [r7, #12]

    // Handle 16-bit counter wrap-around
    if (deltaRaw > 30000) {
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	f247 5230 	movw	r2, #30000	@ 0x7530
 8000a46:	4293      	cmp	r3, r2
 8000a48:	dd05      	ble.n	8000a56 <Encoder_Update+0x36>
        deltaRaw -= 60000;
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	f5a3 436a 	sub.w	r3, r3, #59904	@ 0xea00
 8000a50:	3b60      	subs	r3, #96	@ 0x60
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	e008      	b.n	8000a68 <Encoder_Update+0x48>
    } else if (deltaRaw < -30000) {
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	4a48      	ldr	r2, [pc, #288]	@ (8000b7c <Encoder_Update+0x15c>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	da04      	bge.n	8000a68 <Encoder_Update+0x48>
        deltaRaw += 60000;
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	f503 436a 	add.w	r3, r3, #59904	@ 0xea00
 8000a64:	3360      	adds	r3, #96	@ 0x60
 8000a66:	60fb      	str	r3, [r7, #12]
    }

    enc->position += ((float)deltaRaw * TWO_PI) / Count_PER_REV;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	ed93 7a02 	vldr	s14, [r3, #8]
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	ee07 3a90 	vmov	s15, r3
 8000a74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a78:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8000b80 <Encoder_Update+0x160>
 8000a7c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000a80:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 8000b84 <Encoder_Update+0x164>
 8000a84:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000a88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	edc3 7a02 	vstr	s15, [r3, #8]
    enc->velocity = (enc->position - enc->lastPosition) / dt;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	ed93 7a02 	vldr	s14, [r3, #8]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	edd3 7a06 	vldr	s15, [r3, #24]
 8000a9e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000aa2:	ed97 7a00 	vldr	s14, [r7]
 8000aa6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	edc3 7a03 	vstr	s15, [r3, #12]
    enc->acceleration = (enc->velocity - enc->lastVelocity) / dt;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	ed93 7a03 	vldr	s14, [r3, #12]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	edd3 7a07 	vldr	s15, [r3, #28]
 8000abc:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000ac0:	ed97 7a00 	vldr	s14, [r7]
 8000ac4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	edc3 7a04 	vstr	s15, [r3, #16]
    enc->position_degree = enc->position * (180.0f / PI);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	edd3 7a02 	vldr	s15, [r3, #8]
 8000ad4:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8000b88 <Encoder_Update+0x168>
 8000ad8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	edc3 7a05 	vstr	s15, [r3, #20]

    enc->lastRawPosition = rawPosition;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	68ba      	ldr	r2, [r7, #8]
 8000ae6:	605a      	str	r2, [r3, #4]
    enc->lastPosition = enc->position;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	689a      	ldr	r2, [r3, #8]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	619a      	str	r2, [r3, #24]
    enc->lastVelocity = enc->velocity;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	68da      	ldr	r2, [r3, #12]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	61da      	str	r2, [r3, #28]

    enc->position_mm += ((float)deltaRaw / Count_PER_REV) * Lead;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	ed93 7a08 	vldr	s14, [r3, #32]
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	ee07 3a90 	vmov	s15, r3
 8000b04:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000b08:	ed9f 6a1e 	vldr	s12, [pc, #120]	@ 8000b84 <Encoder_Update+0x164>
 8000b0c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000b10:	eef2 6a06 	vmov.f32	s13, #38	@ 0x41300000  11.0
 8000b14:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000b18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	edc3 7a08 	vstr	s15, [r3, #32]
    enc->velocity_mm = (enc->position_mm - enc->lastPosition_mm) / dt;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	ed93 7a08 	vldr	s14, [r3, #32]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8000b2e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000b32:	ed97 7a00 	vldr	s14, [r7]
 8000b36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    enc->acceleration_mm = (enc->velocity_mm - enc->lastVelocity_mm) / dt;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8000b4c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000b50:	ed97 7a00 	vldr	s14, [r7]
 8000b54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

    enc->lastPosition_mm = enc->position_mm;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6a1a      	ldr	r2, [r3, #32]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	62da      	str	r2, [r3, #44]	@ 0x2c
    enc->lastVelocity_mm = enc->velocity_mm;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8000b6e:	bf00      	nop
 8000b70:	3714      	adds	r7, #20
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	ffff8ad0 	.word	0xffff8ad0
 8000b80:	40c90fda 	.word	0x40c90fda
 8000b84:	463b8000 	.word	0x463b8000
 8000b88:	42651738 	.word	0x42651738

08000b8c <Encoder_GetPosition>:

void Encoder_setLimit(Encoder *enc, float limit) {
		enc->position = limit;
}

float Encoder_GetPosition(Encoder *enc) {
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
    return enc->position;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	ee07 3a90 	vmov	s15, r3
}
 8000b9c:	eeb0 0a67 	vmov.f32	s0, s15
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <Encoder_GetVelocity>:

float Encoder_GetVelocity(Encoder *enc) {
 8000baa:	b480      	push	{r7}
 8000bac:	b083      	sub	sp, #12
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
    return enc->velocity;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	68db      	ldr	r3, [r3, #12]
 8000bb6:	ee07 3a90 	vmov	s15, r3
}
 8000bba:	eeb0 0a67 	vmov.f32	s0, s15
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <Encoder_GetAcceleration>:

float Encoder_GetAcceleration(Encoder *enc) {
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
    return enc->acceleration;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	691b      	ldr	r3, [r3, #16]
 8000bd4:	ee07 3a90 	vmov	s15, r3
}
 8000bd8:	eeb0 0a67 	vmov.f32	s0, s15
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <Encoder_GetPosition_mm>:

float Encoder_GetDegree(Encoder *enc) {
	return enc->position_degree;
}

float Encoder_GetPosition_mm(Encoder *enc) {
 8000be6:	b480      	push	{r7}
 8000be8:	b083      	sub	sp, #12
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
    return enc->position_mm;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6a1b      	ldr	r3, [r3, #32]
 8000bf2:	ee07 3a90 	vmov	s15, r3
}
 8000bf6:	eeb0 0a67 	vmov.f32	s0, s15
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <Encoder_GetVelocity_mm>:

float Encoder_GetVelocity_mm(Encoder *enc) {
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
    return enc->velocity_mm;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c10:	ee07 3a90 	vmov	s15, r3
}
 8000c14:	eeb0 0a67 	vmov.f32	s0, s15
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
	...

08000c24 <PS2_ReadData>:
uint8_t SPIRx[PS2_DATA_LENGTH];

#define PS2_CS_PORT GPIOC
#define PS2_CS_PIN  GPIO_PIN_10

void PS2_ReadData() {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af02      	add	r7, sp, #8
//    HAL_Delay(1);
    HAL_GPIO_WritePin(PS2_CS_PORT, PS2_CS_PIN, GPIO_PIN_RESET);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c30:	4811      	ldr	r0, [pc, #68]	@ (8000c78 <PS2_ReadData+0x54>)
 8000c32:	f005 fb5d 	bl	80062f0 <HAL_GPIO_WritePin>

    for (int i = 0; i < PS2_DATA_LENGTH; i++) {
 8000c36:	2300      	movs	r3, #0
 8000c38:	607b      	str	r3, [r7, #4]
 8000c3a:	e00f      	b.n	8000c5c <PS2_ReadData+0x38>
        HAL_SPI_TransmitReceive(&hspi1, &SPITx[i], &SPIRx[i], 1, HAL_MAX_DELAY);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	4a0f      	ldr	r2, [pc, #60]	@ (8000c7c <PS2_ReadData+0x58>)
 8000c40:	1899      	adds	r1, r3, r2
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4a0e      	ldr	r2, [pc, #56]	@ (8000c80 <PS2_ReadData+0x5c>)
 8000c46:	441a      	add	r2, r3
 8000c48:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4c:	9300      	str	r3, [sp, #0]
 8000c4e:	2301      	movs	r3, #1
 8000c50:	480c      	ldr	r0, [pc, #48]	@ (8000c84 <PS2_ReadData+0x60>)
 8000c52:	f006 fc58 	bl	8007506 <HAL_SPI_TransmitReceive>
    for (int i = 0; i < PS2_DATA_LENGTH; i++) {
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2b07      	cmp	r3, #7
 8000c60:	ddec      	ble.n	8000c3c <PS2_ReadData+0x18>
//        HAL_Delay(5);
    }

    HAL_GPIO_WritePin(PS2_CS_PORT, PS2_CS_PIN, GPIO_PIN_SET);
 8000c62:	2201      	movs	r2, #1
 8000c64:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c68:	4803      	ldr	r0, [pc, #12]	@ (8000c78 <PS2_ReadData+0x54>)
 8000c6a:	f005 fb41 	bl	80062f0 <HAL_GPIO_WritePin>
//    HAL_Delay(5);
}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	48000800 	.word	0x48000800
 8000c7c:	20000000 	.word	0x20000000
 8000c80:	200002ac 	.word	0x200002ac
 8000c84:	200013fc 	.word	0x200013fc

08000c88 <PS2_ButtonCircle>:

uint8_t PS2_ButtonCircle() {
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x20);
 8000c8c:	4b06      	ldr	r3, [pc, #24]	@ (8000ca8 <PS2_ButtonCircle+0x20>)
 8000c8e:	791b      	ldrb	r3, [r3, #4]
 8000c90:	f003 0320 	and.w	r3, r3, #32
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	bf0c      	ite	eq
 8000c98:	2301      	moveq	r3, #1
 8000c9a:	2300      	movne	r3, #0
 8000c9c:	b2db      	uxtb	r3, r3
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	200002ac 	.word	0x200002ac

08000cac <PS2_ButtonSquare>:

uint8_t PS2_ButtonSquare() {
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x80);
 8000cb0:	4b05      	ldr	r3, [pc, #20]	@ (8000cc8 <PS2_ButtonSquare+0x1c>)
 8000cb2:	791b      	ldrb	r3, [r3, #4]
 8000cb4:	b25b      	sxtb	r3, r3
 8000cb6:	43db      	mvns	r3, r3
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	09db      	lsrs	r3, r3, #7
 8000cbc:	b2db      	uxtb	r3, r3
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	200002ac 	.word	0x200002ac

08000ccc <PS2_ButtonTriangle>:

uint8_t PS2_ButtonTriangle() {
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x10);
 8000cd0:	4b06      	ldr	r3, [pc, #24]	@ (8000cec <PS2_ButtonTriangle+0x20>)
 8000cd2:	791b      	ldrb	r3, [r3, #4]
 8000cd4:	f003 0310 	and.w	r3, r3, #16
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	bf0c      	ite	eq
 8000cdc:	2301      	moveq	r3, #1
 8000cde:	2300      	movne	r3, #0
 8000ce0:	b2db      	uxtb	r3, r3
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	200002ac 	.word	0x200002ac

08000cf0 <PS2_ButtonCross>:

uint8_t PS2_ButtonCross() {
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x40);
 8000cf4:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <PS2_ButtonCross+0x20>)
 8000cf6:	791b      	ldrb	r3, [r3, #4]
 8000cf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	bf0c      	ite	eq
 8000d00:	2301      	moveq	r3, #1
 8000d02:	2300      	movne	r3, #0
 8000d04:	b2db      	uxtb	r3, r3
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	200002ac 	.word	0x200002ac

08000d14 <PS2_ButtonR1>:

uint8_t PS2_ButtonR1() {
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x08);
 8000d18:	4b06      	ldr	r3, [pc, #24]	@ (8000d34 <PS2_ButtonR1+0x20>)
 8000d1a:	791b      	ldrb	r3, [r3, #4]
 8000d1c:	f003 0308 	and.w	r3, r3, #8
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	bf0c      	ite	eq
 8000d24:	2301      	moveq	r3, #1
 8000d26:	2300      	movne	r3, #0
 8000d28:	b2db      	uxtb	r3, r3
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	200002ac 	.word	0x200002ac

08000d38 <PS2_ButtonR2>:

uint8_t PS2_ButtonR2() {
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x02);
 8000d3c:	4b06      	ldr	r3, [pc, #24]	@ (8000d58 <PS2_ButtonR2+0x20>)
 8000d3e:	791b      	ldrb	r3, [r3, #4]
 8000d40:	f003 0302 	and.w	r3, r3, #2
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	bf0c      	ite	eq
 8000d48:	2301      	moveq	r3, #1
 8000d4a:	2300      	movne	r3, #0
 8000d4c:	b2db      	uxtb	r3, r3
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	200002ac 	.word	0x200002ac

08000d5c <PS2_ButtonSelect>:

uint8_t PS2_ButtonSelect() {
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
	return !(SPIRx[3] & 0x01);
 8000d60:	4b06      	ldr	r3, [pc, #24]	@ (8000d7c <PS2_ButtonSelect+0x20>)
 8000d62:	78db      	ldrb	r3, [r3, #3]
 8000d64:	f003 0301 	and.w	r3, r3, #1
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	bf0c      	ite	eq
 8000d6c:	2301      	moveq	r3, #1
 8000d6e:	2300      	movne	r3, #0
 8000d70:	b2db      	uxtb	r3, r3
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	200002ac 	.word	0x200002ac

08000d80 <PS2_ButtonStart>:

uint8_t PS2_ButtonStart() {
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
	return !(SPIRx[3] & 0x08);
 8000d84:	4b06      	ldr	r3, [pc, #24]	@ (8000da0 <PS2_ButtonStart+0x20>)
 8000d86:	78db      	ldrb	r3, [r3, #3]
 8000d88:	f003 0308 	and.w	r3, r3, #8
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	bf0c      	ite	eq
 8000d90:	2301      	moveq	r3, #1
 8000d92:	2300      	movne	r3, #0
 8000d94:	b2db      	uxtb	r3, r3
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	200002ac 	.word	0x200002ac

08000da4 <PS2_ButtonL2>:

uint8_t PS2_ButtonL2() {
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
	 return !(SPIRx[4] & 0x01);
 8000da8:	4b06      	ldr	r3, [pc, #24]	@ (8000dc4 <PS2_ButtonL2+0x20>)
 8000daa:	791b      	ldrb	r3, [r3, #4]
 8000dac:	f003 0301 	and.w	r3, r3, #1
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	bf0c      	ite	eq
 8000db4:	2301      	moveq	r3, #1
 8000db6:	2300      	movne	r3, #0
 8000db8:	b2db      	uxtb	r3, r3
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	200002ac 	.word	0x200002ac

08000dc8 <Kalman_Init>:
#include "Kalman_Filter.h"

void Kalman_Init(KalmanFilter *kf) {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
    arm_mat_init_f32(&kf->A, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->A_data);
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	3370      	adds	r3, #112	@ 0x70
 8000dd6:	2204      	movs	r2, #4
 8000dd8:	2104      	movs	r1, #4
 8000dda:	f00b fdb8 	bl	800c94e <arm_mat_init_f32>
    arm_mat_init_f32(&kf->B, KALMAN_STATE_DIM, KALMAN_MEAS_DIM, kf->B_data);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	f103 0008 	add.w	r0, r3, #8
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	33b0      	adds	r3, #176	@ 0xb0
 8000de8:	2204      	movs	r2, #4
 8000dea:	2104      	movs	r1, #4
 8000dec:	f00b fdaf 	bl	800c94e <arm_mat_init_f32>
    arm_mat_init_f32(&kf->H, KALMAN_MEAS_DIM, KALMAN_STATE_DIM, kf->H_data);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f103 0010 	add.w	r0, r3, #16
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	33f0      	adds	r3, #240	@ 0xf0
 8000dfa:	2204      	movs	r2, #4
 8000dfc:	2104      	movs	r1, #4
 8000dfe:	f00b fda6 	bl	800c94e <arm_mat_init_f32>
    arm_mat_init_f32(&kf->Q, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->Q_data);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	f103 0018 	add.w	r0, r3, #24
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8000e0e:	2204      	movs	r2, #4
 8000e10:	2104      	movs	r1, #4
 8000e12:	f00b fd9c 	bl	800c94e <arm_mat_init_f32>
    arm_mat_init_f32(&kf->R, KALMAN_MEAS_DIM, KALMAN_MEAS_DIM, kf->R_data);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	f103 0020 	add.w	r0, r3, #32
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8000e22:	2204      	movs	r2, #4
 8000e24:	2104      	movs	r1, #4
 8000e26:	f00b fd92 	bl	800c94e <arm_mat_init_f32>
    arm_mat_init_f32(&kf->P, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->P_data);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 8000e36:	2204      	movs	r2, #4
 8000e38:	2104      	movs	r1, #4
 8000e3a:	f00b fd88 	bl	800c94e <arm_mat_init_f32>
    arm_mat_init_f32(&kf->K, KALMAN_STATE_DIM, KALMAN_MEAS_DIM, kf->K_data);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8000e4a:	2204      	movs	r2, #4
 8000e4c:	2104      	movs	r1, #4
 8000e4e:	f00b fd7e 	bl	800c94e <arm_mat_init_f32>
    arm_mat_init_f32(&kf->Input, KALMAN_STATE_DIM, 1, kf->Input_data);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8000e5e:	2201      	movs	r2, #1
 8000e60:	2104      	movs	r1, #4
 8000e62:	f00b fd74 	bl	800c94e <arm_mat_init_f32>

    arm_mat_init_f32(&kf->x, KALMAN_STATE_DIM, 1, kf->x_data);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8000e72:	2201      	movs	r2, #1
 8000e74:	2104      	movs	r1, #4
 8000e76:	f00b fd6a 	bl	800c94e <arm_mat_init_f32>
    arm_mat_init_f32(&kf->u, KALMAN_MEAS_DIM, 1, kf->u_data);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 8000e86:	2201      	movs	r2, #1
 8000e88:	2104      	movs	r1, #4
 8000e8a:	f00b fd60 	bl	800c94e <arm_mat_init_f32>
    arm_mat_init_f32(&kf->z, KALMAN_MEAS_DIM, 1, kf->z_data);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	f103 0050 	add.w	r0, r3, #80	@ 0x50
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	2104      	movs	r1, #4
 8000e9e:	f00b fd56 	bl	800c94e <arm_mat_init_f32>

    arm_mat_init_f32(&kf->temp1, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->temp1_data);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8000eae:	2204      	movs	r2, #4
 8000eb0:	2104      	movs	r1, #4
 8000eb2:	f00b fd4c 	bl	800c94e <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp2, KALMAN_STATE_DIM, KALMAN_MEAS_DIM, kf->temp2_data);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8000ec2:	2204      	movs	r2, #4
 8000ec4:	2104      	movs	r1, #4
 8000ec6:	f00b fd42 	bl	800c94e <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp3, KALMAN_MEAS_DIM, KALMAN_MEAS_DIM, kf->temp3_data);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8000ed6:	2204      	movs	r2, #4
 8000ed8:	2104      	movs	r1, #4
 8000eda:	f00b fd38 	bl	800c94e <arm_mat_init_f32>

    // Clear state
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	e00b      	b.n	8000efc <Kalman_Init+0x134>
        kf->x_data[i] = 0.0f;
 8000ee4:	687a      	ldr	r2, [r7, #4]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	338c      	adds	r3, #140	@ 0x8c
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	4413      	add	r3, r2
 8000eee:	3304      	adds	r3, #4
 8000ef0:	f04f 0200 	mov.w	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	2b03      	cmp	r3, #3
 8000f00:	ddf0      	ble.n	8000ee4 <Kalman_Init+0x11c>
    }
}
 8000f02:	bf00      	nop
 8000f04:	bf00      	nop
 8000f06:	3710      	adds	r7, #16
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <Kalman_SetProcessNoise>:

void Kalman_SetProcessNoise(KalmanFilter *kf, float value) {
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	ed87 0a00 	vstr	s0, [r7]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	e01c      	b.n	8000f58 <Kalman_SetProcessNoise+0x4c>
        for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60bb      	str	r3, [r7, #8]
 8000f22:	e013      	b.n	8000f4c <Kalman_SetProcessNoise+0x40>
            kf->Q_data[i * KALMAN_STATE_DIM + j] = (i == j) ? value : 0.0f;
 8000f24:	68fa      	ldr	r2, [r7, #12]
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d101      	bne.n	8000f30 <Kalman_SetProcessNoise+0x24>
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	e001      	b.n	8000f34 <Kalman_SetProcessNoise+0x28>
 8000f30:	f04f 0300 	mov.w	r3, #0
 8000f34:	68fa      	ldr	r2, [r7, #12]
 8000f36:	0091      	lsls	r1, r2, #2
 8000f38:	68ba      	ldr	r2, [r7, #8]
 8000f3a:	440a      	add	r2, r1
 8000f3c:	6879      	ldr	r1, [r7, #4]
 8000f3e:	324c      	adds	r2, #76	@ 0x4c
 8000f40:	0092      	lsls	r2, r2, #2
 8000f42:	440a      	add	r2, r1
 8000f44:	6013      	str	r3, [r2, #0]
        for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	2b03      	cmp	r3, #3
 8000f50:	dde8      	ble.n	8000f24 <Kalman_SetProcessNoise+0x18>
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	3301      	adds	r3, #1
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	2b03      	cmp	r3, #3
 8000f5c:	dddf      	ble.n	8000f1e <Kalman_SetProcessNoise+0x12>
        }
    }
}
 8000f5e:	bf00      	nop
 8000f60:	bf00      	nop
 8000f62:	3714      	adds	r7, #20
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <Kalman_SetMeasurementNoise>:

void Kalman_SetMeasurementNoise(KalmanFilter *kf, float value) {
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	ed87 0a00 	vstr	s0, [r7]
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 8000f78:	2300      	movs	r3, #0
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	e01c      	b.n	8000fb8 <Kalman_SetMeasurementNoise+0x4c>
        for (int j = 0; j < KALMAN_MEAS_DIM; j++) {
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	e013      	b.n	8000fac <Kalman_SetMeasurementNoise+0x40>
            kf->R_data[i * KALMAN_MEAS_DIM + j] = (i == j) ? value : 0.0f;
 8000f84:	68fa      	ldr	r2, [r7, #12]
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d101      	bne.n	8000f90 <Kalman_SetMeasurementNoise+0x24>
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	e001      	b.n	8000f94 <Kalman_SetMeasurementNoise+0x28>
 8000f90:	f04f 0300 	mov.w	r3, #0
 8000f94:	68fa      	ldr	r2, [r7, #12]
 8000f96:	0091      	lsls	r1, r2, #2
 8000f98:	68ba      	ldr	r2, [r7, #8]
 8000f9a:	440a      	add	r2, r1
 8000f9c:	6879      	ldr	r1, [r7, #4]
 8000f9e:	325c      	adds	r2, #92	@ 0x5c
 8000fa0:	0092      	lsls	r2, r2, #2
 8000fa2:	440a      	add	r2, r1
 8000fa4:	6013      	str	r3, [r2, #0]
        for (int j = 0; j < KALMAN_MEAS_DIM; j++) {
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	60bb      	str	r3, [r7, #8]
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	2b03      	cmp	r3, #3
 8000fb0:	dde8      	ble.n	8000f84 <Kalman_SetMeasurementNoise+0x18>
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	2b03      	cmp	r3, #3
 8000fbc:	dddf      	ble.n	8000f7e <Kalman_SetMeasurementNoise+0x12>
        }
    }
}
 8000fbe:	bf00      	nop
 8000fc0:	bf00      	nop
 8000fc2:	3714      	adds	r7, #20
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <Kalman_SetInput>:

void Kalman_SetInput(KalmanFilter *kf, float value)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	ed87 0a00 	vstr	s0, [r7]
	kf->Input_data[0] = value;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	683a      	ldr	r2, [r7, #0]
 8000fdc:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <Kalman_Predict>:
void Kalman_Predict(KalmanFilter *kf) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
	// x = A * x + B * u
	arm_mat_mult_f32(&kf->A, &kf->x, &kf->temp1);   // temp1 = A * x
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3358      	adds	r3, #88	@ 0x58
 8001000:	461a      	mov	r2, r3
 8001002:	f00c f833 	bl	800d06c <arm_mat_mult_f32>
	arm_mat_mult_f32(&kf->B, &kf->Input, &kf->temp2);   // temp2 = B * u
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f103 0008 	add.w	r0, r3, #8
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	3360      	adds	r3, #96	@ 0x60
 8001016:	461a      	mov	r2, r3
 8001018:	f00c f828 	bl	800d06c <arm_mat_mult_f32>
	arm_mat_add_f32(&kf->temp1, &kf->temp2, &kf->x); // x = temp1 + temp2
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3340      	adds	r3, #64	@ 0x40
 800102c:	461a      	mov	r2, r3
 800102e:	f00b fc53 	bl	800c8d8 <arm_mat_add_f32>

    // P = A * P * A' + Q
    arm_mat_mult_f32(&kf->A, &kf->P, &kf->temp1);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	3358      	adds	r3, #88	@ 0x58
 800103e:	461a      	mov	r2, r3
 8001040:	f00c f814 	bl	800d06c <arm_mat_mult_f32>
    arm_mat_trans_f32(&kf->A, &kf->temp2);  // reuse temp2
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	3360      	adds	r3, #96	@ 0x60
 800104a:	4619      	mov	r1, r3
 800104c:	4610      	mov	r0, r2
 800104e:	f00c f8c2 	bl	800d1d6 <arm_mat_trans_f32>
    arm_mat_mult_f32(&kf->temp1, &kf->temp2, &kf->P);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	3328      	adds	r3, #40	@ 0x28
 8001062:	461a      	mov	r2, r3
 8001064:	f00c f802 	bl	800d06c <arm_mat_mult_f32>
    arm_mat_add_f32(&kf->P, &kf->Q, &kf->P);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f103 0118 	add.w	r1, r3, #24
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3328      	adds	r3, #40	@ 0x28
 8001078:	461a      	mov	r2, r3
 800107a:	f00b fc2d 	bl	800c8d8 <arm_mat_add_f32>
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <Kalman_Update>:

void Kalman_Update(KalmanFilter *kf, float32_t *measurement) {
 8001086:	b580      	push	{r7, lr}
 8001088:	b088      	sub	sp, #32
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
 800108e:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 8001090:	2300      	movs	r3, #0
 8001092:	61fb      	str	r3, [r7, #28]
 8001094:	e00e      	b.n	80010b4 <Kalman_Update+0x2e>
        kf->z_data[i] = measurement[i];
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	683a      	ldr	r2, [r7, #0]
 800109c:	4413      	add	r3, r2
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	6879      	ldr	r1, [r7, #4]
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	3394      	adds	r3, #148	@ 0x94
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	440b      	add	r3, r1
 80010aa:	3304      	adds	r3, #4
 80010ac:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	3301      	adds	r3, #1
 80010b2:	61fb      	str	r3, [r7, #28]
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	2b03      	cmp	r3, #3
 80010b8:	dded      	ble.n	8001096 <Kalman_Update+0x10>
    }

    // K = P * H' * (H * P * H' + R)^-1
    arm_mat_trans_f32(&kf->H, &kf->temp2);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f103 0210 	add.w	r2, r3, #16
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3360      	adds	r3, #96	@ 0x60
 80010c4:	4619      	mov	r1, r3
 80010c6:	4610      	mov	r0, r2
 80010c8:	f00c f885 	bl	800d1d6 <arm_mat_trans_f32>
    arm_mat_mult_f32(&kf->P, &kf->temp2, &kf->temp1);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3358      	adds	r3, #88	@ 0x58
 80010dc:	461a      	mov	r2, r3
 80010de:	f00b ffc5 	bl	800d06c <arm_mat_mult_f32>
    arm_mat_mult_f32(&kf->H, &kf->temp1, &kf->temp3);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f103 0010 	add.w	r0, r3, #16
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	3368      	adds	r3, #104	@ 0x68
 80010f2:	461a      	mov	r2, r3
 80010f4:	f00b ffba 	bl	800d06c <arm_mat_mult_f32>
    arm_mat_add_f32(&kf->temp3, &kf->R, &kf->temp3);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f103 0120 	add.w	r1, r3, #32
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3368      	adds	r3, #104	@ 0x68
 8001108:	461a      	mov	r2, r3
 800110a:	f00b fbe5 	bl	800c8d8 <arm_mat_add_f32>
    arm_mat_inverse_f32(&kf->temp3, &kf->temp3);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3368      	adds	r3, #104	@ 0x68
 8001118:	4619      	mov	r1, r3
 800111a:	4610      	mov	r0, r2
 800111c:	f00b fc2f 	bl	800c97e <arm_mat_inverse_f32>
    arm_mat_mult_f32(&kf->temp1, &kf->temp3, &kf->K);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3330      	adds	r3, #48	@ 0x30
 8001130:	461a      	mov	r2, r3
 8001132:	f00b ff9b 	bl	800d06c <arm_mat_mult_f32>

    // x = x + K * (z - H * x)
    arm_mat_mult_f32(&kf->H, &kf->x, &kf->u);         // reuse u for Hx
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f103 0010 	add.w	r0, r3, #16
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	3348      	adds	r3, #72	@ 0x48
 8001146:	461a      	mov	r2, r3
 8001148:	f00b ff90 	bl	800d06c <arm_mat_mult_f32>
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 800114c:	2300      	movs	r3, #0
 800114e:	61bb      	str	r3, [r7, #24]
 8001150:	e01c      	b.n	800118c <Kalman_Update+0x106>
        kf->u_data[i] = kf->z_data[i] - kf->u_data[i]; // z - Hx
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	3394      	adds	r3, #148	@ 0x94
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	4413      	add	r3, r2
 800115c:	3304      	adds	r3, #4
 800115e:	ed93 7a00 	vldr	s14, [r3]
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	3390      	adds	r3, #144	@ 0x90
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	4413      	add	r3, r2
 800116c:	3304      	adds	r3, #4
 800116e:	edd3 7a00 	vldr	s15, [r3]
 8001172:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	3390      	adds	r3, #144	@ 0x90
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	4413      	add	r3, r2
 8001180:	3304      	adds	r3, #4
 8001182:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	3301      	adds	r3, #1
 800118a:	61bb      	str	r3, [r7, #24]
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	2b03      	cmp	r3, #3
 8001190:	dddf      	ble.n	8001152 <Kalman_Update+0xcc>
    }
    arm_mat_mult_f32(&kf->K, &kf->u, &kf->u);         // reuse u for K*(z-Hx)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	3348      	adds	r3, #72	@ 0x48
 80011a2:	461a      	mov	r2, r3
 80011a4:	f00b ff62 	bl	800d06c <arm_mat_mult_f32>
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]
 80011ac:	e01c      	b.n	80011e8 <Kalman_Update+0x162>
        kf->x_data[i] += kf->u_data[i];
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	338c      	adds	r3, #140	@ 0x8c
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	4413      	add	r3, r2
 80011b8:	3304      	adds	r3, #4
 80011ba:	ed93 7a00 	vldr	s14, [r3]
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	3390      	adds	r3, #144	@ 0x90
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	4413      	add	r3, r2
 80011c8:	3304      	adds	r3, #4
 80011ca:	edd3 7a00 	vldr	s15, [r3]
 80011ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	338c      	adds	r3, #140	@ 0x8c
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	4413      	add	r3, r2
 80011dc:	3304      	adds	r3, #4
 80011de:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	3301      	adds	r3, #1
 80011e6:	617b      	str	r3, [r7, #20]
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	2b03      	cmp	r3, #3
 80011ec:	dddf      	ble.n	80011ae <Kalman_Update+0x128>
    }

    // P = (I - K * H) * P
    for (int i = 0; i < KALMAN_STATE_DIM * KALMAN_STATE_DIM; i++) {
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
 80011f2:	e00b      	b.n	800120c <Kalman_Update+0x186>
        kf->temp1_data[i] = 0.0f;
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	3398      	adds	r3, #152	@ 0x98
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	4413      	add	r3, r2
 80011fe:	3304      	adds	r3, #4
 8001200:	f04f 0200 	mov.w	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KALMAN_STATE_DIM * KALMAN_STATE_DIM; i++) {
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	3301      	adds	r3, #1
 800120a:	613b      	str	r3, [r7, #16]
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	2b0f      	cmp	r3, #15
 8001210:	ddf0      	ble.n	80011f4 <Kalman_Update+0x16e>
    }
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8001212:	2300      	movs	r3, #0
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	e00e      	b.n	8001236 <Kalman_Update+0x1b0>
        kf->temp1_data[i * KALMAN_STATE_DIM + i] = 1.0f;
 8001218:	68fa      	ldr	r2, [r7, #12]
 800121a:	4613      	mov	r3, r2
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	4413      	add	r3, r2
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	3398      	adds	r3, #152	@ 0x98
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	4413      	add	r3, r2
 8001228:	3304      	adds	r3, #4
 800122a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800122e:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	3301      	adds	r3, #1
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	2b03      	cmp	r3, #3
 800123a:	dded      	ble.n	8001218 <Kalman_Update+0x192>
    }
    arm_mat_mult_f32(&kf->K, &kf->H, &kf->temp2);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f103 0110 	add.w	r1, r3, #16
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3360      	adds	r3, #96	@ 0x60
 800124c:	461a      	mov	r2, r3
 800124e:	f00b ff0d 	bl	800d06c <arm_mat_mult_f32>
    arm_mat_sub_f32(&kf->temp1, &kf->temp2, &kf->temp1);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	3358      	adds	r3, #88	@ 0x58
 8001262:	461a      	mov	r2, r3
 8001264:	f00b ff7c 	bl	800d160 <arm_mat_sub_f32>
    arm_mat_mult_f32(&kf->temp1, &kf->P, &kf->P);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3328      	adds	r3, #40	@ 0x28
 8001278:	461a      	mov	r2, r3
 800127a:	f00b fef7 	bl	800d06c <arm_mat_mult_f32>
}
 800127e:	bf00      	nop
 8001280:	3720      	adds	r7, #32
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001290:	4b04      	ldr	r3, [pc, #16]	@ (80012a4 <modbus_1t5_Timeout+0x1c>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2201      	movs	r2, #1
 8001296:	751a      	strb	r2, [r3, #20]
}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	200002b4 	.word	0x200002b4

080012a8 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 80012b0:	4b04      	ldr	r3, [pc, #16]	@ (80012c4 <modbus_3t5_Timeout+0x1c>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2201      	movs	r2, #1
 80012b6:	755a      	strb	r2, [r3, #21]
}
 80012b8:	bf00      	nop
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	200002b4 	.word	0x200002b4

080012c8 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 80012d2:	4b15      	ldr	r3, [pc, #84]	@ (8001328 <modbus_UART_Recived+0x60>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2201      	movs	r2, #1
 80012d8:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 80012da:	4b13      	ldr	r3, [pc, #76]	@ (8001328 <modbus_UART_Recived+0x60>)
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	@ 0x3a2
 80012e2:	1c59      	adds	r1, r3, #1
 80012e4:	b289      	uxth	r1, r1
 80012e6:	f8a2 13a2 	strh.w	r1, [r2, #930]	@ 0x3a2
 80012ea:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80012ee:	d210      	bcs.n	8001312 <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80012f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001328 <modbus_UART_Recived+0x60>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	68d8      	ldr	r0, [r3, #12]
 80012f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001328 <modbus_UART_Recived+0x60>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001328 <modbus_UART_Recived+0x60>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001302:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001306:	4413      	add	r3, r2
 8001308:	3302      	adds	r3, #2
 800130a:	2201      	movs	r2, #1
 800130c:	4619      	mov	r1, r3
 800130e:	f008 ff71 	bl	800a1f4 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001312:	4b05      	ldr	r3, [pc, #20]	@ (8001328 <modbus_UART_Recived+0x60>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	691b      	ldr	r3, [r3, #16]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2200      	movs	r2, #0
 800131c:	625a      	str	r2, [r3, #36]	@ 0x24

}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	200002b4 	.word	0x200002b4

0800132c <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8001336:	4a24      	ldr	r2, [pc, #144]	@ (80013c8 <Modbus_init+0x9c>)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 800133c:	4b22      	ldr	r3, [pc, #136]	@ (80013c8 <Modbus_init+0x9c>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	683a      	ldr	r2, [r7, #0]
 8001342:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 8001344:	4b20      	ldr	r3, [pc, #128]	@ (80013c8 <Modbus_init+0x9c>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	691b      	ldr	r3, [r3, #16]
 800134a:	4a20      	ldr	r2, [pc, #128]	@ (80013cc <Modbus_init+0xa0>)
 800134c:	2114      	movs	r1, #20
 800134e:	4618      	mov	r0, r3
 8001350:	f007 fe46 	bl	8008fe0 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001354:	4b1c      	ldr	r3, [pc, #112]	@ (80013c8 <Modbus_init+0x9c>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	691b      	ldr	r3, [r3, #16]
 800135a:	4a1d      	ldr	r2, [pc, #116]	@ (80013d0 <Modbus_init+0xa4>)
 800135c:	210e      	movs	r1, #14
 800135e:	4618      	mov	r0, r3
 8001360:	f007 fe3e 	bl	8008fe0 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 8001364:	4b18      	ldr	r3, [pc, #96]	@ (80013c8 <Modbus_init+0x9c>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	4a1a      	ldr	r2, [pc, #104]	@ (80013d4 <Modbus_init+0xa8>)
 800136c:	2103      	movs	r1, #3
 800136e:	4618      	mov	r0, r3
 8001370:	f008 fe86 	bl	800a080 <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001374:	4b14      	ldr	r3, [pc, #80]	@ (80013c8 <Modbus_init+0x9c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	68d8      	ldr	r0, [r3, #12]
 800137a:	4b13      	ldr	r3, [pc, #76]	@ (80013c8 <Modbus_init+0x9c>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	4b12      	ldr	r3, [pc, #72]	@ (80013c8 <Modbus_init+0x9c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001386:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 800138a:	4413      	add	r3, r2
 800138c:	3302      	adds	r3, #2
 800138e:	2201      	movs	r2, #1
 8001390:	4619      	mov	r1, r3
 8001392:	f008 ff2f 	bl	800a1f4 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8001396:	4b0c      	ldr	r3, [pc, #48]	@ (80013c8 <Modbus_init+0x9c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	691b      	ldr	r3, [r3, #16]
 800139c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d10c      	bne.n	80013c0 <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 80013a6:	4b08      	ldr	r3, [pc, #32]	@ (80013c8 <Modbus_init+0x9c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	691b      	ldr	r3, [r3, #16]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f006 fd01 	bl	8007db4 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 80013b2:	4b05      	ldr	r3, [pc, #20]	@ (80013c8 <Modbus_init+0x9c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	691b      	ldr	r3, [r3, #16]
 80013b8:	2100      	movs	r1, #0
 80013ba:	4618      	mov	r0, r3
 80013bc:	f006 ffc8 	bl	8008350 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 80013c0:	bf00      	nop
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	200002b4 	.word	0x200002b4
 80013cc:	08001289 	.word	0x08001289
 80013d0:	080012a9 	.word	0x080012a9
 80013d4:	080012c9 	.word	0x080012c9

080013d8 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 80013d8:	b480      	push	{r7}
 80013da:	b085      	sub	sp, #20
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	460b      	mov	r3, r1
 80013e2:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 80013e4:	23ff      	movs	r3, #255	@ 0xff
 80013e6:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 80013e8:	23ff      	movs	r3, #255	@ 0xff
 80013ea:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 80013ec:	e013      	b.n	8001416 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	1c5a      	adds	r2, r3, #1
 80013f2:	607a      	str	r2, [r7, #4]
 80013f4:	781a      	ldrb	r2, [r3, #0]
 80013f6:	7bbb      	ldrb	r3, [r7, #14]
 80013f8:	4053      	eors	r3, r2
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 80013fe:	4a10      	ldr	r2, [pc, #64]	@ (8001440 <CRC16+0x68>)
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	4413      	add	r3, r2
 8001404:	781a      	ldrb	r2, [r3, #0]
 8001406:	7bfb      	ldrb	r3, [r7, #15]
 8001408:	4053      	eors	r3, r2
 800140a:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 800140c:	4a0d      	ldr	r2, [pc, #52]	@ (8001444 <CRC16+0x6c>)
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	4413      	add	r3, r2
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001416:	883b      	ldrh	r3, [r7, #0]
 8001418:	1e5a      	subs	r2, r3, #1
 800141a:	803a      	strh	r2, [r7, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d1e6      	bne.n	80013ee <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8001420:	7bfb      	ldrb	r3, [r7, #15]
 8001422:	b21b      	sxth	r3, r3
 8001424:	021b      	lsls	r3, r3, #8
 8001426:	b21a      	sxth	r2, r3
 8001428:	7bbb      	ldrb	r3, [r7, #14]
 800142a:	b21b      	sxth	r3, r3
 800142c:	4313      	orrs	r3, r2
 800142e:	b21b      	sxth	r3, r3
 8001430:	b29b      	uxth	r3, r3
}
 8001432:	4618      	mov	r0, r3
 8001434:	3714      	adds	r7, #20
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	20000108 	.word	0x20000108
 8001444:	20000008 	.word	0x20000008

08001448 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 800144e:	4b80      	ldr	r3, [pc, #512]	@ (8001650 <Modbus_Protocal_Worker+0x208>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	7e1b      	ldrb	r3, [r3, #24]
 8001454:	3b01      	subs	r3, #1
 8001456:	2b03      	cmp	r3, #3
 8001458:	d80a      	bhi.n	8001470 <Modbus_Protocal_Worker+0x28>
 800145a:	a201      	add	r2, pc, #4	@ (adr r2, 8001460 <Modbus_Protocal_Worker+0x18>)
 800145c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001460:	0800147b 	.word	0x0800147b
 8001464:	08001619 	.word	0x08001619
 8001468:	08001505 	.word	0x08001505
 800146c:	0800152b 	.word	0x0800152b
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8001470:	4b77      	ldr	r3, [pc, #476]	@ (8001650 <Modbus_Protocal_Worker+0x208>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2201      	movs	r2, #1
 8001476:	761a      	strb	r2, [r3, #24]
		break;
 8001478:	e0e6      	b.n	8001648 <Modbus_Protocal_Worker+0x200>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 800147a:	4b75      	ldr	r3, [pc, #468]	@ (8001650 <Modbus_Protocal_Worker+0x208>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
 8001482:	2b00      	cmp	r3, #0
 8001484:	d002      	beq.n	800148c <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 8001486:	f000 f9d5 	bl	8001834 <Modbus_Emission>
 800148a:	e01c      	b.n	80014c6 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 800148c:	4b70      	ldr	r3, [pc, #448]	@ (8001650 <Modbus_Protocal_Worker+0x208>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	7d9b      	ldrb	r3, [r3, #22]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d017      	beq.n	80014c6 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8001496:	4b6e      	ldr	r3, [pc, #440]	@ (8001650 <Modbus_Protocal_Worker+0x208>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2200      	movs	r2, #0
 800149c:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 800149e:	4b6c      	ldr	r3, [pc, #432]	@ (8001650 <Modbus_Protocal_Worker+0x208>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2200      	movs	r2, #0
 80014a4:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 80014a6:	4b6a      	ldr	r3, [pc, #424]	@ (8001650 <Modbus_Protocal_Worker+0x208>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	691b      	ldr	r3, [r3, #16]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	4b67      	ldr	r3, [pc, #412]	@ (8001650 <Modbus_Protocal_Worker+0x208>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	691b      	ldr	r3, [r3, #16]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f042 0201 	orr.w	r2, r2, #1
 80014bc:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 80014be:	4b64      	ldr	r3, [pc, #400]	@ (8001650 <Modbus_Protocal_Worker+0x208>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2203      	movs	r2, #3
 80014c4:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 80014c6:	4b62      	ldr	r3, [pc, #392]	@ (8001650 <Modbus_Protocal_Worker+0x208>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014d0:	2b20      	cmp	r3, #32
 80014d2:	f040 80b2 	bne.w	800163a <Modbus_Protocal_Worker+0x1f2>
		{
			hModbus->modbusUartStructure.RxTail =0;
 80014d6:	4b5e      	ldr	r3, [pc, #376]	@ (8001650 <Modbus_Protocal_Worker+0x208>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2200      	movs	r2, #0
 80014dc:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80014e0:	4b5b      	ldr	r3, [pc, #364]	@ (8001650 <Modbus_Protocal_Worker+0x208>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	68d8      	ldr	r0, [r3, #12]
 80014e6:	4b5a      	ldr	r3, [pc, #360]	@ (8001650 <Modbus_Protocal_Worker+0x208>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	4b59      	ldr	r3, [pc, #356]	@ (8001650 <Modbus_Protocal_Worker+0x208>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80014f2:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80014f6:	4413      	add	r3, r2
 80014f8:	3302      	adds	r3, #2
 80014fa:	2201      	movs	r2, #1
 80014fc:	4619      	mov	r1, r3
 80014fe:	f008 fe79 	bl	800a1f4 <HAL_UART_Receive_IT>
		}
		break;
 8001502:	e09a      	b.n	800163a <Modbus_Protocal_Worker+0x1f2>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8001504:	4b52      	ldr	r3, [pc, #328]	@ (8001650 <Modbus_Protocal_Worker+0x208>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	7d1b      	ldrb	r3, [r3, #20]
 800150a:	2b00      	cmp	r3, #0
 800150c:	f000 8097 	beq.w	800163e <Modbus_Protocal_Worker+0x1f6>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 8001510:	4b4f      	ldr	r3, [pc, #316]	@ (8001650 <Modbus_Protocal_Worker+0x208>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2200      	movs	r2, #0
 8001516:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001518:	4b4d      	ldr	r3, [pc, #308]	@ (8001650 <Modbus_Protocal_Worker+0x208>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	22fe      	movs	r2, #254	@ 0xfe
 800151e:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8001520:	4b4b      	ldr	r3, [pc, #300]	@ (8001650 <Modbus_Protocal_Worker+0x208>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2204      	movs	r2, #4
 8001526:	761a      	strb	r2, [r3, #24]
		}
		break;
 8001528:	e089      	b.n	800163e <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 800152a:	4b49      	ldr	r3, [pc, #292]	@ (8001650 <Modbus_Protocal_Worker+0x208>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	7d9b      	ldrb	r3, [r3, #22]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d009      	beq.n	8001548 <Modbus_Protocal_Worker+0x100>
		{

			if(!hModbus->RecvStatus)
 8001534:	4b46      	ldr	r3, [pc, #280]	@ (8001650 <Modbus_Protocal_Worker+0x208>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f993 3017 	ldrsb.w	r3, [r3, #23]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d103      	bne.n	8001548 <Modbus_Protocal_Worker+0x100>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001540:	4b43      	ldr	r3, [pc, #268]	@ (8001650 <Modbus_Protocal_Worker+0x208>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	22ff      	movs	r2, #255	@ 0xff
 8001546:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8001548:	4b41      	ldr	r3, [pc, #260]	@ (8001650 <Modbus_Protocal_Worker+0x208>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8001550:	f113 0f02 	cmn.w	r3, #2
 8001554:	d150      	bne.n	80015f8 <Modbus_Protocal_Worker+0x1b0>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8001556:	4b3e      	ldr	r3, [pc, #248]	@ (8001650 <Modbus_Protocal_Worker+0x208>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2200      	movs	r2, #0
 800155c:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 800155e:	4b3c      	ldr	r3, [pc, #240]	@ (8001650 <Modbus_Protocal_Worker+0x208>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f203 2272 	addw	r2, r3, #626	@ 0x272
 8001566:	4b3a      	ldr	r3, [pc, #232]	@ (8001650 <Modbus_Protocal_Worker+0x208>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800156e:	3b02      	subs	r3, #2
 8001570:	4619      	mov	r1, r3
 8001572:	4610      	mov	r0, r2
 8001574:	f7ff ff30 	bl	80013d8 <CRC16>
 8001578:	4603      	mov	r3, r0
 800157a:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 800157c:	793a      	ldrb	r2, [r7, #4]
 800157e:	4b34      	ldr	r3, [pc, #208]	@ (8001650 <Modbus_Protocal_Worker+0x208>)
 8001580:	6819      	ldr	r1, [r3, #0]
 8001582:	4b33      	ldr	r3, [pc, #204]	@ (8001650 <Modbus_Protocal_Worker+0x208>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800158a:	3b02      	subs	r3, #2
 800158c:	440b      	add	r3, r1
 800158e:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 8001592:	429a      	cmp	r2, r3
 8001594:	d10c      	bne.n	80015b0 <Modbus_Protocal_Worker+0x168>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8001596:	797a      	ldrb	r2, [r7, #5]
 8001598:	4b2d      	ldr	r3, [pc, #180]	@ (8001650 <Modbus_Protocal_Worker+0x208>)
 800159a:	6819      	ldr	r1, [r3, #0]
 800159c:	4b2c      	ldr	r3, [pc, #176]	@ (8001650 <Modbus_Protocal_Worker+0x208>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80015a4:	3b01      	subs	r3, #1
 80015a6:	440b      	add	r3, r1
 80015a8:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d004      	beq.n	80015ba <Modbus_Protocal_Worker+0x172>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80015b0:	4b27      	ldr	r3, [pc, #156]	@ (8001650 <Modbus_Protocal_Worker+0x208>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	22ff      	movs	r2, #255	@ 0xff
 80015b6:	75da      	strb	r2, [r3, #23]
				break;
 80015b8:	e046      	b.n	8001648 <Modbus_Protocal_Worker+0x200>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 80015ba:	4b25      	ldr	r3, [pc, #148]	@ (8001650 <Modbus_Protocal_Worker+0x208>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 80015c2:	4b23      	ldr	r3, [pc, #140]	@ (8001650 <Modbus_Protocal_Worker+0x208>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d113      	bne.n	80015f4 <Modbus_Protocal_Worker+0x1ac>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 80015cc:	4b20      	ldr	r3, [pc, #128]	@ (8001650 <Modbus_Protocal_Worker+0x208>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 80015d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001650 <Modbus_Protocal_Worker+0x208>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 80015dc:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 80015de:	4b1c      	ldr	r3, [pc, #112]	@ (8001650 <Modbus_Protocal_Worker+0x208>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80015e6:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 80015e8:	461a      	mov	r2, r3
 80015ea:	f00b fe67 	bl	800d2bc <memcpy>

			//execute command
			Modbus_frame_response();
 80015ee:	f000 f909 	bl	8001804 <Modbus_frame_response>
 80015f2:	e001      	b.n	80015f8 <Modbus_Protocal_Worker+0x1b0>
				break;
 80015f4:	bf00      	nop
					}
		break;


	}
}
 80015f6:	e027      	b.n	8001648 <Modbus_Protocal_Worker+0x200>
		if(hModbus->Flag_T35TimeOut)
 80015f8:	4b15      	ldr	r3, [pc, #84]	@ (8001650 <Modbus_Protocal_Worker+0x208>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	7d5b      	ldrb	r3, [r3, #21]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d01f      	beq.n	8001642 <Modbus_Protocal_Worker+0x1fa>
			hModbus->Mstatus = Modbus_state_Idle;
 8001602:	4b13      	ldr	r3, [pc, #76]	@ (8001650 <Modbus_Protocal_Worker+0x208>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2201      	movs	r2, #1
 8001608:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 800160a:	4b11      	ldr	r3, [pc, #68]	@ (8001650 <Modbus_Protocal_Worker+0x208>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	4618      	mov	r0, r3
 8001612:	f008 febb 	bl	800a38c <HAL_UART_AbortReceive>
		break;
 8001616:	e014      	b.n	8001642 <Modbus_Protocal_Worker+0x1fa>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001618:	4b0d      	ldr	r3, [pc, #52]	@ (8001650 <Modbus_Protocal_Worker+0x208>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001622:	2b20      	cmp	r3, #32
 8001624:	d10f      	bne.n	8001646 <Modbus_Protocal_Worker+0x1fe>
			hModbus->TxCount=0;
 8001626:	4b0a      	ldr	r3, [pc, #40]	@ (8001650 <Modbus_Protocal_Worker+0x208>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2200      	movs	r2, #0
 800162c:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 8001630:	4b07      	ldr	r3, [pc, #28]	@ (8001650 <Modbus_Protocal_Worker+0x208>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2201      	movs	r2, #1
 8001636:	761a      	strb	r2, [r3, #24]
		break;
 8001638:	e005      	b.n	8001646 <Modbus_Protocal_Worker+0x1fe>
		break;
 800163a:	bf00      	nop
 800163c:	e004      	b.n	8001648 <Modbus_Protocal_Worker+0x200>
		break;
 800163e:	bf00      	nop
 8001640:	e002      	b.n	8001648 <Modbus_Protocal_Worker+0x200>
		break;
 8001642:	bf00      	nop
 8001644:	e000      	b.n	8001648 <Modbus_Protocal_Worker+0x200>
		break;
 8001646:	bf00      	nop
}
 8001648:	bf00      	nop
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	200002b4 	.word	0x200002b4

08001654 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 800165a:	4b1d      	ldr	r3, [pc, #116]	@ (80016d0 <modbusWrite1Register+0x7c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	7e9b      	ldrb	r3, [r3, #26]
 8001660:	021b      	lsls	r3, r3, #8
 8001662:	b29b      	uxth	r3, r3
 8001664:	4a1a      	ldr	r2, [pc, #104]	@ (80016d0 <modbusWrite1Register+0x7c>)
 8001666:	6812      	ldr	r2, [r2, #0]
 8001668:	7ed2      	ldrb	r2, [r2, #27]
 800166a:	4413      	add	r3, r2
 800166c:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 800166e:	88fa      	ldrh	r2, [r7, #6]
 8001670:	4b17      	ldr	r3, [pc, #92]	@ (80016d0 <modbusWrite1Register+0x7c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	429a      	cmp	r2, r3
 8001678:	d903      	bls.n	8001682 <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800167a:	2002      	movs	r0, #2
 800167c:	f000 f8a0 	bl	80017c0 <ModbusErrorReply>
			 return;
 8001680:	e023      	b.n	80016ca <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8001682:	4b13      	ldr	r3, [pc, #76]	@ (80016d0 <modbusWrite1Register+0x7c>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	4b12      	ldr	r3, [pc, #72]	@ (80016d0 <modbusWrite1Register+0x7c>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	6859      	ldr	r1, [r3, #4]
 800168c:	88fb      	ldrh	r3, [r7, #6]
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	440b      	add	r3, r1
 8001692:	7f12      	ldrb	r2, [r2, #28]
 8001694:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8001696:	4b0e      	ldr	r3, [pc, #56]	@ (80016d0 <modbusWrite1Register+0x7c>)
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	4b0d      	ldr	r3, [pc, #52]	@ (80016d0 <modbusWrite1Register+0x7c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6859      	ldr	r1, [r3, #4]
 80016a0:	88fb      	ldrh	r3, [r7, #6]
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	440b      	add	r3, r1
 80016a6:	7f52      	ldrb	r2, [r2, #29]
 80016a8:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 80016aa:	4b09      	ldr	r3, [pc, #36]	@ (80016d0 <modbusWrite1Register+0x7c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f203 1045 	addw	r0, r3, #325	@ 0x145
			hModbus->Rxframe,
 80016b2:	4b07      	ldr	r3, [pc, #28]	@ (80016d0 <modbusWrite1Register+0x7c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 80016b8:	2208      	movs	r2, #8
 80016ba:	4619      	mov	r1, r3
 80016bc:	f00b fdfe 	bl	800d2bc <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 80016c0:	4b03      	ldr	r3, [pc, #12]	@ (80016d0 <modbusWrite1Register+0x7c>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2205      	movs	r2, #5
 80016c6:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271



}
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	200002b4 	.word	0x200002b4

080016d4 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 80016d4:	b590      	push	{r4, r7, lr}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 80016da:	4b38      	ldr	r3, [pc, #224]	@ (80017bc <modbusRead1Register+0xe8>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	7f1b      	ldrb	r3, [r3, #28]
 80016e0:	021b      	lsls	r3, r3, #8
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	4a35      	ldr	r2, [pc, #212]	@ (80017bc <modbusRead1Register+0xe8>)
 80016e6:	6812      	ldr	r2, [r2, #0]
 80016e8:	7f52      	ldrb	r2, [r2, #29]
 80016ea:	4413      	add	r3, r2
 80016ec:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 80016ee:	4b33      	ldr	r3, [pc, #204]	@ (80017bc <modbusRead1Register+0xe8>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	7e9b      	ldrb	r3, [r3, #26]
 80016f4:	021b      	lsls	r3, r3, #8
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	4a30      	ldr	r2, [pc, #192]	@ (80017bc <modbusRead1Register+0xe8>)
 80016fa:	6812      	ldr	r2, [r2, #0]
 80016fc:	7ed2      	ldrb	r2, [r2, #27]
 80016fe:	4413      	add	r3, r2
 8001700:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8001702:	88fb      	ldrh	r3, [r7, #6]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d002      	beq.n	800170e <modbusRead1Register+0x3a>
 8001708:	88fb      	ldrh	r3, [r7, #6]
 800170a:	2b7d      	cmp	r3, #125	@ 0x7d
 800170c:	d903      	bls.n	8001716 <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 800170e:	2003      	movs	r0, #3
 8001710:	f000 f856 	bl	80017c0 <ModbusErrorReply>
		 return;
 8001714:	e04e      	b.n	80017b4 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8001716:	88ba      	ldrh	r2, [r7, #4]
 8001718:	4b28      	ldr	r3, [pc, #160]	@ (80017bc <modbusRead1Register+0xe8>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	429a      	cmp	r2, r3
 8001720:	d808      	bhi.n	8001734 <modbusRead1Register+0x60>
 8001722:	88ba      	ldrh	r2, [r7, #4]
 8001724:	88fb      	ldrh	r3, [r7, #6]
 8001726:	4413      	add	r3, r2
 8001728:	461a      	mov	r2, r3
 800172a:	4b24      	ldr	r3, [pc, #144]	@ (80017bc <modbusRead1Register+0xe8>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	429a      	cmp	r2, r3
 8001732:	d903      	bls.n	800173c <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001734:	2002      	movs	r0, #2
 8001736:	f000 f843 	bl	80017c0 <ModbusErrorReply>
		 return;
 800173a:	e03b      	b.n	80017b4 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 800173c:	4b1f      	ldr	r3, [pc, #124]	@ (80017bc <modbusRead1Register+0xe8>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2203      	movs	r2, #3
 8001742:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8001746:	88fb      	ldrh	r3, [r7, #6]
 8001748:	b2da      	uxtb	r2, r3
 800174a:	4b1c      	ldr	r3, [pc, #112]	@ (80017bc <modbusRead1Register+0xe8>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	0052      	lsls	r2, r2, #1
 8001750:	b2d2      	uxtb	r2, r2
 8001752:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8001756:	2400      	movs	r4, #0
 8001758:	e020      	b.n	800179c <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 800175a:	4b18      	ldr	r3, [pc, #96]	@ (80017bc <modbusRead1Register+0xe8>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	685a      	ldr	r2, [r3, #4]
 8001760:	88bb      	ldrh	r3, [r7, #4]
 8001762:	4423      	add	r3, r4
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	18d1      	adds	r1, r2, r3
 8001768:	4b14      	ldr	r3, [pc, #80]	@ (80017bc <modbusRead1Register+0xe8>)
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	1c63      	adds	r3, r4, #1
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	7849      	ldrb	r1, [r1, #1]
 8001772:	4413      	add	r3, r2
 8001774:	460a      	mov	r2, r1
 8001776:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 800177a:	4b10      	ldr	r3, [pc, #64]	@ (80017bc <modbusRead1Register+0xe8>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	685a      	ldr	r2, [r3, #4]
 8001780:	88bb      	ldrh	r3, [r7, #4]
 8001782:	4423      	add	r3, r4
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	18d1      	adds	r1, r2, r3
 8001788:	4b0c      	ldr	r3, [pc, #48]	@ (80017bc <modbusRead1Register+0xe8>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	0063      	lsls	r3, r4, #1
 800178e:	3303      	adds	r3, #3
 8001790:	7809      	ldrb	r1, [r1, #0]
 8001792:	4413      	add	r3, r2
 8001794:	460a      	mov	r2, r1
 8001796:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	for(i=0; i<numberOfDataToRead;i++)
 800179a:	3401      	adds	r4, #1
 800179c:	88fb      	ldrh	r3, [r7, #6]
 800179e:	429c      	cmp	r4, r3
 80017a0:	dbdb      	blt.n	800175a <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 80017a2:	88fb      	ldrh	r3, [r7, #6]
 80017a4:	3301      	adds	r3, #1
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	4b04      	ldr	r3, [pc, #16]	@ (80017bc <modbusRead1Register+0xe8>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	0052      	lsls	r2, r2, #1
 80017ae:	b2d2      	uxtb	r2, r2
 80017b0:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271

}
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd90      	pop	{r4, r7, pc}
 80017ba:	bf00      	nop
 80017bc:	200002b4 	.word	0x200002b4

080017c0 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 80017ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001800 <ModbusErrorReply+0x40>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	7e5a      	ldrb	r2, [r3, #25]
 80017d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001800 <ModbusErrorReply+0x40>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80017d8:	b2d2      	uxtb	r2, r2
 80017da:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->Txframe[1] = Errorcode;
 80017de:	4b08      	ldr	r3, [pc, #32]	@ (8001800 <ModbusErrorReply+0x40>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	79fa      	ldrb	r2, [r7, #7]
 80017e4:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
	hModbus->TxCount = 2;
 80017e8:	4b05      	ldr	r3, [pc, #20]	@ (8001800 <ModbusErrorReply+0x40>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2202      	movs	r2, #2
 80017ee:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	200002b4 	.word	0x200002b4

08001804 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001808:	4b09      	ldr	r3, [pc, #36]	@ (8001830 <Modbus_frame_response+0x2c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	7e5b      	ldrb	r3, [r3, #25]
 800180e:	2b03      	cmp	r3, #3
 8001810:	d004      	beq.n	800181c <Modbus_frame_response+0x18>
 8001812:	2b06      	cmp	r3, #6
 8001814:	d105      	bne.n	8001822 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8001816:	f7ff ff1d 	bl	8001654 <modbusWrite1Register>
		break;
 800181a:	e006      	b.n	800182a <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 800181c:	f7ff ff5a 	bl	80016d4 <modbusRead1Register>
		break;
 8001820:	e003      	b.n	800182a <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8001822:	2001      	movs	r0, #1
 8001824:	f7ff ffcc 	bl	80017c0 <ModbusErrorReply>
		break;
 8001828:	bf00      	nop

	}
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	200002b4 	.word	0x200002b4

08001834 <Modbus_Emission>:

void Modbus_Emission()
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800183a:	4b3c      	ldr	r3, [pc, #240]	@ (800192c <Modbus_Emission+0xf8>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001844:	2b20      	cmp	r3, #32
 8001846:	d15d      	bne.n	8001904 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001848:	4b38      	ldr	r3, [pc, #224]	@ (800192c <Modbus_Emission+0xf8>)
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	4b37      	ldr	r3, [pc, #220]	@ (800192c <Modbus_Emission+0xf8>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	7812      	ldrb	r2, [r2, #0]
 8001852:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8001856:	4b35      	ldr	r3, [pc, #212]	@ (800192c <Modbus_Emission+0xf8>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 800185e:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8001860:	4b32      	ldr	r3, [pc, #200]	@ (800192c <Modbus_Emission+0xf8>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f203 1145 	addw	r1, r3, #325	@ 0x145
				hModbus->TxCount
 8001868:	4b30      	ldr	r3, [pc, #192]	@ (800192c <Modbus_Emission+0xf8>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
		memcpy
 8001870:	461a      	mov	r2, r3
 8001872:	f00b fd23 	bl	800d2bc <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8001876:	4b2d      	ldr	r3, [pc, #180]	@ (800192c <Modbus_Emission+0xf8>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
 800187e:	461a      	mov	r2, r3
 8001880:	4b2a      	ldr	r3, [pc, #168]	@ (800192c <Modbus_Emission+0xf8>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	3203      	adds	r2, #3
 8001886:	b292      	uxth	r2, r2
 8001888:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 800188c:	4b27      	ldr	r3, [pc, #156]	@ (800192c <Modbus_Emission+0xf8>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8001894:	4b25      	ldr	r3, [pc, #148]	@ (800192c <Modbus_Emission+0xf8>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 800189c:	3b02      	subs	r3, #2
 800189e:	4619      	mov	r1, r3
 80018a0:	4610      	mov	r0, r2
 80018a2:	f7ff fd99 	bl	80013d8 <CRC16>
 80018a6:	4603      	mov	r3, r0
 80018a8:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 80018aa:	4b20      	ldr	r3, [pc, #128]	@ (800192c <Modbus_Emission+0xf8>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	4b1f      	ldr	r3, [pc, #124]	@ (800192c <Modbus_Emission+0xf8>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80018b6:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 80018b8:	7939      	ldrb	r1, [r7, #4]
 80018ba:	4413      	add	r3, r2
 80018bc:	460a      	mov	r2, r1
 80018be:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 80018c2:	4b1a      	ldr	r3, [pc, #104]	@ (800192c <Modbus_Emission+0xf8>)
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	4b19      	ldr	r3, [pc, #100]	@ (800192c <Modbus_Emission+0xf8>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80018ce:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 80018d0:	7979      	ldrb	r1, [r7, #5]
 80018d2:	4413      	add	r3, r2
 80018d4:	460a      	mov	r2, r1
 80018d6:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80018da:	4b14      	ldr	r3, [pc, #80]	@ (800192c <Modbus_Emission+0xf8>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018e4:	2b20      	cmp	r3, #32
 80018e6:	d10d      	bne.n	8001904 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 80018e8:	4b10      	ldr	r3, [pc, #64]	@ (800192c <Modbus_Emission+0xf8>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 80018ee:	4b0f      	ldr	r3, [pc, #60]	@ (800192c <Modbus_Emission+0xf8>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 80018f6:	4b0d      	ldr	r3, [pc, #52]	@ (800192c <Modbus_Emission+0xf8>)
 80018f8:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 80018fa:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80018fe:	461a      	mov	r2, r3
 8001900:	f008 fcc4 	bl	800a28c <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001904:	4b09      	ldr	r3, [pc, #36]	@ (800192c <Modbus_Emission+0xf8>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2200      	movs	r2, #0
 800190a:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 800190c:	4b07      	ldr	r3, [pc, #28]	@ (800192c <Modbus_Emission+0xf8>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2200      	movs	r2, #0
 8001912:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 8001914:	4b05      	ldr	r3, [pc, #20]	@ (800192c <Modbus_Emission+0xf8>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2200      	movs	r2, #0
 800191a:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 800191c:	4b03      	ldr	r3, [pc, #12]	@ (800192c <Modbus_Emission+0xf8>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2202      	movs	r2, #2
 8001922:	761a      	strb	r2, [r3, #24]
}
 8001924:	bf00      	nop
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	200002b4 	.word	0x200002b4

08001930 <create_prismatic_motor>:

float v_pris_dis[2] = {0, 0};
float v_pris_ref[3] = {0, 0, 0};

PrismaticMotor create_prismatic_motor(double J, double B, double Eff, double Ke,
		double Kt, double R, double L) {
 8001930:	b4b0      	push	{r4, r5, r7}
 8001932:	b09f      	sub	sp, #124	@ 0x7c
 8001934:	af00      	add	r7, sp, #0
 8001936:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001938:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
 800193c:	ed87 1b0a 	vstr	d1, [r7, #40]	@ 0x28
 8001940:	ed87 2b08 	vstr	d2, [r7, #32]
 8001944:	ed87 3b06 	vstr	d3, [r7, #24]
 8001948:	ed87 4b04 	vstr	d4, [r7, #16]
 800194c:	ed87 5b02 	vstr	d5, [r7, #8]
 8001950:	ed87 6b00 	vstr	d6, [r7]
	PrismaticMotor motor = { J, B, Eff, Ke, Kt, R, L };
 8001954:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001958:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 800195c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001960:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 8001964:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001968:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 800196c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001970:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8001974:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001978:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 800197c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001980:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
 8001984:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001988:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
	return motor;
 800198c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800198e:	461d      	mov	r5, r3
 8001990:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8001994:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001996:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001998:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800199a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800199c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800199e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019a4:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80019a8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80019aa:	377c      	adds	r7, #124	@ 0x7c
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bcb0      	pop	{r4, r5, r7}
 80019b0:	4770      	bx	lr

080019b2 <create_motor>:
#include "revolute.h"

float v_rev_dis[2] = {0, 0};
float v_rev_ref[3] = {0, 0, 0};

RevoluteMotor create_motor(double J, double B, double Eff, double Ke, double Kt, double R, double L) {
 80019b2:	b4b0      	push	{r4, r5, r7}
 80019b4:	b09f      	sub	sp, #124	@ 0x7c
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80019ba:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
 80019be:	ed87 1b0a 	vstr	d1, [r7, #40]	@ 0x28
 80019c2:	ed87 2b08 	vstr	d2, [r7, #32]
 80019c6:	ed87 3b06 	vstr	d3, [r7, #24]
 80019ca:	ed87 4b04 	vstr	d4, [r7, #16]
 80019ce:	ed87 5b02 	vstr	d5, [r7, #8]
 80019d2:	ed87 6b00 	vstr	d6, [r7]
    RevoluteMotor motor = { J, B, Eff, Ke, Kt, R, L };
 80019d6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80019da:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 80019de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80019e2:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 80019e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80019ea:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 80019ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019f2:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 80019f6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80019fa:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 80019fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a02:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
 8001a06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a0a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
    return motor;
 8001a0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a10:	461d      	mov	r5, r3
 8001a12:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8001a16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a22:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a26:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001a2a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001a2c:	377c      	adds	r7, #124	@ 0x7c
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bcb0      	pop	{r4, r5, r7}
 8001a32:	4770      	bx	lr

08001a34 <InitTrajectorySegment>:
#include "Trajectory.h"
#include <math.h>

void InitTrajectorySegment(TrajectorySegment *seg, float start, float end, float v_max, float a_max, float t_start) {
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b08c      	sub	sp, #48	@ 0x30
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6178      	str	r0, [r7, #20]
 8001a3c:	ed87 0a04 	vstr	s0, [r7, #16]
 8001a40:	edc7 0a03 	vstr	s1, [r7, #12]
 8001a44:	ed87 1a02 	vstr	s2, [r7, #8]
 8001a48:	edc7 1a01 	vstr	s3, [r7, #4]
 8001a4c:	ed87 2a00 	vstr	s4, [r7]
    float D = end - start;
 8001a50:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a54:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a5c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float dir = (D >= 0) ? 1.0f : -1.0f;
 8001a60:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001a64:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a6c:	db02      	blt.n	8001a74 <InitTrajectorySegment+0x40>
 8001a6e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001a72:	e000      	b.n	8001a76 <InitTrajectorySegment+0x42>
 8001a74:	4b49      	ldr	r3, [pc, #292]	@ (8001b9c <InitTrajectorySegment+0x168>)
 8001a76:	627b      	str	r3, [r7, #36]	@ 0x24
    D = fabsf(D);
 8001a78:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001a7c:	eef0 7ae7 	vabs.f32	s15, s15
 8001a80:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

    float t_accel = v_max / a_max;
 8001a84:	edd7 6a02 	vldr	s13, [r7, #8]
 8001a88:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a90:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float d_accel = 0.5f * a_max * t_accel * t_accel;
 8001a94:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a98:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001a9c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001aa0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001aa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aa8:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001aac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ab0:	edc7 7a08 	vstr	s15, [r7, #32]

    if (2 * d_accel > D) {
 8001ab4:	edd7 7a08 	vldr	s15, [r7, #32]
 8001ab8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001abc:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001ac0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac8:	d524      	bpl.n	8001b14 <InitTrajectorySegment+0xe0>
        // Triangular profile
        t_accel = sqrtf(D / a_max);
 8001aca:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001ace:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ad2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001ad6:	eeb0 0a66 	vmov.f32	s0, s13
 8001ada:	f00b fbfd 	bl	800d2d8 <sqrtf>
 8001ade:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
        seg->t_const = 0;
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	f04f 0200 	mov.w	r2, #0
 8001ae8:	615a      	str	r2, [r3, #20]
        seg->t_total = 2 * t_accel;
 8001aea:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001aee:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	edc3 7a07 	vstr	s15, [r3, #28]
        seg->v_max = a_max * t_accel * dir;
 8001af8:	ed97 7a01 	vldr	s14, [r7, #4]
 8001afc:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001b00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b04:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001b08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	edc3 7a02 	vstr	s15, [r3, #8]
 8001b12:	e027      	b.n	8001b64 <InitTrajectorySegment+0x130>
    } else {
        // Trapezoidal profile
        float d_const = D - 2 * d_accel;
 8001b14:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b18:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001b1c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001b20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b24:	edc7 7a07 	vstr	s15, [r7, #28]
        seg->t_const = d_const / v_max;
 8001b28:	edd7 6a07 	vldr	s13, [r7, #28]
 8001b2c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001b30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	edc3 7a05 	vstr	s15, [r3, #20]
        seg->t_total = 2 * t_accel + seg->t_const;
 8001b3a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001b3e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	edd3 7a05 	vldr	s15, [r3, #20]
 8001b48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	edc3 7a07 	vstr	s15, [r3, #28]
        seg->v_max = v_max * dir;
 8001b52:	ed97 7a02 	vldr	s14, [r7, #8]
 8001b56:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    seg->start_pos = start;
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	601a      	str	r2, [r3, #0]
    seg->end_pos = end;
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	605a      	str	r2, [r3, #4]
//    seg->v_max = v_max * dir;
    seg->a_max = a_max * dir;
 8001b70:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b74:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001b78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	edc3 7a03 	vstr	s15, [r3, #12]
    seg->t_accel = t_accel;
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b86:	611a      	str	r2, [r3, #16]
    seg->t_decel = t_accel;
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b8c:	619a      	str	r2, [r3, #24]
    seg->t_start = t_start;
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	621a      	str	r2, [r3, #32]
}
 8001b94:	bf00      	nop
 8001b96:	3730      	adds	r7, #48	@ 0x30
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	bf800000 	.word	0xbf800000

08001ba0 <GetTrajectoryPosition>:

float GetTrajectoryPosition(const TrajectorySegment *seg, float t_global) {
 8001ba0:	b480      	push	{r7}
 8001ba2:	b08f      	sub	sp, #60	@ 0x3c
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	ed87 0a00 	vstr	s0, [r7]
    float t = t_global - seg->t_start;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	edd3 7a08 	vldr	s15, [r3, #32]
 8001bb2:	ed97 7a00 	vldr	s14, [r7]
 8001bb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bba:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    if (t < 0) return seg->start_pos;
 8001bbe:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001bc2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bca:	d503      	bpl.n	8001bd4 <GetTrajectoryPosition+0x34>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	edd3 7a00 	vldr	s15, [r3]
 8001bd2:	e0b4      	b.n	8001d3e <GetTrajectoryPosition+0x19e>
    if (t >= seg->t_total) return seg->end_pos;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	edd3 7a07 	vldr	s15, [r3, #28]
 8001bda:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001bde:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001be6:	db03      	blt.n	8001bf0 <GetTrajectoryPosition+0x50>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	edd3 7a01 	vldr	s15, [r3, #4]
 8001bee:	e0a6      	b.n	8001d3e <GetTrajectoryPosition+0x19e>

    float a = seg->a_max;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	633b      	str	r3, [r7, #48]	@ 0x30
    float v = seg->v_max;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float p0 = seg->start_pos;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (t < seg->t_accel) {
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c08:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001c0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c14:	d512      	bpl.n	8001c3c <GetTrajectoryPosition+0x9c>
        return p0 + 0.5f * a * t * t;
 8001c16:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001c1a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001c1e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c22:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001c26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c2a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001c2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c32:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001c36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c3a:	e080      	b.n	8001d3e <GetTrajectoryPosition+0x19e>
    } else if (t < seg->t_accel + seg->t_const) {
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	edd3 7a05 	vldr	s15, [r3, #20]
 8001c48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c4c:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001c50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c58:	d525      	bpl.n	8001ca6 <GetTrajectoryPosition+0x106>
        float t1 = seg->t_accel;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	613b      	str	r3, [r7, #16]
        float p1 = p0 + 0.5f * a * t1 * t1;
 8001c60:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001c64:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001c68:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c6c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c74:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c7c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001c80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c84:	edc7 7a03 	vstr	s15, [r7, #12]
        return p1 + v * (t - t1);
 8001c88:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001c8c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c90:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c94:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001c98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c9c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ca0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ca4:	e04b      	b.n	8001d3e <GetTrajectoryPosition+0x19e>
    } else {
        float t1 = seg->t_accel;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	691b      	ldr	r3, [r3, #16]
 8001caa:	627b      	str	r3, [r7, #36]	@ 0x24
        float t2 = seg->t_const;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	695b      	ldr	r3, [r3, #20]
 8001cb0:	623b      	str	r3, [r7, #32]
        float p1 = p0 + 0.5f * a * t1 * t1;
 8001cb2:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001cb6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001cba:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001cbe:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001cc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cc6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cce:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001cd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cd6:	edc7 7a07 	vstr	s15, [r7, #28]
        float p2 = p1 + v * t2;
 8001cda:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001cde:	edd7 7a08 	vldr	s15, [r7, #32]
 8001ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ce6:	ed97 7a07 	vldr	s14, [r7, #28]
 8001cea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cee:	edc7 7a06 	vstr	s15, [r7, #24]
        float td = t - t1 - t2;
 8001cf2:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001cf6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001cfa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001cfe:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d06:	edc7 7a05 	vstr	s15, [r7, #20]
        return p2 + v * td - 0.5f * a * td * td;
 8001d0a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001d0e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d16:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d1e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001d22:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8001d26:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001d2a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d2e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d32:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d3a:	ee77 7a67 	vsub.f32	s15, s14, s15
    }
}
 8001d3e:	eeb0 0a67 	vmov.f32	s0, s15
 8001d42:	373c      	adds	r7, #60	@ 0x3c
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <GetTrajectoryVelocity>:

float GetTrajectoryVelocity(const TrajectorySegment *seg, float t_global) {
 8001d4c:	b480      	push	{r7}
 8001d4e:	b087      	sub	sp, #28
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	ed87 0a00 	vstr	s0, [r7]
    float t = t_global - seg->t_start;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	edd3 7a08 	vldr	s15, [r3, #32]
 8001d5e:	ed97 7a00 	vldr	s14, [r7]
 8001d62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d66:	edc7 7a05 	vstr	s15, [r7, #20]
    if (t < 0) return 0;
 8001d6a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d6e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d76:	d502      	bpl.n	8001d7e <GetTrajectoryVelocity+0x32>
 8001d78:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 8001e28 <GetTrajectoryVelocity+0xdc>
 8001d7c:	e04d      	b.n	8001e1a <GetTrajectoryVelocity+0xce>
    if (t >= seg->t_total) return 0;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	edd3 7a07 	vldr	s15, [r3, #28]
 8001d84:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d90:	db02      	blt.n	8001d98 <GetTrajectoryVelocity+0x4c>
 8001d92:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8001e28 <GetTrajectoryVelocity+0xdc>
 8001d96:	e040      	b.n	8001e1a <GetTrajectoryVelocity+0xce>

    float a = seg->a_max;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	613b      	str	r3, [r7, #16]
    float v = seg->v_max;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	60fb      	str	r3, [r7, #12]

    if (t < seg->t_accel) {
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	edd3 7a04 	vldr	s15, [r3, #16]
 8001daa:	ed97 7a05 	vldr	s14, [r7, #20]
 8001dae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db6:	d506      	bpl.n	8001dc6 <GetTrajectoryVelocity+0x7a>
        return a * t;
 8001db8:	ed97 7a04 	vldr	s14, [r7, #16]
 8001dbc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dc4:	e029      	b.n	8001e1a <GetTrajectoryVelocity+0xce>
    } else if (t < seg->t_accel + seg->t_const) {
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	ed93 7a04 	vldr	s14, [r3, #16]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	edd3 7a05 	vldr	s15, [r3, #20]
 8001dd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dd6:	ed97 7a05 	vldr	s14, [r7, #20]
 8001dda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de2:	d502      	bpl.n	8001dea <GetTrajectoryVelocity+0x9e>
        return v;
 8001de4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001de8:	e017      	b.n	8001e1a <GetTrajectoryVelocity+0xce>
    } else {
        float td = t - seg->t_accel - seg->t_const;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	edd3 7a04 	vldr	s15, [r3, #16]
 8001df0:	ed97 7a05 	vldr	s14, [r7, #20]
 8001df4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	edd3 7a05 	vldr	s15, [r3, #20]
 8001dfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e02:	edc7 7a02 	vstr	s15, [r7, #8]
        return v - a * td;
 8001e06:	ed97 7a04 	vldr	s14, [r7, #16]
 8001e0a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e12:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e16:	ee77 7a67 	vsub.f32	s15, s14, s15
    }
}
 8001e1a:	eeb0 0a67 	vmov.f32	s0, s15
 8001e1e:	371c      	adds	r7, #28
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	00000000 	.word	0x00000000

08001e2c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b08c      	sub	sp, #48	@ 0x30
 8001e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001e32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e36:	2200      	movs	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	605a      	str	r2, [r3, #4]
 8001e3c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001e3e:	1d3b      	adds	r3, r7, #4
 8001e40:	2220      	movs	r2, #32
 8001e42:	2100      	movs	r1, #0
 8001e44:	4618      	mov	r0, r3
 8001e46:	f00b fa07 	bl	800d258 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001e4a:	4b32      	ldr	r3, [pc, #200]	@ (8001f14 <MX_ADC1_Init+0xe8>)
 8001e4c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001e50:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001e52:	4b30      	ldr	r3, [pc, #192]	@ (8001f14 <MX_ADC1_Init+0xe8>)
 8001e54:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001e58:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e5a:	4b2e      	ldr	r3, [pc, #184]	@ (8001f14 <MX_ADC1_Init+0xe8>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e60:	4b2c      	ldr	r3, [pc, #176]	@ (8001f14 <MX_ADC1_Init+0xe8>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001e66:	4b2b      	ldr	r3, [pc, #172]	@ (8001f14 <MX_ADC1_Init+0xe8>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001e6c:	4b29      	ldr	r3, [pc, #164]	@ (8001f14 <MX_ADC1_Init+0xe8>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e72:	4b28      	ldr	r3, [pc, #160]	@ (8001f14 <MX_ADC1_Init+0xe8>)
 8001e74:	2204      	movs	r2, #4
 8001e76:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001e78:	4b26      	ldr	r3, [pc, #152]	@ (8001f14 <MX_ADC1_Init+0xe8>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001e7e:	4b25      	ldr	r3, [pc, #148]	@ (8001f14 <MX_ADC1_Init+0xe8>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001e84:	4b23      	ldr	r3, [pc, #140]	@ (8001f14 <MX_ADC1_Init+0xe8>)
 8001e86:	2201      	movs	r2, #1
 8001e88:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e8a:	4b22      	ldr	r3, [pc, #136]	@ (8001f14 <MX_ADC1_Init+0xe8>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e92:	4b20      	ldr	r3, [pc, #128]	@ (8001f14 <MX_ADC1_Init+0xe8>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e98:	4b1e      	ldr	r3, [pc, #120]	@ (8001f14 <MX_ADC1_Init+0xe8>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001e9e:	4b1d      	ldr	r3, [pc, #116]	@ (8001f14 <MX_ADC1_Init+0xe8>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001ea6:	4b1b      	ldr	r3, [pc, #108]	@ (8001f14 <MX_ADC1_Init+0xe8>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001eac:	4b19      	ldr	r3, [pc, #100]	@ (8001f14 <MX_ADC1_Init+0xe8>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001eb4:	4817      	ldr	r0, [pc, #92]	@ (8001f14 <MX_ADC1_Init+0xe8>)
 8001eb6:	f002 fb99 	bl	80045ec <HAL_ADC_Init>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001ec0:	f001 f9fe 	bl	80032c0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001ec8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4811      	ldr	r0, [pc, #68]	@ (8001f14 <MX_ADC1_Init+0xe8>)
 8001ed0:	f003 fb36 	bl	8005540 <HAL_ADCEx_MultiModeConfigChannel>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001eda:	f001 f9f1 	bl	80032c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001ede:	4b0e      	ldr	r3, [pc, #56]	@ (8001f18 <MX_ADC1_Init+0xec>)
 8001ee0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ee2:	2306      	movs	r3, #6
 8001ee4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001eea:	237f      	movs	r3, #127	@ 0x7f
 8001eec:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001eee:	2304      	movs	r3, #4
 8001ef0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ef6:	1d3b      	adds	r3, r7, #4
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4806      	ldr	r0, [pc, #24]	@ (8001f14 <MX_ADC1_Init+0xe8>)
 8001efc:	f002 fe24 	bl	8004b48 <HAL_ADC_ConfigChannel>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001f06:	f001 f9db 	bl	80032c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f0a:	bf00      	nop
 8001f0c:	3730      	adds	r7, #48	@ 0x30
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	200002b8 	.word	0x200002b8
 8001f18:	04300002 	.word	0x04300002

08001f1c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b088      	sub	sp, #32
 8001f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f22:	463b      	mov	r3, r7
 8001f24:	2220      	movs	r2, #32
 8001f26:	2100      	movs	r1, #0
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f00b f995 	bl	800d258 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001f2e:	4b2b      	ldr	r3, [pc, #172]	@ (8001fdc <MX_ADC2_Init+0xc0>)
 8001f30:	4a2b      	ldr	r2, [pc, #172]	@ (8001fe0 <MX_ADC2_Init+0xc4>)
 8001f32:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001f34:	4b29      	ldr	r3, [pc, #164]	@ (8001fdc <MX_ADC2_Init+0xc0>)
 8001f36:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001f3a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001f3c:	4b27      	ldr	r3, [pc, #156]	@ (8001fdc <MX_ADC2_Init+0xc0>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f42:	4b26      	ldr	r3, [pc, #152]	@ (8001fdc <MX_ADC2_Init+0xc0>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001f48:	4b24      	ldr	r3, [pc, #144]	@ (8001fdc <MX_ADC2_Init+0xc0>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001f4e:	4b23      	ldr	r3, [pc, #140]	@ (8001fdc <MX_ADC2_Init+0xc0>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f54:	4b21      	ldr	r3, [pc, #132]	@ (8001fdc <MX_ADC2_Init+0xc0>)
 8001f56:	2204      	movs	r2, #4
 8001f58:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001f5a:	4b20      	ldr	r3, [pc, #128]	@ (8001fdc <MX_ADC2_Init+0xc0>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001f60:	4b1e      	ldr	r3, [pc, #120]	@ (8001fdc <MX_ADC2_Init+0xc0>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001f66:	4b1d      	ldr	r3, [pc, #116]	@ (8001fdc <MX_ADC2_Init+0xc0>)
 8001f68:	2201      	movs	r2, #1
 8001f6a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001f6c:	4b1b      	ldr	r3, [pc, #108]	@ (8001fdc <MX_ADC2_Init+0xc0>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f74:	4b19      	ldr	r3, [pc, #100]	@ (8001fdc <MX_ADC2_Init+0xc0>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f7a:	4b18      	ldr	r3, [pc, #96]	@ (8001fdc <MX_ADC2_Init+0xc0>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001f80:	4b16      	ldr	r3, [pc, #88]	@ (8001fdc <MX_ADC2_Init+0xc0>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001f88:	4b14      	ldr	r3, [pc, #80]	@ (8001fdc <MX_ADC2_Init+0xc0>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001f8e:	4b13      	ldr	r3, [pc, #76]	@ (8001fdc <MX_ADC2_Init+0xc0>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001f96:	4811      	ldr	r0, [pc, #68]	@ (8001fdc <MX_ADC2_Init+0xc0>)
 8001f98:	f002 fb28 	bl	80045ec <HAL_ADC_Init>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8001fa2:	f001 f98d 	bl	80032c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001fa6:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe4 <MX_ADC2_Init+0xc8>)
 8001fa8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001faa:	2306      	movs	r3, #6
 8001fac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001fb2:	237f      	movs	r3, #127	@ 0x7f
 8001fb4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001fb6:	2304      	movs	r3, #4
 8001fb8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001fbe:	463b      	mov	r3, r7
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4806      	ldr	r0, [pc, #24]	@ (8001fdc <MX_ADC2_Init+0xc0>)
 8001fc4:	f002 fdc0 	bl	8004b48 <HAL_ADC_ConfigChannel>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8001fce:	f001 f977 	bl	80032c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001fd2:	bf00      	nop
 8001fd4:	3720      	adds	r7, #32
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	20000324 	.word	0x20000324
 8001fe0:	50000100 	.word	0x50000100
 8001fe4:	08600004 	.word	0x08600004

08001fe8 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b0a0      	sub	sp, #128	@ 0x80
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	605a      	str	r2, [r3, #4]
 8001ffa:	609a      	str	r2, [r3, #8]
 8001ffc:	60da      	str	r2, [r3, #12]
 8001ffe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002000:	f107 0318 	add.w	r3, r7, #24
 8002004:	2254      	movs	r2, #84	@ 0x54
 8002006:	2100      	movs	r1, #0
 8002008:	4618      	mov	r0, r3
 800200a:	f00b f925 	bl	800d258 <memset>
  if(adcHandle->Instance==ADC1)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002016:	d13e      	bne.n	8002096 <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002018:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800201c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800201e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002022:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002024:	f107 0318 	add.w	r3, r7, #24
 8002028:	4618      	mov	r0, r3
 800202a:	f004 ff73 	bl	8006f14 <HAL_RCCEx_PeriphCLKConfig>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002034:	f001 f944 	bl	80032c0 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002038:	4b3a      	ldr	r3, [pc, #232]	@ (8002124 <HAL_ADC_MspInit+0x13c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	3301      	adds	r3, #1
 800203e:	4a39      	ldr	r2, [pc, #228]	@ (8002124 <HAL_ADC_MspInit+0x13c>)
 8002040:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002042:	4b38      	ldr	r3, [pc, #224]	@ (8002124 <HAL_ADC_MspInit+0x13c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d10b      	bne.n	8002062 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800204a:	4b37      	ldr	r3, [pc, #220]	@ (8002128 <HAL_ADC_MspInit+0x140>)
 800204c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800204e:	4a36      	ldr	r2, [pc, #216]	@ (8002128 <HAL_ADC_MspInit+0x140>)
 8002050:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002054:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002056:	4b34      	ldr	r3, [pc, #208]	@ (8002128 <HAL_ADC_MspInit+0x140>)
 8002058:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800205a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800205e:	617b      	str	r3, [r7, #20]
 8002060:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002062:	4b31      	ldr	r3, [pc, #196]	@ (8002128 <HAL_ADC_MspInit+0x140>)
 8002064:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002066:	4a30      	ldr	r2, [pc, #192]	@ (8002128 <HAL_ADC_MspInit+0x140>)
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800206e:	4b2e      	ldr	r3, [pc, #184]	@ (8002128 <HAL_ADC_MspInit+0x140>)
 8002070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	613b      	str	r3, [r7, #16]
 8002078:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = Current_Sensor_Pin|Current_SensorA1_Pin;
 800207a:	2303      	movs	r3, #3
 800207c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800207e:	2303      	movs	r3, #3
 8002080:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002082:	2300      	movs	r3, #0
 8002084:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002086:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800208a:	4619      	mov	r1, r3
 800208c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002090:	f003 ffac 	bl	8005fec <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8002094:	e042      	b.n	800211c <HAL_ADC_MspInit+0x134>
  else if(adcHandle->Instance==ADC2)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a24      	ldr	r2, [pc, #144]	@ (800212c <HAL_ADC_MspInit+0x144>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d13d      	bne.n	800211c <HAL_ADC_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80020a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80020a4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80020a6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80020aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020ac:	f107 0318 	add.w	r3, r7, #24
 80020b0:	4618      	mov	r0, r3
 80020b2:	f004 ff2f 	bl	8006f14 <HAL_RCCEx_PeriphCLKConfig>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <HAL_ADC_MspInit+0xd8>
      Error_Handler();
 80020bc:	f001 f900 	bl	80032c0 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80020c0:	4b18      	ldr	r3, [pc, #96]	@ (8002124 <HAL_ADC_MspInit+0x13c>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	3301      	adds	r3, #1
 80020c6:	4a17      	ldr	r2, [pc, #92]	@ (8002124 <HAL_ADC_MspInit+0x13c>)
 80020c8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80020ca:	4b16      	ldr	r3, [pc, #88]	@ (8002124 <HAL_ADC_MspInit+0x13c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d10b      	bne.n	80020ea <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80020d2:	4b15      	ldr	r3, [pc, #84]	@ (8002128 <HAL_ADC_MspInit+0x140>)
 80020d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020d6:	4a14      	ldr	r2, [pc, #80]	@ (8002128 <HAL_ADC_MspInit+0x140>)
 80020d8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80020dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020de:	4b12      	ldr	r3, [pc, #72]	@ (8002128 <HAL_ADC_MspInit+0x140>)
 80020e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ea:	4b0f      	ldr	r3, [pc, #60]	@ (8002128 <HAL_ADC_MspInit+0x140>)
 80020ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ee:	4a0e      	ldr	r2, [pc, #56]	@ (8002128 <HAL_ADC_MspInit+0x140>)
 80020f0:	f043 0301 	orr.w	r3, r3, #1
 80020f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020f6:	4b0c      	ldr	r3, [pc, #48]	@ (8002128 <HAL_ADC_MspInit+0x140>)
 80020f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	60bb      	str	r3, [r7, #8]
 8002100:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Current_SensorA1_Pin;
 8002102:	2302      	movs	r3, #2
 8002104:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002106:	2303      	movs	r3, #3
 8002108:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	2300      	movs	r3, #0
 800210c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(Current_SensorA1_GPIO_Port, &GPIO_InitStruct);
 800210e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002112:	4619      	mov	r1, r3
 8002114:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002118:	f003 ff68 	bl	8005fec <HAL_GPIO_Init>
}
 800211c:	bf00      	nop
 800211e:	3780      	adds	r7, #128	@ 0x80
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	20000390 	.word	0x20000390
 8002128:	40021000 	.word	0x40021000
 800212c:	50000100 	.word	0x50000100

08002130 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002136:	4b12      	ldr	r3, [pc, #72]	@ (8002180 <MX_DMA_Init+0x50>)
 8002138:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800213a:	4a11      	ldr	r2, [pc, #68]	@ (8002180 <MX_DMA_Init+0x50>)
 800213c:	f043 0304 	orr.w	r3, r3, #4
 8002140:	6493      	str	r3, [r2, #72]	@ 0x48
 8002142:	4b0f      	ldr	r3, [pc, #60]	@ (8002180 <MX_DMA_Init+0x50>)
 8002144:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002146:	f003 0304 	and.w	r3, r3, #4
 800214a:	607b      	str	r3, [r7, #4]
 800214c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800214e:	4b0c      	ldr	r3, [pc, #48]	@ (8002180 <MX_DMA_Init+0x50>)
 8002150:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002152:	4a0b      	ldr	r2, [pc, #44]	@ (8002180 <MX_DMA_Init+0x50>)
 8002154:	f043 0301 	orr.w	r3, r3, #1
 8002158:	6493      	str	r3, [r2, #72]	@ 0x48
 800215a:	4b09      	ldr	r3, [pc, #36]	@ (8002180 <MX_DMA_Init+0x50>)
 800215c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	603b      	str	r3, [r7, #0]
 8002164:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002166:	2200      	movs	r2, #0
 8002168:	2100      	movs	r1, #0
 800216a:	200b      	movs	r0, #11
 800216c:	f003 fbcb 	bl	8005906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002170:	200b      	movs	r0, #11
 8002172:	f003 fbe2 	bl	800593a <HAL_NVIC_EnableIRQ>

}
 8002176:	bf00      	nop
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	40021000 	.word	0x40021000

08002184 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b08a      	sub	sp, #40	@ 0x28
 8002188:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800218a:	f107 0314 	add.w	r3, r7, #20
 800218e:	2200      	movs	r2, #0
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	605a      	str	r2, [r3, #4]
 8002194:	609a      	str	r2, [r3, #8]
 8002196:	60da      	str	r2, [r3, #12]
 8002198:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800219a:	4b4d      	ldr	r3, [pc, #308]	@ (80022d0 <MX_GPIO_Init+0x14c>)
 800219c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800219e:	4a4c      	ldr	r2, [pc, #304]	@ (80022d0 <MX_GPIO_Init+0x14c>)
 80021a0:	f043 0304 	orr.w	r3, r3, #4
 80021a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021a6:	4b4a      	ldr	r3, [pc, #296]	@ (80022d0 <MX_GPIO_Init+0x14c>)
 80021a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021aa:	f003 0304 	and.w	r3, r3, #4
 80021ae:	613b      	str	r3, [r7, #16]
 80021b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80021b2:	4b47      	ldr	r3, [pc, #284]	@ (80022d0 <MX_GPIO_Init+0x14c>)
 80021b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021b6:	4a46      	ldr	r2, [pc, #280]	@ (80022d0 <MX_GPIO_Init+0x14c>)
 80021b8:	f043 0320 	orr.w	r3, r3, #32
 80021bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021be:	4b44      	ldr	r3, [pc, #272]	@ (80022d0 <MX_GPIO_Init+0x14c>)
 80021c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021c2:	f003 0320 	and.w	r3, r3, #32
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ca:	4b41      	ldr	r3, [pc, #260]	@ (80022d0 <MX_GPIO_Init+0x14c>)
 80021cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ce:	4a40      	ldr	r2, [pc, #256]	@ (80022d0 <MX_GPIO_Init+0x14c>)
 80021d0:	f043 0301 	orr.w	r3, r3, #1
 80021d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021d6:	4b3e      	ldr	r3, [pc, #248]	@ (80022d0 <MX_GPIO_Init+0x14c>)
 80021d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	60bb      	str	r3, [r7, #8]
 80021e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021e2:	4b3b      	ldr	r3, [pc, #236]	@ (80022d0 <MX_GPIO_Init+0x14c>)
 80021e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021e6:	4a3a      	ldr	r2, [pc, #232]	@ (80022d0 <MX_GPIO_Init+0x14c>)
 80021e8:	f043 0302 	orr.w	r3, r3, #2
 80021ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021ee:	4b38      	ldr	r3, [pc, #224]	@ (80022d0 <MX_GPIO_Init+0x14c>)
 80021f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	607b      	str	r3, [r7, #4]
 80021f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_MD20A_24V_GPIO_Port, DIR_MD20A_24V_Pin, GPIO_PIN_RESET);
 80021fa:	2200      	movs	r2, #0
 80021fc:	2102      	movs	r1, #2
 80021fe:	4835      	ldr	r0, [pc, #212]	@ (80022d4 <MX_GPIO_Init+0x150>)
 8002200:	f004 f876 	bl	80062f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_MD20A_18V_GPIO_Port, DIR_MD20A_18V_Pin, GPIO_PIN_RESET);
 8002204:	2200      	movs	r2, #0
 8002206:	2140      	movs	r1, #64	@ 0x40
 8002208:	4833      	ldr	r0, [pc, #204]	@ (80022d8 <MX_GPIO_Init+0x154>)
 800220a:	f004 f871 	bl	80062f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PS2_Attention_GPIO_Port, PS2_Attention_Pin, GPIO_PIN_SET);
 800220e:	2201      	movs	r2, #1
 8002210:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002214:	4830      	ldr	r0, [pc, #192]	@ (80022d8 <MX_GPIO_Init+0x154>)
 8002216:	f004 f86b 	bl	80062f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DIR_MD20A_24V_Pin */
  GPIO_InitStruct.Pin = DIR_MD20A_24V_Pin;
 800221a:	2302      	movs	r3, #2
 800221c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800221e:	2301      	movs	r3, #1
 8002220:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002222:	2300      	movs	r3, #0
 8002224:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002226:	2300      	movs	r3, #0
 8002228:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_MD20A_24V_GPIO_Port, &GPIO_InitStruct);
 800222a:	f107 0314 	add.w	r3, r7, #20
 800222e:	4619      	mov	r1, r3
 8002230:	4828      	ldr	r0, [pc, #160]	@ (80022d4 <MX_GPIO_Init+0x150>)
 8002232:	f003 fedb 	bl	8005fec <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit_Switch_pen_2_Pin Limit_Switch_Prismatic1_Pin Limit_Switch_Prismatic2_Pin Limit_Switch_pen_1_Pin */
  GPIO_InitStruct.Pin = Limit_Switch_pen_2_Pin|Limit_Switch_Prismatic1_Pin|Limit_Switch_Prismatic2_Pin|Limit_Switch_pen_1_Pin;
 8002236:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 800223a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800223c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002240:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002242:	2300      	movs	r3, #0
 8002244:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002246:	f107 0314 	add.w	r3, r7, #20
 800224a:	4619      	mov	r1, r3
 800224c:	4821      	ldr	r0, [pc, #132]	@ (80022d4 <MX_GPIO_Init+0x150>)
 800224e:	f003 fecd 	bl	8005fec <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_MD20A_18V_Pin PS2_Attention_Pin */
  GPIO_InitStruct.Pin = DIR_MD20A_18V_Pin|PS2_Attention_Pin;
 8002252:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 8002256:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002258:	2301      	movs	r3, #1
 800225a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002260:	2300      	movs	r3, #0
 8002262:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002264:	f107 0314 	add.w	r3, r7, #20
 8002268:	4619      	mov	r1, r3
 800226a:	481b      	ldr	r0, [pc, #108]	@ (80022d8 <MX_GPIO_Init+0x154>)
 800226c:	f003 febe 	bl	8005fec <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_Pin */
  GPIO_InitStruct.Pin = Emergency_Pin;
 8002270:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002274:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002276:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800227a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227c:	2300      	movs	r3, #0
 800227e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_GPIO_Port, &GPIO_InitStruct);
 8002280:	f107 0314 	add.w	r3, r7, #20
 8002284:	4619      	mov	r1, r3
 8002286:	4814      	ldr	r0, [pc, #80]	@ (80022d8 <MX_GPIO_Init+0x154>)
 8002288:	f003 feb0 	bl	8005fec <HAL_GPIO_Init>

  /*Configure GPIO pin : Proximity_sensor_Pin */
  GPIO_InitStruct.Pin = Proximity_sensor_Pin;
 800228c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002290:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002292:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002296:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002298:	2300      	movs	r3, #0
 800229a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Proximity_sensor_GPIO_Port, &GPIO_InitStruct);
 800229c:	f107 0314 	add.w	r3, r7, #20
 80022a0:	4619      	mov	r1, r3
 80022a2:	480d      	ldr	r0, [pc, #52]	@ (80022d8 <MX_GPIO_Init+0x154>)
 80022a4:	f003 fea2 	bl	8005fec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80022a8:	2200      	movs	r2, #0
 80022aa:	2100      	movs	r1, #0
 80022ac:	2017      	movs	r0, #23
 80022ae:	f003 fb2a 	bl	8005906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80022b2:	2017      	movs	r0, #23
 80022b4:	f003 fb41 	bl	800593a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80022b8:	2200      	movs	r2, #0
 80022ba:	2100      	movs	r1, #0
 80022bc:	2028      	movs	r0, #40	@ 0x28
 80022be:	f003 fb22 	bl	8005906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80022c2:	2028      	movs	r0, #40	@ 0x28
 80022c4:	f003 fb39 	bl	800593a <HAL_NVIC_EnableIRQ>

}
 80022c8:	bf00      	nop
 80022ca:	3728      	adds	r7, #40	@ 0x28
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	40021000 	.word	0x40021000
 80022d4:	48000400 	.word	0x48000400
 80022d8:	48000800 	.word	0x48000800
 80022dc:	00000000 	.word	0x00000000

080022e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022e0:	b5b0      	push	{r4, r5, r7, lr}
 80022e2:	b09a      	sub	sp, #104	@ 0x68
 80022e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022e6:	f001 ff04 	bl	80040f2 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022ea:	f000 fe05 	bl	8002ef8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022ee:	f7ff ff49 	bl	8002184 <MX_GPIO_Init>
  MX_DMA_Init();
 80022f2:	f7ff ff1d 	bl	8002130 <MX_DMA_Init>
  MX_TIM3_Init();
 80022f6:	f001 f9e5 	bl	80036c4 <MX_TIM3_Init>
  MX_ADC1_Init();
 80022fa:	f7ff fd97 	bl	8001e2c <MX_ADC1_Init>
  MX_TIM1_Init();
 80022fe:	f001 f93f 	bl	8003580 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002302:	f001 f991 	bl	8003628 <MX_TIM2_Init>
  MX_TIM4_Init();
 8002306:	f001 fa33 	bl	8003770 <MX_TIM4_Init>
  MX_TIM20_Init();
 800230a:	f001 fbb7 	bl	8003a7c <MX_TIM20_Init>
  MX_TIM8_Init();
 800230e:	f001 fa85 	bl	800381c <MX_TIM8_Init>
  MX_TIM16_Init();
 8002312:	f001 fb33 	bl	800397c <MX_TIM16_Init>
  MX_USART2_UART_Init();
 8002316:	f001 fde9 	bl	8003eec <MX_USART2_UART_Init>
  MX_ADC2_Init();
 800231a:	f7ff fdff 	bl	8001f1c <MX_ADC2_Init>
  MX_SPI1_Init();
 800231e:	f000 ffd5 	bl	80032cc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim20);
 8002322:	48a0      	ldr	r0, [pc, #640]	@ (80025a4 <main+0x2c4>)
 8002324:	f005 fcd6 	bl	8007cd4 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim8);
 8002328:	489f      	ldr	r0, [pc, #636]	@ (80025a8 <main+0x2c8>)
 800232a:	f005 fcd3 	bl	8007cd4 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 800232e:	210c      	movs	r1, #12
 8002330:	489d      	ldr	r0, [pc, #628]	@ (80025a8 <main+0x2c8>)
 8002332:	f005 fe93 	bl	800805c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim20, TIM_CHANNEL_1);
 8002336:	2100      	movs	r1, #0
 8002338:	489a      	ldr	r0, [pc, #616]	@ (80025a4 <main+0x2c4>)
 800233a:	f005 fe8f 	bl	800805c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim20, TIM_CHANNEL_3);
 800233e:	2108      	movs	r1, #8
 8002340:	4898      	ldr	r0, [pc, #608]	@ (80025a4 <main+0x2c4>)
 8002342:	f005 fe8b 	bl	800805c <HAL_TIM_PWM_Start>
	Encoder_Init(&encoder1, &htim4);
 8002346:	4999      	ldr	r1, [pc, #612]	@ (80025ac <main+0x2cc>)
 8002348:	4899      	ldr	r0, [pc, #612]	@ (80025b0 <main+0x2d0>)
 800234a:	f7fe fb3f 	bl	80009cc <Encoder_Init>
	Encoder_Init(&encoder2, &htim3);
 800234e:	4999      	ldr	r1, [pc, #612]	@ (80025b4 <main+0x2d4>)
 8002350:	4899      	ldr	r0, [pc, #612]	@ (80025b8 <main+0x2d8>)
 8002352:	f7fe fb3b 	bl	80009cc <Encoder_Init>
	HAL_ADC_Start(&hadc1);
 8002356:	4899      	ldr	r0, [pc, #612]	@ (80025bc <main+0x2dc>)
 8002358:	f002 fb04 	bl	8004964 <HAL_ADC_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 800235c:	4898      	ldr	r0, [pc, #608]	@ (80025c0 <main+0x2e0>)
 800235e:	f005 fd29 	bl	8007db4 <HAL_TIM_Base_Start_IT>

	int lastTick = 0;
 8002362:	2300      	movs	r3, #0
 8002364:	667b      	str	r3, [r7, #100]	@ 0x64

	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8002366:	213c      	movs	r1, #60	@ 0x3c
 8002368:	4892      	ldr	r0, [pc, #584]	@ (80025b4 <main+0x2d4>)
 800236a:	f006 f933 	bl	80085d4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800236e:	213c      	movs	r1, #60	@ 0x3c
 8002370:	488e      	ldr	r0, [pc, #568]	@ (80025ac <main+0x2cc>)
 8002372:	f006 f92f 	bl	80085d4 <HAL_TIM_Encoder_Start>

	hmodbus.huart = &huart2;
 8002376:	4b93      	ldr	r3, [pc, #588]	@ (80025c4 <main+0x2e4>)
 8002378:	4a93      	ldr	r2, [pc, #588]	@ (80025c8 <main+0x2e8>)
 800237a:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim16;
 800237c:	4b91      	ldr	r3, [pc, #580]	@ (80025c4 <main+0x2e4>)
 800237e:	4a93      	ldr	r2, [pc, #588]	@ (80025cc <main+0x2ec>)
 8002380:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x15;
 8002382:	4b90      	ldr	r3, [pc, #576]	@ (80025c4 <main+0x2e4>)
 8002384:	2215      	movs	r2, #21
 8002386:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize = 200;
 8002388:	4b8e      	ldr	r3, [pc, #568]	@ (80025c4 <main+0x2e4>)
 800238a:	22c8      	movs	r2, #200	@ 0xc8
 800238c:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, registerFrame);
 800238e:	4990      	ldr	r1, [pc, #576]	@ (80025d0 <main+0x2f0>)
 8002390:	488c      	ldr	r0, [pc, #560]	@ (80025c4 <main+0x2e4>)
 8002392:	f7fe ffcb 	bl	800132c <Modbus_init>

	Kalman_Init(&kf_pris);
 8002396:	488f      	ldr	r0, [pc, #572]	@ (80025d4 <main+0x2f4>)
 8002398:	f7fe fd16 	bl	8000dc8 <Kalman_Init>

	kf_pris.A_data[0] = 1;
 800239c:	4b8d      	ldr	r3, [pc, #564]	@ (80025d4 <main+0x2f4>)
 800239e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80023a2:	671a      	str	r2, [r3, #112]	@ 0x70
	kf_pris.A_data[1] = 0.0008395;
 80023a4:	4b8b      	ldr	r3, [pc, #556]	@ (80025d4 <main+0x2f4>)
 80023a6:	4a8c      	ldr	r2, [pc, #560]	@ (80025d8 <main+0x2f8>)
 80023a8:	675a      	str	r2, [r3, #116]	@ 0x74
	kf_pris.A_data[2] = -4.198e-07;
 80023aa:	4b8a      	ldr	r3, [pc, #552]	@ (80025d4 <main+0x2f4>)
 80023ac:	4a8b      	ldr	r2, [pc, #556]	@ (80025dc <main+0x2fc>)
 80023ae:	679a      	str	r2, [r3, #120]	@ 0x78
	kf_pris.A_data[3] = 1.282e-05;
 80023b0:	4b88      	ldr	r3, [pc, #544]	@ (80025d4 <main+0x2f4>)
 80023b2:	4a8b      	ldr	r2, [pc, #556]	@ (80025e0 <main+0x300>)
 80023b4:	67da      	str	r2, [r3, #124]	@ 0x7c
	kf_pris.A_data[4] = 0;
 80023b6:	4b87      	ldr	r3, [pc, #540]	@ (80025d4 <main+0x2f4>)
 80023b8:	f04f 0200 	mov.w	r2, #0
 80023bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	kf_pris.A_data[5] = 0.6791;
 80023c0:	4b84      	ldr	r3, [pc, #528]	@ (80025d4 <main+0x2f4>)
 80023c2:	4a88      	ldr	r2, [pc, #544]	@ (80025e4 <main+0x304>)
 80023c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	kf_pris.A_data[6] = -0.0008395;
 80023c8:	4b82      	ldr	r3, [pc, #520]	@ (80025d4 <main+0x2f4>)
 80023ca:	4a87      	ldr	r2, [pc, #540]	@ (80025e8 <main+0x308>)
 80023cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	kf_pris.A_data[7] = 0.02564;
 80023d0:	4b80      	ldr	r3, [pc, #512]	@ (80025d4 <main+0x2f4>)
 80023d2:	4a86      	ldr	r2, [pc, #536]	@ (80025ec <main+0x30c>)
 80023d4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	kf_pris.A_data[8] = 0;
 80023d8:	4b7e      	ldr	r3, [pc, #504]	@ (80025d4 <main+0x2f4>)
 80023da:	f04f 0200 	mov.w	r2, #0
 80023de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	kf_pris.A_data[9] = 0;
 80023e2:	4b7c      	ldr	r3, [pc, #496]	@ (80025d4 <main+0x2f4>)
 80023e4:	f04f 0200 	mov.w	r2, #0
 80023e8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	kf_pris.A_data[10] = 1;
 80023ec:	4b79      	ldr	r3, [pc, #484]	@ (80025d4 <main+0x2f4>)
 80023ee:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80023f2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	kf_pris.A_data[11] = 0;
 80023f6:	4b77      	ldr	r3, [pc, #476]	@ (80025d4 <main+0x2f4>)
 80023f8:	f04f 0200 	mov.w	r2, #0
 80023fc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	kf_pris.A_data[12] = 0;
 8002400:	4b74      	ldr	r3, [pc, #464]	@ (80025d4 <main+0x2f4>)
 8002402:	f04f 0200 	mov.w	r2, #0
 8002406:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	kf_pris.A_data[13] = -0.04203;
 800240a:	4b72      	ldr	r3, [pc, #456]	@ (80025d4 <main+0x2f4>)
 800240c:	4a78      	ldr	r2, [pc, #480]	@ (80025f0 <main+0x310>)
 800240e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	kf_pris.A_data[14] = 2.101e-05;
 8002412:	4b70      	ldr	r3, [pc, #448]	@ (80025d4 <main+0x2f4>)
 8002414:	4a77      	ldr	r2, [pc, #476]	@ (80025f4 <main+0x314>)
 8002416:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	kf_pris.A_data[15] = -0.09565;
 800241a:	4b6e      	ldr	r3, [pc, #440]	@ (80025d4 <main+0x2f4>)
 800241c:	4a76      	ldr	r2, [pc, #472]	@ (80025f8 <main+0x318>)
 800241e:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

	kf_pris.B_data[0] = 4.006e-06;
 8002422:	4b6c      	ldr	r3, [pc, #432]	@ (80025d4 <main+0x2f4>)
 8002424:	4a75      	ldr	r2, [pc, #468]	@ (80025fc <main+0x31c>)
 8002426:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	kf_pris.B_data[1] = 0.008011;
 800242a:	4b6a      	ldr	r3, [pc, #424]	@ (80025d4 <main+0x2f4>)
 800242c:	4a74      	ldr	r2, [pc, #464]	@ (8002600 <main+0x320>)
 800242e:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	kf_pris.B_data[2] = 0;
 8002432:	4b68      	ldr	r3, [pc, #416]	@ (80025d4 <main+0x2f4>)
 8002434:	f04f 0200 	mov.w	r2, #0
 8002438:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	kf_pris.B_data[3] = 0.2826;
 800243c:	4b65      	ldr	r3, [pc, #404]	@ (80025d4 <main+0x2f4>)
 800243e:	4a71      	ldr	r2, [pc, #452]	@ (8002604 <main+0x324>)
 8002440:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc

	// Identity H
	for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 8002444:	2300      	movs	r3, #0
 8002446:	663b      	str	r3, [r7, #96]	@ 0x60
 8002448:	e01d      	b.n	8002486 <main+0x1a6>
	    for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 800244a:	2300      	movs	r3, #0
 800244c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800244e:	e014      	b.n	800247a <main+0x19a>
	        kf_pris.H_data[i * KALMAN_STATE_DIM + j] = (i == j) ? 1.0f : 0.0f;
 8002450:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002452:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002454:	429a      	cmp	r2, r3
 8002456:	d102      	bne.n	800245e <main+0x17e>
 8002458:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800245c:	e001      	b.n	8002462 <main+0x182>
 800245e:	f04f 0200 	mov.w	r2, #0
 8002462:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002464:	0099      	lsls	r1, r3, #2
 8002466:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002468:	440b      	add	r3, r1
 800246a:	495a      	ldr	r1, [pc, #360]	@ (80025d4 <main+0x2f4>)
 800246c:	333c      	adds	r3, #60	@ 0x3c
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	440b      	add	r3, r1
 8002472:	601a      	str	r2, [r3, #0]
	    for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 8002474:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002476:	3301      	adds	r3, #1
 8002478:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800247a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800247c:	2b03      	cmp	r3, #3
 800247e:	dde7      	ble.n	8002450 <main+0x170>
	for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 8002480:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002482:	3301      	adds	r3, #1
 8002484:	663b      	str	r3, [r7, #96]	@ 0x60
 8002486:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002488:	2b03      	cmp	r3, #3
 800248a:	ddde      	ble.n	800244a <main+0x16a>
	    }
	}

	// Prismatic
	kf_pris.x_data[0] = 0;
 800248c:	4b51      	ldr	r3, [pc, #324]	@ (80025d4 <main+0x2f4>)
 800248e:	f04f 0200 	mov.w	r2, #0
 8002492:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
	kf_pris.x_data[1] = 0;
 8002496:	4b4f      	ldr	r3, [pc, #316]	@ (80025d4 <main+0x2f4>)
 8002498:	f04f 0200 	mov.w	r2, #0
 800249c:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
	kf_pris.x_data[2] = 0;
 80024a0:	4b4c      	ldr	r3, [pc, #304]	@ (80025d4 <main+0x2f4>)
 80024a2:	f04f 0200 	mov.w	r2, #0
 80024a6:	f8c3 223c 	str.w	r2, [r3, #572]	@ 0x23c
	kf_pris.x_data[3] = 0;
 80024aa:	4b4a      	ldr	r3, [pc, #296]	@ (80025d4 <main+0x2f4>)
 80024ac:	f04f 0200 	mov.w	r2, #0
 80024b0:	f8c3 2240 	str.w	r2, [r3, #576]	@ 0x240

	Kalman_SetMeasurementNoise(&kf_pris, 0.01f);
 80024b4:	ed9f 0a54 	vldr	s0, [pc, #336]	@ 8002608 <main+0x328>
 80024b8:	4846      	ldr	r0, [pc, #280]	@ (80025d4 <main+0x2f4>)
 80024ba:	f7fe fd57 	bl	8000f6c <Kalman_SetMeasurementNoise>
	Kalman_SetProcessNoise(&kf_pris, 0.9f);
 80024be:	ed9f 0a53 	vldr	s0, [pc, #332]	@ 800260c <main+0x32c>
 80024c2:	4844      	ldr	r0, [pc, #272]	@ (80025d4 <main+0x2f4>)
 80024c4:	f7fe fd22 	bl	8000f0c <Kalman_SetProcessNoise>

	Kalman_Init(&kf_rev);
 80024c8:	4851      	ldr	r0, [pc, #324]	@ (8002610 <main+0x330>)
 80024ca:	f7fe fc7d 	bl	8000dc8 <Kalman_Init>

	kf_rev.A_data[0] = 1;
 80024ce:	4b50      	ldr	r3, [pc, #320]	@ (8002610 <main+0x330>)
 80024d0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80024d4:	671a      	str	r2, [r3, #112]	@ 0x70
	kf_rev.A_data[1] = 0.0009998;
 80024d6:	4b4e      	ldr	r3, [pc, #312]	@ (8002610 <main+0x330>)
 80024d8:	4a4e      	ldr	r2, [pc, #312]	@ (8002614 <main+0x334>)
 80024da:	675a      	str	r2, [r3, #116]	@ 0x74
	kf_rev.A_data[2] = -2.659e-06;
 80024dc:	4b4c      	ldr	r3, [pc, #304]	@ (8002610 <main+0x330>)
 80024de:	4a4e      	ldr	r2, [pc, #312]	@ (8002618 <main+0x338>)
 80024e0:	679a      	str	r2, [r3, #120]	@ 0x78
	kf_rev.A_data[3] = 8.108e-08;
 80024e2:	4b4b      	ldr	r3, [pc, #300]	@ (8002610 <main+0x330>)
 80024e4:	4a4d      	ldr	r2, [pc, #308]	@ (800261c <main+0x33c>)
 80024e6:	67da      	str	r2, [r3, #124]	@ 0x7c
	kf_rev.A_data[4] = 0;
 80024e8:	4b49      	ldr	r3, [pc, #292]	@ (8002610 <main+0x330>)
 80024ea:	f04f 0200 	mov.w	r2, #0
 80024ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	kf_rev.A_data[5] = 0.9996;
 80024f2:	4b47      	ldr	r3, [pc, #284]	@ (8002610 <main+0x330>)
 80024f4:	4a4a      	ldr	r2, [pc, #296]	@ (8002620 <main+0x340>)
 80024f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	kf_rev.A_data[6] = -0.005318;
 80024fa:	4b45      	ldr	r3, [pc, #276]	@ (8002610 <main+0x330>)
 80024fc:	4a49      	ldr	r2, [pc, #292]	@ (8002624 <main+0x344>)
 80024fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	kf_rev.A_data[7] = 0.0001622;
 8002502:	4b43      	ldr	r3, [pc, #268]	@ (8002610 <main+0x330>)
 8002504:	4a48      	ldr	r2, [pc, #288]	@ (8002628 <main+0x348>)
 8002506:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	kf_rev.A_data[8] = 0;
 800250a:	4b41      	ldr	r3, [pc, #260]	@ (8002610 <main+0x330>)
 800250c:	f04f 0200 	mov.w	r2, #0
 8002510:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	kf_rev.A_data[9] = 0;
 8002514:	4b3e      	ldr	r3, [pc, #248]	@ (8002610 <main+0x330>)
 8002516:	f04f 0200 	mov.w	r2, #0
 800251a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	kf_rev.A_data[10] = 1;
 800251e:	4b3c      	ldr	r3, [pc, #240]	@ (8002610 <main+0x330>)
 8002520:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002524:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	kf_rev.A_data[11] = 0;
 8002528:	4b39      	ldr	r3, [pc, #228]	@ (8002610 <main+0x330>)
 800252a:	f04f 0200 	mov.w	r2, #0
 800252e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	kf_rev.A_data[12] = 0;
 8002532:	4b37      	ldr	r3, [pc, #220]	@ (8002610 <main+0x330>)
 8002534:	f04f 0200 	mov.w	r2, #0
 8002538:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	kf_rev.A_data[13] = -2.746;
 800253c:	4b34      	ldr	r3, [pc, #208]	@ (8002610 <main+0x330>)
 800253e:	4a3b      	ldr	r2, [pc, #236]	@ (800262c <main+0x34c>)
 8002540:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	kf_rev.A_data[14] = 0.007303;
 8002544:	4b32      	ldr	r3, [pc, #200]	@ (8002610 <main+0x330>)
 8002546:	4a3a      	ldr	r2, [pc, #232]	@ (8002630 <main+0x350>)
 8002548:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	kf_rev.A_data[15] = 0.1354;
 800254c:	4b30      	ldr	r3, [pc, #192]	@ (8002610 <main+0x330>)
 800254e:	4a39      	ldr	r2, [pc, #228]	@ (8002634 <main+0x354>)
 8002550:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

	kf_rev.B_data[0] = 1.203e-07;
 8002554:	4b2e      	ldr	r3, [pc, #184]	@ (8002610 <main+0x330>)
 8002556:	4a38      	ldr	r2, [pc, #224]	@ (8002638 <main+0x358>)
 8002558:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	kf_rev.B_data[1] = 0.0002406;
 800255c:	4b2c      	ldr	r3, [pc, #176]	@ (8002610 <main+0x330>)
 800255e:	4a37      	ldr	r2, [pc, #220]	@ (800263c <main+0x35c>)
 8002560:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	kf_rev.B_data[2] = 0;
 8002564:	4b2a      	ldr	r3, [pc, #168]	@ (8002610 <main+0x330>)
 8002566:	f04f 0200 	mov.w	r2, #0
 800256a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	kf_rev.B_data[3] = 1.685;
 800256e:	4b28      	ldr	r3, [pc, #160]	@ (8002610 <main+0x330>)
 8002570:	4a33      	ldr	r2, [pc, #204]	@ (8002640 <main+0x360>)
 8002572:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc

	// Identity H
	for (int i = 0; i < 2; i++) {
 8002576:	2300      	movs	r3, #0
 8002578:	65bb      	str	r3, [r7, #88]	@ 0x58
 800257a:	e077      	b.n	800266c <main+0x38c>
	    for (int j = 0; j < 4; j++) {
 800257c:	2300      	movs	r3, #0
 800257e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002580:	e06e      	b.n	8002660 <main+0x380>
	        if (i == j) {
 8002582:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002584:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002586:	429a      	cmp	r2, r3
 8002588:	d15c      	bne.n	8002644 <main+0x364>
	            kf_rev.H_data[i * 4 + j] = 1.0f;
 800258a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800258c:	009a      	lsls	r2, r3, #2
 800258e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002590:	4413      	add	r3, r2
 8002592:	4a1f      	ldr	r2, [pc, #124]	@ (8002610 <main+0x330>)
 8002594:	333c      	adds	r3, #60	@ 0x3c
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4413      	add	r3, r2
 800259a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800259e:	601a      	str	r2, [r3, #0]
 80025a0:	e05b      	b.n	800265a <main+0x37a>
 80025a2:	bf00      	nop
 80025a4:	20001928 	.word	0x20001928
 80025a8:	20001790 	.word	0x20001790
 80025ac:	200016c4 	.word	0x200016c4
 80025b0:	20000394 	.word	0x20000394
 80025b4:	200015f8 	.word	0x200015f8
 80025b8:	200003c8 	.word	0x200003c8
 80025bc:	200002b8 	.word	0x200002b8
 80025c0:	2000152c 	.word	0x2000152c
 80025c4:	2000059c 	.word	0x2000059c
 80025c8:	200019f4 	.word	0x200019f4
 80025cc:	2000185c 	.word	0x2000185c
 80025d0:	20000a74 	.word	0x20000a74
 80025d4:	20000cd8 	.word	0x20000cd8
 80025d8:	3a5c11e4 	.word	0x3a5c11e4
 80025dc:	b4e160df 	.word	0xb4e160df
 80025e0:	3757157b 	.word	0x3757157b
 80025e4:	3f2dd97f 	.word	0x3f2dd97f
 80025e8:	ba5c11e4 	.word	0xba5c11e4
 80025ec:	3cd20afa 	.word	0x3cd20afa
 80025f0:	bd2c27a6 	.word	0xbd2c27a6
 80025f4:	37b03ea2 	.word	0x37b03ea2
 80025f8:	bdc3e426 	.word	0xbdc3e426
 80025fc:	36866b47 	.word	0x36866b47
 8002600:	3c034092 	.word	0x3c034092
 8002604:	3e90b0f2 	.word	0x3e90b0f2
 8002608:	3c23d70a 	.word	0x3c23d70a
 800260c:	3f666666 	.word	0x3f666666
 8002610:	20000ffc 	.word	0x20000ffc
 8002614:	3a830bb9 	.word	0x3a830bb9
 8002618:	b6327146 	.word	0xb6327146
 800261c:	33ae1e34 	.word	0x33ae1e34
 8002620:	3f7fe5c9 	.word	0x3f7fe5c9
 8002624:	bbae429e 	.word	0xbbae429e
 8002628:	392a143b 	.word	0x392a143b
 800262c:	c02fbe77 	.word	0xc02fbe77
 8002630:	3bef4e01 	.word	0x3bef4e01
 8002634:	3e0aa64c 	.word	0x3e0aa64c
 8002638:	34012bd0 	.word	0x34012bd0
 800263c:	397c4992 	.word	0x397c4992
 8002640:	3fd7ae14 	.word	0x3fd7ae14
	        } else {
	            kf_rev.H_data[i * 4 + j] = 0.0f;
 8002644:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002646:	009a      	lsls	r2, r3, #2
 8002648:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800264a:	4413      	add	r3, r2
 800264c:	4ac0      	ldr	r2, [pc, #768]	@ (8002950 <main+0x670>)
 800264e:	333c      	adds	r3, #60	@ 0x3c
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	4413      	add	r3, r2
 8002654:	f04f 0200 	mov.w	r2, #0
 8002658:	601a      	str	r2, [r3, #0]
	    for (int j = 0; j < 4; j++) {
 800265a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800265c:	3301      	adds	r3, #1
 800265e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002660:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002662:	2b03      	cmp	r3, #3
 8002664:	dd8d      	ble.n	8002582 <main+0x2a2>
	for (int i = 0; i < 2; i++) {
 8002666:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002668:	3301      	adds	r3, #1
 800266a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800266c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800266e:	2b01      	cmp	r3, #1
 8002670:	dd84      	ble.n	800257c <main+0x29c>
	        }
	    }
	}

	// Revolute
	kf_rev.x_data[0] = 0;
 8002672:	4bb7      	ldr	r3, [pc, #732]	@ (8002950 <main+0x670>)
 8002674:	f04f 0200 	mov.w	r2, #0
 8002678:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
	kf_rev.x_data[1] = 0;
 800267c:	4bb4      	ldr	r3, [pc, #720]	@ (8002950 <main+0x670>)
 800267e:	f04f 0200 	mov.w	r2, #0
 8002682:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
	kf_rev.x_data[2] = 0;
 8002686:	4bb2      	ldr	r3, [pc, #712]	@ (8002950 <main+0x670>)
 8002688:	f04f 0200 	mov.w	r2, #0
 800268c:	f8c3 223c 	str.w	r2, [r3, #572]	@ 0x23c
	kf_rev.x_data[3] = 0;
 8002690:	4baf      	ldr	r3, [pc, #700]	@ (8002950 <main+0x670>)
 8002692:	f04f 0200 	mov.w	r2, #0
 8002696:	f8c3 2240 	str.w	r2, [r3, #576]	@ 0x240

	Kalman_SetMeasurementNoise(&kf_rev, 0.08f);
 800269a:	ed9f 0aae 	vldr	s0, [pc, #696]	@ 8002954 <main+0x674>
 800269e:	48ac      	ldr	r0, [pc, #688]	@ (8002950 <main+0x670>)
 80026a0:	f7fe fc64 	bl	8000f6c <Kalman_SetMeasurementNoise>
	Kalman_SetProcessNoise(&kf_rev, 0.12f);
 80026a4:	ed9f 0aac 	vldr	s0, [pc, #688]	@ 8002958 <main+0x678>
 80026a8:	48a9      	ldr	r0, [pc, #676]	@ (8002950 <main+0x670>)
 80026aa:	f7fe fc2f 	bl	8000f0c <Kalman_SetProcessNoise>

	Pris_motor = create_prismatic_motor(2.29e-04, 4.82e-04, 8.75e-01, 1.77e-01, 1.77e-01, 3.8719, 0.0016);
 80026ae:	4cab      	ldr	r4, [pc, #684]	@ (800295c <main+0x67c>)
 80026b0:	463b      	mov	r3, r7
 80026b2:	ed9f 6b8d 	vldr	d6, [pc, #564]	@ 80028e8 <main+0x608>
 80026b6:	ed9f 5b8e 	vldr	d5, [pc, #568]	@ 80028f0 <main+0x610>
 80026ba:	ed9f 4b8f 	vldr	d4, [pc, #572]	@ 80028f8 <main+0x618>
 80026be:	ed9f 3b8e 	vldr	d3, [pc, #568]	@ 80028f8 <main+0x618>
 80026c2:	ed9f 2b8f 	vldr	d2, [pc, #572]	@ 8002900 <main+0x620>
 80026c6:	ed9f 1b90 	vldr	d1, [pc, #576]	@ 8002908 <main+0x628>
 80026ca:	ed9f 0b91 	vldr	d0, [pc, #580]	@ 8002910 <main+0x630>
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7ff f92e 	bl	8001930 <create_prismatic_motor>
 80026d4:	4625      	mov	r5, r4
 80026d6:	463c      	mov	r4, r7
 80026d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026e8:	e885 0003 	stmia.w	r5, {r0, r1}
	Rev_motor = create_motor(1.88E-01, 6.91E-03, 7.36E-01, 1.63E+00, 1.63E+00 * 7.36E-01, 5.13E-01, 3.37E-04);
 80026ec:	4c9c      	ldr	r4, [pc, #624]	@ (8002960 <main+0x680>)
 80026ee:	463b      	mov	r3, r7
 80026f0:	ed9f 6b89 	vldr	d6, [pc, #548]	@ 8002918 <main+0x638>
 80026f4:	ed9f 5b8a 	vldr	d5, [pc, #552]	@ 8002920 <main+0x640>
 80026f8:	ed9f 4b8b 	vldr	d4, [pc, #556]	@ 8002928 <main+0x648>
 80026fc:	ed9f 3b8c 	vldr	d3, [pc, #560]	@ 8002930 <main+0x650>
 8002700:	ed9f 2b8d 	vldr	d2, [pc, #564]	@ 8002938 <main+0x658>
 8002704:	ed9f 1b8e 	vldr	d1, [pc, #568]	@ 8002940 <main+0x660>
 8002708:	ed9f 0b8f 	vldr	d0, [pc, #572]	@ 8002948 <main+0x668>
 800270c:	4618      	mov	r0, r3
 800270e:	f7ff f950 	bl	80019b2 <create_motor>
 8002712:	4625      	mov	r5, r4
 8002714:	463c      	mov	r4, r7
 8002716:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002718:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800271a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800271c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800271e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002720:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002722:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002726:	e885 0003 	stmia.w	r5, {r0, r1}

	// Prismatic Position
	Pris_posi_PID.Kp = 0.3;
 800272a:	4b8e      	ldr	r3, [pc, #568]	@ (8002964 <main+0x684>)
 800272c:	4a8e      	ldr	r2, [pc, #568]	@ (8002968 <main+0x688>)
 800272e:	619a      	str	r2, [r3, #24]
	Pris_posi_PID.Ki = 0.01;
 8002730:	4b8c      	ldr	r3, [pc, #560]	@ (8002964 <main+0x684>)
 8002732:	4a8e      	ldr	r2, [pc, #568]	@ (800296c <main+0x68c>)
 8002734:	61da      	str	r2, [r3, #28]
	Pris_posi_PID.Kd = 0.3;
 8002736:	4b8b      	ldr	r3, [pc, #556]	@ (8002964 <main+0x684>)
 8002738:	4a8b      	ldr	r2, [pc, #556]	@ (8002968 <main+0x688>)
 800273a:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Pris_posi_PID, 0);
 800273c:	2100      	movs	r1, #0
 800273e:	4889      	ldr	r0, [pc, #548]	@ (8002964 <main+0x684>)
 8002740:	f00a f894 	bl	800c86c <arm_pid_init_f32>

	// Prismatic Velocity
	Pris_velo_PID.Kp = 0.08;
 8002744:	4b8a      	ldr	r3, [pc, #552]	@ (8002970 <main+0x690>)
 8002746:	4a8b      	ldr	r2, [pc, #556]	@ (8002974 <main+0x694>)
 8002748:	619a      	str	r2, [r3, #24]
	Pris_velo_PID.Ki = 0.01;
 800274a:	4b89      	ldr	r3, [pc, #548]	@ (8002970 <main+0x690>)
 800274c:	4a87      	ldr	r2, [pc, #540]	@ (800296c <main+0x68c>)
 800274e:	61da      	str	r2, [r3, #28]
	Pris_velo_PID.Kd = 0;
 8002750:	4b87      	ldr	r3, [pc, #540]	@ (8002970 <main+0x690>)
 8002752:	f04f 0200 	mov.w	r2, #0
 8002756:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Pris_velo_PID, 0);
 8002758:	2100      	movs	r1, #0
 800275a:	4885      	ldr	r0, [pc, #532]	@ (8002970 <main+0x690>)
 800275c:	f00a f886 	bl	800c86c <arm_pid_init_f32>

	// Revolute Position
	Rev_posi_PID.Kp = 100.0;
 8002760:	4b85      	ldr	r3, [pc, #532]	@ (8002978 <main+0x698>)
 8002762:	4a86      	ldr	r2, [pc, #536]	@ (800297c <main+0x69c>)
 8002764:	619a      	str	r2, [r3, #24]
	Rev_posi_PID.Ki = 40.0;
 8002766:	4b84      	ldr	r3, [pc, #528]	@ (8002978 <main+0x698>)
 8002768:	4a85      	ldr	r2, [pc, #532]	@ (8002980 <main+0x6a0>)
 800276a:	61da      	str	r2, [r3, #28]
	Rev_posi_PID.Kd = 4.0;
 800276c:	4b82      	ldr	r3, [pc, #520]	@ (8002978 <main+0x698>)
 800276e:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8002772:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Rev_posi_PID, 0);
 8002774:	2100      	movs	r1, #0
 8002776:	4880      	ldr	r0, [pc, #512]	@ (8002978 <main+0x698>)
 8002778:	f00a f878 	bl	800c86c <arm_pid_init_f32>

	// Revolute Velocity
	Rev_velo_PID.Kp = 3.0;
 800277c:	4b81      	ldr	r3, [pc, #516]	@ (8002984 <main+0x6a4>)
 800277e:	4a82      	ldr	r2, [pc, #520]	@ (8002988 <main+0x6a8>)
 8002780:	619a      	str	r2, [r3, #24]
	Rev_velo_PID.Ki = 0.1;
 8002782:	4b80      	ldr	r3, [pc, #512]	@ (8002984 <main+0x6a4>)
 8002784:	4a81      	ldr	r2, [pc, #516]	@ (800298c <main+0x6ac>)
 8002786:	61da      	str	r2, [r3, #28]
	Rev_velo_PID.Kd = 0;
 8002788:	4b7e      	ldr	r3, [pc, #504]	@ (8002984 <main+0x6a4>)
 800278a:	f04f 0200 	mov.w	r2, #0
 800278e:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Rev_velo_PID, 0);
 8002790:	2100      	movs	r1, #0
 8002792:	487c      	ldr	r0, [pc, #496]	@ (8002984 <main+0x6a4>)
 8002794:	f00a f86a 	bl	800c86c <arm_pid_init_f32>

		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
		//__HAL_TIM_SET_COMPARE(&htim20,TIM_CHANNEL_1,500);
		//__HAL_TIM_SET_COMPARE(&htim20,TIM_CHANNEL_3,status);
		HAL_ADC_Start(&hadc1);
 8002798:	487d      	ldr	r0, [pc, #500]	@ (8002990 <main+0x6b0>)
 800279a:	f002 f8e3 	bl	8004964 <HAL_ADC_Start>
		HAL_ADC_Start(&hadc2);
 800279e:	487d      	ldr	r0, [pc, #500]	@ (8002994 <main+0x6b4>)
 80027a0:	f002 f8e0 	bl	8004964 <HAL_ADC_Start>
		adc_1 = HAL_ADC_GetValue(&hadc1);
 80027a4:	487a      	ldr	r0, [pc, #488]	@ (8002990 <main+0x6b0>)
 80027a6:	f002 f9c1 	bl	8004b2c <HAL_ADC_GetValue>
 80027aa:	4603      	mov	r3, r0
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	4b7a      	ldr	r3, [pc, #488]	@ (8002998 <main+0x6b8>)
 80027b0:	801a      	strh	r2, [r3, #0]
		adc_2 = HAL_ADC_GetValue(&hadc2);
 80027b2:	4878      	ldr	r0, [pc, #480]	@ (8002994 <main+0x6b4>)
 80027b4:	f002 f9ba 	bl	8004b2c <HAL_ADC_GetValue>
 80027b8:	4603      	mov	r3, r0
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	4b77      	ldr	r3, [pc, #476]	@ (800299c <main+0x6bc>)
 80027be:	801a      	strh	r2, [r3, #0]
		QEIReadRaw3 = __HAL_TIM_GET_COUNTER(&htim3);
 80027c0:	4b77      	ldr	r3, [pc, #476]	@ (80029a0 <main+0x6c0>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c6:	4a77      	ldr	r2, [pc, #476]	@ (80029a4 <main+0x6c4>)
 80027c8:	6013      	str	r3, [r2, #0]
		QEIReadRaw4 = __HAL_TIM_GET_COUNTER(&htim4);
 80027ca:	4b77      	ldr	r3, [pc, #476]	@ (80029a8 <main+0x6c8>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d0:	4a76      	ldr	r2, [pc, #472]	@ (80029ac <main+0x6cc>)
 80027d2:	6013      	str	r3, [r2, #0]
		Modbus_Protocal_Worker();
 80027d4:	f7fe fe38 	bl	8001448 <Modbus_Protocal_Worker>
//		registerFrame[0x06].U16 = 7;
//		registerFrame[0x07].U16 = 8;
//		registerFrame[0x08].U16 = 9;
		//registerFrame[0x15].U16 = 10;
		//}
		uint32_t currentTick = HAL_GetTick();
 80027d8:	f001 fcf0 	bl	80041bc <HAL_GetTick>
 80027dc:	64f8      	str	r0, [r7, #76]	@ 0x4c
		float dt = (currentTick - lastTick) / 1000.0f;
 80027de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80027e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	ee07 3a90 	vmov	s15, r3
 80027e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80027ec:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80029b0 <main+0x6d0>
 80027f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027f4:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
//		QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim4);
		if (dt >= 0.001f) {
 80027f8:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80027fc:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 80029b4 <main+0x6d4>
 8002800:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002808:	f2c0 81b0 	blt.w	8002b6c <main+0x88c>
			Encoder_Update(&encoder1, dt);
 800280c:	ed97 0a12 	vldr	s0, [r7, #72]	@ 0x48
 8002810:	4869      	ldr	r0, [pc, #420]	@ (80029b8 <main+0x6d8>)
 8002812:	f7fe f905 	bl	8000a20 <Encoder_Update>
			Encoder_Update(&encoder2, dt);
 8002816:	ed97 0a12 	vldr	s0, [r7, #72]	@ 0x48
 800281a:	4868      	ldr	r0, [pc, #416]	@ (80029bc <main+0x6dc>)
 800281c:	f7fe f900 	bl	8000a20 <Encoder_Update>
			lastTick = currentTick;
 8002820:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002822:	667b      	str	r3, [r7, #100]	@ 0x64

			p1 = Encoder_GetPosition_mm(&encoder1);
 8002824:	4864      	ldr	r0, [pc, #400]	@ (80029b8 <main+0x6d8>)
 8002826:	f7fe f9de 	bl	8000be6 <Encoder_GetPosition_mm>
 800282a:	eef0 7a40 	vmov.f32	s15, s0
 800282e:	4b64      	ldr	r3, [pc, #400]	@ (80029c0 <main+0x6e0>)
 8002830:	edc3 7a00 	vstr	s15, [r3]
			v1 = Encoder_GetVelocity(&encoder1);
 8002834:	4860      	ldr	r0, [pc, #384]	@ (80029b8 <main+0x6d8>)
 8002836:	f7fe f9b8 	bl	8000baa <Encoder_GetVelocity>
 800283a:	eef0 7a40 	vmov.f32	s15, s0
 800283e:	4b61      	ldr	r3, [pc, #388]	@ (80029c4 <main+0x6e4>)
 8002840:	edc3 7a00 	vstr	s15, [r3]
			a1 = Encoder_GetAcceleration(&encoder1);
 8002844:	485c      	ldr	r0, [pc, #368]	@ (80029b8 <main+0x6d8>)
 8002846:	f7fe f9bf 	bl	8000bc8 <Encoder_GetAcceleration>
 800284a:	eef0 7a40 	vmov.f32	s15, s0
 800284e:	4b5e      	ldr	r3, [pc, #376]	@ (80029c8 <main+0x6e8>)
 8002850:	edc3 7a00 	vstr	s15, [r3]

			p2 = Encoder_GetPosition(&encoder2);
 8002854:	4859      	ldr	r0, [pc, #356]	@ (80029bc <main+0x6dc>)
 8002856:	f7fe f999 	bl	8000b8c <Encoder_GetPosition>
 800285a:	eef0 7a40 	vmov.f32	s15, s0
 800285e:	4b5b      	ldr	r3, [pc, #364]	@ (80029cc <main+0x6ec>)
 8002860:	edc3 7a00 	vstr	s15, [r3]
			v2 = Encoder_GetVelocity(&encoder2);
 8002864:	4855      	ldr	r0, [pc, #340]	@ (80029bc <main+0x6dc>)
 8002866:	f7fe f9a0 	bl	8000baa <Encoder_GetVelocity>
 800286a:	eef0 7a40 	vmov.f32	s15, s0
 800286e:	4b58      	ldr	r3, [pc, #352]	@ (80029d0 <main+0x6f0>)
 8002870:	edc3 7a00 	vstr	s15, [r3]
			a2 = Encoder_GetAcceleration(&encoder2);
 8002874:	4851      	ldr	r0, [pc, #324]	@ (80029bc <main+0x6dc>)
 8002876:	f7fe f9a7 	bl	8000bc8 <Encoder_GetAcceleration>
 800287a:	eef0 7a40 	vmov.f32	s15, s0
 800287e:	4b55      	ldr	r3, [pc, #340]	@ (80029d4 <main+0x6f4>)
 8002880:	edc3 7a00 	vstr	s15, [r3]

			Measurement_Pris[0] = Encoder_GetPosition_mm(&encoder1);
 8002884:	484c      	ldr	r0, [pc, #304]	@ (80029b8 <main+0x6d8>)
 8002886:	f7fe f9ae 	bl	8000be6 <Encoder_GetPosition_mm>
 800288a:	eef0 7a40 	vmov.f32	s15, s0
 800288e:	4b52      	ldr	r3, [pc, #328]	@ (80029d8 <main+0x6f8>)
 8002890:	edc3 7a00 	vstr	s15, [r3]
			Measurement_Pris[1] = Encoder_GetVelocity_mm(&encoder1);
 8002894:	4848      	ldr	r0, [pc, #288]	@ (80029b8 <main+0x6d8>)
 8002896:	f7fe f9b5 	bl	8000c04 <Encoder_GetVelocity_mm>
 800289a:	eef0 7a40 	vmov.f32	s15, s0
 800289e:	4b4e      	ldr	r3, [pc, #312]	@ (80029d8 <main+0x6f8>)
 80028a0:	edc3 7a01 	vstr	s15, [r3, #4]
			Measurement_Pris[2] = 0;
 80028a4:	4b4c      	ldr	r3, [pc, #304]	@ (80029d8 <main+0x6f8>)
 80028a6:	f04f 0200 	mov.w	r2, #0
 80028aa:	609a      	str	r2, [r3, #8]
			Measurement_Pris[3] = 0;
 80028ac:	4b4a      	ldr	r3, [pc, #296]	@ (80029d8 <main+0x6f8>)
 80028ae:	f04f 0200 	mov.w	r2, #0
 80028b2:	60da      	str	r2, [r3, #12]
			Kalman_SetInput(&kf_pris, V_pris_velo_PID);
 80028b4:	4b49      	ldr	r3, [pc, #292]	@ (80029dc <main+0x6fc>)
 80028b6:	edd3 7a00 	vldr	s15, [r3]
 80028ba:	eeb0 0a67 	vmov.f32	s0, s15
 80028be:	4848      	ldr	r0, [pc, #288]	@ (80029e0 <main+0x700>)
 80028c0:	f7fe fb84 	bl	8000fcc <Kalman_SetInput>
			Kalman_Predict(&kf_pris);
 80028c4:	4846      	ldr	r0, [pc, #280]	@ (80029e0 <main+0x700>)
 80028c6:	f7fe fb91 	bl	8000fec <Kalman_Predict>
			Kalman_Update(&kf_pris, Measurement_Pris);
 80028ca:	4943      	ldr	r1, [pc, #268]	@ (80029d8 <main+0x6f8>)
 80028cc:	4844      	ldr	r0, [pc, #272]	@ (80029e0 <main+0x700>)
 80028ce:	f7fe fbda 	bl	8001086 <Kalman_Update>

			Measurement_Rev[0] = Encoder_GetPosition(&encoder2) / (100/30);
 80028d2:	483a      	ldr	r0, [pc, #232]	@ (80029bc <main+0x6dc>)
 80028d4:	f7fe f95a 	bl	8000b8c <Encoder_GetPosition>
 80028d8:	eeb0 7a40 	vmov.f32	s14, s0
 80028dc:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 80028e0:	e080      	b.n	80029e4 <main+0x704>
 80028e2:	bf00      	nop
 80028e4:	f3af 8000 	nop.w
 80028e8:	eb1c432d 	.word	0xeb1c432d
 80028ec:	3f5a36e2 	.word	0x3f5a36e2
 80028f0:	b50b0f28 	.word	0xb50b0f28
 80028f4:	400ef9a6 	.word	0x400ef9a6
 80028f8:	9db22d0e 	.word	0x9db22d0e
 80028fc:	3fc6a7ef 	.word	0x3fc6a7ef
 8002900:	00000000 	.word	0x00000000
 8002904:	3fec0000 	.word	0x3fec0000
 8002908:	3c968944 	.word	0x3c968944
 800290c:	3f3f969e 	.word	0x3f3f969e
 8002910:	05857aff 	.word	0x05857aff
 8002914:	3f2e03f7 	.word	0x3f2e03f7
 8002918:	fa8f7db7 	.word	0xfa8f7db7
 800291c:	3f3615eb 	.word	0x3f3615eb
 8002920:	f9db22d1 	.word	0xf9db22d1
 8002924:	3fe06a7e 	.word	0x3fe06a7e
 8002928:	a7daa4fc 	.word	0xa7daa4fc
 800292c:	3ff331e3 	.word	0x3ff331e3
 8002930:	e147ae14 	.word	0xe147ae14
 8002934:	3ffa147a 	.word	0x3ffa147a
 8002938:	df3b645a 	.word	0xdf3b645a
 800293c:	3fe78d4f 	.word	0x3fe78d4f
 8002940:	003eea21 	.word	0x003eea21
 8002944:	3f7c4da9 	.word	0x3f7c4da9
 8002948:	4dd2f1aa 	.word	0x4dd2f1aa
 800294c:	3fc81062 	.word	0x3fc81062
 8002950:	20000ffc 	.word	0x20000ffc
 8002954:	3da3d70a 	.word	0x3da3d70a
 8002958:	3df5c28f 	.word	0x3df5c28f
 800295c:	20001320 	.word	0x20001320
 8002960:	20001358 	.word	0x20001358
 8002964:	20000c0c 	.word	0x20000c0c
 8002968:	3e99999a 	.word	0x3e99999a
 800296c:	3c23d70a 	.word	0x3c23d70a
 8002970:	20000c4c 	.word	0x20000c4c
 8002974:	3da3d70a 	.word	0x3da3d70a
 8002978:	20000c8c 	.word	0x20000c8c
 800297c:	42c80000 	.word	0x42c80000
 8002980:	42200000 	.word	0x42200000
 8002984:	20000cb0 	.word	0x20000cb0
 8002988:	40400000 	.word	0x40400000
 800298c:	3dcccccd 	.word	0x3dcccccd
 8002990:	200002b8 	.word	0x200002b8
 8002994:	20000324 	.word	0x20000324
 8002998:	20000598 	.word	0x20000598
 800299c:	2000059a 	.word	0x2000059a
 80029a0:	200015f8 	.word	0x200015f8
 80029a4:	200003fc 	.word	0x200003fc
 80029a8:	200016c4 	.word	0x200016c4
 80029ac:	20000400 	.word	0x20000400
 80029b0:	447a0000 	.word	0x447a0000
 80029b4:	3a83126f 	.word	0x3a83126f
 80029b8:	20000394 	.word	0x20000394
 80029bc:	200003c8 	.word	0x200003c8
 80029c0:	2000057c 	.word	0x2000057c
 80029c4:	20000580 	.word	0x20000580
 80029c8:	20000584 	.word	0x20000584
 80029cc:	20000588 	.word	0x20000588
 80029d0:	2000058c 	.word	0x2000058c
 80029d4:	20000590 	.word	0x20000590
 80029d8:	20001390 	.word	0x20001390
 80029dc:	20000c78 	.word	0x20000c78
 80029e0:	20000cd8 	.word	0x20000cd8
 80029e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029e8:	4bab      	ldr	r3, [pc, #684]	@ (8002c98 <main+0x9b8>)
 80029ea:	edc3 7a00 	vstr	s15, [r3]
			Measurement_Rev[1] = Encoder_GetVelocity(&encoder2) / (100/30);
 80029ee:	48ab      	ldr	r0, [pc, #684]	@ (8002c9c <main+0x9bc>)
 80029f0:	f7fe f8db 	bl	8000baa <Encoder_GetVelocity>
 80029f4:	eeb0 7a40 	vmov.f32	s14, s0
 80029f8:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 80029fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a00:	4ba5      	ldr	r3, [pc, #660]	@ (8002c98 <main+0x9b8>)
 8002a02:	edc3 7a01 	vstr	s15, [r3, #4]
			Measurement_Rev[2] = 0;
 8002a06:	4ba4      	ldr	r3, [pc, #656]	@ (8002c98 <main+0x9b8>)
 8002a08:	f04f 0200 	mov.w	r2, #0
 8002a0c:	609a      	str	r2, [r3, #8]
			Measurement_Rev[3] = 0;
 8002a0e:	4ba2      	ldr	r3, [pc, #648]	@ (8002c98 <main+0x9b8>)
 8002a10:	f04f 0200 	mov.w	r2, #0
 8002a14:	60da      	str	r2, [r3, #12]
			Kalman_SetInput(&kf_rev, V_rev_velo_PID);
 8002a16:	4ba2      	ldr	r3, [pc, #648]	@ (8002ca0 <main+0x9c0>)
 8002a18:	edd3 7a00 	vldr	s15, [r3]
 8002a1c:	eeb0 0a67 	vmov.f32	s0, s15
 8002a20:	48a0      	ldr	r0, [pc, #640]	@ (8002ca4 <main+0x9c4>)
 8002a22:	f7fe fad3 	bl	8000fcc <Kalman_SetInput>
			Kalman_Predict(&kf_rev);
 8002a26:	489f      	ldr	r0, [pc, #636]	@ (8002ca4 <main+0x9c4>)
 8002a28:	f7fe fae0 	bl	8000fec <Kalman_Predict>
			Kalman_Update(&kf_rev, Measurement_Rev);
 8002a2c:	499a      	ldr	r1, [pc, #616]	@ (8002c98 <main+0x9b8>)
 8002a2e:	489d      	ldr	r0, [pc, #628]	@ (8002ca4 <main+0x9c4>)
 8002a30:	f7fe fb29 	bl	8001086 <Kalman_Update>

			count_Tim2 += 1;
 8002a34:	4b9c      	ldr	r3, [pc, #624]	@ (8002ca8 <main+0x9c8>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	4a9b      	ldr	r2, [pc, #620]	@ (8002ca8 <main+0x9c8>)
 8002a3c:	6013      	str	r3, [r2, #0]
			// Velocity Control
			velocity_pris = Encoder_GetVelocity_mm(&encoder1);
 8002a3e:	489b      	ldr	r0, [pc, #620]	@ (8002cac <main+0x9cc>)
 8002a40:	f7fe f8e0 	bl	8000c04 <Encoder_GetVelocity_mm>
 8002a44:	eef0 7a40 	vmov.f32	s15, s0
 8002a48:	4b99      	ldr	r3, [pc, #612]	@ (8002cb0 <main+0x9d0>)
 8002a4a:	edc3 7a00 	vstr	s15, [r3]
			setvelocity_pris = GetTrajectoryVelocity(&Prismatic[current_segment], t_global) + V_pris_posi_PID;
 8002a4e:	4b99      	ldr	r3, [pc, #612]	@ (8002cb4 <main+0x9d4>)
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	4613      	mov	r3, r2
 8002a54:	00db      	lsls	r3, r3, #3
 8002a56:	4413      	add	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4a97      	ldr	r2, [pc, #604]	@ (8002cb8 <main+0x9d8>)
 8002a5c:	4413      	add	r3, r2
 8002a5e:	4a97      	ldr	r2, [pc, #604]	@ (8002cbc <main+0x9dc>)
 8002a60:	edd2 7a00 	vldr	s15, [r2]
 8002a64:	eeb0 0a67 	vmov.f32	s0, s15
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7ff f96f 	bl	8001d4c <GetTrajectoryVelocity>
 8002a6e:	eeb0 7a40 	vmov.f32	s14, s0
 8002a72:	4b93      	ldr	r3, [pc, #588]	@ (8002cc0 <main+0x9e0>)
 8002a74:	edd3 7a00 	vldr	s15, [r3]
 8002a78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a7c:	4b91      	ldr	r3, [pc, #580]	@ (8002cc4 <main+0x9e4>)
 8002a7e:	edc3 7a00 	vstr	s15, [r3]
//			setvelocity_pris = vel + V_pris_posi_PID;
			delta_velo_pris = setvelocity_pris - velocity_pris;
 8002a82:	4b90      	ldr	r3, [pc, #576]	@ (8002cc4 <main+0x9e4>)
 8002a84:	ed93 7a00 	vldr	s14, [r3]
 8002a88:	4b89      	ldr	r3, [pc, #548]	@ (8002cb0 <main+0x9d0>)
 8002a8a:	edd3 7a00 	vldr	s15, [r3]
 8002a8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a92:	4b8d      	ldr	r3, [pc, #564]	@ (8002cc8 <main+0x9e8>)
 8002a94:	edc3 7a00 	vstr	s15, [r3]
//			delta_velo_pris = setvelocity_pris - kf_pris.x_data[1];
			V_pris_velo_PID = Prismatic_velocity_control(delta_velo_pris);
 8002a98:	4b8b      	ldr	r3, [pc, #556]	@ (8002cc8 <main+0x9e8>)
 8002a9a:	edd3 7a00 	vldr	s15, [r3]
 8002a9e:	eeb0 0a67 	vmov.f32	s0, s15
 8002aa2:	f000 fb41 	bl	8003128 <Prismatic_velocity_control>
 8002aa6:	eef0 7a40 	vmov.f32	s15, s0
 8002aaa:	4b88      	ldr	r3, [pc, #544]	@ (8002ccc <main+0x9ec>)
 8002aac:	edc3 7a00 	vstr	s15, [r3]
			if (count_Tim2 >= 10) {
 8002ab0:	4b7d      	ldr	r3, [pc, #500]	@ (8002ca8 <main+0x9c8>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2b09      	cmp	r3, #9
 8002ab6:	dd59      	ble.n	8002b6c <main+0x88c>
				// Position Control
				position_pris = Encoder_GetPosition_mm(&encoder1);
 8002ab8:	487c      	ldr	r0, [pc, #496]	@ (8002cac <main+0x9cc>)
 8002aba:	f7fe f894 	bl	8000be6 <Encoder_GetPosition_mm>
 8002abe:	eef0 7a40 	vmov.f32	s15, s0
 8002ac2:	4b83      	ldr	r3, [pc, #524]	@ (8002cd0 <main+0x9f0>)
 8002ac4:	edc3 7a00 	vstr	s15, [r3]
				setposition_pris = GetTrajectoryPosition(&Prismatic[current_segment], t_global);
 8002ac8:	4b7a      	ldr	r3, [pc, #488]	@ (8002cb4 <main+0x9d4>)
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	4613      	mov	r3, r2
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	4413      	add	r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	4a78      	ldr	r2, [pc, #480]	@ (8002cb8 <main+0x9d8>)
 8002ad6:	4413      	add	r3, r2
 8002ad8:	4a78      	ldr	r2, [pc, #480]	@ (8002cbc <main+0x9dc>)
 8002ada:	edd2 7a00 	vldr	s15, [r2]
 8002ade:	eeb0 0a67 	vmov.f32	s0, s15
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff f85c 	bl	8001ba0 <GetTrajectoryPosition>
 8002ae8:	eef0 7a40 	vmov.f32	s15, s0
 8002aec:	4b79      	ldr	r3, [pc, #484]	@ (8002cd4 <main+0x9f4>)
 8002aee:	edc3 7a00 	vstr	s15, [r3]
//				setposition_pris = pos;
				delta_posi_pris = setposition_pris - position_pris;
 8002af2:	4b78      	ldr	r3, [pc, #480]	@ (8002cd4 <main+0x9f4>)
 8002af4:	ed93 7a00 	vldr	s14, [r3]
 8002af8:	4b75      	ldr	r3, [pc, #468]	@ (8002cd0 <main+0x9f0>)
 8002afa:	edd3 7a00 	vldr	s15, [r3]
 8002afe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b02:	4b75      	ldr	r3, [pc, #468]	@ (8002cd8 <main+0x9f8>)
 8002b04:	edc3 7a00 	vstr	s15, [r3]
				if (delta_posi_pris <= 0.1 && delta_posi_pris >= -0.1) {
 8002b08:	4b73      	ldr	r3, [pc, #460]	@ (8002cd8 <main+0x9f8>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7fd fce7 	bl	80004e0 <__aeabi_f2d>
 8002b12:	a35d      	add	r3, pc, #372	@ (adr r3, 8002c88 <main+0x9a8>)
 8002b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b18:	f7fd fda4 	bl	8000664 <__aeabi_dcmple>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d015      	beq.n	8002b4e <main+0x86e>
 8002b22:	4b6d      	ldr	r3, [pc, #436]	@ (8002cd8 <main+0x9f8>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7fd fcda 	bl	80004e0 <__aeabi_f2d>
 8002b2c:	a358      	add	r3, pc, #352	@ (adr r3, 8002c90 <main+0x9b0>)
 8002b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b32:	f7fd fda1 	bl	8000678 <__aeabi_dcmpge>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d008      	beq.n	8002b4e <main+0x86e>
					V_pris_posi_PID = 0;
 8002b3c:	4b60      	ldr	r3, [pc, #384]	@ (8002cc0 <main+0x9e0>)
 8002b3e:	f04f 0200 	mov.w	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]
					V_pris_velo_PID = 0;
 8002b44:	4b61      	ldr	r3, [pc, #388]	@ (8002ccc <main+0x9ec>)
 8002b46:	f04f 0200 	mov.w	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	e00b      	b.n	8002b66 <main+0x886>
				} else {
					V_pris_posi_PID = Prismatic_position_control(delta_posi_pris);
 8002b4e:	4b62      	ldr	r3, [pc, #392]	@ (8002cd8 <main+0x9f8>)
 8002b50:	edd3 7a00 	vldr	s15, [r3]
 8002b54:	eeb0 0a67 	vmov.f32	s0, s15
 8002b58:	f000 fa6e 	bl	8003038 <Prismatic_position_control>
 8002b5c:	eef0 7a40 	vmov.f32	s15, s0
 8002b60:	4b57      	ldr	r3, [pc, #348]	@ (8002cc0 <main+0x9e0>)
 8002b62:	edc3 7a00 	vstr	s15, [r3]
				}
//				V_pris_posi_PID = Prismatic_position_control(delta_posi_pris);
				count_Tim2 = 0;
 8002b66:	4b50      	ldr	r3, [pc, #320]	@ (8002ca8 <main+0x9c8>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]
//			if (current_segment < 10) {
//				current_segment++;
//			}
//		}

		if (V_pris_velo_PID < 0) {
 8002b6c:	4b57      	ldr	r3, [pc, #348]	@ (8002ccc <main+0x9ec>)
 8002b6e:	edd3 7a00 	vldr	s15, [r3]
 8002b72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b7a:	d50b      	bpl.n	8002b94 <main+0x8b4>
			DIR_24V = 0;
 8002b7c:	4b57      	ldr	r3, [pc, #348]	@ (8002cdc <main+0x9fc>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	601a      	str	r2, [r3, #0]
			V_absoulte_pris = fabsf(V_pris_velo_PID);
 8002b82:	4b52      	ldr	r3, [pc, #328]	@ (8002ccc <main+0x9ec>)
 8002b84:	edd3 7a00 	vldr	s15, [r3]
 8002b88:	eef0 7ae7 	vabs.f32	s15, s15
 8002b8c:	4b54      	ldr	r3, [pc, #336]	@ (8002ce0 <main+0xa00>)
 8002b8e:	edc3 7a00 	vstr	s15, [r3]
 8002b92:	e00e      	b.n	8002bb2 <main+0x8d2>
		} else if (V_pris_velo_PID > 0) {
 8002b94:	4b4d      	ldr	r3, [pc, #308]	@ (8002ccc <main+0x9ec>)
 8002b96:	edd3 7a00 	vldr	s15, [r3]
 8002b9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ba2:	dd06      	ble.n	8002bb2 <main+0x8d2>
			DIR_24V = 1;
 8002ba4:	4b4d      	ldr	r3, [pc, #308]	@ (8002cdc <main+0x9fc>)
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	601a      	str	r2, [r3, #0]
			V_absoulte_pris = V_pris_velo_PID;
 8002baa:	4b48      	ldr	r3, [pc, #288]	@ (8002ccc <main+0x9ec>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a4c      	ldr	r2, [pc, #304]	@ (8002ce0 <main+0xa00>)
 8002bb0:	6013      	str	r3, [r2, #0]
		}
		pwm_pris_velo = voltage_to_pwm(V_absoulte_pris);
 8002bb2:	4b4b      	ldr	r3, [pc, #300]	@ (8002ce0 <main+0xa00>)
 8002bb4:	edd3 7a00 	vldr	s15, [r3]
 8002bb8:	eeb0 0a67 	vmov.f32	s0, s15
 8002bbc:	f000 fb62 	bl	8003284 <voltage_to_pwm>
 8002bc0:	eef0 7a40 	vmov.f32	s15, s0
 8002bc4:	4b47      	ldr	r3, [pc, #284]	@ (8002ce4 <main+0xa04>)
 8002bc6:	edc3 7a00 	vstr	s15, [r3]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, DIR_24V);
 8002bca:	4b44      	ldr	r3, [pc, #272]	@ (8002cdc <main+0x9fc>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	2102      	movs	r1, #2
 8002bd4:	4844      	ldr	r0, [pc, #272]	@ (8002ce8 <main+0xa08>)
 8002bd6:	f003 fb8b 	bl	80062f0 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim20,TIM_CHANNEL_1,pwm_pris_velo);
 8002bda:	4b42      	ldr	r3, [pc, #264]	@ (8002ce4 <main+0xa04>)
 8002bdc:	edd3 7a00 	vldr	s15, [r3]
 8002be0:	4b42      	ldr	r3, [pc, #264]	@ (8002cec <main+0xa0c>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002be8:	ee17 2a90 	vmov	r2, s15
 8002bec:	635a      	str	r2, [r3, #52]	@ 0x34

//		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, DIR_18V);
//		__HAL_TIM_SET_COMPARE(&htim20,TIM_CHANNEL_3, status);

//		PS2_ReadData();
		Circle = PS2_ButtonCircle();
 8002bee:	f7fe f84b 	bl	8000c88 <PS2_ButtonCircle>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	4b3e      	ldr	r3, [pc, #248]	@ (8002cf0 <main+0xa10>)
 8002bf8:	601a      	str	r2, [r3, #0]
		Square = PS2_ButtonSquare();
 8002bfa:	f7fe f857 	bl	8000cac <PS2_ButtonSquare>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	461a      	mov	r2, r3
 8002c02:	4b3c      	ldr	r3, [pc, #240]	@ (8002cf4 <main+0xa14>)
 8002c04:	601a      	str	r2, [r3, #0]
		Triangle = PS2_ButtonTriangle();
 8002c06:	f7fe f861 	bl	8000ccc <PS2_ButtonTriangle>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	4b3a      	ldr	r3, [pc, #232]	@ (8002cf8 <main+0xa18>)
 8002c10:	601a      	str	r2, [r3, #0]
		Cross = PS2_ButtonCross();
 8002c12:	f7fe f86d 	bl	8000cf0 <PS2_ButtonCross>
 8002c16:	4603      	mov	r3, r0
 8002c18:	461a      	mov	r2, r3
 8002c1a:	4b38      	ldr	r3, [pc, #224]	@ (8002cfc <main+0xa1c>)
 8002c1c:	601a      	str	r2, [r3, #0]
		R1 = PS2_ButtonR1();
 8002c1e:	f7fe f879 	bl	8000d14 <PS2_ButtonR1>
 8002c22:	4603      	mov	r3, r0
 8002c24:	461a      	mov	r2, r3
 8002c26:	4b36      	ldr	r3, [pc, #216]	@ (8002d00 <main+0xa20>)
 8002c28:	601a      	str	r2, [r3, #0]
		R2 = PS2_ButtonR2();
 8002c2a:	f7fe f885 	bl	8000d38 <PS2_ButtonR2>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	461a      	mov	r2, r3
 8002c32:	4b34      	ldr	r3, [pc, #208]	@ (8002d04 <main+0xa24>)
 8002c34:	601a      	str	r2, [r3, #0]
		Select = PS2_ButtonSelect();
 8002c36:	f7fe f891 	bl	8000d5c <PS2_ButtonSelect>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	4b32      	ldr	r3, [pc, #200]	@ (8002d08 <main+0xa28>)
 8002c40:	601a      	str	r2, [r3, #0]
		Start = PS2_ButtonStart();
 8002c42:	f7fe f89d 	bl	8000d80 <PS2_ButtonStart>
 8002c46:	4603      	mov	r3, r0
 8002c48:	461a      	mov	r2, r3
 8002c4a:	4b30      	ldr	r3, [pc, #192]	@ (8002d0c <main+0xa2c>)
 8002c4c:	601a      	str	r2, [r3, #0]
		L2 = PS2_ButtonL2();
 8002c4e:	f7fe f8a9 	bl	8000da4 <PS2_ButtonL2>
 8002c52:	4603      	mov	r3, r0
 8002c54:	461a      	mov	r2, r3
 8002c56:	4b2e      	ldr	r3, [pc, #184]	@ (8002d10 <main+0xa30>)
 8002c58:	601a      	str	r2, [r3, #0]
//				count += 1;
//			}
//		}
//		prevSelect = selectPressed;
//
		t_global = HAL_GetTick() / 1000.0f;
 8002c5a:	f001 faaf 	bl	80041bc <HAL_GetTick>
 8002c5e:	ee07 0a90 	vmov	s15, r0
 8002c62:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c66:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8002d14 <main+0xa34>
 8002c6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c6e:	4b13      	ldr	r3, [pc, #76]	@ (8002cbc <main+0x9dc>)
 8002c70:	edc3 7a00 	vstr	s15, [r3]
		if (PS2_ButtonStart()) {
 8002c74:	f7fe f884 	bl	8000d80 <PS2_ButtonStart>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f000 80c6 	beq.w	8002e0c <main+0xb2c>
			for (int i = 0; i < 10; i++) {
 8002c80:	2300      	movs	r3, #0
 8002c82:	653b      	str	r3, [r7, #80]	@ 0x50
 8002c84:	e0bc      	b.n	8002e00 <main+0xb20>
 8002c86:	bf00      	nop
 8002c88:	9999999a 	.word	0x9999999a
 8002c8c:	3fb99999 	.word	0x3fb99999
 8002c90:	9999999a 	.word	0x9999999a
 8002c94:	bfb99999 	.word	0xbfb99999
 8002c98:	200013a0 	.word	0x200013a0
 8002c9c:	200003c8 	.word	0x200003c8
 8002ca0:	20000cd4 	.word	0x20000cd4
 8002ca4:	20000ffc 	.word	0x20000ffc
 8002ca8:	20000c08 	.word	0x20000c08
 8002cac:	20000394 	.word	0x20000394
 8002cb0:	20000c70 	.word	0x20000c70
 8002cb4:	2000040c 	.word	0x2000040c
 8002cb8:	20000410 	.word	0x20000410
 8002cbc:	20000578 	.word	0x20000578
 8002cc0:	20000c38 	.word	0x20000c38
 8002cc4:	20000c74 	.word	0x20000c74
 8002cc8:	20000c88 	.word	0x20000c88
 8002ccc:	20000c78 	.word	0x20000c78
 8002cd0:	20000c30 	.word	0x20000c30
 8002cd4:	20000c34 	.word	0x20000c34
 8002cd8:	20000c48 	.word	0x20000c48
 8002cdc:	20000c04 	.word	0x20000c04
 8002ce0:	20000c3c 	.word	0x20000c3c
 8002ce4:	20000c7c 	.word	0x20000c7c
 8002ce8:	48000400 	.word	0x48000400
 8002cec:	20001928 	.word	0x20001928
 8002cf0:	200013b0 	.word	0x200013b0
 8002cf4:	200013b4 	.word	0x200013b4
 8002cf8:	200013b8 	.word	0x200013b8
 8002cfc:	200013bc 	.word	0x200013bc
 8002d00:	200013c0 	.word	0x200013c0
 8002d04:	200013c4 	.word	0x200013c4
 8002d08:	200013c8 	.word	0x200013c8
 8002d0c:	200013cc 	.word	0x200013cc
 8002d10:	200013d0 	.word	0x200013d0
 8002d14:	447a0000 	.word	0x447a0000
				float start = PrismaticTenPoints[i];
 8002d18:	4a6e      	ldr	r2, [pc, #440]	@ (8002ed4 <main+0xbf4>)
 8002d1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	4413      	add	r3, r2
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	647b      	str	r3, [r7, #68]	@ 0x44
				float end = PrismaticTenPoints[i + 1];
 8002d24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d26:	3301      	adds	r3, #1
 8002d28:	4a6a      	ldr	r2, [pc, #424]	@ (8002ed4 <main+0xbf4>)
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	4413      	add	r3, r2
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	643b      	str	r3, [r7, #64]	@ 0x40
				// กำหนดเวลาเริ่มต้นของ segment นี้
				float t_start = (i == 0) ? t_global : Prismatic[i - 1].t_start + Prismatic[i - 1].t_total + delay[i - 1];
 8002d32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d021      	beq.n	8002d7c <main+0xa9c>
 8002d38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d3a:	1e5a      	subs	r2, r3, #1
 8002d3c:	4966      	ldr	r1, [pc, #408]	@ (8002ed8 <main+0xbf8>)
 8002d3e:	4613      	mov	r3, r2
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	4413      	add	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	440b      	add	r3, r1
 8002d48:	3320      	adds	r3, #32
 8002d4a:	ed93 7a00 	vldr	s14, [r3]
 8002d4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d50:	1e5a      	subs	r2, r3, #1
 8002d52:	4961      	ldr	r1, [pc, #388]	@ (8002ed8 <main+0xbf8>)
 8002d54:	4613      	mov	r3, r2
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	4413      	add	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	440b      	add	r3, r1
 8002d5e:	331c      	adds	r3, #28
 8002d60:	edd3 7a00 	vldr	s15, [r3]
 8002d64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	4a5b      	ldr	r2, [pc, #364]	@ (8002edc <main+0xbfc>)
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4413      	add	r3, r2
 8002d72:	edd3 7a00 	vldr	s15, [r3]
 8002d76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d7a:	e002      	b.n	8002d82 <main+0xaa2>
 8002d7c:	4b58      	ldr	r3, [pc, #352]	@ (8002ee0 <main+0xc00>)
 8002d7e:	edd3 7a00 	vldr	s15, [r3]
 8002d82:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
				InitTrajectorySegment(&Prismatic[i], start, end, v_max_pris, a_max_pris, t_start);
 8002d86:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002d88:	4613      	mov	r3, r2
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	4413      	add	r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	4a51      	ldr	r2, [pc, #324]	@ (8002ed8 <main+0xbf8>)
 8002d92:	4413      	add	r3, r2
 8002d94:	ed97 2a0f 	vldr	s4, [r7, #60]	@ 0x3c
 8002d98:	eddf 1a52 	vldr	s3, [pc, #328]	@ 8002ee4 <main+0xc04>
 8002d9c:	ed9f 1a52 	vldr	s2, [pc, #328]	@ 8002ee8 <main+0xc08>
 8002da0:	edd7 0a10 	vldr	s1, [r7, #64]	@ 0x40
 8002da4:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7fe fe43 	bl	8001a34 <InitTrajectorySegment>
				delay[i] = 5.5f - Prismatic[i].t_total;
 8002dae:	494a      	ldr	r1, [pc, #296]	@ (8002ed8 <main+0xbf8>)
 8002db0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002db2:	4613      	mov	r3, r2
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	4413      	add	r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	440b      	add	r3, r1
 8002dbc:	331c      	adds	r3, #28
 8002dbe:	edd3 7a00 	vldr	s15, [r3]
 8002dc2:	eeb1 7a06 	vmov.f32	s14, #22	@ 0x40b00000  5.5
 8002dc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dca:	4a44      	ldr	r2, [pc, #272]	@ (8002edc <main+0xbfc>)
 8002dcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	4413      	add	r3, r2
 8002dd2:	edc3 7a00 	vstr	s15, [r3]
				// ป้องกันกรณีเคลื่อนที่ช้ามากจน delay < 0
				if (delay[i] < 0.0f) {
 8002dd6:	4a41      	ldr	r2, [pc, #260]	@ (8002edc <main+0xbfc>)
 8002dd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	4413      	add	r3, r2
 8002dde:	edd3 7a00 	vldr	s15, [r3]
 8002de2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dea:	d506      	bpl.n	8002dfa <main+0xb1a>
					delay[i] = 0.0f;
 8002dec:	4a3b      	ldr	r2, [pc, #236]	@ (8002edc <main+0xbfc>)
 8002dee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	4413      	add	r3, r2
 8002df4:	f04f 0200 	mov.w	r2, #0
 8002df8:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < 10; i++) {
 8002dfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	653b      	str	r3, [r7, #80]	@ 0x50
 8002e00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e02:	2b09      	cmp	r3, #9
 8002e04:	dd88      	ble.n	8002d18 <main+0xa38>
				}
			}
			current_segment = 0;
 8002e06:	4b39      	ldr	r3, [pc, #228]	@ (8002eec <main+0xc0c>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]
		}

		if (current_segment < 10) {
 8002e0c:	4b37      	ldr	r3, [pc, #220]	@ (8002eec <main+0xc0c>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2b09      	cmp	r3, #9
 8002e12:	dc2a      	bgt.n	8002e6a <main+0xb8a>
		    pos = GetTrajectoryPosition(&Prismatic[current_segment], t_global);
 8002e14:	4b35      	ldr	r3, [pc, #212]	@ (8002eec <main+0xc0c>)
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	4413      	add	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4a2d      	ldr	r2, [pc, #180]	@ (8002ed8 <main+0xbf8>)
 8002e22:	4413      	add	r3, r2
 8002e24:	4a2e      	ldr	r2, [pc, #184]	@ (8002ee0 <main+0xc00>)
 8002e26:	edd2 7a00 	vldr	s15, [r2]
 8002e2a:	eeb0 0a67 	vmov.f32	s0, s15
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7fe feb6 	bl	8001ba0 <GetTrajectoryPosition>
 8002e34:	eef0 7a40 	vmov.f32	s15, s0
 8002e38:	4b2d      	ldr	r3, [pc, #180]	@ (8002ef0 <main+0xc10>)
 8002e3a:	edc3 7a00 	vstr	s15, [r3]
		    vel = GetTrajectoryVelocity(&Prismatic[current_segment], t_global);
 8002e3e:	4b2b      	ldr	r3, [pc, #172]	@ (8002eec <main+0xc0c>)
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	4613      	mov	r3, r2
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	4413      	add	r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4a23      	ldr	r2, [pc, #140]	@ (8002ed8 <main+0xbf8>)
 8002e4c:	4413      	add	r3, r2
 8002e4e:	4a24      	ldr	r2, [pc, #144]	@ (8002ee0 <main+0xc00>)
 8002e50:	edd2 7a00 	vldr	s15, [r2]
 8002e54:	eeb0 0a67 	vmov.f32	s0, s15
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7fe ff77 	bl	8001d4c <GetTrajectoryVelocity>
 8002e5e:	eef0 7a40 	vmov.f32	s15, s0
 8002e62:	4b24      	ldr	r3, [pc, #144]	@ (8002ef4 <main+0xc14>)
 8002e64:	edc3 7a00 	vstr	s15, [r3]
 8002e68:	e008      	b.n	8002e7c <main+0xb9c>
		} else {
		    pos = Prismatic[9].end_pos;
 8002e6a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ed8 <main+0xbf8>)
 8002e6c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002e70:	4a1f      	ldr	r2, [pc, #124]	@ (8002ef0 <main+0xc10>)
 8002e72:	6013      	str	r3, [r2, #0]
		    vel = 0.0f;
 8002e74:	4b1f      	ldr	r3, [pc, #124]	@ (8002ef4 <main+0xc14>)
 8002e76:	f04f 0200 	mov.w	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]
		}

		if (t_global > Prismatic[current_segment].t_start + Prismatic[current_segment].t_total) {
 8002e7c:	4b1b      	ldr	r3, [pc, #108]	@ (8002eec <main+0xc0c>)
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	4915      	ldr	r1, [pc, #84]	@ (8002ed8 <main+0xbf8>)
 8002e82:	4613      	mov	r3, r2
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	4413      	add	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	440b      	add	r3, r1
 8002e8c:	3320      	adds	r3, #32
 8002e8e:	ed93 7a00 	vldr	s14, [r3]
 8002e92:	4b16      	ldr	r3, [pc, #88]	@ (8002eec <main+0xc0c>)
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	4910      	ldr	r1, [pc, #64]	@ (8002ed8 <main+0xbf8>)
 8002e98:	4613      	mov	r3, r2
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	4413      	add	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	331c      	adds	r3, #28
 8002ea4:	edd3 7a00 	vldr	s15, [r3]
 8002ea8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002eac:	4b0c      	ldr	r3, [pc, #48]	@ (8002ee0 <main+0xc00>)
 8002eae:	edd3 7a00 	vldr	s15, [r3]
 8002eb2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eba:	d509      	bpl.n	8002ed0 <main+0xbf0>
			if (current_segment < 9) {
 8002ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8002eec <main+0xc0c>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2b08      	cmp	r3, #8
 8002ec2:	f73f ac69 	bgt.w	8002798 <main+0x4b8>
				current_segment++;
 8002ec6:	4b09      	ldr	r3, [pc, #36]	@ (8002eec <main+0xc0c>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	3301      	adds	r3, #1
 8002ecc:	4a07      	ldr	r2, [pc, #28]	@ (8002eec <main+0xc0c>)
 8002ece:	6013      	str	r3, [r2, #0]
	while (1) {
 8002ed0:	e462      	b.n	8002798 <main+0x4b8>
 8002ed2:	bf00      	nop
 8002ed4:	20000208 	.word	0x20000208
 8002ed8:	20000410 	.word	0x20000410
 8002edc:	200013d4 	.word	0x200013d4
 8002ee0:	20000578 	.word	0x20000578
 8002ee4:	437a0000 	.word	0x437a0000
 8002ee8:	43fa0000 	.word	0x43fa0000
 8002eec:	2000040c 	.word	0x2000040c
 8002ef0:	20000404 	.word	0x20000404
 8002ef4:	20000408 	.word	0x20000408

08002ef8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b094      	sub	sp, #80	@ 0x50
 8002efc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002efe:	f107 0318 	add.w	r3, r7, #24
 8002f02:	2238      	movs	r2, #56	@ 0x38
 8002f04:	2100      	movs	r1, #0
 8002f06:	4618      	mov	r0, r3
 8002f08:	f00a f9a6 	bl	800d258 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f0c:	1d3b      	adds	r3, r7, #4
 8002f0e:	2200      	movs	r2, #0
 8002f10:	601a      	str	r2, [r3, #0]
 8002f12:	605a      	str	r2, [r3, #4]
 8002f14:	609a      	str	r2, [r3, #8]
 8002f16:	60da      	str	r2, [r3, #12]
 8002f18:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002f1a:	2000      	movs	r0, #0
 8002f1c:	f003 fa18 	bl	8006350 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002f20:	2302      	movs	r3, #2
 8002f22:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f24:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f28:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f2a:	2340      	movs	r3, #64	@ 0x40
 8002f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f2e:	2302      	movs	r3, #2
 8002f30:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002f32:	2302      	movs	r3, #2
 8002f34:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002f36:	2304      	movs	r3, #4
 8002f38:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8002f3a:	2355      	movs	r3, #85	@ 0x55
 8002f3c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f3e:	2302      	movs	r3, #2
 8002f40:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002f42:	2302      	movs	r3, #2
 8002f44:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002f46:	2302      	movs	r3, #2
 8002f48:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f4a:	f107 0318 	add.w	r3, r7, #24
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f003 fab2 	bl	80064b8 <HAL_RCC_OscConfig>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002f5a:	f000 f9b1 	bl	80032c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f5e:	230f      	movs	r3, #15
 8002f60:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f62:	2303      	movs	r3, #3
 8002f64:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f66:	2300      	movs	r3, #0
 8002f68:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002f72:	1d3b      	adds	r3, r7, #4
 8002f74:	2104      	movs	r1, #4
 8002f76:	4618      	mov	r0, r3
 8002f78:	f003 fdb0 	bl	8006adc <HAL_RCC_ClockConfig>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002f82:	f000 f99d 	bl	80032c0 <Error_Handler>
  }
}
 8002f86:	bf00      	nop
 8002f88:	3750      	adds	r7, #80	@ 0x50
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
	...

08002f90 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	4603      	mov	r3, r0
 8002f98:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_9) {
 8002f9a:	88fb      	ldrh	r3, [r7, #6]
 8002f9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fa0:	d103      	bne.n	8002faa <HAL_GPIO_EXTI_Callback+0x1a>
		State = 9;
 8002fa2:	4b1c      	ldr	r3, [pc, #112]	@ (8003014 <HAL_GPIO_EXTI_Callback+0x84>)
 8002fa4:	2209      	movs	r2, #9
 8002fa6:	601a      	str	r2, [r3, #0]
	} else if (GPIO_Pin == GPIO_PIN_14) {
		State = 14;
	} else if (GPIO_Pin == GPIO_PIN_15) {
		State = 15;
	}
}
 8002fa8:	e02e      	b.n	8003008 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_10) {
 8002faa:	88fb      	ldrh	r3, [r7, #6]
 8002fac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fb0:	d103      	bne.n	8002fba <HAL_GPIO_EXTI_Callback+0x2a>
		State = 10;
 8002fb2:	4b18      	ldr	r3, [pc, #96]	@ (8003014 <HAL_GPIO_EXTI_Callback+0x84>)
 8002fb4:	220a      	movs	r2, #10
 8002fb6:	601a      	str	r2, [r3, #0]
}
 8002fb8:	e026      	b.n	8003008 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_11) {
 8002fba:	88fb      	ldrh	r3, [r7, #6]
 8002fbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002fc0:	d103      	bne.n	8002fca <HAL_GPIO_EXTI_Callback+0x3a>
		State = 11;
 8002fc2:	4b14      	ldr	r3, [pc, #80]	@ (8003014 <HAL_GPIO_EXTI_Callback+0x84>)
 8002fc4:	220b      	movs	r2, #11
 8002fc6:	601a      	str	r2, [r3, #0]
}
 8002fc8:	e01e      	b.n	8003008 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_12) {
 8002fca:	88fb      	ldrh	r3, [r7, #6]
 8002fcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fd0:	d103      	bne.n	8002fda <HAL_GPIO_EXTI_Callback+0x4a>
		State = 12;
 8002fd2:	4b10      	ldr	r3, [pc, #64]	@ (8003014 <HAL_GPIO_EXTI_Callback+0x84>)
 8002fd4:	220c      	movs	r2, #12
 8002fd6:	601a      	str	r2, [r3, #0]
}
 8002fd8:	e016      	b.n	8003008 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_13) {
 8002fda:	88fb      	ldrh	r3, [r7, #6]
 8002fdc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fe0:	d103      	bne.n	8002fea <HAL_GPIO_EXTI_Callback+0x5a>
		State = 13;
 8002fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8003014 <HAL_GPIO_EXTI_Callback+0x84>)
 8002fe4:	220d      	movs	r2, #13
 8002fe6:	601a      	str	r2, [r3, #0]
}
 8002fe8:	e00e      	b.n	8003008 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_14) {
 8002fea:	88fb      	ldrh	r3, [r7, #6]
 8002fec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ff0:	d103      	bne.n	8002ffa <HAL_GPIO_EXTI_Callback+0x6a>
		State = 14;
 8002ff2:	4b08      	ldr	r3, [pc, #32]	@ (8003014 <HAL_GPIO_EXTI_Callback+0x84>)
 8002ff4:	220e      	movs	r2, #14
 8002ff6:	601a      	str	r2, [r3, #0]
}
 8002ff8:	e006      	b.n	8003008 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_15) {
 8002ffa:	88fb      	ldrh	r3, [r7, #6]
 8002ffc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003000:	d102      	bne.n	8003008 <HAL_GPIO_EXTI_Callback+0x78>
		State = 15;
 8003002:	4b04      	ldr	r3, [pc, #16]	@ (8003014 <HAL_GPIO_EXTI_Callback+0x84>)
 8003004:	220f      	movs	r2, #15
 8003006:	601a      	str	r2, [r3, #0]
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr
 8003014:	20000594 	.word	0x20000594

08003018 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a04      	ldr	r2, [pc, #16]	@ (8003034 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d101      	bne.n	800302c <HAL_TIM_PeriodElapsedCallback+0x14>
		PS2_ReadData();
 8003028:	f7fd fdfc 	bl	8000c24 <PS2_ReadData>
	}
}
 800302c:	bf00      	nop
 800302e:	3708      	adds	r7, #8
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	2000152c 	.word	0x2000152c

08003038 <Prismatic_position_control>:

float Prismatic_position_control(float delta_posi) {
 8003038:	b480      	push	{r7}
 800303a:	b087      	sub	sp, #28
 800303c:	af00      	add	r7, sp, #0
 800303e:	ed87 0a01 	vstr	s0, [r7, #4]
	int anti_windup;
	error_posi_pris[0] = delta_posi;
 8003042:	4a36      	ldr	r2, [pc, #216]	@ (800311c <Prismatic_position_control+0xe4>)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6013      	str	r3, [r2, #0]
//	Pris_posi_PID.Kp = 1;
//	Pris_posi_PID.Kd = 1;

	if (error_posi_pris[0] < 0 && error_posi_pris[1] > 0) {
 8003048:	4b34      	ldr	r3, [pc, #208]	@ (800311c <Prismatic_position_control+0xe4>)
 800304a:	edd3 7a00 	vldr	s15, [r3]
 800304e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003056:	d50a      	bpl.n	800306e <Prismatic_position_control+0x36>
 8003058:	4b30      	ldr	r3, [pc, #192]	@ (800311c <Prismatic_position_control+0xe4>)
 800305a:	edd3 7a01 	vldr	s15, [r3, #4]
 800305e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003066:	dd02      	ble.n	800306e <Prismatic_position_control+0x36>
		anti_windup = 0;
 8003068:	2300      	movs	r3, #0
 800306a:	617b      	str	r3, [r7, #20]
 800306c:	e014      	b.n	8003098 <Prismatic_position_control+0x60>
	} else if (error_posi_pris[0] > 0 && error_posi_pris[1] < 0) {
 800306e:	4b2b      	ldr	r3, [pc, #172]	@ (800311c <Prismatic_position_control+0xe4>)
 8003070:	edd3 7a00 	vldr	s15, [r3]
 8003074:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800307c:	dd0a      	ble.n	8003094 <Prismatic_position_control+0x5c>
 800307e:	4b27      	ldr	r3, [pc, #156]	@ (800311c <Prismatic_position_control+0xe4>)
 8003080:	edd3 7a01 	vldr	s15, [r3, #4]
 8003084:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800308c:	d502      	bpl.n	8003094 <Prismatic_position_control+0x5c>
		anti_windup = 0;
 800308e:	2300      	movs	r3, #0
 8003090:	617b      	str	r3, [r7, #20]
 8003092:	e001      	b.n	8003098 <Prismatic_position_control+0x60>
	} else {
		anti_windup = 1;
 8003094:	2301      	movs	r3, #1
 8003096:	617b      	str	r3, [r7, #20]
 8003098:	4b21      	ldr	r3, [pc, #132]	@ (8003120 <Prismatic_position_control+0xe8>)
 800309a:	613b      	str	r3, [r7, #16]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	60fb      	str	r3, [r7, #12]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	ed93 7a00 	vldr	s14, [r3]
 80030a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80030aa:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	edd3 6a01 	vldr	s13, [r3, #4]
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	edd3 7a03 	vldr	s15, [r3, #12]
 80030ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80030be:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	edd3 6a02 	vldr	s13, [r3, #8]
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	edd3 7a04 	vldr	s15, [r3, #16]
 80030ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80030dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030e0:	edc7 7a02 	vstr	s15, [r7, #8]

    /* Update state */
    S->state[1] = S->state[0];
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	68da      	ldr	r2, [r3, #12]
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	68ba      	ldr	r2, [r7, #8]
 80030f6:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 80030f8:	68bb      	ldr	r3, [r7, #8]
//		Pris_posi_PID.Ki = 0;
//	} else {
//		Pris_posi_PID.Ki = 1;
//	}

	V_pris_posi_PID = arm_pid_f32(&Pris_posi_PID, delta_posi);
 80030fa:	4a0a      	ldr	r2, [pc, #40]	@ (8003124 <Prismatic_position_control+0xec>)
 80030fc:	6013      	str	r3, [r2, #0]

//	if (V_pris_posi_PID > 24) {
//		V_pris_posi_PID = 24;
//	}

	error_posi_pris[1] = error_posi_pris[0];
 80030fe:	4b07      	ldr	r3, [pc, #28]	@ (800311c <Prismatic_position_control+0xe4>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a06      	ldr	r2, [pc, #24]	@ (800311c <Prismatic_position_control+0xe4>)
 8003104:	6053      	str	r3, [r2, #4]
	return V_pris_posi_PID;
 8003106:	4b07      	ldr	r3, [pc, #28]	@ (8003124 <Prismatic_position_control+0xec>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	ee07 3a90 	vmov	s15, r3
}
 800310e:	eeb0 0a67 	vmov.f32	s0, s15
 8003112:	371c      	adds	r7, #28
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr
 800311c:	20000c40 	.word	0x20000c40
 8003120:	20000c0c 	.word	0x20000c0c
 8003124:	20000c38 	.word	0x20000c38

08003128 <Prismatic_velocity_control>:

float Prismatic_velocity_control(float delta_velo) {
 8003128:	b480      	push	{r7}
 800312a:	b087      	sub	sp, #28
 800312c:	af00      	add	r7, sp, #0
 800312e:	ed87 0a01 	vstr	s0, [r7, #4]
	int anti_windup;
	error_velo_pris[0] =  delta_velo;
 8003132:	4a4e      	ldr	r2, [pc, #312]	@ (800326c <Prismatic_velocity_control+0x144>)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6013      	str	r3, [r2, #0]
//	Pris_velo_PID.Kp = 0.01;

	if (error_velo_pris[0] < 0 && error_velo_pris[1] > 0) {
 8003138:	4b4c      	ldr	r3, [pc, #304]	@ (800326c <Prismatic_velocity_control+0x144>)
 800313a:	edd3 7a00 	vldr	s15, [r3]
 800313e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003146:	d50a      	bpl.n	800315e <Prismatic_velocity_control+0x36>
 8003148:	4b48      	ldr	r3, [pc, #288]	@ (800326c <Prismatic_velocity_control+0x144>)
 800314a:	edd3 7a01 	vldr	s15, [r3, #4]
 800314e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003156:	dd02      	ble.n	800315e <Prismatic_velocity_control+0x36>
		anti_windup = 0;
 8003158:	2300      	movs	r3, #0
 800315a:	617b      	str	r3, [r7, #20]
 800315c:	e014      	b.n	8003188 <Prismatic_velocity_control+0x60>
	} else if (error_velo_pris[0] > 0 && error_velo_pris[1] < 0) {
 800315e:	4b43      	ldr	r3, [pc, #268]	@ (800326c <Prismatic_velocity_control+0x144>)
 8003160:	edd3 7a00 	vldr	s15, [r3]
 8003164:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800316c:	dd0a      	ble.n	8003184 <Prismatic_velocity_control+0x5c>
 800316e:	4b3f      	ldr	r3, [pc, #252]	@ (800326c <Prismatic_velocity_control+0x144>)
 8003170:	edd3 7a01 	vldr	s15, [r3, #4]
 8003174:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800317c:	d502      	bpl.n	8003184 <Prismatic_velocity_control+0x5c>
		anti_windup = 0;
 800317e:	2300      	movs	r3, #0
 8003180:	617b      	str	r3, [r7, #20]
 8003182:	e001      	b.n	8003188 <Prismatic_velocity_control+0x60>
	} else {
		anti_windup = 1;
 8003184:	2301      	movs	r3, #1
 8003186:	617b      	str	r3, [r7, #20]
	}

	if (V_pris_velo_PID >= 24 && anti_windup == 0) {
 8003188:	4b39      	ldr	r3, [pc, #228]	@ (8003270 <Prismatic_velocity_control+0x148>)
 800318a:	edd3 7a00 	vldr	s15, [r3]
 800318e:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 8003192:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800319a:	db07      	blt.n	80031ac <Prismatic_velocity_control+0x84>
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d104      	bne.n	80031ac <Prismatic_velocity_control+0x84>
		Pris_velo_PID.Ki = 0;
 80031a2:	4b34      	ldr	r3, [pc, #208]	@ (8003274 <Prismatic_velocity_control+0x14c>)
 80031a4:	f04f 0200 	mov.w	r2, #0
 80031a8:	61da      	str	r2, [r3, #28]
 80031aa:	e002      	b.n	80031b2 <Prismatic_velocity_control+0x8a>
	} else {
		Pris_velo_PID.Ki = 0.001;
 80031ac:	4b31      	ldr	r3, [pc, #196]	@ (8003274 <Prismatic_velocity_control+0x14c>)
 80031ae:	4a32      	ldr	r2, [pc, #200]	@ (8003278 <Prismatic_velocity_control+0x150>)
 80031b0:	61da      	str	r2, [r3, #28]
 80031b2:	4b30      	ldr	r3, [pc, #192]	@ (8003274 <Prismatic_velocity_control+0x14c>)
 80031b4:	613b      	str	r3, [r7, #16]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	60fb      	str	r3, [r7, #12]
    out = (S->A0 * in) +
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	ed93 7a00 	vldr	s14, [r3]
 80031c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80031c4:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	edd3 6a01 	vldr	s13, [r3, #4]
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	edd3 7a03 	vldr	s15, [r3, #12]
 80031d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80031d8:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	edd3 6a02 	vldr	s13, [r3, #8]
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	edd3 7a04 	vldr	s15, [r3, #16]
 80031e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80031f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031fa:	edc7 7a02 	vstr	s15, [r7, #8]
    S->state[1] = S->state[0];
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	68da      	ldr	r2, [r3, #12]
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	68fa      	ldr	r2, [r7, #12]
 800320a:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	68ba      	ldr	r2, [r7, #8]
 8003210:	615a      	str	r2, [r3, #20]
    return (out);
 8003212:	68bb      	ldr	r3, [r7, #8]
	}

	V_pris_velo_PID = arm_pid_f32(&Pris_velo_PID, delta_velo);
 8003214:	4a16      	ldr	r2, [pc, #88]	@ (8003270 <Prismatic_velocity_control+0x148>)
 8003216:	6013      	str	r3, [r2, #0]

	if (V_pris_velo_PID > 24) {
 8003218:	4b15      	ldr	r3, [pc, #84]	@ (8003270 <Prismatic_velocity_control+0x148>)
 800321a:	edd3 7a00 	vldr	s15, [r3]
 800321e:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 8003222:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800322a:	dd03      	ble.n	8003234 <Prismatic_velocity_control+0x10c>
		V_pris_velo_PID = 24;
 800322c:	4b10      	ldr	r3, [pc, #64]	@ (8003270 <Prismatic_velocity_control+0x148>)
 800322e:	4a13      	ldr	r2, [pc, #76]	@ (800327c <Prismatic_velocity_control+0x154>)
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	e00c      	b.n	800324e <Prismatic_velocity_control+0x126>
	} else if (V_pris_velo_PID < -24) {
 8003234:	4b0e      	ldr	r3, [pc, #56]	@ (8003270 <Prismatic_velocity_control+0x148>)
 8003236:	edd3 7a00 	vldr	s15, [r3]
 800323a:	eebb 7a08 	vmov.f32	s14, #184	@ 0xc1c00000 -24.0
 800323e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003246:	d502      	bpl.n	800324e <Prismatic_velocity_control+0x126>
		V_pris_velo_PID = -24;
 8003248:	4b09      	ldr	r3, [pc, #36]	@ (8003270 <Prismatic_velocity_control+0x148>)
 800324a:	4a0d      	ldr	r2, [pc, #52]	@ (8003280 <Prismatic_velocity_control+0x158>)
 800324c:	601a      	str	r2, [r3, #0]
	}

	error_velo_pris[1] = error_velo_pris[0];
 800324e:	4b07      	ldr	r3, [pc, #28]	@ (800326c <Prismatic_velocity_control+0x144>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a06      	ldr	r2, [pc, #24]	@ (800326c <Prismatic_velocity_control+0x144>)
 8003254:	6053      	str	r3, [r2, #4]
	return V_pris_velo_PID;
 8003256:	4b06      	ldr	r3, [pc, #24]	@ (8003270 <Prismatic_velocity_control+0x148>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	ee07 3a90 	vmov	s15, r3
}
 800325e:	eeb0 0a67 	vmov.f32	s0, s15
 8003262:	371c      	adds	r7, #28
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	20000c80 	.word	0x20000c80
 8003270:	20000c78 	.word	0x20000c78
 8003274:	20000c4c 	.word	0x20000c4c
 8003278:	3a83126f 	.word	0x3a83126f
 800327c:	41c00000 	.word	0x41c00000
 8003280:	c1c00000 	.word	0xc1c00000

08003284 <voltage_to_pwm>:
	V_rev_velo_PID = arm_pid_f32(&Rev_velo_PID, delta_velo);
	error_velo_rev[1] = error_velo_rev[0];
	return V_rev_velo_PID;
}

float voltage_to_pwm(float voltage) {
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	ed87 0a01 	vstr	s0, [r7, #4]
	float pwm = (voltage * 65535) / 24;
 800328e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003292:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80032bc <voltage_to_pwm+0x38>
 8003296:	ee27 7a87 	vmul.f32	s14, s15, s14
 800329a:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 800329e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80032a2:	edc7 7a03 	vstr	s15, [r7, #12]
	return pwm;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	ee07 3a90 	vmov	s15, r3
}
 80032ac:	eeb0 0a67 	vmov.f32	s0, s15
 80032b0:	3714      	adds	r7, #20
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	477fff00 	.word	0x477fff00

080032c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80032c4:	b672      	cpsid	i
}
 80032c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80032c8:	bf00      	nop
 80032ca:	e7fd      	b.n	80032c8 <Error_Handler+0x8>

080032cc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80032d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003340 <MX_SPI1_Init+0x74>)
 80032d2:	4a1c      	ldr	r2, [pc, #112]	@ (8003344 <MX_SPI1_Init+0x78>)
 80032d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80032d6:	4b1a      	ldr	r3, [pc, #104]	@ (8003340 <MX_SPI1_Init+0x74>)
 80032d8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80032dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80032de:	4b18      	ldr	r3, [pc, #96]	@ (8003340 <MX_SPI1_Init+0x74>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80032e4:	4b16      	ldr	r3, [pc, #88]	@ (8003340 <MX_SPI1_Init+0x74>)
 80032e6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80032ea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80032ec:	4b14      	ldr	r3, [pc, #80]	@ (8003340 <MX_SPI1_Init+0x74>)
 80032ee:	2202      	movs	r2, #2
 80032f0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80032f2:	4b13      	ldr	r3, [pc, #76]	@ (8003340 <MX_SPI1_Init+0x74>)
 80032f4:	2201      	movs	r2, #1
 80032f6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80032f8:	4b11      	ldr	r3, [pc, #68]	@ (8003340 <MX_SPI1_Init+0x74>)
 80032fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032fe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003300:	4b0f      	ldr	r3, [pc, #60]	@ (8003340 <MX_SPI1_Init+0x74>)
 8003302:	2238      	movs	r2, #56	@ 0x38
 8003304:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8003306:	4b0e      	ldr	r3, [pc, #56]	@ (8003340 <MX_SPI1_Init+0x74>)
 8003308:	2280      	movs	r2, #128	@ 0x80
 800330a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800330c:	4b0c      	ldr	r3, [pc, #48]	@ (8003340 <MX_SPI1_Init+0x74>)
 800330e:	2200      	movs	r2, #0
 8003310:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003312:	4b0b      	ldr	r3, [pc, #44]	@ (8003340 <MX_SPI1_Init+0x74>)
 8003314:	2200      	movs	r2, #0
 8003316:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003318:	4b09      	ldr	r3, [pc, #36]	@ (8003340 <MX_SPI1_Init+0x74>)
 800331a:	2207      	movs	r2, #7
 800331c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800331e:	4b08      	ldr	r3, [pc, #32]	@ (8003340 <MX_SPI1_Init+0x74>)
 8003320:	2200      	movs	r2, #0
 8003322:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003324:	4b06      	ldr	r3, [pc, #24]	@ (8003340 <MX_SPI1_Init+0x74>)
 8003326:	2200      	movs	r2, #0
 8003328:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800332a:	4805      	ldr	r0, [pc, #20]	@ (8003340 <MX_SPI1_Init+0x74>)
 800332c:	f004 f840 	bl	80073b0 <HAL_SPI_Init>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003336:	f7ff ffc3 	bl	80032c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800333a:	bf00      	nop
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	200013fc 	.word	0x200013fc
 8003344:	40013000 	.word	0x40013000

08003348 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b08a      	sub	sp, #40	@ 0x28
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003350:	f107 0314 	add.w	r3, r7, #20
 8003354:	2200      	movs	r2, #0
 8003356:	601a      	str	r2, [r3, #0]
 8003358:	605a      	str	r2, [r3, #4]
 800335a:	609a      	str	r2, [r3, #8]
 800335c:	60da      	str	r2, [r3, #12]
 800335e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a25      	ldr	r2, [pc, #148]	@ (80033fc <HAL_SPI_MspInit+0xb4>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d144      	bne.n	80033f4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800336a:	4b25      	ldr	r3, [pc, #148]	@ (8003400 <HAL_SPI_MspInit+0xb8>)
 800336c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800336e:	4a24      	ldr	r2, [pc, #144]	@ (8003400 <HAL_SPI_MspInit+0xb8>)
 8003370:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003374:	6613      	str	r3, [r2, #96]	@ 0x60
 8003376:	4b22      	ldr	r3, [pc, #136]	@ (8003400 <HAL_SPI_MspInit+0xb8>)
 8003378:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800337a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800337e:	613b      	str	r3, [r7, #16]
 8003380:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003382:	4b1f      	ldr	r3, [pc, #124]	@ (8003400 <HAL_SPI_MspInit+0xb8>)
 8003384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003386:	4a1e      	ldr	r2, [pc, #120]	@ (8003400 <HAL_SPI_MspInit+0xb8>)
 8003388:	f043 0301 	orr.w	r3, r3, #1
 800338c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800338e:	4b1c      	ldr	r3, [pc, #112]	@ (8003400 <HAL_SPI_MspInit+0xb8>)
 8003390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	60fb      	str	r3, [r7, #12]
 8003398:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800339a:	4b19      	ldr	r3, [pc, #100]	@ (8003400 <HAL_SPI_MspInit+0xb8>)
 800339c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800339e:	4a18      	ldr	r2, [pc, #96]	@ (8003400 <HAL_SPI_MspInit+0xb8>)
 80033a0:	f043 0302 	orr.w	r3, r3, #2
 80033a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033a6:	4b16      	ldr	r3, [pc, #88]	@ (8003400 <HAL_SPI_MspInit+0xb8>)
 80033a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	60bb      	str	r3, [r7, #8]
 80033b0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80033b2:	2320      	movs	r3, #32
 80033b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b6:	2302      	movs	r3, #2
 80033b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ba:	2300      	movs	r3, #0
 80033bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033be:	2300      	movs	r3, #0
 80033c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80033c2:	2305      	movs	r3, #5
 80033c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033c6:	f107 0314 	add.w	r3, r7, #20
 80033ca:	4619      	mov	r1, r3
 80033cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80033d0:	f002 fe0c 	bl	8005fec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80033d4:	2330      	movs	r3, #48	@ 0x30
 80033d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d8:	2302      	movs	r3, #2
 80033da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033dc:	2300      	movs	r3, #0
 80033de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033e0:	2300      	movs	r3, #0
 80033e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80033e4:	2305      	movs	r3, #5
 80033e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033e8:	f107 0314 	add.w	r3, r7, #20
 80033ec:	4619      	mov	r1, r3
 80033ee:	4805      	ldr	r0, [pc, #20]	@ (8003404 <HAL_SPI_MspInit+0xbc>)
 80033f0:	f002 fdfc 	bl	8005fec <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80033f4:	bf00      	nop
 80033f6:	3728      	adds	r7, #40	@ 0x28
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	40013000 	.word	0x40013000
 8003400:	40021000 	.word	0x40021000
 8003404:	48000400 	.word	0x48000400

08003408 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800340e:	4b0f      	ldr	r3, [pc, #60]	@ (800344c <HAL_MspInit+0x44>)
 8003410:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003412:	4a0e      	ldr	r2, [pc, #56]	@ (800344c <HAL_MspInit+0x44>)
 8003414:	f043 0301 	orr.w	r3, r3, #1
 8003418:	6613      	str	r3, [r2, #96]	@ 0x60
 800341a:	4b0c      	ldr	r3, [pc, #48]	@ (800344c <HAL_MspInit+0x44>)
 800341c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	607b      	str	r3, [r7, #4]
 8003424:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003426:	4b09      	ldr	r3, [pc, #36]	@ (800344c <HAL_MspInit+0x44>)
 8003428:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800342a:	4a08      	ldr	r2, [pc, #32]	@ (800344c <HAL_MspInit+0x44>)
 800342c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003430:	6593      	str	r3, [r2, #88]	@ 0x58
 8003432:	4b06      	ldr	r3, [pc, #24]	@ (800344c <HAL_MspInit+0x44>)
 8003434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003436:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800343a:	603b      	str	r3, [r7, #0]
 800343c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800343e:	f003 f82b 	bl	8006498 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003442:	bf00      	nop
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	40021000 	.word	0x40021000

08003450 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003454:	bf00      	nop
 8003456:	e7fd      	b.n	8003454 <NMI_Handler+0x4>

08003458 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800345c:	bf00      	nop
 800345e:	e7fd      	b.n	800345c <HardFault_Handler+0x4>

08003460 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003464:	bf00      	nop
 8003466:	e7fd      	b.n	8003464 <MemManage_Handler+0x4>

08003468 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800346c:	bf00      	nop
 800346e:	e7fd      	b.n	800346c <BusFault_Handler+0x4>

08003470 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003474:	bf00      	nop
 8003476:	e7fd      	b.n	8003474 <UsageFault_Handler+0x4>

08003478 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003478:	b480      	push	{r7}
 800347a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800347c:	bf00      	nop
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr

08003486 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003486:	b480      	push	{r7}
 8003488:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800348a:	bf00      	nop
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003498:	bf00      	nop
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr

080034a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034a6:	f000 fe77 	bl	8004198 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034aa:	bf00      	nop
 80034ac:	bd80      	pop	{r7, pc}
	...

080034b0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80034b4:	4802      	ldr	r0, [pc, #8]	@ (80034c0 <DMA1_Channel1_IRQHandler+0x10>)
 80034b6:	f002 fc3e 	bl	8005d36 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80034ba:	bf00      	nop
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	20001ac0 	.word	0x20001ac0

080034c4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_pen_1_Pin);
 80034c8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80034cc:	f002 ff28 	bl	8006320 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80034d0:	bf00      	nop
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80034d8:	4802      	ldr	r0, [pc, #8]	@ (80034e4 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80034da:	f005 f909 	bl	80086f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80034de:	bf00      	nop
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	20001460 	.word	0x20001460

080034e8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80034ec:	4803      	ldr	r0, [pc, #12]	@ (80034fc <TIM1_UP_TIM16_IRQHandler+0x14>)
 80034ee:	f005 f8ff 	bl	80086f0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80034f2:	4803      	ldr	r0, [pc, #12]	@ (8003500 <TIM1_UP_TIM16_IRQHandler+0x18>)
 80034f4:	f005 f8fc 	bl	80086f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80034f8:	bf00      	nop
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	20001460 	.word	0x20001460
 8003500:	2000185c 	.word	0x2000185c

08003504 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003508:	4802      	ldr	r0, [pc, #8]	@ (8003514 <TIM2_IRQHandler+0x10>)
 800350a:	f005 f8f1 	bl	80086f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800350e:	bf00      	nop
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	2000152c 	.word	0x2000152c

08003518 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800351c:	4802      	ldr	r0, [pc, #8]	@ (8003528 <USART2_IRQHandler+0x10>)
 800351e:	f006 ffeb 	bl	800a4f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003522:	bf00      	nop
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	200019f4 	.word	0x200019f4

0800352c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_pen_2_Pin);
 8003530:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003534:	f002 fef4 	bl	8006320 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Emergency_Pin);
 8003538:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800353c:	f002 fef0 	bl	8006320 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Proximity_sensor_Pin);
 8003540:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003544:	f002 feec 	bl	8006320 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_Prismatic1_Pin);
 8003548:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800354c:	f002 fee8 	bl	8006320 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_Prismatic2_Pin);
 8003550:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003554:	f002 fee4 	bl	8006320 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003558:	bf00      	nop
 800355a:	bd80      	pop	{r7, pc}

0800355c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003560:	4b06      	ldr	r3, [pc, #24]	@ (800357c <SystemInit+0x20>)
 8003562:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003566:	4a05      	ldr	r2, [pc, #20]	@ (800357c <SystemInit+0x20>)
 8003568:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800356c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003570:	bf00      	nop
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	e000ed00 	.word	0xe000ed00

08003580 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim20;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b088      	sub	sp, #32
 8003584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003586:	f107 0310 	add.w	r3, r7, #16
 800358a:	2200      	movs	r2, #0
 800358c:	601a      	str	r2, [r3, #0]
 800358e:	605a      	str	r2, [r3, #4]
 8003590:	609a      	str	r2, [r3, #8]
 8003592:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003594:	1d3b      	adds	r3, r7, #4
 8003596:	2200      	movs	r2, #0
 8003598:	601a      	str	r2, [r3, #0]
 800359a:	605a      	str	r2, [r3, #4]
 800359c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800359e:	4b20      	ldr	r3, [pc, #128]	@ (8003620 <MX_TIM1_Init+0xa0>)
 80035a0:	4a20      	ldr	r2, [pc, #128]	@ (8003624 <MX_TIM1_Init+0xa4>)
 80035a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80035a4:	4b1e      	ldr	r3, [pc, #120]	@ (8003620 <MX_TIM1_Init+0xa0>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035aa:	4b1d      	ldr	r3, [pc, #116]	@ (8003620 <MX_TIM1_Init+0xa0>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000;
 80035b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003620 <MX_TIM1_Init+0xa0>)
 80035b2:	f64e 2260 	movw	r2, #60000	@ 0xea60
 80035b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035b8:	4b19      	ldr	r3, [pc, #100]	@ (8003620 <MX_TIM1_Init+0xa0>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80035be:	4b18      	ldr	r3, [pc, #96]	@ (8003620 <MX_TIM1_Init+0xa0>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035c4:	4b16      	ldr	r3, [pc, #88]	@ (8003620 <MX_TIM1_Init+0xa0>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80035ca:	4815      	ldr	r0, [pc, #84]	@ (8003620 <MX_TIM1_Init+0xa0>)
 80035cc:	f004 fb1e 	bl	8007c0c <HAL_TIM_Base_Init>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80035d6:	f7ff fe73 	bl	80032c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80035de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80035e0:	f107 0310 	add.w	r3, r7, #16
 80035e4:	4619      	mov	r1, r3
 80035e6:	480e      	ldr	r0, [pc, #56]	@ (8003620 <MX_TIM1_Init+0xa0>)
 80035e8:	f005 fb8a 	bl	8008d00 <HAL_TIM_ConfigClockSource>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80035f2:	f7ff fe65 	bl	80032c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035f6:	2300      	movs	r3, #0
 80035f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80035fa:	2300      	movs	r3, #0
 80035fc:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035fe:	2300      	movs	r3, #0
 8003600:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003602:	1d3b      	adds	r3, r7, #4
 8003604:	4619      	mov	r1, r3
 8003606:	4806      	ldr	r0, [pc, #24]	@ (8003620 <MX_TIM1_Init+0xa0>)
 8003608:	f006 fb60 	bl	8009ccc <HAL_TIMEx_MasterConfigSynchronization>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d001      	beq.n	8003616 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003612:	f7ff fe55 	bl	80032c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003616:	bf00      	nop
 8003618:	3720      	adds	r7, #32
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	20001460 	.word	0x20001460
 8003624:	40012c00 	.word	0x40012c00

08003628 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b088      	sub	sp, #32
 800362c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800362e:	f107 0310 	add.w	r3, r7, #16
 8003632:	2200      	movs	r2, #0
 8003634:	601a      	str	r2, [r3, #0]
 8003636:	605a      	str	r2, [r3, #4]
 8003638:	609a      	str	r2, [r3, #8]
 800363a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800363c:	1d3b      	adds	r3, r7, #4
 800363e:	2200      	movs	r2, #0
 8003640:	601a      	str	r2, [r3, #0]
 8003642:	605a      	str	r2, [r3, #4]
 8003644:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003646:	4b1e      	ldr	r3, [pc, #120]	@ (80036c0 <MX_TIM2_Init+0x98>)
 8003648:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800364c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 800364e:	4b1c      	ldr	r3, [pc, #112]	@ (80036c0 <MX_TIM2_Init+0x98>)
 8003650:	22a9      	movs	r2, #169	@ 0xa9
 8003652:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003654:	4b1a      	ldr	r3, [pc, #104]	@ (80036c0 <MX_TIM2_Init+0x98>)
 8003656:	2200      	movs	r2, #0
 8003658:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800365a:	4b19      	ldr	r3, [pc, #100]	@ (80036c0 <MX_TIM2_Init+0x98>)
 800365c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003660:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003662:	4b17      	ldr	r3, [pc, #92]	@ (80036c0 <MX_TIM2_Init+0x98>)
 8003664:	2200      	movs	r2, #0
 8003666:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003668:	4b15      	ldr	r3, [pc, #84]	@ (80036c0 <MX_TIM2_Init+0x98>)
 800366a:	2200      	movs	r2, #0
 800366c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800366e:	4814      	ldr	r0, [pc, #80]	@ (80036c0 <MX_TIM2_Init+0x98>)
 8003670:	f004 facc 	bl	8007c0c <HAL_TIM_Base_Init>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d001      	beq.n	800367e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800367a:	f7ff fe21 	bl	80032c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800367e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003682:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003684:	f107 0310 	add.w	r3, r7, #16
 8003688:	4619      	mov	r1, r3
 800368a:	480d      	ldr	r0, [pc, #52]	@ (80036c0 <MX_TIM2_Init+0x98>)
 800368c:	f005 fb38 	bl	8008d00 <HAL_TIM_ConfigClockSource>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d001      	beq.n	800369a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003696:	f7ff fe13 	bl	80032c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800369a:	2300      	movs	r3, #0
 800369c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800369e:	2300      	movs	r3, #0
 80036a0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80036a2:	1d3b      	adds	r3, r7, #4
 80036a4:	4619      	mov	r1, r3
 80036a6:	4806      	ldr	r0, [pc, #24]	@ (80036c0 <MX_TIM2_Init+0x98>)
 80036a8:	f006 fb10 	bl	8009ccc <HAL_TIMEx_MasterConfigSynchronization>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80036b2:	f7ff fe05 	bl	80032c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80036b6:	bf00      	nop
 80036b8:	3720      	adds	r7, #32
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	2000152c 	.word	0x2000152c

080036c4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b08c      	sub	sp, #48	@ 0x30
 80036c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80036ca:	f107 030c 	add.w	r3, r7, #12
 80036ce:	2224      	movs	r2, #36	@ 0x24
 80036d0:	2100      	movs	r1, #0
 80036d2:	4618      	mov	r0, r3
 80036d4:	f009 fdc0 	bl	800d258 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036d8:	463b      	mov	r3, r7
 80036da:	2200      	movs	r2, #0
 80036dc:	601a      	str	r2, [r3, #0]
 80036de:	605a      	str	r2, [r3, #4]
 80036e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80036e2:	4b21      	ldr	r3, [pc, #132]	@ (8003768 <MX_TIM3_Init+0xa4>)
 80036e4:	4a21      	ldr	r2, [pc, #132]	@ (800376c <MX_TIM3_Init+0xa8>)
 80036e6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80036e8:	4b1f      	ldr	r3, [pc, #124]	@ (8003768 <MX_TIM3_Init+0xa4>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036ee:	4b1e      	ldr	r3, [pc, #120]	@ (8003768 <MX_TIM3_Init+0xa4>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 80036f4:	4b1c      	ldr	r3, [pc, #112]	@ (8003768 <MX_TIM3_Init+0xa4>)
 80036f6:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80036fa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036fc:	4b1a      	ldr	r3, [pc, #104]	@ (8003768 <MX_TIM3_Init+0xa4>)
 80036fe:	2200      	movs	r2, #0
 8003700:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003702:	4b19      	ldr	r3, [pc, #100]	@ (8003768 <MX_TIM3_Init+0xa4>)
 8003704:	2200      	movs	r2, #0
 8003706:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003708:	2303      	movs	r3, #3
 800370a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800370c:	2300      	movs	r3, #0
 800370e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003710:	2301      	movs	r3, #1
 8003712:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003714:	2300      	movs	r3, #0
 8003716:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003718:	2300      	movs	r3, #0
 800371a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800371c:	2300      	movs	r3, #0
 800371e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003720:	2301      	movs	r3, #1
 8003722:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003724:	2300      	movs	r3, #0
 8003726:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003728:	2300      	movs	r3, #0
 800372a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800372c:	f107 030c 	add.w	r3, r7, #12
 8003730:	4619      	mov	r1, r3
 8003732:	480d      	ldr	r0, [pc, #52]	@ (8003768 <MX_TIM3_Init+0xa4>)
 8003734:	f004 fe9a 	bl	800846c <HAL_TIM_Encoder_Init>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800373e:	f7ff fdbf 	bl	80032c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003742:	2300      	movs	r3, #0
 8003744:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003746:	2300      	movs	r3, #0
 8003748:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800374a:	463b      	mov	r3, r7
 800374c:	4619      	mov	r1, r3
 800374e:	4806      	ldr	r0, [pc, #24]	@ (8003768 <MX_TIM3_Init+0xa4>)
 8003750:	f006 fabc 	bl	8009ccc <HAL_TIMEx_MasterConfigSynchronization>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800375a:	f7ff fdb1 	bl	80032c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800375e:	bf00      	nop
 8003760:	3730      	adds	r7, #48	@ 0x30
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	200015f8 	.word	0x200015f8
 800376c:	40000400 	.word	0x40000400

08003770 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b08c      	sub	sp, #48	@ 0x30
 8003774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003776:	f107 030c 	add.w	r3, r7, #12
 800377a:	2224      	movs	r2, #36	@ 0x24
 800377c:	2100      	movs	r1, #0
 800377e:	4618      	mov	r0, r3
 8003780:	f009 fd6a 	bl	800d258 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003784:	463b      	mov	r3, r7
 8003786:	2200      	movs	r2, #0
 8003788:	601a      	str	r2, [r3, #0]
 800378a:	605a      	str	r2, [r3, #4]
 800378c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800378e:	4b21      	ldr	r3, [pc, #132]	@ (8003814 <MX_TIM4_Init+0xa4>)
 8003790:	4a21      	ldr	r2, [pc, #132]	@ (8003818 <MX_TIM4_Init+0xa8>)
 8003792:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003794:	4b1f      	ldr	r3, [pc, #124]	@ (8003814 <MX_TIM4_Init+0xa4>)
 8003796:	2200      	movs	r2, #0
 8003798:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800379a:	4b1e      	ldr	r3, [pc, #120]	@ (8003814 <MX_TIM4_Init+0xa4>)
 800379c:	2200      	movs	r2, #0
 800379e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 59999;
 80037a0:	4b1c      	ldr	r3, [pc, #112]	@ (8003814 <MX_TIM4_Init+0xa4>)
 80037a2:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80037a6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037a8:	4b1a      	ldr	r3, [pc, #104]	@ (8003814 <MX_TIM4_Init+0xa4>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037ae:	4b19      	ldr	r3, [pc, #100]	@ (8003814 <MX_TIM4_Init+0xa4>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80037b4:	2303      	movs	r3, #3
 80037b6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80037b8:	2300      	movs	r3, #0
 80037ba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80037bc:	2301      	movs	r3, #1
 80037be:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80037c0:	2300      	movs	r3, #0
 80037c2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80037c4:	2300      	movs	r3, #0
 80037c6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80037c8:	2300      	movs	r3, #0
 80037ca:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80037cc:	2301      	movs	r3, #1
 80037ce:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80037d0:	2300      	movs	r3, #0
 80037d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80037d4:	2300      	movs	r3, #0
 80037d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80037d8:	f107 030c 	add.w	r3, r7, #12
 80037dc:	4619      	mov	r1, r3
 80037de:	480d      	ldr	r0, [pc, #52]	@ (8003814 <MX_TIM4_Init+0xa4>)
 80037e0:	f004 fe44 	bl	800846c <HAL_TIM_Encoder_Init>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d001      	beq.n	80037ee <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80037ea:	f7ff fd69 	bl	80032c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037ee:	2300      	movs	r3, #0
 80037f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037f2:	2300      	movs	r3, #0
 80037f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80037f6:	463b      	mov	r3, r7
 80037f8:	4619      	mov	r1, r3
 80037fa:	4806      	ldr	r0, [pc, #24]	@ (8003814 <MX_TIM4_Init+0xa4>)
 80037fc:	f006 fa66 	bl	8009ccc <HAL_TIMEx_MasterConfigSynchronization>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8003806:	f7ff fd5b 	bl	80032c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800380a:	bf00      	nop
 800380c:	3730      	adds	r7, #48	@ 0x30
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	200016c4 	.word	0x200016c4
 8003818:	40000800 	.word	0x40000800

0800381c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b09c      	sub	sp, #112	@ 0x70
 8003820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003822:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003826:	2200      	movs	r2, #0
 8003828:	601a      	str	r2, [r3, #0]
 800382a:	605a      	str	r2, [r3, #4]
 800382c:	609a      	str	r2, [r3, #8]
 800382e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003830:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003834:	2200      	movs	r2, #0
 8003836:	601a      	str	r2, [r3, #0]
 8003838:	605a      	str	r2, [r3, #4]
 800383a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800383c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003840:	2200      	movs	r2, #0
 8003842:	601a      	str	r2, [r3, #0]
 8003844:	605a      	str	r2, [r3, #4]
 8003846:	609a      	str	r2, [r3, #8]
 8003848:	60da      	str	r2, [r3, #12]
 800384a:	611a      	str	r2, [r3, #16]
 800384c:	615a      	str	r2, [r3, #20]
 800384e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003850:	1d3b      	adds	r3, r7, #4
 8003852:	2234      	movs	r2, #52	@ 0x34
 8003854:	2100      	movs	r1, #0
 8003856:	4618      	mov	r0, r3
 8003858:	f009 fcfe 	bl	800d258 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800385c:	4b45      	ldr	r3, [pc, #276]	@ (8003974 <MX_TIM8_Init+0x158>)
 800385e:	4a46      	ldr	r2, [pc, #280]	@ (8003978 <MX_TIM8_Init+0x15c>)
 8003860:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003862:	4b44      	ldr	r3, [pc, #272]	@ (8003974 <MX_TIM8_Init+0x158>)
 8003864:	2200      	movs	r2, #0
 8003866:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003868:	4b42      	ldr	r3, [pc, #264]	@ (8003974 <MX_TIM8_Init+0x158>)
 800386a:	2200      	movs	r2, #0
 800386c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800386e:	4b41      	ldr	r3, [pc, #260]	@ (8003974 <MX_TIM8_Init+0x158>)
 8003870:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003874:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003876:	4b3f      	ldr	r3, [pc, #252]	@ (8003974 <MX_TIM8_Init+0x158>)
 8003878:	2200      	movs	r2, #0
 800387a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800387c:	4b3d      	ldr	r3, [pc, #244]	@ (8003974 <MX_TIM8_Init+0x158>)
 800387e:	2200      	movs	r2, #0
 8003880:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003882:	4b3c      	ldr	r3, [pc, #240]	@ (8003974 <MX_TIM8_Init+0x158>)
 8003884:	2200      	movs	r2, #0
 8003886:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003888:	483a      	ldr	r0, [pc, #232]	@ (8003974 <MX_TIM8_Init+0x158>)
 800388a:	f004 f9bf 	bl	8007c0c <HAL_TIM_Base_Init>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d001      	beq.n	8003898 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8003894:	f7ff fd14 	bl	80032c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003898:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800389c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800389e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80038a2:	4619      	mov	r1, r3
 80038a4:	4833      	ldr	r0, [pc, #204]	@ (8003974 <MX_TIM8_Init+0x158>)
 80038a6:	f005 fa2b 	bl	8008d00 <HAL_TIM_ConfigClockSource>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80038b0:	f7ff fd06 	bl	80032c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80038b4:	482f      	ldr	r0, [pc, #188]	@ (8003974 <MX_TIM8_Init+0x158>)
 80038b6:	f004 fb63 	bl	8007f80 <HAL_TIM_PWM_Init>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d001      	beq.n	80038c4 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80038c0:	f7ff fcfe 	bl	80032c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038c4:	2300      	movs	r3, #0
 80038c6:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80038c8:	2300      	movs	r3, #0
 80038ca:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038cc:	2300      	movs	r3, #0
 80038ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80038d0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80038d4:	4619      	mov	r1, r3
 80038d6:	4827      	ldr	r0, [pc, #156]	@ (8003974 <MX_TIM8_Init+0x158>)
 80038d8:	f006 f9f8 	bl	8009ccc <HAL_TIMEx_MasterConfigSynchronization>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80038e2:	f7ff fced 	bl	80032c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80038e6:	2360      	movs	r3, #96	@ 0x60
 80038e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80038ea:	2300      	movs	r3, #0
 80038ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80038ee:	2300      	movs	r3, #0
 80038f0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80038f2:	2300      	movs	r3, #0
 80038f4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80038f6:	2300      	movs	r3, #0
 80038f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80038fa:	2300      	movs	r3, #0
 80038fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80038fe:	2300      	movs	r3, #0
 8003900:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003902:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003906:	220c      	movs	r2, #12
 8003908:	4619      	mov	r1, r3
 800390a:	481a      	ldr	r0, [pc, #104]	@ (8003974 <MX_TIM8_Init+0x158>)
 800390c:	f005 f8e4 	bl	8008ad8 <HAL_TIM_PWM_ConfigChannel>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8003916:	f7ff fcd3 	bl	80032c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800391a:	2300      	movs	r3, #0
 800391c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800391e:	2300      	movs	r3, #0
 8003920:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003922:	2300      	movs	r3, #0
 8003924:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003926:	2300      	movs	r3, #0
 8003928:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800392a:	2300      	movs	r3, #0
 800392c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800392e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003932:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003934:	2300      	movs	r3, #0
 8003936:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003938:	2300      	movs	r3, #0
 800393a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800393c:	2300      	movs	r3, #0
 800393e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003940:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003944:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003946:	2300      	movs	r3, #0
 8003948:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800394a:	2300      	movs	r3, #0
 800394c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800394e:	2300      	movs	r3, #0
 8003950:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003952:	1d3b      	adds	r3, r7, #4
 8003954:	4619      	mov	r1, r3
 8003956:	4807      	ldr	r0, [pc, #28]	@ (8003974 <MX_TIM8_Init+0x158>)
 8003958:	f006 fa4e 	bl	8009df8 <HAL_TIMEx_ConfigBreakDeadTime>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <MX_TIM8_Init+0x14a>
  {
    Error_Handler();
 8003962:	f7ff fcad 	bl	80032c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003966:	4803      	ldr	r0, [pc, #12]	@ (8003974 <MX_TIM8_Init+0x158>)
 8003968:	f000 fa44 	bl	8003df4 <HAL_TIM_MspPostInit>

}
 800396c:	bf00      	nop
 800396e:	3770      	adds	r7, #112	@ 0x70
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	20001790 	.word	0x20001790
 8003978:	40013400 	.word	0x40013400

0800397c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b094      	sub	sp, #80	@ 0x50
 8003980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003982:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003986:	2200      	movs	r2, #0
 8003988:	601a      	str	r2, [r3, #0]
 800398a:	605a      	str	r2, [r3, #4]
 800398c:	609a      	str	r2, [r3, #8]
 800398e:	60da      	str	r2, [r3, #12]
 8003990:	611a      	str	r2, [r3, #16]
 8003992:	615a      	str	r2, [r3, #20]
 8003994:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003996:	463b      	mov	r3, r7
 8003998:	2234      	movs	r2, #52	@ 0x34
 800399a:	2100      	movs	r1, #0
 800399c:	4618      	mov	r0, r3
 800399e:	f009 fc5b 	bl	800d258 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80039a2:	4b34      	ldr	r3, [pc, #208]	@ (8003a74 <MX_TIM16_Init+0xf8>)
 80039a4:	4a34      	ldr	r2, [pc, #208]	@ (8003a78 <MX_TIM16_Init+0xfc>)
 80039a6:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 80039a8:	4b32      	ldr	r3, [pc, #200]	@ (8003a74 <MX_TIM16_Init+0xf8>)
 80039aa:	22a9      	movs	r2, #169	@ 0xa9
 80039ac:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039ae:	4b31      	ldr	r3, [pc, #196]	@ (8003a74 <MX_TIM16_Init+0xf8>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2005;
 80039b4:	4b2f      	ldr	r3, [pc, #188]	@ (8003a74 <MX_TIM16_Init+0xf8>)
 80039b6:	f240 72d5 	movw	r2, #2005	@ 0x7d5
 80039ba:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039bc:	4b2d      	ldr	r3, [pc, #180]	@ (8003a74 <MX_TIM16_Init+0xf8>)
 80039be:	2200      	movs	r2, #0
 80039c0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80039c2:	4b2c      	ldr	r3, [pc, #176]	@ (8003a74 <MX_TIM16_Init+0xf8>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039c8:	4b2a      	ldr	r3, [pc, #168]	@ (8003a74 <MX_TIM16_Init+0xf8>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80039ce:	4829      	ldr	r0, [pc, #164]	@ (8003a74 <MX_TIM16_Init+0xf8>)
 80039d0:	f004 f91c 	bl	8007c0c <HAL_TIM_Base_Init>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80039da:	f7ff fc71 	bl	80032c0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 80039de:	4825      	ldr	r0, [pc, #148]	@ (8003a74 <MX_TIM16_Init+0xf8>)
 80039e0:	f004 fa60 	bl	8007ea4 <HAL_TIM_OC_Init>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 80039ea:	f7ff fc69 	bl	80032c0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 80039ee:	2108      	movs	r1, #8
 80039f0:	4820      	ldr	r0, [pc, #128]	@ (8003a74 <MX_TIM16_Init+0xf8>)
 80039f2:	f004 fc45 	bl	8008280 <HAL_TIM_OnePulse_Init>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d001      	beq.n	8003a00 <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 80039fc:	f7ff fc60 	bl	80032c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8003a00:	2310      	movs	r3, #16
 8003a02:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 1433;
 8003a04:	f240 5399 	movw	r3, #1433	@ 0x599
 8003a08:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a12:	2300      	movs	r3, #0
 8003a14:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003a16:	2300      	movs	r3, #0
 8003a18:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a1e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003a22:	2200      	movs	r2, #0
 8003a24:	4619      	mov	r1, r3
 8003a26:	4813      	ldr	r0, [pc, #76]	@ (8003a74 <MX_TIM16_Init+0xf8>)
 8003a28:	f004 ffdc 	bl	80089e4 <HAL_TIM_OC_ConfigChannel>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <MX_TIM16_Init+0xba>
  {
    Error_Handler();
 8003a32:	f7ff fc45 	bl	80032c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003a36:	2300      	movs	r3, #0
 8003a38:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003a42:	2300      	movs	r3, #0
 8003a44:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003a46:	2300      	movs	r3, #0
 8003a48:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003a4a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003a4e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003a50:	2300      	movs	r3, #0
 8003a52:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003a54:	2300      	movs	r3, #0
 8003a56:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8003a58:	463b      	mov	r3, r7
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	4805      	ldr	r0, [pc, #20]	@ (8003a74 <MX_TIM16_Init+0xf8>)
 8003a5e:	f006 f9cb 	bl	8009df8 <HAL_TIMEx_ConfigBreakDeadTime>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d001      	beq.n	8003a6c <MX_TIM16_Init+0xf0>
  {
    Error_Handler();
 8003a68:	f7ff fc2a 	bl	80032c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8003a6c:	bf00      	nop
 8003a6e:	3750      	adds	r7, #80	@ 0x50
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	2000185c 	.word	0x2000185c
 8003a78:	40014400 	.word	0x40014400

08003a7c <MX_TIM20_Init>:
/* TIM20 init function */
void MX_TIM20_Init(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b09c      	sub	sp, #112	@ 0x70
 8003a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a82:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003a86:	2200      	movs	r2, #0
 8003a88:	601a      	str	r2, [r3, #0]
 8003a8a:	605a      	str	r2, [r3, #4]
 8003a8c:	609a      	str	r2, [r3, #8]
 8003a8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a90:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003a94:	2200      	movs	r2, #0
 8003a96:	601a      	str	r2, [r3, #0]
 8003a98:	605a      	str	r2, [r3, #4]
 8003a9a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a9c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	601a      	str	r2, [r3, #0]
 8003aa4:	605a      	str	r2, [r3, #4]
 8003aa6:	609a      	str	r2, [r3, #8]
 8003aa8:	60da      	str	r2, [r3, #12]
 8003aaa:	611a      	str	r2, [r3, #16]
 8003aac:	615a      	str	r2, [r3, #20]
 8003aae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003ab0:	1d3b      	adds	r3, r7, #4
 8003ab2:	2234      	movs	r2, #52	@ 0x34
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f009 fbce 	bl	800d258 <memset>

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8003abc:	4b4b      	ldr	r3, [pc, #300]	@ (8003bec <MX_TIM20_Init+0x170>)
 8003abe:	4a4c      	ldr	r2, [pc, #304]	@ (8003bf0 <MX_TIM20_Init+0x174>)
 8003ac0:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 8003ac2:	4b4a      	ldr	r3, [pc, #296]	@ (8003bec <MX_TIM20_Init+0x170>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ac8:	4b48      	ldr	r3, [pc, #288]	@ (8003bec <MX_TIM20_Init+0x170>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 8003ace:	4b47      	ldr	r3, [pc, #284]	@ (8003bec <MX_TIM20_Init+0x170>)
 8003ad0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003ad4:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ad6:	4b45      	ldr	r3, [pc, #276]	@ (8003bec <MX_TIM20_Init+0x170>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 8003adc:	4b43      	ldr	r3, [pc, #268]	@ (8003bec <MX_TIM20_Init+0x170>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ae2:	4b42      	ldr	r3, [pc, #264]	@ (8003bec <MX_TIM20_Init+0x170>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 8003ae8:	4840      	ldr	r0, [pc, #256]	@ (8003bec <MX_TIM20_Init+0x170>)
 8003aea:	f004 f88f 	bl	8007c0c <HAL_TIM_Base_Init>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d001      	beq.n	8003af8 <MX_TIM20_Init+0x7c>
  {
    Error_Handler();
 8003af4:	f7ff fbe4 	bl	80032c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003af8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003afc:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 8003afe:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003b02:	4619      	mov	r1, r3
 8003b04:	4839      	ldr	r0, [pc, #228]	@ (8003bec <MX_TIM20_Init+0x170>)
 8003b06:	f005 f8fb 	bl	8008d00 <HAL_TIM_ConfigClockSource>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d001      	beq.n	8003b14 <MX_TIM20_Init+0x98>
  {
    Error_Handler();
 8003b10:	f7ff fbd6 	bl	80032c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 8003b14:	4835      	ldr	r0, [pc, #212]	@ (8003bec <MX_TIM20_Init+0x170>)
 8003b16:	f004 fa33 	bl	8007f80 <HAL_TIM_PWM_Init>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d001      	beq.n	8003b24 <MX_TIM20_Init+0xa8>
  {
    Error_Handler();
 8003b20:	f7ff fbce 	bl	80032c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b24:	2300      	movs	r3, #0
 8003b26:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8003b30:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003b34:	4619      	mov	r1, r3
 8003b36:	482d      	ldr	r0, [pc, #180]	@ (8003bec <MX_TIM20_Init+0x170>)
 8003b38:	f006 f8c8 	bl	8009ccc <HAL_TIMEx_MasterConfigSynchronization>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d001      	beq.n	8003b46 <MX_TIM20_Init+0xca>
  {
    Error_Handler();
 8003b42:	f7ff fbbd 	bl	80032c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b46:	2360      	movs	r3, #96	@ 0x60
 8003b48:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003b52:	2300      	movs	r3, #0
 8003b54:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b56:	2300      	movs	r3, #0
 8003b58:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003b62:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003b66:	2200      	movs	r2, #0
 8003b68:	4619      	mov	r1, r3
 8003b6a:	4820      	ldr	r0, [pc, #128]	@ (8003bec <MX_TIM20_Init+0x170>)
 8003b6c:	f004 ffb4 	bl	8008ad8 <HAL_TIM_PWM_ConfigChannel>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d001      	beq.n	8003b7a <MX_TIM20_Init+0xfe>
  {
    Error_Handler();
 8003b76:	f7ff fba3 	bl	80032c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003b7a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003b7e:	2208      	movs	r2, #8
 8003b80:	4619      	mov	r1, r3
 8003b82:	481a      	ldr	r0, [pc, #104]	@ (8003bec <MX_TIM20_Init+0x170>)
 8003b84:	f004 ffa8 	bl	8008ad8 <HAL_TIM_PWM_ConfigChannel>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d001      	beq.n	8003b92 <MX_TIM20_Init+0x116>
  {
    Error_Handler();
 8003b8e:	f7ff fb97 	bl	80032c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003b92:	2300      	movs	r3, #0
 8003b94:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003b96:	2300      	movs	r3, #0
 8003b98:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003ba6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003baa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003bac:	2300      	movs	r3, #0
 8003bae:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003bb8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 8003bca:	1d3b      	adds	r3, r7, #4
 8003bcc:	4619      	mov	r1, r3
 8003bce:	4807      	ldr	r0, [pc, #28]	@ (8003bec <MX_TIM20_Init+0x170>)
 8003bd0:	f006 f912 	bl	8009df8 <HAL_TIMEx_ConfigBreakDeadTime>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <MX_TIM20_Init+0x162>
  {
    Error_Handler();
 8003bda:	f7ff fb71 	bl	80032c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */
  HAL_TIM_MspPostInit(&htim20);
 8003bde:	4803      	ldr	r0, [pc, #12]	@ (8003bec <MX_TIM20_Init+0x170>)
 8003be0:	f000 f908 	bl	8003df4 <HAL_TIM_MspPostInit>

}
 8003be4:	bf00      	nop
 8003be6:	3770      	adds	r7, #112	@ 0x70
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	20001928 	.word	0x20001928
 8003bf0:	40015000 	.word	0x40015000

08003bf4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b088      	sub	sp, #32
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a3d      	ldr	r2, [pc, #244]	@ (8003cf8 <HAL_TIM_Base_MspInit+0x104>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d11c      	bne.n	8003c40 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003c06:	4b3d      	ldr	r3, [pc, #244]	@ (8003cfc <HAL_TIM_Base_MspInit+0x108>)
 8003c08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c0a:	4a3c      	ldr	r2, [pc, #240]	@ (8003cfc <HAL_TIM_Base_MspInit+0x108>)
 8003c0c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003c10:	6613      	str	r3, [r2, #96]	@ 0x60
 8003c12:	4b3a      	ldr	r3, [pc, #232]	@ (8003cfc <HAL_TIM_Base_MspInit+0x108>)
 8003c14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c1a:	61fb      	str	r3, [r7, #28]
 8003c1c:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8003c1e:	2200      	movs	r2, #0
 8003c20:	2100      	movs	r1, #0
 8003c22:	2018      	movs	r0, #24
 8003c24:	f001 fe6f 	bl	8005906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8003c28:	2018      	movs	r0, #24
 8003c2a:	f001 fe86 	bl	800593a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003c2e:	2200      	movs	r2, #0
 8003c30:	2100      	movs	r1, #0
 8003c32:	2019      	movs	r0, #25
 8003c34:	f001 fe67 	bl	8005906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003c38:	2019      	movs	r0, #25
 8003c3a:	f001 fe7e 	bl	800593a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM20_CLK_ENABLE();
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }
}
 8003c3e:	e056      	b.n	8003cee <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM2)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c48:	d114      	bne.n	8003c74 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003c4a:	4b2c      	ldr	r3, [pc, #176]	@ (8003cfc <HAL_TIM_Base_MspInit+0x108>)
 8003c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c4e:	4a2b      	ldr	r2, [pc, #172]	@ (8003cfc <HAL_TIM_Base_MspInit+0x108>)
 8003c50:	f043 0301 	orr.w	r3, r3, #1
 8003c54:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c56:	4b29      	ldr	r3, [pc, #164]	@ (8003cfc <HAL_TIM_Base_MspInit+0x108>)
 8003c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	61bb      	str	r3, [r7, #24]
 8003c60:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003c62:	2200      	movs	r2, #0
 8003c64:	2100      	movs	r1, #0
 8003c66:	201c      	movs	r0, #28
 8003c68:	f001 fe4d 	bl	8005906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003c6c:	201c      	movs	r0, #28
 8003c6e:	f001 fe64 	bl	800593a <HAL_NVIC_EnableIRQ>
}
 8003c72:	e03c      	b.n	8003cee <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM8)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a21      	ldr	r2, [pc, #132]	@ (8003d00 <HAL_TIM_Base_MspInit+0x10c>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d10c      	bne.n	8003c98 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003c7e:	4b1f      	ldr	r3, [pc, #124]	@ (8003cfc <HAL_TIM_Base_MspInit+0x108>)
 8003c80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c82:	4a1e      	ldr	r2, [pc, #120]	@ (8003cfc <HAL_TIM_Base_MspInit+0x108>)
 8003c84:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003c88:	6613      	str	r3, [r2, #96]	@ 0x60
 8003c8a:	4b1c      	ldr	r3, [pc, #112]	@ (8003cfc <HAL_TIM_Base_MspInit+0x108>)
 8003c8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c92:	617b      	str	r3, [r7, #20]
 8003c94:	697b      	ldr	r3, [r7, #20]
}
 8003c96:	e02a      	b.n	8003cee <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM16)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a19      	ldr	r2, [pc, #100]	@ (8003d04 <HAL_TIM_Base_MspInit+0x110>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d114      	bne.n	8003ccc <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003ca2:	4b16      	ldr	r3, [pc, #88]	@ (8003cfc <HAL_TIM_Base_MspInit+0x108>)
 8003ca4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ca6:	4a15      	ldr	r2, [pc, #84]	@ (8003cfc <HAL_TIM_Base_MspInit+0x108>)
 8003ca8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cac:	6613      	str	r3, [r2, #96]	@ 0x60
 8003cae:	4b13      	ldr	r3, [pc, #76]	@ (8003cfc <HAL_TIM_Base_MspInit+0x108>)
 8003cb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cb6:	613b      	str	r3, [r7, #16]
 8003cb8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003cba:	2200      	movs	r2, #0
 8003cbc:	2100      	movs	r1, #0
 8003cbe:	2019      	movs	r0, #25
 8003cc0:	f001 fe21 	bl	8005906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003cc4:	2019      	movs	r0, #25
 8003cc6:	f001 fe38 	bl	800593a <HAL_NVIC_EnableIRQ>
}
 8003cca:	e010      	b.n	8003cee <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM20)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a0d      	ldr	r2, [pc, #52]	@ (8003d08 <HAL_TIM_Base_MspInit+0x114>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d10b      	bne.n	8003cee <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8003cd6:	4b09      	ldr	r3, [pc, #36]	@ (8003cfc <HAL_TIM_Base_MspInit+0x108>)
 8003cd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cda:	4a08      	ldr	r2, [pc, #32]	@ (8003cfc <HAL_TIM_Base_MspInit+0x108>)
 8003cdc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ce0:	6613      	str	r3, [r2, #96]	@ 0x60
 8003ce2:	4b06      	ldr	r3, [pc, #24]	@ (8003cfc <HAL_TIM_Base_MspInit+0x108>)
 8003ce4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ce6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003cea:	60fb      	str	r3, [r7, #12]
 8003cec:	68fb      	ldr	r3, [r7, #12]
}
 8003cee:	bf00      	nop
 8003cf0:	3720      	adds	r7, #32
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	40012c00 	.word	0x40012c00
 8003cfc:	40021000 	.word	0x40021000
 8003d00:	40013400 	.word	0x40013400
 8003d04:	40014400 	.word	0x40014400
 8003d08:	40015000 	.word	0x40015000

08003d0c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b08c      	sub	sp, #48	@ 0x30
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d14:	f107 031c 	add.w	r3, r7, #28
 8003d18:	2200      	movs	r2, #0
 8003d1a:	601a      	str	r2, [r3, #0]
 8003d1c:	605a      	str	r2, [r3, #4]
 8003d1e:	609a      	str	r2, [r3, #8]
 8003d20:	60da      	str	r2, [r3, #12]
 8003d22:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a2f      	ldr	r2, [pc, #188]	@ (8003de8 <HAL_TIM_Encoder_MspInit+0xdc>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d129      	bne.n	8003d82 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003d2e:	4b2f      	ldr	r3, [pc, #188]	@ (8003dec <HAL_TIM_Encoder_MspInit+0xe0>)
 8003d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d32:	4a2e      	ldr	r2, [pc, #184]	@ (8003dec <HAL_TIM_Encoder_MspInit+0xe0>)
 8003d34:	f043 0302 	orr.w	r3, r3, #2
 8003d38:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d3a:	4b2c      	ldr	r3, [pc, #176]	@ (8003dec <HAL_TIM_Encoder_MspInit+0xe0>)
 8003d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	61bb      	str	r3, [r7, #24]
 8003d44:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d46:	4b29      	ldr	r3, [pc, #164]	@ (8003dec <HAL_TIM_Encoder_MspInit+0xe0>)
 8003d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d4a:	4a28      	ldr	r2, [pc, #160]	@ (8003dec <HAL_TIM_Encoder_MspInit+0xe0>)
 8003d4c:	f043 0301 	orr.w	r3, r3, #1
 8003d50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d52:	4b26      	ldr	r3, [pc, #152]	@ (8003dec <HAL_TIM_Encoder_MspInit+0xe0>)
 8003d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	617b      	str	r3, [r7, #20]
 8003d5c:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Encoder_1_Pin|Encoder_1A7_Pin;
 8003d5e:	23c0      	movs	r3, #192	@ 0xc0
 8003d60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d62:	2302      	movs	r3, #2
 8003d64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d66:	2300      	movs	r3, #0
 8003d68:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003d6e:	2302      	movs	r3, #2
 8003d70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d72:	f107 031c 	add.w	r3, r7, #28
 8003d76:	4619      	mov	r1, r3
 8003d78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003d7c:	f002 f936 	bl	8005fec <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003d80:	e02e      	b.n	8003de0 <HAL_TIM_Encoder_MspInit+0xd4>
  else if(tim_encoderHandle->Instance==TIM4)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a1a      	ldr	r2, [pc, #104]	@ (8003df0 <HAL_TIM_Encoder_MspInit+0xe4>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d129      	bne.n	8003de0 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003d8c:	4b17      	ldr	r3, [pc, #92]	@ (8003dec <HAL_TIM_Encoder_MspInit+0xe0>)
 8003d8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d90:	4a16      	ldr	r2, [pc, #88]	@ (8003dec <HAL_TIM_Encoder_MspInit+0xe0>)
 8003d92:	f043 0304 	orr.w	r3, r3, #4
 8003d96:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d98:	4b14      	ldr	r3, [pc, #80]	@ (8003dec <HAL_TIM_Encoder_MspInit+0xe0>)
 8003d9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d9c:	f003 0304 	and.w	r3, r3, #4
 8003da0:	613b      	str	r3, [r7, #16]
 8003da2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003da4:	4b11      	ldr	r3, [pc, #68]	@ (8003dec <HAL_TIM_Encoder_MspInit+0xe0>)
 8003da6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003da8:	4a10      	ldr	r2, [pc, #64]	@ (8003dec <HAL_TIM_Encoder_MspInit+0xe0>)
 8003daa:	f043 0301 	orr.w	r3, r3, #1
 8003dae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003db0:	4b0e      	ldr	r3, [pc, #56]	@ (8003dec <HAL_TIM_Encoder_MspInit+0xe0>)
 8003db2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003db4:	f003 0301 	and.w	r3, r3, #1
 8003db8:	60fb      	str	r3, [r7, #12]
 8003dba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder_2_Pin|Encoder_2A12_Pin;
 8003dbc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003dc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8003dce:	230a      	movs	r3, #10
 8003dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dd2:	f107 031c 	add.w	r3, r7, #28
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003ddc:	f002 f906 	bl	8005fec <HAL_GPIO_Init>
}
 8003de0:	bf00      	nop
 8003de2:	3730      	adds	r7, #48	@ 0x30
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	40000400 	.word	0x40000400
 8003dec:	40021000 	.word	0x40021000
 8003df0:	40000800 	.word	0x40000800

08003df4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b08a      	sub	sp, #40	@ 0x28
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dfc:	f107 0314 	add.w	r3, r7, #20
 8003e00:	2200      	movs	r2, #0
 8003e02:	601a      	str	r2, [r3, #0]
 8003e04:	605a      	str	r2, [r3, #4]
 8003e06:	609a      	str	r2, [r3, #8]
 8003e08:	60da      	str	r2, [r3, #12]
 8003e0a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a31      	ldr	r2, [pc, #196]	@ (8003ed8 <HAL_TIM_MspPostInit+0xe4>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d11d      	bne.n	8003e52 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e16:	4b31      	ldr	r3, [pc, #196]	@ (8003edc <HAL_TIM_MspPostInit+0xe8>)
 8003e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e1a:	4a30      	ldr	r2, [pc, #192]	@ (8003edc <HAL_TIM_MspPostInit+0xe8>)
 8003e1c:	f043 0304 	orr.w	r3, r3, #4
 8003e20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e22:	4b2e      	ldr	r3, [pc, #184]	@ (8003edc <HAL_TIM_MspPostInit+0xe8>)
 8003e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e26:	f003 0304 	and.w	r3, r3, #4
 8003e2a:	613b      	str	r3, [r7, #16]
 8003e2c:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = PWM_Servo_Pin;
 8003e2e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003e32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e34:	2302      	movs	r3, #2
 8003e36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8003e40:	2304      	movs	r3, #4
 8003e42:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_Servo_GPIO_Port, &GPIO_InitStruct);
 8003e44:	f107 0314 	add.w	r3, r7, #20
 8003e48:	4619      	mov	r1, r3
 8003e4a:	4825      	ldr	r0, [pc, #148]	@ (8003ee0 <HAL_TIM_MspPostInit+0xec>)
 8003e4c:	f002 f8ce 	bl	8005fec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM20_MspPostInit 1 */

  /* USER CODE END TIM20_MspPostInit 1 */
  }

}
 8003e50:	e03d      	b.n	8003ece <HAL_TIM_MspPostInit+0xda>
  else if(timHandle->Instance==TIM20)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a23      	ldr	r2, [pc, #140]	@ (8003ee4 <HAL_TIM_MspPostInit+0xf0>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d138      	bne.n	8003ece <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e5c:	4b1f      	ldr	r3, [pc, #124]	@ (8003edc <HAL_TIM_MspPostInit+0xe8>)
 8003e5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e60:	4a1e      	ldr	r2, [pc, #120]	@ (8003edc <HAL_TIM_MspPostInit+0xe8>)
 8003e62:	f043 0302 	orr.w	r3, r3, #2
 8003e66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e68:	4b1c      	ldr	r3, [pc, #112]	@ (8003edc <HAL_TIM_MspPostInit+0xe8>)
 8003e6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e6c:	f003 0302 	and.w	r3, r3, #2
 8003e70:	60fb      	str	r3, [r7, #12]
 8003e72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e74:	4b19      	ldr	r3, [pc, #100]	@ (8003edc <HAL_TIM_MspPostInit+0xe8>)
 8003e76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e78:	4a18      	ldr	r2, [pc, #96]	@ (8003edc <HAL_TIM_MspPostInit+0xe8>)
 8003e7a:	f043 0304 	orr.w	r3, r3, #4
 8003e7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e80:	4b16      	ldr	r3, [pc, #88]	@ (8003edc <HAL_TIM_MspPostInit+0xe8>)
 8003e82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e84:	f003 0304 	and.w	r3, r3, #4
 8003e88:	60bb      	str	r3, [r7, #8]
 8003e8a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_MD20A_24V_Pin;
 8003e8c:	2304      	movs	r3, #4
 8003e8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e90:	2302      	movs	r3, #2
 8003e92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e94:	2300      	movs	r3, #0
 8003e96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MD20A_24V_GPIO_Port, &GPIO_InitStruct);
 8003ea0:	f107 0314 	add.w	r3, r7, #20
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	4810      	ldr	r0, [pc, #64]	@ (8003ee8 <HAL_TIM_MspPostInit+0xf4>)
 8003ea8:	f002 f8a0 	bl	8005fec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_MD20A_18V_Pin;
 8003eac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003eb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eb2:	2302      	movs	r3, #2
 8003eb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM20;
 8003ebe:	2306      	movs	r3, #6
 8003ec0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MD20A_18V_GPIO_Port, &GPIO_InitStruct);
 8003ec2:	f107 0314 	add.w	r3, r7, #20
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	4805      	ldr	r0, [pc, #20]	@ (8003ee0 <HAL_TIM_MspPostInit+0xec>)
 8003eca:	f002 f88f 	bl	8005fec <HAL_GPIO_Init>
}
 8003ece:	bf00      	nop
 8003ed0:	3728      	adds	r7, #40	@ 0x28
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	40013400 	.word	0x40013400
 8003edc:	40021000 	.word	0x40021000
 8003ee0:	48000800 	.word	0x48000800
 8003ee4:	40015000 	.word	0x40015000
 8003ee8:	48000400 	.word	0x48000400

08003eec <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003ef0:	4b23      	ldr	r3, [pc, #140]	@ (8003f80 <MX_USART2_UART_Init+0x94>)
 8003ef2:	4a24      	ldr	r2, [pc, #144]	@ (8003f84 <MX_USART2_UART_Init+0x98>)
 8003ef4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8003ef6:	4b22      	ldr	r3, [pc, #136]	@ (8003f80 <MX_USART2_UART_Init+0x94>)
 8003ef8:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8003efc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8003efe:	4b20      	ldr	r3, [pc, #128]	@ (8003f80 <MX_USART2_UART_Init+0x94>)
 8003f00:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003f04:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003f06:	4b1e      	ldr	r3, [pc, #120]	@ (8003f80 <MX_USART2_UART_Init+0x94>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8003f0c:	4b1c      	ldr	r3, [pc, #112]	@ (8003f80 <MX_USART2_UART_Init+0x94>)
 8003f0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003f12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003f14:	4b1a      	ldr	r3, [pc, #104]	@ (8003f80 <MX_USART2_UART_Init+0x94>)
 8003f16:	220c      	movs	r2, #12
 8003f18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f1a:	4b19      	ldr	r3, [pc, #100]	@ (8003f80 <MX_USART2_UART_Init+0x94>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f20:	4b17      	ldr	r3, [pc, #92]	@ (8003f80 <MX_USART2_UART_Init+0x94>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003f26:	4b16      	ldr	r3, [pc, #88]	@ (8003f80 <MX_USART2_UART_Init+0x94>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003f2c:	4b14      	ldr	r3, [pc, #80]	@ (8003f80 <MX_USART2_UART_Init+0x94>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003f32:	4b13      	ldr	r3, [pc, #76]	@ (8003f80 <MX_USART2_UART_Init+0x94>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003f38:	4811      	ldr	r0, [pc, #68]	@ (8003f80 <MX_USART2_UART_Init+0x94>)
 8003f3a:	f006 f841 	bl	8009fc0 <HAL_UART_Init>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d001      	beq.n	8003f48 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8003f44:	f7ff f9bc 	bl	80032c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f48:	2100      	movs	r1, #0
 8003f4a:	480d      	ldr	r0, [pc, #52]	@ (8003f80 <MX_USART2_UART_Init+0x94>)
 8003f4c:	f008 fbc3 	bl	800c6d6 <HAL_UARTEx_SetTxFifoThreshold>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8003f56:	f7ff f9b3 	bl	80032c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f5a:	2100      	movs	r1, #0
 8003f5c:	4808      	ldr	r0, [pc, #32]	@ (8003f80 <MX_USART2_UART_Init+0x94>)
 8003f5e:	f008 fbf8 	bl	800c752 <HAL_UARTEx_SetRxFifoThreshold>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d001      	beq.n	8003f6c <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8003f68:	f7ff f9aa 	bl	80032c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003f6c:	4804      	ldr	r0, [pc, #16]	@ (8003f80 <MX_USART2_UART_Init+0x94>)
 8003f6e:	f008 fb79 	bl	800c664 <HAL_UARTEx_DisableFifoMode>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d001      	beq.n	8003f7c <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8003f78:	f7ff f9a2 	bl	80032c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003f7c:	bf00      	nop
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	200019f4 	.word	0x200019f4
 8003f84:	40004400 	.word	0x40004400

08003f88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b09e      	sub	sp, #120	@ 0x78
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f90:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003f94:	2200      	movs	r2, #0
 8003f96:	601a      	str	r2, [r3, #0]
 8003f98:	605a      	str	r2, [r3, #4]
 8003f9a:	609a      	str	r2, [r3, #8]
 8003f9c:	60da      	str	r2, [r3, #12]
 8003f9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003fa0:	f107 0310 	add.w	r3, r7, #16
 8003fa4:	2254      	movs	r2, #84	@ 0x54
 8003fa6:	2100      	movs	r1, #0
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f009 f955 	bl	800d258 <memset>
  if(uartHandle->Instance==USART2)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a37      	ldr	r2, [pc, #220]	@ (8004090 <HAL_UART_MspInit+0x108>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d167      	bne.n	8004088 <HAL_UART_MspInit+0x100>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003fb8:	2302      	movs	r3, #2
 8003fba:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003fc0:	f107 0310 	add.w	r3, r7, #16
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f002 ffa5 	bl	8006f14 <HAL_RCCEx_PeriphCLKConfig>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d001      	beq.n	8003fd4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003fd0:	f7ff f976 	bl	80032c0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003fd4:	4b2f      	ldr	r3, [pc, #188]	@ (8004094 <HAL_UART_MspInit+0x10c>)
 8003fd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fd8:	4a2e      	ldr	r2, [pc, #184]	@ (8004094 <HAL_UART_MspInit+0x10c>)
 8003fda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fde:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fe0:	4b2c      	ldr	r3, [pc, #176]	@ (8004094 <HAL_UART_MspInit+0x10c>)
 8003fe2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fe4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fe8:	60fb      	str	r3, [r7, #12]
 8003fea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fec:	4b29      	ldr	r3, [pc, #164]	@ (8004094 <HAL_UART_MspInit+0x10c>)
 8003fee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ff0:	4a28      	ldr	r2, [pc, #160]	@ (8004094 <HAL_UART_MspInit+0x10c>)
 8003ff2:	f043 0301 	orr.w	r3, r3, #1
 8003ff6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ff8:	4b26      	ldr	r3, [pc, #152]	@ (8004094 <HAL_UART_MspInit+0x10c>)
 8003ffa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ffc:	f003 0301 	and.w	r3, r3, #1
 8004000:	60bb      	str	r3, [r7, #8]
 8004002:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004004:	230c      	movs	r3, #12
 8004006:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004008:	2302      	movs	r3, #2
 800400a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800400c:	2300      	movs	r3, #0
 800400e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004010:	2300      	movs	r3, #0
 8004012:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004014:	2307      	movs	r3, #7
 8004016:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004018:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800401c:	4619      	mov	r1, r3
 800401e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004022:	f001 ffe3 	bl	8005fec <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 8004026:	4b1c      	ldr	r3, [pc, #112]	@ (8004098 <HAL_UART_MspInit+0x110>)
 8004028:	4a1c      	ldr	r2, [pc, #112]	@ (800409c <HAL_UART_MspInit+0x114>)
 800402a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800402c:	4b1a      	ldr	r3, [pc, #104]	@ (8004098 <HAL_UART_MspInit+0x110>)
 800402e:	221b      	movs	r2, #27
 8004030:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004032:	4b19      	ldr	r3, [pc, #100]	@ (8004098 <HAL_UART_MspInit+0x110>)
 8004034:	2210      	movs	r2, #16
 8004036:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004038:	4b17      	ldr	r3, [pc, #92]	@ (8004098 <HAL_UART_MspInit+0x110>)
 800403a:	2200      	movs	r2, #0
 800403c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800403e:	4b16      	ldr	r3, [pc, #88]	@ (8004098 <HAL_UART_MspInit+0x110>)
 8004040:	2280      	movs	r2, #128	@ 0x80
 8004042:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004044:	4b14      	ldr	r3, [pc, #80]	@ (8004098 <HAL_UART_MspInit+0x110>)
 8004046:	2200      	movs	r2, #0
 8004048:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800404a:	4b13      	ldr	r3, [pc, #76]	@ (8004098 <HAL_UART_MspInit+0x110>)
 800404c:	2200      	movs	r2, #0
 800404e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004050:	4b11      	ldr	r3, [pc, #68]	@ (8004098 <HAL_UART_MspInit+0x110>)
 8004052:	2200      	movs	r2, #0
 8004054:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004056:	4b10      	ldr	r3, [pc, #64]	@ (8004098 <HAL_UART_MspInit+0x110>)
 8004058:	2200      	movs	r2, #0
 800405a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800405c:	480e      	ldr	r0, [pc, #56]	@ (8004098 <HAL_UART_MspInit+0x110>)
 800405e:	f001 fc87 	bl	8005970 <HAL_DMA_Init>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d001      	beq.n	800406c <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8004068:	f7ff f92a 	bl	80032c0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a0a      	ldr	r2, [pc, #40]	@ (8004098 <HAL_UART_MspInit+0x110>)
 8004070:	67da      	str	r2, [r3, #124]	@ 0x7c
 8004072:	4a09      	ldr	r2, [pc, #36]	@ (8004098 <HAL_UART_MspInit+0x110>)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004078:	2200      	movs	r2, #0
 800407a:	2100      	movs	r1, #0
 800407c:	2026      	movs	r0, #38	@ 0x26
 800407e:	f001 fc42 	bl	8005906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004082:	2026      	movs	r0, #38	@ 0x26
 8004084:	f001 fc59 	bl	800593a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004088:	bf00      	nop
 800408a:	3778      	adds	r7, #120	@ 0x78
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	40004400 	.word	0x40004400
 8004094:	40021000 	.word	0x40021000
 8004098:	20001ac0 	.word	0x20001ac0
 800409c:	40020008 	.word	0x40020008

080040a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80040a0:	480d      	ldr	r0, [pc, #52]	@ (80040d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80040a2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80040a4:	f7ff fa5a 	bl	800355c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80040a8:	480c      	ldr	r0, [pc, #48]	@ (80040dc <LoopForever+0x6>)
  ldr r1, =_edata
 80040aa:	490d      	ldr	r1, [pc, #52]	@ (80040e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80040ac:	4a0d      	ldr	r2, [pc, #52]	@ (80040e4 <LoopForever+0xe>)
  movs r3, #0
 80040ae:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80040b0:	e002      	b.n	80040b8 <LoopCopyDataInit>

080040b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80040b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80040b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80040b6:	3304      	adds	r3, #4

080040b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80040b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80040ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80040bc:	d3f9      	bcc.n	80040b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80040be:	4a0a      	ldr	r2, [pc, #40]	@ (80040e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80040c0:	4c0a      	ldr	r4, [pc, #40]	@ (80040ec <LoopForever+0x16>)
  movs r3, #0
 80040c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80040c4:	e001      	b.n	80040ca <LoopFillZerobss>

080040c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80040c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80040c8:	3204      	adds	r2, #4

080040ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80040ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80040cc:	d3fb      	bcc.n	80040c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80040ce:	f009 f8d1 	bl	800d274 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80040d2:	f7fe f905 	bl	80022e0 <main>

080040d6 <LoopForever>:

LoopForever:
    b LoopForever
 80040d6:	e7fe      	b.n	80040d6 <LoopForever>
  ldr   r0, =_estack
 80040d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80040dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80040e0:	20000290 	.word	0x20000290
  ldr r2, =_sidata
 80040e4:	0800d384 	.word	0x0800d384
  ldr r2, =_sbss
 80040e8:	20000290 	.word	0x20000290
  ldr r4, =_ebss
 80040ec:	20001c5c 	.word	0x20001c5c

080040f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80040f0:	e7fe      	b.n	80040f0 <ADC1_2_IRQHandler>

080040f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b082      	sub	sp, #8
 80040f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80040f8:	2300      	movs	r3, #0
 80040fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040fc:	2003      	movs	r0, #3
 80040fe:	f001 fbf7 	bl	80058f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004102:	2000      	movs	r0, #0
 8004104:	f000 f80e 	bl	8004124 <HAL_InitTick>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d002      	beq.n	8004114 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	71fb      	strb	r3, [r7, #7]
 8004112:	e001      	b.n	8004118 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004114:	f7ff f978 	bl	8003408 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004118:	79fb      	ldrb	r3, [r7, #7]

}
 800411a:	4618      	mov	r0, r3
 800411c:	3708      	adds	r7, #8
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
	...

08004124 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800412c:	2300      	movs	r3, #0
 800412e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004130:	4b16      	ldr	r3, [pc, #88]	@ (800418c <HAL_InitTick+0x68>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d022      	beq.n	800417e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004138:	4b15      	ldr	r3, [pc, #84]	@ (8004190 <HAL_InitTick+0x6c>)
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	4b13      	ldr	r3, [pc, #76]	@ (800418c <HAL_InitTick+0x68>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004144:	fbb1 f3f3 	udiv	r3, r1, r3
 8004148:	fbb2 f3f3 	udiv	r3, r2, r3
 800414c:	4618      	mov	r0, r3
 800414e:	f001 fc02 	bl	8005956 <HAL_SYSTICK_Config>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10f      	bne.n	8004178 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2b0f      	cmp	r3, #15
 800415c:	d809      	bhi.n	8004172 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800415e:	2200      	movs	r2, #0
 8004160:	6879      	ldr	r1, [r7, #4]
 8004162:	f04f 30ff 	mov.w	r0, #4294967295
 8004166:	f001 fbce 	bl	8005906 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800416a:	4a0a      	ldr	r2, [pc, #40]	@ (8004194 <HAL_InitTick+0x70>)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6013      	str	r3, [r2, #0]
 8004170:	e007      	b.n	8004182 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	73fb      	strb	r3, [r7, #15]
 8004176:	e004      	b.n	8004182 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	73fb      	strb	r3, [r7, #15]
 800417c:	e001      	b.n	8004182 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004182:	7bfb      	ldrb	r3, [r7, #15]
}
 8004184:	4618      	mov	r0, r3
 8004186:	3710      	adds	r7, #16
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	2000023c 	.word	0x2000023c
 8004190:	20000234 	.word	0x20000234
 8004194:	20000238 	.word	0x20000238

08004198 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004198:	b480      	push	{r7}
 800419a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800419c:	4b05      	ldr	r3, [pc, #20]	@ (80041b4 <HAL_IncTick+0x1c>)
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	4b05      	ldr	r3, [pc, #20]	@ (80041b8 <HAL_IncTick+0x20>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4413      	add	r3, r2
 80041a6:	4a03      	ldr	r2, [pc, #12]	@ (80041b4 <HAL_IncTick+0x1c>)
 80041a8:	6013      	str	r3, [r2, #0]
}
 80041aa:	bf00      	nop
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr
 80041b4:	20001b20 	.word	0x20001b20
 80041b8:	2000023c 	.word	0x2000023c

080041bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0
  return uwTick;
 80041c0:	4b03      	ldr	r3, [pc, #12]	@ (80041d0 <HAL_GetTick+0x14>)
 80041c2:	681b      	ldr	r3, [r3, #0]
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	20001b20 	.word	0x20001b20

080041d4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	431a      	orrs	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	609a      	str	r2, [r3, #8]
}
 80041ee:	bf00      	nop
 80041f0:	370c      	adds	r7, #12
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr

080041fa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80041fa:	b480      	push	{r7}
 80041fc:	b083      	sub	sp, #12
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
 8004202:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	431a      	orrs	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	609a      	str	r2, [r3, #8]
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004230:	4618      	mov	r0, r3
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800423c:	b480      	push	{r7}
 800423e:	b087      	sub	sp, #28
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
 8004248:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	3360      	adds	r3, #96	@ 0x60
 800424e:	461a      	mov	r2, r3
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	4413      	add	r3, r2
 8004256:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	4b08      	ldr	r3, [pc, #32]	@ (8004280 <LL_ADC_SetOffset+0x44>)
 800425e:	4013      	ands	r3, r2
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	430a      	orrs	r2, r1
 800426a:	4313      	orrs	r3, r2
 800426c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004274:	bf00      	nop
 8004276:	371c      	adds	r7, #28
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr
 8004280:	03fff000 	.word	0x03fff000

08004284 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	3360      	adds	r3, #96	@ 0x60
 8004292:	461a      	mov	r2, r3
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	4413      	add	r3, r2
 800429a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3714      	adds	r7, #20
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b087      	sub	sp, #28
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	3360      	adds	r3, #96	@ 0x60
 80042c0:	461a      	mov	r2, r3
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	4413      	add	r3, r2
 80042c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	431a      	orrs	r2, r3
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80042da:	bf00      	nop
 80042dc:	371c      	adds	r7, #28
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr

080042e6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80042e6:	b480      	push	{r7}
 80042e8:	b087      	sub	sp, #28
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	60f8      	str	r0, [r7, #12]
 80042ee:	60b9      	str	r1, [r7, #8]
 80042f0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	3360      	adds	r3, #96	@ 0x60
 80042f6:	461a      	mov	r2, r3
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4413      	add	r3, r2
 80042fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	431a      	orrs	r2, r3
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004310:	bf00      	nop
 8004312:	371c      	adds	r7, #28
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800431c:	b480      	push	{r7}
 800431e:	b087      	sub	sp, #28
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	3360      	adds	r3, #96	@ 0x60
 800432c:	461a      	mov	r2, r3
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	4413      	add	r3, r2
 8004334:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	431a      	orrs	r2, r3
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8004346:	bf00      	nop
 8004348:	371c      	adds	r7, #28
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr

08004352 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004352:	b480      	push	{r7}
 8004354:	b083      	sub	sp, #12
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
 800435a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	695b      	ldr	r3, [r3, #20]
 8004360:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	431a      	orrs	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	615a      	str	r2, [r3, #20]
}
 800436c:	bf00      	nop
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004378:	b480      	push	{r7}
 800437a:	b087      	sub	sp, #28
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	3330      	adds	r3, #48	@ 0x30
 8004388:	461a      	mov	r2, r3
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	0a1b      	lsrs	r3, r3, #8
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	f003 030c 	and.w	r3, r3, #12
 8004394:	4413      	add	r3, r2
 8004396:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	f003 031f 	and.w	r3, r3, #31
 80043a2:	211f      	movs	r1, #31
 80043a4:	fa01 f303 	lsl.w	r3, r1, r3
 80043a8:	43db      	mvns	r3, r3
 80043aa:	401a      	ands	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	0e9b      	lsrs	r3, r3, #26
 80043b0:	f003 011f 	and.w	r1, r3, #31
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	f003 031f 	and.w	r3, r3, #31
 80043ba:	fa01 f303 	lsl.w	r3, r1, r3
 80043be:	431a      	orrs	r2, r3
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80043c4:	bf00      	nop
 80043c6:	371c      	adds	r7, #28
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b087      	sub	sp, #28
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	3314      	adds	r3, #20
 80043e0:	461a      	mov	r2, r3
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	0e5b      	lsrs	r3, r3, #25
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	f003 0304 	and.w	r3, r3, #4
 80043ec:	4413      	add	r3, r2
 80043ee:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	0d1b      	lsrs	r3, r3, #20
 80043f8:	f003 031f 	and.w	r3, r3, #31
 80043fc:	2107      	movs	r1, #7
 80043fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004402:	43db      	mvns	r3, r3
 8004404:	401a      	ands	r2, r3
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	0d1b      	lsrs	r3, r3, #20
 800440a:	f003 031f 	and.w	r3, r3, #31
 800440e:	6879      	ldr	r1, [r7, #4]
 8004410:	fa01 f303 	lsl.w	r3, r1, r3
 8004414:	431a      	orrs	r2, r3
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800441a:	bf00      	nop
 800441c:	371c      	adds	r7, #28
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
	...

08004428 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004428:	b480      	push	{r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004440:	43db      	mvns	r3, r3
 8004442:	401a      	ands	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f003 0318 	and.w	r3, r3, #24
 800444a:	4908      	ldr	r1, [pc, #32]	@ (800446c <LL_ADC_SetChannelSingleDiff+0x44>)
 800444c:	40d9      	lsrs	r1, r3
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	400b      	ands	r3, r1
 8004452:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004456:	431a      	orrs	r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800445e:	bf00      	nop
 8004460:	3714      	adds	r7, #20
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	0007ffff 	.word	0x0007ffff

08004470 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f003 031f 	and.w	r3, r3, #31
}
 8004480:	4618      	mov	r0, r3
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800449c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	6093      	str	r3, [r2, #8]
}
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80044c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80044c4:	d101      	bne.n	80044ca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80044c6:	2301      	movs	r3, #1
 80044c8:	e000      	b.n	80044cc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80044e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80044ec:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80044f4:	bf00      	nop
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004510:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004514:	d101      	bne.n	800451a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004516:	2301      	movs	r3, #1
 8004518:	e000      	b.n	800451c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004538:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800453c:	f043 0201 	orr.w	r2, r3, #1
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004544:	bf00      	nop
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f003 0301 	and.w	r3, r3, #1
 8004560:	2b01      	cmp	r3, #1
 8004562:	d101      	bne.n	8004568 <LL_ADC_IsEnabled+0x18>
 8004564:	2301      	movs	r3, #1
 8004566:	e000      	b.n	800456a <LL_ADC_IsEnabled+0x1a>
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr

08004576 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004576:	b480      	push	{r7}
 8004578:	b083      	sub	sp, #12
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004586:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800458a:	f043 0204 	orr.w	r2, r3, #4
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004592:	bf00      	nop
 8004594:	370c      	adds	r7, #12
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr

0800459e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800459e:	b480      	push	{r7}
 80045a0:	b083      	sub	sp, #12
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f003 0304 	and.w	r3, r3, #4
 80045ae:	2b04      	cmp	r3, #4
 80045b0:	d101      	bne.n	80045b6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80045b2:	2301      	movs	r3, #1
 80045b4:	e000      	b.n	80045b8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	f003 0308 	and.w	r3, r3, #8
 80045d4:	2b08      	cmp	r3, #8
 80045d6:	d101      	bne.n	80045dc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80045d8:	2301      	movs	r3, #1
 80045da:	e000      	b.n	80045de <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	370c      	adds	r7, #12
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
	...

080045ec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80045ec:	b590      	push	{r4, r7, lr}
 80045ee:	b089      	sub	sp, #36	@ 0x24
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045f4:	2300      	movs	r3, #0
 80045f6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80045f8:	2300      	movs	r3, #0
 80045fa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d101      	bne.n	8004606 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e1a9      	b.n	800495a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004610:	2b00      	cmp	r3, #0
 8004612:	d109      	bne.n	8004628 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f7fd fce7 	bl	8001fe8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4618      	mov	r0, r3
 800462e:	f7ff ff3f 	bl	80044b0 <LL_ADC_IsDeepPowerDownEnabled>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d004      	beq.n	8004642 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4618      	mov	r0, r3
 800463e:	f7ff ff25 	bl	800448c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4618      	mov	r0, r3
 8004648:	f7ff ff5a 	bl	8004500 <LL_ADC_IsInternalRegulatorEnabled>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d115      	bne.n	800467e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4618      	mov	r0, r3
 8004658:	f7ff ff3e 	bl	80044d8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800465c:	4b9c      	ldr	r3, [pc, #624]	@ (80048d0 <HAL_ADC_Init+0x2e4>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	099b      	lsrs	r3, r3, #6
 8004662:	4a9c      	ldr	r2, [pc, #624]	@ (80048d4 <HAL_ADC_Init+0x2e8>)
 8004664:	fba2 2303 	umull	r2, r3, r2, r3
 8004668:	099b      	lsrs	r3, r3, #6
 800466a:	3301      	adds	r3, #1
 800466c:	005b      	lsls	r3, r3, #1
 800466e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004670:	e002      	b.n	8004678 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	3b01      	subs	r3, #1
 8004676:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1f9      	bne.n	8004672 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4618      	mov	r0, r3
 8004684:	f7ff ff3c 	bl	8004500 <LL_ADC_IsInternalRegulatorEnabled>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d10d      	bne.n	80046aa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004692:	f043 0210 	orr.w	r2, r3, #16
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800469e:	f043 0201 	orr.w	r2, r3, #1
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7ff ff75 	bl	800459e <LL_ADC_REG_IsConversionOngoing>
 80046b4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046ba:	f003 0310 	and.w	r3, r3, #16
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f040 8142 	bne.w	8004948 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f040 813e 	bne.w	8004948 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046d0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80046d4:	f043 0202 	orr.w	r2, r3, #2
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4618      	mov	r0, r3
 80046e2:	f7ff ff35 	bl	8004550 <LL_ADC_IsEnabled>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d141      	bne.n	8004770 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80046f4:	d004      	beq.n	8004700 <HAL_ADC_Init+0x114>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a77      	ldr	r2, [pc, #476]	@ (80048d8 <HAL_ADC_Init+0x2ec>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d10f      	bne.n	8004720 <HAL_ADC_Init+0x134>
 8004700:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004704:	f7ff ff24 	bl	8004550 <LL_ADC_IsEnabled>
 8004708:	4604      	mov	r4, r0
 800470a:	4873      	ldr	r0, [pc, #460]	@ (80048d8 <HAL_ADC_Init+0x2ec>)
 800470c:	f7ff ff20 	bl	8004550 <LL_ADC_IsEnabled>
 8004710:	4603      	mov	r3, r0
 8004712:	4323      	orrs	r3, r4
 8004714:	2b00      	cmp	r3, #0
 8004716:	bf0c      	ite	eq
 8004718:	2301      	moveq	r3, #1
 800471a:	2300      	movne	r3, #0
 800471c:	b2db      	uxtb	r3, r3
 800471e:	e012      	b.n	8004746 <HAL_ADC_Init+0x15a>
 8004720:	486e      	ldr	r0, [pc, #440]	@ (80048dc <HAL_ADC_Init+0x2f0>)
 8004722:	f7ff ff15 	bl	8004550 <LL_ADC_IsEnabled>
 8004726:	4604      	mov	r4, r0
 8004728:	486d      	ldr	r0, [pc, #436]	@ (80048e0 <HAL_ADC_Init+0x2f4>)
 800472a:	f7ff ff11 	bl	8004550 <LL_ADC_IsEnabled>
 800472e:	4603      	mov	r3, r0
 8004730:	431c      	orrs	r4, r3
 8004732:	486c      	ldr	r0, [pc, #432]	@ (80048e4 <HAL_ADC_Init+0x2f8>)
 8004734:	f7ff ff0c 	bl	8004550 <LL_ADC_IsEnabled>
 8004738:	4603      	mov	r3, r0
 800473a:	4323      	orrs	r3, r4
 800473c:	2b00      	cmp	r3, #0
 800473e:	bf0c      	ite	eq
 8004740:	2301      	moveq	r3, #1
 8004742:	2300      	movne	r3, #0
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d012      	beq.n	8004770 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004752:	d004      	beq.n	800475e <HAL_ADC_Init+0x172>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a5f      	ldr	r2, [pc, #380]	@ (80048d8 <HAL_ADC_Init+0x2ec>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d101      	bne.n	8004762 <HAL_ADC_Init+0x176>
 800475e:	4a62      	ldr	r2, [pc, #392]	@ (80048e8 <HAL_ADC_Init+0x2fc>)
 8004760:	e000      	b.n	8004764 <HAL_ADC_Init+0x178>
 8004762:	4a62      	ldr	r2, [pc, #392]	@ (80048ec <HAL_ADC_Init+0x300>)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	4619      	mov	r1, r3
 800476a:	4610      	mov	r0, r2
 800476c:	f7ff fd32 	bl	80041d4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	7f5b      	ldrb	r3, [r3, #29]
 8004774:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800477a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004780:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004786:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800478e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004790:	4313      	orrs	r3, r2
 8004792:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800479a:	2b01      	cmp	r3, #1
 800479c:	d106      	bne.n	80047ac <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a2:	3b01      	subs	r3, #1
 80047a4:	045b      	lsls	r3, r3, #17
 80047a6:	69ba      	ldr	r2, [r7, #24]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d009      	beq.n	80047c8 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047b8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047c0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80047c2:	69ba      	ldr	r2, [r7, #24]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	68da      	ldr	r2, [r3, #12]
 80047ce:	4b48      	ldr	r3, [pc, #288]	@ (80048f0 <HAL_ADC_Init+0x304>)
 80047d0:	4013      	ands	r3, r2
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	6812      	ldr	r2, [r2, #0]
 80047d6:	69b9      	ldr	r1, [r7, #24]
 80047d8:	430b      	orrs	r3, r1
 80047da:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	430a      	orrs	r2, r1
 80047f0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7ff fee4 	bl	80045c4 <LL_ADC_INJ_IsConversionOngoing>
 80047fc:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d17f      	bne.n	8004904 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d17c      	bne.n	8004904 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800480e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004816:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004818:	4313      	orrs	r3, r2
 800481a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004826:	f023 0302 	bic.w	r3, r3, #2
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	6812      	ldr	r2, [r2, #0]
 800482e:	69b9      	ldr	r1, [r7, #24]
 8004830:	430b      	orrs	r3, r1
 8004832:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d017      	beq.n	800486c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	691a      	ldr	r2, [r3, #16]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800484a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004854:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004858:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	6911      	ldr	r1, [r2, #16]
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	6812      	ldr	r2, [r2, #0]
 8004864:	430b      	orrs	r3, r1
 8004866:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800486a:	e013      	b.n	8004894 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	691a      	ldr	r2, [r3, #16]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800487a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	6812      	ldr	r2, [r2, #0]
 8004888:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800488c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004890:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800489a:	2b01      	cmp	r3, #1
 800489c:	d12a      	bne.n	80048f4 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80048a8:	f023 0304 	bic.w	r3, r3, #4
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80048b4:	4311      	orrs	r1, r2
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80048ba:	4311      	orrs	r1, r2
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80048c0:	430a      	orrs	r2, r1
 80048c2:	431a      	orrs	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f042 0201 	orr.w	r2, r2, #1
 80048cc:	611a      	str	r2, [r3, #16]
 80048ce:	e019      	b.n	8004904 <HAL_ADC_Init+0x318>
 80048d0:	20000234 	.word	0x20000234
 80048d4:	053e2d63 	.word	0x053e2d63
 80048d8:	50000100 	.word	0x50000100
 80048dc:	50000400 	.word	0x50000400
 80048e0:	50000500 	.word	0x50000500
 80048e4:	50000600 	.word	0x50000600
 80048e8:	50000300 	.word	0x50000300
 80048ec:	50000700 	.word	0x50000700
 80048f0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	691a      	ldr	r2, [r3, #16]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f022 0201 	bic.w	r2, r2, #1
 8004902:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	695b      	ldr	r3, [r3, #20]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d10c      	bne.n	8004926 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004912:	f023 010f 	bic.w	r1, r3, #15
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a1b      	ldr	r3, [r3, #32]
 800491a:	1e5a      	subs	r2, r3, #1
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	430a      	orrs	r2, r1
 8004922:	631a      	str	r2, [r3, #48]	@ 0x30
 8004924:	e007      	b.n	8004936 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f022 020f 	bic.w	r2, r2, #15
 8004934:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800493a:	f023 0303 	bic.w	r3, r3, #3
 800493e:	f043 0201 	orr.w	r2, r3, #1
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004946:	e007      	b.n	8004958 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800494c:	f043 0210 	orr.w	r2, r3, #16
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004958:	7ffb      	ldrb	r3, [r7, #31]
}
 800495a:	4618      	mov	r0, r3
 800495c:	3724      	adds	r7, #36	@ 0x24
 800495e:	46bd      	mov	sp, r7
 8004960:	bd90      	pop	{r4, r7, pc}
 8004962:	bf00      	nop

08004964 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b086      	sub	sp, #24
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004974:	d004      	beq.n	8004980 <HAL_ADC_Start+0x1c>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a67      	ldr	r2, [pc, #412]	@ (8004b18 <HAL_ADC_Start+0x1b4>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d101      	bne.n	8004984 <HAL_ADC_Start+0x20>
 8004980:	4b66      	ldr	r3, [pc, #408]	@ (8004b1c <HAL_ADC_Start+0x1b8>)
 8004982:	e000      	b.n	8004986 <HAL_ADC_Start+0x22>
 8004984:	4b66      	ldr	r3, [pc, #408]	@ (8004b20 <HAL_ADC_Start+0x1bc>)
 8004986:	4618      	mov	r0, r3
 8004988:	f7ff fd72 	bl	8004470 <LL_ADC_GetMultimode>
 800498c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4618      	mov	r0, r3
 8004994:	f7ff fe03 	bl	800459e <LL_ADC_REG_IsConversionOngoing>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	f040 80b4 	bne.w	8004b08 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d101      	bne.n	80049ae <HAL_ADC_Start+0x4a>
 80049aa:	2302      	movs	r3, #2
 80049ac:	e0af      	b.n	8004b0e <HAL_ADC_Start+0x1aa>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2201      	movs	r2, #1
 80049b2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 fd06 	bl	80053c8 <ADC_Enable>
 80049bc:	4603      	mov	r3, r0
 80049be:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80049c0:	7dfb      	ldrb	r3, [r7, #23]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	f040 809b 	bne.w	8004afe <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049cc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80049d0:	f023 0301 	bic.w	r3, r3, #1
 80049d4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a4d      	ldr	r2, [pc, #308]	@ (8004b18 <HAL_ADC_Start+0x1b4>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d009      	beq.n	80049fa <HAL_ADC_Start+0x96>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a4e      	ldr	r2, [pc, #312]	@ (8004b24 <HAL_ADC_Start+0x1c0>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d002      	beq.n	80049f6 <HAL_ADC_Start+0x92>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	e003      	b.n	80049fe <HAL_ADC_Start+0x9a>
 80049f6:	4b4c      	ldr	r3, [pc, #304]	@ (8004b28 <HAL_ADC_Start+0x1c4>)
 80049f8:	e001      	b.n	80049fe <HAL_ADC_Start+0x9a>
 80049fa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	6812      	ldr	r2, [r2, #0]
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d002      	beq.n	8004a0c <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d105      	bne.n	8004a18 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a10:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a24:	d106      	bne.n	8004a34 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a2a:	f023 0206 	bic.w	r2, r3, #6
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	661a      	str	r2, [r3, #96]	@ 0x60
 8004a32:	e002      	b.n	8004a3a <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	221c      	movs	r2, #28
 8004a40:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a32      	ldr	r2, [pc, #200]	@ (8004b18 <HAL_ADC_Start+0x1b4>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d009      	beq.n	8004a68 <HAL_ADC_Start+0x104>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a32      	ldr	r2, [pc, #200]	@ (8004b24 <HAL_ADC_Start+0x1c0>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d002      	beq.n	8004a64 <HAL_ADC_Start+0x100>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	e003      	b.n	8004a6c <HAL_ADC_Start+0x108>
 8004a64:	4b30      	ldr	r3, [pc, #192]	@ (8004b28 <HAL_ADC_Start+0x1c4>)
 8004a66:	e001      	b.n	8004a6c <HAL_ADC_Start+0x108>
 8004a68:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	6812      	ldr	r2, [r2, #0]
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d008      	beq.n	8004a86 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d005      	beq.n	8004a86 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	2b05      	cmp	r3, #5
 8004a7e:	d002      	beq.n	8004a86 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	2b09      	cmp	r3, #9
 8004a84:	d114      	bne.n	8004ab0 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d007      	beq.n	8004aa4 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a98:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004a9c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f7ff fd64 	bl	8004576 <LL_ADC_REG_StartConversion>
 8004aae:	e02d      	b.n	8004b0c <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ab4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a15      	ldr	r2, [pc, #84]	@ (8004b18 <HAL_ADC_Start+0x1b4>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d009      	beq.n	8004ada <HAL_ADC_Start+0x176>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a16      	ldr	r2, [pc, #88]	@ (8004b24 <HAL_ADC_Start+0x1c0>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d002      	beq.n	8004ad6 <HAL_ADC_Start+0x172>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	e003      	b.n	8004ade <HAL_ADC_Start+0x17a>
 8004ad6:	4b14      	ldr	r3, [pc, #80]	@ (8004b28 <HAL_ADC_Start+0x1c4>)
 8004ad8:	e001      	b.n	8004ade <HAL_ADC_Start+0x17a>
 8004ada:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004ade:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00f      	beq.n	8004b0c <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004af0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004af4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004afc:	e006      	b.n	8004b0c <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8004b06:	e001      	b.n	8004b0c <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004b08:	2302      	movs	r3, #2
 8004b0a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004b0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3718      	adds	r7, #24
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	50000100 	.word	0x50000100
 8004b1c:	50000300 	.word	0x50000300
 8004b20:	50000700 	.word	0x50000700
 8004b24:	50000500 	.word	0x50000500
 8004b28:	50000400 	.word	0x50000400

08004b2c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	370c      	adds	r7, #12
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
	...

08004b48 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b0b6      	sub	sp, #216	@ 0xd8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b52:	2300      	movs	r3, #0
 8004b54:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d102      	bne.n	8004b6c <HAL_ADC_ConfigChannel+0x24>
 8004b66:	2302      	movs	r3, #2
 8004b68:	f000 bc13 	b.w	8005392 <HAL_ADC_ConfigChannel+0x84a>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f7ff fd10 	bl	800459e <LL_ADC_REG_IsConversionOngoing>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f040 83f3 	bne.w	800536c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6818      	ldr	r0, [r3, #0]
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	6859      	ldr	r1, [r3, #4]
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	461a      	mov	r2, r3
 8004b94:	f7ff fbf0 	bl	8004378 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7ff fcfe 	bl	800459e <LL_ADC_REG_IsConversionOngoing>
 8004ba2:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7ff fd0a 	bl	80045c4 <LL_ADC_INJ_IsConversionOngoing>
 8004bb0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004bb4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	f040 81d9 	bne.w	8004f70 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004bbe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	f040 81d4 	bne.w	8004f70 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004bd0:	d10f      	bne.n	8004bf2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6818      	ldr	r0, [r3, #0]
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	4619      	mov	r1, r3
 8004bde:	f7ff fbf7 	bl	80043d0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7ff fbb1 	bl	8004352 <LL_ADC_SetSamplingTimeCommonConfig>
 8004bf0:	e00e      	b.n	8004c10 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6818      	ldr	r0, [r3, #0]
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	6819      	ldr	r1, [r3, #0]
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	461a      	mov	r2, r3
 8004c00:	f7ff fbe6 	bl	80043d0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2100      	movs	r1, #0
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7ff fba1 	bl	8004352 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	695a      	ldr	r2, [r3, #20]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	08db      	lsrs	r3, r3, #3
 8004c1c:	f003 0303 	and.w	r3, r3, #3
 8004c20:	005b      	lsls	r3, r3, #1
 8004c22:	fa02 f303 	lsl.w	r3, r2, r3
 8004c26:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	2b04      	cmp	r3, #4
 8004c30:	d022      	beq.n	8004c78 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6818      	ldr	r0, [r3, #0]
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	6919      	ldr	r1, [r3, #16]
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004c42:	f7ff fafb 	bl	800423c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6818      	ldr	r0, [r3, #0]
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	6919      	ldr	r1, [r3, #16]
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	461a      	mov	r2, r3
 8004c54:	f7ff fb47 	bl	80042e6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6818      	ldr	r0, [r3, #0]
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d102      	bne.n	8004c6e <HAL_ADC_ConfigChannel+0x126>
 8004c68:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004c6c:	e000      	b.n	8004c70 <HAL_ADC_ConfigChannel+0x128>
 8004c6e:	2300      	movs	r3, #0
 8004c70:	461a      	mov	r2, r3
 8004c72:	f7ff fb53 	bl	800431c <LL_ADC_SetOffsetSaturation>
 8004c76:	e17b      	b.n	8004f70 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2100      	movs	r1, #0
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7ff fb00 	bl	8004284 <LL_ADC_GetOffsetChannel>
 8004c84:	4603      	mov	r3, r0
 8004c86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d10a      	bne.n	8004ca4 <HAL_ADC_ConfigChannel+0x15c>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2100      	movs	r1, #0
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7ff faf5 	bl	8004284 <LL_ADC_GetOffsetChannel>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	0e9b      	lsrs	r3, r3, #26
 8004c9e:	f003 021f 	and.w	r2, r3, #31
 8004ca2:	e01e      	b.n	8004ce2 <HAL_ADC_ConfigChannel+0x19a>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2100      	movs	r1, #0
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7ff faea 	bl	8004284 <LL_ADC_GetOffsetChannel>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cb6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004cba:	fa93 f3a3 	rbit	r3, r3
 8004cbe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004cc2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004cc6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004cca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d101      	bne.n	8004cd6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8004cd2:	2320      	movs	r3, #32
 8004cd4:	e004      	b.n	8004ce0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8004cd6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004cda:	fab3 f383 	clz	r3, r3
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d105      	bne.n	8004cfa <HAL_ADC_ConfigChannel+0x1b2>
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	0e9b      	lsrs	r3, r3, #26
 8004cf4:	f003 031f 	and.w	r3, r3, #31
 8004cf8:	e018      	b.n	8004d2c <HAL_ADC_ConfigChannel+0x1e4>
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d02:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004d06:	fa93 f3a3 	rbit	r3, r3
 8004d0a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8004d0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004d12:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8004d16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d101      	bne.n	8004d22 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8004d1e:	2320      	movs	r3, #32
 8004d20:	e004      	b.n	8004d2c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8004d22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004d26:	fab3 f383 	clz	r3, r3
 8004d2a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d106      	bne.n	8004d3e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2200      	movs	r2, #0
 8004d36:	2100      	movs	r1, #0
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f7ff fab9 	bl	80042b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2101      	movs	r1, #1
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7ff fa9d 	bl	8004284 <LL_ADC_GetOffsetChannel>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d10a      	bne.n	8004d6a <HAL_ADC_ConfigChannel+0x222>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2101      	movs	r1, #1
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7ff fa92 	bl	8004284 <LL_ADC_GetOffsetChannel>
 8004d60:	4603      	mov	r3, r0
 8004d62:	0e9b      	lsrs	r3, r3, #26
 8004d64:	f003 021f 	and.w	r2, r3, #31
 8004d68:	e01e      	b.n	8004da8 <HAL_ADC_ConfigChannel+0x260>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2101      	movs	r1, #1
 8004d70:	4618      	mov	r0, r3
 8004d72:	f7ff fa87 	bl	8004284 <LL_ADC_GetOffsetChannel>
 8004d76:	4603      	mov	r3, r0
 8004d78:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d7c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004d80:	fa93 f3a3 	rbit	r3, r3
 8004d84:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004d88:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004d8c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004d90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d101      	bne.n	8004d9c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004d98:	2320      	movs	r3, #32
 8004d9a:	e004      	b.n	8004da6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004d9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004da0:	fab3 f383 	clz	r3, r3
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d105      	bne.n	8004dc0 <HAL_ADC_ConfigChannel+0x278>
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	0e9b      	lsrs	r3, r3, #26
 8004dba:	f003 031f 	and.w	r3, r3, #31
 8004dbe:	e018      	b.n	8004df2 <HAL_ADC_ConfigChannel+0x2aa>
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004dcc:	fa93 f3a3 	rbit	r3, r3
 8004dd0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004dd4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004dd8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004ddc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d101      	bne.n	8004de8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004de4:	2320      	movs	r3, #32
 8004de6:	e004      	b.n	8004df2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004de8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004dec:	fab3 f383 	clz	r3, r3
 8004df0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d106      	bne.n	8004e04 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	2101      	movs	r1, #1
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7ff fa56 	bl	80042b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2102      	movs	r1, #2
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7ff fa3a 	bl	8004284 <LL_ADC_GetOffsetChannel>
 8004e10:	4603      	mov	r3, r0
 8004e12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d10a      	bne.n	8004e30 <HAL_ADC_ConfigChannel+0x2e8>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2102      	movs	r1, #2
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7ff fa2f 	bl	8004284 <LL_ADC_GetOffsetChannel>
 8004e26:	4603      	mov	r3, r0
 8004e28:	0e9b      	lsrs	r3, r3, #26
 8004e2a:	f003 021f 	and.w	r2, r3, #31
 8004e2e:	e01e      	b.n	8004e6e <HAL_ADC_ConfigChannel+0x326>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2102      	movs	r1, #2
 8004e36:	4618      	mov	r0, r3
 8004e38:	f7ff fa24 	bl	8004284 <LL_ADC_GetOffsetChannel>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e46:	fa93 f3a3 	rbit	r3, r3
 8004e4a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004e4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004e52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8004e56:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d101      	bne.n	8004e62 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8004e5e:	2320      	movs	r3, #32
 8004e60:	e004      	b.n	8004e6c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8004e62:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004e66:	fab3 f383 	clz	r3, r3
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d105      	bne.n	8004e86 <HAL_ADC_ConfigChannel+0x33e>
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	0e9b      	lsrs	r3, r3, #26
 8004e80:	f003 031f 	and.w	r3, r3, #31
 8004e84:	e016      	b.n	8004eb4 <HAL_ADC_ConfigChannel+0x36c>
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004e92:	fa93 f3a3 	rbit	r3, r3
 8004e96:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004e98:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004e9a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004e9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8004ea6:	2320      	movs	r3, #32
 8004ea8:	e004      	b.n	8004eb4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004eaa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004eae:	fab3 f383 	clz	r3, r3
 8004eb2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d106      	bne.n	8004ec6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	2102      	movs	r1, #2
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f7ff f9f5 	bl	80042b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2103      	movs	r1, #3
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f7ff f9d9 	bl	8004284 <LL_ADC_GetOffsetChannel>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10a      	bne.n	8004ef2 <HAL_ADC_ConfigChannel+0x3aa>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2103      	movs	r1, #3
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7ff f9ce 	bl	8004284 <LL_ADC_GetOffsetChannel>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	0e9b      	lsrs	r3, r3, #26
 8004eec:	f003 021f 	and.w	r2, r3, #31
 8004ef0:	e017      	b.n	8004f22 <HAL_ADC_ConfigChannel+0x3da>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2103      	movs	r1, #3
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f7ff f9c3 	bl	8004284 <LL_ADC_GetOffsetChannel>
 8004efe:	4603      	mov	r3, r0
 8004f00:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f04:	fa93 f3a3 	rbit	r3, r3
 8004f08:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004f0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004f0c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004f0e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d101      	bne.n	8004f18 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004f14:	2320      	movs	r3, #32
 8004f16:	e003      	b.n	8004f20 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004f18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f1a:	fab3 f383 	clz	r3, r3
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d105      	bne.n	8004f3a <HAL_ADC_ConfigChannel+0x3f2>
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	0e9b      	lsrs	r3, r3, #26
 8004f34:	f003 031f 	and.w	r3, r3, #31
 8004f38:	e011      	b.n	8004f5e <HAL_ADC_ConfigChannel+0x416>
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f40:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004f42:	fa93 f3a3 	rbit	r3, r3
 8004f46:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004f48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004f4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d101      	bne.n	8004f56 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8004f52:	2320      	movs	r3, #32
 8004f54:	e003      	b.n	8004f5e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8004f56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f58:	fab3 f383 	clz	r3, r3
 8004f5c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d106      	bne.n	8004f70 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2200      	movs	r2, #0
 8004f68:	2103      	movs	r1, #3
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f7ff f9a0 	bl	80042b0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4618      	mov	r0, r3
 8004f76:	f7ff faeb 	bl	8004550 <LL_ADC_IsEnabled>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f040 813d 	bne.w	80051fc <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6818      	ldr	r0, [r3, #0]
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	6819      	ldr	r1, [r3, #0]
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	461a      	mov	r2, r3
 8004f90:	f7ff fa4a 	bl	8004428 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	4aa2      	ldr	r2, [pc, #648]	@ (8005224 <HAL_ADC_ConfigChannel+0x6dc>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	f040 812e 	bne.w	80051fc <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d10b      	bne.n	8004fc8 <HAL_ADC_ConfigChannel+0x480>
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	0e9b      	lsrs	r3, r3, #26
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	f003 031f 	and.w	r3, r3, #31
 8004fbc:	2b09      	cmp	r3, #9
 8004fbe:	bf94      	ite	ls
 8004fc0:	2301      	movls	r3, #1
 8004fc2:	2300      	movhi	r3, #0
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	e019      	b.n	8004ffc <HAL_ADC_ConfigChannel+0x4b4>
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004fd0:	fa93 f3a3 	rbit	r3, r3
 8004fd4:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004fd6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004fd8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004fda:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d101      	bne.n	8004fe4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004fe0:	2320      	movs	r3, #32
 8004fe2:	e003      	b.n	8004fec <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004fe4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004fe6:	fab3 f383 	clz	r3, r3
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	3301      	adds	r3, #1
 8004fee:	f003 031f 	and.w	r3, r3, #31
 8004ff2:	2b09      	cmp	r3, #9
 8004ff4:	bf94      	ite	ls
 8004ff6:	2301      	movls	r3, #1
 8004ff8:	2300      	movhi	r3, #0
 8004ffa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d079      	beq.n	80050f4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005008:	2b00      	cmp	r3, #0
 800500a:	d107      	bne.n	800501c <HAL_ADC_ConfigChannel+0x4d4>
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	0e9b      	lsrs	r3, r3, #26
 8005012:	3301      	adds	r3, #1
 8005014:	069b      	lsls	r3, r3, #26
 8005016:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800501a:	e015      	b.n	8005048 <HAL_ADC_ConfigChannel+0x500>
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005022:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005024:	fa93 f3a3 	rbit	r3, r3
 8005028:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800502a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800502c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800502e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005030:	2b00      	cmp	r3, #0
 8005032:	d101      	bne.n	8005038 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8005034:	2320      	movs	r3, #32
 8005036:	e003      	b.n	8005040 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8005038:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800503a:	fab3 f383 	clz	r3, r3
 800503e:	b2db      	uxtb	r3, r3
 8005040:	3301      	adds	r3, #1
 8005042:	069b      	lsls	r3, r3, #26
 8005044:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005050:	2b00      	cmp	r3, #0
 8005052:	d109      	bne.n	8005068 <HAL_ADC_ConfigChannel+0x520>
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	0e9b      	lsrs	r3, r3, #26
 800505a:	3301      	adds	r3, #1
 800505c:	f003 031f 	and.w	r3, r3, #31
 8005060:	2101      	movs	r1, #1
 8005062:	fa01 f303 	lsl.w	r3, r1, r3
 8005066:	e017      	b.n	8005098 <HAL_ADC_ConfigChannel+0x550>
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800506e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005070:	fa93 f3a3 	rbit	r3, r3
 8005074:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8005076:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005078:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800507a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800507c:	2b00      	cmp	r3, #0
 800507e:	d101      	bne.n	8005084 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8005080:	2320      	movs	r3, #32
 8005082:	e003      	b.n	800508c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8005084:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005086:	fab3 f383 	clz	r3, r3
 800508a:	b2db      	uxtb	r3, r3
 800508c:	3301      	adds	r3, #1
 800508e:	f003 031f 	and.w	r3, r3, #31
 8005092:	2101      	movs	r1, #1
 8005094:	fa01 f303 	lsl.w	r3, r1, r3
 8005098:	ea42 0103 	orr.w	r1, r2, r3
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d10a      	bne.n	80050be <HAL_ADC_ConfigChannel+0x576>
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	0e9b      	lsrs	r3, r3, #26
 80050ae:	3301      	adds	r3, #1
 80050b0:	f003 021f 	and.w	r2, r3, #31
 80050b4:	4613      	mov	r3, r2
 80050b6:	005b      	lsls	r3, r3, #1
 80050b8:	4413      	add	r3, r2
 80050ba:	051b      	lsls	r3, r3, #20
 80050bc:	e018      	b.n	80050f0 <HAL_ADC_ConfigChannel+0x5a8>
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050c6:	fa93 f3a3 	rbit	r3, r3
 80050ca:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80050cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80050d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d101      	bne.n	80050da <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80050d6:	2320      	movs	r3, #32
 80050d8:	e003      	b.n	80050e2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80050da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050dc:	fab3 f383 	clz	r3, r3
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	3301      	adds	r3, #1
 80050e4:	f003 021f 	and.w	r2, r3, #31
 80050e8:	4613      	mov	r3, r2
 80050ea:	005b      	lsls	r3, r3, #1
 80050ec:	4413      	add	r3, r2
 80050ee:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80050f0:	430b      	orrs	r3, r1
 80050f2:	e07e      	b.n	80051f2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d107      	bne.n	8005110 <HAL_ADC_ConfigChannel+0x5c8>
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	0e9b      	lsrs	r3, r3, #26
 8005106:	3301      	adds	r3, #1
 8005108:	069b      	lsls	r3, r3, #26
 800510a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800510e:	e015      	b.n	800513c <HAL_ADC_ConfigChannel+0x5f4>
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005118:	fa93 f3a3 	rbit	r3, r3
 800511c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800511e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005120:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8005122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005124:	2b00      	cmp	r3, #0
 8005126:	d101      	bne.n	800512c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8005128:	2320      	movs	r3, #32
 800512a:	e003      	b.n	8005134 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800512c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800512e:	fab3 f383 	clz	r3, r3
 8005132:	b2db      	uxtb	r3, r3
 8005134:	3301      	adds	r3, #1
 8005136:	069b      	lsls	r3, r3, #26
 8005138:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005144:	2b00      	cmp	r3, #0
 8005146:	d109      	bne.n	800515c <HAL_ADC_ConfigChannel+0x614>
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	0e9b      	lsrs	r3, r3, #26
 800514e:	3301      	adds	r3, #1
 8005150:	f003 031f 	and.w	r3, r3, #31
 8005154:	2101      	movs	r1, #1
 8005156:	fa01 f303 	lsl.w	r3, r1, r3
 800515a:	e017      	b.n	800518c <HAL_ADC_ConfigChannel+0x644>
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005162:	6a3b      	ldr	r3, [r7, #32]
 8005164:	fa93 f3a3 	rbit	r3, r3
 8005168:	61fb      	str	r3, [r7, #28]
  return result;
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800516e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005170:	2b00      	cmp	r3, #0
 8005172:	d101      	bne.n	8005178 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8005174:	2320      	movs	r3, #32
 8005176:	e003      	b.n	8005180 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8005178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800517a:	fab3 f383 	clz	r3, r3
 800517e:	b2db      	uxtb	r3, r3
 8005180:	3301      	adds	r3, #1
 8005182:	f003 031f 	and.w	r3, r3, #31
 8005186:	2101      	movs	r1, #1
 8005188:	fa01 f303 	lsl.w	r3, r1, r3
 800518c:	ea42 0103 	orr.w	r1, r2, r3
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005198:	2b00      	cmp	r3, #0
 800519a:	d10d      	bne.n	80051b8 <HAL_ADC_ConfigChannel+0x670>
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	0e9b      	lsrs	r3, r3, #26
 80051a2:	3301      	adds	r3, #1
 80051a4:	f003 021f 	and.w	r2, r3, #31
 80051a8:	4613      	mov	r3, r2
 80051aa:	005b      	lsls	r3, r3, #1
 80051ac:	4413      	add	r3, r2
 80051ae:	3b1e      	subs	r3, #30
 80051b0:	051b      	lsls	r3, r3, #20
 80051b2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80051b6:	e01b      	b.n	80051f0 <HAL_ADC_ConfigChannel+0x6a8>
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	fa93 f3a3 	rbit	r3, r3
 80051c4:	613b      	str	r3, [r7, #16]
  return result;
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d101      	bne.n	80051d4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80051d0:	2320      	movs	r3, #32
 80051d2:	e003      	b.n	80051dc <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	fab3 f383 	clz	r3, r3
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	3301      	adds	r3, #1
 80051de:	f003 021f 	and.w	r2, r3, #31
 80051e2:	4613      	mov	r3, r2
 80051e4:	005b      	lsls	r3, r3, #1
 80051e6:	4413      	add	r3, r2
 80051e8:	3b1e      	subs	r3, #30
 80051ea:	051b      	lsls	r3, r3, #20
 80051ec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80051f0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80051f2:	683a      	ldr	r2, [r7, #0]
 80051f4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80051f6:	4619      	mov	r1, r3
 80051f8:	f7ff f8ea 	bl	80043d0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	4b09      	ldr	r3, [pc, #36]	@ (8005228 <HAL_ADC_ConfigChannel+0x6e0>)
 8005202:	4013      	ands	r3, r2
 8005204:	2b00      	cmp	r3, #0
 8005206:	f000 80be 	beq.w	8005386 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005212:	d004      	beq.n	800521e <HAL_ADC_ConfigChannel+0x6d6>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a04      	ldr	r2, [pc, #16]	@ (800522c <HAL_ADC_ConfigChannel+0x6e4>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d10a      	bne.n	8005234 <HAL_ADC_ConfigChannel+0x6ec>
 800521e:	4b04      	ldr	r3, [pc, #16]	@ (8005230 <HAL_ADC_ConfigChannel+0x6e8>)
 8005220:	e009      	b.n	8005236 <HAL_ADC_ConfigChannel+0x6ee>
 8005222:	bf00      	nop
 8005224:	407f0000 	.word	0x407f0000
 8005228:	80080000 	.word	0x80080000
 800522c:	50000100 	.word	0x50000100
 8005230:	50000300 	.word	0x50000300
 8005234:	4b59      	ldr	r3, [pc, #356]	@ (800539c <HAL_ADC_ConfigChannel+0x854>)
 8005236:	4618      	mov	r0, r3
 8005238:	f7fe fff2 	bl	8004220 <LL_ADC_GetCommonPathInternalCh>
 800523c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a56      	ldr	r2, [pc, #344]	@ (80053a0 <HAL_ADC_ConfigChannel+0x858>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d004      	beq.n	8005254 <HAL_ADC_ConfigChannel+0x70c>
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a55      	ldr	r2, [pc, #340]	@ (80053a4 <HAL_ADC_ConfigChannel+0x85c>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d13a      	bne.n	80052ca <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005254:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005258:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800525c:	2b00      	cmp	r3, #0
 800525e:	d134      	bne.n	80052ca <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005268:	d005      	beq.n	8005276 <HAL_ADC_ConfigChannel+0x72e>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a4e      	ldr	r2, [pc, #312]	@ (80053a8 <HAL_ADC_ConfigChannel+0x860>)
 8005270:	4293      	cmp	r3, r2
 8005272:	f040 8085 	bne.w	8005380 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800527e:	d004      	beq.n	800528a <HAL_ADC_ConfigChannel+0x742>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a49      	ldr	r2, [pc, #292]	@ (80053ac <HAL_ADC_ConfigChannel+0x864>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d101      	bne.n	800528e <HAL_ADC_ConfigChannel+0x746>
 800528a:	4a49      	ldr	r2, [pc, #292]	@ (80053b0 <HAL_ADC_ConfigChannel+0x868>)
 800528c:	e000      	b.n	8005290 <HAL_ADC_ConfigChannel+0x748>
 800528e:	4a43      	ldr	r2, [pc, #268]	@ (800539c <HAL_ADC_ConfigChannel+0x854>)
 8005290:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005294:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005298:	4619      	mov	r1, r3
 800529a:	4610      	mov	r0, r2
 800529c:	f7fe ffad 	bl	80041fa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80052a0:	4b44      	ldr	r3, [pc, #272]	@ (80053b4 <HAL_ADC_ConfigChannel+0x86c>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	099b      	lsrs	r3, r3, #6
 80052a6:	4a44      	ldr	r2, [pc, #272]	@ (80053b8 <HAL_ADC_ConfigChannel+0x870>)
 80052a8:	fba2 2303 	umull	r2, r3, r2, r3
 80052ac:	099b      	lsrs	r3, r3, #6
 80052ae:	1c5a      	adds	r2, r3, #1
 80052b0:	4613      	mov	r3, r2
 80052b2:	005b      	lsls	r3, r3, #1
 80052b4:	4413      	add	r3, r2
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80052ba:	e002      	b.n	80052c2 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	3b01      	subs	r3, #1
 80052c0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1f9      	bne.n	80052bc <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80052c8:	e05a      	b.n	8005380 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a3b      	ldr	r2, [pc, #236]	@ (80053bc <HAL_ADC_ConfigChannel+0x874>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d125      	bne.n	8005320 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80052d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80052d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d11f      	bne.n	8005320 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a31      	ldr	r2, [pc, #196]	@ (80053ac <HAL_ADC_ConfigChannel+0x864>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d104      	bne.n	80052f4 <HAL_ADC_ConfigChannel+0x7ac>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a34      	ldr	r2, [pc, #208]	@ (80053c0 <HAL_ADC_ConfigChannel+0x878>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d047      	beq.n	8005384 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80052fc:	d004      	beq.n	8005308 <HAL_ADC_ConfigChannel+0x7c0>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a2a      	ldr	r2, [pc, #168]	@ (80053ac <HAL_ADC_ConfigChannel+0x864>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d101      	bne.n	800530c <HAL_ADC_ConfigChannel+0x7c4>
 8005308:	4a29      	ldr	r2, [pc, #164]	@ (80053b0 <HAL_ADC_ConfigChannel+0x868>)
 800530a:	e000      	b.n	800530e <HAL_ADC_ConfigChannel+0x7c6>
 800530c:	4a23      	ldr	r2, [pc, #140]	@ (800539c <HAL_ADC_ConfigChannel+0x854>)
 800530e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005312:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005316:	4619      	mov	r1, r3
 8005318:	4610      	mov	r0, r2
 800531a:	f7fe ff6e 	bl	80041fa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800531e:	e031      	b.n	8005384 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a27      	ldr	r2, [pc, #156]	@ (80053c4 <HAL_ADC_ConfigChannel+0x87c>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d12d      	bne.n	8005386 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800532a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800532e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005332:	2b00      	cmp	r3, #0
 8005334:	d127      	bne.n	8005386 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a1c      	ldr	r2, [pc, #112]	@ (80053ac <HAL_ADC_ConfigChannel+0x864>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d022      	beq.n	8005386 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005348:	d004      	beq.n	8005354 <HAL_ADC_ConfigChannel+0x80c>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a17      	ldr	r2, [pc, #92]	@ (80053ac <HAL_ADC_ConfigChannel+0x864>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d101      	bne.n	8005358 <HAL_ADC_ConfigChannel+0x810>
 8005354:	4a16      	ldr	r2, [pc, #88]	@ (80053b0 <HAL_ADC_ConfigChannel+0x868>)
 8005356:	e000      	b.n	800535a <HAL_ADC_ConfigChannel+0x812>
 8005358:	4a10      	ldr	r2, [pc, #64]	@ (800539c <HAL_ADC_ConfigChannel+0x854>)
 800535a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800535e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005362:	4619      	mov	r1, r3
 8005364:	4610      	mov	r0, r2
 8005366:	f7fe ff48 	bl	80041fa <LL_ADC_SetCommonPathInternalCh>
 800536a:	e00c      	b.n	8005386 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005370:	f043 0220 	orr.w	r2, r3, #32
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800537e:	e002      	b.n	8005386 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005380:	bf00      	nop
 8005382:	e000      	b.n	8005386 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005384:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800538e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005392:	4618      	mov	r0, r3
 8005394:	37d8      	adds	r7, #216	@ 0xd8
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	50000700 	.word	0x50000700
 80053a0:	c3210000 	.word	0xc3210000
 80053a4:	90c00010 	.word	0x90c00010
 80053a8:	50000600 	.word	0x50000600
 80053ac:	50000100 	.word	0x50000100
 80053b0:	50000300 	.word	0x50000300
 80053b4:	20000234 	.word	0x20000234
 80053b8:	053e2d63 	.word	0x053e2d63
 80053bc:	c7520000 	.word	0xc7520000
 80053c0:	50000500 	.word	0x50000500
 80053c4:	cb840000 	.word	0xcb840000

080053c8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80053d0:	2300      	movs	r3, #0
 80053d2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4618      	mov	r0, r3
 80053da:	f7ff f8b9 	bl	8004550 <LL_ADC_IsEnabled>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d176      	bne.n	80054d2 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	689a      	ldr	r2, [r3, #8]
 80053ea:	4b3c      	ldr	r3, [pc, #240]	@ (80054dc <ADC_Enable+0x114>)
 80053ec:	4013      	ands	r3, r2
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00d      	beq.n	800540e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053f6:	f043 0210 	orr.w	r2, r3, #16
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005402:	f043 0201 	orr.w	r2, r3, #1
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e062      	b.n	80054d4 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4618      	mov	r0, r3
 8005414:	f7ff f888 	bl	8004528 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005420:	d004      	beq.n	800542c <ADC_Enable+0x64>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a2e      	ldr	r2, [pc, #184]	@ (80054e0 <ADC_Enable+0x118>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d101      	bne.n	8005430 <ADC_Enable+0x68>
 800542c:	4b2d      	ldr	r3, [pc, #180]	@ (80054e4 <ADC_Enable+0x11c>)
 800542e:	e000      	b.n	8005432 <ADC_Enable+0x6a>
 8005430:	4b2d      	ldr	r3, [pc, #180]	@ (80054e8 <ADC_Enable+0x120>)
 8005432:	4618      	mov	r0, r3
 8005434:	f7fe fef4 	bl	8004220 <LL_ADC_GetCommonPathInternalCh>
 8005438:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800543a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800543e:	2b00      	cmp	r3, #0
 8005440:	d013      	beq.n	800546a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005442:	4b2a      	ldr	r3, [pc, #168]	@ (80054ec <ADC_Enable+0x124>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	099b      	lsrs	r3, r3, #6
 8005448:	4a29      	ldr	r2, [pc, #164]	@ (80054f0 <ADC_Enable+0x128>)
 800544a:	fba2 2303 	umull	r2, r3, r2, r3
 800544e:	099b      	lsrs	r3, r3, #6
 8005450:	1c5a      	adds	r2, r3, #1
 8005452:	4613      	mov	r3, r2
 8005454:	005b      	lsls	r3, r3, #1
 8005456:	4413      	add	r3, r2
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800545c:	e002      	b.n	8005464 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	3b01      	subs	r3, #1
 8005462:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d1f9      	bne.n	800545e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800546a:	f7fe fea7 	bl	80041bc <HAL_GetTick>
 800546e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005470:	e028      	b.n	80054c4 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4618      	mov	r0, r3
 8005478:	f7ff f86a 	bl	8004550 <LL_ADC_IsEnabled>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d104      	bne.n	800548c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4618      	mov	r0, r3
 8005488:	f7ff f84e 	bl	8004528 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800548c:	f7fe fe96 	bl	80041bc <HAL_GetTick>
 8005490:	4602      	mov	r2, r0
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	2b02      	cmp	r3, #2
 8005498:	d914      	bls.n	80054c4 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0301 	and.w	r3, r3, #1
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d00d      	beq.n	80054c4 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054ac:	f043 0210 	orr.w	r2, r3, #16
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054b8:	f043 0201 	orr.w	r2, r3, #1
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e007      	b.n	80054d4 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0301 	and.w	r3, r3, #1
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d1cf      	bne.n	8005472 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80054d2:	2300      	movs	r3, #0
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3710      	adds	r7, #16
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	8000003f 	.word	0x8000003f
 80054e0:	50000100 	.word	0x50000100
 80054e4:	50000300 	.word	0x50000300
 80054e8:	50000700 	.word	0x50000700
 80054ec:	20000234 	.word	0x20000234
 80054f0:	053e2d63 	.word	0x053e2d63

080054f4 <LL_ADC_IsEnabled>:
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	f003 0301 	and.w	r3, r3, #1
 8005504:	2b01      	cmp	r3, #1
 8005506:	d101      	bne.n	800550c <LL_ADC_IsEnabled+0x18>
 8005508:	2301      	movs	r3, #1
 800550a:	e000      	b.n	800550e <LL_ADC_IsEnabled+0x1a>
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	370c      	adds	r7, #12
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr

0800551a <LL_ADC_REG_IsConversionOngoing>:
{
 800551a:	b480      	push	{r7}
 800551c:	b083      	sub	sp, #12
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	f003 0304 	and.w	r3, r3, #4
 800552a:	2b04      	cmp	r3, #4
 800552c:	d101      	bne.n	8005532 <LL_ADC_REG_IsConversionOngoing+0x18>
 800552e:	2301      	movs	r3, #1
 8005530:	e000      	b.n	8005534 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005532:	2300      	movs	r3, #0
}
 8005534:	4618      	mov	r0, r3
 8005536:	370c      	adds	r7, #12
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005540:	b590      	push	{r4, r7, lr}
 8005542:	b0a1      	sub	sp, #132	@ 0x84
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800554a:	2300      	movs	r3, #0
 800554c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005556:	2b01      	cmp	r3, #1
 8005558:	d101      	bne.n	800555e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800555a:	2302      	movs	r3, #2
 800555c:	e0e7      	b.n	800572e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2201      	movs	r2, #1
 8005562:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005566:	2300      	movs	r3, #0
 8005568:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800556a:	2300      	movs	r3, #0
 800556c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005576:	d102      	bne.n	800557e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005578:	4b6f      	ldr	r3, [pc, #444]	@ (8005738 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800557a:	60bb      	str	r3, [r7, #8]
 800557c:	e009      	b.n	8005592 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a6e      	ldr	r2, [pc, #440]	@ (800573c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d102      	bne.n	800558e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005588:	4b6d      	ldr	r3, [pc, #436]	@ (8005740 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800558a:	60bb      	str	r3, [r7, #8]
 800558c:	e001      	b.n	8005592 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800558e:	2300      	movs	r3, #0
 8005590:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d10b      	bne.n	80055b0 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800559c:	f043 0220 	orr.w	r2, r3, #32
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e0be      	b.n	800572e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7ff ffb1 	bl	800551a <LL_ADC_REG_IsConversionOngoing>
 80055b8:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4618      	mov	r0, r3
 80055c0:	f7ff ffab 	bl	800551a <LL_ADC_REG_IsConversionOngoing>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	f040 80a0 	bne.w	800570c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80055cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	f040 809c 	bne.w	800570c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80055dc:	d004      	beq.n	80055e8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a55      	ldr	r2, [pc, #340]	@ (8005738 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d101      	bne.n	80055ec <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80055e8:	4b56      	ldr	r3, [pc, #344]	@ (8005744 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80055ea:	e000      	b.n	80055ee <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80055ec:	4b56      	ldr	r3, [pc, #344]	@ (8005748 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80055ee:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d04b      	beq.n	8005690 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80055f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	6859      	ldr	r1, [r3, #4]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800560a:	035b      	lsls	r3, r3, #13
 800560c:	430b      	orrs	r3, r1
 800560e:	431a      	orrs	r2, r3
 8005610:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005612:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800561c:	d004      	beq.n	8005628 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a45      	ldr	r2, [pc, #276]	@ (8005738 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d10f      	bne.n	8005648 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8005628:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800562c:	f7ff ff62 	bl	80054f4 <LL_ADC_IsEnabled>
 8005630:	4604      	mov	r4, r0
 8005632:	4841      	ldr	r0, [pc, #260]	@ (8005738 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005634:	f7ff ff5e 	bl	80054f4 <LL_ADC_IsEnabled>
 8005638:	4603      	mov	r3, r0
 800563a:	4323      	orrs	r3, r4
 800563c:	2b00      	cmp	r3, #0
 800563e:	bf0c      	ite	eq
 8005640:	2301      	moveq	r3, #1
 8005642:	2300      	movne	r3, #0
 8005644:	b2db      	uxtb	r3, r3
 8005646:	e012      	b.n	800566e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8005648:	483c      	ldr	r0, [pc, #240]	@ (800573c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800564a:	f7ff ff53 	bl	80054f4 <LL_ADC_IsEnabled>
 800564e:	4604      	mov	r4, r0
 8005650:	483b      	ldr	r0, [pc, #236]	@ (8005740 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005652:	f7ff ff4f 	bl	80054f4 <LL_ADC_IsEnabled>
 8005656:	4603      	mov	r3, r0
 8005658:	431c      	orrs	r4, r3
 800565a:	483c      	ldr	r0, [pc, #240]	@ (800574c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800565c:	f7ff ff4a 	bl	80054f4 <LL_ADC_IsEnabled>
 8005660:	4603      	mov	r3, r0
 8005662:	4323      	orrs	r3, r4
 8005664:	2b00      	cmp	r3, #0
 8005666:	bf0c      	ite	eq
 8005668:	2301      	moveq	r3, #1
 800566a:	2300      	movne	r3, #0
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b00      	cmp	r3, #0
 8005670:	d056      	beq.n	8005720 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005672:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800567a:	f023 030f 	bic.w	r3, r3, #15
 800567e:	683a      	ldr	r2, [r7, #0]
 8005680:	6811      	ldr	r1, [r2, #0]
 8005682:	683a      	ldr	r2, [r7, #0]
 8005684:	6892      	ldr	r2, [r2, #8]
 8005686:	430a      	orrs	r2, r1
 8005688:	431a      	orrs	r2, r3
 800568a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800568c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800568e:	e047      	b.n	8005720 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005690:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005698:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800569a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80056a4:	d004      	beq.n	80056b0 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a23      	ldr	r2, [pc, #140]	@ (8005738 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d10f      	bne.n	80056d0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80056b0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80056b4:	f7ff ff1e 	bl	80054f4 <LL_ADC_IsEnabled>
 80056b8:	4604      	mov	r4, r0
 80056ba:	481f      	ldr	r0, [pc, #124]	@ (8005738 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80056bc:	f7ff ff1a 	bl	80054f4 <LL_ADC_IsEnabled>
 80056c0:	4603      	mov	r3, r0
 80056c2:	4323      	orrs	r3, r4
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	bf0c      	ite	eq
 80056c8:	2301      	moveq	r3, #1
 80056ca:	2300      	movne	r3, #0
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	e012      	b.n	80056f6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80056d0:	481a      	ldr	r0, [pc, #104]	@ (800573c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80056d2:	f7ff ff0f 	bl	80054f4 <LL_ADC_IsEnabled>
 80056d6:	4604      	mov	r4, r0
 80056d8:	4819      	ldr	r0, [pc, #100]	@ (8005740 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80056da:	f7ff ff0b 	bl	80054f4 <LL_ADC_IsEnabled>
 80056de:	4603      	mov	r3, r0
 80056e0:	431c      	orrs	r4, r3
 80056e2:	481a      	ldr	r0, [pc, #104]	@ (800574c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80056e4:	f7ff ff06 	bl	80054f4 <LL_ADC_IsEnabled>
 80056e8:	4603      	mov	r3, r0
 80056ea:	4323      	orrs	r3, r4
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	bf0c      	ite	eq
 80056f0:	2301      	moveq	r3, #1
 80056f2:	2300      	movne	r3, #0
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d012      	beq.n	8005720 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80056fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005702:	f023 030f 	bic.w	r3, r3, #15
 8005706:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005708:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800570a:	e009      	b.n	8005720 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005710:	f043 0220 	orr.w	r2, r3, #32
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800571e:	e000      	b.n	8005722 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005720:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800572a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800572e:	4618      	mov	r0, r3
 8005730:	3784      	adds	r7, #132	@ 0x84
 8005732:	46bd      	mov	sp, r7
 8005734:	bd90      	pop	{r4, r7, pc}
 8005736:	bf00      	nop
 8005738:	50000100 	.word	0x50000100
 800573c:	50000400 	.word	0x50000400
 8005740:	50000500 	.word	0x50000500
 8005744:	50000300 	.word	0x50000300
 8005748:	50000700 	.word	0x50000700
 800574c:	50000600 	.word	0x50000600

08005750 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005750:	b480      	push	{r7}
 8005752:	b085      	sub	sp, #20
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f003 0307 	and.w	r3, r3, #7
 800575e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005760:	4b0c      	ldr	r3, [pc, #48]	@ (8005794 <__NVIC_SetPriorityGrouping+0x44>)
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005766:	68ba      	ldr	r2, [r7, #8]
 8005768:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800576c:	4013      	ands	r3, r2
 800576e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005778:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800577c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005780:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005782:	4a04      	ldr	r2, [pc, #16]	@ (8005794 <__NVIC_SetPriorityGrouping+0x44>)
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	60d3      	str	r3, [r2, #12]
}
 8005788:	bf00      	nop
 800578a:	3714      	adds	r7, #20
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr
 8005794:	e000ed00 	.word	0xe000ed00

08005798 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005798:	b480      	push	{r7}
 800579a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800579c:	4b04      	ldr	r3, [pc, #16]	@ (80057b0 <__NVIC_GetPriorityGrouping+0x18>)
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	0a1b      	lsrs	r3, r3, #8
 80057a2:	f003 0307 	and.w	r3, r3, #7
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr
 80057b0:	e000ed00 	.word	0xe000ed00

080057b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	4603      	mov	r3, r0
 80057bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	db0b      	blt.n	80057de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80057c6:	79fb      	ldrb	r3, [r7, #7]
 80057c8:	f003 021f 	and.w	r2, r3, #31
 80057cc:	4907      	ldr	r1, [pc, #28]	@ (80057ec <__NVIC_EnableIRQ+0x38>)
 80057ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057d2:	095b      	lsrs	r3, r3, #5
 80057d4:	2001      	movs	r0, #1
 80057d6:	fa00 f202 	lsl.w	r2, r0, r2
 80057da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80057de:	bf00      	nop
 80057e0:	370c      	adds	r7, #12
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop
 80057ec:	e000e100 	.word	0xe000e100

080057f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	4603      	mov	r3, r0
 80057f8:	6039      	str	r1, [r7, #0]
 80057fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005800:	2b00      	cmp	r3, #0
 8005802:	db0a      	blt.n	800581a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	b2da      	uxtb	r2, r3
 8005808:	490c      	ldr	r1, [pc, #48]	@ (800583c <__NVIC_SetPriority+0x4c>)
 800580a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800580e:	0112      	lsls	r2, r2, #4
 8005810:	b2d2      	uxtb	r2, r2
 8005812:	440b      	add	r3, r1
 8005814:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005818:	e00a      	b.n	8005830 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	b2da      	uxtb	r2, r3
 800581e:	4908      	ldr	r1, [pc, #32]	@ (8005840 <__NVIC_SetPriority+0x50>)
 8005820:	79fb      	ldrb	r3, [r7, #7]
 8005822:	f003 030f 	and.w	r3, r3, #15
 8005826:	3b04      	subs	r3, #4
 8005828:	0112      	lsls	r2, r2, #4
 800582a:	b2d2      	uxtb	r2, r2
 800582c:	440b      	add	r3, r1
 800582e:	761a      	strb	r2, [r3, #24]
}
 8005830:	bf00      	nop
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr
 800583c:	e000e100 	.word	0xe000e100
 8005840:	e000ed00 	.word	0xe000ed00

08005844 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005844:	b480      	push	{r7}
 8005846:	b089      	sub	sp, #36	@ 0x24
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f003 0307 	and.w	r3, r3, #7
 8005856:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	f1c3 0307 	rsb	r3, r3, #7
 800585e:	2b04      	cmp	r3, #4
 8005860:	bf28      	it	cs
 8005862:	2304      	movcs	r3, #4
 8005864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	3304      	adds	r3, #4
 800586a:	2b06      	cmp	r3, #6
 800586c:	d902      	bls.n	8005874 <NVIC_EncodePriority+0x30>
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	3b03      	subs	r3, #3
 8005872:	e000      	b.n	8005876 <NVIC_EncodePriority+0x32>
 8005874:	2300      	movs	r3, #0
 8005876:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005878:	f04f 32ff 	mov.w	r2, #4294967295
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	fa02 f303 	lsl.w	r3, r2, r3
 8005882:	43da      	mvns	r2, r3
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	401a      	ands	r2, r3
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800588c:	f04f 31ff 	mov.w	r1, #4294967295
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	fa01 f303 	lsl.w	r3, r1, r3
 8005896:	43d9      	mvns	r1, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800589c:	4313      	orrs	r3, r2
         );
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3724      	adds	r7, #36	@ 0x24
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
	...

080058ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b082      	sub	sp, #8
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	3b01      	subs	r3, #1
 80058b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80058bc:	d301      	bcc.n	80058c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80058be:	2301      	movs	r3, #1
 80058c0:	e00f      	b.n	80058e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80058c2:	4a0a      	ldr	r2, [pc, #40]	@ (80058ec <SysTick_Config+0x40>)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	3b01      	subs	r3, #1
 80058c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80058ca:	210f      	movs	r1, #15
 80058cc:	f04f 30ff 	mov.w	r0, #4294967295
 80058d0:	f7ff ff8e 	bl	80057f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80058d4:	4b05      	ldr	r3, [pc, #20]	@ (80058ec <SysTick_Config+0x40>)
 80058d6:	2200      	movs	r2, #0
 80058d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80058da:	4b04      	ldr	r3, [pc, #16]	@ (80058ec <SysTick_Config+0x40>)
 80058dc:	2207      	movs	r2, #7
 80058de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3708      	adds	r7, #8
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	e000e010 	.word	0xe000e010

080058f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b082      	sub	sp, #8
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f7ff ff29 	bl	8005750 <__NVIC_SetPriorityGrouping>
}
 80058fe:	bf00      	nop
 8005900:	3708      	adds	r7, #8
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}

08005906 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005906:	b580      	push	{r7, lr}
 8005908:	b086      	sub	sp, #24
 800590a:	af00      	add	r7, sp, #0
 800590c:	4603      	mov	r3, r0
 800590e:	60b9      	str	r1, [r7, #8]
 8005910:	607a      	str	r2, [r7, #4]
 8005912:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005914:	f7ff ff40 	bl	8005798 <__NVIC_GetPriorityGrouping>
 8005918:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	68b9      	ldr	r1, [r7, #8]
 800591e:	6978      	ldr	r0, [r7, #20]
 8005920:	f7ff ff90 	bl	8005844 <NVIC_EncodePriority>
 8005924:	4602      	mov	r2, r0
 8005926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800592a:	4611      	mov	r1, r2
 800592c:	4618      	mov	r0, r3
 800592e:	f7ff ff5f 	bl	80057f0 <__NVIC_SetPriority>
}
 8005932:	bf00      	nop
 8005934:	3718      	adds	r7, #24
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800593a:	b580      	push	{r7, lr}
 800593c:	b082      	sub	sp, #8
 800593e:	af00      	add	r7, sp, #0
 8005940:	4603      	mov	r3, r0
 8005942:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005948:	4618      	mov	r0, r3
 800594a:	f7ff ff33 	bl	80057b4 <__NVIC_EnableIRQ>
}
 800594e:	bf00      	nop
 8005950:	3708      	adds	r7, #8
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}

08005956 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005956:	b580      	push	{r7, lr}
 8005958:	b082      	sub	sp, #8
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f7ff ffa4 	bl	80058ac <SysTick_Config>
 8005964:	4603      	mov	r3, r0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3708      	adds	r7, #8
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
	...

08005970 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d101      	bne.n	8005982 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e08d      	b.n	8005a9e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	461a      	mov	r2, r3
 8005988:	4b47      	ldr	r3, [pc, #284]	@ (8005aa8 <HAL_DMA_Init+0x138>)
 800598a:	429a      	cmp	r2, r3
 800598c:	d80f      	bhi.n	80059ae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	461a      	mov	r2, r3
 8005994:	4b45      	ldr	r3, [pc, #276]	@ (8005aac <HAL_DMA_Init+0x13c>)
 8005996:	4413      	add	r3, r2
 8005998:	4a45      	ldr	r2, [pc, #276]	@ (8005ab0 <HAL_DMA_Init+0x140>)
 800599a:	fba2 2303 	umull	r2, r3, r2, r3
 800599e:	091b      	lsrs	r3, r3, #4
 80059a0:	009a      	lsls	r2, r3, #2
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a42      	ldr	r2, [pc, #264]	@ (8005ab4 <HAL_DMA_Init+0x144>)
 80059aa:	641a      	str	r2, [r3, #64]	@ 0x40
 80059ac:	e00e      	b.n	80059cc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	461a      	mov	r2, r3
 80059b4:	4b40      	ldr	r3, [pc, #256]	@ (8005ab8 <HAL_DMA_Init+0x148>)
 80059b6:	4413      	add	r3, r2
 80059b8:	4a3d      	ldr	r2, [pc, #244]	@ (8005ab0 <HAL_DMA_Init+0x140>)
 80059ba:	fba2 2303 	umull	r2, r3, r2, r3
 80059be:	091b      	lsrs	r3, r3, #4
 80059c0:	009a      	lsls	r2, r3, #2
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a3c      	ldr	r2, [pc, #240]	@ (8005abc <HAL_DMA_Init+0x14c>)
 80059ca:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2202      	movs	r2, #2
 80059d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80059e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059e6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80059f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a1b      	ldr	r3, [r3, #32]
 8005a0e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 fa82 	bl	8005f28 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a2c:	d102      	bne.n	8005a34 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685a      	ldr	r2, [r3, #4]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a3c:	b2d2      	uxtb	r2, r2
 8005a3e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005a48:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d010      	beq.n	8005a74 <HAL_DMA_Init+0x104>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	2b04      	cmp	r3, #4
 8005a58:	d80c      	bhi.n	8005a74 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 faa2 	bl	8005fa4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a64:	2200      	movs	r2, #0
 8005a66:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005a70:	605a      	str	r2, [r3, #4]
 8005a72:	e008      	b.n	8005a86 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3710      	adds	r7, #16
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	40020407 	.word	0x40020407
 8005aac:	bffdfff8 	.word	0xbffdfff8
 8005ab0:	cccccccd 	.word	0xcccccccd
 8005ab4:	40020000 	.word	0x40020000
 8005ab8:	bffdfbf8 	.word	0xbffdfbf8
 8005abc:	40020400 	.word	0x40020400

08005ac0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b086      	sub	sp, #24
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	607a      	str	r2, [r7, #4]
 8005acc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d101      	bne.n	8005ae0 <HAL_DMA_Start_IT+0x20>
 8005adc:	2302      	movs	r3, #2
 8005ade:	e066      	b.n	8005bae <HAL_DMA_Start_IT+0xee>
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d155      	bne.n	8005ba0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2202      	movs	r2, #2
 8005af8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2200      	movs	r2, #0
 8005b00:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f022 0201 	bic.w	r2, r2, #1
 8005b10:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	68b9      	ldr	r1, [r7, #8]
 8005b18:	68f8      	ldr	r0, [r7, #12]
 8005b1a:	f000 f9c7 	bl	8005eac <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d008      	beq.n	8005b38 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f042 020e 	orr.w	r2, r2, #14
 8005b34:	601a      	str	r2, [r3, #0]
 8005b36:	e00f      	b.n	8005b58 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f022 0204 	bic.w	r2, r2, #4
 8005b46:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f042 020a 	orr.w	r2, r2, #10
 8005b56:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d007      	beq.n	8005b76 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b74:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d007      	beq.n	8005b8e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b8c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f042 0201 	orr.w	r2, r2, #1
 8005b9c:	601a      	str	r2, [r3, #0]
 8005b9e:	e005      	b.n	8005bac <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005ba8:	2302      	movs	r3, #2
 8005baa:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005bac:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3718      	adds	r7, #24
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}

08005bb6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005bb6:	b480      	push	{r7}
 8005bb8:	b085      	sub	sp, #20
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	d005      	beq.n	8005bda <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2204      	movs	r2, #4
 8005bd2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	73fb      	strb	r3, [r7, #15]
 8005bd8:	e037      	b.n	8005c4a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f022 020e 	bic.w	r2, r2, #14
 8005be8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bf4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005bf8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f022 0201 	bic.w	r2, r2, #1
 8005c08:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c0e:	f003 021f 	and.w	r2, r3, #31
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c16:	2101      	movs	r1, #1
 8005c18:	fa01 f202 	lsl.w	r2, r1, r2
 8005c1c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005c26:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d00c      	beq.n	8005c4a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c3a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005c3e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005c48:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3714      	adds	r7, #20
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c70:	2300      	movs	r3, #0
 8005c72:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	2b02      	cmp	r3, #2
 8005c7e:	d00d      	beq.n	8005c9c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2204      	movs	r2, #4
 8005c84:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	73fb      	strb	r3, [r7, #15]
 8005c9a:	e047      	b.n	8005d2c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f022 020e 	bic.w	r2, r2, #14
 8005caa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f022 0201 	bic.w	r2, r2, #1
 8005cba:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cc6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005cca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cd0:	f003 021f 	and.w	r2, r3, #31
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cd8:	2101      	movs	r1, #1
 8005cda:	fa01 f202 	lsl.w	r2, r1, r2
 8005cde:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005ce8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00c      	beq.n	8005d0c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cfc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d00:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005d0a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d003      	beq.n	8005d2c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	4798      	blx	r3
    }
  }
  return status;
 8005d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3710      	adds	r7, #16
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}

08005d36 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005d36:	b580      	push	{r7, lr}
 8005d38:	b084      	sub	sp, #16
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d52:	f003 031f 	and.w	r3, r3, #31
 8005d56:	2204      	movs	r2, #4
 8005d58:	409a      	lsls	r2, r3
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d026      	beq.n	8005db0 <HAL_DMA_IRQHandler+0x7a>
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	f003 0304 	and.w	r3, r3, #4
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d021      	beq.n	8005db0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 0320 	and.w	r3, r3, #32
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d107      	bne.n	8005d8a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f022 0204 	bic.w	r2, r2, #4
 8005d88:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d8e:	f003 021f 	and.w	r2, r3, #31
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d96:	2104      	movs	r1, #4
 8005d98:	fa01 f202 	lsl.w	r2, r1, r2
 8005d9c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d071      	beq.n	8005e8a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005dae:	e06c      	b.n	8005e8a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005db4:	f003 031f 	and.w	r3, r3, #31
 8005db8:	2202      	movs	r2, #2
 8005dba:	409a      	lsls	r2, r3
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d02e      	beq.n	8005e22 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	f003 0302 	and.w	r3, r3, #2
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d029      	beq.n	8005e22 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 0320 	and.w	r3, r3, #32
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d10b      	bne.n	8005df4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f022 020a 	bic.w	r2, r2, #10
 8005dea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005df8:	f003 021f 	and.w	r2, r3, #31
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e00:	2102      	movs	r1, #2
 8005e02:	fa01 f202 	lsl.w	r2, r1, r2
 8005e06:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d038      	beq.n	8005e8a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005e20:	e033      	b.n	8005e8a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e26:	f003 031f 	and.w	r3, r3, #31
 8005e2a:	2208      	movs	r2, #8
 8005e2c:	409a      	lsls	r2, r3
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	4013      	ands	r3, r2
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d02a      	beq.n	8005e8c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	f003 0308 	and.w	r3, r3, #8
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d025      	beq.n	8005e8c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f022 020e 	bic.w	r2, r2, #14
 8005e4e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e54:	f003 021f 	and.w	r2, r3, #31
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e5c:	2101      	movs	r1, #1
 8005e5e:	fa01 f202 	lsl.w	r2, r1, r2
 8005e62:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d004      	beq.n	8005e8c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005e8a:	bf00      	nop
 8005e8c:	bf00      	nop
}
 8005e8e:	3710      	adds	r7, #16
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b085      	sub	sp, #20
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	607a      	str	r2, [r7, #4]
 8005eb8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ebe:	68fa      	ldr	r2, [r7, #12]
 8005ec0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005ec2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d004      	beq.n	8005ed6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005ed4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eda:	f003 021f 	and.w	r2, r3, #31
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ee2:	2101      	movs	r1, #1
 8005ee4:	fa01 f202 	lsl.w	r2, r1, r2
 8005ee8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	683a      	ldr	r2, [r7, #0]
 8005ef0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	2b10      	cmp	r3, #16
 8005ef8:	d108      	bne.n	8005f0c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68ba      	ldr	r2, [r7, #8]
 8005f08:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005f0a:	e007      	b.n	8005f1c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68ba      	ldr	r2, [r7, #8]
 8005f12:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	60da      	str	r2, [r3, #12]
}
 8005f1c:	bf00      	nop
 8005f1e:	3714      	adds	r7, #20
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b087      	sub	sp, #28
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	461a      	mov	r2, r3
 8005f36:	4b16      	ldr	r3, [pc, #88]	@ (8005f90 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d802      	bhi.n	8005f42 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005f3c:	4b15      	ldr	r3, [pc, #84]	@ (8005f94 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005f3e:	617b      	str	r3, [r7, #20]
 8005f40:	e001      	b.n	8005f46 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005f42:	4b15      	ldr	r3, [pc, #84]	@ (8005f98 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005f44:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	3b08      	subs	r3, #8
 8005f52:	4a12      	ldr	r2, [pc, #72]	@ (8005f9c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005f54:	fba2 2303 	umull	r2, r3, r2, r3
 8005f58:	091b      	lsrs	r3, r3, #4
 8005f5a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f60:	089b      	lsrs	r3, r3, #2
 8005f62:	009a      	lsls	r2, r3, #2
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	4413      	add	r3, r2
 8005f68:	461a      	mov	r2, r3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a0b      	ldr	r2, [pc, #44]	@ (8005fa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005f72:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f003 031f 	and.w	r3, r3, #31
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	409a      	lsls	r2, r3
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005f82:	bf00      	nop
 8005f84:	371c      	adds	r7, #28
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr
 8005f8e:	bf00      	nop
 8005f90:	40020407 	.word	0x40020407
 8005f94:	40020800 	.word	0x40020800
 8005f98:	40020820 	.word	0x40020820
 8005f9c:	cccccccd 	.word	0xcccccccd
 8005fa0:	40020880 	.word	0x40020880

08005fa4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b085      	sub	sp, #20
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	4b0b      	ldr	r3, [pc, #44]	@ (8005fe4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005fb8:	4413      	add	r3, r2
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a08      	ldr	r2, [pc, #32]	@ (8005fe8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005fc6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	f003 031f 	and.w	r3, r3, #31
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	409a      	lsls	r2, r3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005fd8:	bf00      	nop
 8005fda:	3714      	adds	r7, #20
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr
 8005fe4:	1000823f 	.word	0x1000823f
 8005fe8:	40020940 	.word	0x40020940

08005fec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b087      	sub	sp, #28
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005ffa:	e15a      	b.n	80062b2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	2101      	movs	r1, #1
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	fa01 f303 	lsl.w	r3, r1, r3
 8006008:	4013      	ands	r3, r2
 800600a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2b00      	cmp	r3, #0
 8006010:	f000 814c 	beq.w	80062ac <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	f003 0303 	and.w	r3, r3, #3
 800601c:	2b01      	cmp	r3, #1
 800601e:	d005      	beq.n	800602c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006028:	2b02      	cmp	r3, #2
 800602a:	d130      	bne.n	800608e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	005b      	lsls	r3, r3, #1
 8006036:	2203      	movs	r2, #3
 8006038:	fa02 f303 	lsl.w	r3, r2, r3
 800603c:	43db      	mvns	r3, r3
 800603e:	693a      	ldr	r2, [r7, #16]
 8006040:	4013      	ands	r3, r2
 8006042:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	68da      	ldr	r2, [r3, #12]
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	005b      	lsls	r3, r3, #1
 800604c:	fa02 f303 	lsl.w	r3, r2, r3
 8006050:	693a      	ldr	r2, [r7, #16]
 8006052:	4313      	orrs	r3, r2
 8006054:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	693a      	ldr	r2, [r7, #16]
 800605a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006062:	2201      	movs	r2, #1
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	fa02 f303 	lsl.w	r3, r2, r3
 800606a:	43db      	mvns	r3, r3
 800606c:	693a      	ldr	r2, [r7, #16]
 800606e:	4013      	ands	r3, r2
 8006070:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	091b      	lsrs	r3, r3, #4
 8006078:	f003 0201 	and.w	r2, r3, #1
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	fa02 f303 	lsl.w	r3, r2, r3
 8006082:	693a      	ldr	r2, [r7, #16]
 8006084:	4313      	orrs	r3, r2
 8006086:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	693a      	ldr	r2, [r7, #16]
 800608c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	f003 0303 	and.w	r3, r3, #3
 8006096:	2b03      	cmp	r3, #3
 8006098:	d017      	beq.n	80060ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	68db      	ldr	r3, [r3, #12]
 800609e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	005b      	lsls	r3, r3, #1
 80060a4:	2203      	movs	r2, #3
 80060a6:	fa02 f303 	lsl.w	r3, r2, r3
 80060aa:	43db      	mvns	r3, r3
 80060ac:	693a      	ldr	r2, [r7, #16]
 80060ae:	4013      	ands	r3, r2
 80060b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	689a      	ldr	r2, [r3, #8]
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	005b      	lsls	r3, r3, #1
 80060ba:	fa02 f303 	lsl.w	r3, r2, r3
 80060be:	693a      	ldr	r2, [r7, #16]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	693a      	ldr	r2, [r7, #16]
 80060c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	f003 0303 	and.w	r3, r3, #3
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	d123      	bne.n	800611e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	08da      	lsrs	r2, r3, #3
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	3208      	adds	r2, #8
 80060de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	f003 0307 	and.w	r3, r3, #7
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	220f      	movs	r2, #15
 80060ee:	fa02 f303 	lsl.w	r3, r2, r3
 80060f2:	43db      	mvns	r3, r3
 80060f4:	693a      	ldr	r2, [r7, #16]
 80060f6:	4013      	ands	r3, r2
 80060f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	691a      	ldr	r2, [r3, #16]
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	f003 0307 	and.w	r3, r3, #7
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	fa02 f303 	lsl.w	r3, r2, r3
 800610a:	693a      	ldr	r2, [r7, #16]
 800610c:	4313      	orrs	r3, r2
 800610e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	08da      	lsrs	r2, r3, #3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	3208      	adds	r2, #8
 8006118:	6939      	ldr	r1, [r7, #16]
 800611a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	005b      	lsls	r3, r3, #1
 8006128:	2203      	movs	r2, #3
 800612a:	fa02 f303 	lsl.w	r3, r2, r3
 800612e:	43db      	mvns	r3, r3
 8006130:	693a      	ldr	r2, [r7, #16]
 8006132:	4013      	ands	r3, r2
 8006134:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	f003 0203 	and.w	r2, r3, #3
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	005b      	lsls	r3, r3, #1
 8006142:	fa02 f303 	lsl.w	r3, r2, r3
 8006146:	693a      	ldr	r2, [r7, #16]
 8006148:	4313      	orrs	r3, r2
 800614a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	693a      	ldr	r2, [r7, #16]
 8006150:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800615a:	2b00      	cmp	r3, #0
 800615c:	f000 80a6 	beq.w	80062ac <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006160:	4b5b      	ldr	r3, [pc, #364]	@ (80062d0 <HAL_GPIO_Init+0x2e4>)
 8006162:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006164:	4a5a      	ldr	r2, [pc, #360]	@ (80062d0 <HAL_GPIO_Init+0x2e4>)
 8006166:	f043 0301 	orr.w	r3, r3, #1
 800616a:	6613      	str	r3, [r2, #96]	@ 0x60
 800616c:	4b58      	ldr	r3, [pc, #352]	@ (80062d0 <HAL_GPIO_Init+0x2e4>)
 800616e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006170:	f003 0301 	and.w	r3, r3, #1
 8006174:	60bb      	str	r3, [r7, #8]
 8006176:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006178:	4a56      	ldr	r2, [pc, #344]	@ (80062d4 <HAL_GPIO_Init+0x2e8>)
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	089b      	lsrs	r3, r3, #2
 800617e:	3302      	adds	r3, #2
 8006180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006184:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	f003 0303 	and.w	r3, r3, #3
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	220f      	movs	r2, #15
 8006190:	fa02 f303 	lsl.w	r3, r2, r3
 8006194:	43db      	mvns	r3, r3
 8006196:	693a      	ldr	r2, [r7, #16]
 8006198:	4013      	ands	r3, r2
 800619a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80061a2:	d01f      	beq.n	80061e4 <HAL_GPIO_Init+0x1f8>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4a4c      	ldr	r2, [pc, #304]	@ (80062d8 <HAL_GPIO_Init+0x2ec>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d019      	beq.n	80061e0 <HAL_GPIO_Init+0x1f4>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4a4b      	ldr	r2, [pc, #300]	@ (80062dc <HAL_GPIO_Init+0x2f0>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d013      	beq.n	80061dc <HAL_GPIO_Init+0x1f0>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4a4a      	ldr	r2, [pc, #296]	@ (80062e0 <HAL_GPIO_Init+0x2f4>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d00d      	beq.n	80061d8 <HAL_GPIO_Init+0x1ec>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	4a49      	ldr	r2, [pc, #292]	@ (80062e4 <HAL_GPIO_Init+0x2f8>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d007      	beq.n	80061d4 <HAL_GPIO_Init+0x1e8>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	4a48      	ldr	r2, [pc, #288]	@ (80062e8 <HAL_GPIO_Init+0x2fc>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d101      	bne.n	80061d0 <HAL_GPIO_Init+0x1e4>
 80061cc:	2305      	movs	r3, #5
 80061ce:	e00a      	b.n	80061e6 <HAL_GPIO_Init+0x1fa>
 80061d0:	2306      	movs	r3, #6
 80061d2:	e008      	b.n	80061e6 <HAL_GPIO_Init+0x1fa>
 80061d4:	2304      	movs	r3, #4
 80061d6:	e006      	b.n	80061e6 <HAL_GPIO_Init+0x1fa>
 80061d8:	2303      	movs	r3, #3
 80061da:	e004      	b.n	80061e6 <HAL_GPIO_Init+0x1fa>
 80061dc:	2302      	movs	r3, #2
 80061de:	e002      	b.n	80061e6 <HAL_GPIO_Init+0x1fa>
 80061e0:	2301      	movs	r3, #1
 80061e2:	e000      	b.n	80061e6 <HAL_GPIO_Init+0x1fa>
 80061e4:	2300      	movs	r3, #0
 80061e6:	697a      	ldr	r2, [r7, #20]
 80061e8:	f002 0203 	and.w	r2, r2, #3
 80061ec:	0092      	lsls	r2, r2, #2
 80061ee:	4093      	lsls	r3, r2
 80061f0:	693a      	ldr	r2, [r7, #16]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80061f6:	4937      	ldr	r1, [pc, #220]	@ (80062d4 <HAL_GPIO_Init+0x2e8>)
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	089b      	lsrs	r3, r3, #2
 80061fc:	3302      	adds	r3, #2
 80061fe:	693a      	ldr	r2, [r7, #16]
 8006200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006204:	4b39      	ldr	r3, [pc, #228]	@ (80062ec <HAL_GPIO_Init+0x300>)
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	43db      	mvns	r3, r3
 800620e:	693a      	ldr	r2, [r7, #16]
 8006210:	4013      	ands	r3, r2
 8006212:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800621c:	2b00      	cmp	r3, #0
 800621e:	d003      	beq.n	8006228 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006220:	693a      	ldr	r2, [r7, #16]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	4313      	orrs	r3, r2
 8006226:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006228:	4a30      	ldr	r2, [pc, #192]	@ (80062ec <HAL_GPIO_Init+0x300>)
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800622e:	4b2f      	ldr	r3, [pc, #188]	@ (80062ec <HAL_GPIO_Init+0x300>)
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	43db      	mvns	r3, r3
 8006238:	693a      	ldr	r2, [r7, #16]
 800623a:	4013      	ands	r3, r2
 800623c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006246:	2b00      	cmp	r3, #0
 8006248:	d003      	beq.n	8006252 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	4313      	orrs	r3, r2
 8006250:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006252:	4a26      	ldr	r2, [pc, #152]	@ (80062ec <HAL_GPIO_Init+0x300>)
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006258:	4b24      	ldr	r3, [pc, #144]	@ (80062ec <HAL_GPIO_Init+0x300>)
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	43db      	mvns	r3, r3
 8006262:	693a      	ldr	r2, [r7, #16]
 8006264:	4013      	ands	r3, r2
 8006266:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006270:	2b00      	cmp	r3, #0
 8006272:	d003      	beq.n	800627c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006274:	693a      	ldr	r2, [r7, #16]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	4313      	orrs	r3, r2
 800627a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800627c:	4a1b      	ldr	r2, [pc, #108]	@ (80062ec <HAL_GPIO_Init+0x300>)
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006282:	4b1a      	ldr	r3, [pc, #104]	@ (80062ec <HAL_GPIO_Init+0x300>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	43db      	mvns	r3, r3
 800628c:	693a      	ldr	r2, [r7, #16]
 800628e:	4013      	ands	r3, r2
 8006290:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800629a:	2b00      	cmp	r3, #0
 800629c:	d003      	beq.n	80062a6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800629e:	693a      	ldr	r2, [r7, #16]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80062a6:	4a11      	ldr	r2, [pc, #68]	@ (80062ec <HAL_GPIO_Init+0x300>)
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	3301      	adds	r3, #1
 80062b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	fa22 f303 	lsr.w	r3, r2, r3
 80062bc:	2b00      	cmp	r3, #0
 80062be:	f47f ae9d 	bne.w	8005ffc <HAL_GPIO_Init+0x10>
  }
}
 80062c2:	bf00      	nop
 80062c4:	bf00      	nop
 80062c6:	371c      	adds	r7, #28
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr
 80062d0:	40021000 	.word	0x40021000
 80062d4:	40010000 	.word	0x40010000
 80062d8:	48000400 	.word	0x48000400
 80062dc:	48000800 	.word	0x48000800
 80062e0:	48000c00 	.word	0x48000c00
 80062e4:	48001000 	.word	0x48001000
 80062e8:	48001400 	.word	0x48001400
 80062ec:	40010400 	.word	0x40010400

080062f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	460b      	mov	r3, r1
 80062fa:	807b      	strh	r3, [r7, #2]
 80062fc:	4613      	mov	r3, r2
 80062fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006300:	787b      	ldrb	r3, [r7, #1]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d003      	beq.n	800630e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006306:	887a      	ldrh	r2, [r7, #2]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800630c:	e002      	b.n	8006314 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800630e:	887a      	ldrh	r2, [r7, #2]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006314:	bf00      	nop
 8006316:	370c      	adds	r7, #12
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b082      	sub	sp, #8
 8006324:	af00      	add	r7, sp, #0
 8006326:	4603      	mov	r3, r0
 8006328:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800632a:	4b08      	ldr	r3, [pc, #32]	@ (800634c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800632c:	695a      	ldr	r2, [r3, #20]
 800632e:	88fb      	ldrh	r3, [r7, #6]
 8006330:	4013      	ands	r3, r2
 8006332:	2b00      	cmp	r3, #0
 8006334:	d006      	beq.n	8006344 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006336:	4a05      	ldr	r2, [pc, #20]	@ (800634c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006338:	88fb      	ldrh	r3, [r7, #6]
 800633a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800633c:	88fb      	ldrh	r3, [r7, #6]
 800633e:	4618      	mov	r0, r3
 8006340:	f7fc fe26 	bl	8002f90 <HAL_GPIO_EXTI_Callback>
  }
}
 8006344:	bf00      	nop
 8006346:	3708      	adds	r7, #8
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}
 800634c:	40010400 	.word	0x40010400

08006350 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006350:	b480      	push	{r7}
 8006352:	b085      	sub	sp, #20
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d141      	bne.n	80063e2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800635e:	4b4b      	ldr	r3, [pc, #300]	@ (800648c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006366:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800636a:	d131      	bne.n	80063d0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800636c:	4b47      	ldr	r3, [pc, #284]	@ (800648c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800636e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006372:	4a46      	ldr	r2, [pc, #280]	@ (800648c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006374:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006378:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800637c:	4b43      	ldr	r3, [pc, #268]	@ (800648c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006384:	4a41      	ldr	r2, [pc, #260]	@ (800648c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006386:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800638a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800638c:	4b40      	ldr	r3, [pc, #256]	@ (8006490 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2232      	movs	r2, #50	@ 0x32
 8006392:	fb02 f303 	mul.w	r3, r2, r3
 8006396:	4a3f      	ldr	r2, [pc, #252]	@ (8006494 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006398:	fba2 2303 	umull	r2, r3, r2, r3
 800639c:	0c9b      	lsrs	r3, r3, #18
 800639e:	3301      	adds	r3, #1
 80063a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80063a2:	e002      	b.n	80063aa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	3b01      	subs	r3, #1
 80063a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80063aa:	4b38      	ldr	r3, [pc, #224]	@ (800648c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063b6:	d102      	bne.n	80063be <HAL_PWREx_ControlVoltageScaling+0x6e>
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d1f2      	bne.n	80063a4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80063be:	4b33      	ldr	r3, [pc, #204]	@ (800648c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063c0:	695b      	ldr	r3, [r3, #20]
 80063c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063ca:	d158      	bne.n	800647e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80063cc:	2303      	movs	r3, #3
 80063ce:	e057      	b.n	8006480 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80063d0:	4b2e      	ldr	r3, [pc, #184]	@ (800648c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063d6:	4a2d      	ldr	r2, [pc, #180]	@ (800648c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80063e0:	e04d      	b.n	800647e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063e8:	d141      	bne.n	800646e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80063ea:	4b28      	ldr	r3, [pc, #160]	@ (800648c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80063f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063f6:	d131      	bne.n	800645c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80063f8:	4b24      	ldr	r3, [pc, #144]	@ (800648c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063fe:	4a23      	ldr	r2, [pc, #140]	@ (800648c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006400:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006404:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006408:	4b20      	ldr	r3, [pc, #128]	@ (800648c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006410:	4a1e      	ldr	r2, [pc, #120]	@ (800648c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006412:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006416:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006418:	4b1d      	ldr	r3, [pc, #116]	@ (8006490 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2232      	movs	r2, #50	@ 0x32
 800641e:	fb02 f303 	mul.w	r3, r2, r3
 8006422:	4a1c      	ldr	r2, [pc, #112]	@ (8006494 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006424:	fba2 2303 	umull	r2, r3, r2, r3
 8006428:	0c9b      	lsrs	r3, r3, #18
 800642a:	3301      	adds	r3, #1
 800642c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800642e:	e002      	b.n	8006436 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	3b01      	subs	r3, #1
 8006434:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006436:	4b15      	ldr	r3, [pc, #84]	@ (800648c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006438:	695b      	ldr	r3, [r3, #20]
 800643a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800643e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006442:	d102      	bne.n	800644a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d1f2      	bne.n	8006430 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800644a:	4b10      	ldr	r3, [pc, #64]	@ (800648c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800644c:	695b      	ldr	r3, [r3, #20]
 800644e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006452:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006456:	d112      	bne.n	800647e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	e011      	b.n	8006480 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800645c:	4b0b      	ldr	r3, [pc, #44]	@ (800648c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800645e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006462:	4a0a      	ldr	r2, [pc, #40]	@ (800648c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006464:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006468:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800646c:	e007      	b.n	800647e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800646e:	4b07      	ldr	r3, [pc, #28]	@ (800648c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006476:	4a05      	ldr	r2, [pc, #20]	@ (800648c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006478:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800647c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800647e:	2300      	movs	r3, #0
}
 8006480:	4618      	mov	r0, r3
 8006482:	3714      	adds	r7, #20
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr
 800648c:	40007000 	.word	0x40007000
 8006490:	20000234 	.word	0x20000234
 8006494:	431bde83 	.word	0x431bde83

08006498 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006498:	b480      	push	{r7}
 800649a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800649c:	4b05      	ldr	r3, [pc, #20]	@ (80064b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	4a04      	ldr	r2, [pc, #16]	@ (80064b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80064a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80064a6:	6093      	str	r3, [r2, #8]
}
 80064a8:	bf00      	nop
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr
 80064b2:	bf00      	nop
 80064b4:	40007000 	.word	0x40007000

080064b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b088      	sub	sp, #32
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d101      	bne.n	80064ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e2fe      	b.n	8006ac8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f003 0301 	and.w	r3, r3, #1
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d075      	beq.n	80065c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064d6:	4b97      	ldr	r3, [pc, #604]	@ (8006734 <HAL_RCC_OscConfig+0x27c>)
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	f003 030c 	and.w	r3, r3, #12
 80064de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80064e0:	4b94      	ldr	r3, [pc, #592]	@ (8006734 <HAL_RCC_OscConfig+0x27c>)
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	f003 0303 	and.w	r3, r3, #3
 80064e8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	2b0c      	cmp	r3, #12
 80064ee:	d102      	bne.n	80064f6 <HAL_RCC_OscConfig+0x3e>
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	2b03      	cmp	r3, #3
 80064f4:	d002      	beq.n	80064fc <HAL_RCC_OscConfig+0x44>
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	2b08      	cmp	r3, #8
 80064fa:	d10b      	bne.n	8006514 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064fc:	4b8d      	ldr	r3, [pc, #564]	@ (8006734 <HAL_RCC_OscConfig+0x27c>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006504:	2b00      	cmp	r3, #0
 8006506:	d05b      	beq.n	80065c0 <HAL_RCC_OscConfig+0x108>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d157      	bne.n	80065c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	e2d9      	b.n	8006ac8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800651c:	d106      	bne.n	800652c <HAL_RCC_OscConfig+0x74>
 800651e:	4b85      	ldr	r3, [pc, #532]	@ (8006734 <HAL_RCC_OscConfig+0x27c>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a84      	ldr	r2, [pc, #528]	@ (8006734 <HAL_RCC_OscConfig+0x27c>)
 8006524:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006528:	6013      	str	r3, [r2, #0]
 800652a:	e01d      	b.n	8006568 <HAL_RCC_OscConfig+0xb0>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006534:	d10c      	bne.n	8006550 <HAL_RCC_OscConfig+0x98>
 8006536:	4b7f      	ldr	r3, [pc, #508]	@ (8006734 <HAL_RCC_OscConfig+0x27c>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a7e      	ldr	r2, [pc, #504]	@ (8006734 <HAL_RCC_OscConfig+0x27c>)
 800653c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006540:	6013      	str	r3, [r2, #0]
 8006542:	4b7c      	ldr	r3, [pc, #496]	@ (8006734 <HAL_RCC_OscConfig+0x27c>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a7b      	ldr	r2, [pc, #492]	@ (8006734 <HAL_RCC_OscConfig+0x27c>)
 8006548:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800654c:	6013      	str	r3, [r2, #0]
 800654e:	e00b      	b.n	8006568 <HAL_RCC_OscConfig+0xb0>
 8006550:	4b78      	ldr	r3, [pc, #480]	@ (8006734 <HAL_RCC_OscConfig+0x27c>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a77      	ldr	r2, [pc, #476]	@ (8006734 <HAL_RCC_OscConfig+0x27c>)
 8006556:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800655a:	6013      	str	r3, [r2, #0]
 800655c:	4b75      	ldr	r3, [pc, #468]	@ (8006734 <HAL_RCC_OscConfig+0x27c>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a74      	ldr	r2, [pc, #464]	@ (8006734 <HAL_RCC_OscConfig+0x27c>)
 8006562:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006566:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d013      	beq.n	8006598 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006570:	f7fd fe24 	bl	80041bc <HAL_GetTick>
 8006574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006576:	e008      	b.n	800658a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006578:	f7fd fe20 	bl	80041bc <HAL_GetTick>
 800657c:	4602      	mov	r2, r0
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	2b64      	cmp	r3, #100	@ 0x64
 8006584:	d901      	bls.n	800658a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006586:	2303      	movs	r3, #3
 8006588:	e29e      	b.n	8006ac8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800658a:	4b6a      	ldr	r3, [pc, #424]	@ (8006734 <HAL_RCC_OscConfig+0x27c>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006592:	2b00      	cmp	r3, #0
 8006594:	d0f0      	beq.n	8006578 <HAL_RCC_OscConfig+0xc0>
 8006596:	e014      	b.n	80065c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006598:	f7fd fe10 	bl	80041bc <HAL_GetTick>
 800659c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800659e:	e008      	b.n	80065b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065a0:	f7fd fe0c 	bl	80041bc <HAL_GetTick>
 80065a4:	4602      	mov	r2, r0
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	2b64      	cmp	r3, #100	@ 0x64
 80065ac:	d901      	bls.n	80065b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80065ae:	2303      	movs	r3, #3
 80065b0:	e28a      	b.n	8006ac8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80065b2:	4b60      	ldr	r3, [pc, #384]	@ (8006734 <HAL_RCC_OscConfig+0x27c>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d1f0      	bne.n	80065a0 <HAL_RCC_OscConfig+0xe8>
 80065be:	e000      	b.n	80065c2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f003 0302 	and.w	r3, r3, #2
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d075      	beq.n	80066ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065ce:	4b59      	ldr	r3, [pc, #356]	@ (8006734 <HAL_RCC_OscConfig+0x27c>)
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	f003 030c 	and.w	r3, r3, #12
 80065d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80065d8:	4b56      	ldr	r3, [pc, #344]	@ (8006734 <HAL_RCC_OscConfig+0x27c>)
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	f003 0303 	and.w	r3, r3, #3
 80065e0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	2b0c      	cmp	r3, #12
 80065e6:	d102      	bne.n	80065ee <HAL_RCC_OscConfig+0x136>
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	d002      	beq.n	80065f4 <HAL_RCC_OscConfig+0x13c>
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	2b04      	cmp	r3, #4
 80065f2:	d11f      	bne.n	8006634 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065f4:	4b4f      	ldr	r3, [pc, #316]	@ (8006734 <HAL_RCC_OscConfig+0x27c>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d005      	beq.n	800660c <HAL_RCC_OscConfig+0x154>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d101      	bne.n	800660c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	e25d      	b.n	8006ac8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800660c:	4b49      	ldr	r3, [pc, #292]	@ (8006734 <HAL_RCC_OscConfig+0x27c>)
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	691b      	ldr	r3, [r3, #16]
 8006618:	061b      	lsls	r3, r3, #24
 800661a:	4946      	ldr	r1, [pc, #280]	@ (8006734 <HAL_RCC_OscConfig+0x27c>)
 800661c:	4313      	orrs	r3, r2
 800661e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006620:	4b45      	ldr	r3, [pc, #276]	@ (8006738 <HAL_RCC_OscConfig+0x280>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4618      	mov	r0, r3
 8006626:	f7fd fd7d 	bl	8004124 <HAL_InitTick>
 800662a:	4603      	mov	r3, r0
 800662c:	2b00      	cmp	r3, #0
 800662e:	d043      	beq.n	80066b8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	e249      	b.n	8006ac8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d023      	beq.n	8006684 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800663c:	4b3d      	ldr	r3, [pc, #244]	@ (8006734 <HAL_RCC_OscConfig+0x27c>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a3c      	ldr	r2, [pc, #240]	@ (8006734 <HAL_RCC_OscConfig+0x27c>)
 8006642:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006646:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006648:	f7fd fdb8 	bl	80041bc <HAL_GetTick>
 800664c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800664e:	e008      	b.n	8006662 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006650:	f7fd fdb4 	bl	80041bc <HAL_GetTick>
 8006654:	4602      	mov	r2, r0
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	1ad3      	subs	r3, r2, r3
 800665a:	2b02      	cmp	r3, #2
 800665c:	d901      	bls.n	8006662 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800665e:	2303      	movs	r3, #3
 8006660:	e232      	b.n	8006ac8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006662:	4b34      	ldr	r3, [pc, #208]	@ (8006734 <HAL_RCC_OscConfig+0x27c>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800666a:	2b00      	cmp	r3, #0
 800666c:	d0f0      	beq.n	8006650 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800666e:	4b31      	ldr	r3, [pc, #196]	@ (8006734 <HAL_RCC_OscConfig+0x27c>)
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	691b      	ldr	r3, [r3, #16]
 800667a:	061b      	lsls	r3, r3, #24
 800667c:	492d      	ldr	r1, [pc, #180]	@ (8006734 <HAL_RCC_OscConfig+0x27c>)
 800667e:	4313      	orrs	r3, r2
 8006680:	604b      	str	r3, [r1, #4]
 8006682:	e01a      	b.n	80066ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006684:	4b2b      	ldr	r3, [pc, #172]	@ (8006734 <HAL_RCC_OscConfig+0x27c>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a2a      	ldr	r2, [pc, #168]	@ (8006734 <HAL_RCC_OscConfig+0x27c>)
 800668a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800668e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006690:	f7fd fd94 	bl	80041bc <HAL_GetTick>
 8006694:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006696:	e008      	b.n	80066aa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006698:	f7fd fd90 	bl	80041bc <HAL_GetTick>
 800669c:	4602      	mov	r2, r0
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	2b02      	cmp	r3, #2
 80066a4:	d901      	bls.n	80066aa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80066a6:	2303      	movs	r3, #3
 80066a8:	e20e      	b.n	8006ac8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80066aa:	4b22      	ldr	r3, [pc, #136]	@ (8006734 <HAL_RCC_OscConfig+0x27c>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d1f0      	bne.n	8006698 <HAL_RCC_OscConfig+0x1e0>
 80066b6:	e000      	b.n	80066ba <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 0308 	and.w	r3, r3, #8
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d041      	beq.n	800674a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	695b      	ldr	r3, [r3, #20]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d01c      	beq.n	8006708 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066ce:	4b19      	ldr	r3, [pc, #100]	@ (8006734 <HAL_RCC_OscConfig+0x27c>)
 80066d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066d4:	4a17      	ldr	r2, [pc, #92]	@ (8006734 <HAL_RCC_OscConfig+0x27c>)
 80066d6:	f043 0301 	orr.w	r3, r3, #1
 80066da:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066de:	f7fd fd6d 	bl	80041bc <HAL_GetTick>
 80066e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80066e4:	e008      	b.n	80066f8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066e6:	f7fd fd69 	bl	80041bc <HAL_GetTick>
 80066ea:	4602      	mov	r2, r0
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	1ad3      	subs	r3, r2, r3
 80066f0:	2b02      	cmp	r3, #2
 80066f2:	d901      	bls.n	80066f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80066f4:	2303      	movs	r3, #3
 80066f6:	e1e7      	b.n	8006ac8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80066f8:	4b0e      	ldr	r3, [pc, #56]	@ (8006734 <HAL_RCC_OscConfig+0x27c>)
 80066fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066fe:	f003 0302 	and.w	r3, r3, #2
 8006702:	2b00      	cmp	r3, #0
 8006704:	d0ef      	beq.n	80066e6 <HAL_RCC_OscConfig+0x22e>
 8006706:	e020      	b.n	800674a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006708:	4b0a      	ldr	r3, [pc, #40]	@ (8006734 <HAL_RCC_OscConfig+0x27c>)
 800670a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800670e:	4a09      	ldr	r2, [pc, #36]	@ (8006734 <HAL_RCC_OscConfig+0x27c>)
 8006710:	f023 0301 	bic.w	r3, r3, #1
 8006714:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006718:	f7fd fd50 	bl	80041bc <HAL_GetTick>
 800671c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800671e:	e00d      	b.n	800673c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006720:	f7fd fd4c 	bl	80041bc <HAL_GetTick>
 8006724:	4602      	mov	r2, r0
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	1ad3      	subs	r3, r2, r3
 800672a:	2b02      	cmp	r3, #2
 800672c:	d906      	bls.n	800673c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800672e:	2303      	movs	r3, #3
 8006730:	e1ca      	b.n	8006ac8 <HAL_RCC_OscConfig+0x610>
 8006732:	bf00      	nop
 8006734:	40021000 	.word	0x40021000
 8006738:	20000238 	.word	0x20000238
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800673c:	4b8c      	ldr	r3, [pc, #560]	@ (8006970 <HAL_RCC_OscConfig+0x4b8>)
 800673e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006742:	f003 0302 	and.w	r3, r3, #2
 8006746:	2b00      	cmp	r3, #0
 8006748:	d1ea      	bne.n	8006720 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f003 0304 	and.w	r3, r3, #4
 8006752:	2b00      	cmp	r3, #0
 8006754:	f000 80a6 	beq.w	80068a4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006758:	2300      	movs	r3, #0
 800675a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800675c:	4b84      	ldr	r3, [pc, #528]	@ (8006970 <HAL_RCC_OscConfig+0x4b8>)
 800675e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006760:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006764:	2b00      	cmp	r3, #0
 8006766:	d101      	bne.n	800676c <HAL_RCC_OscConfig+0x2b4>
 8006768:	2301      	movs	r3, #1
 800676a:	e000      	b.n	800676e <HAL_RCC_OscConfig+0x2b6>
 800676c:	2300      	movs	r3, #0
 800676e:	2b00      	cmp	r3, #0
 8006770:	d00d      	beq.n	800678e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006772:	4b7f      	ldr	r3, [pc, #508]	@ (8006970 <HAL_RCC_OscConfig+0x4b8>)
 8006774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006776:	4a7e      	ldr	r2, [pc, #504]	@ (8006970 <HAL_RCC_OscConfig+0x4b8>)
 8006778:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800677c:	6593      	str	r3, [r2, #88]	@ 0x58
 800677e:	4b7c      	ldr	r3, [pc, #496]	@ (8006970 <HAL_RCC_OscConfig+0x4b8>)
 8006780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006782:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006786:	60fb      	str	r3, [r7, #12]
 8006788:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800678a:	2301      	movs	r3, #1
 800678c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800678e:	4b79      	ldr	r3, [pc, #484]	@ (8006974 <HAL_RCC_OscConfig+0x4bc>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006796:	2b00      	cmp	r3, #0
 8006798:	d118      	bne.n	80067cc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800679a:	4b76      	ldr	r3, [pc, #472]	@ (8006974 <HAL_RCC_OscConfig+0x4bc>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a75      	ldr	r2, [pc, #468]	@ (8006974 <HAL_RCC_OscConfig+0x4bc>)
 80067a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067a6:	f7fd fd09 	bl	80041bc <HAL_GetTick>
 80067aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067ac:	e008      	b.n	80067c0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067ae:	f7fd fd05 	bl	80041bc <HAL_GetTick>
 80067b2:	4602      	mov	r2, r0
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	1ad3      	subs	r3, r2, r3
 80067b8:	2b02      	cmp	r3, #2
 80067ba:	d901      	bls.n	80067c0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80067bc:	2303      	movs	r3, #3
 80067be:	e183      	b.n	8006ac8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067c0:	4b6c      	ldr	r3, [pc, #432]	@ (8006974 <HAL_RCC_OscConfig+0x4bc>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d0f0      	beq.n	80067ae <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d108      	bne.n	80067e6 <HAL_RCC_OscConfig+0x32e>
 80067d4:	4b66      	ldr	r3, [pc, #408]	@ (8006970 <HAL_RCC_OscConfig+0x4b8>)
 80067d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067da:	4a65      	ldr	r2, [pc, #404]	@ (8006970 <HAL_RCC_OscConfig+0x4b8>)
 80067dc:	f043 0301 	orr.w	r3, r3, #1
 80067e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80067e4:	e024      	b.n	8006830 <HAL_RCC_OscConfig+0x378>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	2b05      	cmp	r3, #5
 80067ec:	d110      	bne.n	8006810 <HAL_RCC_OscConfig+0x358>
 80067ee:	4b60      	ldr	r3, [pc, #384]	@ (8006970 <HAL_RCC_OscConfig+0x4b8>)
 80067f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067f4:	4a5e      	ldr	r2, [pc, #376]	@ (8006970 <HAL_RCC_OscConfig+0x4b8>)
 80067f6:	f043 0304 	orr.w	r3, r3, #4
 80067fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80067fe:	4b5c      	ldr	r3, [pc, #368]	@ (8006970 <HAL_RCC_OscConfig+0x4b8>)
 8006800:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006804:	4a5a      	ldr	r2, [pc, #360]	@ (8006970 <HAL_RCC_OscConfig+0x4b8>)
 8006806:	f043 0301 	orr.w	r3, r3, #1
 800680a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800680e:	e00f      	b.n	8006830 <HAL_RCC_OscConfig+0x378>
 8006810:	4b57      	ldr	r3, [pc, #348]	@ (8006970 <HAL_RCC_OscConfig+0x4b8>)
 8006812:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006816:	4a56      	ldr	r2, [pc, #344]	@ (8006970 <HAL_RCC_OscConfig+0x4b8>)
 8006818:	f023 0301 	bic.w	r3, r3, #1
 800681c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006820:	4b53      	ldr	r3, [pc, #332]	@ (8006970 <HAL_RCC_OscConfig+0x4b8>)
 8006822:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006826:	4a52      	ldr	r2, [pc, #328]	@ (8006970 <HAL_RCC_OscConfig+0x4b8>)
 8006828:	f023 0304 	bic.w	r3, r3, #4
 800682c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d016      	beq.n	8006866 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006838:	f7fd fcc0 	bl	80041bc <HAL_GetTick>
 800683c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800683e:	e00a      	b.n	8006856 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006840:	f7fd fcbc 	bl	80041bc <HAL_GetTick>
 8006844:	4602      	mov	r2, r0
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800684e:	4293      	cmp	r3, r2
 8006850:	d901      	bls.n	8006856 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006852:	2303      	movs	r3, #3
 8006854:	e138      	b.n	8006ac8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006856:	4b46      	ldr	r3, [pc, #280]	@ (8006970 <HAL_RCC_OscConfig+0x4b8>)
 8006858:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800685c:	f003 0302 	and.w	r3, r3, #2
 8006860:	2b00      	cmp	r3, #0
 8006862:	d0ed      	beq.n	8006840 <HAL_RCC_OscConfig+0x388>
 8006864:	e015      	b.n	8006892 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006866:	f7fd fca9 	bl	80041bc <HAL_GetTick>
 800686a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800686c:	e00a      	b.n	8006884 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800686e:	f7fd fca5 	bl	80041bc <HAL_GetTick>
 8006872:	4602      	mov	r2, r0
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	1ad3      	subs	r3, r2, r3
 8006878:	f241 3288 	movw	r2, #5000	@ 0x1388
 800687c:	4293      	cmp	r3, r2
 800687e:	d901      	bls.n	8006884 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006880:	2303      	movs	r3, #3
 8006882:	e121      	b.n	8006ac8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006884:	4b3a      	ldr	r3, [pc, #232]	@ (8006970 <HAL_RCC_OscConfig+0x4b8>)
 8006886:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800688a:	f003 0302 	and.w	r3, r3, #2
 800688e:	2b00      	cmp	r3, #0
 8006890:	d1ed      	bne.n	800686e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006892:	7ffb      	ldrb	r3, [r7, #31]
 8006894:	2b01      	cmp	r3, #1
 8006896:	d105      	bne.n	80068a4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006898:	4b35      	ldr	r3, [pc, #212]	@ (8006970 <HAL_RCC_OscConfig+0x4b8>)
 800689a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800689c:	4a34      	ldr	r2, [pc, #208]	@ (8006970 <HAL_RCC_OscConfig+0x4b8>)
 800689e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80068a2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 0320 	and.w	r3, r3, #32
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d03c      	beq.n	800692a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	699b      	ldr	r3, [r3, #24]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d01c      	beq.n	80068f2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80068b8:	4b2d      	ldr	r3, [pc, #180]	@ (8006970 <HAL_RCC_OscConfig+0x4b8>)
 80068ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80068be:	4a2c      	ldr	r2, [pc, #176]	@ (8006970 <HAL_RCC_OscConfig+0x4b8>)
 80068c0:	f043 0301 	orr.w	r3, r3, #1
 80068c4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068c8:	f7fd fc78 	bl	80041bc <HAL_GetTick>
 80068cc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80068ce:	e008      	b.n	80068e2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80068d0:	f7fd fc74 	bl	80041bc <HAL_GetTick>
 80068d4:	4602      	mov	r2, r0
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	2b02      	cmp	r3, #2
 80068dc:	d901      	bls.n	80068e2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80068de:	2303      	movs	r3, #3
 80068e0:	e0f2      	b.n	8006ac8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80068e2:	4b23      	ldr	r3, [pc, #140]	@ (8006970 <HAL_RCC_OscConfig+0x4b8>)
 80068e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80068e8:	f003 0302 	and.w	r3, r3, #2
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d0ef      	beq.n	80068d0 <HAL_RCC_OscConfig+0x418>
 80068f0:	e01b      	b.n	800692a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80068f2:	4b1f      	ldr	r3, [pc, #124]	@ (8006970 <HAL_RCC_OscConfig+0x4b8>)
 80068f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80068f8:	4a1d      	ldr	r2, [pc, #116]	@ (8006970 <HAL_RCC_OscConfig+0x4b8>)
 80068fa:	f023 0301 	bic.w	r3, r3, #1
 80068fe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006902:	f7fd fc5b 	bl	80041bc <HAL_GetTick>
 8006906:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006908:	e008      	b.n	800691c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800690a:	f7fd fc57 	bl	80041bc <HAL_GetTick>
 800690e:	4602      	mov	r2, r0
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	1ad3      	subs	r3, r2, r3
 8006914:	2b02      	cmp	r3, #2
 8006916:	d901      	bls.n	800691c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006918:	2303      	movs	r3, #3
 800691a:	e0d5      	b.n	8006ac8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800691c:	4b14      	ldr	r3, [pc, #80]	@ (8006970 <HAL_RCC_OscConfig+0x4b8>)
 800691e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006922:	f003 0302 	and.w	r3, r3, #2
 8006926:	2b00      	cmp	r3, #0
 8006928:	d1ef      	bne.n	800690a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	69db      	ldr	r3, [r3, #28]
 800692e:	2b00      	cmp	r3, #0
 8006930:	f000 80c9 	beq.w	8006ac6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006934:	4b0e      	ldr	r3, [pc, #56]	@ (8006970 <HAL_RCC_OscConfig+0x4b8>)
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	f003 030c 	and.w	r3, r3, #12
 800693c:	2b0c      	cmp	r3, #12
 800693e:	f000 8083 	beq.w	8006a48 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	69db      	ldr	r3, [r3, #28]
 8006946:	2b02      	cmp	r3, #2
 8006948:	d15e      	bne.n	8006a08 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800694a:	4b09      	ldr	r3, [pc, #36]	@ (8006970 <HAL_RCC_OscConfig+0x4b8>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a08      	ldr	r2, [pc, #32]	@ (8006970 <HAL_RCC_OscConfig+0x4b8>)
 8006950:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006954:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006956:	f7fd fc31 	bl	80041bc <HAL_GetTick>
 800695a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800695c:	e00c      	b.n	8006978 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800695e:	f7fd fc2d 	bl	80041bc <HAL_GetTick>
 8006962:	4602      	mov	r2, r0
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	1ad3      	subs	r3, r2, r3
 8006968:	2b02      	cmp	r3, #2
 800696a:	d905      	bls.n	8006978 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800696c:	2303      	movs	r3, #3
 800696e:	e0ab      	b.n	8006ac8 <HAL_RCC_OscConfig+0x610>
 8006970:	40021000 	.word	0x40021000
 8006974:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006978:	4b55      	ldr	r3, [pc, #340]	@ (8006ad0 <HAL_RCC_OscConfig+0x618>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006980:	2b00      	cmp	r3, #0
 8006982:	d1ec      	bne.n	800695e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006984:	4b52      	ldr	r3, [pc, #328]	@ (8006ad0 <HAL_RCC_OscConfig+0x618>)
 8006986:	68da      	ldr	r2, [r3, #12]
 8006988:	4b52      	ldr	r3, [pc, #328]	@ (8006ad4 <HAL_RCC_OscConfig+0x61c>)
 800698a:	4013      	ands	r3, r2
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	6a11      	ldr	r1, [r2, #32]
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006994:	3a01      	subs	r2, #1
 8006996:	0112      	lsls	r2, r2, #4
 8006998:	4311      	orrs	r1, r2
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800699e:	0212      	lsls	r2, r2, #8
 80069a0:	4311      	orrs	r1, r2
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80069a6:	0852      	lsrs	r2, r2, #1
 80069a8:	3a01      	subs	r2, #1
 80069aa:	0552      	lsls	r2, r2, #21
 80069ac:	4311      	orrs	r1, r2
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80069b2:	0852      	lsrs	r2, r2, #1
 80069b4:	3a01      	subs	r2, #1
 80069b6:	0652      	lsls	r2, r2, #25
 80069b8:	4311      	orrs	r1, r2
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80069be:	06d2      	lsls	r2, r2, #27
 80069c0:	430a      	orrs	r2, r1
 80069c2:	4943      	ldr	r1, [pc, #268]	@ (8006ad0 <HAL_RCC_OscConfig+0x618>)
 80069c4:	4313      	orrs	r3, r2
 80069c6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069c8:	4b41      	ldr	r3, [pc, #260]	@ (8006ad0 <HAL_RCC_OscConfig+0x618>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a40      	ldr	r2, [pc, #256]	@ (8006ad0 <HAL_RCC_OscConfig+0x618>)
 80069ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80069d2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80069d4:	4b3e      	ldr	r3, [pc, #248]	@ (8006ad0 <HAL_RCC_OscConfig+0x618>)
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	4a3d      	ldr	r2, [pc, #244]	@ (8006ad0 <HAL_RCC_OscConfig+0x618>)
 80069da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80069de:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069e0:	f7fd fbec 	bl	80041bc <HAL_GetTick>
 80069e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069e6:	e008      	b.n	80069fa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069e8:	f7fd fbe8 	bl	80041bc <HAL_GetTick>
 80069ec:	4602      	mov	r2, r0
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	2b02      	cmp	r3, #2
 80069f4:	d901      	bls.n	80069fa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80069f6:	2303      	movs	r3, #3
 80069f8:	e066      	b.n	8006ac8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069fa:	4b35      	ldr	r3, [pc, #212]	@ (8006ad0 <HAL_RCC_OscConfig+0x618>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d0f0      	beq.n	80069e8 <HAL_RCC_OscConfig+0x530>
 8006a06:	e05e      	b.n	8006ac6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a08:	4b31      	ldr	r3, [pc, #196]	@ (8006ad0 <HAL_RCC_OscConfig+0x618>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a30      	ldr	r2, [pc, #192]	@ (8006ad0 <HAL_RCC_OscConfig+0x618>)
 8006a0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a14:	f7fd fbd2 	bl	80041bc <HAL_GetTick>
 8006a18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a1a:	e008      	b.n	8006a2e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a1c:	f7fd fbce 	bl	80041bc <HAL_GetTick>
 8006a20:	4602      	mov	r2, r0
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	1ad3      	subs	r3, r2, r3
 8006a26:	2b02      	cmp	r3, #2
 8006a28:	d901      	bls.n	8006a2e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	e04c      	b.n	8006ac8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a2e:	4b28      	ldr	r3, [pc, #160]	@ (8006ad0 <HAL_RCC_OscConfig+0x618>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d1f0      	bne.n	8006a1c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006a3a:	4b25      	ldr	r3, [pc, #148]	@ (8006ad0 <HAL_RCC_OscConfig+0x618>)
 8006a3c:	68da      	ldr	r2, [r3, #12]
 8006a3e:	4924      	ldr	r1, [pc, #144]	@ (8006ad0 <HAL_RCC_OscConfig+0x618>)
 8006a40:	4b25      	ldr	r3, [pc, #148]	@ (8006ad8 <HAL_RCC_OscConfig+0x620>)
 8006a42:	4013      	ands	r3, r2
 8006a44:	60cb      	str	r3, [r1, #12]
 8006a46:	e03e      	b.n	8006ac6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	69db      	ldr	r3, [r3, #28]
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d101      	bne.n	8006a54 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	e039      	b.n	8006ac8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006a54:	4b1e      	ldr	r3, [pc, #120]	@ (8006ad0 <HAL_RCC_OscConfig+0x618>)
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	f003 0203 	and.w	r2, r3, #3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6a1b      	ldr	r3, [r3, #32]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d12c      	bne.n	8006ac2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a72:	3b01      	subs	r3, #1
 8006a74:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d123      	bne.n	8006ac2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a84:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d11b      	bne.n	8006ac2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a94:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d113      	bne.n	8006ac2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aa4:	085b      	lsrs	r3, r3, #1
 8006aa6:	3b01      	subs	r3, #1
 8006aa8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d109      	bne.n	8006ac2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ab8:	085b      	lsrs	r3, r3, #1
 8006aba:	3b01      	subs	r3, #1
 8006abc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d001      	beq.n	8006ac6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e000      	b.n	8006ac8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006ac6:	2300      	movs	r3, #0
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3720      	adds	r7, #32
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}
 8006ad0:	40021000 	.word	0x40021000
 8006ad4:	019f800c 	.word	0x019f800c
 8006ad8:	feeefffc 	.word	0xfeeefffc

08006adc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b086      	sub	sp, #24
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d101      	bne.n	8006af4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	e11e      	b.n	8006d32 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006af4:	4b91      	ldr	r3, [pc, #580]	@ (8006d3c <HAL_RCC_ClockConfig+0x260>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f003 030f 	and.w	r3, r3, #15
 8006afc:	683a      	ldr	r2, [r7, #0]
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d910      	bls.n	8006b24 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b02:	4b8e      	ldr	r3, [pc, #568]	@ (8006d3c <HAL_RCC_ClockConfig+0x260>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f023 020f 	bic.w	r2, r3, #15
 8006b0a:	498c      	ldr	r1, [pc, #560]	@ (8006d3c <HAL_RCC_ClockConfig+0x260>)
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b12:	4b8a      	ldr	r3, [pc, #552]	@ (8006d3c <HAL_RCC_ClockConfig+0x260>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 030f 	and.w	r3, r3, #15
 8006b1a:	683a      	ldr	r2, [r7, #0]
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d001      	beq.n	8006b24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e106      	b.n	8006d32 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f003 0301 	and.w	r3, r3, #1
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d073      	beq.n	8006c18 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	2b03      	cmp	r3, #3
 8006b36:	d129      	bne.n	8006b8c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b38:	4b81      	ldr	r3, [pc, #516]	@ (8006d40 <HAL_RCC_ClockConfig+0x264>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d101      	bne.n	8006b48 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
 8006b46:	e0f4      	b.n	8006d32 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006b48:	f000 f99e 	bl	8006e88 <RCC_GetSysClockFreqFromPLLSource>
 8006b4c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	4a7c      	ldr	r2, [pc, #496]	@ (8006d44 <HAL_RCC_ClockConfig+0x268>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d93f      	bls.n	8006bd6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006b56:	4b7a      	ldr	r3, [pc, #488]	@ (8006d40 <HAL_RCC_ClockConfig+0x264>)
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d009      	beq.n	8006b76 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d033      	beq.n	8006bd6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d12f      	bne.n	8006bd6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006b76:	4b72      	ldr	r3, [pc, #456]	@ (8006d40 <HAL_RCC_ClockConfig+0x264>)
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b7e:	4a70      	ldr	r2, [pc, #448]	@ (8006d40 <HAL_RCC_ClockConfig+0x264>)
 8006b80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b84:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006b86:	2380      	movs	r3, #128	@ 0x80
 8006b88:	617b      	str	r3, [r7, #20]
 8006b8a:	e024      	b.n	8006bd6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	d107      	bne.n	8006ba4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b94:	4b6a      	ldr	r3, [pc, #424]	@ (8006d40 <HAL_RCC_ClockConfig+0x264>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d109      	bne.n	8006bb4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e0c6      	b.n	8006d32 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006ba4:	4b66      	ldr	r3, [pc, #408]	@ (8006d40 <HAL_RCC_ClockConfig+0x264>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d101      	bne.n	8006bb4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e0be      	b.n	8006d32 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006bb4:	f000 f8ce 	bl	8006d54 <HAL_RCC_GetSysClockFreq>
 8006bb8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	4a61      	ldr	r2, [pc, #388]	@ (8006d44 <HAL_RCC_ClockConfig+0x268>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d909      	bls.n	8006bd6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006bc2:	4b5f      	ldr	r3, [pc, #380]	@ (8006d40 <HAL_RCC_ClockConfig+0x264>)
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006bca:	4a5d      	ldr	r2, [pc, #372]	@ (8006d40 <HAL_RCC_ClockConfig+0x264>)
 8006bcc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bd0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006bd2:	2380      	movs	r3, #128	@ 0x80
 8006bd4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006bd6:	4b5a      	ldr	r3, [pc, #360]	@ (8006d40 <HAL_RCC_ClockConfig+0x264>)
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	f023 0203 	bic.w	r2, r3, #3
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	4957      	ldr	r1, [pc, #348]	@ (8006d40 <HAL_RCC_ClockConfig+0x264>)
 8006be4:	4313      	orrs	r3, r2
 8006be6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006be8:	f7fd fae8 	bl	80041bc <HAL_GetTick>
 8006bec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bee:	e00a      	b.n	8006c06 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bf0:	f7fd fae4 	bl	80041bc <HAL_GetTick>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	1ad3      	subs	r3, r2, r3
 8006bfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d901      	bls.n	8006c06 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006c02:	2303      	movs	r3, #3
 8006c04:	e095      	b.n	8006d32 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c06:	4b4e      	ldr	r3, [pc, #312]	@ (8006d40 <HAL_RCC_ClockConfig+0x264>)
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	f003 020c 	and.w	r2, r3, #12
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d1eb      	bne.n	8006bf0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f003 0302 	and.w	r3, r3, #2
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d023      	beq.n	8006c6c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 0304 	and.w	r3, r3, #4
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d005      	beq.n	8006c3c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c30:	4b43      	ldr	r3, [pc, #268]	@ (8006d40 <HAL_RCC_ClockConfig+0x264>)
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	4a42      	ldr	r2, [pc, #264]	@ (8006d40 <HAL_RCC_ClockConfig+0x264>)
 8006c36:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006c3a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f003 0308 	and.w	r3, r3, #8
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d007      	beq.n	8006c58 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006c48:	4b3d      	ldr	r3, [pc, #244]	@ (8006d40 <HAL_RCC_ClockConfig+0x264>)
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006c50:	4a3b      	ldr	r2, [pc, #236]	@ (8006d40 <HAL_RCC_ClockConfig+0x264>)
 8006c52:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006c56:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c58:	4b39      	ldr	r3, [pc, #228]	@ (8006d40 <HAL_RCC_ClockConfig+0x264>)
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	4936      	ldr	r1, [pc, #216]	@ (8006d40 <HAL_RCC_ClockConfig+0x264>)
 8006c66:	4313      	orrs	r3, r2
 8006c68:	608b      	str	r3, [r1, #8]
 8006c6a:	e008      	b.n	8006c7e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	2b80      	cmp	r3, #128	@ 0x80
 8006c70:	d105      	bne.n	8006c7e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006c72:	4b33      	ldr	r3, [pc, #204]	@ (8006d40 <HAL_RCC_ClockConfig+0x264>)
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	4a32      	ldr	r2, [pc, #200]	@ (8006d40 <HAL_RCC_ClockConfig+0x264>)
 8006c78:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006c7c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c7e:	4b2f      	ldr	r3, [pc, #188]	@ (8006d3c <HAL_RCC_ClockConfig+0x260>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f003 030f 	and.w	r3, r3, #15
 8006c86:	683a      	ldr	r2, [r7, #0]
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d21d      	bcs.n	8006cc8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c8c:	4b2b      	ldr	r3, [pc, #172]	@ (8006d3c <HAL_RCC_ClockConfig+0x260>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f023 020f 	bic.w	r2, r3, #15
 8006c94:	4929      	ldr	r1, [pc, #164]	@ (8006d3c <HAL_RCC_ClockConfig+0x260>)
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006c9c:	f7fd fa8e 	bl	80041bc <HAL_GetTick>
 8006ca0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ca2:	e00a      	b.n	8006cba <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ca4:	f7fd fa8a 	bl	80041bc <HAL_GetTick>
 8006ca8:	4602      	mov	r2, r0
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	1ad3      	subs	r3, r2, r3
 8006cae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d901      	bls.n	8006cba <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	e03b      	b.n	8006d32 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cba:	4b20      	ldr	r3, [pc, #128]	@ (8006d3c <HAL_RCC_ClockConfig+0x260>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f003 030f 	and.w	r3, r3, #15
 8006cc2:	683a      	ldr	r2, [r7, #0]
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d1ed      	bne.n	8006ca4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 0304 	and.w	r3, r3, #4
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d008      	beq.n	8006ce6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006cd4:	4b1a      	ldr	r3, [pc, #104]	@ (8006d40 <HAL_RCC_ClockConfig+0x264>)
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	4917      	ldr	r1, [pc, #92]	@ (8006d40 <HAL_RCC_ClockConfig+0x264>)
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f003 0308 	and.w	r3, r3, #8
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d009      	beq.n	8006d06 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006cf2:	4b13      	ldr	r3, [pc, #76]	@ (8006d40 <HAL_RCC_ClockConfig+0x264>)
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	691b      	ldr	r3, [r3, #16]
 8006cfe:	00db      	lsls	r3, r3, #3
 8006d00:	490f      	ldr	r1, [pc, #60]	@ (8006d40 <HAL_RCC_ClockConfig+0x264>)
 8006d02:	4313      	orrs	r3, r2
 8006d04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006d06:	f000 f825 	bl	8006d54 <HAL_RCC_GetSysClockFreq>
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8006d40 <HAL_RCC_ClockConfig+0x264>)
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	091b      	lsrs	r3, r3, #4
 8006d12:	f003 030f 	and.w	r3, r3, #15
 8006d16:	490c      	ldr	r1, [pc, #48]	@ (8006d48 <HAL_RCC_ClockConfig+0x26c>)
 8006d18:	5ccb      	ldrb	r3, [r1, r3]
 8006d1a:	f003 031f 	and.w	r3, r3, #31
 8006d1e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d22:	4a0a      	ldr	r2, [pc, #40]	@ (8006d4c <HAL_RCC_ClockConfig+0x270>)
 8006d24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006d26:	4b0a      	ldr	r3, [pc, #40]	@ (8006d50 <HAL_RCC_ClockConfig+0x274>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f7fd f9fa 	bl	8004124 <HAL_InitTick>
 8006d30:	4603      	mov	r3, r0
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3718      	adds	r7, #24
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	40022000 	.word	0x40022000
 8006d40:	40021000 	.word	0x40021000
 8006d44:	04c4b400 	.word	0x04c4b400
 8006d48:	0800d334 	.word	0x0800d334
 8006d4c:	20000234 	.word	0x20000234
 8006d50:	20000238 	.word	0x20000238

08006d54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b087      	sub	sp, #28
 8006d58:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006d5a:	4b2c      	ldr	r3, [pc, #176]	@ (8006e0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	f003 030c 	and.w	r3, r3, #12
 8006d62:	2b04      	cmp	r3, #4
 8006d64:	d102      	bne.n	8006d6c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006d66:	4b2a      	ldr	r3, [pc, #168]	@ (8006e10 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006d68:	613b      	str	r3, [r7, #16]
 8006d6a:	e047      	b.n	8006dfc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006d6c:	4b27      	ldr	r3, [pc, #156]	@ (8006e0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	f003 030c 	and.w	r3, r3, #12
 8006d74:	2b08      	cmp	r3, #8
 8006d76:	d102      	bne.n	8006d7e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006d78:	4b26      	ldr	r3, [pc, #152]	@ (8006e14 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006d7a:	613b      	str	r3, [r7, #16]
 8006d7c:	e03e      	b.n	8006dfc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006d7e:	4b23      	ldr	r3, [pc, #140]	@ (8006e0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	f003 030c 	and.w	r3, r3, #12
 8006d86:	2b0c      	cmp	r3, #12
 8006d88:	d136      	bne.n	8006df8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006d8a:	4b20      	ldr	r3, [pc, #128]	@ (8006e0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	f003 0303 	and.w	r3, r3, #3
 8006d92:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006d94:	4b1d      	ldr	r3, [pc, #116]	@ (8006e0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	091b      	lsrs	r3, r3, #4
 8006d9a:	f003 030f 	and.w	r3, r3, #15
 8006d9e:	3301      	adds	r3, #1
 8006da0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2b03      	cmp	r3, #3
 8006da6:	d10c      	bne.n	8006dc2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006da8:	4a1a      	ldr	r2, [pc, #104]	@ (8006e14 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8006db0:	4a16      	ldr	r2, [pc, #88]	@ (8006e0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006db2:	68d2      	ldr	r2, [r2, #12]
 8006db4:	0a12      	lsrs	r2, r2, #8
 8006db6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006dba:	fb02 f303 	mul.w	r3, r2, r3
 8006dbe:	617b      	str	r3, [r7, #20]
      break;
 8006dc0:	e00c      	b.n	8006ddc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006dc2:	4a13      	ldr	r2, [pc, #76]	@ (8006e10 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dca:	4a10      	ldr	r2, [pc, #64]	@ (8006e0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006dcc:	68d2      	ldr	r2, [r2, #12]
 8006dce:	0a12      	lsrs	r2, r2, #8
 8006dd0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006dd4:	fb02 f303 	mul.w	r3, r2, r3
 8006dd8:	617b      	str	r3, [r7, #20]
      break;
 8006dda:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8006e0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006dde:	68db      	ldr	r3, [r3, #12]
 8006de0:	0e5b      	lsrs	r3, r3, #25
 8006de2:	f003 0303 	and.w	r3, r3, #3
 8006de6:	3301      	adds	r3, #1
 8006de8:	005b      	lsls	r3, r3, #1
 8006dea:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006dec:	697a      	ldr	r2, [r7, #20]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006df4:	613b      	str	r3, [r7, #16]
 8006df6:	e001      	b.n	8006dfc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006dfc:	693b      	ldr	r3, [r7, #16]
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	371c      	adds	r7, #28
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr
 8006e0a:	bf00      	nop
 8006e0c:	40021000 	.word	0x40021000
 8006e10:	00f42400 	.word	0x00f42400
 8006e14:	016e3600 	.word	0x016e3600

08006e18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e1c:	4b03      	ldr	r3, [pc, #12]	@ (8006e2c <HAL_RCC_GetHCLKFreq+0x14>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	20000234 	.word	0x20000234

08006e30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006e34:	f7ff fff0 	bl	8006e18 <HAL_RCC_GetHCLKFreq>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	4b06      	ldr	r3, [pc, #24]	@ (8006e54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	0a1b      	lsrs	r3, r3, #8
 8006e40:	f003 0307 	and.w	r3, r3, #7
 8006e44:	4904      	ldr	r1, [pc, #16]	@ (8006e58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006e46:	5ccb      	ldrb	r3, [r1, r3]
 8006e48:	f003 031f 	and.w	r3, r3, #31
 8006e4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	40021000 	.word	0x40021000
 8006e58:	0800d344 	.word	0x0800d344

08006e5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006e60:	f7ff ffda 	bl	8006e18 <HAL_RCC_GetHCLKFreq>
 8006e64:	4602      	mov	r2, r0
 8006e66:	4b06      	ldr	r3, [pc, #24]	@ (8006e80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	0adb      	lsrs	r3, r3, #11
 8006e6c:	f003 0307 	and.w	r3, r3, #7
 8006e70:	4904      	ldr	r1, [pc, #16]	@ (8006e84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006e72:	5ccb      	ldrb	r3, [r1, r3]
 8006e74:	f003 031f 	and.w	r3, r3, #31
 8006e78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	bd80      	pop	{r7, pc}
 8006e80:	40021000 	.word	0x40021000
 8006e84:	0800d344 	.word	0x0800d344

08006e88 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b087      	sub	sp, #28
 8006e8c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006e8e:	4b1e      	ldr	r3, [pc, #120]	@ (8006f08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	f003 0303 	and.w	r3, r3, #3
 8006e96:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006e98:	4b1b      	ldr	r3, [pc, #108]	@ (8006f08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	091b      	lsrs	r3, r3, #4
 8006e9e:	f003 030f 	and.w	r3, r3, #15
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	2b03      	cmp	r3, #3
 8006eaa:	d10c      	bne.n	8006ec6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006eac:	4a17      	ldr	r2, [pc, #92]	@ (8006f0c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eb4:	4a14      	ldr	r2, [pc, #80]	@ (8006f08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006eb6:	68d2      	ldr	r2, [r2, #12]
 8006eb8:	0a12      	lsrs	r2, r2, #8
 8006eba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006ebe:	fb02 f303 	mul.w	r3, r2, r3
 8006ec2:	617b      	str	r3, [r7, #20]
    break;
 8006ec4:	e00c      	b.n	8006ee0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006ec6:	4a12      	ldr	r2, [pc, #72]	@ (8006f10 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ece:	4a0e      	ldr	r2, [pc, #56]	@ (8006f08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006ed0:	68d2      	ldr	r2, [r2, #12]
 8006ed2:	0a12      	lsrs	r2, r2, #8
 8006ed4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006ed8:	fb02 f303 	mul.w	r3, r2, r3
 8006edc:	617b      	str	r3, [r7, #20]
    break;
 8006ede:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006ee0:	4b09      	ldr	r3, [pc, #36]	@ (8006f08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	0e5b      	lsrs	r3, r3, #25
 8006ee6:	f003 0303 	and.w	r3, r3, #3
 8006eea:	3301      	adds	r3, #1
 8006eec:	005b      	lsls	r3, r3, #1
 8006eee:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006ef0:	697a      	ldr	r2, [r7, #20]
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ef8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006efa:	687b      	ldr	r3, [r7, #4]
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	371c      	adds	r7, #28
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr
 8006f08:	40021000 	.word	0x40021000
 8006f0c:	016e3600 	.word	0x016e3600
 8006f10:	00f42400 	.word	0x00f42400

08006f14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b086      	sub	sp, #24
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006f20:	2300      	movs	r3, #0
 8006f22:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	f000 8098 	beq.w	8007062 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f32:	2300      	movs	r3, #0
 8006f34:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f36:	4b43      	ldr	r3, [pc, #268]	@ (8007044 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d10d      	bne.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f42:	4b40      	ldr	r3, [pc, #256]	@ (8007044 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f46:	4a3f      	ldr	r2, [pc, #252]	@ (8007044 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f4e:	4b3d      	ldr	r3, [pc, #244]	@ (8007044 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f56:	60bb      	str	r3, [r7, #8]
 8006f58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f5e:	4b3a      	ldr	r3, [pc, #232]	@ (8007048 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a39      	ldr	r2, [pc, #228]	@ (8007048 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006f64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f68:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f6a:	f7fd f927 	bl	80041bc <HAL_GetTick>
 8006f6e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f70:	e009      	b.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f72:	f7fd f923 	bl	80041bc <HAL_GetTick>
 8006f76:	4602      	mov	r2, r0
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	1ad3      	subs	r3, r2, r3
 8006f7c:	2b02      	cmp	r3, #2
 8006f7e:	d902      	bls.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006f80:	2303      	movs	r3, #3
 8006f82:	74fb      	strb	r3, [r7, #19]
        break;
 8006f84:	e005      	b.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f86:	4b30      	ldr	r3, [pc, #192]	@ (8007048 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d0ef      	beq.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006f92:	7cfb      	ldrb	r3, [r7, #19]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d159      	bne.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006f98:	4b2a      	ldr	r3, [pc, #168]	@ (8007044 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fa2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d01e      	beq.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fae:	697a      	ldr	r2, [r7, #20]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d019      	beq.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006fb4:	4b23      	ldr	r3, [pc, #140]	@ (8007044 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006fbe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006fc0:	4b20      	ldr	r3, [pc, #128]	@ (8007044 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fc6:	4a1f      	ldr	r2, [pc, #124]	@ (8007044 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006fcc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006fd0:	4b1c      	ldr	r3, [pc, #112]	@ (8007044 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fd6:	4a1b      	ldr	r2, [pc, #108]	@ (8007044 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006fdc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006fe0:	4a18      	ldr	r2, [pc, #96]	@ (8007044 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	f003 0301 	and.w	r3, r3, #1
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d016      	beq.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ff2:	f7fd f8e3 	bl	80041bc <HAL_GetTick>
 8006ff6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ff8:	e00b      	b.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ffa:	f7fd f8df 	bl	80041bc <HAL_GetTick>
 8006ffe:	4602      	mov	r2, r0
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	1ad3      	subs	r3, r2, r3
 8007004:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007008:	4293      	cmp	r3, r2
 800700a:	d902      	bls.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800700c:	2303      	movs	r3, #3
 800700e:	74fb      	strb	r3, [r7, #19]
            break;
 8007010:	e006      	b.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007012:	4b0c      	ldr	r3, [pc, #48]	@ (8007044 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007014:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007018:	f003 0302 	and.w	r3, r3, #2
 800701c:	2b00      	cmp	r3, #0
 800701e:	d0ec      	beq.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007020:	7cfb      	ldrb	r3, [r7, #19]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d10b      	bne.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007026:	4b07      	ldr	r3, [pc, #28]	@ (8007044 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007028:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800702c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007034:	4903      	ldr	r1, [pc, #12]	@ (8007044 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007036:	4313      	orrs	r3, r2
 8007038:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800703c:	e008      	b.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800703e:	7cfb      	ldrb	r3, [r7, #19]
 8007040:	74bb      	strb	r3, [r7, #18]
 8007042:	e005      	b.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007044:	40021000 	.word	0x40021000
 8007048:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800704c:	7cfb      	ldrb	r3, [r7, #19]
 800704e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007050:	7c7b      	ldrb	r3, [r7, #17]
 8007052:	2b01      	cmp	r3, #1
 8007054:	d105      	bne.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007056:	4ba7      	ldr	r3, [pc, #668]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800705a:	4aa6      	ldr	r2, [pc, #664]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800705c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007060:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f003 0301 	and.w	r3, r3, #1
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00a      	beq.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800706e:	4ba1      	ldr	r3, [pc, #644]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007070:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007074:	f023 0203 	bic.w	r2, r3, #3
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	499d      	ldr	r1, [pc, #628]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800707e:	4313      	orrs	r3, r2
 8007080:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f003 0302 	and.w	r3, r3, #2
 800708c:	2b00      	cmp	r3, #0
 800708e:	d00a      	beq.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007090:	4b98      	ldr	r3, [pc, #608]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007092:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007096:	f023 020c 	bic.w	r2, r3, #12
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	4995      	ldr	r1, [pc, #596]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070a0:	4313      	orrs	r3, r2
 80070a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f003 0304 	and.w	r3, r3, #4
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00a      	beq.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80070b2:	4b90      	ldr	r3, [pc, #576]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070b8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	498c      	ldr	r1, [pc, #560]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070c2:	4313      	orrs	r3, r2
 80070c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f003 0308 	and.w	r3, r3, #8
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d00a      	beq.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80070d4:	4b87      	ldr	r3, [pc, #540]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070da:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	691b      	ldr	r3, [r3, #16]
 80070e2:	4984      	ldr	r1, [pc, #528]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070e4:	4313      	orrs	r3, r2
 80070e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f003 0310 	and.w	r3, r3, #16
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d00a      	beq.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80070f6:	4b7f      	ldr	r3, [pc, #508]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	695b      	ldr	r3, [r3, #20]
 8007104:	497b      	ldr	r1, [pc, #492]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007106:	4313      	orrs	r3, r2
 8007108:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f003 0320 	and.w	r3, r3, #32
 8007114:	2b00      	cmp	r3, #0
 8007116:	d00a      	beq.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007118:	4b76      	ldr	r3, [pc, #472]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800711a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800711e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	699b      	ldr	r3, [r3, #24]
 8007126:	4973      	ldr	r1, [pc, #460]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007128:	4313      	orrs	r3, r2
 800712a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007136:	2b00      	cmp	r3, #0
 8007138:	d00a      	beq.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800713a:	4b6e      	ldr	r3, [pc, #440]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800713c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007140:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	69db      	ldr	r3, [r3, #28]
 8007148:	496a      	ldr	r1, [pc, #424]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800714a:	4313      	orrs	r3, r2
 800714c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007158:	2b00      	cmp	r3, #0
 800715a:	d00a      	beq.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800715c:	4b65      	ldr	r3, [pc, #404]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800715e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007162:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a1b      	ldr	r3, [r3, #32]
 800716a:	4962      	ldr	r1, [pc, #392]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800716c:	4313      	orrs	r3, r2
 800716e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800717a:	2b00      	cmp	r3, #0
 800717c:	d00a      	beq.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800717e:	4b5d      	ldr	r3, [pc, #372]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007180:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007184:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800718c:	4959      	ldr	r1, [pc, #356]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800718e:	4313      	orrs	r3, r2
 8007190:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800719c:	2b00      	cmp	r3, #0
 800719e:	d00a      	beq.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80071a0:	4b54      	ldr	r3, [pc, #336]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80071a6:	f023 0203 	bic.w	r2, r3, #3
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071ae:	4951      	ldr	r1, [pc, #324]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071b0:	4313      	orrs	r3, r2
 80071b2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d00a      	beq.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80071c2:	4b4c      	ldr	r3, [pc, #304]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071c8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071d0:	4948      	ldr	r1, [pc, #288]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071d2:	4313      	orrs	r3, r2
 80071d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d015      	beq.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80071e4:	4b43      	ldr	r3, [pc, #268]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071f2:	4940      	ldr	r1, [pc, #256]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071f4:	4313      	orrs	r3, r2
 80071f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007202:	d105      	bne.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007204:	4b3b      	ldr	r3, [pc, #236]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	4a3a      	ldr	r2, [pc, #232]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800720a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800720e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007218:	2b00      	cmp	r3, #0
 800721a:	d015      	beq.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800721c:	4b35      	ldr	r3, [pc, #212]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800721e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007222:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800722a:	4932      	ldr	r1, [pc, #200]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800722c:	4313      	orrs	r3, r2
 800722e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007236:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800723a:	d105      	bne.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800723c:	4b2d      	ldr	r3, [pc, #180]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	4a2c      	ldr	r2, [pc, #176]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007242:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007246:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007250:	2b00      	cmp	r3, #0
 8007252:	d015      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007254:	4b27      	ldr	r3, [pc, #156]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800725a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007262:	4924      	ldr	r1, [pc, #144]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007264:	4313      	orrs	r3, r2
 8007266:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800726e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007272:	d105      	bne.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007274:	4b1f      	ldr	r3, [pc, #124]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	4a1e      	ldr	r2, [pc, #120]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800727a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800727e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007288:	2b00      	cmp	r3, #0
 800728a:	d015      	beq.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800728c:	4b19      	ldr	r3, [pc, #100]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800728e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007292:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800729a:	4916      	ldr	r1, [pc, #88]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800729c:	4313      	orrs	r3, r2
 800729e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80072aa:	d105      	bne.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80072ac:	4b11      	ldr	r3, [pc, #68]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	4a10      	ldr	r2, [pc, #64]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80072b6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d019      	beq.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80072c4:	4b0b      	ldr	r3, [pc, #44]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072ca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072d2:	4908      	ldr	r1, [pc, #32]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072d4:	4313      	orrs	r3, r2
 80072d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80072e2:	d109      	bne.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80072e4:	4b03      	ldr	r3, [pc, #12]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072e6:	68db      	ldr	r3, [r3, #12]
 80072e8:	4a02      	ldr	r2, [pc, #8]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80072ee:	60d3      	str	r3, [r2, #12]
 80072f0:	e002      	b.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80072f2:	bf00      	nop
 80072f4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007300:	2b00      	cmp	r3, #0
 8007302:	d015      	beq.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007304:	4b29      	ldr	r3, [pc, #164]	@ (80073ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800730a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007312:	4926      	ldr	r1, [pc, #152]	@ (80073ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007314:	4313      	orrs	r3, r2
 8007316:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800731e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007322:	d105      	bne.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007324:	4b21      	ldr	r3, [pc, #132]	@ (80073ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007326:	68db      	ldr	r3, [r3, #12]
 8007328:	4a20      	ldr	r2, [pc, #128]	@ (80073ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800732a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800732e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007338:	2b00      	cmp	r3, #0
 800733a:	d015      	beq.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800733c:	4b1b      	ldr	r3, [pc, #108]	@ (80073ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800733e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007342:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800734a:	4918      	ldr	r1, [pc, #96]	@ (80073ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800734c:	4313      	orrs	r3, r2
 800734e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007356:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800735a:	d105      	bne.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800735c:	4b13      	ldr	r3, [pc, #76]	@ (80073ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	4a12      	ldr	r2, [pc, #72]	@ (80073ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007362:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007366:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007370:	2b00      	cmp	r3, #0
 8007372:	d015      	beq.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007374:	4b0d      	ldr	r3, [pc, #52]	@ (80073ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007376:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800737a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007382:	490a      	ldr	r1, [pc, #40]	@ (80073ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007384:	4313      	orrs	r3, r2
 8007386:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800738e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007392:	d105      	bne.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007394:	4b05      	ldr	r3, [pc, #20]	@ (80073ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007396:	68db      	ldr	r3, [r3, #12]
 8007398:	4a04      	ldr	r2, [pc, #16]	@ (80073ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800739a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800739e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80073a0:	7cbb      	ldrb	r3, [r7, #18]
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3718      	adds	r7, #24
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	40021000 	.word	0x40021000

080073b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b084      	sub	sp, #16
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d101      	bne.n	80073c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80073be:	2301      	movs	r3, #1
 80073c0:	e09d      	b.n	80074fe <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d108      	bne.n	80073dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80073d2:	d009      	beq.n	80073e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	61da      	str	r2, [r3, #28]
 80073da:	e005      	b.n	80073e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2200      	movs	r2, #0
 80073e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d106      	bne.n	8007408 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f7fb ffa0 	bl	8003348 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2202      	movs	r2, #2
 800740c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800741e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007428:	d902      	bls.n	8007430 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800742a:	2300      	movs	r3, #0
 800742c:	60fb      	str	r3, [r7, #12]
 800742e:	e002      	b.n	8007436 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007430:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007434:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800743e:	d007      	beq.n	8007450 <HAL_SPI_Init+0xa0>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007448:	d002      	beq.n	8007450 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007460:	431a      	orrs	r2, r3
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	691b      	ldr	r3, [r3, #16]
 8007466:	f003 0302 	and.w	r3, r3, #2
 800746a:	431a      	orrs	r2, r3
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	695b      	ldr	r3, [r3, #20]
 8007470:	f003 0301 	and.w	r3, r3, #1
 8007474:	431a      	orrs	r2, r3
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	699b      	ldr	r3, [r3, #24]
 800747a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800747e:	431a      	orrs	r2, r3
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	69db      	ldr	r3, [r3, #28]
 8007484:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007488:	431a      	orrs	r2, r3
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6a1b      	ldr	r3, [r3, #32]
 800748e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007492:	ea42 0103 	orr.w	r1, r2, r3
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800749a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	430a      	orrs	r2, r1
 80074a4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	699b      	ldr	r3, [r3, #24]
 80074aa:	0c1b      	lsrs	r3, r3, #16
 80074ac:	f003 0204 	and.w	r2, r3, #4
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074b4:	f003 0310 	and.w	r3, r3, #16
 80074b8:	431a      	orrs	r2, r3
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074be:	f003 0308 	and.w	r3, r3, #8
 80074c2:	431a      	orrs	r2, r3
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	68db      	ldr	r3, [r3, #12]
 80074c8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80074cc:	ea42 0103 	orr.w	r1, r2, r3
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	430a      	orrs	r2, r1
 80074dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	69da      	ldr	r2, [r3, #28]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80074ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2200      	movs	r2, #0
 80074f2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80074fc:	2300      	movs	r3, #0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3710      	adds	r7, #16
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}

08007506 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007506:	b580      	push	{r7, lr}
 8007508:	b08a      	sub	sp, #40	@ 0x28
 800750a:	af00      	add	r7, sp, #0
 800750c:	60f8      	str	r0, [r7, #12]
 800750e:	60b9      	str	r1, [r7, #8]
 8007510:	607a      	str	r2, [r7, #4]
 8007512:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007514:	2301      	movs	r3, #1
 8007516:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007518:	f7fc fe50 	bl	80041bc <HAL_GetTick>
 800751c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007524:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800752c:	887b      	ldrh	r3, [r7, #2]
 800752e:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8007530:	887b      	ldrh	r3, [r7, #2]
 8007532:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007534:	7ffb      	ldrb	r3, [r7, #31]
 8007536:	2b01      	cmp	r3, #1
 8007538:	d00c      	beq.n	8007554 <HAL_SPI_TransmitReceive+0x4e>
 800753a:	69bb      	ldr	r3, [r7, #24]
 800753c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007540:	d106      	bne.n	8007550 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d102      	bne.n	8007550 <HAL_SPI_TransmitReceive+0x4a>
 800754a:	7ffb      	ldrb	r3, [r7, #31]
 800754c:	2b04      	cmp	r3, #4
 800754e:	d001      	beq.n	8007554 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8007550:	2302      	movs	r3, #2
 8007552:	e1f3      	b.n	800793c <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d005      	beq.n	8007566 <HAL_SPI_TransmitReceive+0x60>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d002      	beq.n	8007566 <HAL_SPI_TransmitReceive+0x60>
 8007560:	887b      	ldrh	r3, [r7, #2]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d101      	bne.n	800756a <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	e1e8      	b.n	800793c <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007570:	2b01      	cmp	r3, #1
 8007572:	d101      	bne.n	8007578 <HAL_SPI_TransmitReceive+0x72>
 8007574:	2302      	movs	r3, #2
 8007576:	e1e1      	b.n	800793c <HAL_SPI_TransmitReceive+0x436>
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2201      	movs	r2, #1
 800757c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007586:	b2db      	uxtb	r3, r3
 8007588:	2b04      	cmp	r3, #4
 800758a:	d003      	beq.n	8007594 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2205      	movs	r2, #5
 8007590:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2200      	movs	r2, #0
 8007598:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	887a      	ldrh	r2, [r7, #2]
 80075a4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	887a      	ldrh	r2, [r7, #2]
 80075ac:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	68ba      	ldr	r2, [r7, #8]
 80075b4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	887a      	ldrh	r2, [r7, #2]
 80075ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	887a      	ldrh	r2, [r7, #2]
 80075c0:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2200      	movs	r2, #0
 80075c6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2200      	movs	r2, #0
 80075cc:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	68db      	ldr	r3, [r3, #12]
 80075d2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80075d6:	d802      	bhi.n	80075de <HAL_SPI_TransmitReceive+0xd8>
 80075d8:	8abb      	ldrh	r3, [r7, #20]
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d908      	bls.n	80075f0 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	685a      	ldr	r2, [r3, #4]
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80075ec:	605a      	str	r2, [r3, #4]
 80075ee:	e007      	b.n	8007600 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	685a      	ldr	r2, [r3, #4]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80075fe:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800760a:	2b40      	cmp	r3, #64	@ 0x40
 800760c:	d007      	beq.n	800761e <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800761c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	68db      	ldr	r3, [r3, #12]
 8007622:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007626:	f240 8083 	bls.w	8007730 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d002      	beq.n	8007638 <HAL_SPI_TransmitReceive+0x132>
 8007632:	8afb      	ldrh	r3, [r7, #22]
 8007634:	2b01      	cmp	r3, #1
 8007636:	d16f      	bne.n	8007718 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800763c:	881a      	ldrh	r2, [r3, #0]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007648:	1c9a      	adds	r2, r3, #2
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007652:	b29b      	uxth	r3, r3
 8007654:	3b01      	subs	r3, #1
 8007656:	b29a      	uxth	r2, r3
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800765c:	e05c      	b.n	8007718 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	f003 0302 	and.w	r3, r3, #2
 8007668:	2b02      	cmp	r3, #2
 800766a:	d11b      	bne.n	80076a4 <HAL_SPI_TransmitReceive+0x19e>
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007670:	b29b      	uxth	r3, r3
 8007672:	2b00      	cmp	r3, #0
 8007674:	d016      	beq.n	80076a4 <HAL_SPI_TransmitReceive+0x19e>
 8007676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007678:	2b01      	cmp	r3, #1
 800767a:	d113      	bne.n	80076a4 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007680:	881a      	ldrh	r2, [r3, #0]
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800768c:	1c9a      	adds	r2, r3, #2
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007696:	b29b      	uxth	r3, r3
 8007698:	3b01      	subs	r3, #1
 800769a:	b29a      	uxth	r2, r3
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80076a0:	2300      	movs	r3, #0
 80076a2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	f003 0301 	and.w	r3, r3, #1
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d11c      	bne.n	80076ec <HAL_SPI_TransmitReceive+0x1e6>
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d016      	beq.n	80076ec <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	68da      	ldr	r2, [r3, #12]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076c8:	b292      	uxth	r2, r2
 80076ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076d0:	1c9a      	adds	r2, r3, #2
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80076dc:	b29b      	uxth	r3, r3
 80076de:	3b01      	subs	r3, #1
 80076e0:	b29a      	uxth	r2, r3
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80076e8:	2301      	movs	r3, #1
 80076ea:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80076ec:	f7fc fd66 	bl	80041bc <HAL_GetTick>
 80076f0:	4602      	mov	r2, r0
 80076f2:	6a3b      	ldr	r3, [r7, #32]
 80076f4:	1ad3      	subs	r3, r2, r3
 80076f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d80d      	bhi.n	8007718 <HAL_SPI_TransmitReceive+0x212>
 80076fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007702:	d009      	beq.n	8007718 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2201      	movs	r2, #1
 8007708:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2200      	movs	r2, #0
 8007710:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8007714:	2303      	movs	r3, #3
 8007716:	e111      	b.n	800793c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800771c:	b29b      	uxth	r3, r3
 800771e:	2b00      	cmp	r3, #0
 8007720:	d19d      	bne.n	800765e <HAL_SPI_TransmitReceive+0x158>
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007728:	b29b      	uxth	r3, r3
 800772a:	2b00      	cmp	r3, #0
 800772c:	d197      	bne.n	800765e <HAL_SPI_TransmitReceive+0x158>
 800772e:	e0e5      	b.n	80078fc <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d003      	beq.n	8007740 <HAL_SPI_TransmitReceive+0x23a>
 8007738:	8afb      	ldrh	r3, [r7, #22]
 800773a:	2b01      	cmp	r3, #1
 800773c:	f040 80d1 	bne.w	80078e2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007744:	b29b      	uxth	r3, r3
 8007746:	2b01      	cmp	r3, #1
 8007748:	d912      	bls.n	8007770 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800774e:	881a      	ldrh	r2, [r3, #0]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800775a:	1c9a      	adds	r2, r3, #2
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007764:	b29b      	uxth	r3, r3
 8007766:	3b02      	subs	r3, #2
 8007768:	b29a      	uxth	r2, r3
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800776e:	e0b8      	b.n	80078e2 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	330c      	adds	r3, #12
 800777a:	7812      	ldrb	r2, [r2, #0]
 800777c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007782:	1c5a      	adds	r2, r3, #1
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800778c:	b29b      	uxth	r3, r3
 800778e:	3b01      	subs	r3, #1
 8007790:	b29a      	uxth	r2, r3
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007796:	e0a4      	b.n	80078e2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	f003 0302 	and.w	r3, r3, #2
 80077a2:	2b02      	cmp	r3, #2
 80077a4:	d134      	bne.n	8007810 <HAL_SPI_TransmitReceive+0x30a>
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d02f      	beq.n	8007810 <HAL_SPI_TransmitReceive+0x30a>
 80077b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d12c      	bne.n	8007810 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d912      	bls.n	80077e6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077c4:	881a      	ldrh	r2, [r3, #0]
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077d0:	1c9a      	adds	r2, r3, #2
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077da:	b29b      	uxth	r3, r3
 80077dc:	3b02      	subs	r3, #2
 80077de:	b29a      	uxth	r2, r3
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80077e4:	e012      	b.n	800780c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	330c      	adds	r3, #12
 80077f0:	7812      	ldrb	r2, [r2, #0]
 80077f2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077f8:	1c5a      	adds	r2, r3, #1
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007802:	b29b      	uxth	r3, r3
 8007804:	3b01      	subs	r3, #1
 8007806:	b29a      	uxth	r2, r3
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800780c:	2300      	movs	r3, #0
 800780e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	f003 0301 	and.w	r3, r3, #1
 800781a:	2b01      	cmp	r3, #1
 800781c:	d148      	bne.n	80078b0 <HAL_SPI_TransmitReceive+0x3aa>
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007824:	b29b      	uxth	r3, r3
 8007826:	2b00      	cmp	r3, #0
 8007828:	d042      	beq.n	80078b0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007830:	b29b      	uxth	r3, r3
 8007832:	2b01      	cmp	r3, #1
 8007834:	d923      	bls.n	800787e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	68da      	ldr	r2, [r3, #12]
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007840:	b292      	uxth	r2, r2
 8007842:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007848:	1c9a      	adds	r2, r3, #2
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007854:	b29b      	uxth	r3, r3
 8007856:	3b02      	subs	r3, #2
 8007858:	b29a      	uxth	r2, r3
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007866:	b29b      	uxth	r3, r3
 8007868:	2b01      	cmp	r3, #1
 800786a:	d81f      	bhi.n	80078ac <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	685a      	ldr	r2, [r3, #4]
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800787a:	605a      	str	r2, [r3, #4]
 800787c:	e016      	b.n	80078ac <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f103 020c 	add.w	r2, r3, #12
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800788a:	7812      	ldrb	r2, [r2, #0]
 800788c:	b2d2      	uxtb	r2, r2
 800788e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007894:	1c5a      	adds	r2, r3, #1
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	3b01      	subs	r3, #1
 80078a4:	b29a      	uxth	r2, r3
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80078ac:	2301      	movs	r3, #1
 80078ae:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80078b0:	f7fc fc84 	bl	80041bc <HAL_GetTick>
 80078b4:	4602      	mov	r2, r0
 80078b6:	6a3b      	ldr	r3, [r7, #32]
 80078b8:	1ad3      	subs	r3, r2, r3
 80078ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078bc:	429a      	cmp	r2, r3
 80078be:	d803      	bhi.n	80078c8 <HAL_SPI_TransmitReceive+0x3c2>
 80078c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078c6:	d102      	bne.n	80078ce <HAL_SPI_TransmitReceive+0x3c8>
 80078c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d109      	bne.n	80078e2 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2201      	movs	r2, #1
 80078d2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2200      	movs	r2, #0
 80078da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80078de:	2303      	movs	r3, #3
 80078e0:	e02c      	b.n	800793c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	f47f af55 	bne.w	8007798 <HAL_SPI_TransmitReceive+0x292>
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	f47f af4e 	bne.w	8007798 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80078fc:	6a3a      	ldr	r2, [r7, #32]
 80078fe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007900:	68f8      	ldr	r0, [r7, #12]
 8007902:	f000 f93d 	bl	8007b80 <SPI_EndRxTxTransaction>
 8007906:	4603      	mov	r3, r0
 8007908:	2b00      	cmp	r3, #0
 800790a:	d008      	beq.n	800791e <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2220      	movs	r2, #32
 8007910:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2200      	movs	r2, #0
 8007916:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	e00e      	b.n	800793c <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2201      	movs	r2, #1
 8007922:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2200      	movs	r2, #0
 800792a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007932:	2b00      	cmp	r3, #0
 8007934:	d001      	beq.n	800793a <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8007936:	2301      	movs	r3, #1
 8007938:	e000      	b.n	800793c <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800793a:	2300      	movs	r3, #0
  }
}
 800793c:	4618      	mov	r0, r3
 800793e:	3728      	adds	r7, #40	@ 0x28
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b088      	sub	sp, #32
 8007948:	af00      	add	r7, sp, #0
 800794a:	60f8      	str	r0, [r7, #12]
 800794c:	60b9      	str	r1, [r7, #8]
 800794e:	603b      	str	r3, [r7, #0]
 8007950:	4613      	mov	r3, r2
 8007952:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007954:	f7fc fc32 	bl	80041bc <HAL_GetTick>
 8007958:	4602      	mov	r2, r0
 800795a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800795c:	1a9b      	subs	r3, r3, r2
 800795e:	683a      	ldr	r2, [r7, #0]
 8007960:	4413      	add	r3, r2
 8007962:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007964:	f7fc fc2a 	bl	80041bc <HAL_GetTick>
 8007968:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800796a:	4b39      	ldr	r3, [pc, #228]	@ (8007a50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	015b      	lsls	r3, r3, #5
 8007970:	0d1b      	lsrs	r3, r3, #20
 8007972:	69fa      	ldr	r2, [r7, #28]
 8007974:	fb02 f303 	mul.w	r3, r2, r3
 8007978:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800797a:	e054      	b.n	8007a26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007982:	d050      	beq.n	8007a26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007984:	f7fc fc1a 	bl	80041bc <HAL_GetTick>
 8007988:	4602      	mov	r2, r0
 800798a:	69bb      	ldr	r3, [r7, #24]
 800798c:	1ad3      	subs	r3, r2, r3
 800798e:	69fa      	ldr	r2, [r7, #28]
 8007990:	429a      	cmp	r2, r3
 8007992:	d902      	bls.n	800799a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007994:	69fb      	ldr	r3, [r7, #28]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d13d      	bne.n	8007a16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	685a      	ldr	r2, [r3, #4]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80079a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80079b2:	d111      	bne.n	80079d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079bc:	d004      	beq.n	80079c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079c6:	d107      	bne.n	80079d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80079d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079e0:	d10f      	bne.n	8007a02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80079f0:	601a      	str	r2, [r3, #0]
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	681a      	ldr	r2, [r3, #0]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007a00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2201      	movs	r2, #1
 8007a06:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007a12:	2303      	movs	r3, #3
 8007a14:	e017      	b.n	8007a46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d101      	bne.n	8007a20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	3b01      	subs	r3, #1
 8007a24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	689a      	ldr	r2, [r3, #8]
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	4013      	ands	r3, r2
 8007a30:	68ba      	ldr	r2, [r7, #8]
 8007a32:	429a      	cmp	r2, r3
 8007a34:	bf0c      	ite	eq
 8007a36:	2301      	moveq	r3, #1
 8007a38:	2300      	movne	r3, #0
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	79fb      	ldrb	r3, [r7, #7]
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d19b      	bne.n	800797c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007a44:	2300      	movs	r3, #0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3720      	adds	r7, #32
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
 8007a4e:	bf00      	nop
 8007a50:	20000234 	.word	0x20000234

08007a54 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b08a      	sub	sp, #40	@ 0x28
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	60f8      	str	r0, [r7, #12]
 8007a5c:	60b9      	str	r1, [r7, #8]
 8007a5e:	607a      	str	r2, [r7, #4]
 8007a60:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007a62:	2300      	movs	r3, #0
 8007a64:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007a66:	f7fc fba9 	bl	80041bc <HAL_GetTick>
 8007a6a:	4602      	mov	r2, r0
 8007a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a6e:	1a9b      	subs	r3, r3, r2
 8007a70:	683a      	ldr	r2, [r7, #0]
 8007a72:	4413      	add	r3, r2
 8007a74:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007a76:	f7fc fba1 	bl	80041bc <HAL_GetTick>
 8007a7a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	330c      	adds	r3, #12
 8007a82:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007a84:	4b3d      	ldr	r3, [pc, #244]	@ (8007b7c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007a86:	681a      	ldr	r2, [r3, #0]
 8007a88:	4613      	mov	r3, r2
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	4413      	add	r3, r2
 8007a8e:	00da      	lsls	r2, r3, #3
 8007a90:	1ad3      	subs	r3, r2, r3
 8007a92:	0d1b      	lsrs	r3, r3, #20
 8007a94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a96:	fb02 f303 	mul.w	r3, r2, r3
 8007a9a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007a9c:	e060      	b.n	8007b60 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007aa4:	d107      	bne.n	8007ab6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d104      	bne.n	8007ab6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007aac:	69fb      	ldr	r3, [r7, #28]
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007ab4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007abc:	d050      	beq.n	8007b60 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007abe:	f7fc fb7d 	bl	80041bc <HAL_GetTick>
 8007ac2:	4602      	mov	r2, r0
 8007ac4:	6a3b      	ldr	r3, [r7, #32]
 8007ac6:	1ad3      	subs	r3, r2, r3
 8007ac8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d902      	bls.n	8007ad4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d13d      	bne.n	8007b50 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	685a      	ldr	r2, [r3, #4]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007ae2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007aec:	d111      	bne.n	8007b12 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007af6:	d004      	beq.n	8007b02 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b00:	d107      	bne.n	8007b12 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	681a      	ldr	r2, [r3, #0]
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007b10:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b1a:	d10f      	bne.n	8007b3c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	681a      	ldr	r2, [r3, #0]
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007b2a:	601a      	str	r2, [r3, #0]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007b3a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2200      	movs	r2, #0
 8007b48:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007b4c:	2303      	movs	r3, #3
 8007b4e:	e010      	b.n	8007b72 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007b50:	69bb      	ldr	r3, [r7, #24]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d101      	bne.n	8007b5a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007b56:	2300      	movs	r3, #0
 8007b58:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007b5a:	69bb      	ldr	r3, [r7, #24]
 8007b5c:	3b01      	subs	r3, #1
 8007b5e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	689a      	ldr	r2, [r3, #8]
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	4013      	ands	r3, r2
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d196      	bne.n	8007a9e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007b70:	2300      	movs	r3, #0
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3728      	adds	r7, #40	@ 0x28
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	20000234 	.word	0x20000234

08007b80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b086      	sub	sp, #24
 8007b84:	af02      	add	r7, sp, #8
 8007b86:	60f8      	str	r0, [r7, #12]
 8007b88:	60b9      	str	r1, [r7, #8]
 8007b8a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	9300      	str	r3, [sp, #0]
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	2200      	movs	r2, #0
 8007b94:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007b98:	68f8      	ldr	r0, [r7, #12]
 8007b9a:	f7ff ff5b 	bl	8007a54 <SPI_WaitFifoStateUntilTimeout>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d007      	beq.n	8007bb4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ba8:	f043 0220 	orr.w	r2, r3, #32
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007bb0:	2303      	movs	r3, #3
 8007bb2:	e027      	b.n	8007c04 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	9300      	str	r3, [sp, #0]
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	2180      	movs	r1, #128	@ 0x80
 8007bbe:	68f8      	ldr	r0, [r7, #12]
 8007bc0:	f7ff fec0 	bl	8007944 <SPI_WaitFlagStateUntilTimeout>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d007      	beq.n	8007bda <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007bce:	f043 0220 	orr.w	r2, r3, #32
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007bd6:	2303      	movs	r3, #3
 8007bd8:	e014      	b.n	8007c04 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	9300      	str	r3, [sp, #0]
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007be6:	68f8      	ldr	r0, [r7, #12]
 8007be8:	f7ff ff34 	bl	8007a54 <SPI_WaitFifoStateUntilTimeout>
 8007bec:	4603      	mov	r3, r0
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d007      	beq.n	8007c02 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007bf6:	f043 0220 	orr.w	r2, r3, #32
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007bfe:	2303      	movs	r3, #3
 8007c00:	e000      	b.n	8007c04 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007c02:	2300      	movs	r3, #0
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3710      	adds	r7, #16
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b082      	sub	sp, #8
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d101      	bne.n	8007c1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	e054      	b.n	8007cc8 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d111      	bne.n	8007c4e <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f001 ffd4 	bl	8009be0 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d102      	bne.n	8007c46 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	4a23      	ldr	r2, [pc, #140]	@ (8007cd0 <HAL_TIM_Base_Init+0xc4>)
 8007c44:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2202      	movs	r2, #2
 8007c52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	3304      	adds	r3, #4
 8007c5e:	4619      	mov	r1, r3
 8007c60:	4610      	mov	r0, r2
 8007c62:	f001 fb1d 	bl	80092a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2201      	movs	r2, #1
 8007c6a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2201      	movs	r2, #1
 8007c72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2201      	movs	r2, #1
 8007c7a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2201      	movs	r2, #1
 8007c82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2201      	movs	r2, #1
 8007c8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2201      	movs	r2, #1
 8007c92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2201      	movs	r2, #1
 8007c9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2201      	movs	r2, #1
 8007caa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2201      	movs	r2, #1
 8007cba:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007cc6:	2300      	movs	r3, #0
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3708      	adds	r7, #8
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}
 8007cd0:	08003bf5 	.word	0x08003bf5

08007cd4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b085      	sub	sp, #20
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d001      	beq.n	8007cec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	e04c      	b.n	8007d86 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2202      	movs	r2, #2
 8007cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a26      	ldr	r2, [pc, #152]	@ (8007d94 <HAL_TIM_Base_Start+0xc0>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d022      	beq.n	8007d44 <HAL_TIM_Base_Start+0x70>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d06:	d01d      	beq.n	8007d44 <HAL_TIM_Base_Start+0x70>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a22      	ldr	r2, [pc, #136]	@ (8007d98 <HAL_TIM_Base_Start+0xc4>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d018      	beq.n	8007d44 <HAL_TIM_Base_Start+0x70>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a21      	ldr	r2, [pc, #132]	@ (8007d9c <HAL_TIM_Base_Start+0xc8>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d013      	beq.n	8007d44 <HAL_TIM_Base_Start+0x70>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a1f      	ldr	r2, [pc, #124]	@ (8007da0 <HAL_TIM_Base_Start+0xcc>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d00e      	beq.n	8007d44 <HAL_TIM_Base_Start+0x70>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a1e      	ldr	r2, [pc, #120]	@ (8007da4 <HAL_TIM_Base_Start+0xd0>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d009      	beq.n	8007d44 <HAL_TIM_Base_Start+0x70>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a1c      	ldr	r2, [pc, #112]	@ (8007da8 <HAL_TIM_Base_Start+0xd4>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d004      	beq.n	8007d44 <HAL_TIM_Base_Start+0x70>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a1b      	ldr	r2, [pc, #108]	@ (8007dac <HAL_TIM_Base_Start+0xd8>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d115      	bne.n	8007d70 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	689a      	ldr	r2, [r3, #8]
 8007d4a:	4b19      	ldr	r3, [pc, #100]	@ (8007db0 <HAL_TIM_Base_Start+0xdc>)
 8007d4c:	4013      	ands	r3, r2
 8007d4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2b06      	cmp	r3, #6
 8007d54:	d015      	beq.n	8007d82 <HAL_TIM_Base_Start+0xae>
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d5c:	d011      	beq.n	8007d82 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f042 0201 	orr.w	r2, r2, #1
 8007d6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d6e:	e008      	b.n	8007d82 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f042 0201 	orr.w	r2, r2, #1
 8007d7e:	601a      	str	r2, [r3, #0]
 8007d80:	e000      	b.n	8007d84 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d82:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007d84:	2300      	movs	r3, #0
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3714      	adds	r7, #20
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr
 8007d92:	bf00      	nop
 8007d94:	40012c00 	.word	0x40012c00
 8007d98:	40000400 	.word	0x40000400
 8007d9c:	40000800 	.word	0x40000800
 8007da0:	40000c00 	.word	0x40000c00
 8007da4:	40013400 	.word	0x40013400
 8007da8:	40014000 	.word	0x40014000
 8007dac:	40015000 	.word	0x40015000
 8007db0:	00010007 	.word	0x00010007

08007db4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b085      	sub	sp, #20
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007dc2:	b2db      	uxtb	r3, r3
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d001      	beq.n	8007dcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	e054      	b.n	8007e76 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2202      	movs	r2, #2
 8007dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	68da      	ldr	r2, [r3, #12]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f042 0201 	orr.w	r2, r2, #1
 8007de2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a26      	ldr	r2, [pc, #152]	@ (8007e84 <HAL_TIM_Base_Start_IT+0xd0>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d022      	beq.n	8007e34 <HAL_TIM_Base_Start_IT+0x80>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007df6:	d01d      	beq.n	8007e34 <HAL_TIM_Base_Start_IT+0x80>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a22      	ldr	r2, [pc, #136]	@ (8007e88 <HAL_TIM_Base_Start_IT+0xd4>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d018      	beq.n	8007e34 <HAL_TIM_Base_Start_IT+0x80>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a21      	ldr	r2, [pc, #132]	@ (8007e8c <HAL_TIM_Base_Start_IT+0xd8>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d013      	beq.n	8007e34 <HAL_TIM_Base_Start_IT+0x80>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a1f      	ldr	r2, [pc, #124]	@ (8007e90 <HAL_TIM_Base_Start_IT+0xdc>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d00e      	beq.n	8007e34 <HAL_TIM_Base_Start_IT+0x80>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a1e      	ldr	r2, [pc, #120]	@ (8007e94 <HAL_TIM_Base_Start_IT+0xe0>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d009      	beq.n	8007e34 <HAL_TIM_Base_Start_IT+0x80>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a1c      	ldr	r2, [pc, #112]	@ (8007e98 <HAL_TIM_Base_Start_IT+0xe4>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d004      	beq.n	8007e34 <HAL_TIM_Base_Start_IT+0x80>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a1b      	ldr	r2, [pc, #108]	@ (8007e9c <HAL_TIM_Base_Start_IT+0xe8>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d115      	bne.n	8007e60 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	689a      	ldr	r2, [r3, #8]
 8007e3a:	4b19      	ldr	r3, [pc, #100]	@ (8007ea0 <HAL_TIM_Base_Start_IT+0xec>)
 8007e3c:	4013      	ands	r3, r2
 8007e3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2b06      	cmp	r3, #6
 8007e44:	d015      	beq.n	8007e72 <HAL_TIM_Base_Start_IT+0xbe>
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e4c:	d011      	beq.n	8007e72 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	681a      	ldr	r2, [r3, #0]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f042 0201 	orr.w	r2, r2, #1
 8007e5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e5e:	e008      	b.n	8007e72 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f042 0201 	orr.w	r2, r2, #1
 8007e6e:	601a      	str	r2, [r3, #0]
 8007e70:	e000      	b.n	8007e74 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e72:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007e74:	2300      	movs	r3, #0
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3714      	adds	r7, #20
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr
 8007e82:	bf00      	nop
 8007e84:	40012c00 	.word	0x40012c00
 8007e88:	40000400 	.word	0x40000400
 8007e8c:	40000800 	.word	0x40000800
 8007e90:	40000c00 	.word	0x40000c00
 8007e94:	40013400 	.word	0x40013400
 8007e98:	40014000 	.word	0x40014000
 8007e9c:	40015000 	.word	0x40015000
 8007ea0:	00010007 	.word	0x00010007

08007ea4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b082      	sub	sp, #8
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d101      	bne.n	8007eb6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	e054      	b.n	8007f60 <HAL_TIM_OC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d111      	bne.n	8007ee6 <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f001 fe88 	bl	8009be0 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d102      	bne.n	8007ede <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	4a23      	ldr	r2, [pc, #140]	@ (8007f68 <HAL_TIM_OC_Init+0xc4>)
 8007edc:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2202      	movs	r2, #2
 8007eea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	3304      	adds	r3, #4
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	4610      	mov	r0, r2
 8007efa:	f001 f9d1 	bl	80092a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2201      	movs	r2, #1
 8007f02:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2201      	movs	r2, #1
 8007f0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2201      	movs	r2, #1
 8007f12:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2201      	movs	r2, #1
 8007f1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2201      	movs	r2, #1
 8007f22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2201      	movs	r2, #1
 8007f2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2201      	movs	r2, #1
 8007f32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2201      	movs	r2, #1
 8007f3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2201      	movs	r2, #1
 8007f42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2201      	movs	r2, #1
 8007f4a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2201      	movs	r2, #1
 8007f52:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2201      	movs	r2, #1
 8007f5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007f5e:	2300      	movs	r3, #0
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3708      	adds	r7, #8
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}
 8007f68:	08007f6d 	.word	0x08007f6d

08007f6c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b083      	sub	sp, #12
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007f74:	bf00      	nop
 8007f76:	370c      	adds	r7, #12
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b082      	sub	sp, #8
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d101      	bne.n	8007f92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	e054      	b.n	800803c <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d111      	bne.n	8007fc2 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f001 fe1a 	bl	8009be0 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d102      	bne.n	8007fba <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	4a23      	ldr	r2, [pc, #140]	@ (8008044 <HAL_TIM_PWM_Init+0xc4>)
 8007fb8:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2202      	movs	r2, #2
 8007fc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681a      	ldr	r2, [r3, #0]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	3304      	adds	r3, #4
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	4610      	mov	r0, r2
 8007fd6:	f001 f963 	bl	80092a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2201      	movs	r2, #1
 8007fde:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2201      	movs	r2, #1
 8007fee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2201      	movs	r2, #1
 8008006:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2201      	movs	r2, #1
 800800e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2201      	movs	r2, #1
 8008016:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2201      	movs	r2, #1
 800801e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2201      	movs	r2, #1
 8008026:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2201      	movs	r2, #1
 800802e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2201      	movs	r2, #1
 8008036:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800803a:	2300      	movs	r3, #0
}
 800803c:	4618      	mov	r0, r3
 800803e:	3708      	adds	r7, #8
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}
 8008044:	08008049 	.word	0x08008049

08008048 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008048:	b480      	push	{r7}
 800804a:	b083      	sub	sp, #12
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008050:	bf00      	nop
 8008052:	370c      	adds	r7, #12
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr

0800805c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b084      	sub	sp, #16
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d109      	bne.n	8008080 <HAL_TIM_PWM_Start+0x24>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008072:	b2db      	uxtb	r3, r3
 8008074:	2b01      	cmp	r3, #1
 8008076:	bf14      	ite	ne
 8008078:	2301      	movne	r3, #1
 800807a:	2300      	moveq	r3, #0
 800807c:	b2db      	uxtb	r3, r3
 800807e:	e03c      	b.n	80080fa <HAL_TIM_PWM_Start+0x9e>
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	2b04      	cmp	r3, #4
 8008084:	d109      	bne.n	800809a <HAL_TIM_PWM_Start+0x3e>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800808c:	b2db      	uxtb	r3, r3
 800808e:	2b01      	cmp	r3, #1
 8008090:	bf14      	ite	ne
 8008092:	2301      	movne	r3, #1
 8008094:	2300      	moveq	r3, #0
 8008096:	b2db      	uxtb	r3, r3
 8008098:	e02f      	b.n	80080fa <HAL_TIM_PWM_Start+0x9e>
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	2b08      	cmp	r3, #8
 800809e:	d109      	bne.n	80080b4 <HAL_TIM_PWM_Start+0x58>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	bf14      	ite	ne
 80080ac:	2301      	movne	r3, #1
 80080ae:	2300      	moveq	r3, #0
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	e022      	b.n	80080fa <HAL_TIM_PWM_Start+0x9e>
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	2b0c      	cmp	r3, #12
 80080b8:	d109      	bne.n	80080ce <HAL_TIM_PWM_Start+0x72>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	bf14      	ite	ne
 80080c6:	2301      	movne	r3, #1
 80080c8:	2300      	moveq	r3, #0
 80080ca:	b2db      	uxtb	r3, r3
 80080cc:	e015      	b.n	80080fa <HAL_TIM_PWM_Start+0x9e>
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	2b10      	cmp	r3, #16
 80080d2:	d109      	bne.n	80080e8 <HAL_TIM_PWM_Start+0x8c>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	2b01      	cmp	r3, #1
 80080de:	bf14      	ite	ne
 80080e0:	2301      	movne	r3, #1
 80080e2:	2300      	moveq	r3, #0
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	e008      	b.n	80080fa <HAL_TIM_PWM_Start+0x9e>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80080ee:	b2db      	uxtb	r3, r3
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	bf14      	ite	ne
 80080f4:	2301      	movne	r3, #1
 80080f6:	2300      	moveq	r3, #0
 80080f8:	b2db      	uxtb	r3, r3
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d001      	beq.n	8008102 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80080fe:	2301      	movs	r3, #1
 8008100:	e0a6      	b.n	8008250 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d104      	bne.n	8008112 <HAL_TIM_PWM_Start+0xb6>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2202      	movs	r2, #2
 800810c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008110:	e023      	b.n	800815a <HAL_TIM_PWM_Start+0xfe>
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	2b04      	cmp	r3, #4
 8008116:	d104      	bne.n	8008122 <HAL_TIM_PWM_Start+0xc6>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2202      	movs	r2, #2
 800811c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008120:	e01b      	b.n	800815a <HAL_TIM_PWM_Start+0xfe>
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	2b08      	cmp	r3, #8
 8008126:	d104      	bne.n	8008132 <HAL_TIM_PWM_Start+0xd6>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2202      	movs	r2, #2
 800812c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008130:	e013      	b.n	800815a <HAL_TIM_PWM_Start+0xfe>
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	2b0c      	cmp	r3, #12
 8008136:	d104      	bne.n	8008142 <HAL_TIM_PWM_Start+0xe6>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2202      	movs	r2, #2
 800813c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008140:	e00b      	b.n	800815a <HAL_TIM_PWM_Start+0xfe>
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	2b10      	cmp	r3, #16
 8008146:	d104      	bne.n	8008152 <HAL_TIM_PWM_Start+0xf6>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2202      	movs	r2, #2
 800814c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008150:	e003      	b.n	800815a <HAL_TIM_PWM_Start+0xfe>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2202      	movs	r2, #2
 8008156:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	2201      	movs	r2, #1
 8008160:	6839      	ldr	r1, [r7, #0]
 8008162:	4618      	mov	r0, r3
 8008164:	f001 fd16 	bl	8009b94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a3a      	ldr	r2, [pc, #232]	@ (8008258 <HAL_TIM_PWM_Start+0x1fc>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d018      	beq.n	80081a4 <HAL_TIM_PWM_Start+0x148>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a39      	ldr	r2, [pc, #228]	@ (800825c <HAL_TIM_PWM_Start+0x200>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d013      	beq.n	80081a4 <HAL_TIM_PWM_Start+0x148>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a37      	ldr	r2, [pc, #220]	@ (8008260 <HAL_TIM_PWM_Start+0x204>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d00e      	beq.n	80081a4 <HAL_TIM_PWM_Start+0x148>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a36      	ldr	r2, [pc, #216]	@ (8008264 <HAL_TIM_PWM_Start+0x208>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d009      	beq.n	80081a4 <HAL_TIM_PWM_Start+0x148>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a34      	ldr	r2, [pc, #208]	@ (8008268 <HAL_TIM_PWM_Start+0x20c>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d004      	beq.n	80081a4 <HAL_TIM_PWM_Start+0x148>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a33      	ldr	r2, [pc, #204]	@ (800826c <HAL_TIM_PWM_Start+0x210>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d101      	bne.n	80081a8 <HAL_TIM_PWM_Start+0x14c>
 80081a4:	2301      	movs	r3, #1
 80081a6:	e000      	b.n	80081aa <HAL_TIM_PWM_Start+0x14e>
 80081a8:	2300      	movs	r3, #0
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d007      	beq.n	80081be <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80081bc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a25      	ldr	r2, [pc, #148]	@ (8008258 <HAL_TIM_PWM_Start+0x1fc>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d022      	beq.n	800820e <HAL_TIM_PWM_Start+0x1b2>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081d0:	d01d      	beq.n	800820e <HAL_TIM_PWM_Start+0x1b2>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a26      	ldr	r2, [pc, #152]	@ (8008270 <HAL_TIM_PWM_Start+0x214>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d018      	beq.n	800820e <HAL_TIM_PWM_Start+0x1b2>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a24      	ldr	r2, [pc, #144]	@ (8008274 <HAL_TIM_PWM_Start+0x218>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d013      	beq.n	800820e <HAL_TIM_PWM_Start+0x1b2>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a23      	ldr	r2, [pc, #140]	@ (8008278 <HAL_TIM_PWM_Start+0x21c>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d00e      	beq.n	800820e <HAL_TIM_PWM_Start+0x1b2>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a19      	ldr	r2, [pc, #100]	@ (800825c <HAL_TIM_PWM_Start+0x200>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d009      	beq.n	800820e <HAL_TIM_PWM_Start+0x1b2>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a18      	ldr	r2, [pc, #96]	@ (8008260 <HAL_TIM_PWM_Start+0x204>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d004      	beq.n	800820e <HAL_TIM_PWM_Start+0x1b2>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a18      	ldr	r2, [pc, #96]	@ (800826c <HAL_TIM_PWM_Start+0x210>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d115      	bne.n	800823a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	689a      	ldr	r2, [r3, #8]
 8008214:	4b19      	ldr	r3, [pc, #100]	@ (800827c <HAL_TIM_PWM_Start+0x220>)
 8008216:	4013      	ands	r3, r2
 8008218:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2b06      	cmp	r3, #6
 800821e:	d015      	beq.n	800824c <HAL_TIM_PWM_Start+0x1f0>
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008226:	d011      	beq.n	800824c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f042 0201 	orr.w	r2, r2, #1
 8008236:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008238:	e008      	b.n	800824c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	681a      	ldr	r2, [r3, #0]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f042 0201 	orr.w	r2, r2, #1
 8008248:	601a      	str	r2, [r3, #0]
 800824a:	e000      	b.n	800824e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800824c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800824e:	2300      	movs	r3, #0
}
 8008250:	4618      	mov	r0, r3
 8008252:	3710      	adds	r7, #16
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}
 8008258:	40012c00 	.word	0x40012c00
 800825c:	40013400 	.word	0x40013400
 8008260:	40014000 	.word	0x40014000
 8008264:	40014400 	.word	0x40014400
 8008268:	40014800 	.word	0x40014800
 800826c:	40015000 	.word	0x40015000
 8008270:	40000400 	.word	0x40000400
 8008274:	40000800 	.word	0x40000800
 8008278:	40000c00 	.word	0x40000c00
 800827c:	00010007 	.word	0x00010007

08008280 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d101      	bne.n	8008294 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8008290:	2301      	movs	r3, #1
 8008292:	e04c      	b.n	800832e <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800829a:	b2db      	uxtb	r3, r3
 800829c:	2b00      	cmp	r3, #0
 800829e:	d111      	bne.n	80082c4 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2200      	movs	r2, #0
 80082a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f001 fc99 	bl	8009be0 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d102      	bne.n	80082bc <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	4a1f      	ldr	r2, [pc, #124]	@ (8008338 <HAL_TIM_OnePulse_Init+0xb8>)
 80082ba:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2202      	movs	r2, #2
 80082c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681a      	ldr	r2, [r3, #0]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	3304      	adds	r3, #4
 80082d4:	4619      	mov	r1, r3
 80082d6:	4610      	mov	r0, r2
 80082d8:	f000 ffe2 	bl	80092a0 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	681a      	ldr	r2, [r3, #0]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f022 0208 	bic.w	r2, r2, #8
 80082ea:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	6819      	ldr	r1, [r3, #0]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	683a      	ldr	r2, [r7, #0]
 80082f8:	430a      	orrs	r2, r1
 80082fa:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2201      	movs	r2, #1
 8008300:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2201      	movs	r2, #1
 8008308:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2201      	movs	r2, #1
 8008310:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2201      	movs	r2, #1
 8008318:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2201      	movs	r2, #1
 8008320:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2201      	movs	r2, #1
 8008328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800832c:	2300      	movs	r3, #0
}
 800832e:	4618      	mov	r0, r3
 8008330:	3708      	adds	r7, #8
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
 8008336:	bf00      	nop
 8008338:	0800833d 	.word	0x0800833d

0800833c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800833c:	b480      	push	{r7}
 800833e:	b083      	sub	sp, #12
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8008344:	bf00      	nop
 8008346:	370c      	adds	r7, #12
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr

08008350 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b084      	sub	sp, #16
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008360:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008368:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008370:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008378:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800837a:	7bfb      	ldrb	r3, [r7, #15]
 800837c:	2b01      	cmp	r3, #1
 800837e:	d108      	bne.n	8008392 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008380:	7bbb      	ldrb	r3, [r7, #14]
 8008382:	2b01      	cmp	r3, #1
 8008384:	d105      	bne.n	8008392 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008386:	7b7b      	ldrb	r3, [r7, #13]
 8008388:	2b01      	cmp	r3, #1
 800838a:	d102      	bne.n	8008392 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800838c:	7b3b      	ldrb	r3, [r7, #12]
 800838e:	2b01      	cmp	r3, #1
 8008390:	d001      	beq.n	8008396 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8008392:	2301      	movs	r3, #1
 8008394:	e059      	b.n	800844a <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2202      	movs	r2, #2
 800839a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2202      	movs	r2, #2
 80083a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2202      	movs	r2, #2
 80083aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2202      	movs	r2, #2
 80083b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	68da      	ldr	r2, [r3, #12]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f042 0202 	orr.w	r2, r2, #2
 80083c4:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	68da      	ldr	r2, [r3, #12]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f042 0204 	orr.w	r2, r2, #4
 80083d4:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	2201      	movs	r2, #1
 80083dc:	2100      	movs	r1, #0
 80083de:	4618      	mov	r0, r3
 80083e0:	f001 fbd8 	bl	8009b94 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	2201      	movs	r2, #1
 80083ea:	2104      	movs	r1, #4
 80083ec:	4618      	mov	r0, r3
 80083ee:	f001 fbd1 	bl	8009b94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a17      	ldr	r2, [pc, #92]	@ (8008454 <HAL_TIM_OnePulse_Start_IT+0x104>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d018      	beq.n	800842e <HAL_TIM_OnePulse_Start_IT+0xde>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a15      	ldr	r2, [pc, #84]	@ (8008458 <HAL_TIM_OnePulse_Start_IT+0x108>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d013      	beq.n	800842e <HAL_TIM_OnePulse_Start_IT+0xde>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a14      	ldr	r2, [pc, #80]	@ (800845c <HAL_TIM_OnePulse_Start_IT+0x10c>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d00e      	beq.n	800842e <HAL_TIM_OnePulse_Start_IT+0xde>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a12      	ldr	r2, [pc, #72]	@ (8008460 <HAL_TIM_OnePulse_Start_IT+0x110>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d009      	beq.n	800842e <HAL_TIM_OnePulse_Start_IT+0xde>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a11      	ldr	r2, [pc, #68]	@ (8008464 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d004      	beq.n	800842e <HAL_TIM_OnePulse_Start_IT+0xde>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a0f      	ldr	r2, [pc, #60]	@ (8008468 <HAL_TIM_OnePulse_Start_IT+0x118>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d101      	bne.n	8008432 <HAL_TIM_OnePulse_Start_IT+0xe2>
 800842e:	2301      	movs	r3, #1
 8008430:	e000      	b.n	8008434 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8008432:	2300      	movs	r3, #0
 8008434:	2b00      	cmp	r3, #0
 8008436:	d007      	beq.n	8008448 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008446:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8008448:	2300      	movs	r3, #0
}
 800844a:	4618      	mov	r0, r3
 800844c:	3710      	adds	r7, #16
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
 8008452:	bf00      	nop
 8008454:	40012c00 	.word	0x40012c00
 8008458:	40013400 	.word	0x40013400
 800845c:	40014000 	.word	0x40014000
 8008460:	40014400 	.word	0x40014400
 8008464:	40014800 	.word	0x40014800
 8008468:	40015000 	.word	0x40015000

0800846c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b086      	sub	sp, #24
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d101      	bne.n	8008480 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800847c:	2301      	movs	r3, #1
 800847e:	e0a2      	b.n	80085c6 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008486:	b2db      	uxtb	r3, r3
 8008488:	2b00      	cmp	r3, #0
 800848a:	d111      	bne.n	80084b0 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2200      	movs	r2, #0
 8008490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f001 fba3 	bl	8009be0 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d102      	bne.n	80084a8 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	4a4a      	ldr	r2, [pc, #296]	@ (80085d0 <HAL_TIM_Encoder_Init+0x164>)
 80084a6:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2202      	movs	r2, #2
 80084b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	687a      	ldr	r2, [r7, #4]
 80084c0:	6812      	ldr	r2, [r2, #0]
 80084c2:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80084c6:	f023 0307 	bic.w	r3, r3, #7
 80084ca:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681a      	ldr	r2, [r3, #0]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	3304      	adds	r3, #4
 80084d4:	4619      	mov	r1, r3
 80084d6:	4610      	mov	r0, r2
 80084d8:	f000 fee2 	bl	80092a0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	689b      	ldr	r3, [r3, #8]
 80084e2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	699b      	ldr	r3, [r3, #24]
 80084ea:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	6a1b      	ldr	r3, [r3, #32]
 80084f2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	697a      	ldr	r2, [r7, #20]
 80084fa:	4313      	orrs	r3, r2
 80084fc:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008504:	f023 0303 	bic.w	r3, r3, #3
 8008508:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	689a      	ldr	r2, [r3, #8]
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	699b      	ldr	r3, [r3, #24]
 8008512:	021b      	lsls	r3, r3, #8
 8008514:	4313      	orrs	r3, r2
 8008516:	693a      	ldr	r2, [r7, #16]
 8008518:	4313      	orrs	r3, r2
 800851a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8008522:	f023 030c 	bic.w	r3, r3, #12
 8008526:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800852e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008532:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	68da      	ldr	r2, [r3, #12]
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	69db      	ldr	r3, [r3, #28]
 800853c:	021b      	lsls	r3, r3, #8
 800853e:	4313      	orrs	r3, r2
 8008540:	693a      	ldr	r2, [r7, #16]
 8008542:	4313      	orrs	r3, r2
 8008544:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	691b      	ldr	r3, [r3, #16]
 800854a:	011a      	lsls	r2, r3, #4
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	6a1b      	ldr	r3, [r3, #32]
 8008550:	031b      	lsls	r3, r3, #12
 8008552:	4313      	orrs	r3, r2
 8008554:	693a      	ldr	r2, [r7, #16]
 8008556:	4313      	orrs	r3, r2
 8008558:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8008560:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8008568:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	685a      	ldr	r2, [r3, #4]
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	695b      	ldr	r3, [r3, #20]
 8008572:	011b      	lsls	r3, r3, #4
 8008574:	4313      	orrs	r3, r2
 8008576:	68fa      	ldr	r2, [r7, #12]
 8008578:	4313      	orrs	r3, r2
 800857a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	697a      	ldr	r2, [r7, #20]
 8008582:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	693a      	ldr	r2, [r7, #16]
 800858a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	68fa      	ldr	r2, [r7, #12]
 8008592:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2201      	movs	r2, #1
 8008598:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2201      	movs	r2, #1
 80085a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2201      	movs	r2, #1
 80085a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2201      	movs	r2, #1
 80085b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2201      	movs	r2, #1
 80085b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2201      	movs	r2, #1
 80085c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80085c4:	2300      	movs	r3, #0
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3718      	adds	r7, #24
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	bf00      	nop
 80085d0:	08003d0d 	.word	0x08003d0d

080085d4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b084      	sub	sp, #16
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80085e4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80085ec:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80085f4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80085fc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d110      	bne.n	8008626 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008604:	7bfb      	ldrb	r3, [r7, #15]
 8008606:	2b01      	cmp	r3, #1
 8008608:	d102      	bne.n	8008610 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800860a:	7b7b      	ldrb	r3, [r7, #13]
 800860c:	2b01      	cmp	r3, #1
 800860e:	d001      	beq.n	8008614 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008610:	2301      	movs	r3, #1
 8008612:	e069      	b.n	80086e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2202      	movs	r2, #2
 8008618:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2202      	movs	r2, #2
 8008620:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008624:	e031      	b.n	800868a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	2b04      	cmp	r3, #4
 800862a:	d110      	bne.n	800864e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800862c:	7bbb      	ldrb	r3, [r7, #14]
 800862e:	2b01      	cmp	r3, #1
 8008630:	d102      	bne.n	8008638 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008632:	7b3b      	ldrb	r3, [r7, #12]
 8008634:	2b01      	cmp	r3, #1
 8008636:	d001      	beq.n	800863c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008638:	2301      	movs	r3, #1
 800863a:	e055      	b.n	80086e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2202      	movs	r2, #2
 8008640:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2202      	movs	r2, #2
 8008648:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800864c:	e01d      	b.n	800868a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800864e:	7bfb      	ldrb	r3, [r7, #15]
 8008650:	2b01      	cmp	r3, #1
 8008652:	d108      	bne.n	8008666 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008654:	7bbb      	ldrb	r3, [r7, #14]
 8008656:	2b01      	cmp	r3, #1
 8008658:	d105      	bne.n	8008666 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800865a:	7b7b      	ldrb	r3, [r7, #13]
 800865c:	2b01      	cmp	r3, #1
 800865e:	d102      	bne.n	8008666 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008660:	7b3b      	ldrb	r3, [r7, #12]
 8008662:	2b01      	cmp	r3, #1
 8008664:	d001      	beq.n	800866a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008666:	2301      	movs	r3, #1
 8008668:	e03e      	b.n	80086e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2202      	movs	r2, #2
 800866e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2202      	movs	r2, #2
 8008676:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2202      	movs	r2, #2
 800867e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2202      	movs	r2, #2
 8008686:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d003      	beq.n	8008698 <HAL_TIM_Encoder_Start+0xc4>
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	2b04      	cmp	r3, #4
 8008694:	d008      	beq.n	80086a8 <HAL_TIM_Encoder_Start+0xd4>
 8008696:	e00f      	b.n	80086b8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	2201      	movs	r2, #1
 800869e:	2100      	movs	r1, #0
 80086a0:	4618      	mov	r0, r3
 80086a2:	f001 fa77 	bl	8009b94 <TIM_CCxChannelCmd>
      break;
 80086a6:	e016      	b.n	80086d6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	2201      	movs	r2, #1
 80086ae:	2104      	movs	r1, #4
 80086b0:	4618      	mov	r0, r3
 80086b2:	f001 fa6f 	bl	8009b94 <TIM_CCxChannelCmd>
      break;
 80086b6:	e00e      	b.n	80086d6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	2201      	movs	r2, #1
 80086be:	2100      	movs	r1, #0
 80086c0:	4618      	mov	r0, r3
 80086c2:	f001 fa67 	bl	8009b94 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	2201      	movs	r2, #1
 80086cc:	2104      	movs	r1, #4
 80086ce:	4618      	mov	r0, r3
 80086d0:	f001 fa60 	bl	8009b94 <TIM_CCxChannelCmd>
      break;
 80086d4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f042 0201 	orr.w	r2, r2, #1
 80086e4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80086e6:	2300      	movs	r3, #0
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3710      	adds	r7, #16
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}

080086f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b084      	sub	sp, #16
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	68db      	ldr	r3, [r3, #12]
 80086fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	691b      	ldr	r3, [r3, #16]
 8008706:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	f003 0302 	and.w	r3, r3, #2
 800870e:	2b00      	cmp	r3, #0
 8008710:	d026      	beq.n	8008760 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	f003 0302 	and.w	r3, r3, #2
 8008718:	2b00      	cmp	r3, #0
 800871a:	d021      	beq.n	8008760 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f06f 0202 	mvn.w	r2, #2
 8008724:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2201      	movs	r2, #1
 800872a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	699b      	ldr	r3, [r3, #24]
 8008732:	f003 0303 	and.w	r3, r3, #3
 8008736:	2b00      	cmp	r3, #0
 8008738:	d005      	beq.n	8008746 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	4798      	blx	r3
 8008744:	e009      	b.n	800875a <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2200      	movs	r2, #0
 800875e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	f003 0304 	and.w	r3, r3, #4
 8008766:	2b00      	cmp	r3, #0
 8008768:	d026      	beq.n	80087b8 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	f003 0304 	and.w	r3, r3, #4
 8008770:	2b00      	cmp	r3, #0
 8008772:	d021      	beq.n	80087b8 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f06f 0204 	mvn.w	r2, #4
 800877c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2202      	movs	r2, #2
 8008782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	699b      	ldr	r3, [r3, #24]
 800878a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800878e:	2b00      	cmp	r3, #0
 8008790:	d005      	beq.n	800879e <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	4798      	blx	r3
 800879c:	e009      	b.n	80087b2 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2200      	movs	r2, #0
 80087b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	f003 0308 	and.w	r3, r3, #8
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d026      	beq.n	8008810 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	f003 0308 	and.w	r3, r3, #8
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d021      	beq.n	8008810 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f06f 0208 	mvn.w	r2, #8
 80087d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2204      	movs	r2, #4
 80087da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	69db      	ldr	r3, [r3, #28]
 80087e2:	f003 0303 	and.w	r3, r3, #3
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d005      	beq.n	80087f6 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	4798      	blx	r3
 80087f4:	e009      	b.n	800880a <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2200      	movs	r2, #0
 800880e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	f003 0310 	and.w	r3, r3, #16
 8008816:	2b00      	cmp	r3, #0
 8008818:	d026      	beq.n	8008868 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	f003 0310 	and.w	r3, r3, #16
 8008820:	2b00      	cmp	r3, #0
 8008822:	d021      	beq.n	8008868 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f06f 0210 	mvn.w	r2, #16
 800882c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2208      	movs	r2, #8
 8008832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	69db      	ldr	r3, [r3, #28]
 800883a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800883e:	2b00      	cmp	r3, #0
 8008840:	d005      	beq.n	800884e <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	4798      	blx	r3
 800884c:	e009      	b.n	8008862 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2200      	movs	r2, #0
 8008866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	f003 0301 	and.w	r3, r3, #1
 800886e:	2b00      	cmp	r3, #0
 8008870:	d00e      	beq.n	8008890 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f003 0301 	and.w	r3, r3, #1
 8008878:	2b00      	cmp	r3, #0
 800887a:	d009      	beq.n	8008890 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f06f 0201 	mvn.w	r2, #1
 8008884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008896:	2b00      	cmp	r3, #0
 8008898:	d104      	bne.n	80088a4 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d00e      	beq.n	80088c2 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d009      	beq.n	80088c2 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80088b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d00e      	beq.n	80088ea <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d009      	beq.n	80088ea <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80088de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d00e      	beq.n	8008912 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d009      	beq.n	8008912 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008906:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	f003 0320 	and.w	r3, r3, #32
 8008918:	2b00      	cmp	r3, #0
 800891a:	d00e      	beq.n	800893a <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	f003 0320 	and.w	r3, r3, #32
 8008922:	2b00      	cmp	r3, #0
 8008924:	d009      	beq.n	800893a <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f06f 0220 	mvn.w	r2, #32
 800892e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008940:	2b00      	cmp	r3, #0
 8008942:	d00e      	beq.n	8008962 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800894a:	2b00      	cmp	r3, #0
 800894c:	d009      	beq.n	8008962 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008956:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008968:	2b00      	cmp	r3, #0
 800896a:	d00e      	beq.n	800898a <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008972:	2b00      	cmp	r3, #0
 8008974:	d009      	beq.n	800898a <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800897e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008990:	2b00      	cmp	r3, #0
 8008992:	d00e      	beq.n	80089b2 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800899a:	2b00      	cmp	r3, #0
 800899c:	d009      	beq.n	80089b2 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80089a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d00e      	beq.n	80089da <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d009      	beq.n	80089da <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80089ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80089da:	bf00      	nop
 80089dc:	3710      	adds	r7, #16
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}
	...

080089e4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b086      	sub	sp, #24
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	60f8      	str	r0, [r7, #12]
 80089ec:	60b9      	str	r1, [r7, #8]
 80089ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80089f0:	2300      	movs	r3, #0
 80089f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	d101      	bne.n	8008a02 <HAL_TIM_OC_ConfigChannel+0x1e>
 80089fe:	2302      	movs	r3, #2
 8008a00:	e066      	b.n	8008ad0 <HAL_TIM_OC_ConfigChannel+0xec>
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2201      	movs	r2, #1
 8008a06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2b14      	cmp	r3, #20
 8008a0e:	d857      	bhi.n	8008ac0 <HAL_TIM_OC_ConfigChannel+0xdc>
 8008a10:	a201      	add	r2, pc, #4	@ (adr r2, 8008a18 <HAL_TIM_OC_ConfigChannel+0x34>)
 8008a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a16:	bf00      	nop
 8008a18:	08008a6d 	.word	0x08008a6d
 8008a1c:	08008ac1 	.word	0x08008ac1
 8008a20:	08008ac1 	.word	0x08008ac1
 8008a24:	08008ac1 	.word	0x08008ac1
 8008a28:	08008a7b 	.word	0x08008a7b
 8008a2c:	08008ac1 	.word	0x08008ac1
 8008a30:	08008ac1 	.word	0x08008ac1
 8008a34:	08008ac1 	.word	0x08008ac1
 8008a38:	08008a89 	.word	0x08008a89
 8008a3c:	08008ac1 	.word	0x08008ac1
 8008a40:	08008ac1 	.word	0x08008ac1
 8008a44:	08008ac1 	.word	0x08008ac1
 8008a48:	08008a97 	.word	0x08008a97
 8008a4c:	08008ac1 	.word	0x08008ac1
 8008a50:	08008ac1 	.word	0x08008ac1
 8008a54:	08008ac1 	.word	0x08008ac1
 8008a58:	08008aa5 	.word	0x08008aa5
 8008a5c:	08008ac1 	.word	0x08008ac1
 8008a60:	08008ac1 	.word	0x08008ac1
 8008a64:	08008ac1 	.word	0x08008ac1
 8008a68:	08008ab3 	.word	0x08008ab3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	68b9      	ldr	r1, [r7, #8]
 8008a72:	4618      	mov	r0, r3
 8008a74:	f000 fcc8 	bl	8009408 <TIM_OC1_SetConfig>
      break;
 8008a78:	e025      	b.n	8008ac6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	68b9      	ldr	r1, [r7, #8]
 8008a80:	4618      	mov	r0, r3
 8008a82:	f000 fd5b 	bl	800953c <TIM_OC2_SetConfig>
      break;
 8008a86:	e01e      	b.n	8008ac6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	68b9      	ldr	r1, [r7, #8]
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f000 fde8 	bl	8009664 <TIM_OC3_SetConfig>
      break;
 8008a94:	e017      	b.n	8008ac6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	68b9      	ldr	r1, [r7, #8]
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f000 fe73 	bl	8009788 <TIM_OC4_SetConfig>
      break;
 8008aa2:	e010      	b.n	8008ac6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	68b9      	ldr	r1, [r7, #8]
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f000 ff00 	bl	80098b0 <TIM_OC5_SetConfig>
      break;
 8008ab0:	e009      	b.n	8008ac6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	68b9      	ldr	r1, [r7, #8]
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f000 ff63 	bl	8009984 <TIM_OC6_SetConfig>
      break;
 8008abe:	e002      	b.n	8008ac6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	75fb      	strb	r3, [r7, #23]
      break;
 8008ac4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008ace:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3718      	adds	r7, #24
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b086      	sub	sp, #24
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	60f8      	str	r0, [r7, #12]
 8008ae0:	60b9      	str	r1, [r7, #8]
 8008ae2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008aee:	2b01      	cmp	r3, #1
 8008af0:	d101      	bne.n	8008af6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008af2:	2302      	movs	r3, #2
 8008af4:	e0ff      	b.n	8008cf6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2201      	movs	r2, #1
 8008afa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2b14      	cmp	r3, #20
 8008b02:	f200 80f0 	bhi.w	8008ce6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008b06:	a201      	add	r2, pc, #4	@ (adr r2, 8008b0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b0c:	08008b61 	.word	0x08008b61
 8008b10:	08008ce7 	.word	0x08008ce7
 8008b14:	08008ce7 	.word	0x08008ce7
 8008b18:	08008ce7 	.word	0x08008ce7
 8008b1c:	08008ba1 	.word	0x08008ba1
 8008b20:	08008ce7 	.word	0x08008ce7
 8008b24:	08008ce7 	.word	0x08008ce7
 8008b28:	08008ce7 	.word	0x08008ce7
 8008b2c:	08008be3 	.word	0x08008be3
 8008b30:	08008ce7 	.word	0x08008ce7
 8008b34:	08008ce7 	.word	0x08008ce7
 8008b38:	08008ce7 	.word	0x08008ce7
 8008b3c:	08008c23 	.word	0x08008c23
 8008b40:	08008ce7 	.word	0x08008ce7
 8008b44:	08008ce7 	.word	0x08008ce7
 8008b48:	08008ce7 	.word	0x08008ce7
 8008b4c:	08008c65 	.word	0x08008c65
 8008b50:	08008ce7 	.word	0x08008ce7
 8008b54:	08008ce7 	.word	0x08008ce7
 8008b58:	08008ce7 	.word	0x08008ce7
 8008b5c:	08008ca5 	.word	0x08008ca5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	68b9      	ldr	r1, [r7, #8]
 8008b66:	4618      	mov	r0, r3
 8008b68:	f000 fc4e 	bl	8009408 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	699a      	ldr	r2, [r3, #24]
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f042 0208 	orr.w	r2, r2, #8
 8008b7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	699a      	ldr	r2, [r3, #24]
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f022 0204 	bic.w	r2, r2, #4
 8008b8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	6999      	ldr	r1, [r3, #24]
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	691a      	ldr	r2, [r3, #16]
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	430a      	orrs	r2, r1
 8008b9c:	619a      	str	r2, [r3, #24]
      break;
 8008b9e:	e0a5      	b.n	8008cec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	68b9      	ldr	r1, [r7, #8]
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f000 fcc8 	bl	800953c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	699a      	ldr	r2, [r3, #24]
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008bba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	699a      	ldr	r2, [r3, #24]
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008bca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	6999      	ldr	r1, [r3, #24]
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	691b      	ldr	r3, [r3, #16]
 8008bd6:	021a      	lsls	r2, r3, #8
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	430a      	orrs	r2, r1
 8008bde:	619a      	str	r2, [r3, #24]
      break;
 8008be0:	e084      	b.n	8008cec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	68b9      	ldr	r1, [r7, #8]
 8008be8:	4618      	mov	r0, r3
 8008bea:	f000 fd3b 	bl	8009664 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	69da      	ldr	r2, [r3, #28]
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f042 0208 	orr.w	r2, r2, #8
 8008bfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	69da      	ldr	r2, [r3, #28]
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f022 0204 	bic.w	r2, r2, #4
 8008c0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	69d9      	ldr	r1, [r3, #28]
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	691a      	ldr	r2, [r3, #16]
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	430a      	orrs	r2, r1
 8008c1e:	61da      	str	r2, [r3, #28]
      break;
 8008c20:	e064      	b.n	8008cec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	68b9      	ldr	r1, [r7, #8]
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f000 fdad 	bl	8009788 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	69da      	ldr	r2, [r3, #28]
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008c3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	69da      	ldr	r2, [r3, #28]
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008c4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	69d9      	ldr	r1, [r3, #28]
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	691b      	ldr	r3, [r3, #16]
 8008c58:	021a      	lsls	r2, r3, #8
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	430a      	orrs	r2, r1
 8008c60:	61da      	str	r2, [r3, #28]
      break;
 8008c62:	e043      	b.n	8008cec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	68b9      	ldr	r1, [r7, #8]
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f000 fe20 	bl	80098b0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f042 0208 	orr.w	r2, r2, #8
 8008c7e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f022 0204 	bic.w	r2, r2, #4
 8008c8e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	691a      	ldr	r2, [r3, #16]
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	430a      	orrs	r2, r1
 8008ca0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008ca2:	e023      	b.n	8008cec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	68b9      	ldr	r1, [r7, #8]
 8008caa:	4618      	mov	r0, r3
 8008cac:	f000 fe6a 	bl	8009984 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008cbe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008cce:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	691b      	ldr	r3, [r3, #16]
 8008cda:	021a      	lsls	r2, r3, #8
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	430a      	orrs	r2, r1
 8008ce2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008ce4:	e002      	b.n	8008cec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	75fb      	strb	r3, [r7, #23]
      break;
 8008cea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008cf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3718      	adds	r7, #24
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}
 8008cfe:	bf00      	nop

08008d00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b084      	sub	sp, #16
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d101      	bne.n	8008d1c <HAL_TIM_ConfigClockSource+0x1c>
 8008d18:	2302      	movs	r3, #2
 8008d1a:	e0f6      	b.n	8008f0a <HAL_TIM_ConfigClockSource+0x20a>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2201      	movs	r2, #1
 8008d20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2202      	movs	r2, #2
 8008d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	689b      	ldr	r3, [r3, #8]
 8008d32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008d3a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008d3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008d46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	68ba      	ldr	r2, [r7, #8]
 8008d4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a6f      	ldr	r2, [pc, #444]	@ (8008f14 <HAL_TIM_ConfigClockSource+0x214>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	f000 80c1 	beq.w	8008ede <HAL_TIM_ConfigClockSource+0x1de>
 8008d5c:	4a6d      	ldr	r2, [pc, #436]	@ (8008f14 <HAL_TIM_ConfigClockSource+0x214>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	f200 80c6 	bhi.w	8008ef0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d64:	4a6c      	ldr	r2, [pc, #432]	@ (8008f18 <HAL_TIM_ConfigClockSource+0x218>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	f000 80b9 	beq.w	8008ede <HAL_TIM_ConfigClockSource+0x1de>
 8008d6c:	4a6a      	ldr	r2, [pc, #424]	@ (8008f18 <HAL_TIM_ConfigClockSource+0x218>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	f200 80be 	bhi.w	8008ef0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d74:	4a69      	ldr	r2, [pc, #420]	@ (8008f1c <HAL_TIM_ConfigClockSource+0x21c>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	f000 80b1 	beq.w	8008ede <HAL_TIM_ConfigClockSource+0x1de>
 8008d7c:	4a67      	ldr	r2, [pc, #412]	@ (8008f1c <HAL_TIM_ConfigClockSource+0x21c>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	f200 80b6 	bhi.w	8008ef0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d84:	4a66      	ldr	r2, [pc, #408]	@ (8008f20 <HAL_TIM_ConfigClockSource+0x220>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	f000 80a9 	beq.w	8008ede <HAL_TIM_ConfigClockSource+0x1de>
 8008d8c:	4a64      	ldr	r2, [pc, #400]	@ (8008f20 <HAL_TIM_ConfigClockSource+0x220>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	f200 80ae 	bhi.w	8008ef0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d94:	4a63      	ldr	r2, [pc, #396]	@ (8008f24 <HAL_TIM_ConfigClockSource+0x224>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	f000 80a1 	beq.w	8008ede <HAL_TIM_ConfigClockSource+0x1de>
 8008d9c:	4a61      	ldr	r2, [pc, #388]	@ (8008f24 <HAL_TIM_ConfigClockSource+0x224>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	f200 80a6 	bhi.w	8008ef0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008da4:	4a60      	ldr	r2, [pc, #384]	@ (8008f28 <HAL_TIM_ConfigClockSource+0x228>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	f000 8099 	beq.w	8008ede <HAL_TIM_ConfigClockSource+0x1de>
 8008dac:	4a5e      	ldr	r2, [pc, #376]	@ (8008f28 <HAL_TIM_ConfigClockSource+0x228>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	f200 809e 	bhi.w	8008ef0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008db4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008db8:	f000 8091 	beq.w	8008ede <HAL_TIM_ConfigClockSource+0x1de>
 8008dbc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008dc0:	f200 8096 	bhi.w	8008ef0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008dc4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008dc8:	f000 8089 	beq.w	8008ede <HAL_TIM_ConfigClockSource+0x1de>
 8008dcc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008dd0:	f200 808e 	bhi.w	8008ef0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008dd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008dd8:	d03e      	beq.n	8008e58 <HAL_TIM_ConfigClockSource+0x158>
 8008dda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008dde:	f200 8087 	bhi.w	8008ef0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008de2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008de6:	f000 8086 	beq.w	8008ef6 <HAL_TIM_ConfigClockSource+0x1f6>
 8008dea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008dee:	d87f      	bhi.n	8008ef0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008df0:	2b70      	cmp	r3, #112	@ 0x70
 8008df2:	d01a      	beq.n	8008e2a <HAL_TIM_ConfigClockSource+0x12a>
 8008df4:	2b70      	cmp	r3, #112	@ 0x70
 8008df6:	d87b      	bhi.n	8008ef0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008df8:	2b60      	cmp	r3, #96	@ 0x60
 8008dfa:	d050      	beq.n	8008e9e <HAL_TIM_ConfigClockSource+0x19e>
 8008dfc:	2b60      	cmp	r3, #96	@ 0x60
 8008dfe:	d877      	bhi.n	8008ef0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008e00:	2b50      	cmp	r3, #80	@ 0x50
 8008e02:	d03c      	beq.n	8008e7e <HAL_TIM_ConfigClockSource+0x17e>
 8008e04:	2b50      	cmp	r3, #80	@ 0x50
 8008e06:	d873      	bhi.n	8008ef0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008e08:	2b40      	cmp	r3, #64	@ 0x40
 8008e0a:	d058      	beq.n	8008ebe <HAL_TIM_ConfigClockSource+0x1be>
 8008e0c:	2b40      	cmp	r3, #64	@ 0x40
 8008e0e:	d86f      	bhi.n	8008ef0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008e10:	2b30      	cmp	r3, #48	@ 0x30
 8008e12:	d064      	beq.n	8008ede <HAL_TIM_ConfigClockSource+0x1de>
 8008e14:	2b30      	cmp	r3, #48	@ 0x30
 8008e16:	d86b      	bhi.n	8008ef0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008e18:	2b20      	cmp	r3, #32
 8008e1a:	d060      	beq.n	8008ede <HAL_TIM_ConfigClockSource+0x1de>
 8008e1c:	2b20      	cmp	r3, #32
 8008e1e:	d867      	bhi.n	8008ef0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d05c      	beq.n	8008ede <HAL_TIM_ConfigClockSource+0x1de>
 8008e24:	2b10      	cmp	r3, #16
 8008e26:	d05a      	beq.n	8008ede <HAL_TIM_ConfigClockSource+0x1de>
 8008e28:	e062      	b.n	8008ef0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008e3a:	f000 fe8b 	bl	8009b54 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	689b      	ldr	r3, [r3, #8]
 8008e44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008e4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	68ba      	ldr	r2, [r7, #8]
 8008e54:	609a      	str	r2, [r3, #8]
      break;
 8008e56:	e04f      	b.n	8008ef8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008e68:	f000 fe74 	bl	8009b54 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	689a      	ldr	r2, [r3, #8]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008e7a:	609a      	str	r2, [r3, #8]
      break;
 8008e7c:	e03c      	b.n	8008ef8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	f000 fde6 	bl	8009a5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	2150      	movs	r1, #80	@ 0x50
 8008e96:	4618      	mov	r0, r3
 8008e98:	f000 fe3f 	bl	8009b1a <TIM_ITRx_SetConfig>
      break;
 8008e9c:	e02c      	b.n	8008ef8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008eaa:	461a      	mov	r2, r3
 8008eac:	f000 fe05 	bl	8009aba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	2160      	movs	r1, #96	@ 0x60
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f000 fe2f 	bl	8009b1a <TIM_ITRx_SetConfig>
      break;
 8008ebc:	e01c      	b.n	8008ef8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008eca:	461a      	mov	r2, r3
 8008ecc:	f000 fdc6 	bl	8009a5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	2140      	movs	r1, #64	@ 0x40
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f000 fe1f 	bl	8009b1a <TIM_ITRx_SetConfig>
      break;
 8008edc:	e00c      	b.n	8008ef8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681a      	ldr	r2, [r3, #0]
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4619      	mov	r1, r3
 8008ee8:	4610      	mov	r0, r2
 8008eea:	f000 fe16 	bl	8009b1a <TIM_ITRx_SetConfig>
      break;
 8008eee:	e003      	b.n	8008ef8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	73fb      	strb	r3, [r7, #15]
      break;
 8008ef4:	e000      	b.n	8008ef8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8008ef6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2201      	movs	r2, #1
 8008efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2200      	movs	r2, #0
 8008f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3710      	adds	r7, #16
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop
 8008f14:	00100070 	.word	0x00100070
 8008f18:	00100060 	.word	0x00100060
 8008f1c:	00100050 	.word	0x00100050
 8008f20:	00100040 	.word	0x00100040
 8008f24:	00100030 	.word	0x00100030
 8008f28:	00100020 	.word	0x00100020

08008f2c <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b083      	sub	sp, #12
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8008f34:	bf00      	nop
 8008f36:	370c      	adds	r7, #12
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr

08008f40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b083      	sub	sp, #12
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008f48:	bf00      	nop
 8008f4a:	370c      	adds	r7, #12
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr

08008f54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b083      	sub	sp, #12
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008f5c:	bf00      	nop
 8008f5e:	370c      	adds	r7, #12
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr

08008f68 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b083      	sub	sp, #12
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8008f70:	bf00      	nop
 8008f72:	370c      	adds	r7, #12
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr

08008f7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b083      	sub	sp, #12
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008f84:	bf00      	nop
 8008f86:	370c      	adds	r7, #12
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr

08008f90 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b083      	sub	sp, #12
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008f98:	bf00      	nop
 8008f9a:	370c      	adds	r7, #12
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa2:	4770      	bx	lr

08008fa4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b083      	sub	sp, #12
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008fac:	bf00      	nop
 8008fae:	370c      	adds	r7, #12
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb6:	4770      	bx	lr

08008fb8 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b083      	sub	sp, #12
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8008fc0:	bf00      	nop
 8008fc2:	370c      	adds	r7, #12
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fca:	4770      	bx	lr

08008fcc <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b083      	sub	sp, #12
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008fd4:	bf00      	nop
 8008fd6:	370c      	adds	r7, #12
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fde:	4770      	bx	lr

08008fe0 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b087      	sub	sp, #28
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	60f8      	str	r0, [r7, #12]
 8008fe8:	460b      	mov	r3, r1
 8008fea:	607a      	str	r2, [r7, #4]
 8008fec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d101      	bne.n	8008ffc <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	e14a      	b.n	8009292 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009002:	b2db      	uxtb	r3, r3
 8009004:	2b01      	cmp	r3, #1
 8009006:	f040 80dd 	bne.w	80091c4 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800900a:	7afb      	ldrb	r3, [r7, #11]
 800900c:	2b1f      	cmp	r3, #31
 800900e:	f200 80d6 	bhi.w	80091be <HAL_TIM_RegisterCallback+0x1de>
 8009012:	a201      	add	r2, pc, #4	@ (adr r2, 8009018 <HAL_TIM_RegisterCallback+0x38>)
 8009014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009018:	08009099 	.word	0x08009099
 800901c:	080090a1 	.word	0x080090a1
 8009020:	080090a9 	.word	0x080090a9
 8009024:	080090b1 	.word	0x080090b1
 8009028:	080090b9 	.word	0x080090b9
 800902c:	080090c1 	.word	0x080090c1
 8009030:	080090c9 	.word	0x080090c9
 8009034:	080090d1 	.word	0x080090d1
 8009038:	080090d9 	.word	0x080090d9
 800903c:	080090e1 	.word	0x080090e1
 8009040:	080090e9 	.word	0x080090e9
 8009044:	080090f1 	.word	0x080090f1
 8009048:	080090f9 	.word	0x080090f9
 800904c:	08009101 	.word	0x08009101
 8009050:	0800910b 	.word	0x0800910b
 8009054:	08009115 	.word	0x08009115
 8009058:	0800911f 	.word	0x0800911f
 800905c:	08009129 	.word	0x08009129
 8009060:	08009133 	.word	0x08009133
 8009064:	0800913d 	.word	0x0800913d
 8009068:	08009147 	.word	0x08009147
 800906c:	08009151 	.word	0x08009151
 8009070:	0800915b 	.word	0x0800915b
 8009074:	08009165 	.word	0x08009165
 8009078:	0800916f 	.word	0x0800916f
 800907c:	08009179 	.word	0x08009179
 8009080:	08009183 	.word	0x08009183
 8009084:	0800918d 	.word	0x0800918d
 8009088:	08009197 	.word	0x08009197
 800908c:	080091a1 	.word	0x080091a1
 8009090:	080091ab 	.word	0x080091ab
 8009094:	080091b5 	.word	0x080091b5
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800909e:	e0f7      	b.n	8009290 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	687a      	ldr	r2, [r7, #4]
 80090a4:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80090a6:	e0f3      	b.n	8009290 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	687a      	ldr	r2, [r7, #4]
 80090ac:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80090ae:	e0ef      	b.n	8009290 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	687a      	ldr	r2, [r7, #4]
 80090b4:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80090b6:	e0eb      	b.n	8009290 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	687a      	ldr	r2, [r7, #4]
 80090bc:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 80090be:	e0e7      	b.n	8009290 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	687a      	ldr	r2, [r7, #4]
 80090c4:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80090c6:	e0e3      	b.n	8009290 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	687a      	ldr	r2, [r7, #4]
 80090cc:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80090ce:	e0df      	b.n	8009290 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	687a      	ldr	r2, [r7, #4]
 80090d4:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80090d6:	e0db      	b.n	8009290 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	687a      	ldr	r2, [r7, #4]
 80090dc:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80090de:	e0d7      	b.n	8009290 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	687a      	ldr	r2, [r7, #4]
 80090e4:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80090e6:	e0d3      	b.n	8009290 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	687a      	ldr	r2, [r7, #4]
 80090ec:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80090ee:	e0cf      	b.n	8009290 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	687a      	ldr	r2, [r7, #4]
 80090f4:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80090f6:	e0cb      	b.n	8009290 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	687a      	ldr	r2, [r7, #4]
 80090fc:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80090fe:	e0c7      	b.n	8009290 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	687a      	ldr	r2, [r7, #4]
 8009104:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8009108:	e0c2      	b.n	8009290 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8009112:	e0bd      	b.n	8009290 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	687a      	ldr	r2, [r7, #4]
 8009118:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 800911c:	e0b8      	b.n	8009290 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	687a      	ldr	r2, [r7, #4]
 8009122:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8009126:	e0b3      	b.n	8009290 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	687a      	ldr	r2, [r7, #4]
 800912c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8009130:	e0ae      	b.n	8009290 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	687a      	ldr	r2, [r7, #4]
 8009136:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800913a:	e0a9      	b.n	8009290 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	687a      	ldr	r2, [r7, #4]
 8009140:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8009144:	e0a4      	b.n	8009290 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	687a      	ldr	r2, [r7, #4]
 800914a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800914e:	e09f      	b.n	8009290 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	687a      	ldr	r2, [r7, #4]
 8009154:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8009158:	e09a      	b.n	8009290 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	687a      	ldr	r2, [r7, #4]
 800915e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8009162:	e095      	b.n	8009290 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	687a      	ldr	r2, [r7, #4]
 8009168:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800916c:	e090      	b.n	8009290 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8009176:	e08b      	b.n	8009290 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	687a      	ldr	r2, [r7, #4]
 800917c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8009180:	e086      	b.n	8009290 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800918a:	e081      	b.n	8009290 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	687a      	ldr	r2, [r7, #4]
 8009190:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8009194:	e07c      	b.n	8009290 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	687a      	ldr	r2, [r7, #4]
 800919a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800919e:	e077      	b.n	8009290 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	687a      	ldr	r2, [r7, #4]
 80091a4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 80091a8:	e072      	b.n	8009290 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	687a      	ldr	r2, [r7, #4]
 80091ae:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80091b2:	e06d      	b.n	8009290 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	687a      	ldr	r2, [r7, #4]
 80091b8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80091bc:	e068      	b.n	8009290 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80091be:	2301      	movs	r3, #1
 80091c0:	75fb      	strb	r3, [r7, #23]
        break;
 80091c2:	e065      	b.n	8009290 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80091ca:	b2db      	uxtb	r3, r3
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d15d      	bne.n	800928c <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 80091d0:	7afb      	ldrb	r3, [r7, #11]
 80091d2:	2b0d      	cmp	r3, #13
 80091d4:	d857      	bhi.n	8009286 <HAL_TIM_RegisterCallback+0x2a6>
 80091d6:	a201      	add	r2, pc, #4	@ (adr r2, 80091dc <HAL_TIM_RegisterCallback+0x1fc>)
 80091d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091dc:	08009215 	.word	0x08009215
 80091e0:	0800921d 	.word	0x0800921d
 80091e4:	08009225 	.word	0x08009225
 80091e8:	0800922d 	.word	0x0800922d
 80091ec:	08009235 	.word	0x08009235
 80091f0:	0800923d 	.word	0x0800923d
 80091f4:	08009245 	.word	0x08009245
 80091f8:	0800924d 	.word	0x0800924d
 80091fc:	08009255 	.word	0x08009255
 8009200:	0800925d 	.word	0x0800925d
 8009204:	08009265 	.word	0x08009265
 8009208:	0800926d 	.word	0x0800926d
 800920c:	08009275 	.word	0x08009275
 8009210:	0800927d 	.word	0x0800927d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	687a      	ldr	r2, [r7, #4]
 8009218:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800921a:	e039      	b.n	8009290 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	687a      	ldr	r2, [r7, #4]
 8009220:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8009222:	e035      	b.n	8009290 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	687a      	ldr	r2, [r7, #4]
 8009228:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800922a:	e031      	b.n	8009290 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	687a      	ldr	r2, [r7, #4]
 8009230:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8009232:	e02d      	b.n	8009290 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	687a      	ldr	r2, [r7, #4]
 8009238:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800923a:	e029      	b.n	8009290 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	687a      	ldr	r2, [r7, #4]
 8009240:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8009242:	e025      	b.n	8009290 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	687a      	ldr	r2, [r7, #4]
 8009248:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800924a:	e021      	b.n	8009290 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	687a      	ldr	r2, [r7, #4]
 8009250:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8009252:	e01d      	b.n	8009290 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	687a      	ldr	r2, [r7, #4]
 8009258:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800925a:	e019      	b.n	8009290 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	687a      	ldr	r2, [r7, #4]
 8009260:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8009262:	e015      	b.n	8009290 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	687a      	ldr	r2, [r7, #4]
 8009268:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800926a:	e011      	b.n	8009290 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	687a      	ldr	r2, [r7, #4]
 8009270:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8009272:	e00d      	b.n	8009290 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	687a      	ldr	r2, [r7, #4]
 8009278:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800927a:	e009      	b.n	8009290 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	687a      	ldr	r2, [r7, #4]
 8009280:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8009284:	e004      	b.n	8009290 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8009286:	2301      	movs	r3, #1
 8009288:	75fb      	strb	r3, [r7, #23]
        break;
 800928a:	e001      	b.n	8009290 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800928c:	2301      	movs	r3, #1
 800928e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009290:	7dfb      	ldrb	r3, [r7, #23]
}
 8009292:	4618      	mov	r0, r3
 8009294:	371c      	adds	r7, #28
 8009296:	46bd      	mov	sp, r7
 8009298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929c:	4770      	bx	lr
 800929e:	bf00      	nop

080092a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b085      	sub	sp, #20
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	4a4c      	ldr	r2, [pc, #304]	@ (80093e4 <TIM_Base_SetConfig+0x144>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d017      	beq.n	80092e8 <TIM_Base_SetConfig+0x48>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80092be:	d013      	beq.n	80092e8 <TIM_Base_SetConfig+0x48>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	4a49      	ldr	r2, [pc, #292]	@ (80093e8 <TIM_Base_SetConfig+0x148>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d00f      	beq.n	80092e8 <TIM_Base_SetConfig+0x48>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	4a48      	ldr	r2, [pc, #288]	@ (80093ec <TIM_Base_SetConfig+0x14c>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d00b      	beq.n	80092e8 <TIM_Base_SetConfig+0x48>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	4a47      	ldr	r2, [pc, #284]	@ (80093f0 <TIM_Base_SetConfig+0x150>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d007      	beq.n	80092e8 <TIM_Base_SetConfig+0x48>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	4a46      	ldr	r2, [pc, #280]	@ (80093f4 <TIM_Base_SetConfig+0x154>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	d003      	beq.n	80092e8 <TIM_Base_SetConfig+0x48>
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	4a45      	ldr	r2, [pc, #276]	@ (80093f8 <TIM_Base_SetConfig+0x158>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d108      	bne.n	80092fa <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	68fa      	ldr	r2, [r7, #12]
 80092f6:	4313      	orrs	r3, r2
 80092f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	4a39      	ldr	r2, [pc, #228]	@ (80093e4 <TIM_Base_SetConfig+0x144>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d023      	beq.n	800934a <TIM_Base_SetConfig+0xaa>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009308:	d01f      	beq.n	800934a <TIM_Base_SetConfig+0xaa>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	4a36      	ldr	r2, [pc, #216]	@ (80093e8 <TIM_Base_SetConfig+0x148>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d01b      	beq.n	800934a <TIM_Base_SetConfig+0xaa>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	4a35      	ldr	r2, [pc, #212]	@ (80093ec <TIM_Base_SetConfig+0x14c>)
 8009316:	4293      	cmp	r3, r2
 8009318:	d017      	beq.n	800934a <TIM_Base_SetConfig+0xaa>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	4a34      	ldr	r2, [pc, #208]	@ (80093f0 <TIM_Base_SetConfig+0x150>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d013      	beq.n	800934a <TIM_Base_SetConfig+0xaa>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	4a33      	ldr	r2, [pc, #204]	@ (80093f4 <TIM_Base_SetConfig+0x154>)
 8009326:	4293      	cmp	r3, r2
 8009328:	d00f      	beq.n	800934a <TIM_Base_SetConfig+0xaa>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	4a33      	ldr	r2, [pc, #204]	@ (80093fc <TIM_Base_SetConfig+0x15c>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d00b      	beq.n	800934a <TIM_Base_SetConfig+0xaa>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	4a32      	ldr	r2, [pc, #200]	@ (8009400 <TIM_Base_SetConfig+0x160>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d007      	beq.n	800934a <TIM_Base_SetConfig+0xaa>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	4a31      	ldr	r2, [pc, #196]	@ (8009404 <TIM_Base_SetConfig+0x164>)
 800933e:	4293      	cmp	r3, r2
 8009340:	d003      	beq.n	800934a <TIM_Base_SetConfig+0xaa>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	4a2c      	ldr	r2, [pc, #176]	@ (80093f8 <TIM_Base_SetConfig+0x158>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d108      	bne.n	800935c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009350:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	68db      	ldr	r3, [r3, #12]
 8009356:	68fa      	ldr	r2, [r7, #12]
 8009358:	4313      	orrs	r3, r2
 800935a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	695b      	ldr	r3, [r3, #20]
 8009366:	4313      	orrs	r3, r2
 8009368:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	68fa      	ldr	r2, [r7, #12]
 800936e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	689a      	ldr	r2, [r3, #8]
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	681a      	ldr	r2, [r3, #0]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	4a18      	ldr	r2, [pc, #96]	@ (80093e4 <TIM_Base_SetConfig+0x144>)
 8009384:	4293      	cmp	r3, r2
 8009386:	d013      	beq.n	80093b0 <TIM_Base_SetConfig+0x110>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	4a1a      	ldr	r2, [pc, #104]	@ (80093f4 <TIM_Base_SetConfig+0x154>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d00f      	beq.n	80093b0 <TIM_Base_SetConfig+0x110>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	4a1a      	ldr	r2, [pc, #104]	@ (80093fc <TIM_Base_SetConfig+0x15c>)
 8009394:	4293      	cmp	r3, r2
 8009396:	d00b      	beq.n	80093b0 <TIM_Base_SetConfig+0x110>
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	4a19      	ldr	r2, [pc, #100]	@ (8009400 <TIM_Base_SetConfig+0x160>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d007      	beq.n	80093b0 <TIM_Base_SetConfig+0x110>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	4a18      	ldr	r2, [pc, #96]	@ (8009404 <TIM_Base_SetConfig+0x164>)
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d003      	beq.n	80093b0 <TIM_Base_SetConfig+0x110>
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	4a13      	ldr	r2, [pc, #76]	@ (80093f8 <TIM_Base_SetConfig+0x158>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d103      	bne.n	80093b8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	691a      	ldr	r2, [r3, #16]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2201      	movs	r2, #1
 80093bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	691b      	ldr	r3, [r3, #16]
 80093c2:	f003 0301 	and.w	r3, r3, #1
 80093c6:	2b01      	cmp	r3, #1
 80093c8:	d105      	bne.n	80093d6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	691b      	ldr	r3, [r3, #16]
 80093ce:	f023 0201 	bic.w	r2, r3, #1
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	611a      	str	r2, [r3, #16]
  }
}
 80093d6:	bf00      	nop
 80093d8:	3714      	adds	r7, #20
 80093da:	46bd      	mov	sp, r7
 80093dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e0:	4770      	bx	lr
 80093e2:	bf00      	nop
 80093e4:	40012c00 	.word	0x40012c00
 80093e8:	40000400 	.word	0x40000400
 80093ec:	40000800 	.word	0x40000800
 80093f0:	40000c00 	.word	0x40000c00
 80093f4:	40013400 	.word	0x40013400
 80093f8:	40015000 	.word	0x40015000
 80093fc:	40014000 	.word	0x40014000
 8009400:	40014400 	.word	0x40014400
 8009404:	40014800 	.word	0x40014800

08009408 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009408:	b480      	push	{r7}
 800940a:	b087      	sub	sp, #28
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
 8009410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6a1b      	ldr	r3, [r3, #32]
 8009416:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6a1b      	ldr	r3, [r3, #32]
 800941c:	f023 0201 	bic.w	r2, r3, #1
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	685b      	ldr	r3, [r3, #4]
 8009428:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	699b      	ldr	r3, [r3, #24]
 800942e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009436:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800943a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	f023 0303 	bic.w	r3, r3, #3
 8009442:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	68fa      	ldr	r2, [r7, #12]
 800944a:	4313      	orrs	r3, r2
 800944c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	f023 0302 	bic.w	r3, r3, #2
 8009454:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	689b      	ldr	r3, [r3, #8]
 800945a:	697a      	ldr	r2, [r7, #20]
 800945c:	4313      	orrs	r3, r2
 800945e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	4a30      	ldr	r2, [pc, #192]	@ (8009524 <TIM_OC1_SetConfig+0x11c>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d013      	beq.n	8009490 <TIM_OC1_SetConfig+0x88>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	4a2f      	ldr	r2, [pc, #188]	@ (8009528 <TIM_OC1_SetConfig+0x120>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d00f      	beq.n	8009490 <TIM_OC1_SetConfig+0x88>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	4a2e      	ldr	r2, [pc, #184]	@ (800952c <TIM_OC1_SetConfig+0x124>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d00b      	beq.n	8009490 <TIM_OC1_SetConfig+0x88>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	4a2d      	ldr	r2, [pc, #180]	@ (8009530 <TIM_OC1_SetConfig+0x128>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d007      	beq.n	8009490 <TIM_OC1_SetConfig+0x88>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	4a2c      	ldr	r2, [pc, #176]	@ (8009534 <TIM_OC1_SetConfig+0x12c>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d003      	beq.n	8009490 <TIM_OC1_SetConfig+0x88>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	4a2b      	ldr	r2, [pc, #172]	@ (8009538 <TIM_OC1_SetConfig+0x130>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d10c      	bne.n	80094aa <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	f023 0308 	bic.w	r3, r3, #8
 8009496:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	68db      	ldr	r3, [r3, #12]
 800949c:	697a      	ldr	r2, [r7, #20]
 800949e:	4313      	orrs	r3, r2
 80094a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	f023 0304 	bic.w	r3, r3, #4
 80094a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	4a1d      	ldr	r2, [pc, #116]	@ (8009524 <TIM_OC1_SetConfig+0x11c>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d013      	beq.n	80094da <TIM_OC1_SetConfig+0xd2>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	4a1c      	ldr	r2, [pc, #112]	@ (8009528 <TIM_OC1_SetConfig+0x120>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d00f      	beq.n	80094da <TIM_OC1_SetConfig+0xd2>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	4a1b      	ldr	r2, [pc, #108]	@ (800952c <TIM_OC1_SetConfig+0x124>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d00b      	beq.n	80094da <TIM_OC1_SetConfig+0xd2>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	4a1a      	ldr	r2, [pc, #104]	@ (8009530 <TIM_OC1_SetConfig+0x128>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d007      	beq.n	80094da <TIM_OC1_SetConfig+0xd2>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	4a19      	ldr	r2, [pc, #100]	@ (8009534 <TIM_OC1_SetConfig+0x12c>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d003      	beq.n	80094da <TIM_OC1_SetConfig+0xd2>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	4a18      	ldr	r2, [pc, #96]	@ (8009538 <TIM_OC1_SetConfig+0x130>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d111      	bne.n	80094fe <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80094e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80094e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	695b      	ldr	r3, [r3, #20]
 80094ee:	693a      	ldr	r2, [r7, #16]
 80094f0:	4313      	orrs	r3, r2
 80094f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	699b      	ldr	r3, [r3, #24]
 80094f8:	693a      	ldr	r2, [r7, #16]
 80094fa:	4313      	orrs	r3, r2
 80094fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	693a      	ldr	r2, [r7, #16]
 8009502:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	68fa      	ldr	r2, [r7, #12]
 8009508:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	685a      	ldr	r2, [r3, #4]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	697a      	ldr	r2, [r7, #20]
 8009516:	621a      	str	r2, [r3, #32]
}
 8009518:	bf00      	nop
 800951a:	371c      	adds	r7, #28
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr
 8009524:	40012c00 	.word	0x40012c00
 8009528:	40013400 	.word	0x40013400
 800952c:	40014000 	.word	0x40014000
 8009530:	40014400 	.word	0x40014400
 8009534:	40014800 	.word	0x40014800
 8009538:	40015000 	.word	0x40015000

0800953c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800953c:	b480      	push	{r7}
 800953e:	b087      	sub	sp, #28
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6a1b      	ldr	r3, [r3, #32]
 800954a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6a1b      	ldr	r3, [r3, #32]
 8009550:	f023 0210 	bic.w	r2, r3, #16
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	699b      	ldr	r3, [r3, #24]
 8009562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800956a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800956e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009576:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	021b      	lsls	r3, r3, #8
 800957e:	68fa      	ldr	r2, [r7, #12]
 8009580:	4313      	orrs	r3, r2
 8009582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	f023 0320 	bic.w	r3, r3, #32
 800958a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	689b      	ldr	r3, [r3, #8]
 8009590:	011b      	lsls	r3, r3, #4
 8009592:	697a      	ldr	r2, [r7, #20]
 8009594:	4313      	orrs	r3, r2
 8009596:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	4a2c      	ldr	r2, [pc, #176]	@ (800964c <TIM_OC2_SetConfig+0x110>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d007      	beq.n	80095b0 <TIM_OC2_SetConfig+0x74>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	4a2b      	ldr	r2, [pc, #172]	@ (8009650 <TIM_OC2_SetConfig+0x114>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d003      	beq.n	80095b0 <TIM_OC2_SetConfig+0x74>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	4a2a      	ldr	r2, [pc, #168]	@ (8009654 <TIM_OC2_SetConfig+0x118>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d10d      	bne.n	80095cc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80095b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	68db      	ldr	r3, [r3, #12]
 80095bc:	011b      	lsls	r3, r3, #4
 80095be:	697a      	ldr	r2, [r7, #20]
 80095c0:	4313      	orrs	r3, r2
 80095c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80095c4:	697b      	ldr	r3, [r7, #20]
 80095c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80095ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	4a1f      	ldr	r2, [pc, #124]	@ (800964c <TIM_OC2_SetConfig+0x110>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d013      	beq.n	80095fc <TIM_OC2_SetConfig+0xc0>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	4a1e      	ldr	r2, [pc, #120]	@ (8009650 <TIM_OC2_SetConfig+0x114>)
 80095d8:	4293      	cmp	r3, r2
 80095da:	d00f      	beq.n	80095fc <TIM_OC2_SetConfig+0xc0>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	4a1e      	ldr	r2, [pc, #120]	@ (8009658 <TIM_OC2_SetConfig+0x11c>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d00b      	beq.n	80095fc <TIM_OC2_SetConfig+0xc0>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	4a1d      	ldr	r2, [pc, #116]	@ (800965c <TIM_OC2_SetConfig+0x120>)
 80095e8:	4293      	cmp	r3, r2
 80095ea:	d007      	beq.n	80095fc <TIM_OC2_SetConfig+0xc0>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	4a1c      	ldr	r2, [pc, #112]	@ (8009660 <TIM_OC2_SetConfig+0x124>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d003      	beq.n	80095fc <TIM_OC2_SetConfig+0xc0>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	4a17      	ldr	r2, [pc, #92]	@ (8009654 <TIM_OC2_SetConfig+0x118>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d113      	bne.n	8009624 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009602:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800960a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	695b      	ldr	r3, [r3, #20]
 8009610:	009b      	lsls	r3, r3, #2
 8009612:	693a      	ldr	r2, [r7, #16]
 8009614:	4313      	orrs	r3, r2
 8009616:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	699b      	ldr	r3, [r3, #24]
 800961c:	009b      	lsls	r3, r3, #2
 800961e:	693a      	ldr	r2, [r7, #16]
 8009620:	4313      	orrs	r3, r2
 8009622:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	693a      	ldr	r2, [r7, #16]
 8009628:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	68fa      	ldr	r2, [r7, #12]
 800962e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	685a      	ldr	r2, [r3, #4]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	697a      	ldr	r2, [r7, #20]
 800963c:	621a      	str	r2, [r3, #32]
}
 800963e:	bf00      	nop
 8009640:	371c      	adds	r7, #28
 8009642:	46bd      	mov	sp, r7
 8009644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009648:	4770      	bx	lr
 800964a:	bf00      	nop
 800964c:	40012c00 	.word	0x40012c00
 8009650:	40013400 	.word	0x40013400
 8009654:	40015000 	.word	0x40015000
 8009658:	40014000 	.word	0x40014000
 800965c:	40014400 	.word	0x40014400
 8009660:	40014800 	.word	0x40014800

08009664 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009664:	b480      	push	{r7}
 8009666:	b087      	sub	sp, #28
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6a1b      	ldr	r3, [r3, #32]
 8009672:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6a1b      	ldr	r3, [r3, #32]
 8009678:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	685b      	ldr	r3, [r3, #4]
 8009684:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	69db      	ldr	r3, [r3, #28]
 800968a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009692:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	f023 0303 	bic.w	r3, r3, #3
 800969e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	68fa      	ldr	r2, [r7, #12]
 80096a6:	4313      	orrs	r3, r2
 80096a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80096b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	689b      	ldr	r3, [r3, #8]
 80096b6:	021b      	lsls	r3, r3, #8
 80096b8:	697a      	ldr	r2, [r7, #20]
 80096ba:	4313      	orrs	r3, r2
 80096bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	4a2b      	ldr	r2, [pc, #172]	@ (8009770 <TIM_OC3_SetConfig+0x10c>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d007      	beq.n	80096d6 <TIM_OC3_SetConfig+0x72>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	4a2a      	ldr	r2, [pc, #168]	@ (8009774 <TIM_OC3_SetConfig+0x110>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d003      	beq.n	80096d6 <TIM_OC3_SetConfig+0x72>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	4a29      	ldr	r2, [pc, #164]	@ (8009778 <TIM_OC3_SetConfig+0x114>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d10d      	bne.n	80096f2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80096dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	68db      	ldr	r3, [r3, #12]
 80096e2:	021b      	lsls	r3, r3, #8
 80096e4:	697a      	ldr	r2, [r7, #20]
 80096e6:	4313      	orrs	r3, r2
 80096e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80096f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	4a1e      	ldr	r2, [pc, #120]	@ (8009770 <TIM_OC3_SetConfig+0x10c>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d013      	beq.n	8009722 <TIM_OC3_SetConfig+0xbe>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	4a1d      	ldr	r2, [pc, #116]	@ (8009774 <TIM_OC3_SetConfig+0x110>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d00f      	beq.n	8009722 <TIM_OC3_SetConfig+0xbe>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	4a1d      	ldr	r2, [pc, #116]	@ (800977c <TIM_OC3_SetConfig+0x118>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d00b      	beq.n	8009722 <TIM_OC3_SetConfig+0xbe>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	4a1c      	ldr	r2, [pc, #112]	@ (8009780 <TIM_OC3_SetConfig+0x11c>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d007      	beq.n	8009722 <TIM_OC3_SetConfig+0xbe>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	4a1b      	ldr	r2, [pc, #108]	@ (8009784 <TIM_OC3_SetConfig+0x120>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d003      	beq.n	8009722 <TIM_OC3_SetConfig+0xbe>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	4a16      	ldr	r2, [pc, #88]	@ (8009778 <TIM_OC3_SetConfig+0x114>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d113      	bne.n	800974a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009722:	693b      	ldr	r3, [r7, #16]
 8009724:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009728:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009730:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	695b      	ldr	r3, [r3, #20]
 8009736:	011b      	lsls	r3, r3, #4
 8009738:	693a      	ldr	r2, [r7, #16]
 800973a:	4313      	orrs	r3, r2
 800973c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	699b      	ldr	r3, [r3, #24]
 8009742:	011b      	lsls	r3, r3, #4
 8009744:	693a      	ldr	r2, [r7, #16]
 8009746:	4313      	orrs	r3, r2
 8009748:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	693a      	ldr	r2, [r7, #16]
 800974e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	68fa      	ldr	r2, [r7, #12]
 8009754:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	685a      	ldr	r2, [r3, #4]
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	697a      	ldr	r2, [r7, #20]
 8009762:	621a      	str	r2, [r3, #32]
}
 8009764:	bf00      	nop
 8009766:	371c      	adds	r7, #28
 8009768:	46bd      	mov	sp, r7
 800976a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976e:	4770      	bx	lr
 8009770:	40012c00 	.word	0x40012c00
 8009774:	40013400 	.word	0x40013400
 8009778:	40015000 	.word	0x40015000
 800977c:	40014000 	.word	0x40014000
 8009780:	40014400 	.word	0x40014400
 8009784:	40014800 	.word	0x40014800

08009788 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009788:	b480      	push	{r7}
 800978a:	b087      	sub	sp, #28
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6a1b      	ldr	r3, [r3, #32]
 8009796:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6a1b      	ldr	r3, [r3, #32]
 800979c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	685b      	ldr	r3, [r3, #4]
 80097a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	69db      	ldr	r3, [r3, #28]
 80097ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80097b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80097ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80097c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	021b      	lsls	r3, r3, #8
 80097ca:	68fa      	ldr	r2, [r7, #12]
 80097cc:	4313      	orrs	r3, r2
 80097ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80097d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	689b      	ldr	r3, [r3, #8]
 80097dc:	031b      	lsls	r3, r3, #12
 80097de:	697a      	ldr	r2, [r7, #20]
 80097e0:	4313      	orrs	r3, r2
 80097e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	4a2c      	ldr	r2, [pc, #176]	@ (8009898 <TIM_OC4_SetConfig+0x110>)
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d007      	beq.n	80097fc <TIM_OC4_SetConfig+0x74>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	4a2b      	ldr	r2, [pc, #172]	@ (800989c <TIM_OC4_SetConfig+0x114>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d003      	beq.n	80097fc <TIM_OC4_SetConfig+0x74>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	4a2a      	ldr	r2, [pc, #168]	@ (80098a0 <TIM_OC4_SetConfig+0x118>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d10d      	bne.n	8009818 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009802:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	68db      	ldr	r3, [r3, #12]
 8009808:	031b      	lsls	r3, r3, #12
 800980a:	697a      	ldr	r2, [r7, #20]
 800980c:	4313      	orrs	r3, r2
 800980e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009816:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	4a1f      	ldr	r2, [pc, #124]	@ (8009898 <TIM_OC4_SetConfig+0x110>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d013      	beq.n	8009848 <TIM_OC4_SetConfig+0xc0>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	4a1e      	ldr	r2, [pc, #120]	@ (800989c <TIM_OC4_SetConfig+0x114>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d00f      	beq.n	8009848 <TIM_OC4_SetConfig+0xc0>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	4a1e      	ldr	r2, [pc, #120]	@ (80098a4 <TIM_OC4_SetConfig+0x11c>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d00b      	beq.n	8009848 <TIM_OC4_SetConfig+0xc0>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	4a1d      	ldr	r2, [pc, #116]	@ (80098a8 <TIM_OC4_SetConfig+0x120>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d007      	beq.n	8009848 <TIM_OC4_SetConfig+0xc0>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	4a1c      	ldr	r2, [pc, #112]	@ (80098ac <TIM_OC4_SetConfig+0x124>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d003      	beq.n	8009848 <TIM_OC4_SetConfig+0xc0>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	4a17      	ldr	r2, [pc, #92]	@ (80098a0 <TIM_OC4_SetConfig+0x118>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d113      	bne.n	8009870 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800984e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009856:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	695b      	ldr	r3, [r3, #20]
 800985c:	019b      	lsls	r3, r3, #6
 800985e:	693a      	ldr	r2, [r7, #16]
 8009860:	4313      	orrs	r3, r2
 8009862:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	699b      	ldr	r3, [r3, #24]
 8009868:	019b      	lsls	r3, r3, #6
 800986a:	693a      	ldr	r2, [r7, #16]
 800986c:	4313      	orrs	r3, r2
 800986e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	693a      	ldr	r2, [r7, #16]
 8009874:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	68fa      	ldr	r2, [r7, #12]
 800987a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	685a      	ldr	r2, [r3, #4]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	697a      	ldr	r2, [r7, #20]
 8009888:	621a      	str	r2, [r3, #32]
}
 800988a:	bf00      	nop
 800988c:	371c      	adds	r7, #28
 800988e:	46bd      	mov	sp, r7
 8009890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009894:	4770      	bx	lr
 8009896:	bf00      	nop
 8009898:	40012c00 	.word	0x40012c00
 800989c:	40013400 	.word	0x40013400
 80098a0:	40015000 	.word	0x40015000
 80098a4:	40014000 	.word	0x40014000
 80098a8:	40014400 	.word	0x40014400
 80098ac:	40014800 	.word	0x40014800

080098b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b087      	sub	sp, #28
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6a1b      	ldr	r3, [r3, #32]
 80098be:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6a1b      	ldr	r3, [r3, #32]
 80098c4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	685b      	ldr	r3, [r3, #4]
 80098d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80098de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	68fa      	ldr	r2, [r7, #12]
 80098ea:	4313      	orrs	r3, r2
 80098ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80098f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	689b      	ldr	r3, [r3, #8]
 80098fa:	041b      	lsls	r3, r3, #16
 80098fc:	693a      	ldr	r2, [r7, #16]
 80098fe:	4313      	orrs	r3, r2
 8009900:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	4a19      	ldr	r2, [pc, #100]	@ (800996c <TIM_OC5_SetConfig+0xbc>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d013      	beq.n	8009932 <TIM_OC5_SetConfig+0x82>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	4a18      	ldr	r2, [pc, #96]	@ (8009970 <TIM_OC5_SetConfig+0xc0>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d00f      	beq.n	8009932 <TIM_OC5_SetConfig+0x82>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	4a17      	ldr	r2, [pc, #92]	@ (8009974 <TIM_OC5_SetConfig+0xc4>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d00b      	beq.n	8009932 <TIM_OC5_SetConfig+0x82>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	4a16      	ldr	r2, [pc, #88]	@ (8009978 <TIM_OC5_SetConfig+0xc8>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d007      	beq.n	8009932 <TIM_OC5_SetConfig+0x82>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	4a15      	ldr	r2, [pc, #84]	@ (800997c <TIM_OC5_SetConfig+0xcc>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d003      	beq.n	8009932 <TIM_OC5_SetConfig+0x82>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	4a14      	ldr	r2, [pc, #80]	@ (8009980 <TIM_OC5_SetConfig+0xd0>)
 800992e:	4293      	cmp	r3, r2
 8009930:	d109      	bne.n	8009946 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009938:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	695b      	ldr	r3, [r3, #20]
 800993e:	021b      	lsls	r3, r3, #8
 8009940:	697a      	ldr	r2, [r7, #20]
 8009942:	4313      	orrs	r3, r2
 8009944:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	697a      	ldr	r2, [r7, #20]
 800994a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	68fa      	ldr	r2, [r7, #12]
 8009950:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	685a      	ldr	r2, [r3, #4]
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	693a      	ldr	r2, [r7, #16]
 800995e:	621a      	str	r2, [r3, #32]
}
 8009960:	bf00      	nop
 8009962:	371c      	adds	r7, #28
 8009964:	46bd      	mov	sp, r7
 8009966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996a:	4770      	bx	lr
 800996c:	40012c00 	.word	0x40012c00
 8009970:	40013400 	.word	0x40013400
 8009974:	40014000 	.word	0x40014000
 8009978:	40014400 	.word	0x40014400
 800997c:	40014800 	.word	0x40014800
 8009980:	40015000 	.word	0x40015000

08009984 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009984:	b480      	push	{r7}
 8009986:	b087      	sub	sp, #28
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
 800998c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6a1b      	ldr	r3, [r3, #32]
 8009992:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6a1b      	ldr	r3, [r3, #32]
 8009998:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	685b      	ldr	r3, [r3, #4]
 80099a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80099b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80099b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	021b      	lsls	r3, r3, #8
 80099be:	68fa      	ldr	r2, [r7, #12]
 80099c0:	4313      	orrs	r3, r2
 80099c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80099ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	689b      	ldr	r3, [r3, #8]
 80099d0:	051b      	lsls	r3, r3, #20
 80099d2:	693a      	ldr	r2, [r7, #16]
 80099d4:	4313      	orrs	r3, r2
 80099d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	4a1a      	ldr	r2, [pc, #104]	@ (8009a44 <TIM_OC6_SetConfig+0xc0>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d013      	beq.n	8009a08 <TIM_OC6_SetConfig+0x84>
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	4a19      	ldr	r2, [pc, #100]	@ (8009a48 <TIM_OC6_SetConfig+0xc4>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d00f      	beq.n	8009a08 <TIM_OC6_SetConfig+0x84>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	4a18      	ldr	r2, [pc, #96]	@ (8009a4c <TIM_OC6_SetConfig+0xc8>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d00b      	beq.n	8009a08 <TIM_OC6_SetConfig+0x84>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	4a17      	ldr	r2, [pc, #92]	@ (8009a50 <TIM_OC6_SetConfig+0xcc>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d007      	beq.n	8009a08 <TIM_OC6_SetConfig+0x84>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	4a16      	ldr	r2, [pc, #88]	@ (8009a54 <TIM_OC6_SetConfig+0xd0>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d003      	beq.n	8009a08 <TIM_OC6_SetConfig+0x84>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	4a15      	ldr	r2, [pc, #84]	@ (8009a58 <TIM_OC6_SetConfig+0xd4>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d109      	bne.n	8009a1c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009a0e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	695b      	ldr	r3, [r3, #20]
 8009a14:	029b      	lsls	r3, r3, #10
 8009a16:	697a      	ldr	r2, [r7, #20]
 8009a18:	4313      	orrs	r3, r2
 8009a1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	697a      	ldr	r2, [r7, #20]
 8009a20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	68fa      	ldr	r2, [r7, #12]
 8009a26:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	685a      	ldr	r2, [r3, #4]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	693a      	ldr	r2, [r7, #16]
 8009a34:	621a      	str	r2, [r3, #32]
}
 8009a36:	bf00      	nop
 8009a38:	371c      	adds	r7, #28
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a40:	4770      	bx	lr
 8009a42:	bf00      	nop
 8009a44:	40012c00 	.word	0x40012c00
 8009a48:	40013400 	.word	0x40013400
 8009a4c:	40014000 	.word	0x40014000
 8009a50:	40014400 	.word	0x40014400
 8009a54:	40014800 	.word	0x40014800
 8009a58:	40015000 	.word	0x40015000

08009a5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b087      	sub	sp, #28
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	60f8      	str	r0, [r7, #12]
 8009a64:	60b9      	str	r1, [r7, #8]
 8009a66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	6a1b      	ldr	r3, [r3, #32]
 8009a6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	6a1b      	ldr	r3, [r3, #32]
 8009a72:	f023 0201 	bic.w	r2, r3, #1
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	699b      	ldr	r3, [r3, #24]
 8009a7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009a80:	693b      	ldr	r3, [r7, #16]
 8009a82:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009a86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	011b      	lsls	r3, r3, #4
 8009a8c:	693a      	ldr	r2, [r7, #16]
 8009a8e:	4313      	orrs	r3, r2
 8009a90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	f023 030a 	bic.w	r3, r3, #10
 8009a98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009a9a:	697a      	ldr	r2, [r7, #20]
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	4313      	orrs	r3, r2
 8009aa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	693a      	ldr	r2, [r7, #16]
 8009aa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	697a      	ldr	r2, [r7, #20]
 8009aac:	621a      	str	r2, [r3, #32]
}
 8009aae:	bf00      	nop
 8009ab0:	371c      	adds	r7, #28
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab8:	4770      	bx	lr

08009aba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009aba:	b480      	push	{r7}
 8009abc:	b087      	sub	sp, #28
 8009abe:	af00      	add	r7, sp, #0
 8009ac0:	60f8      	str	r0, [r7, #12]
 8009ac2:	60b9      	str	r1, [r7, #8]
 8009ac4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	6a1b      	ldr	r3, [r3, #32]
 8009aca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	6a1b      	ldr	r3, [r3, #32]
 8009ad0:	f023 0210 	bic.w	r2, r3, #16
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	699b      	ldr	r3, [r3, #24]
 8009adc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009ade:	693b      	ldr	r3, [r7, #16]
 8009ae0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009ae4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	031b      	lsls	r3, r3, #12
 8009aea:	693a      	ldr	r2, [r7, #16]
 8009aec:	4313      	orrs	r3, r2
 8009aee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009af0:	697b      	ldr	r3, [r7, #20]
 8009af2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009af6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	011b      	lsls	r3, r3, #4
 8009afc:	697a      	ldr	r2, [r7, #20]
 8009afe:	4313      	orrs	r3, r2
 8009b00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	693a      	ldr	r2, [r7, #16]
 8009b06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	697a      	ldr	r2, [r7, #20]
 8009b0c:	621a      	str	r2, [r3, #32]
}
 8009b0e:	bf00      	nop
 8009b10:	371c      	adds	r7, #28
 8009b12:	46bd      	mov	sp, r7
 8009b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b18:	4770      	bx	lr

08009b1a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009b1a:	b480      	push	{r7}
 8009b1c:	b085      	sub	sp, #20
 8009b1e:	af00      	add	r7, sp, #0
 8009b20:	6078      	str	r0, [r7, #4]
 8009b22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	689b      	ldr	r3, [r3, #8]
 8009b28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009b30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009b36:	683a      	ldr	r2, [r7, #0]
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	4313      	orrs	r3, r2
 8009b3c:	f043 0307 	orr.w	r3, r3, #7
 8009b40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	68fa      	ldr	r2, [r7, #12]
 8009b46:	609a      	str	r2, [r3, #8]
}
 8009b48:	bf00      	nop
 8009b4a:	3714      	adds	r7, #20
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b52:	4770      	bx	lr

08009b54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009b54:	b480      	push	{r7}
 8009b56:	b087      	sub	sp, #28
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	60f8      	str	r0, [r7, #12]
 8009b5c:	60b9      	str	r1, [r7, #8]
 8009b5e:	607a      	str	r2, [r7, #4]
 8009b60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	689b      	ldr	r3, [r3, #8]
 8009b66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009b6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	021a      	lsls	r2, r3, #8
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	431a      	orrs	r2, r3
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	4313      	orrs	r3, r2
 8009b7c:	697a      	ldr	r2, [r7, #20]
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	697a      	ldr	r2, [r7, #20]
 8009b86:	609a      	str	r2, [r3, #8]
}
 8009b88:	bf00      	nop
 8009b8a:	371c      	adds	r7, #28
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b92:	4770      	bx	lr

08009b94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009b94:	b480      	push	{r7}
 8009b96:	b087      	sub	sp, #28
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	60f8      	str	r0, [r7, #12]
 8009b9c:	60b9      	str	r1, [r7, #8]
 8009b9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	f003 031f 	and.w	r3, r3, #31
 8009ba6:	2201      	movs	r2, #1
 8009ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8009bac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	6a1a      	ldr	r2, [r3, #32]
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	43db      	mvns	r3, r3
 8009bb6:	401a      	ands	r2, r3
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	6a1a      	ldr	r2, [r3, #32]
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	f003 031f 	and.w	r3, r3, #31
 8009bc6:	6879      	ldr	r1, [r7, #4]
 8009bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8009bcc:	431a      	orrs	r2, r3
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	621a      	str	r2, [r3, #32]
}
 8009bd2:	bf00      	nop
 8009bd4:	371c      	adds	r7, #28
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bdc:	4770      	bx	lr
	...

08009be0 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8009be0:	b480      	push	{r7}
 8009be2:	b083      	sub	sp, #12
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	4a26      	ldr	r2, [pc, #152]	@ (8009c84 <TIM_ResetCallback+0xa4>)
 8009bec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	4a25      	ldr	r2, [pc, #148]	@ (8009c88 <TIM_ResetCallback+0xa8>)
 8009bf4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	4a24      	ldr	r2, [pc, #144]	@ (8009c8c <TIM_ResetCallback+0xac>)
 8009bfc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	4a23      	ldr	r2, [pc, #140]	@ (8009c90 <TIM_ResetCallback+0xb0>)
 8009c04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	4a22      	ldr	r2, [pc, #136]	@ (8009c94 <TIM_ResetCallback+0xb4>)
 8009c0c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	4a21      	ldr	r2, [pc, #132]	@ (8009c98 <TIM_ResetCallback+0xb8>)
 8009c14:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	4a20      	ldr	r2, [pc, #128]	@ (8009c9c <TIM_ResetCallback+0xbc>)
 8009c1c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	4a1f      	ldr	r2, [pc, #124]	@ (8009ca0 <TIM_ResetCallback+0xc0>)
 8009c24:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	4a1e      	ldr	r2, [pc, #120]	@ (8009ca4 <TIM_ResetCallback+0xc4>)
 8009c2c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	4a1d      	ldr	r2, [pc, #116]	@ (8009ca8 <TIM_ResetCallback+0xc8>)
 8009c34:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	4a1c      	ldr	r2, [pc, #112]	@ (8009cac <TIM_ResetCallback+0xcc>)
 8009c3c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	4a1b      	ldr	r2, [pc, #108]	@ (8009cb0 <TIM_ResetCallback+0xd0>)
 8009c44:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	4a1a      	ldr	r2, [pc, #104]	@ (8009cb4 <TIM_ResetCallback+0xd4>)
 8009c4c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	4a19      	ldr	r2, [pc, #100]	@ (8009cb8 <TIM_ResetCallback+0xd8>)
 8009c54:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	4a18      	ldr	r2, [pc, #96]	@ (8009cbc <TIM_ResetCallback+0xdc>)
 8009c5c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	4a17      	ldr	r2, [pc, #92]	@ (8009cc0 <TIM_ResetCallback+0xe0>)
 8009c64:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	4a16      	ldr	r2, [pc, #88]	@ (8009cc4 <TIM_ResetCallback+0xe4>)
 8009c6c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	4a15      	ldr	r2, [pc, #84]	@ (8009cc8 <TIM_ResetCallback+0xe8>)
 8009c74:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8009c78:	bf00      	nop
 8009c7a:	370c      	adds	r7, #12
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c82:	4770      	bx	lr
 8009c84:	08003019 	.word	0x08003019
 8009c88:	08008f2d 	.word	0x08008f2d
 8009c8c:	08008fa5 	.word	0x08008fa5
 8009c90:	08008fb9 	.word	0x08008fb9
 8009c94:	08008f55 	.word	0x08008f55
 8009c98:	08008f69 	.word	0x08008f69
 8009c9c:	08008f41 	.word	0x08008f41
 8009ca0:	08008f7d 	.word	0x08008f7d
 8009ca4:	08008f91 	.word	0x08008f91
 8009ca8:	08008fcd 	.word	0x08008fcd
 8009cac:	08009f21 	.word	0x08009f21
 8009cb0:	08009f35 	.word	0x08009f35
 8009cb4:	08009f49 	.word	0x08009f49
 8009cb8:	08009f5d 	.word	0x08009f5d
 8009cbc:	08009f71 	.word	0x08009f71
 8009cc0:	08009f85 	.word	0x08009f85
 8009cc4:	08009f99 	.word	0x08009f99
 8009cc8:	08009fad 	.word	0x08009fad

08009ccc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b085      	sub	sp, #20
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
 8009cd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	d101      	bne.n	8009ce4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009ce0:	2302      	movs	r3, #2
 8009ce2:	e074      	b.n	8009dce <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2202      	movs	r2, #2
 8009cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	685b      	ldr	r3, [r3, #4]
 8009cfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	689b      	ldr	r3, [r3, #8]
 8009d02:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4a34      	ldr	r2, [pc, #208]	@ (8009ddc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d009      	beq.n	8009d22 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	4a33      	ldr	r2, [pc, #204]	@ (8009de0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d004      	beq.n	8009d22 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4a31      	ldr	r2, [pc, #196]	@ (8009de4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d108      	bne.n	8009d34 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009d28:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	68fa      	ldr	r2, [r7, #12]
 8009d30:	4313      	orrs	r3, r2
 8009d32:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009d3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	68fa      	ldr	r2, [r7, #12]
 8009d46:	4313      	orrs	r3, r2
 8009d48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	68fa      	ldr	r2, [r7, #12]
 8009d50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	4a21      	ldr	r2, [pc, #132]	@ (8009ddc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d022      	beq.n	8009da2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d64:	d01d      	beq.n	8009da2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	4a1f      	ldr	r2, [pc, #124]	@ (8009de8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d018      	beq.n	8009da2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	4a1d      	ldr	r2, [pc, #116]	@ (8009dec <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d013      	beq.n	8009da2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	4a1c      	ldr	r2, [pc, #112]	@ (8009df0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d00e      	beq.n	8009da2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	4a15      	ldr	r2, [pc, #84]	@ (8009de0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d009      	beq.n	8009da2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	4a18      	ldr	r2, [pc, #96]	@ (8009df4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d004      	beq.n	8009da2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	4a11      	ldr	r2, [pc, #68]	@ (8009de4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d10c      	bne.n	8009dbc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009da8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	689b      	ldr	r3, [r3, #8]
 8009dae:	68ba      	ldr	r2, [r7, #8]
 8009db0:	4313      	orrs	r3, r2
 8009db2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	68ba      	ldr	r2, [r7, #8]
 8009dba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2201      	movs	r2, #1
 8009dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009dcc:	2300      	movs	r3, #0
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3714      	adds	r7, #20
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd8:	4770      	bx	lr
 8009dda:	bf00      	nop
 8009ddc:	40012c00 	.word	0x40012c00
 8009de0:	40013400 	.word	0x40013400
 8009de4:	40015000 	.word	0x40015000
 8009de8:	40000400 	.word	0x40000400
 8009dec:	40000800 	.word	0x40000800
 8009df0:	40000c00 	.word	0x40000c00
 8009df4:	40014000 	.word	0x40014000

08009df8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b085      	sub	sp, #20
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
 8009e00:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009e02:	2300      	movs	r3, #0
 8009e04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009e0c:	2b01      	cmp	r3, #1
 8009e0e:	d101      	bne.n	8009e14 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009e10:	2302      	movs	r3, #2
 8009e12:	e078      	b.n	8009f06 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2201      	movs	r2, #1
 8009e18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	68db      	ldr	r3, [r3, #12]
 8009e26:	4313      	orrs	r3, r2
 8009e28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	689b      	ldr	r3, [r3, #8]
 8009e34:	4313      	orrs	r3, r2
 8009e36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	685b      	ldr	r3, [r3, #4]
 8009e42:	4313      	orrs	r3, r2
 8009e44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	4313      	orrs	r3, r2
 8009e52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	691b      	ldr	r3, [r3, #16]
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	695b      	ldr	r3, [r3, #20]
 8009e6c:	4313      	orrs	r3, r2
 8009e6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	699b      	ldr	r3, [r3, #24]
 8009e88:	041b      	lsls	r3, r3, #16
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	69db      	ldr	r3, [r3, #28]
 8009e98:	4313      	orrs	r3, r2
 8009e9a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4a1c      	ldr	r2, [pc, #112]	@ (8009f14 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d009      	beq.n	8009eba <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	4a1b      	ldr	r2, [pc, #108]	@ (8009f18 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d004      	beq.n	8009eba <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	4a19      	ldr	r2, [pc, #100]	@ (8009f1c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d11c      	bne.n	8009ef4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ec4:	051b      	lsls	r3, r3, #20
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	6a1b      	ldr	r3, [r3, #32]
 8009ed4:	4313      	orrs	r3, r2
 8009ed6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ee2:	4313      	orrs	r3, r2
 8009ee4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ef0:	4313      	orrs	r3, r2
 8009ef2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	68fa      	ldr	r2, [r7, #12]
 8009efa:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2200      	movs	r2, #0
 8009f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009f04:	2300      	movs	r3, #0
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	3714      	adds	r7, #20
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f10:	4770      	bx	lr
 8009f12:	bf00      	nop
 8009f14:	40012c00 	.word	0x40012c00
 8009f18:	40013400 	.word	0x40013400
 8009f1c:	40015000 	.word	0x40015000

08009f20 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009f20:	b480      	push	{r7}
 8009f22:	b083      	sub	sp, #12
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009f28:	bf00      	nop
 8009f2a:	370c      	adds	r7, #12
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f32:	4770      	bx	lr

08009f34 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b083      	sub	sp, #12
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8009f3c:	bf00      	nop
 8009f3e:	370c      	adds	r7, #12
 8009f40:	46bd      	mov	sp, r7
 8009f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f46:	4770      	bx	lr

08009f48 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009f48:	b480      	push	{r7}
 8009f4a:	b083      	sub	sp, #12
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009f50:	bf00      	nop
 8009f52:	370c      	adds	r7, #12
 8009f54:	46bd      	mov	sp, r7
 8009f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5a:	4770      	bx	lr

08009f5c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b083      	sub	sp, #12
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009f64:	bf00      	nop
 8009f66:	370c      	adds	r7, #12
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6e:	4770      	bx	lr

08009f70 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b083      	sub	sp, #12
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009f78:	bf00      	nop
 8009f7a:	370c      	adds	r7, #12
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f82:	4770      	bx	lr

08009f84 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b083      	sub	sp, #12
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009f8c:	bf00      	nop
 8009f8e:	370c      	adds	r7, #12
 8009f90:	46bd      	mov	sp, r7
 8009f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f96:	4770      	bx	lr

08009f98 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b083      	sub	sp, #12
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009fa0:	bf00      	nop
 8009fa2:	370c      	adds	r7, #12
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009faa:	4770      	bx	lr

08009fac <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009fac:	b480      	push	{r7}
 8009fae:	b083      	sub	sp, #12
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009fb4:	bf00      	nop
 8009fb6:	370c      	adds	r7, #12
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbe:	4770      	bx	lr

08009fc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b082      	sub	sp, #8
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d101      	bne.n	8009fd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009fce:	2301      	movs	r3, #1
 8009fd0:	e050      	b.n	800a074 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d114      	bne.n	800a006 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f000 fe37 	bl	800ac58 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d103      	bne.n	8009ffc <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	4a21      	ldr	r2, [pc, #132]	@ (800a07c <HAL_UART_Init+0xbc>)
 8009ff8:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2224      	movs	r2, #36	@ 0x24
 800a00a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	681a      	ldr	r2, [r3, #0]
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f022 0201 	bic.w	r2, r2, #1
 800a01c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a022:	2b00      	cmp	r3, #0
 800a024:	d002      	beq.n	800a02c <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f001 f964 	bl	800b2f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f000 fe65 	bl	800acfc <UART_SetConfig>
 800a032:	4603      	mov	r3, r0
 800a034:	2b01      	cmp	r3, #1
 800a036:	d101      	bne.n	800a03c <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800a038:	2301      	movs	r3, #1
 800a03a:	e01b      	b.n	800a074 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	685a      	ldr	r2, [r3, #4]
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a04a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	689a      	ldr	r2, [r3, #8]
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a05a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	681a      	ldr	r2, [r3, #0]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f042 0201 	orr.w	r2, r2, #1
 800a06a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f001 f9e3 	bl	800b438 <UART_CheckIdleState>
 800a072:	4603      	mov	r3, r0
}
 800a074:	4618      	mov	r0, r3
 800a076:	3708      	adds	r7, #8
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}
 800a07c:	08003f89 	.word	0x08003f89

0800a080 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800a080:	b480      	push	{r7}
 800a082:	b087      	sub	sp, #28
 800a084:	af00      	add	r7, sp, #0
 800a086:	60f8      	str	r0, [r7, #12]
 800a088:	460b      	mov	r3, r1
 800a08a:	607a      	str	r2, [r7, #4]
 800a08c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a08e:	2300      	movs	r3, #0
 800a090:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d109      	bne.n	800a0ac <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a09e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	e09c      	b.n	800a1e6 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a0b2:	2b20      	cmp	r3, #32
 800a0b4:	d16c      	bne.n	800a190 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800a0b6:	7afb      	ldrb	r3, [r7, #11]
 800a0b8:	2b0c      	cmp	r3, #12
 800a0ba:	d85e      	bhi.n	800a17a <HAL_UART_RegisterCallback+0xfa>
 800a0bc:	a201      	add	r2, pc, #4	@ (adr r2, 800a0c4 <HAL_UART_RegisterCallback+0x44>)
 800a0be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0c2:	bf00      	nop
 800a0c4:	0800a0f9 	.word	0x0800a0f9
 800a0c8:	0800a103 	.word	0x0800a103
 800a0cc:	0800a10d 	.word	0x0800a10d
 800a0d0:	0800a117 	.word	0x0800a117
 800a0d4:	0800a121 	.word	0x0800a121
 800a0d8:	0800a12b 	.word	0x0800a12b
 800a0dc:	0800a135 	.word	0x0800a135
 800a0e0:	0800a13f 	.word	0x0800a13f
 800a0e4:	0800a149 	.word	0x0800a149
 800a0e8:	0800a153 	.word	0x0800a153
 800a0ec:	0800a15d 	.word	0x0800a15d
 800a0f0:	0800a167 	.word	0x0800a167
 800a0f4:	0800a171 	.word	0x0800a171
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	687a      	ldr	r2, [r7, #4]
 800a0fc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800a100:	e070      	b.n	800a1e4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	687a      	ldr	r2, [r7, #4]
 800a106:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800a10a:	e06b      	b.n	800a1e4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	687a      	ldr	r2, [r7, #4]
 800a110:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800a114:	e066      	b.n	800a1e4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	687a      	ldr	r2, [r7, #4]
 800a11a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800a11e:	e061      	b.n	800a1e4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	687a      	ldr	r2, [r7, #4]
 800a124:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800a128:	e05c      	b.n	800a1e4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	687a      	ldr	r2, [r7, #4]
 800a12e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800a132:	e057      	b.n	800a1e4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	687a      	ldr	r2, [r7, #4]
 800a138:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800a13c:	e052      	b.n	800a1e4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	687a      	ldr	r2, [r7, #4]
 800a142:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800a146:	e04d      	b.n	800a1e4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	687a      	ldr	r2, [r7, #4]
 800a14c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800a150:	e048      	b.n	800a1e4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	687a      	ldr	r2, [r7, #4]
 800a156:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800a15a:	e043      	b.n	800a1e4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	687a      	ldr	r2, [r7, #4]
 800a160:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800a164:	e03e      	b.n	800a1e4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	687a      	ldr	r2, [r7, #4]
 800a16a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800a16e:	e039      	b.n	800a1e4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	687a      	ldr	r2, [r7, #4]
 800a174:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800a178:	e034      	b.n	800a1e4 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a180:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800a18a:	2301      	movs	r3, #1
 800a18c:	75fb      	strb	r3, [r7, #23]
        break;
 800a18e:	e029      	b.n	800a1e4 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a196:	2b00      	cmp	r3, #0
 800a198:	d11a      	bne.n	800a1d0 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800a19a:	7afb      	ldrb	r3, [r7, #11]
 800a19c:	2b0b      	cmp	r3, #11
 800a19e:	d002      	beq.n	800a1a6 <HAL_UART_RegisterCallback+0x126>
 800a1a0:	2b0c      	cmp	r3, #12
 800a1a2:	d005      	beq.n	800a1b0 <HAL_UART_RegisterCallback+0x130>
 800a1a4:	e009      	b.n	800a1ba <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	687a      	ldr	r2, [r7, #4]
 800a1aa:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800a1ae:	e019      	b.n	800a1e4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	687a      	ldr	r2, [r7, #4]
 800a1b4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800a1b8:	e014      	b.n	800a1e4 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a1c0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	75fb      	strb	r3, [r7, #23]
        break;
 800a1ce:	e009      	b.n	800a1e4 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a1d6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800a1e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	371c      	adds	r7, #28
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f0:	4770      	bx	lr
 800a1f2:	bf00      	nop

0800a1f4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b08a      	sub	sp, #40	@ 0x28
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	60f8      	str	r0, [r7, #12]
 800a1fc:	60b9      	str	r1, [r7, #8]
 800a1fe:	4613      	mov	r3, r2
 800a200:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a208:	2b20      	cmp	r3, #32
 800a20a:	d137      	bne.n	800a27c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d002      	beq.n	800a218 <HAL_UART_Receive_IT+0x24>
 800a212:	88fb      	ldrh	r3, [r7, #6]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d101      	bne.n	800a21c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a218:	2301      	movs	r3, #1
 800a21a:	e030      	b.n	800a27e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	2200      	movs	r2, #0
 800a220:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	4a18      	ldr	r2, [pc, #96]	@ (800a288 <HAL_UART_Receive_IT+0x94>)
 800a228:	4293      	cmp	r3, r2
 800a22a:	d01f      	beq.n	800a26c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	685b      	ldr	r3, [r3, #4]
 800a232:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a236:	2b00      	cmp	r3, #0
 800a238:	d018      	beq.n	800a26c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	e853 3f00 	ldrex	r3, [r3]
 800a246:	613b      	str	r3, [r7, #16]
   return(result);
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a24e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	461a      	mov	r2, r3
 800a256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a258:	623b      	str	r3, [r7, #32]
 800a25a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a25c:	69f9      	ldr	r1, [r7, #28]
 800a25e:	6a3a      	ldr	r2, [r7, #32]
 800a260:	e841 2300 	strex	r3, r2, [r1]
 800a264:	61bb      	str	r3, [r7, #24]
   return(result);
 800a266:	69bb      	ldr	r3, [r7, #24]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d1e6      	bne.n	800a23a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a26c:	88fb      	ldrh	r3, [r7, #6]
 800a26e:	461a      	mov	r2, r3
 800a270:	68b9      	ldr	r1, [r7, #8]
 800a272:	68f8      	ldr	r0, [r7, #12]
 800a274:	f001 f9f8 	bl	800b668 <UART_Start_Receive_IT>
 800a278:	4603      	mov	r3, r0
 800a27a:	e000      	b.n	800a27e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a27c:	2302      	movs	r3, #2
  }
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3728      	adds	r7, #40	@ 0x28
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}
 800a286:	bf00      	nop
 800a288:	40008000 	.word	0x40008000

0800a28c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b08a      	sub	sp, #40	@ 0x28
 800a290:	af00      	add	r7, sp, #0
 800a292:	60f8      	str	r0, [r7, #12]
 800a294:	60b9      	str	r1, [r7, #8]
 800a296:	4613      	mov	r3, r2
 800a298:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a2a0:	2b20      	cmp	r3, #32
 800a2a2:	d167      	bne.n	800a374 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d002      	beq.n	800a2b0 <HAL_UART_Transmit_DMA+0x24>
 800a2aa:	88fb      	ldrh	r3, [r7, #6]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d101      	bne.n	800a2b4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	e060      	b.n	800a376 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	68ba      	ldr	r2, [r7, #8]
 800a2b8:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	88fa      	ldrh	r2, [r7, #6]
 800a2be:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	88fa      	ldrh	r2, [r7, #6]
 800a2c6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	2221      	movs	r2, #33	@ 0x21
 800a2d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d028      	beq.n	800a334 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a2e6:	4a26      	ldr	r2, [pc, #152]	@ (800a380 <HAL_UART_Transmit_DMA+0xf4>)
 800a2e8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a2ee:	4a25      	ldr	r2, [pc, #148]	@ (800a384 <HAL_UART_Transmit_DMA+0xf8>)
 800a2f0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a2f6:	4a24      	ldr	r2, [pc, #144]	@ (800a388 <HAL_UART_Transmit_DMA+0xfc>)
 800a2f8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a2fe:	2200      	movs	r2, #0
 800a300:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a30a:	4619      	mov	r1, r3
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	3328      	adds	r3, #40	@ 0x28
 800a312:	461a      	mov	r2, r3
 800a314:	88fb      	ldrh	r3, [r7, #6]
 800a316:	f7fb fbd3 	bl	8005ac0 <HAL_DMA_Start_IT>
 800a31a:	4603      	mov	r3, r0
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d009      	beq.n	800a334 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	2210      	movs	r2, #16
 800a324:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	2220      	movs	r2, #32
 800a32c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800a330:	2301      	movs	r3, #1
 800a332:	e020      	b.n	800a376 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	2240      	movs	r2, #64	@ 0x40
 800a33a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	3308      	adds	r3, #8
 800a342:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a344:	697b      	ldr	r3, [r7, #20]
 800a346:	e853 3f00 	ldrex	r3, [r3]
 800a34a:	613b      	str	r3, [r7, #16]
   return(result);
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a352:	627b      	str	r3, [r7, #36]	@ 0x24
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	3308      	adds	r3, #8
 800a35a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a35c:	623a      	str	r2, [r7, #32]
 800a35e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a360:	69f9      	ldr	r1, [r7, #28]
 800a362:	6a3a      	ldr	r2, [r7, #32]
 800a364:	e841 2300 	strex	r3, r2, [r1]
 800a368:	61bb      	str	r3, [r7, #24]
   return(result);
 800a36a:	69bb      	ldr	r3, [r7, #24]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d1e5      	bne.n	800a33c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800a370:	2300      	movs	r3, #0
 800a372:	e000      	b.n	800a376 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800a374:	2302      	movs	r3, #2
  }
}
 800a376:	4618      	mov	r0, r3
 800a378:	3728      	adds	r7, #40	@ 0x28
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}
 800a37e:	bf00      	nop
 800a380:	0800b9fb 	.word	0x0800b9fb
 800a384:	0800ba99 	.word	0x0800ba99
 800a388:	0800bab9 	.word	0x0800bab9

0800a38c <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b09a      	sub	sp, #104	@ 0x68
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a39a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a39c:	e853 3f00 	ldrex	r3, [r3]
 800a3a0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a3a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a3a8:	667b      	str	r3, [r7, #100]	@ 0x64
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	461a      	mov	r2, r3
 800a3b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a3b2:	657b      	str	r3, [r7, #84]	@ 0x54
 800a3b4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3b6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a3b8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a3ba:	e841 2300 	strex	r3, r2, [r1]
 800a3be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a3c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d1e6      	bne.n	800a394 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	3308      	adds	r3, #8
 800a3cc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3d0:	e853 3f00 	ldrex	r3, [r3]
 800a3d4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a3d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a3dc:	f023 0301 	bic.w	r3, r3, #1
 800a3e0:	663b      	str	r3, [r7, #96]	@ 0x60
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	3308      	adds	r3, #8
 800a3e8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a3ea:	643a      	str	r2, [r7, #64]	@ 0x40
 800a3ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a3f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a3f2:	e841 2300 	strex	r3, r2, [r1]
 800a3f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a3f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d1e3      	bne.n	800a3c6 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a402:	2b01      	cmp	r3, #1
 800a404:	d118      	bne.n	800a438 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a40c:	6a3b      	ldr	r3, [r7, #32]
 800a40e:	e853 3f00 	ldrex	r3, [r3]
 800a412:	61fb      	str	r3, [r7, #28]
   return(result);
 800a414:	69fb      	ldr	r3, [r7, #28]
 800a416:	f023 0310 	bic.w	r3, r3, #16
 800a41a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	461a      	mov	r2, r3
 800a422:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a424:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a426:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a428:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a42a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a42c:	e841 2300 	strex	r3, r2, [r1]
 800a430:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a434:	2b00      	cmp	r3, #0
 800a436:	d1e6      	bne.n	800a406 <HAL_UART_AbortReceive+0x7a>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	689b      	ldr	r3, [r3, #8]
 800a43e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a442:	2b40      	cmp	r3, #64	@ 0x40
 800a444:	d13b      	bne.n	800a4be <HAL_UART_AbortReceive+0x132>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	3308      	adds	r3, #8
 800a44c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	e853 3f00 	ldrex	r3, [r3]
 800a454:	60bb      	str	r3, [r7, #8]
   return(result);
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a45c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	3308      	adds	r3, #8
 800a464:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a466:	61ba      	str	r2, [r7, #24]
 800a468:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a46a:	6979      	ldr	r1, [r7, #20]
 800a46c:	69ba      	ldr	r2, [r7, #24]
 800a46e:	e841 2300 	strex	r3, r2, [r1]
 800a472:	613b      	str	r3, [r7, #16]
   return(result);
 800a474:	693b      	ldr	r3, [r7, #16]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d1e5      	bne.n	800a446 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a480:	2b00      	cmp	r3, #0
 800a482:	d01c      	beq.n	800a4be <HAL_UART_AbortReceive+0x132>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a48a:	2200      	movs	r2, #0
 800a48c:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a494:	4618      	mov	r0, r3
 800a496:	f7fb fb8e 	bl	8005bb6 <HAL_DMA_Abort>
 800a49a:	4603      	mov	r3, r0
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d00e      	beq.n	800a4be <HAL_UART_AbortReceive+0x132>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f7fb fcf4 	bl	8005e94 <HAL_DMA_GetError>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	2b20      	cmp	r3, #32
 800a4b0:	d105      	bne.n	800a4be <HAL_UART_AbortReceive+0x132>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2210      	movs	r2, #16
 800a4b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800a4ba:	2303      	movs	r3, #3
 800a4bc:	e017      	b.n	800a4ee <HAL_UART_AbortReceive+0x162>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	220f      	movs	r2, #15
 800a4cc:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	699a      	ldr	r2, [r3, #24]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f042 0208 	orr.w	r2, r2, #8
 800a4dc:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2220      	movs	r2, #32
 800a4e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 800a4ec:	2300      	movs	r3, #0
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	3768      	adds	r7, #104	@ 0x68
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}
	...

0800a4f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b0ba      	sub	sp, #232	@ 0xe8
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	69db      	ldr	r3, [r3, #28]
 800a506:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	689b      	ldr	r3, [r3, #8]
 800a51a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a51e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a522:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a526:	4013      	ands	r3, r2
 800a528:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a52c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a530:	2b00      	cmp	r3, #0
 800a532:	d11b      	bne.n	800a56c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a534:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a538:	f003 0320 	and.w	r3, r3, #32
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d015      	beq.n	800a56c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a540:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a544:	f003 0320 	and.w	r3, r3, #32
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d105      	bne.n	800a558 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a54c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a550:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a554:	2b00      	cmp	r3, #0
 800a556:	d009      	beq.n	800a56c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	f000 8312 	beq.w	800ab86 <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	4798      	blx	r3
      }
      return;
 800a56a:	e30c      	b.n	800ab86 <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a56c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a570:	2b00      	cmp	r3, #0
 800a572:	f000 8129 	beq.w	800a7c8 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a576:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a57a:	4b90      	ldr	r3, [pc, #576]	@ (800a7bc <HAL_UART_IRQHandler+0x2c4>)
 800a57c:	4013      	ands	r3, r2
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d106      	bne.n	800a590 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a582:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a586:	4b8e      	ldr	r3, [pc, #568]	@ (800a7c0 <HAL_UART_IRQHandler+0x2c8>)
 800a588:	4013      	ands	r3, r2
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	f000 811c 	beq.w	800a7c8 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a594:	f003 0301 	and.w	r3, r3, #1
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d011      	beq.n	800a5c0 <HAL_UART_IRQHandler+0xc8>
 800a59c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d00b      	beq.n	800a5c0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	2201      	movs	r2, #1
 800a5ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a5b6:	f043 0201 	orr.w	r2, r3, #1
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a5c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5c4:	f003 0302 	and.w	r3, r3, #2
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d011      	beq.n	800a5f0 <HAL_UART_IRQHandler+0xf8>
 800a5cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a5d0:	f003 0301 	and.w	r3, r3, #1
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d00b      	beq.n	800a5f0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	2202      	movs	r2, #2
 800a5de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a5e6:	f043 0204 	orr.w	r2, r3, #4
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a5f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5f4:	f003 0304 	and.w	r3, r3, #4
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d011      	beq.n	800a620 <HAL_UART_IRQHandler+0x128>
 800a5fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a600:	f003 0301 	and.w	r3, r3, #1
 800a604:	2b00      	cmp	r3, #0
 800a606:	d00b      	beq.n	800a620 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	2204      	movs	r2, #4
 800a60e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a616:	f043 0202 	orr.w	r2, r3, #2
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a624:	f003 0308 	and.w	r3, r3, #8
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d017      	beq.n	800a65c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a62c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a630:	f003 0320 	and.w	r3, r3, #32
 800a634:	2b00      	cmp	r3, #0
 800a636:	d105      	bne.n	800a644 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a638:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a63c:	4b5f      	ldr	r3, [pc, #380]	@ (800a7bc <HAL_UART_IRQHandler+0x2c4>)
 800a63e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a640:	2b00      	cmp	r3, #0
 800a642:	d00b      	beq.n	800a65c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	2208      	movs	r2, #8
 800a64a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a652:	f043 0208 	orr.w	r2, r3, #8
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a65c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a660:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a664:	2b00      	cmp	r3, #0
 800a666:	d012      	beq.n	800a68e <HAL_UART_IRQHandler+0x196>
 800a668:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a66c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a670:	2b00      	cmp	r3, #0
 800a672:	d00c      	beq.n	800a68e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a67c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a684:	f043 0220 	orr.w	r2, r3, #32
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a694:	2b00      	cmp	r3, #0
 800a696:	f000 8278 	beq.w	800ab8a <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a69a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a69e:	f003 0320 	and.w	r3, r3, #32
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d013      	beq.n	800a6ce <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a6a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a6aa:	f003 0320 	and.w	r3, r3, #32
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d105      	bne.n	800a6be <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a6b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a6b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d007      	beq.n	800a6ce <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d003      	beq.n	800a6ce <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a6d4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	689b      	ldr	r3, [r3, #8]
 800a6de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6e2:	2b40      	cmp	r3, #64	@ 0x40
 800a6e4:	d005      	beq.n	800a6f2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a6e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a6ea:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d058      	beq.n	800a7a4 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f001 f91b 	bl	800b92e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	689b      	ldr	r3, [r3, #8]
 800a6fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a702:	2b40      	cmp	r3, #64	@ 0x40
 800a704:	d148      	bne.n	800a798 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	3308      	adds	r3, #8
 800a70c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a710:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a714:	e853 3f00 	ldrex	r3, [r3]
 800a718:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a71c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a720:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a724:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	3308      	adds	r3, #8
 800a72e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a732:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a736:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a73a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a73e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a742:	e841 2300 	strex	r3, r2, [r1]
 800a746:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a74a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d1d9      	bne.n	800a706 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d017      	beq.n	800a78c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a762:	4a18      	ldr	r2, [pc, #96]	@ (800a7c4 <HAL_UART_IRQHandler+0x2cc>)
 800a764:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a76c:	4618      	mov	r0, r3
 800a76e:	f7fb fa7b 	bl	8005c68 <HAL_DMA_Abort_IT>
 800a772:	4603      	mov	r3, r0
 800a774:	2b00      	cmp	r3, #0
 800a776:	d01f      	beq.n	800a7b8 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a77e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a780:	687a      	ldr	r2, [r7, #4]
 800a782:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a786:	4610      	mov	r0, r2
 800a788:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a78a:	e015      	b.n	800a7b8 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a796:	e00f      	b.n	800a7b8 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7a2:	e009      	b.n	800a7b8 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a7b6:	e1e8      	b.n	800ab8a <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7b8:	bf00      	nop
    return;
 800a7ba:	e1e6      	b.n	800ab8a <HAL_UART_IRQHandler+0x692>
 800a7bc:	10000001 	.word	0x10000001
 800a7c0:	04000120 	.word	0x04000120
 800a7c4:	0800bb3d 	.word	0x0800bb3d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a7cc:	2b01      	cmp	r3, #1
 800a7ce:	f040 8176 	bne.w	800aabe <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a7d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a7d6:	f003 0310 	and.w	r3, r3, #16
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	f000 816f 	beq.w	800aabe <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a7e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a7e4:	f003 0310 	and.w	r3, r3, #16
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	f000 8168 	beq.w	800aabe <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	2210      	movs	r2, #16
 800a7f4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	689b      	ldr	r3, [r3, #8]
 800a7fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a800:	2b40      	cmp	r3, #64	@ 0x40
 800a802:	f040 80dc 	bne.w	800a9be <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	685b      	ldr	r3, [r3, #4]
 800a810:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a814:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a818:	2b00      	cmp	r3, #0
 800a81a:	f000 80b1 	beq.w	800a980 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a824:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a828:	429a      	cmp	r2, r3
 800a82a:	f080 80a9 	bcs.w	800a980 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a834:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f003 0320 	and.w	r3, r3, #32
 800a846:	2b00      	cmp	r3, #0
 800a848:	f040 8087 	bne.w	800a95a <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a854:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a858:	e853 3f00 	ldrex	r3, [r3]
 800a85c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a860:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a864:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a868:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	461a      	mov	r2, r3
 800a872:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a876:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a87a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a87e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a882:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a886:	e841 2300 	strex	r3, r2, [r1]
 800a88a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a88e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a892:	2b00      	cmp	r3, #0
 800a894:	d1da      	bne.n	800a84c <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	3308      	adds	r3, #8
 800a89c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a89e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a8a0:	e853 3f00 	ldrex	r3, [r3]
 800a8a4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a8a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a8a8:	f023 0301 	bic.w	r3, r3, #1
 800a8ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	3308      	adds	r3, #8
 800a8b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a8ba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a8be:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8c0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a8c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a8c6:	e841 2300 	strex	r3, r2, [r1]
 800a8ca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a8cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d1e1      	bne.n	800a896 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	3308      	adds	r3, #8
 800a8d8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a8dc:	e853 3f00 	ldrex	r3, [r3]
 800a8e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a8e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a8e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a8e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	3308      	adds	r3, #8
 800a8f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a8f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a8f8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8fa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a8fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a8fe:	e841 2300 	strex	r3, r2, [r1]
 800a902:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a904:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a906:	2b00      	cmp	r3, #0
 800a908:	d1e3      	bne.n	800a8d2 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2220      	movs	r2, #32
 800a90e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2200      	movs	r2, #0
 800a916:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a91e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a920:	e853 3f00 	ldrex	r3, [r3]
 800a924:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a926:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a928:	f023 0310 	bic.w	r3, r3, #16
 800a92c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	461a      	mov	r2, r3
 800a936:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a93a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a93c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a93e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a940:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a942:	e841 2300 	strex	r3, r2, [r1]
 800a946:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a948:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d1e4      	bne.n	800a918 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a954:	4618      	mov	r0, r3
 800a956:	f7fb f92e 	bl	8005bb6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2202      	movs	r2, #2
 800a95e:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a966:	687a      	ldr	r2, [r7, #4]
 800a968:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800a96c:	687a      	ldr	r2, [r7, #4]
 800a96e:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800a972:	b292      	uxth	r2, r2
 800a974:	1a8a      	subs	r2, r1, r2
 800a976:	b292      	uxth	r2, r2
 800a978:	4611      	mov	r1, r2
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800a97e:	e106      	b.n	800ab8e <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a986:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a98a:	429a      	cmp	r2, r3
 800a98c:	f040 80ff 	bne.w	800ab8e <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f003 0320 	and.w	r3, r3, #32
 800a99e:	2b20      	cmp	r3, #32
 800a9a0:	f040 80f5 	bne.w	800ab8e <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2202      	movs	r2, #2
 800a9a8:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a9b0:	687a      	ldr	r2, [r7, #4]
 800a9b2:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800a9b6:	4611      	mov	r1, r2
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	4798      	blx	r3
      return;
 800a9bc:	e0e7      	b.n	800ab8e <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a9ca:	b29b      	uxth	r3, r3
 800a9cc:	1ad3      	subs	r3, r2, r3
 800a9ce:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a9d8:	b29b      	uxth	r3, r3
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	f000 80d9 	beq.w	800ab92 <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 800a9e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	f000 80d4 	beq.w	800ab92 <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9f2:	e853 3f00 	ldrex	r3, [r3]
 800a9f6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a9f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a9fe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	461a      	mov	r2, r3
 800aa08:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800aa0c:	647b      	str	r3, [r7, #68]	@ 0x44
 800aa0e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa10:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aa12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aa14:	e841 2300 	strex	r3, r2, [r1]
 800aa18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aa1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d1e4      	bne.n	800a9ea <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	3308      	adds	r3, #8
 800aa26:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa2a:	e853 3f00 	ldrex	r3, [r3]
 800aa2e:	623b      	str	r3, [r7, #32]
   return(result);
 800aa30:	6a3b      	ldr	r3, [r7, #32]
 800aa32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aa36:	f023 0301 	bic.w	r3, r3, #1
 800aa3a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	3308      	adds	r3, #8
 800aa44:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800aa48:	633a      	str	r2, [r7, #48]	@ 0x30
 800aa4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa4c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aa4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa50:	e841 2300 	strex	r3, r2, [r1]
 800aa54:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aa56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d1e1      	bne.n	800aa20 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2220      	movs	r2, #32
 800aa60:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2200      	movs	r2, #0
 800aa68:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	e853 3f00 	ldrex	r3, [r3]
 800aa7c:	60fb      	str	r3, [r7, #12]
   return(result);
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	f023 0310 	bic.w	r3, r3, #16
 800aa84:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	461a      	mov	r2, r3
 800aa8e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800aa92:	61fb      	str	r3, [r7, #28]
 800aa94:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa96:	69b9      	ldr	r1, [r7, #24]
 800aa98:	69fa      	ldr	r2, [r7, #28]
 800aa9a:	e841 2300 	strex	r3, r2, [r1]
 800aa9e:	617b      	str	r3, [r7, #20]
   return(result);
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d1e4      	bne.n	800aa70 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2202      	movs	r2, #2
 800aaaa:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800aab2:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800aab6:	4611      	mov	r1, r2
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800aabc:	e069      	b.n	800ab92 <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800aabe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aac2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d010      	beq.n	800aaec <HAL_UART_IRQHandler+0x5f4>
 800aaca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aace:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d00a      	beq.n	800aaec <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800aade:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aaea:	e055      	b.n	800ab98 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800aaec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aaf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d014      	beq.n	800ab22 <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800aaf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aafc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d105      	bne.n	800ab10 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ab04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ab08:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d008      	beq.n	800ab22 <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d03e      	beq.n	800ab96 <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	4798      	blx	r3
    }
    return;
 800ab20:	e039      	b.n	800ab96 <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ab22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d009      	beq.n	800ab42 <HAL_UART_IRQHandler+0x64a>
 800ab2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d003      	beq.n	800ab42 <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	f001 f812 	bl	800bb64 <UART_EndTransmit_IT>
    return;
 800ab40:	e02a      	b.n	800ab98 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ab42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d00b      	beq.n	800ab66 <HAL_UART_IRQHandler+0x66e>
 800ab4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab52:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d005      	beq.n	800ab66 <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ab64:	e018      	b.n	800ab98 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ab66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab6a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d012      	beq.n	800ab98 <HAL_UART_IRQHandler+0x6a0>
 800ab72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	da0e      	bge.n	800ab98 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ab84:	e008      	b.n	800ab98 <HAL_UART_IRQHandler+0x6a0>
      return;
 800ab86:	bf00      	nop
 800ab88:	e006      	b.n	800ab98 <HAL_UART_IRQHandler+0x6a0>
    return;
 800ab8a:	bf00      	nop
 800ab8c:	e004      	b.n	800ab98 <HAL_UART_IRQHandler+0x6a0>
      return;
 800ab8e:	bf00      	nop
 800ab90:	e002      	b.n	800ab98 <HAL_UART_IRQHandler+0x6a0>
      return;
 800ab92:	bf00      	nop
 800ab94:	e000      	b.n	800ab98 <HAL_UART_IRQHandler+0x6a0>
    return;
 800ab96:	bf00      	nop
  }
}
 800ab98:	37e8      	adds	r7, #232	@ 0xe8
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}
 800ab9e:	bf00      	nop

0800aba0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800aba0:	b480      	push	{r7}
 800aba2:	b083      	sub	sp, #12
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800aba8:	bf00      	nop
 800abaa:	370c      	adds	r7, #12
 800abac:	46bd      	mov	sp, r7
 800abae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb2:	4770      	bx	lr

0800abb4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800abb4:	b480      	push	{r7}
 800abb6:	b083      	sub	sp, #12
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800abbc:	bf00      	nop
 800abbe:	370c      	adds	r7, #12
 800abc0:	46bd      	mov	sp, r7
 800abc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc6:	4770      	bx	lr

0800abc8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800abc8:	b480      	push	{r7}
 800abca:	b083      	sub	sp, #12
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800abd0:	bf00      	nop
 800abd2:	370c      	adds	r7, #12
 800abd4:	46bd      	mov	sp, r7
 800abd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abda:	4770      	bx	lr

0800abdc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800abdc:	b480      	push	{r7}
 800abde:	b083      	sub	sp, #12
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800abe4:	bf00      	nop
 800abe6:	370c      	adds	r7, #12
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr

0800abf0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800abf0:	b480      	push	{r7}
 800abf2:	b083      	sub	sp, #12
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800abf8:	bf00      	nop
 800abfa:	370c      	adds	r7, #12
 800abfc:	46bd      	mov	sp, r7
 800abfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac02:	4770      	bx	lr

0800ac04 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800ac04:	b480      	push	{r7}
 800ac06:	b083      	sub	sp, #12
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800ac0c:	bf00      	nop
 800ac0e:	370c      	adds	r7, #12
 800ac10:	46bd      	mov	sp, r7
 800ac12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac16:	4770      	bx	lr

0800ac18 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800ac18:	b480      	push	{r7}
 800ac1a:	b083      	sub	sp, #12
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800ac20:	bf00      	nop
 800ac22:	370c      	adds	r7, #12
 800ac24:	46bd      	mov	sp, r7
 800ac26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2a:	4770      	bx	lr

0800ac2c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	b083      	sub	sp, #12
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800ac34:	bf00      	nop
 800ac36:	370c      	adds	r7, #12
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3e:	4770      	bx	lr

0800ac40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ac40:	b480      	push	{r7}
 800ac42:	b083      	sub	sp, #12
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
 800ac48:	460b      	mov	r3, r1
 800ac4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ac4c:	bf00      	nop
 800ac4e:	370c      	adds	r7, #12
 800ac50:	46bd      	mov	sp, r7
 800ac52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac56:	4770      	bx	lr

0800ac58 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b083      	sub	sp, #12
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	4a1a      	ldr	r2, [pc, #104]	@ (800accc <UART_InitCallbacksToDefault+0x74>)
 800ac64:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	4a19      	ldr	r2, [pc, #100]	@ (800acd0 <UART_InitCallbacksToDefault+0x78>)
 800ac6c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	4a18      	ldr	r2, [pc, #96]	@ (800acd4 <UART_InitCallbacksToDefault+0x7c>)
 800ac74:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	4a17      	ldr	r2, [pc, #92]	@ (800acd8 <UART_InitCallbacksToDefault+0x80>)
 800ac7c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	4a16      	ldr	r2, [pc, #88]	@ (800acdc <UART_InitCallbacksToDefault+0x84>)
 800ac84:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	4a15      	ldr	r2, [pc, #84]	@ (800ace0 <UART_InitCallbacksToDefault+0x88>)
 800ac8c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	4a14      	ldr	r2, [pc, #80]	@ (800ace4 <UART_InitCallbacksToDefault+0x8c>)
 800ac94:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	4a13      	ldr	r2, [pc, #76]	@ (800ace8 <UART_InitCallbacksToDefault+0x90>)
 800ac9c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	4a12      	ldr	r2, [pc, #72]	@ (800acec <UART_InitCallbacksToDefault+0x94>)
 800aca4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	4a11      	ldr	r2, [pc, #68]	@ (800acf0 <UART_InitCallbacksToDefault+0x98>)
 800acac:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	4a10      	ldr	r2, [pc, #64]	@ (800acf4 <UART_InitCallbacksToDefault+0x9c>)
 800acb4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	4a0f      	ldr	r2, [pc, #60]	@ (800acf8 <UART_InitCallbacksToDefault+0xa0>)
 800acbc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800acc0:	bf00      	nop
 800acc2:	370c      	adds	r7, #12
 800acc4:	46bd      	mov	sp, r7
 800acc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acca:	4770      	bx	lr
 800accc:	0800abb5 	.word	0x0800abb5
 800acd0:	0800aba1 	.word	0x0800aba1
 800acd4:	0800abdd 	.word	0x0800abdd
 800acd8:	0800abc9 	.word	0x0800abc9
 800acdc:	0800abf1 	.word	0x0800abf1
 800ace0:	0800ac05 	.word	0x0800ac05
 800ace4:	0800ac19 	.word	0x0800ac19
 800ace8:	0800ac2d 	.word	0x0800ac2d
 800acec:	0800c629 	.word	0x0800c629
 800acf0:	0800c63d 	.word	0x0800c63d
 800acf4:	0800c651 	.word	0x0800c651
 800acf8:	0800ac41 	.word	0x0800ac41

0800acfc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800acfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ad00:	b08c      	sub	sp, #48	@ 0x30
 800ad02:	af00      	add	r7, sp, #0
 800ad04:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ad06:	2300      	movs	r3, #0
 800ad08:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	689a      	ldr	r2, [r3, #8]
 800ad10:	697b      	ldr	r3, [r7, #20]
 800ad12:	691b      	ldr	r3, [r3, #16]
 800ad14:	431a      	orrs	r2, r3
 800ad16:	697b      	ldr	r3, [r7, #20]
 800ad18:	695b      	ldr	r3, [r3, #20]
 800ad1a:	431a      	orrs	r2, r3
 800ad1c:	697b      	ldr	r3, [r7, #20]
 800ad1e:	69db      	ldr	r3, [r3, #28]
 800ad20:	4313      	orrs	r3, r2
 800ad22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	681a      	ldr	r2, [r3, #0]
 800ad2a:	4baa      	ldr	r3, [pc, #680]	@ (800afd4 <UART_SetConfig+0x2d8>)
 800ad2c:	4013      	ands	r3, r2
 800ad2e:	697a      	ldr	r2, [r7, #20]
 800ad30:	6812      	ldr	r2, [r2, #0]
 800ad32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ad34:	430b      	orrs	r3, r1
 800ad36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ad38:	697b      	ldr	r3, [r7, #20]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	685b      	ldr	r3, [r3, #4]
 800ad3e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ad42:	697b      	ldr	r3, [r7, #20]
 800ad44:	68da      	ldr	r2, [r3, #12]
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	430a      	orrs	r2, r1
 800ad4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	699b      	ldr	r3, [r3, #24]
 800ad52:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ad54:	697b      	ldr	r3, [r7, #20]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	4a9f      	ldr	r2, [pc, #636]	@ (800afd8 <UART_SetConfig+0x2dc>)
 800ad5a:	4293      	cmp	r3, r2
 800ad5c:	d004      	beq.n	800ad68 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	6a1b      	ldr	r3, [r3, #32]
 800ad62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ad64:	4313      	orrs	r3, r2
 800ad66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ad68:	697b      	ldr	r3, [r7, #20]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	689b      	ldr	r3, [r3, #8]
 800ad6e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800ad72:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800ad76:	697a      	ldr	r2, [r7, #20]
 800ad78:	6812      	ldr	r2, [r2, #0]
 800ad7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ad7c:	430b      	orrs	r3, r1
 800ad7e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ad80:	697b      	ldr	r3, [r7, #20]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad86:	f023 010f 	bic.w	r1, r3, #15
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	430a      	orrs	r2, r1
 800ad94:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	4a90      	ldr	r2, [pc, #576]	@ (800afdc <UART_SetConfig+0x2e0>)
 800ad9c:	4293      	cmp	r3, r2
 800ad9e:	d125      	bne.n	800adec <UART_SetConfig+0xf0>
 800ada0:	4b8f      	ldr	r3, [pc, #572]	@ (800afe0 <UART_SetConfig+0x2e4>)
 800ada2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ada6:	f003 0303 	and.w	r3, r3, #3
 800adaa:	2b03      	cmp	r3, #3
 800adac:	d81a      	bhi.n	800ade4 <UART_SetConfig+0xe8>
 800adae:	a201      	add	r2, pc, #4	@ (adr r2, 800adb4 <UART_SetConfig+0xb8>)
 800adb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adb4:	0800adc5 	.word	0x0800adc5
 800adb8:	0800add5 	.word	0x0800add5
 800adbc:	0800adcd 	.word	0x0800adcd
 800adc0:	0800addd 	.word	0x0800addd
 800adc4:	2301      	movs	r3, #1
 800adc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800adca:	e116      	b.n	800affa <UART_SetConfig+0x2fe>
 800adcc:	2302      	movs	r3, #2
 800adce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800add2:	e112      	b.n	800affa <UART_SetConfig+0x2fe>
 800add4:	2304      	movs	r3, #4
 800add6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800adda:	e10e      	b.n	800affa <UART_SetConfig+0x2fe>
 800addc:	2308      	movs	r3, #8
 800adde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ade2:	e10a      	b.n	800affa <UART_SetConfig+0x2fe>
 800ade4:	2310      	movs	r3, #16
 800ade6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800adea:	e106      	b.n	800affa <UART_SetConfig+0x2fe>
 800adec:	697b      	ldr	r3, [r7, #20]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	4a7c      	ldr	r2, [pc, #496]	@ (800afe4 <UART_SetConfig+0x2e8>)
 800adf2:	4293      	cmp	r3, r2
 800adf4:	d138      	bne.n	800ae68 <UART_SetConfig+0x16c>
 800adf6:	4b7a      	ldr	r3, [pc, #488]	@ (800afe0 <UART_SetConfig+0x2e4>)
 800adf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800adfc:	f003 030c 	and.w	r3, r3, #12
 800ae00:	2b0c      	cmp	r3, #12
 800ae02:	d82d      	bhi.n	800ae60 <UART_SetConfig+0x164>
 800ae04:	a201      	add	r2, pc, #4	@ (adr r2, 800ae0c <UART_SetConfig+0x110>)
 800ae06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae0a:	bf00      	nop
 800ae0c:	0800ae41 	.word	0x0800ae41
 800ae10:	0800ae61 	.word	0x0800ae61
 800ae14:	0800ae61 	.word	0x0800ae61
 800ae18:	0800ae61 	.word	0x0800ae61
 800ae1c:	0800ae51 	.word	0x0800ae51
 800ae20:	0800ae61 	.word	0x0800ae61
 800ae24:	0800ae61 	.word	0x0800ae61
 800ae28:	0800ae61 	.word	0x0800ae61
 800ae2c:	0800ae49 	.word	0x0800ae49
 800ae30:	0800ae61 	.word	0x0800ae61
 800ae34:	0800ae61 	.word	0x0800ae61
 800ae38:	0800ae61 	.word	0x0800ae61
 800ae3c:	0800ae59 	.word	0x0800ae59
 800ae40:	2300      	movs	r3, #0
 800ae42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae46:	e0d8      	b.n	800affa <UART_SetConfig+0x2fe>
 800ae48:	2302      	movs	r3, #2
 800ae4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae4e:	e0d4      	b.n	800affa <UART_SetConfig+0x2fe>
 800ae50:	2304      	movs	r3, #4
 800ae52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae56:	e0d0      	b.n	800affa <UART_SetConfig+0x2fe>
 800ae58:	2308      	movs	r3, #8
 800ae5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae5e:	e0cc      	b.n	800affa <UART_SetConfig+0x2fe>
 800ae60:	2310      	movs	r3, #16
 800ae62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae66:	e0c8      	b.n	800affa <UART_SetConfig+0x2fe>
 800ae68:	697b      	ldr	r3, [r7, #20]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	4a5e      	ldr	r2, [pc, #376]	@ (800afe8 <UART_SetConfig+0x2ec>)
 800ae6e:	4293      	cmp	r3, r2
 800ae70:	d125      	bne.n	800aebe <UART_SetConfig+0x1c2>
 800ae72:	4b5b      	ldr	r3, [pc, #364]	@ (800afe0 <UART_SetConfig+0x2e4>)
 800ae74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae78:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ae7c:	2b30      	cmp	r3, #48	@ 0x30
 800ae7e:	d016      	beq.n	800aeae <UART_SetConfig+0x1b2>
 800ae80:	2b30      	cmp	r3, #48	@ 0x30
 800ae82:	d818      	bhi.n	800aeb6 <UART_SetConfig+0x1ba>
 800ae84:	2b20      	cmp	r3, #32
 800ae86:	d00a      	beq.n	800ae9e <UART_SetConfig+0x1a2>
 800ae88:	2b20      	cmp	r3, #32
 800ae8a:	d814      	bhi.n	800aeb6 <UART_SetConfig+0x1ba>
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d002      	beq.n	800ae96 <UART_SetConfig+0x19a>
 800ae90:	2b10      	cmp	r3, #16
 800ae92:	d008      	beq.n	800aea6 <UART_SetConfig+0x1aa>
 800ae94:	e00f      	b.n	800aeb6 <UART_SetConfig+0x1ba>
 800ae96:	2300      	movs	r3, #0
 800ae98:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae9c:	e0ad      	b.n	800affa <UART_SetConfig+0x2fe>
 800ae9e:	2302      	movs	r3, #2
 800aea0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aea4:	e0a9      	b.n	800affa <UART_SetConfig+0x2fe>
 800aea6:	2304      	movs	r3, #4
 800aea8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aeac:	e0a5      	b.n	800affa <UART_SetConfig+0x2fe>
 800aeae:	2308      	movs	r3, #8
 800aeb0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aeb4:	e0a1      	b.n	800affa <UART_SetConfig+0x2fe>
 800aeb6:	2310      	movs	r3, #16
 800aeb8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aebc:	e09d      	b.n	800affa <UART_SetConfig+0x2fe>
 800aebe:	697b      	ldr	r3, [r7, #20]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	4a4a      	ldr	r2, [pc, #296]	@ (800afec <UART_SetConfig+0x2f0>)
 800aec4:	4293      	cmp	r3, r2
 800aec6:	d125      	bne.n	800af14 <UART_SetConfig+0x218>
 800aec8:	4b45      	ldr	r3, [pc, #276]	@ (800afe0 <UART_SetConfig+0x2e4>)
 800aeca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aece:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800aed2:	2bc0      	cmp	r3, #192	@ 0xc0
 800aed4:	d016      	beq.n	800af04 <UART_SetConfig+0x208>
 800aed6:	2bc0      	cmp	r3, #192	@ 0xc0
 800aed8:	d818      	bhi.n	800af0c <UART_SetConfig+0x210>
 800aeda:	2b80      	cmp	r3, #128	@ 0x80
 800aedc:	d00a      	beq.n	800aef4 <UART_SetConfig+0x1f8>
 800aede:	2b80      	cmp	r3, #128	@ 0x80
 800aee0:	d814      	bhi.n	800af0c <UART_SetConfig+0x210>
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d002      	beq.n	800aeec <UART_SetConfig+0x1f0>
 800aee6:	2b40      	cmp	r3, #64	@ 0x40
 800aee8:	d008      	beq.n	800aefc <UART_SetConfig+0x200>
 800aeea:	e00f      	b.n	800af0c <UART_SetConfig+0x210>
 800aeec:	2300      	movs	r3, #0
 800aeee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aef2:	e082      	b.n	800affa <UART_SetConfig+0x2fe>
 800aef4:	2302      	movs	r3, #2
 800aef6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aefa:	e07e      	b.n	800affa <UART_SetConfig+0x2fe>
 800aefc:	2304      	movs	r3, #4
 800aefe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af02:	e07a      	b.n	800affa <UART_SetConfig+0x2fe>
 800af04:	2308      	movs	r3, #8
 800af06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af0a:	e076      	b.n	800affa <UART_SetConfig+0x2fe>
 800af0c:	2310      	movs	r3, #16
 800af0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af12:	e072      	b.n	800affa <UART_SetConfig+0x2fe>
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	4a35      	ldr	r2, [pc, #212]	@ (800aff0 <UART_SetConfig+0x2f4>)
 800af1a:	4293      	cmp	r3, r2
 800af1c:	d12a      	bne.n	800af74 <UART_SetConfig+0x278>
 800af1e:	4b30      	ldr	r3, [pc, #192]	@ (800afe0 <UART_SetConfig+0x2e4>)
 800af20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af24:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800af28:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800af2c:	d01a      	beq.n	800af64 <UART_SetConfig+0x268>
 800af2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800af32:	d81b      	bhi.n	800af6c <UART_SetConfig+0x270>
 800af34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800af38:	d00c      	beq.n	800af54 <UART_SetConfig+0x258>
 800af3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800af3e:	d815      	bhi.n	800af6c <UART_SetConfig+0x270>
 800af40:	2b00      	cmp	r3, #0
 800af42:	d003      	beq.n	800af4c <UART_SetConfig+0x250>
 800af44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800af48:	d008      	beq.n	800af5c <UART_SetConfig+0x260>
 800af4a:	e00f      	b.n	800af6c <UART_SetConfig+0x270>
 800af4c:	2300      	movs	r3, #0
 800af4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af52:	e052      	b.n	800affa <UART_SetConfig+0x2fe>
 800af54:	2302      	movs	r3, #2
 800af56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af5a:	e04e      	b.n	800affa <UART_SetConfig+0x2fe>
 800af5c:	2304      	movs	r3, #4
 800af5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af62:	e04a      	b.n	800affa <UART_SetConfig+0x2fe>
 800af64:	2308      	movs	r3, #8
 800af66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af6a:	e046      	b.n	800affa <UART_SetConfig+0x2fe>
 800af6c:	2310      	movs	r3, #16
 800af6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af72:	e042      	b.n	800affa <UART_SetConfig+0x2fe>
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	4a17      	ldr	r2, [pc, #92]	@ (800afd8 <UART_SetConfig+0x2dc>)
 800af7a:	4293      	cmp	r3, r2
 800af7c:	d13a      	bne.n	800aff4 <UART_SetConfig+0x2f8>
 800af7e:	4b18      	ldr	r3, [pc, #96]	@ (800afe0 <UART_SetConfig+0x2e4>)
 800af80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af84:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800af88:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800af8c:	d01a      	beq.n	800afc4 <UART_SetConfig+0x2c8>
 800af8e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800af92:	d81b      	bhi.n	800afcc <UART_SetConfig+0x2d0>
 800af94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800af98:	d00c      	beq.n	800afb4 <UART_SetConfig+0x2b8>
 800af9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800af9e:	d815      	bhi.n	800afcc <UART_SetConfig+0x2d0>
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d003      	beq.n	800afac <UART_SetConfig+0x2b0>
 800afa4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800afa8:	d008      	beq.n	800afbc <UART_SetConfig+0x2c0>
 800afaa:	e00f      	b.n	800afcc <UART_SetConfig+0x2d0>
 800afac:	2300      	movs	r3, #0
 800afae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afb2:	e022      	b.n	800affa <UART_SetConfig+0x2fe>
 800afb4:	2302      	movs	r3, #2
 800afb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afba:	e01e      	b.n	800affa <UART_SetConfig+0x2fe>
 800afbc:	2304      	movs	r3, #4
 800afbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afc2:	e01a      	b.n	800affa <UART_SetConfig+0x2fe>
 800afc4:	2308      	movs	r3, #8
 800afc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afca:	e016      	b.n	800affa <UART_SetConfig+0x2fe>
 800afcc:	2310      	movs	r3, #16
 800afce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afd2:	e012      	b.n	800affa <UART_SetConfig+0x2fe>
 800afd4:	cfff69f3 	.word	0xcfff69f3
 800afd8:	40008000 	.word	0x40008000
 800afdc:	40013800 	.word	0x40013800
 800afe0:	40021000 	.word	0x40021000
 800afe4:	40004400 	.word	0x40004400
 800afe8:	40004800 	.word	0x40004800
 800afec:	40004c00 	.word	0x40004c00
 800aff0:	40005000 	.word	0x40005000
 800aff4:	2310      	movs	r3, #16
 800aff6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	4aae      	ldr	r2, [pc, #696]	@ (800b2b8 <UART_SetConfig+0x5bc>)
 800b000:	4293      	cmp	r3, r2
 800b002:	f040 8097 	bne.w	800b134 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b006:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b00a:	2b08      	cmp	r3, #8
 800b00c:	d823      	bhi.n	800b056 <UART_SetConfig+0x35a>
 800b00e:	a201      	add	r2, pc, #4	@ (adr r2, 800b014 <UART_SetConfig+0x318>)
 800b010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b014:	0800b039 	.word	0x0800b039
 800b018:	0800b057 	.word	0x0800b057
 800b01c:	0800b041 	.word	0x0800b041
 800b020:	0800b057 	.word	0x0800b057
 800b024:	0800b047 	.word	0x0800b047
 800b028:	0800b057 	.word	0x0800b057
 800b02c:	0800b057 	.word	0x0800b057
 800b030:	0800b057 	.word	0x0800b057
 800b034:	0800b04f 	.word	0x0800b04f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b038:	f7fb fefa 	bl	8006e30 <HAL_RCC_GetPCLK1Freq>
 800b03c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b03e:	e010      	b.n	800b062 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b040:	4b9e      	ldr	r3, [pc, #632]	@ (800b2bc <UART_SetConfig+0x5c0>)
 800b042:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b044:	e00d      	b.n	800b062 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b046:	f7fb fe85 	bl	8006d54 <HAL_RCC_GetSysClockFreq>
 800b04a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b04c:	e009      	b.n	800b062 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b04e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b052:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b054:	e005      	b.n	800b062 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800b056:	2300      	movs	r3, #0
 800b058:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b05a:	2301      	movs	r3, #1
 800b05c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b060:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b064:	2b00      	cmp	r3, #0
 800b066:	f000 8130 	beq.w	800b2ca <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b06e:	4a94      	ldr	r2, [pc, #592]	@ (800b2c0 <UART_SetConfig+0x5c4>)
 800b070:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b074:	461a      	mov	r2, r3
 800b076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b078:	fbb3 f3f2 	udiv	r3, r3, r2
 800b07c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	685a      	ldr	r2, [r3, #4]
 800b082:	4613      	mov	r3, r2
 800b084:	005b      	lsls	r3, r3, #1
 800b086:	4413      	add	r3, r2
 800b088:	69ba      	ldr	r2, [r7, #24]
 800b08a:	429a      	cmp	r2, r3
 800b08c:	d305      	bcc.n	800b09a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	685b      	ldr	r3, [r3, #4]
 800b092:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b094:	69ba      	ldr	r2, [r7, #24]
 800b096:	429a      	cmp	r2, r3
 800b098:	d903      	bls.n	800b0a2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800b09a:	2301      	movs	r3, #1
 800b09c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b0a0:	e113      	b.n	800b2ca <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b0a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	60bb      	str	r3, [r7, #8]
 800b0a8:	60fa      	str	r2, [r7, #12]
 800b0aa:	697b      	ldr	r3, [r7, #20]
 800b0ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0ae:	4a84      	ldr	r2, [pc, #528]	@ (800b2c0 <UART_SetConfig+0x5c4>)
 800b0b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b0b4:	b29b      	uxth	r3, r3
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	603b      	str	r3, [r7, #0]
 800b0ba:	607a      	str	r2, [r7, #4]
 800b0bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0c0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b0c4:	f7f5 faec 	bl	80006a0 <__aeabi_uldivmod>
 800b0c8:	4602      	mov	r2, r0
 800b0ca:	460b      	mov	r3, r1
 800b0cc:	4610      	mov	r0, r2
 800b0ce:	4619      	mov	r1, r3
 800b0d0:	f04f 0200 	mov.w	r2, #0
 800b0d4:	f04f 0300 	mov.w	r3, #0
 800b0d8:	020b      	lsls	r3, r1, #8
 800b0da:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b0de:	0202      	lsls	r2, r0, #8
 800b0e0:	6979      	ldr	r1, [r7, #20]
 800b0e2:	6849      	ldr	r1, [r1, #4]
 800b0e4:	0849      	lsrs	r1, r1, #1
 800b0e6:	2000      	movs	r0, #0
 800b0e8:	460c      	mov	r4, r1
 800b0ea:	4605      	mov	r5, r0
 800b0ec:	eb12 0804 	adds.w	r8, r2, r4
 800b0f0:	eb43 0905 	adc.w	r9, r3, r5
 800b0f4:	697b      	ldr	r3, [r7, #20]
 800b0f6:	685b      	ldr	r3, [r3, #4]
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	469a      	mov	sl, r3
 800b0fc:	4693      	mov	fp, r2
 800b0fe:	4652      	mov	r2, sl
 800b100:	465b      	mov	r3, fp
 800b102:	4640      	mov	r0, r8
 800b104:	4649      	mov	r1, r9
 800b106:	f7f5 facb 	bl	80006a0 <__aeabi_uldivmod>
 800b10a:	4602      	mov	r2, r0
 800b10c:	460b      	mov	r3, r1
 800b10e:	4613      	mov	r3, r2
 800b110:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b112:	6a3b      	ldr	r3, [r7, #32]
 800b114:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b118:	d308      	bcc.n	800b12c <UART_SetConfig+0x430>
 800b11a:	6a3b      	ldr	r3, [r7, #32]
 800b11c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b120:	d204      	bcs.n	800b12c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800b122:	697b      	ldr	r3, [r7, #20]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	6a3a      	ldr	r2, [r7, #32]
 800b128:	60da      	str	r2, [r3, #12]
 800b12a:	e0ce      	b.n	800b2ca <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800b12c:	2301      	movs	r3, #1
 800b12e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b132:	e0ca      	b.n	800b2ca <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b134:	697b      	ldr	r3, [r7, #20]
 800b136:	69db      	ldr	r3, [r3, #28]
 800b138:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b13c:	d166      	bne.n	800b20c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800b13e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b142:	2b08      	cmp	r3, #8
 800b144:	d827      	bhi.n	800b196 <UART_SetConfig+0x49a>
 800b146:	a201      	add	r2, pc, #4	@ (adr r2, 800b14c <UART_SetConfig+0x450>)
 800b148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b14c:	0800b171 	.word	0x0800b171
 800b150:	0800b179 	.word	0x0800b179
 800b154:	0800b181 	.word	0x0800b181
 800b158:	0800b197 	.word	0x0800b197
 800b15c:	0800b187 	.word	0x0800b187
 800b160:	0800b197 	.word	0x0800b197
 800b164:	0800b197 	.word	0x0800b197
 800b168:	0800b197 	.word	0x0800b197
 800b16c:	0800b18f 	.word	0x0800b18f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b170:	f7fb fe5e 	bl	8006e30 <HAL_RCC_GetPCLK1Freq>
 800b174:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b176:	e014      	b.n	800b1a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b178:	f7fb fe70 	bl	8006e5c <HAL_RCC_GetPCLK2Freq>
 800b17c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b17e:	e010      	b.n	800b1a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b180:	4b4e      	ldr	r3, [pc, #312]	@ (800b2bc <UART_SetConfig+0x5c0>)
 800b182:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b184:	e00d      	b.n	800b1a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b186:	f7fb fde5 	bl	8006d54 <HAL_RCC_GetSysClockFreq>
 800b18a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b18c:	e009      	b.n	800b1a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b18e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b192:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b194:	e005      	b.n	800b1a2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800b196:	2300      	movs	r3, #0
 800b198:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b19a:	2301      	movs	r3, #1
 800b19c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b1a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b1a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	f000 8090 	beq.w	800b2ca <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b1aa:	697b      	ldr	r3, [r7, #20]
 800b1ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1ae:	4a44      	ldr	r2, [pc, #272]	@ (800b2c0 <UART_SetConfig+0x5c4>)
 800b1b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b1b4:	461a      	mov	r2, r3
 800b1b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1b8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b1bc:	005a      	lsls	r2, r3, #1
 800b1be:	697b      	ldr	r3, [r7, #20]
 800b1c0:	685b      	ldr	r3, [r3, #4]
 800b1c2:	085b      	lsrs	r3, r3, #1
 800b1c4:	441a      	add	r2, r3
 800b1c6:	697b      	ldr	r3, [r7, #20]
 800b1c8:	685b      	ldr	r3, [r3, #4]
 800b1ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1ce:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b1d0:	6a3b      	ldr	r3, [r7, #32]
 800b1d2:	2b0f      	cmp	r3, #15
 800b1d4:	d916      	bls.n	800b204 <UART_SetConfig+0x508>
 800b1d6:	6a3b      	ldr	r3, [r7, #32]
 800b1d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b1dc:	d212      	bcs.n	800b204 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b1de:	6a3b      	ldr	r3, [r7, #32]
 800b1e0:	b29b      	uxth	r3, r3
 800b1e2:	f023 030f 	bic.w	r3, r3, #15
 800b1e6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b1e8:	6a3b      	ldr	r3, [r7, #32]
 800b1ea:	085b      	lsrs	r3, r3, #1
 800b1ec:	b29b      	uxth	r3, r3
 800b1ee:	f003 0307 	and.w	r3, r3, #7
 800b1f2:	b29a      	uxth	r2, r3
 800b1f4:	8bfb      	ldrh	r3, [r7, #30]
 800b1f6:	4313      	orrs	r3, r2
 800b1f8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b1fa:	697b      	ldr	r3, [r7, #20]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	8bfa      	ldrh	r2, [r7, #30]
 800b200:	60da      	str	r2, [r3, #12]
 800b202:	e062      	b.n	800b2ca <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800b204:	2301      	movs	r3, #1
 800b206:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b20a:	e05e      	b.n	800b2ca <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b20c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b210:	2b08      	cmp	r3, #8
 800b212:	d828      	bhi.n	800b266 <UART_SetConfig+0x56a>
 800b214:	a201      	add	r2, pc, #4	@ (adr r2, 800b21c <UART_SetConfig+0x520>)
 800b216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b21a:	bf00      	nop
 800b21c:	0800b241 	.word	0x0800b241
 800b220:	0800b249 	.word	0x0800b249
 800b224:	0800b251 	.word	0x0800b251
 800b228:	0800b267 	.word	0x0800b267
 800b22c:	0800b257 	.word	0x0800b257
 800b230:	0800b267 	.word	0x0800b267
 800b234:	0800b267 	.word	0x0800b267
 800b238:	0800b267 	.word	0x0800b267
 800b23c:	0800b25f 	.word	0x0800b25f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b240:	f7fb fdf6 	bl	8006e30 <HAL_RCC_GetPCLK1Freq>
 800b244:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b246:	e014      	b.n	800b272 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b248:	f7fb fe08 	bl	8006e5c <HAL_RCC_GetPCLK2Freq>
 800b24c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b24e:	e010      	b.n	800b272 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b250:	4b1a      	ldr	r3, [pc, #104]	@ (800b2bc <UART_SetConfig+0x5c0>)
 800b252:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b254:	e00d      	b.n	800b272 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b256:	f7fb fd7d 	bl	8006d54 <HAL_RCC_GetSysClockFreq>
 800b25a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b25c:	e009      	b.n	800b272 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b25e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b262:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b264:	e005      	b.n	800b272 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800b266:	2300      	movs	r3, #0
 800b268:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b26a:	2301      	movs	r3, #1
 800b26c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b270:	bf00      	nop
    }

    if (pclk != 0U)
 800b272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b274:	2b00      	cmp	r3, #0
 800b276:	d028      	beq.n	800b2ca <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b278:	697b      	ldr	r3, [r7, #20]
 800b27a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b27c:	4a10      	ldr	r2, [pc, #64]	@ (800b2c0 <UART_SetConfig+0x5c4>)
 800b27e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b282:	461a      	mov	r2, r3
 800b284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b286:	fbb3 f2f2 	udiv	r2, r3, r2
 800b28a:	697b      	ldr	r3, [r7, #20]
 800b28c:	685b      	ldr	r3, [r3, #4]
 800b28e:	085b      	lsrs	r3, r3, #1
 800b290:	441a      	add	r2, r3
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	685b      	ldr	r3, [r3, #4]
 800b296:	fbb2 f3f3 	udiv	r3, r2, r3
 800b29a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b29c:	6a3b      	ldr	r3, [r7, #32]
 800b29e:	2b0f      	cmp	r3, #15
 800b2a0:	d910      	bls.n	800b2c4 <UART_SetConfig+0x5c8>
 800b2a2:	6a3b      	ldr	r3, [r7, #32]
 800b2a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b2a8:	d20c      	bcs.n	800b2c4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b2aa:	6a3b      	ldr	r3, [r7, #32]
 800b2ac:	b29a      	uxth	r2, r3
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	60da      	str	r2, [r3, #12]
 800b2b4:	e009      	b.n	800b2ca <UART_SetConfig+0x5ce>
 800b2b6:	bf00      	nop
 800b2b8:	40008000 	.word	0x40008000
 800b2bc:	00f42400 	.word	0x00f42400
 800b2c0:	0800d34c 	.word	0x0800d34c
      }
      else
      {
        ret = HAL_ERROR;
 800b2c4:	2301      	movs	r3, #1
 800b2c6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b2ca:	697b      	ldr	r3, [r7, #20]
 800b2cc:	2201      	movs	r2, #1
 800b2ce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	2201      	movs	r2, #1
 800b2d6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b2da:	697b      	ldr	r3, [r7, #20]
 800b2dc:	2200      	movs	r2, #0
 800b2de:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b2e0:	697b      	ldr	r3, [r7, #20]
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b2e6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	3730      	adds	r7, #48	@ 0x30
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b2f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	b083      	sub	sp, #12
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b300:	f003 0308 	and.w	r3, r3, #8
 800b304:	2b00      	cmp	r3, #0
 800b306:	d00a      	beq.n	800b31e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	685b      	ldr	r3, [r3, #4]
 800b30e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	430a      	orrs	r2, r1
 800b31c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b322:	f003 0301 	and.w	r3, r3, #1
 800b326:	2b00      	cmp	r3, #0
 800b328:	d00a      	beq.n	800b340 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	685b      	ldr	r3, [r3, #4]
 800b330:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	430a      	orrs	r2, r1
 800b33e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b344:	f003 0302 	and.w	r3, r3, #2
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d00a      	beq.n	800b362 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	685b      	ldr	r3, [r3, #4]
 800b352:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	430a      	orrs	r2, r1
 800b360:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b366:	f003 0304 	and.w	r3, r3, #4
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d00a      	beq.n	800b384 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	685b      	ldr	r3, [r3, #4]
 800b374:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	430a      	orrs	r2, r1
 800b382:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b388:	f003 0310 	and.w	r3, r3, #16
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d00a      	beq.n	800b3a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	689b      	ldr	r3, [r3, #8]
 800b396:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	430a      	orrs	r2, r1
 800b3a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3aa:	f003 0320 	and.w	r3, r3, #32
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d00a      	beq.n	800b3c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	689b      	ldr	r3, [r3, #8]
 800b3b8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	430a      	orrs	r2, r1
 800b3c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d01a      	beq.n	800b40a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	685b      	ldr	r3, [r3, #4]
 800b3da:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	430a      	orrs	r2, r1
 800b3e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b3ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b3f2:	d10a      	bne.n	800b40a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	685b      	ldr	r3, [r3, #4]
 800b3fa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	430a      	orrs	r2, r1
 800b408:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b40e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b412:	2b00      	cmp	r3, #0
 800b414:	d00a      	beq.n	800b42c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	685b      	ldr	r3, [r3, #4]
 800b41c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	430a      	orrs	r2, r1
 800b42a:	605a      	str	r2, [r3, #4]
  }
}
 800b42c:	bf00      	nop
 800b42e:	370c      	adds	r7, #12
 800b430:	46bd      	mov	sp, r7
 800b432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b436:	4770      	bx	lr

0800b438 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b098      	sub	sp, #96	@ 0x60
 800b43c:	af02      	add	r7, sp, #8
 800b43e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2200      	movs	r2, #0
 800b444:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b448:	f7f8 feb8 	bl	80041bc <HAL_GetTick>
 800b44c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	f003 0308 	and.w	r3, r3, #8
 800b458:	2b08      	cmp	r3, #8
 800b45a:	d12f      	bne.n	800b4bc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b45c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b460:	9300      	str	r3, [sp, #0]
 800b462:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b464:	2200      	movs	r2, #0
 800b466:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f000 f88e 	bl	800b58c <UART_WaitOnFlagUntilTimeout>
 800b470:	4603      	mov	r3, r0
 800b472:	2b00      	cmp	r3, #0
 800b474:	d022      	beq.n	800b4bc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b47c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b47e:	e853 3f00 	ldrex	r3, [r3]
 800b482:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b484:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b486:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b48a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	461a      	mov	r2, r3
 800b492:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b494:	647b      	str	r3, [r7, #68]	@ 0x44
 800b496:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b498:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b49a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b49c:	e841 2300 	strex	r3, r2, [r1]
 800b4a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b4a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d1e6      	bne.n	800b476 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2220      	movs	r2, #32
 800b4ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b4b8:	2303      	movs	r3, #3
 800b4ba:	e063      	b.n	800b584 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	f003 0304 	and.w	r3, r3, #4
 800b4c6:	2b04      	cmp	r3, #4
 800b4c8:	d149      	bne.n	800b55e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b4ca:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b4ce:	9300      	str	r3, [sp, #0]
 800b4d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b4d8:	6878      	ldr	r0, [r7, #4]
 800b4da:	f000 f857 	bl	800b58c <UART_WaitOnFlagUntilTimeout>
 800b4de:	4603      	mov	r3, r0
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d03c      	beq.n	800b55e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4ec:	e853 3f00 	ldrex	r3, [r3]
 800b4f0:	623b      	str	r3, [r7, #32]
   return(result);
 800b4f2:	6a3b      	ldr	r3, [r7, #32]
 800b4f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b4f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	461a      	mov	r2, r3
 800b500:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b502:	633b      	str	r3, [r7, #48]	@ 0x30
 800b504:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b506:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b508:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b50a:	e841 2300 	strex	r3, r2, [r1]
 800b50e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b512:	2b00      	cmp	r3, #0
 800b514:	d1e6      	bne.n	800b4e4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	3308      	adds	r3, #8
 800b51c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b51e:	693b      	ldr	r3, [r7, #16]
 800b520:	e853 3f00 	ldrex	r3, [r3]
 800b524:	60fb      	str	r3, [r7, #12]
   return(result);
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	f023 0301 	bic.w	r3, r3, #1
 800b52c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	3308      	adds	r3, #8
 800b534:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b536:	61fa      	str	r2, [r7, #28]
 800b538:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b53a:	69b9      	ldr	r1, [r7, #24]
 800b53c:	69fa      	ldr	r2, [r7, #28]
 800b53e:	e841 2300 	strex	r3, r2, [r1]
 800b542:	617b      	str	r3, [r7, #20]
   return(result);
 800b544:	697b      	ldr	r3, [r7, #20]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d1e5      	bne.n	800b516 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	2220      	movs	r2, #32
 800b54e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2200      	movs	r2, #0
 800b556:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b55a:	2303      	movs	r3, #3
 800b55c:	e012      	b.n	800b584 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2220      	movs	r2, #32
 800b562:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2220      	movs	r2, #32
 800b56a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2200      	movs	r2, #0
 800b572:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2200      	movs	r2, #0
 800b578:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2200      	movs	r2, #0
 800b57e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b582:	2300      	movs	r3, #0
}
 800b584:	4618      	mov	r0, r3
 800b586:	3758      	adds	r7, #88	@ 0x58
 800b588:	46bd      	mov	sp, r7
 800b58a:	bd80      	pop	{r7, pc}

0800b58c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b084      	sub	sp, #16
 800b590:	af00      	add	r7, sp, #0
 800b592:	60f8      	str	r0, [r7, #12]
 800b594:	60b9      	str	r1, [r7, #8]
 800b596:	603b      	str	r3, [r7, #0]
 800b598:	4613      	mov	r3, r2
 800b59a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b59c:	e04f      	b.n	800b63e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b59e:	69bb      	ldr	r3, [r7, #24]
 800b5a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5a4:	d04b      	beq.n	800b63e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b5a6:	f7f8 fe09 	bl	80041bc <HAL_GetTick>
 800b5aa:	4602      	mov	r2, r0
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	1ad3      	subs	r3, r2, r3
 800b5b0:	69ba      	ldr	r2, [r7, #24]
 800b5b2:	429a      	cmp	r2, r3
 800b5b4:	d302      	bcc.n	800b5bc <UART_WaitOnFlagUntilTimeout+0x30>
 800b5b6:	69bb      	ldr	r3, [r7, #24]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d101      	bne.n	800b5c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b5bc:	2303      	movs	r3, #3
 800b5be:	e04e      	b.n	800b65e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	f003 0304 	and.w	r3, r3, #4
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d037      	beq.n	800b63e <UART_WaitOnFlagUntilTimeout+0xb2>
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	2b80      	cmp	r3, #128	@ 0x80
 800b5d2:	d034      	beq.n	800b63e <UART_WaitOnFlagUntilTimeout+0xb2>
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	2b40      	cmp	r3, #64	@ 0x40
 800b5d8:	d031      	beq.n	800b63e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	69db      	ldr	r3, [r3, #28]
 800b5e0:	f003 0308 	and.w	r3, r3, #8
 800b5e4:	2b08      	cmp	r3, #8
 800b5e6:	d110      	bne.n	800b60a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	2208      	movs	r2, #8
 800b5ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b5f0:	68f8      	ldr	r0, [r7, #12]
 800b5f2:	f000 f99c 	bl	800b92e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	2208      	movs	r2, #8
 800b5fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	2200      	movs	r2, #0
 800b602:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b606:	2301      	movs	r3, #1
 800b608:	e029      	b.n	800b65e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	69db      	ldr	r3, [r3, #28]
 800b610:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b614:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b618:	d111      	bne.n	800b63e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b622:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b624:	68f8      	ldr	r0, [r7, #12]
 800b626:	f000 f982 	bl	800b92e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	2220      	movs	r2, #32
 800b62e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	2200      	movs	r2, #0
 800b636:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b63a:	2303      	movs	r3, #3
 800b63c:	e00f      	b.n	800b65e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	69da      	ldr	r2, [r3, #28]
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	4013      	ands	r3, r2
 800b648:	68ba      	ldr	r2, [r7, #8]
 800b64a:	429a      	cmp	r2, r3
 800b64c:	bf0c      	ite	eq
 800b64e:	2301      	moveq	r3, #1
 800b650:	2300      	movne	r3, #0
 800b652:	b2db      	uxtb	r3, r3
 800b654:	461a      	mov	r2, r3
 800b656:	79fb      	ldrb	r3, [r7, #7]
 800b658:	429a      	cmp	r2, r3
 800b65a:	d0a0      	beq.n	800b59e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b65c:	2300      	movs	r3, #0
}
 800b65e:	4618      	mov	r0, r3
 800b660:	3710      	adds	r7, #16
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}
	...

0800b668 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b668:	b480      	push	{r7}
 800b66a:	b0a3      	sub	sp, #140	@ 0x8c
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	60f8      	str	r0, [r7, #12]
 800b670:	60b9      	str	r1, [r7, #8]
 800b672:	4613      	mov	r3, r2
 800b674:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	68ba      	ldr	r2, [r7, #8]
 800b67a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	88fa      	ldrh	r2, [r7, #6]
 800b680:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	88fa      	ldrh	r2, [r7, #6]
 800b688:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	2200      	movs	r2, #0
 800b690:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	689b      	ldr	r3, [r3, #8]
 800b696:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b69a:	d10e      	bne.n	800b6ba <UART_Start_Receive_IT+0x52>
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	691b      	ldr	r3, [r3, #16]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d105      	bne.n	800b6b0 <UART_Start_Receive_IT+0x48>
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800b6aa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b6ae:	e02d      	b.n	800b70c <UART_Start_Receive_IT+0xa4>
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	22ff      	movs	r2, #255	@ 0xff
 800b6b4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b6b8:	e028      	b.n	800b70c <UART_Start_Receive_IT+0xa4>
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	689b      	ldr	r3, [r3, #8]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d10d      	bne.n	800b6de <UART_Start_Receive_IT+0x76>
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	691b      	ldr	r3, [r3, #16]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d104      	bne.n	800b6d4 <UART_Start_Receive_IT+0x6c>
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	22ff      	movs	r2, #255	@ 0xff
 800b6ce:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b6d2:	e01b      	b.n	800b70c <UART_Start_Receive_IT+0xa4>
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	227f      	movs	r2, #127	@ 0x7f
 800b6d8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b6dc:	e016      	b.n	800b70c <UART_Start_Receive_IT+0xa4>
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	689b      	ldr	r3, [r3, #8]
 800b6e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b6e6:	d10d      	bne.n	800b704 <UART_Start_Receive_IT+0x9c>
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	691b      	ldr	r3, [r3, #16]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d104      	bne.n	800b6fa <UART_Start_Receive_IT+0x92>
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	227f      	movs	r2, #127	@ 0x7f
 800b6f4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b6f8:	e008      	b.n	800b70c <UART_Start_Receive_IT+0xa4>
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	223f      	movs	r2, #63	@ 0x3f
 800b6fe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b702:	e003      	b.n	800b70c <UART_Start_Receive_IT+0xa4>
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	2200      	movs	r2, #0
 800b708:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	2200      	movs	r2, #0
 800b710:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	2222      	movs	r2, #34	@ 0x22
 800b718:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	3308      	adds	r3, #8
 800b722:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b724:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b726:	e853 3f00 	ldrex	r3, [r3]
 800b72a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800b72c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b72e:	f043 0301 	orr.w	r3, r3, #1
 800b732:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	3308      	adds	r3, #8
 800b73c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800b740:	673a      	str	r2, [r7, #112]	@ 0x70
 800b742:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b744:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800b746:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800b748:	e841 2300 	strex	r3, r2, [r1]
 800b74c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800b74e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b750:	2b00      	cmp	r3, #0
 800b752:	d1e3      	bne.n	800b71c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b758:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b75c:	d14f      	bne.n	800b7fe <UART_Start_Receive_IT+0x196>
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b764:	88fa      	ldrh	r2, [r7, #6]
 800b766:	429a      	cmp	r2, r3
 800b768:	d349      	bcc.n	800b7fe <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	689b      	ldr	r3, [r3, #8]
 800b76e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b772:	d107      	bne.n	800b784 <UART_Start_Receive_IT+0x11c>
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	691b      	ldr	r3, [r3, #16]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d103      	bne.n	800b784 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	4a47      	ldr	r2, [pc, #284]	@ (800b89c <UART_Start_Receive_IT+0x234>)
 800b780:	675a      	str	r2, [r3, #116]	@ 0x74
 800b782:	e002      	b.n	800b78a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	4a46      	ldr	r2, [pc, #280]	@ (800b8a0 <UART_Start_Receive_IT+0x238>)
 800b788:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	691b      	ldr	r3, [r3, #16]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d01a      	beq.n	800b7c8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b798:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b79a:	e853 3f00 	ldrex	r3, [r3]
 800b79e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b7a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b7a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b7a6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	461a      	mov	r2, r3
 800b7b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b7b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b7b6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7b8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b7ba:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b7bc:	e841 2300 	strex	r3, r2, [r1]
 800b7c0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800b7c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d1e4      	bne.n	800b792 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	3308      	adds	r3, #8
 800b7ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7d2:	e853 3f00 	ldrex	r3, [r3]
 800b7d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b7d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b7de:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	3308      	adds	r3, #8
 800b7e6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800b7e8:	64ba      	str	r2, [r7, #72]	@ 0x48
 800b7ea:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7ec:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b7ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b7f0:	e841 2300 	strex	r3, r2, [r1]
 800b7f4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b7f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d1e5      	bne.n	800b7c8 <UART_Start_Receive_IT+0x160>
 800b7fc:	e046      	b.n	800b88c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	689b      	ldr	r3, [r3, #8]
 800b802:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b806:	d107      	bne.n	800b818 <UART_Start_Receive_IT+0x1b0>
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	691b      	ldr	r3, [r3, #16]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d103      	bne.n	800b818 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	4a24      	ldr	r2, [pc, #144]	@ (800b8a4 <UART_Start_Receive_IT+0x23c>)
 800b814:	675a      	str	r2, [r3, #116]	@ 0x74
 800b816:	e002      	b.n	800b81e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	4a23      	ldr	r2, [pc, #140]	@ (800b8a8 <UART_Start_Receive_IT+0x240>)
 800b81c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	691b      	ldr	r3, [r3, #16]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d019      	beq.n	800b85a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b82c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b82e:	e853 3f00 	ldrex	r3, [r3]
 800b832:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b836:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800b83a:	677b      	str	r3, [r7, #116]	@ 0x74
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	461a      	mov	r2, r3
 800b842:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b844:	637b      	str	r3, [r7, #52]	@ 0x34
 800b846:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b848:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b84a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b84c:	e841 2300 	strex	r3, r2, [r1]
 800b850:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b854:	2b00      	cmp	r3, #0
 800b856:	d1e6      	bne.n	800b826 <UART_Start_Receive_IT+0x1be>
 800b858:	e018      	b.n	800b88c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b860:	697b      	ldr	r3, [r7, #20]
 800b862:	e853 3f00 	ldrex	r3, [r3]
 800b866:	613b      	str	r3, [r7, #16]
   return(result);
 800b868:	693b      	ldr	r3, [r7, #16]
 800b86a:	f043 0320 	orr.w	r3, r3, #32
 800b86e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	461a      	mov	r2, r3
 800b876:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b878:	623b      	str	r3, [r7, #32]
 800b87a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b87c:	69f9      	ldr	r1, [r7, #28]
 800b87e:	6a3a      	ldr	r2, [r7, #32]
 800b880:	e841 2300 	strex	r3, r2, [r1]
 800b884:	61bb      	str	r3, [r7, #24]
   return(result);
 800b886:	69bb      	ldr	r3, [r7, #24]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d1e6      	bne.n	800b85a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800b88c:	2300      	movs	r3, #0
}
 800b88e:	4618      	mov	r0, r3
 800b890:	378c      	adds	r7, #140	@ 0x8c
 800b892:	46bd      	mov	sp, r7
 800b894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b898:	4770      	bx	lr
 800b89a:	bf00      	nop
 800b89c:	0800c2b1 	.word	0x0800c2b1
 800b8a0:	0800bf41 	.word	0x0800bf41
 800b8a4:	0800bd81 	.word	0x0800bd81
 800b8a8:	0800bbc1 	.word	0x0800bbc1

0800b8ac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b8ac:	b480      	push	{r7}
 800b8ae:	b08f      	sub	sp, #60	@ 0x3c
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8ba:	6a3b      	ldr	r3, [r7, #32]
 800b8bc:	e853 3f00 	ldrex	r3, [r3]
 800b8c0:	61fb      	str	r3, [r7, #28]
   return(result);
 800b8c2:	69fb      	ldr	r3, [r7, #28]
 800b8c4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b8c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	461a      	mov	r2, r3
 800b8d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b8d4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b8d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b8da:	e841 2300 	strex	r3, r2, [r1]
 800b8de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b8e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d1e6      	bne.n	800b8b4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	3308      	adds	r3, #8
 800b8ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	e853 3f00 	ldrex	r3, [r3]
 800b8f4:	60bb      	str	r3, [r7, #8]
   return(result);
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b8fc:	633b      	str	r3, [r7, #48]	@ 0x30
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	3308      	adds	r3, #8
 800b904:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b906:	61ba      	str	r2, [r7, #24]
 800b908:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b90a:	6979      	ldr	r1, [r7, #20]
 800b90c:	69ba      	ldr	r2, [r7, #24]
 800b90e:	e841 2300 	strex	r3, r2, [r1]
 800b912:	613b      	str	r3, [r7, #16]
   return(result);
 800b914:	693b      	ldr	r3, [r7, #16]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d1e5      	bne.n	800b8e6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2220      	movs	r2, #32
 800b91e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800b922:	bf00      	nop
 800b924:	373c      	adds	r7, #60	@ 0x3c
 800b926:	46bd      	mov	sp, r7
 800b928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92c:	4770      	bx	lr

0800b92e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b92e:	b480      	push	{r7}
 800b930:	b095      	sub	sp, #84	@ 0x54
 800b932:	af00      	add	r7, sp, #0
 800b934:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b93c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b93e:	e853 3f00 	ldrex	r3, [r3]
 800b942:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b946:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b94a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	461a      	mov	r2, r3
 800b952:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b954:	643b      	str	r3, [r7, #64]	@ 0x40
 800b956:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b958:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b95a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b95c:	e841 2300 	strex	r3, r2, [r1]
 800b960:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b964:	2b00      	cmp	r3, #0
 800b966:	d1e6      	bne.n	800b936 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	3308      	adds	r3, #8
 800b96e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b970:	6a3b      	ldr	r3, [r7, #32]
 800b972:	e853 3f00 	ldrex	r3, [r3]
 800b976:	61fb      	str	r3, [r7, #28]
   return(result);
 800b978:	69fb      	ldr	r3, [r7, #28]
 800b97a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b97e:	f023 0301 	bic.w	r3, r3, #1
 800b982:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	3308      	adds	r3, #8
 800b98a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b98c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b98e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b990:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b992:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b994:	e841 2300 	strex	r3, r2, [r1]
 800b998:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b99a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d1e3      	bne.n	800b968 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b9a4:	2b01      	cmp	r3, #1
 800b9a6:	d118      	bne.n	800b9da <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	e853 3f00 	ldrex	r3, [r3]
 800b9b4:	60bb      	str	r3, [r7, #8]
   return(result);
 800b9b6:	68bb      	ldr	r3, [r7, #8]
 800b9b8:	f023 0310 	bic.w	r3, r3, #16
 800b9bc:	647b      	str	r3, [r7, #68]	@ 0x44
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	461a      	mov	r2, r3
 800b9c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b9c6:	61bb      	str	r3, [r7, #24]
 800b9c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9ca:	6979      	ldr	r1, [r7, #20]
 800b9cc:	69ba      	ldr	r2, [r7, #24]
 800b9ce:	e841 2300 	strex	r3, r2, [r1]
 800b9d2:	613b      	str	r3, [r7, #16]
   return(result);
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d1e6      	bne.n	800b9a8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2220      	movs	r2, #32
 800b9de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b9ee:	bf00      	nop
 800b9f0:	3754      	adds	r7, #84	@ 0x54
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f8:	4770      	bx	lr

0800b9fa <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b9fa:	b580      	push	{r7, lr}
 800b9fc:	b090      	sub	sp, #64	@ 0x40
 800b9fe:	af00      	add	r7, sp, #0
 800ba00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba06:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	f003 0320 	and.w	r3, r3, #32
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d137      	bne.n	800ba86 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800ba16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba18:	2200      	movs	r2, #0
 800ba1a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ba1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	3308      	adds	r3, #8
 800ba24:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba28:	e853 3f00 	ldrex	r3, [r3]
 800ba2c:	623b      	str	r3, [r7, #32]
   return(result);
 800ba2e:	6a3b      	ldr	r3, [r7, #32]
 800ba30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ba34:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ba36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	3308      	adds	r3, #8
 800ba3c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ba3e:	633a      	str	r2, [r7, #48]	@ 0x30
 800ba40:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ba44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba46:	e841 2300 	strex	r3, r2, [r1]
 800ba4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ba4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d1e5      	bne.n	800ba1e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ba52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba58:	693b      	ldr	r3, [r7, #16]
 800ba5a:	e853 3f00 	ldrex	r3, [r3]
 800ba5e:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba66:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	461a      	mov	r2, r3
 800ba6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba70:	61fb      	str	r3, [r7, #28]
 800ba72:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba74:	69b9      	ldr	r1, [r7, #24]
 800ba76:	69fa      	ldr	r2, [r7, #28]
 800ba78:	e841 2300 	strex	r3, r2, [r1]
 800ba7c:	617b      	str	r3, [r7, #20]
   return(result);
 800ba7e:	697b      	ldr	r3, [r7, #20]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d1e6      	bne.n	800ba52 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ba84:	e004      	b.n	800ba90 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800ba86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba88:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ba8c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800ba8e:	4798      	blx	r3
}
 800ba90:	bf00      	nop
 800ba92:	3740      	adds	r7, #64	@ 0x40
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bd80      	pop	{r7, pc}

0800ba98 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b084      	sub	sp, #16
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800baa4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800baac:	68f8      	ldr	r0, [r7, #12]
 800baae:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bab0:	bf00      	nop
 800bab2:	3710      	adds	r7, #16
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd80      	pop	{r7, pc}

0800bab8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b086      	sub	sp, #24
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bac4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bac6:	697b      	ldr	r3, [r7, #20]
 800bac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bacc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bace:	697b      	ldr	r3, [r7, #20]
 800bad0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bad4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bad6:	697b      	ldr	r3, [r7, #20]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	689b      	ldr	r3, [r3, #8]
 800badc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bae0:	2b80      	cmp	r3, #128	@ 0x80
 800bae2:	d109      	bne.n	800baf8 <UART_DMAError+0x40>
 800bae4:	693b      	ldr	r3, [r7, #16]
 800bae6:	2b21      	cmp	r3, #33	@ 0x21
 800bae8:	d106      	bne.n	800baf8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800baea:	697b      	ldr	r3, [r7, #20]
 800baec:	2200      	movs	r2, #0
 800baee:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800baf2:	6978      	ldr	r0, [r7, #20]
 800baf4:	f7ff feda 	bl	800b8ac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800baf8:	697b      	ldr	r3, [r7, #20]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	689b      	ldr	r3, [r3, #8]
 800bafe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb02:	2b40      	cmp	r3, #64	@ 0x40
 800bb04:	d109      	bne.n	800bb1a <UART_DMAError+0x62>
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	2b22      	cmp	r3, #34	@ 0x22
 800bb0a:	d106      	bne.n	800bb1a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bb0c:	697b      	ldr	r3, [r7, #20]
 800bb0e:	2200      	movs	r2, #0
 800bb10:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800bb14:	6978      	ldr	r0, [r7, #20]
 800bb16:	f7ff ff0a 	bl	800b92e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bb1a:	697b      	ldr	r3, [r7, #20]
 800bb1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb20:	f043 0210 	orr.w	r2, r3, #16
 800bb24:	697b      	ldr	r3, [r7, #20]
 800bb26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800bb30:	6978      	ldr	r0, [r7, #20]
 800bb32:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb34:	bf00      	nop
 800bb36:	3718      	adds	r7, #24
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bd80      	pop	{r7, pc}

0800bb3c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b084      	sub	sp, #16
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb48:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800bb58:	68f8      	ldr	r0, [r7, #12]
 800bb5a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb5c:	bf00      	nop
 800bb5e:	3710      	adds	r7, #16
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}

0800bb64 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b088      	sub	sp, #32
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	e853 3f00 	ldrex	r3, [r3]
 800bb78:	60bb      	str	r3, [r7, #8]
   return(result);
 800bb7a:	68bb      	ldr	r3, [r7, #8]
 800bb7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bb80:	61fb      	str	r3, [r7, #28]
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	461a      	mov	r2, r3
 800bb88:	69fb      	ldr	r3, [r7, #28]
 800bb8a:	61bb      	str	r3, [r7, #24]
 800bb8c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb8e:	6979      	ldr	r1, [r7, #20]
 800bb90:	69ba      	ldr	r2, [r7, #24]
 800bb92:	e841 2300 	strex	r3, r2, [r1]
 800bb96:	613b      	str	r3, [r7, #16]
   return(result);
 800bb98:	693b      	ldr	r3, [r7, #16]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d1e6      	bne.n	800bb6c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2220      	movs	r2, #32
 800bba2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	2200      	movs	r2, #0
 800bbaa:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bbb6:	bf00      	nop
 800bbb8:	3720      	adds	r7, #32
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}
	...

0800bbc0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b09c      	sub	sp, #112	@ 0x70
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bbce:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bbd8:	2b22      	cmp	r3, #34	@ 0x22
 800bbda:	f040 80c2 	bne.w	800bd62 <UART_RxISR_8BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbe4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800bbe8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800bbec:	b2d9      	uxtb	r1, r3
 800bbee:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800bbf2:	b2da      	uxtb	r2, r3
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bbf8:	400a      	ands	r2, r1
 800bbfa:	b2d2      	uxtb	r2, r2
 800bbfc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bc02:	1c5a      	adds	r2, r3, #1
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bc0e:	b29b      	uxth	r3, r3
 800bc10:	3b01      	subs	r3, #1
 800bc12:	b29a      	uxth	r2, r3
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bc20:	b29b      	uxth	r3, r3
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	f040 80a5 	bne.w	800bd72 <UART_RxISR_8BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc30:	e853 3f00 	ldrex	r3, [r3]
 800bc34:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bc36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bc38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bc3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	461a      	mov	r2, r3
 800bc44:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bc46:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bc48:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc4a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bc4c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bc4e:	e841 2300 	strex	r3, r2, [r1]
 800bc52:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bc54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d1e6      	bne.n	800bc28 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	3308      	adds	r3, #8
 800bc60:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc64:	e853 3f00 	ldrex	r3, [r3]
 800bc68:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bc6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc6c:	f023 0301 	bic.w	r3, r3, #1
 800bc70:	667b      	str	r3, [r7, #100]	@ 0x64
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	3308      	adds	r3, #8
 800bc78:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800bc7a:	647a      	str	r2, [r7, #68]	@ 0x44
 800bc7c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc7e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bc80:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bc82:	e841 2300 	strex	r3, r2, [r1]
 800bc86:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bc88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d1e5      	bne.n	800bc5a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	2220      	movs	r2, #32
 800bc92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	2200      	movs	r2, #0
 800bc9a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2200      	movs	r2, #0
 800bca0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	4a35      	ldr	r2, [pc, #212]	@ (800bd7c <UART_RxISR_8BIT+0x1bc>)
 800bca8:	4293      	cmp	r3, r2
 800bcaa:	d01f      	beq.n	800bcec <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	685b      	ldr	r3, [r3, #4]
 800bcb2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d018      	beq.n	800bcec <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcc2:	e853 3f00 	ldrex	r3, [r3]
 800bcc6:	623b      	str	r3, [r7, #32]
   return(result);
 800bcc8:	6a3b      	ldr	r3, [r7, #32]
 800bcca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bcce:	663b      	str	r3, [r7, #96]	@ 0x60
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	461a      	mov	r2, r3
 800bcd6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bcd8:	633b      	str	r3, [r7, #48]	@ 0x30
 800bcda:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcdc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bcde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bce0:	e841 2300 	strex	r3, r2, [r1]
 800bce4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d1e6      	bne.n	800bcba <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bcf0:	2b01      	cmp	r3, #1
 800bcf2:	d130      	bne.n	800bd56 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd00:	693b      	ldr	r3, [r7, #16]
 800bd02:	e853 3f00 	ldrex	r3, [r3]
 800bd06:	60fb      	str	r3, [r7, #12]
   return(result);
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	f023 0310 	bic.w	r3, r3, #16
 800bd0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	461a      	mov	r2, r3
 800bd16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bd18:	61fb      	str	r3, [r7, #28]
 800bd1a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd1c:	69b9      	ldr	r1, [r7, #24]
 800bd1e:	69fa      	ldr	r2, [r7, #28]
 800bd20:	e841 2300 	strex	r3, r2, [r1]
 800bd24:	617b      	str	r3, [r7, #20]
   return(result);
 800bd26:	697b      	ldr	r3, [r7, #20]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d1e6      	bne.n	800bcfa <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	69db      	ldr	r3, [r3, #28]
 800bd32:	f003 0310 	and.w	r3, r3, #16
 800bd36:	2b10      	cmp	r3, #16
 800bd38:	d103      	bne.n	800bd42 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	2210      	movs	r2, #16
 800bd40:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800bd48:	687a      	ldr	r2, [r7, #4]
 800bd4a:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800bd4e:	4611      	mov	r1, r2
 800bd50:	6878      	ldr	r0, [r7, #4]
 800bd52:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bd54:	e00d      	b.n	800bd72 <UART_RxISR_8BIT+0x1b2>
        huart->RxCpltCallback(huart);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800bd5c:	6878      	ldr	r0, [r7, #4]
 800bd5e:	4798      	blx	r3
}
 800bd60:	e007      	b.n	800bd72 <UART_RxISR_8BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	699a      	ldr	r2, [r3, #24]
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	f042 0208 	orr.w	r2, r2, #8
 800bd70:	619a      	str	r2, [r3, #24]
}
 800bd72:	bf00      	nop
 800bd74:	3770      	adds	r7, #112	@ 0x70
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bd80      	pop	{r7, pc}
 800bd7a:	bf00      	nop
 800bd7c:	40008000 	.word	0x40008000

0800bd80 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b09c      	sub	sp, #112	@ 0x70
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bd8e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bd98:	2b22      	cmp	r3, #34	@ 0x22
 800bd9a:	f040 80c2 	bne.w	800bf22 <UART_RxISR_16BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bda4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bdac:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800bdae:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800bdb2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800bdb6:	4013      	ands	r3, r2
 800bdb8:	b29a      	uxth	r2, r3
 800bdba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bdbc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bdc2:	1c9a      	adds	r2, r3, #2
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bdce:	b29b      	uxth	r3, r3
 800bdd0:	3b01      	subs	r3, #1
 800bdd2:	b29a      	uxth	r2, r3
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bde0:	b29b      	uxth	r3, r3
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	f040 80a5 	bne.w	800bf32 <UART_RxISR_16BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bdf0:	e853 3f00 	ldrex	r3, [r3]
 800bdf4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800bdf6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bdf8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bdfc:	667b      	str	r3, [r7, #100]	@ 0x64
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	461a      	mov	r2, r3
 800be04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800be06:	657b      	str	r3, [r7, #84]	@ 0x54
 800be08:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be0a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800be0c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800be0e:	e841 2300 	strex	r3, r2, [r1]
 800be12:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800be14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be16:	2b00      	cmp	r3, #0
 800be18:	d1e6      	bne.n	800bde8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	3308      	adds	r3, #8
 800be20:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be24:	e853 3f00 	ldrex	r3, [r3]
 800be28:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800be2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be2c:	f023 0301 	bic.w	r3, r3, #1
 800be30:	663b      	str	r3, [r7, #96]	@ 0x60
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	3308      	adds	r3, #8
 800be38:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800be3a:	643a      	str	r2, [r7, #64]	@ 0x40
 800be3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be3e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800be40:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800be42:	e841 2300 	strex	r3, r2, [r1]
 800be46:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800be48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d1e5      	bne.n	800be1a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	2220      	movs	r2, #32
 800be52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	2200      	movs	r2, #0
 800be5a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	2200      	movs	r2, #0
 800be60:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	4a35      	ldr	r2, [pc, #212]	@ (800bf3c <UART_RxISR_16BIT+0x1bc>)
 800be68:	4293      	cmp	r3, r2
 800be6a:	d01f      	beq.n	800beac <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	685b      	ldr	r3, [r3, #4]
 800be72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800be76:	2b00      	cmp	r3, #0
 800be78:	d018      	beq.n	800beac <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be80:	6a3b      	ldr	r3, [r7, #32]
 800be82:	e853 3f00 	ldrex	r3, [r3]
 800be86:	61fb      	str	r3, [r7, #28]
   return(result);
 800be88:	69fb      	ldr	r3, [r7, #28]
 800be8a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800be8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	461a      	mov	r2, r3
 800be96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800be98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800be9a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800be9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bea0:	e841 2300 	strex	r3, r2, [r1]
 800bea4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d1e6      	bne.n	800be7a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800beb0:	2b01      	cmp	r3, #1
 800beb2:	d130      	bne.n	800bf16 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2200      	movs	r2, #0
 800beb8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	e853 3f00 	ldrex	r3, [r3]
 800bec6:	60bb      	str	r3, [r7, #8]
   return(result);
 800bec8:	68bb      	ldr	r3, [r7, #8]
 800beca:	f023 0310 	bic.w	r3, r3, #16
 800bece:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	461a      	mov	r2, r3
 800bed6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bed8:	61bb      	str	r3, [r7, #24]
 800beda:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bedc:	6979      	ldr	r1, [r7, #20]
 800bede:	69ba      	ldr	r2, [r7, #24]
 800bee0:	e841 2300 	strex	r3, r2, [r1]
 800bee4:	613b      	str	r3, [r7, #16]
   return(result);
 800bee6:	693b      	ldr	r3, [r7, #16]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d1e6      	bne.n	800beba <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	69db      	ldr	r3, [r3, #28]
 800bef2:	f003 0310 	and.w	r3, r3, #16
 800bef6:	2b10      	cmp	r3, #16
 800bef8:	d103      	bne.n	800bf02 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	2210      	movs	r2, #16
 800bf00:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800bf08:	687a      	ldr	r2, [r7, #4]
 800bf0a:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800bf0e:	4611      	mov	r1, r2
 800bf10:	6878      	ldr	r0, [r7, #4]
 800bf12:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bf14:	e00d      	b.n	800bf32 <UART_RxISR_16BIT+0x1b2>
        huart->RxCpltCallback(huart);
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800bf1c:	6878      	ldr	r0, [r7, #4]
 800bf1e:	4798      	blx	r3
}
 800bf20:	e007      	b.n	800bf32 <UART_RxISR_16BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	699a      	ldr	r2, [r3, #24]
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	f042 0208 	orr.w	r2, r2, #8
 800bf30:	619a      	str	r2, [r3, #24]
}
 800bf32:	bf00      	nop
 800bf34:	3770      	adds	r7, #112	@ 0x70
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}
 800bf3a:	bf00      	nop
 800bf3c:	40008000 	.word	0x40008000

0800bf40 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b0ac      	sub	sp, #176	@ 0xb0
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bf4e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	69db      	ldr	r3, [r3, #28]
 800bf58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	689b      	ldr	r3, [r3, #8]
 800bf6c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bf76:	2b22      	cmp	r3, #34	@ 0x22
 800bf78:	f040 8189 	bne.w	800c28e <UART_RxISR_8BIT_FIFOEN+0x34e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800bf82:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bf86:	e12c      	b.n	800c1e2 <UART_RxISR_8BIT_FIFOEN+0x2a2>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf8e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800bf92:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800bf96:	b2d9      	uxtb	r1, r3
 800bf98:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800bf9c:	b2da      	uxtb	r2, r3
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bfa2:	400a      	ands	r2, r1
 800bfa4:	b2d2      	uxtb	r2, r2
 800bfa6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bfac:	1c5a      	adds	r2, r3, #1
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bfb8:	b29b      	uxth	r3, r3
 800bfba:	3b01      	subs	r3, #1
 800bfbc:	b29a      	uxth	r2, r3
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	69db      	ldr	r3, [r3, #28]
 800bfca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800bfce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bfd2:	f003 0307 	and.w	r3, r3, #7
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d055      	beq.n	800c086 <UART_RxISR_8BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bfda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bfde:	f003 0301 	and.w	r3, r3, #1
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d011      	beq.n	800c00a <UART_RxISR_8BIT_FIFOEN+0xca>
 800bfe6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bfea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d00b      	beq.n	800c00a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	2201      	movs	r2, #1
 800bff8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c000:	f043 0201 	orr.w	r2, r3, #1
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c00a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c00e:	f003 0302 	and.w	r3, r3, #2
 800c012:	2b00      	cmp	r3, #0
 800c014:	d011      	beq.n	800c03a <UART_RxISR_8BIT_FIFOEN+0xfa>
 800c016:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c01a:	f003 0301 	and.w	r3, r3, #1
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d00b      	beq.n	800c03a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	2202      	movs	r2, #2
 800c028:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c030:	f043 0204 	orr.w	r2, r3, #4
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c03a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c03e:	f003 0304 	and.w	r3, r3, #4
 800c042:	2b00      	cmp	r3, #0
 800c044:	d011      	beq.n	800c06a <UART_RxISR_8BIT_FIFOEN+0x12a>
 800c046:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c04a:	f003 0301 	and.w	r3, r3, #1
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d00b      	beq.n	800c06a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	2204      	movs	r2, #4
 800c058:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c060:	f043 0202 	orr.w	r2, r3, #2
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c070:	2b00      	cmp	r3, #0
 800c072:	d008      	beq.n	800c086 <UART_RxISR_8BIT_FIFOEN+0x146>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c07a:	6878      	ldr	r0, [r7, #4]
 800c07c:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	2200      	movs	r2, #0
 800c082:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c08c:	b29b      	uxth	r3, r3
 800c08e:	2b00      	cmp	r3, #0
 800c090:	f040 80a7 	bne.w	800c1e2 <UART_RxISR_8BIT_FIFOEN+0x2a2>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c09a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c09c:	e853 3f00 	ldrex	r3, [r3]
 800c0a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800c0a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c0a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c0a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	461a      	mov	r2, r3
 800c0b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c0b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c0b8:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0ba:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800c0bc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800c0be:	e841 2300 	strex	r3, r2, [r1]
 800c0c2:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800c0c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d1e4      	bne.n	800c094 <UART_RxISR_8BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	3308      	adds	r3, #8
 800c0d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c0d4:	e853 3f00 	ldrex	r3, [r3]
 800c0d8:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800c0da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c0dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c0e0:	f023 0301 	bic.w	r3, r3, #1
 800c0e4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	3308      	adds	r3, #8
 800c0ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c0f2:	66ba      	str	r2, [r7, #104]	@ 0x68
 800c0f4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0f6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800c0f8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c0fa:	e841 2300 	strex	r3, r2, [r1]
 800c0fe:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800c100:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c102:	2b00      	cmp	r3, #0
 800c104:	d1e1      	bne.n	800c0ca <UART_RxISR_8BIT_FIFOEN+0x18a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	2220      	movs	r2, #32
 800c10a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2200      	movs	r2, #0
 800c112:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2200      	movs	r2, #0
 800c118:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	4a62      	ldr	r2, [pc, #392]	@ (800c2a8 <UART_RxISR_8BIT_FIFOEN+0x368>)
 800c120:	4293      	cmp	r3, r2
 800c122:	d021      	beq.n	800c168 <UART_RxISR_8BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	685b      	ldr	r3, [r3, #4]
 800c12a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d01a      	beq.n	800c168 <UART_RxISR_8BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c138:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c13a:	e853 3f00 	ldrex	r3, [r3]
 800c13e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c140:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c142:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c146:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	461a      	mov	r2, r3
 800c150:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c154:	657b      	str	r3, [r7, #84]	@ 0x54
 800c156:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c158:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c15a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c15c:	e841 2300 	strex	r3, r2, [r1]
 800c160:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c162:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c164:	2b00      	cmp	r3, #0
 800c166:	d1e4      	bne.n	800c132 <UART_RxISR_8BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c16c:	2b01      	cmp	r3, #1
 800c16e:	d132      	bne.n	800c1d6 <UART_RxISR_8BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2200      	movs	r2, #0
 800c174:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c17c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c17e:	e853 3f00 	ldrex	r3, [r3]
 800c182:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c186:	f023 0310 	bic.w	r3, r3, #16
 800c18a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	461a      	mov	r2, r3
 800c194:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c198:	643b      	str	r3, [r7, #64]	@ 0x40
 800c19a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c19c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c19e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c1a0:	e841 2300 	strex	r3, r2, [r1]
 800c1a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c1a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d1e4      	bne.n	800c176 <UART_RxISR_8BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	69db      	ldr	r3, [r3, #28]
 800c1b2:	f003 0310 	and.w	r3, r3, #16
 800c1b6:	2b10      	cmp	r3, #16
 800c1b8:	d103      	bne.n	800c1c2 <UART_RxISR_8BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	2210      	movs	r2, #16
 800c1c0:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c1c8:	687a      	ldr	r2, [r7, #4]
 800c1ca:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800c1ce:	4611      	mov	r1, r2
 800c1d0:	6878      	ldr	r0, [r7, #4]
 800c1d2:	4798      	blx	r3
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800c1d4:	e010      	b.n	800c1f8 <UART_RxISR_8BIT_FIFOEN+0x2b8>
          huart->RxCpltCallback(huart);
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	4798      	blx	r3
        break;
 800c1e0:	e00a      	b.n	800c1f8 <UART_RxISR_8BIT_FIFOEN+0x2b8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c1e2:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d006      	beq.n	800c1f8 <UART_RxISR_8BIT_FIFOEN+0x2b8>
 800c1ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c1ee:	f003 0320 	and.w	r3, r3, #32
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	f47f aec8 	bne.w	800bf88 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c1fe:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c202:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c206:	2b00      	cmp	r3, #0
 800c208:	d049      	beq.n	800c29e <UART_RxISR_8BIT_FIFOEN+0x35e>
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c210:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800c214:	429a      	cmp	r2, r3
 800c216:	d242      	bcs.n	800c29e <UART_RxISR_8BIT_FIFOEN+0x35e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	3308      	adds	r3, #8
 800c21e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c220:	6a3b      	ldr	r3, [r7, #32]
 800c222:	e853 3f00 	ldrex	r3, [r3]
 800c226:	61fb      	str	r3, [r7, #28]
   return(result);
 800c228:	69fb      	ldr	r3, [r7, #28]
 800c22a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c22e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	3308      	adds	r3, #8
 800c238:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800c23c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c23e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c240:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c242:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c244:	e841 2300 	strex	r3, r2, [r1]
 800c248:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c24a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d1e3      	bne.n	800c218 <UART_RxISR_8BIT_FIFOEN+0x2d8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	4a16      	ldr	r2, [pc, #88]	@ (800c2ac <UART_RxISR_8BIT_FIFOEN+0x36c>)
 800c254:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	e853 3f00 	ldrex	r3, [r3]
 800c262:	60bb      	str	r3, [r7, #8]
   return(result);
 800c264:	68bb      	ldr	r3, [r7, #8]
 800c266:	f043 0320 	orr.w	r3, r3, #32
 800c26a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	461a      	mov	r2, r3
 800c274:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c278:	61bb      	str	r3, [r7, #24]
 800c27a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c27c:	6979      	ldr	r1, [r7, #20]
 800c27e:	69ba      	ldr	r2, [r7, #24]
 800c280:	e841 2300 	strex	r3, r2, [r1]
 800c284:	613b      	str	r3, [r7, #16]
   return(result);
 800c286:	693b      	ldr	r3, [r7, #16]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d1e4      	bne.n	800c256 <UART_RxISR_8BIT_FIFOEN+0x316>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c28c:	e007      	b.n	800c29e <UART_RxISR_8BIT_FIFOEN+0x35e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	699a      	ldr	r2, [r3, #24]
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	f042 0208 	orr.w	r2, r2, #8
 800c29c:	619a      	str	r2, [r3, #24]
}
 800c29e:	bf00      	nop
 800c2a0:	37b0      	adds	r7, #176	@ 0xb0
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	bd80      	pop	{r7, pc}
 800c2a6:	bf00      	nop
 800c2a8:	40008000 	.word	0x40008000
 800c2ac:	0800bbc1 	.word	0x0800bbc1

0800c2b0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b0ae      	sub	sp, #184	@ 0xb8
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c2be:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	69db      	ldr	r3, [r3, #28]
 800c2c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	689b      	ldr	r3, [r3, #8]
 800c2dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c2e6:	2b22      	cmp	r3, #34	@ 0x22
 800c2e8:	f040 818d 	bne.w	800c606 <UART_RxISR_16BIT_FIFOEN+0x356>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c2f2:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c2f6:	e130      	b.n	800c55a <UART_RxISR_16BIT_FIFOEN+0x2aa>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2fe:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c306:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800c30a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800c30e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800c312:	4013      	ands	r3, r2
 800c314:	b29a      	uxth	r2, r3
 800c316:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c31a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c320:	1c9a      	adds	r2, r3, #2
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c32c:	b29b      	uxth	r3, r3
 800c32e:	3b01      	subs	r3, #1
 800c330:	b29a      	uxth	r2, r3
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	69db      	ldr	r3, [r3, #28]
 800c33e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c342:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c346:	f003 0307 	and.w	r3, r3, #7
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d055      	beq.n	800c3fa <UART_RxISR_16BIT_FIFOEN+0x14a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c34e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c352:	f003 0301 	and.w	r3, r3, #1
 800c356:	2b00      	cmp	r3, #0
 800c358:	d011      	beq.n	800c37e <UART_RxISR_16BIT_FIFOEN+0xce>
 800c35a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c35e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c362:	2b00      	cmp	r3, #0
 800c364:	d00b      	beq.n	800c37e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	2201      	movs	r2, #1
 800c36c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c374:	f043 0201 	orr.w	r2, r3, #1
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c37e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c382:	f003 0302 	and.w	r3, r3, #2
 800c386:	2b00      	cmp	r3, #0
 800c388:	d011      	beq.n	800c3ae <UART_RxISR_16BIT_FIFOEN+0xfe>
 800c38a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c38e:	f003 0301 	and.w	r3, r3, #1
 800c392:	2b00      	cmp	r3, #0
 800c394:	d00b      	beq.n	800c3ae <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	2202      	movs	r2, #2
 800c39c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c3a4:	f043 0204 	orr.w	r2, r3, #4
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c3ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c3b2:	f003 0304 	and.w	r3, r3, #4
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d011      	beq.n	800c3de <UART_RxISR_16BIT_FIFOEN+0x12e>
 800c3ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c3be:	f003 0301 	and.w	r3, r3, #1
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d00b      	beq.n	800c3de <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	2204      	movs	r2, #4
 800c3cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c3d4:	f043 0202 	orr.w	r2, r3, #2
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d008      	beq.n	800c3fa <UART_RxISR_16BIT_FIFOEN+0x14a>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c3ee:	6878      	ldr	r0, [r7, #4]
 800c3f0:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c400:	b29b      	uxth	r3, r3
 800c402:	2b00      	cmp	r3, #0
 800c404:	f040 80a9 	bne.w	800c55a <UART_RxISR_16BIT_FIFOEN+0x2aa>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c40e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c410:	e853 3f00 	ldrex	r3, [r3]
 800c414:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c416:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c418:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c41c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	461a      	mov	r2, r3
 800c426:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c42a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c42e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c430:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c432:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c436:	e841 2300 	strex	r3, r2, [r1]
 800c43a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c43c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d1e2      	bne.n	800c408 <UART_RxISR_16BIT_FIFOEN+0x158>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	3308      	adds	r3, #8
 800c448:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c44a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c44c:	e853 3f00 	ldrex	r3, [r3]
 800c450:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c452:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c454:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c458:	f023 0301 	bic.w	r3, r3, #1
 800c45c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	3308      	adds	r3, #8
 800c466:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800c46a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c46c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c46e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c470:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c472:	e841 2300 	strex	r3, r2, [r1]
 800c476:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c478:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d1e1      	bne.n	800c442 <UART_RxISR_16BIT_FIFOEN+0x192>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	2220      	movs	r2, #32
 800c482:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	2200      	movs	r2, #0
 800c48a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2200      	movs	r2, #0
 800c490:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	4a62      	ldr	r2, [pc, #392]	@ (800c620 <UART_RxISR_16BIT_FIFOEN+0x370>)
 800c498:	4293      	cmp	r3, r2
 800c49a:	d021      	beq.n	800c4e0 <UART_RxISR_16BIT_FIFOEN+0x230>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	685b      	ldr	r3, [r3, #4]
 800c4a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d01a      	beq.n	800c4e0 <UART_RxISR_16BIT_FIFOEN+0x230>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c4b2:	e853 3f00 	ldrex	r3, [r3]
 800c4b6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c4b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c4ba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c4be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	461a      	mov	r2, r3
 800c4c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c4cc:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c4ce:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4d0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c4d2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c4d4:	e841 2300 	strex	r3, r2, [r1]
 800c4d8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c4da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d1e4      	bne.n	800c4aa <UART_RxISR_16BIT_FIFOEN+0x1fa>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c4e4:	2b01      	cmp	r3, #1
 800c4e6:	d132      	bne.n	800c54e <UART_RxISR_16BIT_FIFOEN+0x29e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4f6:	e853 3f00 	ldrex	r3, [r3]
 800c4fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c4fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4fe:	f023 0310 	bic.w	r3, r3, #16
 800c502:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	461a      	mov	r2, r3
 800c50c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c510:	647b      	str	r3, [r7, #68]	@ 0x44
 800c512:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c514:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c516:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c518:	e841 2300 	strex	r3, r2, [r1]
 800c51c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c51e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c520:	2b00      	cmp	r3, #0
 800c522:	d1e4      	bne.n	800c4ee <UART_RxISR_16BIT_FIFOEN+0x23e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	69db      	ldr	r3, [r3, #28]
 800c52a:	f003 0310 	and.w	r3, r3, #16
 800c52e:	2b10      	cmp	r3, #16
 800c530:	d103      	bne.n	800c53a <UART_RxISR_16BIT_FIFOEN+0x28a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	2210      	movs	r2, #16
 800c538:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c540:	687a      	ldr	r2, [r7, #4]
 800c542:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800c546:	4611      	mov	r1, r2
 800c548:	6878      	ldr	r0, [r7, #4]
 800c54a:	4798      	blx	r3
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800c54c:	e010      	b.n	800c570 <UART_RxISR_16BIT_FIFOEN+0x2c0>
          huart->RxCpltCallback(huart);
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c554:	6878      	ldr	r0, [r7, #4]
 800c556:	4798      	blx	r3
        break;
 800c558:	e00a      	b.n	800c570 <UART_RxISR_16BIT_FIFOEN+0x2c0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c55a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d006      	beq.n	800c570 <UART_RxISR_16BIT_FIFOEN+0x2c0>
 800c562:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c566:	f003 0320 	and.w	r3, r3, #32
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	f47f aec4 	bne.w	800c2f8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c576:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c57a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d049      	beq.n	800c616 <UART_RxISR_16BIT_FIFOEN+0x366>
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c588:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800c58c:	429a      	cmp	r2, r3
 800c58e:	d242      	bcs.n	800c616 <UART_RxISR_16BIT_FIFOEN+0x366>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	3308      	adds	r3, #8
 800c596:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c59a:	e853 3f00 	ldrex	r3, [r3]
 800c59e:	623b      	str	r3, [r7, #32]
   return(result);
 800c5a0:	6a3b      	ldr	r3, [r7, #32]
 800c5a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c5a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	3308      	adds	r3, #8
 800c5b0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800c5b4:	633a      	str	r2, [r7, #48]	@ 0x30
 800c5b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c5ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c5bc:	e841 2300 	strex	r3, r2, [r1]
 800c5c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c5c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d1e3      	bne.n	800c590 <UART_RxISR_16BIT_FIFOEN+0x2e0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	4a16      	ldr	r2, [pc, #88]	@ (800c624 <UART_RxISR_16BIT_FIFOEN+0x374>)
 800c5cc:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5d4:	693b      	ldr	r3, [r7, #16]
 800c5d6:	e853 3f00 	ldrex	r3, [r3]
 800c5da:	60fb      	str	r3, [r7, #12]
   return(result);
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	f043 0320 	orr.w	r3, r3, #32
 800c5e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	461a      	mov	r2, r3
 800c5ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c5f0:	61fb      	str	r3, [r7, #28]
 800c5f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5f4:	69b9      	ldr	r1, [r7, #24]
 800c5f6:	69fa      	ldr	r2, [r7, #28]
 800c5f8:	e841 2300 	strex	r3, r2, [r1]
 800c5fc:	617b      	str	r3, [r7, #20]
   return(result);
 800c5fe:	697b      	ldr	r3, [r7, #20]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d1e4      	bne.n	800c5ce <UART_RxISR_16BIT_FIFOEN+0x31e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c604:	e007      	b.n	800c616 <UART_RxISR_16BIT_FIFOEN+0x366>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	699a      	ldr	r2, [r3, #24]
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	f042 0208 	orr.w	r2, r2, #8
 800c614:	619a      	str	r2, [r3, #24]
}
 800c616:	bf00      	nop
 800c618:	37b8      	adds	r7, #184	@ 0xb8
 800c61a:	46bd      	mov	sp, r7
 800c61c:	bd80      	pop	{r7, pc}
 800c61e:	bf00      	nop
 800c620:	40008000 	.word	0x40008000
 800c624:	0800bd81 	.word	0x0800bd81

0800c628 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c628:	b480      	push	{r7}
 800c62a:	b083      	sub	sp, #12
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c630:	bf00      	nop
 800c632:	370c      	adds	r7, #12
 800c634:	46bd      	mov	sp, r7
 800c636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63a:	4770      	bx	lr

0800c63c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c63c:	b480      	push	{r7}
 800c63e:	b083      	sub	sp, #12
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c644:	bf00      	nop
 800c646:	370c      	adds	r7, #12
 800c648:	46bd      	mov	sp, r7
 800c64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64e:	4770      	bx	lr

0800c650 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c650:	b480      	push	{r7}
 800c652:	b083      	sub	sp, #12
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c658:	bf00      	nop
 800c65a:	370c      	adds	r7, #12
 800c65c:	46bd      	mov	sp, r7
 800c65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c662:	4770      	bx	lr

0800c664 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c664:	b480      	push	{r7}
 800c666:	b085      	sub	sp, #20
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c672:	2b01      	cmp	r3, #1
 800c674:	d101      	bne.n	800c67a <HAL_UARTEx_DisableFifoMode+0x16>
 800c676:	2302      	movs	r3, #2
 800c678:	e027      	b.n	800c6ca <HAL_UARTEx_DisableFifoMode+0x66>
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	2201      	movs	r2, #1
 800c67e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	2224      	movs	r2, #36	@ 0x24
 800c686:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	681a      	ldr	r2, [r3, #0]
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	f022 0201 	bic.w	r2, r2, #1
 800c6a0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c6a8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	68fa      	ldr	r2, [r7, #12]
 800c6b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2220      	movs	r2, #32
 800c6bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c6c8:	2300      	movs	r3, #0
}
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	3714      	adds	r7, #20
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d4:	4770      	bx	lr

0800c6d6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c6d6:	b580      	push	{r7, lr}
 800c6d8:	b084      	sub	sp, #16
 800c6da:	af00      	add	r7, sp, #0
 800c6dc:	6078      	str	r0, [r7, #4]
 800c6de:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c6e6:	2b01      	cmp	r3, #1
 800c6e8:	d101      	bne.n	800c6ee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c6ea:	2302      	movs	r3, #2
 800c6ec:	e02d      	b.n	800c74a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	2201      	movs	r2, #1
 800c6f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	2224      	movs	r2, #36	@ 0x24
 800c6fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	681a      	ldr	r2, [r3, #0]
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	f022 0201 	bic.w	r2, r2, #1
 800c714:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	689b      	ldr	r3, [r3, #8]
 800c71c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	683a      	ldr	r2, [r7, #0]
 800c726:	430a      	orrs	r2, r1
 800c728:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c72a:	6878      	ldr	r0, [r7, #4]
 800c72c:	f000 f850 	bl	800c7d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	68fa      	ldr	r2, [r7, #12]
 800c736:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2220      	movs	r2, #32
 800c73c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2200      	movs	r2, #0
 800c744:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c748:	2300      	movs	r3, #0
}
 800c74a:	4618      	mov	r0, r3
 800c74c:	3710      	adds	r7, #16
 800c74e:	46bd      	mov	sp, r7
 800c750:	bd80      	pop	{r7, pc}

0800c752 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c752:	b580      	push	{r7, lr}
 800c754:	b084      	sub	sp, #16
 800c756:	af00      	add	r7, sp, #0
 800c758:	6078      	str	r0, [r7, #4]
 800c75a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c762:	2b01      	cmp	r3, #1
 800c764:	d101      	bne.n	800c76a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c766:	2302      	movs	r3, #2
 800c768:	e02d      	b.n	800c7c6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	2201      	movs	r2, #1
 800c76e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	2224      	movs	r2, #36	@ 0x24
 800c776:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	681a      	ldr	r2, [r3, #0]
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	f022 0201 	bic.w	r2, r2, #1
 800c790:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	689b      	ldr	r3, [r3, #8]
 800c798:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	683a      	ldr	r2, [r7, #0]
 800c7a2:	430a      	orrs	r2, r1
 800c7a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	f000 f812 	bl	800c7d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	68fa      	ldr	r2, [r7, #12]
 800c7b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2220      	movs	r2, #32
 800c7b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	2200      	movs	r2, #0
 800c7c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c7c4:	2300      	movs	r3, #0
}
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	3710      	adds	r7, #16
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bd80      	pop	{r7, pc}
	...

0800c7d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c7d0:	b480      	push	{r7}
 800c7d2:	b085      	sub	sp, #20
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d108      	bne.n	800c7f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	2201      	movs	r2, #1
 800c7e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	2201      	movs	r2, #1
 800c7ec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c7f0:	e031      	b.n	800c856 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c7f2:	2308      	movs	r3, #8
 800c7f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c7f6:	2308      	movs	r3, #8
 800c7f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	689b      	ldr	r3, [r3, #8]
 800c800:	0e5b      	lsrs	r3, r3, #25
 800c802:	b2db      	uxtb	r3, r3
 800c804:	f003 0307 	and.w	r3, r3, #7
 800c808:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	689b      	ldr	r3, [r3, #8]
 800c810:	0f5b      	lsrs	r3, r3, #29
 800c812:	b2db      	uxtb	r3, r3
 800c814:	f003 0307 	and.w	r3, r3, #7
 800c818:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c81a:	7bbb      	ldrb	r3, [r7, #14]
 800c81c:	7b3a      	ldrb	r2, [r7, #12]
 800c81e:	4911      	ldr	r1, [pc, #68]	@ (800c864 <UARTEx_SetNbDataToProcess+0x94>)
 800c820:	5c8a      	ldrb	r2, [r1, r2]
 800c822:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c826:	7b3a      	ldrb	r2, [r7, #12]
 800c828:	490f      	ldr	r1, [pc, #60]	@ (800c868 <UARTEx_SetNbDataToProcess+0x98>)
 800c82a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c82c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c830:	b29a      	uxth	r2, r3
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c838:	7bfb      	ldrb	r3, [r7, #15]
 800c83a:	7b7a      	ldrb	r2, [r7, #13]
 800c83c:	4909      	ldr	r1, [pc, #36]	@ (800c864 <UARTEx_SetNbDataToProcess+0x94>)
 800c83e:	5c8a      	ldrb	r2, [r1, r2]
 800c840:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c844:	7b7a      	ldrb	r2, [r7, #13]
 800c846:	4908      	ldr	r1, [pc, #32]	@ (800c868 <UARTEx_SetNbDataToProcess+0x98>)
 800c848:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c84a:	fb93 f3f2 	sdiv	r3, r3, r2
 800c84e:	b29a      	uxth	r2, r3
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c856:	bf00      	nop
 800c858:	3714      	adds	r7, #20
 800c85a:	46bd      	mov	sp, r7
 800c85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c860:	4770      	bx	lr
 800c862:	bf00      	nop
 800c864:	0800d364 	.word	0x0800d364
 800c868:	0800d36c 	.word	0x0800d36c

0800c86c <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b082      	sub	sp, #8
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
 800c874:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	ed93 7a06 	vldr	s14, [r3, #24]
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	edd3 7a07 	vldr	s15, [r3, #28]
 800c882:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	edd3 7a08 	vldr	s15, [r3, #32]
 800c88c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	edd3 7a06 	vldr	s15, [r3, #24]
 800c89c:	eeb1 7a67 	vneg.f32	s14, s15
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	edd3 7a08 	vldr	s15, [r3, #32]
 800c8a6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c8aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	6a1a      	ldr	r2, [r3, #32]
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d006      	beq.n	800c8d0 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	330c      	adds	r3, #12
 800c8c6:	220c      	movs	r2, #12
 800c8c8:	2100      	movs	r1, #0
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	f000 fcc4 	bl	800d258 <memset>
  }

}
 800c8d0:	bf00      	nop
 800c8d2:	3708      	adds	r7, #8
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	bd80      	pop	{r7, pc}

0800c8d8 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800c8d8:	b480      	push	{r7}
 800c8da:	b08b      	sub	sp, #44	@ 0x2c
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	60f8      	str	r0, [r7, #12]
 800c8e0:	60b9      	str	r1, [r7, #8]
 800c8e2:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	685b      	ldr	r3, [r3, #4]
 800c8e8:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800c8ea:	68bb      	ldr	r3, [r7, #8]
 800c8ec:	685b      	ldr	r3, [r3, #4]
 800c8ee:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	685b      	ldr	r3, [r3, #4]
 800c8f4:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	881b      	ldrh	r3, [r3, #0]
 800c8fa:	461a      	mov	r2, r3
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	885b      	ldrh	r3, [r3, #2]
 800c900:	fb02 f303 	mul.w	r3, r2, r3
 800c904:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800c906:	697b      	ldr	r3, [r7, #20]
 800c908:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800c90a:	e013      	b.n	800c934 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 800c90c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c90e:	1d1a      	adds	r2, r3, #4
 800c910:	627a      	str	r2, [r7, #36]	@ 0x24
 800c912:	ed93 7a00 	vldr	s14, [r3]
 800c916:	6a3b      	ldr	r3, [r7, #32]
 800c918:	1d1a      	adds	r2, r3, #4
 800c91a:	623a      	str	r2, [r7, #32]
 800c91c:	edd3 7a00 	vldr	s15, [r3]
 800c920:	69fb      	ldr	r3, [r7, #28]
 800c922:	1d1a      	adds	r2, r3, #4
 800c924:	61fa      	str	r2, [r7, #28]
 800c926:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c92a:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800c92e:	69bb      	ldr	r3, [r7, #24]
 800c930:	3b01      	subs	r3, #1
 800c932:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800c934:	69bb      	ldr	r3, [r7, #24]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d1e8      	bne.n	800c90c <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800c93a:	2300      	movs	r3, #0
 800c93c:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800c93e:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800c942:	4618      	mov	r0, r3
 800c944:	372c      	adds	r7, #44	@ 0x2c
 800c946:	46bd      	mov	sp, r7
 800c948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94c:	4770      	bx	lr

0800c94e <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800c94e:	b480      	push	{r7}
 800c950:	b085      	sub	sp, #20
 800c952:	af00      	add	r7, sp, #0
 800c954:	60f8      	str	r0, [r7, #12]
 800c956:	607b      	str	r3, [r7, #4]
 800c958:	460b      	mov	r3, r1
 800c95a:	817b      	strh	r3, [r7, #10]
 800c95c:	4613      	mov	r3, r2
 800c95e:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	897a      	ldrh	r2, [r7, #10]
 800c964:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	893a      	ldrh	r2, [r7, #8]
 800c96a:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	687a      	ldr	r2, [r7, #4]
 800c970:	605a      	str	r2, [r3, #4]
}
 800c972:	bf00      	nop
 800c974:	3714      	adds	r7, #20
 800c976:	46bd      	mov	sp, r7
 800c978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97c:	4770      	bx	lr

0800c97e <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800c97e:	b480      	push	{r7}
 800c980:	b0bb      	sub	sp, #236	@ 0xec
 800c982:	af00      	add	r7, sp, #0
 800c984:	6078      	str	r0, [r7, #4]
 800c986:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	685b      	ldr	r3, [r3, #4]
 800c98c:	667b      	str	r3, [r7, #100]	@ 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800c98e:	683b      	ldr	r3, [r7, #0]
 800c990:	685b      	ldr	r3, [r3, #4]
 800c992:	663b      	str	r3, [r7, #96]	@ 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	881b      	ldrh	r3, [r3, #0]
 800c998:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	885b      	ldrh	r3, [r3, #2]
 800c99e:	65bb      	str	r3, [r7, #88]	@ 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 800c9a0:	f04f 0300 	mov.w	r3, #0
 800c9a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c9a8:	f04f 0300 	mov.w	r3, #0
 800c9ac:	657b      	str	r3, [r7, #84]	@ 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 800c9b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c9b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 800c9ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c9bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 800c9c0:	e03b      	b.n	800ca3a <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 800c9c2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c9c4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800c9c8:	1ad3      	subs	r3, r2, r3
 800c9ca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800c9ce:	e00c      	b.n	800c9ea <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 800c9d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c9d4:	1d1a      	adds	r2, r3, #4
 800c9d6:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800c9da:	f04f 0200 	mov.w	r2, #0
 800c9de:	601a      	str	r2, [r3, #0]
        j--;
 800c9e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c9e4:	3b01      	subs	r3, #1
 800c9e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800c9ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d1ee      	bne.n	800c9d0 <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 800c9f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c9f6:	1d1a      	adds	r2, r3, #4
 800c9f8:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800c9fc:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800ca00:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 800ca02:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ca06:	3b01      	subs	r3, #1
 800ca08:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800ca0c:	e00c      	b.n	800ca28 <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 800ca0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ca12:	1d1a      	adds	r2, r3, #4
 800ca14:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800ca18:	f04f 0200 	mov.w	r2, #0
 800ca1c:	601a      	str	r2, [r3, #0]
        j--;
 800ca1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ca22:	3b01      	subs	r3, #1
 800ca24:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800ca28:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d1ee      	bne.n	800ca0e <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 800ca30:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ca34:	3b01      	subs	r3, #1
 800ca36:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    while (rowCnt > 0U)
 800ca3a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d1bf      	bne.n	800c9c2 <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 800ca42:	2300      	movs	r3, #0
 800ca44:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ca48:	e2c7      	b.n	800cfda <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 800ca4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ca4e:	653b      	str	r3, [r7, #80]	@ 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	685a      	ldr	r2, [r3, #4]
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	885b      	ldrh	r3, [r3, #2]
 800ca58:	3301      	adds	r3, #1
 800ca5a:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 800ca5e:	fb01 f303 	mul.w	r3, r1, r3
 800ca62:	009b      	lsls	r3, r3, #2
 800ca64:	4413      	add	r3, r2
 800ca66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      pivot = *pTmp;
 800ca6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      selectedRow = column;
 800ca74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ca78:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800ca7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ca80:	3301      	adds	r3, #1
 800ca82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ca86:	e02c      	b.n	800cae2 <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	685a      	ldr	r2, [r3, #4]
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	885b      	ldrh	r3, [r3, #2]
 800ca90:	4619      	mov	r1, r3
 800ca92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ca96:	fb03 f101 	mul.w	r1, r3, r1
 800ca9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ca9e:	440b      	add	r3, r1
 800caa0:	009b      	lsls	r3, r3, #2
 800caa2:	4413      	add	r3, r2
 800caa4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          newPivot = *pTmp;
 800caa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	657b      	str	r3, [r7, #84]	@ 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 800cab0:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800cab4:	eeb0 7ae7 	vabs.f32	s14, s15
 800cab8:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800cabc:	eef0 7ae7 	vabs.f32	s15, s15
 800cac0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cac8:	dd06      	ble.n	800cad8 <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 800caca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cace:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            pivot = newPivot;
 800cad2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cad4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800cad8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cadc:	3301      	adds	r3, #1
 800cade:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800cae2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800cae6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cae8:	429a      	cmp	r2, r3
 800caea:	d3cd      	bcc.n	800ca88 <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 800caec:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800caf0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800caf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800caf8:	f000 809b 	beq.w	800cc32 <arm_mat_inverse_f32+0x2b4>
 800cafc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800cb00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cb04:	429a      	cmp	r2, r3
 800cb06:	f000 8094 	beq.w	800cc32 <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	685b      	ldr	r3, [r3, #4]
 800cb0e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	685b      	ldr	r3, [r3, #4]
 800cb16:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	885b      	ldrh	r3, [r3, #2]
 800cb1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cb20:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cb22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cb26:	1ad3      	subs	r3, r2, r3
 800cb28:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cb2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb2c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cb2e:	fb03 f202 	mul.w	r2, r3, r2
 800cb32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cb36:	4413      	add	r3, r2
 800cb38:	009b      	lsls	r3, r3, #2
 800cb3a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800cb3e:	4413      	add	r3, r2
 800cb40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cb44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb46:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800cb4a:	fb03 f202 	mul.w	r2, r3, r2
 800cb4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cb52:	4413      	add	r3, r2
 800cb54:	009b      	lsls	r3, r3, #2
 800cb56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800cb5a:	4413      	add	r3, r2
 800cb5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cb60:	2300      	movs	r3, #0
 800cb62:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800cb66:	e018      	b.n	800cb9a <arm_mat_inverse_f32+0x21c>
 800cb68:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cb70:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cb74:	1d1a      	adds	r2, r3, #4
 800cb76:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 800cb7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800cb7e:	6812      	ldr	r2, [r2, #0]
 800cb80:	601a      	str	r2, [r3, #0]
 800cb82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800cb86:	1d1a      	adds	r2, r3, #4
 800cb88:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800cb8c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cb8e:	601a      	str	r2, [r3, #0]
 800cb90:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800cb94:	3301      	adds	r3, #1
 800cb96:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800cb9a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800cb9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cba0:	429a      	cmp	r2, r3
 800cba2:	dbe1      	blt.n	800cb68 <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	685b      	ldr	r3, [r3, #4]
 800cba8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	685b      	ldr	r3, [r3, #4]
 800cbb0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	885b      	ldrh	r3, [r3, #2]
 800cbb8:	647b      	str	r3, [r7, #68]	@ 0x44
 800cbba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cbbc:	643b      	str	r3, [r7, #64]	@ 0x40
 800cbbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cbc0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cbc2:	fb02 f303 	mul.w	r3, r2, r3
 800cbc6:	009b      	lsls	r3, r3, #2
 800cbc8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800cbcc:	4413      	add	r3, r2
 800cbce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800cbd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cbd4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800cbd8:	fb02 f303 	mul.w	r3, r2, r3
 800cbdc:	009b      	lsls	r3, r3, #2
 800cbde:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800cbe2:	4413      	add	r3, r2
 800cbe4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800cbe8:	2300      	movs	r3, #0
 800cbea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cbee:	e018      	b.n	800cc22 <arm_mat_inverse_f32+0x2a4>
 800cbf0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cbf8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cbfc:	1d1a      	adds	r2, r3, #4
 800cbfe:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800cc02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800cc06:	6812      	ldr	r2, [r2, #0]
 800cc08:	601a      	str	r2, [r3, #0]
 800cc0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cc0e:	1d1a      	adds	r2, r3, #4
 800cc10:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800cc14:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800cc16:	601a      	str	r2, [r3, #0]
 800cc18:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800cc1c:	3301      	adds	r3, #1
 800cc1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cc22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800cc26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cc28:	429a      	cmp	r2, r3
 800cc2a:	dbe1      	blt.n	800cbf0 <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 800cc2c:	2301      	movs	r3, #1
 800cc2e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 800cc32:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800cc36:	2b01      	cmp	r3, #1
 800cc38:	d009      	beq.n	800cc4e <arm_mat_inverse_f32+0x2d0>
 800cc3a:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800cc3e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cc42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc46:	d102      	bne.n	800cc4e <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 800cc48:	f06f 0304 	mvn.w	r3, #4
 800cc4c:	e208      	b.n	800d060 <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 800cc4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cc52:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 800cc56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc5a:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	685b      	ldr	r3, [r3, #4]
 800cc62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	885b      	ldrh	r3, [r3, #2]
 800cc6a:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc6c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cc6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cc72:	1ad3      	subs	r3, r2, r3
 800cc74:	633b      	str	r3, [r7, #48]	@ 0x30
 800cc76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc78:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cc7a:	fb03 f202 	mul.w	r2, r3, r2
 800cc7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cc82:	4413      	add	r3, r2
 800cc84:	009b      	lsls	r3, r3, #2
 800cc86:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800cc8a:	4413      	add	r3, r2
 800cc8c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800cc90:	2300      	movs	r3, #0
 800cc92:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800cc96:	e011      	b.n	800ccbc <arm_mat_inverse_f32+0x33e>
 800cc98:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cc9c:	1d1a      	adds	r2, r3, #4
 800cc9e:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 800cca2:	ed93 7a00 	vldr	s14, [r3]
 800cca6:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800ccaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccae:	edc3 7a00 	vstr	s15, [r3]
 800ccb2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ccb6:	3301      	adds	r3, #1
 800ccb8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ccbc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800ccc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccc2:	429a      	cmp	r2, r3
 800ccc4:	dbe8      	blt.n	800cc98 <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 800ccc6:	683b      	ldr	r3, [r7, #0]
 800ccc8:	685b      	ldr	r3, [r3, #4]
 800ccca:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	885b      	ldrh	r3, [r3, #2]
 800ccd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ccd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccd6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ccd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccda:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ccdc:	fb02 f303 	mul.w	r3, r2, r3
 800cce0:	009b      	lsls	r3, r3, #2
 800cce2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800cce6:	4413      	add	r3, r2
 800cce8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ccec:	2300      	movs	r3, #0
 800ccee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ccf2:	e011      	b.n	800cd18 <arm_mat_inverse_f32+0x39a>
 800ccf4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ccf8:	1d1a      	adds	r2, r3, #4
 800ccfa:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 800ccfe:	ed93 7a00 	vldr	s14, [r3]
 800cd02:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800cd06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd0a:	edc3 7a00 	vstr	s15, [r3]
 800cd0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cd12:	3301      	adds	r3, #1
 800cd14:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800cd18:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800cd1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd1e:	429a      	cmp	r2, r3
 800cd20:	dbe8      	blt.n	800ccf4 <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 800cd22:	2300      	movs	r3, #0
 800cd24:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      for (;rowNb < pivotRow; rowNb++)
 800cd28:	e0ae      	b.n	800ce88 <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	685a      	ldr	r2, [r3, #4]
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	885b      	ldrh	r3, [r3, #2]
 800cd32:	4619      	mov	r1, r3
 800cd34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cd38:	fb03 f101 	mul.w	r1, r3, r1
 800cd3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cd40:	440b      	add	r3, r1
 800cd42:	009b      	lsls	r3, r3, #2
 800cd44:	4413      	add	r3, r2
 800cd46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800cd4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	685b      	ldr	r3, [r3, #4]
 800cd58:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	685b      	ldr	r3, [r3, #4]
 800cd60:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	885b      	ldrh	r3, [r3, #2]
 800cd68:	617b      	str	r3, [r7, #20]
 800cd6a:	697a      	ldr	r2, [r7, #20]
 800cd6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cd70:	1ad3      	subs	r3, r2, r3
 800cd72:	613b      	str	r3, [r7, #16]
 800cd74:	697b      	ldr	r3, [r7, #20]
 800cd76:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800cd7a:	fb03 f202 	mul.w	r2, r3, r2
 800cd7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cd82:	4413      	add	r3, r2
 800cd84:	009b      	lsls	r3, r3, #2
 800cd86:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800cd8a:	4413      	add	r3, r2
 800cd8c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800cd90:	697b      	ldr	r3, [r7, #20]
 800cd92:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cd94:	fb03 f202 	mul.w	r2, r3, r2
 800cd98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cd9c:	4413      	add	r3, r2
 800cd9e:	009b      	lsls	r3, r3, #2
 800cda0:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800cda4:	4413      	add	r3, r2
 800cda6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800cdaa:	2300      	movs	r3, #0
 800cdac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cdb0:	e01a      	b.n	800cde8 <arm_mat_inverse_f32+0x46a>
 800cdb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cdb6:	1d1a      	adds	r2, r3, #4
 800cdb8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800cdbc:	ed93 7a00 	vldr	s14, [r3]
 800cdc0:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800cdc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdc8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800cdcc:	1d1a      	adds	r2, r3, #4
 800cdce:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800cdd2:	ed93 7a00 	vldr	s14, [r3]
 800cdd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cdda:	edc3 7a00 	vstr	s15, [r3]
 800cdde:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800cde2:	3301      	adds	r3, #1
 800cde4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cde8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800cdec:	693b      	ldr	r3, [r7, #16]
 800cdee:	429a      	cmp	r2, r3
 800cdf0:	dbdf      	blt.n	800cdb2 <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800cdf2:	683b      	ldr	r3, [r7, #0]
 800cdf4:	685b      	ldr	r3, [r3, #4]
 800cdf6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	685b      	ldr	r3, [r3, #4]
 800cdfe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ce02:	683b      	ldr	r3, [r7, #0]
 800ce04:	885b      	ldrh	r3, [r3, #2]
 800ce06:	60fb      	str	r3, [r7, #12]
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	60bb      	str	r3, [r7, #8]
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800ce12:	fb02 f303 	mul.w	r3, r2, r3
 800ce16:	009b      	lsls	r3, r3, #2
 800ce18:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ce1c:	4413      	add	r3, r2
 800ce1e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ce26:	fb02 f303 	mul.w	r3, r2, r3
 800ce2a:	009b      	lsls	r3, r3, #2
 800ce2c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ce30:	4413      	add	r3, r2
 800ce32:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ce36:	2300      	movs	r3, #0
 800ce38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ce3c:	e01a      	b.n	800ce74 <arm_mat_inverse_f32+0x4f6>
 800ce3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ce42:	1d1a      	adds	r2, r3, #4
 800ce44:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800ce48:	ed93 7a00 	vldr	s14, [r3]
 800ce4c:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800ce50:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce54:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ce58:	1d1a      	adds	r2, r3, #4
 800ce5a:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800ce5e:	ed93 7a00 	vldr	s14, [r3]
 800ce62:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce66:	edc3 7a00 	vstr	s15, [r3]
 800ce6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ce6e:	3301      	adds	r3, #1
 800ce70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ce74:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800ce78:	68bb      	ldr	r3, [r7, #8]
 800ce7a:	429a      	cmp	r2, r3
 800ce7c:	dbdf      	blt.n	800ce3e <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 800ce7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ce82:	3301      	adds	r3, #1
 800ce84:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ce88:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800ce8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ce8e:	429a      	cmp	r2, r3
 800ce90:	f4ff af4b 	bcc.w	800cd2a <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800ce94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ce96:	3301      	adds	r3, #1
 800ce98:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ce9c:	e092      	b.n	800cfc4 <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	685a      	ldr	r2, [r3, #4]
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	885b      	ldrh	r3, [r3, #2]
 800cea6:	4619      	mov	r1, r3
 800cea8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ceac:	fb03 f101 	mul.w	r1, r3, r1
 800ceb0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ceb4:	440b      	add	r3, r1
 800ceb6:	009b      	lsls	r3, r3, #2
 800ceb8:	4413      	add	r3, r2
 800ceba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800cebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	685b      	ldr	r3, [r3, #4]
 800cecc:	67bb      	str	r3, [r7, #120]	@ 0x78
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	685b      	ldr	r3, [r3, #4]
 800ced2:	677b      	str	r3, [r7, #116]	@ 0x74
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	885b      	ldrh	r3, [r3, #2]
 800ced8:	627b      	str	r3, [r7, #36]	@ 0x24
 800ceda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cedc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cee0:	1ad3      	subs	r3, r2, r3
 800cee2:	623b      	str	r3, [r7, #32]
 800cee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cee6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800ceea:	fb03 f202 	mul.w	r2, r3, r2
 800ceee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cef2:	4413      	add	r3, r2
 800cef4:	009b      	lsls	r3, r3, #2
 800cef6:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800cef8:	4413      	add	r3, r2
 800cefa:	67bb      	str	r3, [r7, #120]	@ 0x78
 800cefc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cefe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cf00:	fb03 f202 	mul.w	r2, r3, r2
 800cf04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cf08:	4413      	add	r3, r2
 800cf0a:	009b      	lsls	r3, r3, #2
 800cf0c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800cf0e:	4413      	add	r3, r2
 800cf10:	677b      	str	r3, [r7, #116]	@ 0x74
 800cf12:	2300      	movs	r3, #0
 800cf14:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800cf16:	e014      	b.n	800cf42 <arm_mat_inverse_f32+0x5c4>
 800cf18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cf1a:	1d1a      	adds	r2, r3, #4
 800cf1c:	677a      	str	r2, [r7, #116]	@ 0x74
 800cf1e:	ed93 7a00 	vldr	s14, [r3]
 800cf22:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800cf26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf2a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cf2c:	1d1a      	adds	r2, r3, #4
 800cf2e:	67ba      	str	r2, [r7, #120]	@ 0x78
 800cf30:	ed93 7a00 	vldr	s14, [r3]
 800cf34:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf38:	edc3 7a00 	vstr	s15, [r3]
 800cf3c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cf3e:	3301      	adds	r3, #1
 800cf40:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800cf42:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800cf44:	6a3b      	ldr	r3, [r7, #32]
 800cf46:	429a      	cmp	r2, r3
 800cf48:	dbe6      	blt.n	800cf18 <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	685b      	ldr	r3, [r3, #4]
 800cf4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	685b      	ldr	r3, [r3, #4]
 800cf54:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	885b      	ldrh	r3, [r3, #2]
 800cf5a:	61fb      	str	r3, [r7, #28]
 800cf5c:	69fb      	ldr	r3, [r7, #28]
 800cf5e:	61bb      	str	r3, [r7, #24]
 800cf60:	69fb      	ldr	r3, [r7, #28]
 800cf62:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800cf66:	fb02 f303 	mul.w	r3, r2, r3
 800cf6a:	009b      	lsls	r3, r3, #2
 800cf6c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800cf6e:	4413      	add	r3, r2
 800cf70:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800cf72:	69fb      	ldr	r3, [r7, #28]
 800cf74:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cf76:	fb02 f303 	mul.w	r3, r2, r3
 800cf7a:	009b      	lsls	r3, r3, #2
 800cf7c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800cf7e:	4413      	add	r3, r2
 800cf80:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cf82:	2300      	movs	r3, #0
 800cf84:	673b      	str	r3, [r7, #112]	@ 0x70
 800cf86:	e014      	b.n	800cfb2 <arm_mat_inverse_f32+0x634>
 800cf88:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cf8a:	1d1a      	adds	r2, r3, #4
 800cf8c:	66ba      	str	r2, [r7, #104]	@ 0x68
 800cf8e:	ed93 7a00 	vldr	s14, [r3]
 800cf92:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800cf96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cf9c:	1d1a      	adds	r2, r3, #4
 800cf9e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800cfa0:	ed93 7a00 	vldr	s14, [r3]
 800cfa4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cfa8:	edc3 7a00 	vstr	s15, [r3]
 800cfac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cfae:	3301      	adds	r3, #1
 800cfb0:	673b      	str	r3, [r7, #112]	@ 0x70
 800cfb2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800cfb4:	69bb      	ldr	r3, [r7, #24]
 800cfb6:	429a      	cmp	r2, r3
 800cfb8:	dbe6      	blt.n	800cf88 <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800cfba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cfbe:	3301      	adds	r3, #1
 800cfc0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800cfc4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800cfc8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cfca:	429a      	cmp	r2, r3
 800cfcc:	f4ff af67 	bcc.w	800ce9e <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 800cfd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cfd4:	3301      	adds	r3, #1
 800cfd6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800cfda:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800cfde:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cfe0:	429a      	cmp	r2, r3
 800cfe2:	f4ff ad32 	bcc.w	800ca4a <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 800cfec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800cff0:	2b01      	cmp	r3, #1
 800cff2:	d033      	beq.n	800d05c <arm_mat_inverse_f32+0x6de>
 800cff4:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800cff8:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d000:	d12c      	bne.n	800d05c <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	685b      	ldr	r3, [r3, #4]
 800d006:	667b      	str	r3, [r7, #100]	@ 0x64
      for (i = 0; i < numRows * numCols; i++)
 800d008:	2300      	movs	r3, #0
 800d00a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d00e:	e010      	b.n	800d032 <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 800d010:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d014:	009b      	lsls	r3, r3, #2
 800d016:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d018:	4413      	add	r3, r2
 800d01a:	edd3 7a00 	vldr	s15, [r3]
 800d01e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d026:	d10d      	bne.n	800d044 <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 800d028:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d02c:	3301      	adds	r3, #1
 800d02e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d032:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d034:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d036:	fb02 f303 	mul.w	r3, r2, r3
 800d03a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800d03e:	429a      	cmp	r2, r3
 800d040:	d3e6      	bcc.n	800d010 <arm_mat_inverse_f32+0x692>
 800d042:	e000      	b.n	800d046 <arm_mat_inverse_f32+0x6c8>
            break;
 800d044:	bf00      	nop
      }

      if (i == numRows * numCols)
 800d046:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d048:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d04a:	fb02 f303 	mul.w	r3, r2, r3
 800d04e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800d052:	429a      	cmp	r2, r3
 800d054:	d102      	bne.n	800d05c <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 800d056:	23fb      	movs	r3, #251	@ 0xfb
 800d058:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
    }
  }

  /* Return to application */
  return (status);
 800d05c:	f997 30c3 	ldrsb.w	r3, [r7, #195]	@ 0xc3
}
 800d060:	4618      	mov	r0, r3
 800d062:	37ec      	adds	r7, #236	@ 0xec
 800d064:	46bd      	mov	sp, r7
 800d066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06a:	4770      	bx	lr

0800d06c <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800d06c:	b480      	push	{r7}
 800d06e:	b093      	sub	sp, #76	@ 0x4c
 800d070:	af00      	add	r7, sp, #0
 800d072:	60f8      	str	r0, [r7, #12]
 800d074:	60b9      	str	r1, [r7, #8]
 800d076:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	685b      	ldr	r3, [r3, #4]
 800d07c:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 800d07e:	68bb      	ldr	r3, [r7, #8]
 800d080:	685b      	ldr	r3, [r3, #4]
 800d082:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	685b      	ldr	r3, [r3, #4]
 800d088:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 800d08a:	68bb      	ldr	r3, [r7, #8]
 800d08c:	685b      	ldr	r3, [r3, #4]
 800d08e:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	685b      	ldr	r3, [r3, #4]
 800d094:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	881b      	ldrh	r3, [r3, #0]
 800d09a:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 800d09c:	68bb      	ldr	r3, [r7, #8]
 800d09e:	885b      	ldrh	r3, [r3, #2]
 800d0a0:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	885b      	ldrh	r3, [r3, #2]
 800d0a6:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d0ac:	8b7b      	ldrh	r3, [r7, #26]
 800d0ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 800d0b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0b2:	009b      	lsls	r3, r3, #2
 800d0b4:	69fa      	ldr	r2, [r7, #28]
 800d0b6:	4413      	add	r3, r2
 800d0b8:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 800d0ba:	8b3b      	ldrh	r3, [r7, #24]
 800d0bc:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 800d0be:	68bb      	ldr	r3, [r7, #8]
 800d0c0:	685b      	ldr	r3, [r3, #4]
 800d0c2:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 800d0c4:	f04f 0300 	mov.w	r3, #0
 800d0c8:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 800d0ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d0cc:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 800d0ce:	8afb      	ldrh	r3, [r7, #22]
 800d0d0:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 800d0d2:	e017      	b.n	800d104 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 800d0d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d0d6:	1d1a      	adds	r2, r3, #4
 800d0d8:	647a      	str	r2, [r7, #68]	@ 0x44
 800d0da:	ed93 7a00 	vldr	s14, [r3]
 800d0de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d0e0:	edd3 7a00 	vldr	s15, [r3]
 800d0e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0e8:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800d0ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d0f0:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 800d0f4:	8b3b      	ldrh	r3, [r7, #24]
 800d0f6:	009b      	lsls	r3, r3, #2
 800d0f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d0fa:	4413      	add	r3, r2
 800d0fc:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 800d0fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d100:	3b01      	subs	r3, #1
 800d102:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 800d104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d106:	2b00      	cmp	r3, #0
 800d108:	d1e4      	bne.n	800d0d4 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 800d10a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d10c:	1d1a      	adds	r2, r3, #4
 800d10e:	63ba      	str	r2, [r7, #56]	@ 0x38
 800d110:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d112:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 800d114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d116:	3b01      	subs	r3, #1
 800d118:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 800d11a:	8b3a      	ldrh	r2, [r7, #24]
 800d11c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d11e:	1ad3      	subs	r3, r2, r3
 800d120:	009b      	lsls	r3, r3, #2
 800d122:	6a3a      	ldr	r2, [r7, #32]
 800d124:	4413      	add	r3, r2
 800d126:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 800d128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d1ca      	bne.n	800d0c4 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 800d12e:	8b3b      	ldrh	r3, [r7, #24]
 800d130:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d132:	4413      	add	r3, r2
 800d134:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 800d136:	8afb      	ldrh	r3, [r7, #22]
 800d138:	009b      	lsls	r3, r3, #2
 800d13a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d13c:	4413      	add	r3, r2
 800d13e:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 800d140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d142:	3b01      	subs	r3, #1
 800d144:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 800d146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d1b1      	bne.n	800d0b0 <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800d14c:	2300      	movs	r3, #0
 800d14e:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 800d150:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800d154:	4618      	mov	r0, r3
 800d156:	374c      	adds	r7, #76	@ 0x4c
 800d158:	46bd      	mov	sp, r7
 800d15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15e:	4770      	bx	lr

0800d160 <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800d160:	b480      	push	{r7}
 800d162:	b08b      	sub	sp, #44	@ 0x2c
 800d164:	af00      	add	r7, sp, #0
 800d166:	60f8      	str	r0, [r7, #12]
 800d168:	60b9      	str	r1, [r7, #8]
 800d16a:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	685b      	ldr	r3, [r3, #4]
 800d170:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800d172:	68bb      	ldr	r3, [r7, #8]
 800d174:	685b      	ldr	r3, [r3, #4]
 800d176:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	685b      	ldr	r3, [r3, #4]
 800d17c:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	881b      	ldrh	r3, [r3, #0]
 800d182:	461a      	mov	r2, r3
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	885b      	ldrh	r3, [r3, #2]
 800d188:	fb02 f303 	mul.w	r3, r2, r3
 800d18c:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800d18e:	697b      	ldr	r3, [r7, #20]
 800d190:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800d192:	e013      	b.n	800d1bc <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 800d194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d196:	1d1a      	adds	r2, r3, #4
 800d198:	627a      	str	r2, [r7, #36]	@ 0x24
 800d19a:	ed93 7a00 	vldr	s14, [r3]
 800d19e:	6a3b      	ldr	r3, [r7, #32]
 800d1a0:	1d1a      	adds	r2, r3, #4
 800d1a2:	623a      	str	r2, [r7, #32]
 800d1a4:	edd3 7a00 	vldr	s15, [r3]
 800d1a8:	69fb      	ldr	r3, [r7, #28]
 800d1aa:	1d1a      	adds	r2, r3, #4
 800d1ac:	61fa      	str	r2, [r7, #28]
 800d1ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d1b2:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800d1b6:	69bb      	ldr	r3, [r7, #24]
 800d1b8:	3b01      	subs	r3, #1
 800d1ba:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800d1bc:	69bb      	ldr	r3, [r7, #24]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d1e8      	bne.n	800d194 <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800d1c6:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	372c      	adds	r7, #44	@ 0x2c
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d4:	4770      	bx	lr

0800d1d6 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800d1d6:	b480      	push	{r7}
 800d1d8:	b08b      	sub	sp, #44	@ 0x2c
 800d1da:	af00      	add	r7, sp, #0
 800d1dc:	6078      	str	r0, [r7, #4]
 800d1de:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	685b      	ldr	r3, [r3, #4]
 800d1e4:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	685b      	ldr	r3, [r3, #4]
 800d1ea:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	881b      	ldrh	r3, [r3, #0]
 800d1f0:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	885b      	ldrh	r3, [r3, #2]
 800d1f6:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 800d1f8:	89fb      	ldrh	r3, [r7, #14]
 800d1fa:	61bb      	str	r3, [r7, #24]
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 800d200:	697b      	ldr	r3, [r7, #20]
 800d202:	009b      	lsls	r3, r3, #2
 800d204:	693a      	ldr	r2, [r7, #16]
 800d206:	4413      	add	r3, r2
 800d208:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 800d20a:	89bb      	ldrh	r3, [r7, #12]
 800d20c:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 800d20e:	e00d      	b.n	800d22c <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 800d210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d212:	1d1a      	adds	r2, r3, #4
 800d214:	627a      	str	r2, [r7, #36]	@ 0x24
 800d216:	681a      	ldr	r2, [r3, #0]
 800d218:	6a3b      	ldr	r3, [r7, #32]
 800d21a:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 800d21c:	89fb      	ldrh	r3, [r7, #14]
 800d21e:	009b      	lsls	r3, r3, #2
 800d220:	6a3a      	ldr	r2, [r7, #32]
 800d222:	4413      	add	r3, r2
 800d224:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 800d226:	69fb      	ldr	r3, [r7, #28]
 800d228:	3b01      	subs	r3, #1
 800d22a:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 800d22c:	69fb      	ldr	r3, [r7, #28]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d1ee      	bne.n	800d210 <arm_mat_trans_f32+0x3a>
      }

      i++;
 800d232:	697b      	ldr	r3, [r7, #20]
 800d234:	3301      	adds	r3, #1
 800d236:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 800d238:	69bb      	ldr	r3, [r7, #24]
 800d23a:	3b01      	subs	r3, #1
 800d23c:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 800d23e:	69bb      	ldr	r3, [r7, #24]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d1dd      	bne.n	800d200 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800d244:	2300      	movs	r3, #0
 800d246:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 800d248:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800d24c:	4618      	mov	r0, r3
 800d24e:	372c      	adds	r7, #44	@ 0x2c
 800d250:	46bd      	mov	sp, r7
 800d252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d256:	4770      	bx	lr

0800d258 <memset>:
 800d258:	4402      	add	r2, r0
 800d25a:	4603      	mov	r3, r0
 800d25c:	4293      	cmp	r3, r2
 800d25e:	d100      	bne.n	800d262 <memset+0xa>
 800d260:	4770      	bx	lr
 800d262:	f803 1b01 	strb.w	r1, [r3], #1
 800d266:	e7f9      	b.n	800d25c <memset+0x4>

0800d268 <__errno>:
 800d268:	4b01      	ldr	r3, [pc, #4]	@ (800d270 <__errno+0x8>)
 800d26a:	6818      	ldr	r0, [r3, #0]
 800d26c:	4770      	bx	lr
 800d26e:	bf00      	nop
 800d270:	20000240 	.word	0x20000240

0800d274 <__libc_init_array>:
 800d274:	b570      	push	{r4, r5, r6, lr}
 800d276:	4d0d      	ldr	r5, [pc, #52]	@ (800d2ac <__libc_init_array+0x38>)
 800d278:	4c0d      	ldr	r4, [pc, #52]	@ (800d2b0 <__libc_init_array+0x3c>)
 800d27a:	1b64      	subs	r4, r4, r5
 800d27c:	10a4      	asrs	r4, r4, #2
 800d27e:	2600      	movs	r6, #0
 800d280:	42a6      	cmp	r6, r4
 800d282:	d109      	bne.n	800d298 <__libc_init_array+0x24>
 800d284:	4d0b      	ldr	r5, [pc, #44]	@ (800d2b4 <__libc_init_array+0x40>)
 800d286:	4c0c      	ldr	r4, [pc, #48]	@ (800d2b8 <__libc_init_array+0x44>)
 800d288:	f000 f848 	bl	800d31c <_init>
 800d28c:	1b64      	subs	r4, r4, r5
 800d28e:	10a4      	asrs	r4, r4, #2
 800d290:	2600      	movs	r6, #0
 800d292:	42a6      	cmp	r6, r4
 800d294:	d105      	bne.n	800d2a2 <__libc_init_array+0x2e>
 800d296:	bd70      	pop	{r4, r5, r6, pc}
 800d298:	f855 3b04 	ldr.w	r3, [r5], #4
 800d29c:	4798      	blx	r3
 800d29e:	3601      	adds	r6, #1
 800d2a0:	e7ee      	b.n	800d280 <__libc_init_array+0xc>
 800d2a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800d2a6:	4798      	blx	r3
 800d2a8:	3601      	adds	r6, #1
 800d2aa:	e7f2      	b.n	800d292 <__libc_init_array+0x1e>
 800d2ac:	0800d37c 	.word	0x0800d37c
 800d2b0:	0800d37c 	.word	0x0800d37c
 800d2b4:	0800d37c 	.word	0x0800d37c
 800d2b8:	0800d380 	.word	0x0800d380

0800d2bc <memcpy>:
 800d2bc:	440a      	add	r2, r1
 800d2be:	4291      	cmp	r1, r2
 800d2c0:	f100 33ff 	add.w	r3, r0, #4294967295
 800d2c4:	d100      	bne.n	800d2c8 <memcpy+0xc>
 800d2c6:	4770      	bx	lr
 800d2c8:	b510      	push	{r4, lr}
 800d2ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d2ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d2d2:	4291      	cmp	r1, r2
 800d2d4:	d1f9      	bne.n	800d2ca <memcpy+0xe>
 800d2d6:	bd10      	pop	{r4, pc}

0800d2d8 <sqrtf>:
 800d2d8:	b508      	push	{r3, lr}
 800d2da:	ed2d 8b02 	vpush	{d8}
 800d2de:	eeb0 8a40 	vmov.f32	s16, s0
 800d2e2:	f000 f817 	bl	800d314 <__ieee754_sqrtf>
 800d2e6:	eeb4 8a48 	vcmp.f32	s16, s16
 800d2ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2ee:	d60c      	bvs.n	800d30a <sqrtf+0x32>
 800d2f0:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800d310 <sqrtf+0x38>
 800d2f4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800d2f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2fc:	d505      	bpl.n	800d30a <sqrtf+0x32>
 800d2fe:	f7ff ffb3 	bl	800d268 <__errno>
 800d302:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800d306:	2321      	movs	r3, #33	@ 0x21
 800d308:	6003      	str	r3, [r0, #0]
 800d30a:	ecbd 8b02 	vpop	{d8}
 800d30e:	bd08      	pop	{r3, pc}
 800d310:	00000000 	.word	0x00000000

0800d314 <__ieee754_sqrtf>:
 800d314:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d318:	4770      	bx	lr
	...

0800d31c <_init>:
 800d31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d31e:	bf00      	nop
 800d320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d322:	bc08      	pop	{r3}
 800d324:	469e      	mov	lr, r3
 800d326:	4770      	bx	lr

0800d328 <_fini>:
 800d328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d32a:	bf00      	nop
 800d32c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d32e:	bc08      	pop	{r3}
 800d330:	469e      	mov	lr, r3
 800d332:	4770      	bx	lr
