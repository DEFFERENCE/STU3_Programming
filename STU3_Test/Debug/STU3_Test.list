
STU3_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ed0  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080050a8  080050a8  000060a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050b8  080050b8  0000700c  2**0
                  CONTENTS
  4 .ARM          00000000  080050b8  080050b8  0000700c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080050b8  080050b8  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050b8  080050b8  000060b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080050bc  080050bc  000060bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080050c0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  2000000c  080050cc  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  080050cc  000072b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010e0b  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002365  00000000  00000000  00017e47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001150  00000000  00000000  0001a1b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d59  00000000  00000000  0001b300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026f45  00000000  00000000  0001c059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001233f  00000000  00000000  00042f9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108d27  00000000  00000000  000552dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015e004  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a58  00000000  00000000  0015e048  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00162aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005090 	.word	0x08005090

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08005090 	.word	0x08005090

08000218 <Encoder_Init>:
#include "Encoder.h"

#define Count_PER_REV 12000.0f
#define TWO_PI 6.283185f

void Encoder_Init(Encoder *enc, TIM_HandleTypeDef *htim) {
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
    enc->htim = htim;
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	683a      	ldr	r2, [r7, #0]
 8000226:	601a      	str	r2, [r3, #0]
    HAL_TIM_Encoder_Start(htim, TIM_CHANNEL_ALL);
 8000228:	213c      	movs	r1, #60	@ 0x3c
 800022a:	6838      	ldr	r0, [r7, #0]
 800022c:	f003 fe82 	bl	8003f34 <HAL_TIM_Encoder_Start>

    enc->lastRawPosition = __HAL_TIM_GET_COUNTER(htim);
 8000230:	683b      	ldr	r3, [r7, #0]
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000236:	461a      	mov	r2, r3
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	605a      	str	r2, [r3, #4]
    enc->position = 0;
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	f04f 0200 	mov.w	r2, #0
 8000242:	609a      	str	r2, [r3, #8]
    enc->velocity = 0;
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	f04f 0200 	mov.w	r2, #0
 800024a:	60da      	str	r2, [r3, #12]
    enc->acceleration = 0;
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	f04f 0200 	mov.w	r2, #0
 8000252:	611a      	str	r2, [r3, #16]
    enc->lastPosition = 0;
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	f04f 0200 	mov.w	r2, #0
 800025a:	615a      	str	r2, [r3, #20]
    enc->lastVelocity = 0;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f04f 0200 	mov.w	r2, #0
 8000262:	619a      	str	r2, [r3, #24]
}
 8000264:	bf00      	nop
 8000266:	3708      	adds	r7, #8
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}

0800026c <Encoder_Update>:

void Encoder_Update(Encoder *enc, float dt) {
 800026c:	b480      	push	{r7}
 800026e:	b085      	sub	sp, #20
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
 8000274:	ed87 0a00 	vstr	s0, [r7]
    int32_t rawPosition = __HAL_TIM_GET_COUNTER(enc->htim);
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000280:	60bb      	str	r3, [r7, #8]
    int32_t deltaRaw = rawPosition - enc->lastRawPosition;
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	685b      	ldr	r3, [r3, #4]
 8000286:	68ba      	ldr	r2, [r7, #8]
 8000288:	1ad3      	subs	r3, r2, r3
 800028a:	60fb      	str	r3, [r7, #12]

    // Handle 16-bit counter wrap-around
    if (deltaRaw > 30000) {
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	f247 5230 	movw	r2, #30000	@ 0x7530
 8000292:	4293      	cmp	r3, r2
 8000294:	dd05      	ble.n	80002a2 <Encoder_Update+0x36>
        deltaRaw -= 60000;
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	f5a3 436a 	sub.w	r3, r3, #59904	@ 0xea00
 800029c:	3b60      	subs	r3, #96	@ 0x60
 800029e:	60fb      	str	r3, [r7, #12]
 80002a0:	e008      	b.n	80002b4 <Encoder_Update+0x48>
    } else if (deltaRaw < -30000) {
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	4a25      	ldr	r2, [pc, #148]	@ (800033c <Encoder_Update+0xd0>)
 80002a6:	4293      	cmp	r3, r2
 80002a8:	da04      	bge.n	80002b4 <Encoder_Update+0x48>
        deltaRaw += 60000;
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	f503 436a 	add.w	r3, r3, #59904	@ 0xea00
 80002b0:	3360      	adds	r3, #96	@ 0x60
 80002b2:	60fb      	str	r3, [r7, #12]
    }

    enc->position += ((float)deltaRaw * TWO_PI) / Count_PER_REV;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	ed93 7a02 	vldr	s14, [r3, #8]
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	ee07 3a90 	vmov	s15, r3
 80002c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80002c4:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8000340 <Encoder_Update+0xd4>
 80002c8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80002cc:	ed9f 6a1d 	vldr	s12, [pc, #116]	@ 8000344 <Encoder_Update+0xd8>
 80002d0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80002d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	edc3 7a02 	vstr	s15, [r3, #8]
    enc->velocity = (enc->position - enc->lastPosition) / dt;
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	ed93 7a02 	vldr	s14, [r3, #8]
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	edd3 7a05 	vldr	s15, [r3, #20]
 80002ea:	ee77 6a67 	vsub.f32	s13, s14, s15
 80002ee:	ed97 7a00 	vldr	s14, [r7]
 80002f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	edc3 7a03 	vstr	s15, [r3, #12]
    enc->acceleration = (enc->velocity - enc->lastVelocity) / dt;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	ed93 7a03 	vldr	s14, [r3, #12]
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	edd3 7a06 	vldr	s15, [r3, #24]
 8000308:	ee77 6a67 	vsub.f32	s13, s14, s15
 800030c:	ed97 7a00 	vldr	s14, [r7]
 8000310:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	edc3 7a04 	vstr	s15, [r3, #16]

    enc->lastRawPosition = rawPosition;
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	68ba      	ldr	r2, [r7, #8]
 800031e:	605a      	str	r2, [r3, #4]
    enc->lastPosition = enc->position;
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	689a      	ldr	r2, [r3, #8]
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	615a      	str	r2, [r3, #20]
    enc->lastVelocity = enc->velocity;
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	68da      	ldr	r2, [r3, #12]
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	619a      	str	r2, [r3, #24]
}
 8000330:	bf00      	nop
 8000332:	3714      	adds	r7, #20
 8000334:	46bd      	mov	sp, r7
 8000336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033a:	4770      	bx	lr
 800033c:	ffff8ad0 	.word	0xffff8ad0
 8000340:	40c90fda 	.word	0x40c90fda
 8000344:	463b8000 	.word	0x463b8000

08000348 <Encoder_setLimit>:

void Encoder_setLimit(Encoder *enc, float limit)
{
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
 8000350:	ed87 0a00 	vstr	s0, [r7]
		enc->position = limit;
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	683a      	ldr	r2, [r7, #0]
 8000358:	609a      	str	r2, [r3, #8]
}
 800035a:	bf00      	nop
 800035c:	370c      	adds	r7, #12
 800035e:	46bd      	mov	sp, r7
 8000360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000364:	4770      	bx	lr

08000366 <Encoder_GetPosition>:

float Encoder_GetPosition(Encoder *enc) {
 8000366:	b480      	push	{r7}
 8000368:	b083      	sub	sp, #12
 800036a:	af00      	add	r7, sp, #0
 800036c:	6078      	str	r0, [r7, #4]
    return enc->position;
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	689b      	ldr	r3, [r3, #8]
 8000372:	ee07 3a90 	vmov	s15, r3
}
 8000376:	eeb0 0a67 	vmov.f32	s0, s15
 800037a:	370c      	adds	r7, #12
 800037c:	46bd      	mov	sp, r7
 800037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000382:	4770      	bx	lr

08000384 <Encoder_GetVelocity>:

float Encoder_GetVelocity(Encoder *enc) {
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
    return enc->velocity;
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	68db      	ldr	r3, [r3, #12]
 8000390:	ee07 3a90 	vmov	s15, r3
}
 8000394:	eeb0 0a67 	vmov.f32	s0, s15
 8000398:	370c      	adds	r7, #12
 800039a:	46bd      	mov	sp, r7
 800039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a0:	4770      	bx	lr

080003a2 <Encoder_GetAcceleration>:

float Encoder_GetAcceleration(Encoder *enc) {
 80003a2:	b480      	push	{r7}
 80003a4:	b083      	sub	sp, #12
 80003a6:	af00      	add	r7, sp, #0
 80003a8:	6078      	str	r0, [r7, #4]
    return enc->acceleration;
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	691b      	ldr	r3, [r3, #16]
 80003ae:	ee07 3a90 	vmov	s15, r3
}
 80003b2:	eeb0 0a67 	vmov.f32	s0, s15
 80003b6:	370c      	adds	r7, #12
 80003b8:	46bd      	mov	sp, r7
 80003ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003be:	4770      	bx	lr

080003c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b084      	sub	sp, #16
 80003c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003c6:	f001 f82c 	bl	8001422 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003ca:	f000 f897 	bl	80004fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003ce:	f000 fc65 	bl	8000c9c <MX_GPIO_Init>
  MX_TIM3_Init();
 80003d2:	f000 fa57 	bl	8000884 <MX_TIM3_Init>
  MX_ADC1_Init();
 80003d6:	f000 f8dd 	bl	8000594 <MX_ADC1_Init>
  MX_TIM1_Init();
 80003da:	f000 f955 	bl	8000688 <MX_TIM1_Init>
  MX_TIM2_Init();
 80003de:	f000 fa03 	bl	80007e8 <MX_TIM2_Init>
  MX_TIM4_Init();
 80003e2:	f000 faa5 	bl	8000930 <MX_TIM4_Init>
  MX_TIM20_Init();
 80003e6:	f000 fba9 	bl	8000b3c <MX_TIM20_Init>
  MX_TIM8_Init();
 80003ea:	f000 faf7 	bl	80009dc <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
	Encoder_Init(&encoder1, &htim4);
 80003ee:	4936      	ldr	r1, [pc, #216]	@ (80004c8 <main+0x108>)
 80003f0:	4836      	ldr	r0, [pc, #216]	@ (80004cc <main+0x10c>)
 80003f2:	f7ff ff11 	bl	8000218 <Encoder_Init>
	Encoder_Init(&encoder2, &htim3);
 80003f6:	4936      	ldr	r1, [pc, #216]	@ (80004d0 <main+0x110>)
 80003f8:	4836      	ldr	r0, [pc, #216]	@ (80004d4 <main+0x114>)
 80003fa:	f7ff ff0d 	bl	8000218 <Encoder_Init>
	int lastTick = 0;
 80003fe:	2300      	movs	r3, #0
 8000400:	60fb      	str	r3, [r7, #12]
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000402:	213c      	movs	r1, #60	@ 0x3c
 8000404:	4832      	ldr	r0, [pc, #200]	@ (80004d0 <main+0x110>)
 8000406:	f003 fd95 	bl	8003f34 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800040a:	213c      	movs	r1, #60	@ 0x3c
 800040c:	482e      	ldr	r0, [pc, #184]	@ (80004c8 <main+0x108>)
 800040e:	f003 fd91 	bl	8003f34 <HAL_TIM_Encoder_Start>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		uint32_t currentTick = HAL_GetTick();
 8000412:	f001 f86b 	bl	80014ec <HAL_GetTick>
 8000416:	60b8      	str	r0, [r7, #8]
		float dt = (currentTick - lastTick) / 1000.0f;
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	68ba      	ldr	r2, [r7, #8]
 800041c:	1ad3      	subs	r3, r2, r3
 800041e:	ee07 3a90 	vmov	s15, r3
 8000422:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000426:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 80004d8 <main+0x118>
 800042a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800042e:	edc7 7a01 	vstr	s15, [r7, #4]
		QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim4);
 8000432:	4b25      	ldr	r3, [pc, #148]	@ (80004c8 <main+0x108>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000438:	4a28      	ldr	r2, [pc, #160]	@ (80004dc <main+0x11c>)
 800043a:	6013      	str	r3, [r2, #0]
		if (dt >= 0.01f) {
 800043c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000440:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80004e0 <main+0x120>
 8000444:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800044c:	db3b      	blt.n	80004c6 <main+0x106>
			Encoder_Update(&encoder1, dt);
 800044e:	ed97 0a01 	vldr	s0, [r7, #4]
 8000452:	481e      	ldr	r0, [pc, #120]	@ (80004cc <main+0x10c>)
 8000454:	f7ff ff0a 	bl	800026c <Encoder_Update>
			Encoder_Update(&encoder2, dt);
 8000458:	ed97 0a01 	vldr	s0, [r7, #4]
 800045c:	481d      	ldr	r0, [pc, #116]	@ (80004d4 <main+0x114>)
 800045e:	f7ff ff05 	bl	800026c <Encoder_Update>
			lastTick = currentTick;
 8000462:	68bb      	ldr	r3, [r7, #8]
 8000464:	60fb      	str	r3, [r7, #12]

			p1 = Encoder_GetPosition(&encoder1);
 8000466:	4819      	ldr	r0, [pc, #100]	@ (80004cc <main+0x10c>)
 8000468:	f7ff ff7d 	bl	8000366 <Encoder_GetPosition>
 800046c:	eef0 7a40 	vmov.f32	s15, s0
 8000470:	4b1c      	ldr	r3, [pc, #112]	@ (80004e4 <main+0x124>)
 8000472:	edc3 7a00 	vstr	s15, [r3]
			v1 = Encoder_GetVelocity(&encoder1);
 8000476:	4815      	ldr	r0, [pc, #84]	@ (80004cc <main+0x10c>)
 8000478:	f7ff ff84 	bl	8000384 <Encoder_GetVelocity>
 800047c:	eef0 7a40 	vmov.f32	s15, s0
 8000480:	4b19      	ldr	r3, [pc, #100]	@ (80004e8 <main+0x128>)
 8000482:	edc3 7a00 	vstr	s15, [r3]
			a1 = Encoder_GetAcceleration(&encoder1);
 8000486:	4811      	ldr	r0, [pc, #68]	@ (80004cc <main+0x10c>)
 8000488:	f7ff ff8b 	bl	80003a2 <Encoder_GetAcceleration>
 800048c:	eef0 7a40 	vmov.f32	s15, s0
 8000490:	4b16      	ldr	r3, [pc, #88]	@ (80004ec <main+0x12c>)
 8000492:	edc3 7a00 	vstr	s15, [r3]

			p2 = Encoder_GetPosition(&encoder2);
 8000496:	480f      	ldr	r0, [pc, #60]	@ (80004d4 <main+0x114>)
 8000498:	f7ff ff65 	bl	8000366 <Encoder_GetPosition>
 800049c:	eef0 7a40 	vmov.f32	s15, s0
 80004a0:	4b13      	ldr	r3, [pc, #76]	@ (80004f0 <main+0x130>)
 80004a2:	edc3 7a00 	vstr	s15, [r3]
			v2 = Encoder_GetVelocity(&encoder2);
 80004a6:	480b      	ldr	r0, [pc, #44]	@ (80004d4 <main+0x114>)
 80004a8:	f7ff ff6c 	bl	8000384 <Encoder_GetVelocity>
 80004ac:	eef0 7a40 	vmov.f32	s15, s0
 80004b0:	4b10      	ldr	r3, [pc, #64]	@ (80004f4 <main+0x134>)
 80004b2:	edc3 7a00 	vstr	s15, [r3]
			a2 = Encoder_GetAcceleration(&encoder2);
 80004b6:	4807      	ldr	r0, [pc, #28]	@ (80004d4 <main+0x114>)
 80004b8:	f7ff ff73 	bl	80003a2 <Encoder_GetAcceleration>
 80004bc:	eef0 7a40 	vmov.f32	s15, s0
 80004c0:	4b0d      	ldr	r3, [pc, #52]	@ (80004f8 <main+0x138>)
 80004c2:	edc3 7a00 	vstr	s15, [r3]
	while (1) {
 80004c6:	e7a4      	b.n	8000412 <main+0x52>
 80004c8:	20000178 	.word	0x20000178
 80004cc:	2000025c 	.word	0x2000025c
 80004d0:	2000012c 	.word	0x2000012c
 80004d4:	20000278 	.word	0x20000278
 80004d8:	447a0000 	.word	0x447a0000
 80004dc:	20000294 	.word	0x20000294
 80004e0:	3c23d70a 	.word	0x3c23d70a
 80004e4:	20000298 	.word	0x20000298
 80004e8:	2000029c 	.word	0x2000029c
 80004ec:	200002a0 	.word	0x200002a0
 80004f0:	200002a4 	.word	0x200002a4
 80004f4:	200002a8 	.word	0x200002a8
 80004f8:	200002ac 	.word	0x200002ac

080004fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b094      	sub	sp, #80	@ 0x50
 8000500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000502:	f107 0318 	add.w	r3, r7, #24
 8000506:	2238      	movs	r2, #56	@ 0x38
 8000508:	2100      	movs	r1, #0
 800050a:	4618      	mov	r0, r3
 800050c:	f004 fd94 	bl	8005038 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
 800051c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800051e:	2000      	movs	r0, #0
 8000520:	f002 fbb2 	bl	8002c88 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000524:	2302      	movs	r3, #2
 8000526:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000528:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800052c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800052e:	2340      	movs	r3, #64	@ 0x40
 8000530:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000532:	2302      	movs	r3, #2
 8000534:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000536:	2302      	movs	r3, #2
 8000538:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800053a:	2304      	movs	r3, #4
 800053c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800053e:	2355      	movs	r3, #85	@ 0x55
 8000540:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000542:	2302      	movs	r3, #2
 8000544:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000546:	2302      	movs	r3, #2
 8000548:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800054a:	2302      	movs	r3, #2
 800054c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800054e:	f107 0318 	add.w	r3, r7, #24
 8000552:	4618      	mov	r0, r3
 8000554:	f002 fc4c 	bl	8002df0 <HAL_RCC_OscConfig>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800055e:	f000 fcc7 	bl	8000ef0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000562:	230f      	movs	r3, #15
 8000564:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000566:	2303      	movs	r3, #3
 8000568:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800056a:	2300      	movs	r3, #0
 800056c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800056e:	2300      	movs	r3, #0
 8000570:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000572:	2300      	movs	r3, #0
 8000574:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000576:	1d3b      	adds	r3, r7, #4
 8000578:	2104      	movs	r1, #4
 800057a:	4618      	mov	r0, r3
 800057c:	f002 ff4a 	bl	8003414 <HAL_RCC_ClockConfig>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000586:	f000 fcb3 	bl	8000ef0 <Error_Handler>
  }
}
 800058a:	bf00      	nop
 800058c:	3750      	adds	r7, #80	@ 0x50
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
	...

08000594 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08c      	sub	sp, #48	@ 0x30
 8000598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800059a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	2220      	movs	r2, #32
 80005aa:	2100      	movs	r1, #0
 80005ac:	4618      	mov	r0, r3
 80005ae:	f004 fd43 	bl	8005038 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005b2:	4b32      	ldr	r3, [pc, #200]	@ (800067c <MX_ADC1_Init+0xe8>)
 80005b4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80005b8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005ba:	4b30      	ldr	r3, [pc, #192]	@ (800067c <MX_ADC1_Init+0xe8>)
 80005bc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80005c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005c2:	4b2e      	ldr	r3, [pc, #184]	@ (800067c <MX_ADC1_Init+0xe8>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005c8:	4b2c      	ldr	r3, [pc, #176]	@ (800067c <MX_ADC1_Init+0xe8>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80005ce:	4b2b      	ldr	r3, [pc, #172]	@ (800067c <MX_ADC1_Init+0xe8>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005d4:	4b29      	ldr	r3, [pc, #164]	@ (800067c <MX_ADC1_Init+0xe8>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005da:	4b28      	ldr	r3, [pc, #160]	@ (800067c <MX_ADC1_Init+0xe8>)
 80005dc:	2204      	movs	r2, #4
 80005de:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005e0:	4b26      	ldr	r3, [pc, #152]	@ (800067c <MX_ADC1_Init+0xe8>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005e6:	4b25      	ldr	r3, [pc, #148]	@ (800067c <MX_ADC1_Init+0xe8>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80005ec:	4b23      	ldr	r3, [pc, #140]	@ (800067c <MX_ADC1_Init+0xe8>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005f2:	4b22      	ldr	r3, [pc, #136]	@ (800067c <MX_ADC1_Init+0xe8>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005fa:	4b20      	ldr	r3, [pc, #128]	@ (800067c <MX_ADC1_Init+0xe8>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000600:	4b1e      	ldr	r3, [pc, #120]	@ (800067c <MX_ADC1_Init+0xe8>)
 8000602:	2200      	movs	r2, #0
 8000604:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000606:	4b1d      	ldr	r3, [pc, #116]	@ (800067c <MX_ADC1_Init+0xe8>)
 8000608:	2200      	movs	r2, #0
 800060a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800060e:	4b1b      	ldr	r3, [pc, #108]	@ (800067c <MX_ADC1_Init+0xe8>)
 8000610:	2200      	movs	r2, #0
 8000612:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000614:	4b19      	ldr	r3, [pc, #100]	@ (800067c <MX_ADC1_Init+0xe8>)
 8000616:	2200      	movs	r2, #0
 8000618:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800061c:	4817      	ldr	r0, [pc, #92]	@ (800067c <MX_ADC1_Init+0xe8>)
 800061e:	f001 f947 	bl	80018b0 <HAL_ADC_Init>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000628:	f000 fc62 	bl	8000ef0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800062c:	2300      	movs	r3, #0
 800062e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000630:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000634:	4619      	mov	r1, r3
 8000636:	4811      	ldr	r0, [pc, #68]	@ (800067c <MX_ADC1_Init+0xe8>)
 8000638:	f001 ff5c 	bl	80024f4 <HAL_ADCEx_MultiModeConfigChannel>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000642:	f000 fc55 	bl	8000ef0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000646:	4b0e      	ldr	r3, [pc, #56]	@ (8000680 <MX_ADC1_Init+0xec>)
 8000648:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800064a:	2306      	movs	r3, #6
 800064c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800064e:	2300      	movs	r3, #0
 8000650:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000652:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <MX_ADC1_Init+0xf0>)
 8000654:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000656:	2304      	movs	r3, #4
 8000658:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	4619      	mov	r1, r3
 8000662:	4806      	ldr	r0, [pc, #24]	@ (800067c <MX_ADC1_Init+0xe8>)
 8000664:	f001 fae0 	bl	8001c28 <HAL_ADC_ConfigChannel>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800066e:	f000 fc3f 	bl	8000ef0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000672:	bf00      	nop
 8000674:	3730      	adds	r7, #48	@ 0x30
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000028 	.word	0x20000028
 8000680:	04300002 	.word	0x04300002
 8000684:	407f0000 	.word	0x407f0000

08000688 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b09c      	sub	sp, #112	@ 0x70
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800068e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800069c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006a8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]
 80006b8:	615a      	str	r2, [r3, #20]
 80006ba:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	2234      	movs	r2, #52	@ 0x34
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f004 fcb8 	bl	8005038 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006c8:	4b45      	ldr	r3, [pc, #276]	@ (80007e0 <MX_TIM1_Init+0x158>)
 80006ca:	4a46      	ldr	r2, [pc, #280]	@ (80007e4 <MX_TIM1_Init+0x15c>)
 80006cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80006ce:	4b44      	ldr	r3, [pc, #272]	@ (80007e0 <MX_TIM1_Init+0x158>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006d4:	4b42      	ldr	r3, [pc, #264]	@ (80007e0 <MX_TIM1_Init+0x158>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000;
 80006da:	4b41      	ldr	r3, [pc, #260]	@ (80007e0 <MX_TIM1_Init+0x158>)
 80006dc:	f64e 2260 	movw	r2, #60000	@ 0xea60
 80006e0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006e2:	4b3f      	ldr	r3, [pc, #252]	@ (80007e0 <MX_TIM1_Init+0x158>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006e8:	4b3d      	ldr	r3, [pc, #244]	@ (80007e0 <MX_TIM1_Init+0x158>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ee:	4b3c      	ldr	r3, [pc, #240]	@ (80007e0 <MX_TIM1_Init+0x158>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006f4:	483a      	ldr	r0, [pc, #232]	@ (80007e0 <MX_TIM1_Init+0x158>)
 80006f6:	f003 fabf 	bl	8003c78 <HAL_TIM_Base_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000700:	f000 fbf6 	bl	8000ef0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000704:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000708:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800070a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800070e:	4619      	mov	r1, r3
 8000710:	4833      	ldr	r0, [pc, #204]	@ (80007e0 <MX_TIM1_Init+0x158>)
 8000712:	f003 fdb1 	bl	8004278 <HAL_TIM_ConfigClockSource>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800071c:	f000 fbe8 	bl	8000ef0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000720:	482f      	ldr	r0, [pc, #188]	@ (80007e0 <MX_TIM1_Init+0x158>)
 8000722:	f003 fb00 	bl	8003d26 <HAL_TIM_PWM_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800072c:	f000 fbe0 	bl	8000ef0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000730:	2300      	movs	r3, #0
 8000732:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000734:	2300      	movs	r3, #0
 8000736:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000738:	2300      	movs	r3, #0
 800073a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800073c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000740:	4619      	mov	r1, r3
 8000742:	4827      	ldr	r0, [pc, #156]	@ (80007e0 <MX_TIM1_Init+0x158>)
 8000744:	f004 fb4e 	bl	8004de4 <HAL_TIMEx_MasterConfigSynchronization>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800074e:	f000 fbcf 	bl	8000ef0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000752:	2360      	movs	r3, #96	@ 0x60
 8000754:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800075a:	2300      	movs	r3, #0
 800075c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800075e:	2300      	movs	r3, #0
 8000760:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000762:	2300      	movs	r3, #0
 8000764:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000766:	2300      	movs	r3, #0
 8000768:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800076a:	2300      	movs	r3, #0
 800076c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800076e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000772:	2208      	movs	r2, #8
 8000774:	4619      	mov	r1, r3
 8000776:	481a      	ldr	r0, [pc, #104]	@ (80007e0 <MX_TIM1_Init+0x158>)
 8000778:	f003 fc6a 	bl	8004050 <HAL_TIM_PWM_ConfigChannel>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000782:	f000 fbb5 	bl	8000ef0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000786:	2300      	movs	r3, #0
 8000788:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800078a:	2300      	movs	r3, #0
 800078c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000796:	2300      	movs	r3, #0
 8000798:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800079a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800079e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80007a4:	2300      	movs	r3, #0
 80007a6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80007a8:	2300      	movs	r3, #0
 80007aa:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80007ac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80007b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80007b6:	2300      	movs	r3, #0
 80007b8:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007ba:	2300      	movs	r3, #0
 80007bc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	4619      	mov	r1, r3
 80007c2:	4807      	ldr	r0, [pc, #28]	@ (80007e0 <MX_TIM1_Init+0x158>)
 80007c4:	f004 fba4 	bl	8004f10 <HAL_TIMEx_ConfigBreakDeadTime>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 80007ce:	f000 fb8f 	bl	8000ef0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007d2:	4803      	ldr	r0, [pc, #12]	@ (80007e0 <MX_TIM1_Init+0x158>)
 80007d4:	f000 fd14 	bl	8001200 <HAL_TIM_MspPostInit>

}
 80007d8:	bf00      	nop
 80007da:	3770      	adds	r7, #112	@ 0x70
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20000094 	.word	0x20000094
 80007e4:	40012c00 	.word	0x40012c00

080007e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b088      	sub	sp, #32
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ee:	f107 0310 	add.w	r3, r7, #16
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000806:	4b1e      	ldr	r3, [pc, #120]	@ (8000880 <MX_TIM2_Init+0x98>)
 8000808:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800080c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800080e:	4b1c      	ldr	r3, [pc, #112]	@ (8000880 <MX_TIM2_Init+0x98>)
 8000810:	2200      	movs	r2, #0
 8000812:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000814:	4b1a      	ldr	r3, [pc, #104]	@ (8000880 <MX_TIM2_Init+0x98>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800081a:	4b19      	ldr	r3, [pc, #100]	@ (8000880 <MX_TIM2_Init+0x98>)
 800081c:	f04f 32ff 	mov.w	r2, #4294967295
 8000820:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000822:	4b17      	ldr	r3, [pc, #92]	@ (8000880 <MX_TIM2_Init+0x98>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000828:	4b15      	ldr	r3, [pc, #84]	@ (8000880 <MX_TIM2_Init+0x98>)
 800082a:	2200      	movs	r2, #0
 800082c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800082e:	4814      	ldr	r0, [pc, #80]	@ (8000880 <MX_TIM2_Init+0x98>)
 8000830:	f003 fa22 	bl	8003c78 <HAL_TIM_Base_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800083a:	f000 fb59 	bl	8000ef0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800083e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000842:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000844:	f107 0310 	add.w	r3, r7, #16
 8000848:	4619      	mov	r1, r3
 800084a:	480d      	ldr	r0, [pc, #52]	@ (8000880 <MX_TIM2_Init+0x98>)
 800084c:	f003 fd14 	bl	8004278 <HAL_TIM_ConfigClockSource>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000856:	f000 fb4b 	bl	8000ef0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800085e:	2300      	movs	r3, #0
 8000860:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	4619      	mov	r1, r3
 8000866:	4806      	ldr	r0, [pc, #24]	@ (8000880 <MX_TIM2_Init+0x98>)
 8000868:	f004 fabc 	bl	8004de4 <HAL_TIMEx_MasterConfigSynchronization>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000872:	f000 fb3d 	bl	8000ef0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	3720      	adds	r7, #32
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	200000e0 	.word	0x200000e0

08000884 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08c      	sub	sp, #48	@ 0x30
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800088a:	f107 030c 	add.w	r3, r7, #12
 800088e:	2224      	movs	r2, #36	@ 0x24
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f004 fbd0 	bl	8005038 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000898:	463b      	mov	r3, r7
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008a2:	4b21      	ldr	r3, [pc, #132]	@ (8000928 <MX_TIM3_Init+0xa4>)
 80008a4:	4a21      	ldr	r2, [pc, #132]	@ (800092c <MX_TIM3_Init+0xa8>)
 80008a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80008a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000928 <MX_TIM3_Init+0xa4>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ae:	4b1e      	ldr	r3, [pc, #120]	@ (8000928 <MX_TIM3_Init+0xa4>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 80008b4:	4b1c      	ldr	r3, [pc, #112]	@ (8000928 <MX_TIM3_Init+0xa4>)
 80008b6:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80008ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000928 <MX_TIM3_Init+0xa4>)
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c2:	4b19      	ldr	r3, [pc, #100]	@ (8000928 <MX_TIM3_Init+0xa4>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80008c8:	2303      	movs	r3, #3
 80008ca:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008cc:	2300      	movs	r3, #0
 80008ce:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008d0:	2301      	movs	r3, #1
 80008d2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008d4:	2300      	movs	r3, #0
 80008d6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80008d8:	2300      	movs	r3, #0
 80008da:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80008dc:	2300      	movs	r3, #0
 80008de:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008e0:	2301      	movs	r3, #1
 80008e2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80008e4:	2300      	movs	r3, #0
 80008e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80008ec:	f107 030c 	add.w	r3, r7, #12
 80008f0:	4619      	mov	r1, r3
 80008f2:	480d      	ldr	r0, [pc, #52]	@ (8000928 <MX_TIM3_Init+0xa4>)
 80008f4:	f003 fa78 	bl	8003de8 <HAL_TIM_Encoder_Init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80008fe:	f000 faf7 	bl	8000ef0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000902:	2300      	movs	r3, #0
 8000904:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000906:	2300      	movs	r3, #0
 8000908:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800090a:	463b      	mov	r3, r7
 800090c:	4619      	mov	r1, r3
 800090e:	4806      	ldr	r0, [pc, #24]	@ (8000928 <MX_TIM3_Init+0xa4>)
 8000910:	f004 fa68 	bl	8004de4 <HAL_TIMEx_MasterConfigSynchronization>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800091a:	f000 fae9 	bl	8000ef0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800091e:	bf00      	nop
 8000920:	3730      	adds	r7, #48	@ 0x30
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	2000012c 	.word	0x2000012c
 800092c:	40000400 	.word	0x40000400

08000930 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b08c      	sub	sp, #48	@ 0x30
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000936:	f107 030c 	add.w	r3, r7, #12
 800093a:	2224      	movs	r2, #36	@ 0x24
 800093c:	2100      	movs	r1, #0
 800093e:	4618      	mov	r0, r3
 8000940:	f004 fb7a 	bl	8005038 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000944:	463b      	mov	r3, r7
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800094e:	4b21      	ldr	r3, [pc, #132]	@ (80009d4 <MX_TIM4_Init+0xa4>)
 8000950:	4a21      	ldr	r2, [pc, #132]	@ (80009d8 <MX_TIM4_Init+0xa8>)
 8000952:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000954:	4b1f      	ldr	r3, [pc, #124]	@ (80009d4 <MX_TIM4_Init+0xa4>)
 8000956:	2200      	movs	r2, #0
 8000958:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800095a:	4b1e      	ldr	r3, [pc, #120]	@ (80009d4 <MX_TIM4_Init+0xa4>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 59999;
 8000960:	4b1c      	ldr	r3, [pc, #112]	@ (80009d4 <MX_TIM4_Init+0xa4>)
 8000962:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8000966:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000968:	4b1a      	ldr	r3, [pc, #104]	@ (80009d4 <MX_TIM4_Init+0xa4>)
 800096a:	2200      	movs	r2, #0
 800096c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800096e:	4b19      	ldr	r3, [pc, #100]	@ (80009d4 <MX_TIM4_Init+0xa4>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000974:	2301      	movs	r3, #1
 8000976:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000978:	2300      	movs	r3, #0
 800097a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800097c:	2301      	movs	r3, #1
 800097e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000980:	2300      	movs	r3, #0
 8000982:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000984:	2300      	movs	r3, #0
 8000986:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000988:	2300      	movs	r3, #0
 800098a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800098c:	2301      	movs	r3, #1
 800098e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000990:	2300      	movs	r3, #0
 8000992:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000998:	f107 030c 	add.w	r3, r7, #12
 800099c:	4619      	mov	r1, r3
 800099e:	480d      	ldr	r0, [pc, #52]	@ (80009d4 <MX_TIM4_Init+0xa4>)
 80009a0:	f003 fa22 	bl	8003de8 <HAL_TIM_Encoder_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80009aa:	f000 faa1 	bl	8000ef0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ae:	2300      	movs	r3, #0
 80009b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b2:	2300      	movs	r3, #0
 80009b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009b6:	463b      	mov	r3, r7
 80009b8:	4619      	mov	r1, r3
 80009ba:	4806      	ldr	r0, [pc, #24]	@ (80009d4 <MX_TIM4_Init+0xa4>)
 80009bc:	f004 fa12 	bl	8004de4 <HAL_TIMEx_MasterConfigSynchronization>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80009c6:	f000 fa93 	bl	8000ef0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80009ca:	bf00      	nop
 80009cc:	3730      	adds	r7, #48	@ 0x30
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000178 	.word	0x20000178
 80009d8:	40000800 	.word	0x40000800

080009dc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b09c      	sub	sp, #112	@ 0x70
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009e2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
 80009ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009f0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009fc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]
 8000a0c:	615a      	str	r2, [r3, #20]
 8000a0e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a10:	1d3b      	adds	r3, r7, #4
 8000a12:	2234      	movs	r2, #52	@ 0x34
 8000a14:	2100      	movs	r1, #0
 8000a16:	4618      	mov	r0, r3
 8000a18:	f004 fb0e 	bl	8005038 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000a1c:	4b45      	ldr	r3, [pc, #276]	@ (8000b34 <MX_TIM8_Init+0x158>)
 8000a1e:	4a46      	ldr	r2, [pc, #280]	@ (8000b38 <MX_TIM8_Init+0x15c>)
 8000a20:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000a22:	4b44      	ldr	r3, [pc, #272]	@ (8000b34 <MX_TIM8_Init+0x158>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a28:	4b42      	ldr	r3, [pc, #264]	@ (8000b34 <MX_TIM8_Init+0x158>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000a2e:	4b41      	ldr	r3, [pc, #260]	@ (8000b34 <MX_TIM8_Init+0x158>)
 8000a30:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a34:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a36:	4b3f      	ldr	r3, [pc, #252]	@ (8000b34 <MX_TIM8_Init+0x158>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000a3c:	4b3d      	ldr	r3, [pc, #244]	@ (8000b34 <MX_TIM8_Init+0x158>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a42:	4b3c      	ldr	r3, [pc, #240]	@ (8000b34 <MX_TIM8_Init+0x158>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000a48:	483a      	ldr	r0, [pc, #232]	@ (8000b34 <MX_TIM8_Init+0x158>)
 8000a4a:	f003 f915 	bl	8003c78 <HAL_TIM_Base_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8000a54:	f000 fa4c 	bl	8000ef0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a5c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000a5e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000a62:	4619      	mov	r1, r3
 8000a64:	4833      	ldr	r0, [pc, #204]	@ (8000b34 <MX_TIM8_Init+0x158>)
 8000a66:	f003 fc07 	bl	8004278 <HAL_TIM_ConfigClockSource>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8000a70:	f000 fa3e 	bl	8000ef0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000a74:	482f      	ldr	r0, [pc, #188]	@ (8000b34 <MX_TIM8_Init+0x158>)
 8000a76:	f003 f956 	bl	8003d26 <HAL_TIM_PWM_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8000a80:	f000 fa36 	bl	8000ef0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a84:	2300      	movs	r3, #0
 8000a86:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000a90:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a94:	4619      	mov	r1, r3
 8000a96:	4827      	ldr	r0, [pc, #156]	@ (8000b34 <MX_TIM8_Init+0x158>)
 8000a98:	f004 f9a4 	bl	8004de4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8000aa2:	f000 fa25 	bl	8000ef0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aa6:	2360      	movs	r3, #96	@ 0x60
 8000aa8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000aba:	2300      	movs	r3, #0
 8000abc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ac2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	4619      	mov	r1, r3
 8000aca:	481a      	ldr	r0, [pc, #104]	@ (8000b34 <MX_TIM8_Init+0x158>)
 8000acc:	f003 fac0 	bl	8004050 <HAL_TIM_PWM_ConfigChannel>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8000ad6:	f000 fa0b 	bl	8000ef0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ada:	2300      	movs	r3, #0
 8000adc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000aea:	2300      	movs	r3, #0
 8000aec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000aee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000af2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000af4:	2300      	movs	r3, #0
 8000af6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000af8:	2300      	movs	r3, #0
 8000afa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000afc:	2300      	movs	r3, #0
 8000afe:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b00:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000b04:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000b12:	1d3b      	adds	r3, r7, #4
 8000b14:	4619      	mov	r1, r3
 8000b16:	4807      	ldr	r0, [pc, #28]	@ (8000b34 <MX_TIM8_Init+0x158>)
 8000b18:	f004 f9fa 	bl	8004f10 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM8_Init+0x14a>
  {
    Error_Handler();
 8000b22:	f000 f9e5 	bl	8000ef0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000b26:	4803      	ldr	r0, [pc, #12]	@ (8000b34 <MX_TIM8_Init+0x158>)
 8000b28:	f000 fb6a 	bl	8001200 <HAL_TIM_MspPostInit>

}
 8000b2c:	bf00      	nop
 8000b2e:	3770      	adds	r7, #112	@ 0x70
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	200001c4 	.word	0x200001c4
 8000b38:	40013400 	.word	0x40013400

08000b3c <MX_TIM20_Init>:
  * @brief TIM20 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM20_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b09c      	sub	sp, #112	@ 0x70
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b42:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b50:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b5c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
 8000b6c:	615a      	str	r2, [r3, #20]
 8000b6e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	2234      	movs	r2, #52	@ 0x34
 8000b74:	2100      	movs	r1, #0
 8000b76:	4618      	mov	r0, r3
 8000b78:	f004 fa5e 	bl	8005038 <memset>

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8000b7c:	4b45      	ldr	r3, [pc, #276]	@ (8000c94 <MX_TIM20_Init+0x158>)
 8000b7e:	4a46      	ldr	r2, [pc, #280]	@ (8000c98 <MX_TIM20_Init+0x15c>)
 8000b80:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 8000b82:	4b44      	ldr	r3, [pc, #272]	@ (8000c94 <MX_TIM20_Init+0x158>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b88:	4b42      	ldr	r3, [pc, #264]	@ (8000c94 <MX_TIM20_Init+0x158>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 8000b8e:	4b41      	ldr	r3, [pc, #260]	@ (8000c94 <MX_TIM20_Init+0x158>)
 8000b90:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b94:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b96:	4b3f      	ldr	r3, [pc, #252]	@ (8000c94 <MX_TIM20_Init+0x158>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 8000b9c:	4b3d      	ldr	r3, [pc, #244]	@ (8000c94 <MX_TIM20_Init+0x158>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba2:	4b3c      	ldr	r3, [pc, #240]	@ (8000c94 <MX_TIM20_Init+0x158>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 8000ba8:	483a      	ldr	r0, [pc, #232]	@ (8000c94 <MX_TIM20_Init+0x158>)
 8000baa:	f003 f865 	bl	8003c78 <HAL_TIM_Base_Init>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_TIM20_Init+0x7c>
  {
    Error_Handler();
 8000bb4:	f000 f99c 	bl	8000ef0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bbc:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 8000bbe:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4833      	ldr	r0, [pc, #204]	@ (8000c94 <MX_TIM20_Init+0x158>)
 8000bc6:	f003 fb57 	bl	8004278 <HAL_TIM_ConfigClockSource>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_TIM20_Init+0x98>
  {
    Error_Handler();
 8000bd0:	f000 f98e 	bl	8000ef0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 8000bd4:	482f      	ldr	r0, [pc, #188]	@ (8000c94 <MX_TIM20_Init+0x158>)
 8000bd6:	f003 f8a6 	bl	8003d26 <HAL_TIM_PWM_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_TIM20_Init+0xa8>
  {
    Error_Handler();
 8000be0:	f000 f986 	bl	8000ef0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000be4:	2300      	movs	r3, #0
 8000be6:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000be8:	2300      	movs	r3, #0
 8000bea:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bec:	2300      	movs	r3, #0
 8000bee:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8000bf0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4827      	ldr	r0, [pc, #156]	@ (8000c94 <MX_TIM20_Init+0x158>)
 8000bf8:	f004 f8f4 	bl	8004de4 <HAL_TIMEx_MasterConfigSynchronization>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_TIM20_Init+0xca>
  {
    Error_Handler();
 8000c02:	f000 f975 	bl	8000ef0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c06:	2360      	movs	r3, #96	@ 0x60
 8000c08:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c12:	2300      	movs	r3, #0
 8000c14:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c16:	2300      	movs	r3, #0
 8000c18:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c22:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000c26:	2200      	movs	r2, #0
 8000c28:	4619      	mov	r1, r3
 8000c2a:	481a      	ldr	r0, [pc, #104]	@ (8000c94 <MX_TIM20_Init+0x158>)
 8000c2c:	f003 fa10 	bl	8004050 <HAL_TIM_PWM_ConfigChannel>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_TIM20_Init+0xfe>
  {
    Error_Handler();
 8000c36:	f000 f95b 	bl	8000ef0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c42:	2300      	movs	r3, #0
 8000c44:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c4e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c52:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c60:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000c64:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	4619      	mov	r1, r3
 8000c76:	4807      	ldr	r0, [pc, #28]	@ (8000c94 <MX_TIM20_Init+0x158>)
 8000c78:	f004 f94a 	bl	8004f10 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_TIM20_Init+0x14a>
  {
    Error_Handler();
 8000c82:	f000 f935 	bl	8000ef0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */
  HAL_TIM_MspPostInit(&htim20);
 8000c86:	4803      	ldr	r0, [pc, #12]	@ (8000c94 <MX_TIM20_Init+0x158>)
 8000c88:	f000 faba 	bl	8001200 <HAL_TIM_MspPostInit>

}
 8000c8c:	bf00      	nop
 8000c8e:	3770      	adds	r7, #112	@ 0x70
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20000210 	.word	0x20000210
 8000c98:	40015000 	.word	0x40015000

08000c9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08a      	sub	sp, #40	@ 0x28
 8000ca0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca2:	f107 0314 	add.w	r3, r7, #20
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	609a      	str	r2, [r3, #8]
 8000cae:	60da      	str	r2, [r3, #12]
 8000cb0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb2:	4b7a      	ldr	r3, [pc, #488]	@ (8000e9c <MX_GPIO_Init+0x200>)
 8000cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cb6:	4a79      	ldr	r2, [pc, #484]	@ (8000e9c <MX_GPIO_Init+0x200>)
 8000cb8:	f043 0304 	orr.w	r3, r3, #4
 8000cbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cbe:	4b77      	ldr	r3, [pc, #476]	@ (8000e9c <MX_GPIO_Init+0x200>)
 8000cc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cc2:	f003 0304 	and.w	r3, r3, #4
 8000cc6:	613b      	str	r3, [r7, #16]
 8000cc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cca:	4b74      	ldr	r3, [pc, #464]	@ (8000e9c <MX_GPIO_Init+0x200>)
 8000ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cce:	4a73      	ldr	r2, [pc, #460]	@ (8000e9c <MX_GPIO_Init+0x200>)
 8000cd0:	f043 0320 	orr.w	r3, r3, #32
 8000cd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cd6:	4b71      	ldr	r3, [pc, #452]	@ (8000e9c <MX_GPIO_Init+0x200>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cda:	f003 0320 	and.w	r3, r3, #32
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce2:	4b6e      	ldr	r3, [pc, #440]	@ (8000e9c <MX_GPIO_Init+0x200>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce6:	4a6d      	ldr	r2, [pc, #436]	@ (8000e9c <MX_GPIO_Init+0x200>)
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cee:	4b6b      	ldr	r3, [pc, #428]	@ (8000e9c <MX_GPIO_Init+0x200>)
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	60bb      	str	r3, [r7, #8]
 8000cf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfa:	4b68      	ldr	r3, [pc, #416]	@ (8000e9c <MX_GPIO_Init+0x200>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cfe:	4a67      	ldr	r2, [pc, #412]	@ (8000e9c <MX_GPIO_Init+0x200>)
 8000d00:	f043 0302 	orr.w	r3, r3, #2
 8000d04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d06:	4b65      	ldr	r3, [pc, #404]	@ (8000e9c <MX_GPIO_Init+0x200>)
 8000d08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d0a:	f003 0302 	and.w	r3, r3, #2
 8000d0e:	607b      	str	r3, [r7, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_MD20A_18V_GPIO_Port, DIR_MD20A_18V_Pin, GPIO_PIN_RESET);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2180      	movs	r1, #128	@ 0x80
 8000d16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d1a:	f001 ff85 	bl	8002c28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_MD20A_24V_GPIO_Port, DIR_MD20A_24V_Pin, GPIO_PIN_RESET);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2102      	movs	r1, #2
 8000d22:	485f      	ldr	r0, [pc, #380]	@ (8000ea0 <MX_GPIO_Init+0x204>)
 8000d24:	f001 ff80 	bl	8002c28 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000d28:	230c      	movs	r3, #12
 8000d2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d34:	2300      	movs	r3, #0
 8000d36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000d38:	230c      	movs	r3, #12
 8000d3a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	4619      	mov	r1, r3
 8000d42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d46:	f001 fded 	bl	8002924 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d4a:	2320      	movs	r3, #32
 8000d4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d56:	2300      	movs	r3, #0
 8000d58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d5a:	2305      	movs	r3, #5
 8000d5c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5e:	f107 0314 	add.w	r3, r7, #20
 8000d62:	4619      	mov	r1, r3
 8000d64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d68:	f001 fddc 	bl	8002924 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_MD20A_18V_Pin */
  GPIO_InitStruct.Pin = DIR_MD20A_18V_Pin;
 8000d6c:	2380      	movs	r3, #128	@ 0x80
 8000d6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d70:	2301      	movs	r3, #1
 8000d72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_MD20A_18V_GPIO_Port, &GPIO_InitStruct);
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	4619      	mov	r1, r3
 8000d82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d86:	f001 fdcd 	bl	8002924 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000d8a:	2330      	movs	r3, #48	@ 0x30
 8000d8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d96:	2300      	movs	r3, #0
 8000d98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d9a:	2307      	movs	r3, #7
 8000d9c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d9e:	f107 0314 	add.w	r3, r7, #20
 8000da2:	4619      	mov	r1, r3
 8000da4:	483f      	ldr	r0, [pc, #252]	@ (8000ea4 <MX_GPIO_Init+0x208>)
 8000da6:	f001 fdbd 	bl	8002924 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_MD20A_24V_Pin */
  GPIO_InitStruct.Pin = DIR_MD20A_24V_Pin;
 8000daa:	2302      	movs	r3, #2
 8000dac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dae:	2301      	movs	r3, #1
 8000db0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db6:	2300      	movs	r3, #0
 8000db8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_MD20A_24V_GPIO_Port, &GPIO_InitStruct);
 8000dba:	f107 0314 	add.w	r3, r7, #20
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4837      	ldr	r0, [pc, #220]	@ (8000ea0 <MX_GPIO_Init+0x204>)
 8000dc2:	f001 fdaf 	bl	8002924 <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit_Switch_pen_2_Pin Limit_Switch_Prismatic1_Pin Limit_Switch_pen_1_Pin */
  GPIO_InitStruct.Pin = Limit_Switch_pen_2_Pin|Limit_Switch_Prismatic1_Pin|Limit_Switch_pen_1_Pin;
 8000dc6:	f44f 438c 	mov.w	r3, #17920	@ 0x4600
 8000dca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dcc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000dd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd6:	f107 0314 	add.w	r3, r7, #20
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4830      	ldr	r0, [pc, #192]	@ (8000ea0 <MX_GPIO_Init+0x204>)
 8000dde:	f001 fda1 	bl	8002924 <HAL_GPIO_Init>

  /*Configure GPIO pin : Proximity_Sensor_Pin */
  GPIO_InitStruct.Pin = Proximity_Sensor_Pin;
 8000de2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000de6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000de8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000dec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Proximity_Sensor_GPIO_Port, &GPIO_InitStruct);
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	4619      	mov	r1, r3
 8000df8:	4829      	ldr	r0, [pc, #164]	@ (8000ea0 <MX_GPIO_Init+0x204>)
 8000dfa:	f001 fd93 	bl	8002924 <HAL_GPIO_Init>

  /*Configure GPIO pins : Proximity_sensor_Pin Limit_Switch_Prismatic2_Pin */
  GPIO_InitStruct.Pin = Proximity_sensor_Pin|Limit_Switch_Prismatic2_Pin;
 8000dfe:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8000e02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e04:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0e:	f107 0314 	add.w	r3, r7, #20
 8000e12:	4619      	mov	r1, r3
 8000e14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e18:	f001 fd84 	bl	8002924 <HAL_GPIO_Init>

  /*Configure GPIO pin : PS2_Joy_stick_Attention_Pin */
  GPIO_InitStruct.Pin = PS2_Joy_stick_Attention_Pin;
 8000e1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PS2_Joy_stick_Attention_GPIO_Port, &GPIO_InitStruct);
 8000e2a:	f107 0314 	add.w	r3, r7, #20
 8000e2e:	4619      	mov	r1, r3
 8000e30:	481c      	ldr	r0, [pc, #112]	@ (8000ea4 <MX_GPIO_Init+0x208>)
 8000e32:	f001 fd77 	bl	8002924 <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_Pin */
  GPIO_InitStruct.Pin = Emergency_Pin;
 8000e36:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000e3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e3c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_GPIO_Port, &GPIO_InitStruct);
 8000e46:	f107 0314 	add.w	r3, r7, #20
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4815      	ldr	r0, [pc, #84]	@ (8000ea4 <MX_GPIO_Init+0x208>)
 8000e4e:	f001 fd69 	bl	8002924 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000e52:	2330      	movs	r3, #48	@ 0x30
 8000e54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e56:	2302      	movs	r3, #2
 8000e58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e62:	2305      	movs	r3, #5
 8000e64:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e66:	f107 0314 	add.w	r3, r7, #20
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	480c      	ldr	r0, [pc, #48]	@ (8000ea0 <MX_GPIO_Init+0x204>)
 8000e6e:	f001 fd59 	bl	8002924 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2100      	movs	r1, #0
 8000e76:	2017      	movs	r0, #23
 8000e78:	f001 fd1f 	bl	80028ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e7c:	2017      	movs	r0, #23
 8000e7e:	f001 fd36 	bl	80028ee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2100      	movs	r1, #0
 8000e86:	2028      	movs	r0, #40	@ 0x28
 8000e88:	f001 fd17 	bl	80028ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e8c:	2028      	movs	r0, #40	@ 0x28
 8000e8e:	f001 fd2e 	bl	80028ee <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e92:	bf00      	nop
 8000e94:	3728      	adds	r7, #40	@ 0x28
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	48000400 	.word	0x48000400
 8000ea4:	48000800 	.word	0x48000800

08000ea8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13)
 8000eb2:	88fb      	ldrh	r3, [r7, #6]
 8000eb4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000eb8:	d10e      	bne.n	8000ed8 <HAL_GPIO_EXTI_Callback+0x30>
	{
		Encoder_setLimit(&encoder1,180);
 8000eba:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 8000ee0 <HAL_GPIO_EXTI_Callback+0x38>
 8000ebe:	4809      	ldr	r0, [pc, #36]	@ (8000ee4 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000ec0:	f7ff fa42 	bl	8000348 <Encoder_setLimit>
		Encoder_setLimit(&encoder2,180);
 8000ec4:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8000ee0 <HAL_GPIO_EXTI_Callback+0x38>
 8000ec8:	4807      	ldr	r0, [pc, #28]	@ (8000ee8 <HAL_GPIO_EXTI_Callback+0x40>)
 8000eca:	f7ff fa3d 	bl	8000348 <Encoder_setLimit>
		check += 1;
 8000ece:	4b07      	ldr	r3, [pc, #28]	@ (8000eec <HAL_GPIO_EXTI_Callback+0x44>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	4a05      	ldr	r2, [pc, #20]	@ (8000eec <HAL_GPIO_EXTI_Callback+0x44>)
 8000ed6:	6013      	str	r3, [r2, #0]
	}
}
 8000ed8:	bf00      	nop
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	43340000 	.word	0x43340000
 8000ee4:	2000025c 	.word	0x2000025c
 8000ee8:	20000278 	.word	0x20000278
 8000eec:	200002b0 	.word	0x200002b0

08000ef0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ef4:	b672      	cpsid	i
}
 8000ef6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1) {
 8000ef8:	bf00      	nop
 8000efa:	e7fd      	b.n	8000ef8 <Error_Handler+0x8>

08000efc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f02:	4b0f      	ldr	r3, [pc, #60]	@ (8000f40 <HAL_MspInit+0x44>)
 8000f04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f06:	4a0e      	ldr	r2, [pc, #56]	@ (8000f40 <HAL_MspInit+0x44>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f40 <HAL_MspInit+0x44>)
 8000f10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f1a:	4b09      	ldr	r3, [pc, #36]	@ (8000f40 <HAL_MspInit+0x44>)
 8000f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f1e:	4a08      	ldr	r2, [pc, #32]	@ (8000f40 <HAL_MspInit+0x44>)
 8000f20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f24:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f26:	4b06      	ldr	r3, [pc, #24]	@ (8000f40 <HAL_MspInit+0x44>)
 8000f28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f2e:	603b      	str	r3, [r7, #0]
 8000f30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000f32:	f001 ff4d 	bl	8002dd0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40021000 	.word	0x40021000

08000f44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b09e      	sub	sp, #120	@ 0x78
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f5c:	f107 0310 	add.w	r3, r7, #16
 8000f60:	2254      	movs	r2, #84	@ 0x54
 8000f62:	2100      	movs	r1, #0
 8000f64:	4618      	mov	r0, r3
 8000f66:	f004 f867 	bl	8005038 <memset>
  if(hadc->Instance==ADC1)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f72:	d134      	bne.n	8000fde <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000f74:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f78:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000f7a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000f7e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f80:	f107 0310 	add.w	r3, r7, #16
 8000f84:	4618      	mov	r0, r3
 8000f86:	f002 fc29 	bl	80037dc <HAL_RCCEx_PeriphCLKConfig>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000f90:	f7ff ffae 	bl	8000ef0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000f94:	4b14      	ldr	r3, [pc, #80]	@ (8000fe8 <HAL_ADC_MspInit+0xa4>)
 8000f96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f98:	4a13      	ldr	r2, [pc, #76]	@ (8000fe8 <HAL_ADC_MspInit+0xa4>)
 8000f9a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000f9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fa0:	4b11      	ldr	r3, [pc, #68]	@ (8000fe8 <HAL_ADC_MspInit+0xa4>)
 8000fa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fac:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe8 <HAL_ADC_MspInit+0xa4>)
 8000fae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fb0:	4a0d      	ldr	r2, [pc, #52]	@ (8000fe8 <HAL_ADC_MspInit+0xa4>)
 8000fb2:	f043 0301 	orr.w	r3, r3, #1
 8000fb6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe8 <HAL_ADC_MspInit+0xa4>)
 8000fba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fbc:	f003 0301 	and.w	r3, r3, #1
 8000fc0:	60bb      	str	r3, [r7, #8]
 8000fc2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = Current_Sensor_Pin|Current_SensorA1_Pin;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fda:	f001 fca3 	bl	8002924 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000fde:	bf00      	nop
 8000fe0:	3778      	adds	r7, #120	@ 0x78
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40021000 	.word	0x40021000

08000fec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b087      	sub	sp, #28
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a25      	ldr	r2, [pc, #148]	@ (8001090 <HAL_TIM_Base_MspInit+0xa4>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d10c      	bne.n	8001018 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ffe:	4b25      	ldr	r3, [pc, #148]	@ (8001094 <HAL_TIM_Base_MspInit+0xa8>)
 8001000:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001002:	4a24      	ldr	r2, [pc, #144]	@ (8001094 <HAL_TIM_Base_MspInit+0xa8>)
 8001004:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001008:	6613      	str	r3, [r2, #96]	@ 0x60
 800100a:	4b22      	ldr	r3, [pc, #136]	@ (8001094 <HAL_TIM_Base_MspInit+0xa8>)
 800100c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800100e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001012:	617b      	str	r3, [r7, #20]
 8001014:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }

}
 8001016:	e034      	b.n	8001082 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM2)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001020:	d10c      	bne.n	800103c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001022:	4b1c      	ldr	r3, [pc, #112]	@ (8001094 <HAL_TIM_Base_MspInit+0xa8>)
 8001024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001026:	4a1b      	ldr	r2, [pc, #108]	@ (8001094 <HAL_TIM_Base_MspInit+0xa8>)
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	6593      	str	r3, [r2, #88]	@ 0x58
 800102e:	4b19      	ldr	r3, [pc, #100]	@ (8001094 <HAL_TIM_Base_MspInit+0xa8>)
 8001030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	613b      	str	r3, [r7, #16]
 8001038:	693b      	ldr	r3, [r7, #16]
}
 800103a:	e022      	b.n	8001082 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM8)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a15      	ldr	r2, [pc, #84]	@ (8001098 <HAL_TIM_Base_MspInit+0xac>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d10c      	bne.n	8001060 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001046:	4b13      	ldr	r3, [pc, #76]	@ (8001094 <HAL_TIM_Base_MspInit+0xa8>)
 8001048:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800104a:	4a12      	ldr	r2, [pc, #72]	@ (8001094 <HAL_TIM_Base_MspInit+0xa8>)
 800104c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001050:	6613      	str	r3, [r2, #96]	@ 0x60
 8001052:	4b10      	ldr	r3, [pc, #64]	@ (8001094 <HAL_TIM_Base_MspInit+0xa8>)
 8001054:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001056:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
}
 800105e:	e010      	b.n	8001082 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM20)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a0d      	ldr	r2, [pc, #52]	@ (800109c <HAL_TIM_Base_MspInit+0xb0>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d10b      	bne.n	8001082 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM20_CLK_ENABLE();
 800106a:	4b0a      	ldr	r3, [pc, #40]	@ (8001094 <HAL_TIM_Base_MspInit+0xa8>)
 800106c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800106e:	4a09      	ldr	r2, [pc, #36]	@ (8001094 <HAL_TIM_Base_MspInit+0xa8>)
 8001070:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001074:	6613      	str	r3, [r2, #96]	@ 0x60
 8001076:	4b07      	ldr	r3, [pc, #28]	@ (8001094 <HAL_TIM_Base_MspInit+0xa8>)
 8001078:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800107a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	68bb      	ldr	r3, [r7, #8]
}
 8001082:	bf00      	nop
 8001084:	371c      	adds	r7, #28
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	40012c00 	.word	0x40012c00
 8001094:	40021000 	.word	0x40021000
 8001098:	40013400 	.word	0x40013400
 800109c:	40015000 	.word	0x40015000

080010a0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08e      	sub	sp, #56	@ 0x38
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a4b      	ldr	r2, [pc, #300]	@ (80011ec <HAL_TIM_Encoder_MspInit+0x14c>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d145      	bne.n	800114e <HAL_TIM_Encoder_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010c2:	4b4b      	ldr	r3, [pc, #300]	@ (80011f0 <HAL_TIM_Encoder_MspInit+0x150>)
 80010c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010c6:	4a4a      	ldr	r2, [pc, #296]	@ (80011f0 <HAL_TIM_Encoder_MspInit+0x150>)
 80010c8:	f043 0302 	orr.w	r3, r3, #2
 80010cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80010ce:	4b48      	ldr	r3, [pc, #288]	@ (80011f0 <HAL_TIM_Encoder_MspInit+0x150>)
 80010d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	623b      	str	r3, [r7, #32]
 80010d8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010da:	4b45      	ldr	r3, [pc, #276]	@ (80011f0 <HAL_TIM_Encoder_MspInit+0x150>)
 80010dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010de:	4a44      	ldr	r2, [pc, #272]	@ (80011f0 <HAL_TIM_Encoder_MspInit+0x150>)
 80010e0:	f043 0301 	orr.w	r3, r3, #1
 80010e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010e6:	4b42      	ldr	r3, [pc, #264]	@ (80011f0 <HAL_TIM_Encoder_MspInit+0x150>)
 80010e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	61fb      	str	r3, [r7, #28]
 80010f0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010f2:	4b3f      	ldr	r3, [pc, #252]	@ (80011f0 <HAL_TIM_Encoder_MspInit+0x150>)
 80010f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f6:	4a3e      	ldr	r2, [pc, #248]	@ (80011f0 <HAL_TIM_Encoder_MspInit+0x150>)
 80010f8:	f043 0304 	orr.w	r3, r3, #4
 80010fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010fe:	4b3c      	ldr	r3, [pc, #240]	@ (80011f0 <HAL_TIM_Encoder_MspInit+0x150>)
 8001100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001102:	f003 0304 	and.w	r3, r3, #4
 8001106:	61bb      	str	r3, [r7, #24]
 8001108:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Encoder_1_Pin;
 800110a:	2340      	movs	r3, #64	@ 0x40
 800110c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110e:	2302      	movs	r3, #2
 8001110:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001116:	2300      	movs	r3, #0
 8001118:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800111a:	2302      	movs	r3, #2
 800111c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Encoder_1_GPIO_Port, &GPIO_InitStruct);
 800111e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001122:	4619      	mov	r1, r3
 8001124:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001128:	f001 fbfc 	bl	8002924 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Encoder_1C7_Pin;
 800112c:	2380      	movs	r3, #128	@ 0x80
 800112e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001130:	2302      	movs	r3, #2
 8001132:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001138:	2300      	movs	r3, #0
 800113a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800113c:	2302      	movs	r3, #2
 800113e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Encoder_1C7_GPIO_Port, &GPIO_InitStruct);
 8001140:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001144:	4619      	mov	r1, r3
 8001146:	482b      	ldr	r0, [pc, #172]	@ (80011f4 <HAL_TIM_Encoder_MspInit+0x154>)
 8001148:	f001 fbec 	bl	8002924 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800114c:	e04a      	b.n	80011e4 <HAL_TIM_Encoder_MspInit+0x144>
  else if(htim_encoder->Instance==TIM4)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a29      	ldr	r2, [pc, #164]	@ (80011f8 <HAL_TIM_Encoder_MspInit+0x158>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d145      	bne.n	80011e4 <HAL_TIM_Encoder_MspInit+0x144>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001158:	4b25      	ldr	r3, [pc, #148]	@ (80011f0 <HAL_TIM_Encoder_MspInit+0x150>)
 800115a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800115c:	4a24      	ldr	r2, [pc, #144]	@ (80011f0 <HAL_TIM_Encoder_MspInit+0x150>)
 800115e:	f043 0304 	orr.w	r3, r3, #4
 8001162:	6593      	str	r3, [r2, #88]	@ 0x58
 8001164:	4b22      	ldr	r3, [pc, #136]	@ (80011f0 <HAL_TIM_Encoder_MspInit+0x150>)
 8001166:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001168:	f003 0304 	and.w	r3, r3, #4
 800116c:	617b      	str	r3, [r7, #20]
 800116e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001170:	4b1f      	ldr	r3, [pc, #124]	@ (80011f0 <HAL_TIM_Encoder_MspInit+0x150>)
 8001172:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001174:	4a1e      	ldr	r2, [pc, #120]	@ (80011f0 <HAL_TIM_Encoder_MspInit+0x150>)
 8001176:	f043 0301 	orr.w	r3, r3, #1
 800117a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800117c:	4b1c      	ldr	r3, [pc, #112]	@ (80011f0 <HAL_TIM_Encoder_MspInit+0x150>)
 800117e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001180:	f003 0301 	and.w	r3, r3, #1
 8001184:	613b      	str	r3, [r7, #16]
 8001186:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001188:	4b19      	ldr	r3, [pc, #100]	@ (80011f0 <HAL_TIM_Encoder_MspInit+0x150>)
 800118a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800118c:	4a18      	ldr	r2, [pc, #96]	@ (80011f0 <HAL_TIM_Encoder_MspInit+0x150>)
 800118e:	f043 0302 	orr.w	r3, r3, #2
 8001192:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001194:	4b16      	ldr	r3, [pc, #88]	@ (80011f0 <HAL_TIM_Encoder_MspInit+0x150>)
 8001196:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001198:	f003 0302 	and.w	r3, r3, #2
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder_2_Pin;
 80011a0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80011a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a6:	2302      	movs	r3, #2
 80011a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ae:	2300      	movs	r3, #0
 80011b0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80011b2:	230a      	movs	r3, #10
 80011b4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Encoder_2_GPIO_Port, &GPIO_InitStruct);
 80011b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011ba:	4619      	mov	r1, r3
 80011bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011c0:	f001 fbb0 	bl	8002924 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Encoder_2B7_Pin;
 80011c4:	2380      	movs	r3, #128	@ 0x80
 80011c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c8:	2302      	movs	r3, #2
 80011ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d0:	2300      	movs	r3, #0
 80011d2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80011d4:	2302      	movs	r3, #2
 80011d6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Encoder_2B7_GPIO_Port, &GPIO_InitStruct);
 80011d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011dc:	4619      	mov	r1, r3
 80011de:	4807      	ldr	r0, [pc, #28]	@ (80011fc <HAL_TIM_Encoder_MspInit+0x15c>)
 80011e0:	f001 fba0 	bl	8002924 <HAL_GPIO_Init>
}
 80011e4:	bf00      	nop
 80011e6:	3738      	adds	r7, #56	@ 0x38
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40000400 	.word	0x40000400
 80011f0:	40021000 	.word	0x40021000
 80011f4:	48000800 	.word	0x48000800
 80011f8:	40000800 	.word	0x40000800
 80011fc:	48000400 	.word	0x48000400

08001200 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08a      	sub	sp, #40	@ 0x28
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a33      	ldr	r2, [pc, #204]	@ (80012ec <HAL_TIM_MspPostInit+0xec>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d11c      	bne.n	800125c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001222:	4b33      	ldr	r3, [pc, #204]	@ (80012f0 <HAL_TIM_MspPostInit+0xf0>)
 8001224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001226:	4a32      	ldr	r2, [pc, #200]	@ (80012f0 <HAL_TIM_MspPostInit+0xf0>)
 8001228:	f043 0304 	orr.w	r3, r3, #4
 800122c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800122e:	4b30      	ldr	r3, [pc, #192]	@ (80012f0 <HAL_TIM_MspPostInit+0xf0>)
 8001230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001232:	f003 0304 	and.w	r3, r3, #4
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC2     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PWM_MD20A_24V_Pin;
 800123a:	2304      	movs	r3, #4
 800123c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123e:	2302      	movs	r3, #2
 8001240:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001246:	2300      	movs	r3, #0
 8001248:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800124a:	2302      	movs	r3, #2
 800124c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MD20A_24V_GPIO_Port, &GPIO_InitStruct);
 800124e:	f107 0314 	add.w	r3, r7, #20
 8001252:	4619      	mov	r1, r3
 8001254:	4827      	ldr	r0, [pc, #156]	@ (80012f4 <HAL_TIM_MspPostInit+0xf4>)
 8001256:	f001 fb65 	bl	8002924 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM20_MspPostInit 1 */

  /* USER CODE END TIM20_MspPostInit 1 */
  }

}
 800125a:	e042      	b.n	80012e2 <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM8)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a25      	ldr	r2, [pc, #148]	@ (80012f8 <HAL_TIM_MspPostInit+0xf8>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d11c      	bne.n	80012a0 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001266:	4b22      	ldr	r3, [pc, #136]	@ (80012f0 <HAL_TIM_MspPostInit+0xf0>)
 8001268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800126a:	4a21      	ldr	r2, [pc, #132]	@ (80012f0 <HAL_TIM_MspPostInit+0xf0>)
 800126c:	f043 0304 	orr.w	r3, r3, #4
 8001270:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001272:	4b1f      	ldr	r3, [pc, #124]	@ (80012f0 <HAL_TIM_MspPostInit+0xf0>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001276:	f003 0304 	and.w	r3, r3, #4
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Servo_Pin;
 800127e:	2340      	movs	r3, #64	@ 0x40
 8001280:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001282:	2302      	movs	r3, #2
 8001284:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128a:	2300      	movs	r3, #0
 800128c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800128e:	2304      	movs	r3, #4
 8001290:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Servo_GPIO_Port, &GPIO_InitStruct);
 8001292:	f107 0314 	add.w	r3, r7, #20
 8001296:	4619      	mov	r1, r3
 8001298:	4816      	ldr	r0, [pc, #88]	@ (80012f4 <HAL_TIM_MspPostInit+0xf4>)
 800129a:	f001 fb43 	bl	8002924 <HAL_GPIO_Init>
}
 800129e:	e020      	b.n	80012e2 <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM20)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a15      	ldr	r2, [pc, #84]	@ (80012fc <HAL_TIM_MspPostInit+0xfc>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d11b      	bne.n	80012e2 <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012aa:	4b11      	ldr	r3, [pc, #68]	@ (80012f0 <HAL_TIM_MspPostInit+0xf0>)
 80012ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ae:	4a10      	ldr	r2, [pc, #64]	@ (80012f0 <HAL_TIM_MspPostInit+0xf0>)
 80012b0:	f043 0302 	orr.w	r3, r3, #2
 80012b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012b6:	4b0e      	ldr	r3, [pc, #56]	@ (80012f0 <HAL_TIM_MspPostInit+0xf0>)
 80012b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	60bb      	str	r3, [r7, #8]
 80012c0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_MD20A_18V_Pin;
 80012c2:	2304      	movs	r3, #4
 80012c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c6:	2302      	movs	r3, #2
 80012c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ce:	2300      	movs	r3, #0
 80012d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 80012d2:	2303      	movs	r3, #3
 80012d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MD20A_18V_GPIO_Port, &GPIO_InitStruct);
 80012d6:	f107 0314 	add.w	r3, r7, #20
 80012da:	4619      	mov	r1, r3
 80012dc:	4808      	ldr	r0, [pc, #32]	@ (8001300 <HAL_TIM_MspPostInit+0x100>)
 80012de:	f001 fb21 	bl	8002924 <HAL_GPIO_Init>
}
 80012e2:	bf00      	nop
 80012e4:	3728      	adds	r7, #40	@ 0x28
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40012c00 	.word	0x40012c00
 80012f0:	40021000 	.word	0x40021000
 80012f4:	48000800 	.word	0x48000800
 80012f8:	40013400 	.word	0x40013400
 80012fc:	40015000 	.word	0x40015000
 8001300:	48000400 	.word	0x48000400

08001304 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001308:	bf00      	nop
 800130a:	e7fd      	b.n	8001308 <NMI_Handler+0x4>

0800130c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001310:	bf00      	nop
 8001312:	e7fd      	b.n	8001310 <HardFault_Handler+0x4>

08001314 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001318:	bf00      	nop
 800131a:	e7fd      	b.n	8001318 <MemManage_Handler+0x4>

0800131c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001320:	bf00      	nop
 8001322:	e7fd      	b.n	8001320 <BusFault_Handler+0x4>

08001324 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001328:	bf00      	nop
 800132a:	e7fd      	b.n	8001328 <UsageFault_Handler+0x4>

0800132c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800135a:	f000 f8b5 	bl	80014c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}

08001362 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_pen_1_Pin);
 8001366:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800136a:	f001 fc75 	bl	8002c58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}

08001372 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_pen_2_Pin);
 8001376:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800137a:	f001 fc6d 	bl	8002c58 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Emergency_Pin);
 800137e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001382:	f001 fc69 	bl	8002c58 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Proximity_sensor_Pin);
 8001386:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800138a:	f001 fc65 	bl	8002c58 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Proximity_Sensor_Pin);
 800138e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001392:	f001 fc61 	bl	8002c58 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_Prismatic1_Pin);
 8001396:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800139a:	f001 fc5d 	bl	8002c58 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_Prismatic2_Pin);
 800139e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80013a2:	f001 fc59 	bl	8002c58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
	...

080013ac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013b0:	4b06      	ldr	r3, [pc, #24]	@ (80013cc <SystemInit+0x20>)
 80013b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013b6:	4a05      	ldr	r2, [pc, #20]	@ (80013cc <SystemInit+0x20>)
 80013b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013d0:	480d      	ldr	r0, [pc, #52]	@ (8001408 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013d2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013d4:	f7ff ffea 	bl	80013ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013d8:	480c      	ldr	r0, [pc, #48]	@ (800140c <LoopForever+0x6>)
  ldr r1, =_edata
 80013da:	490d      	ldr	r1, [pc, #52]	@ (8001410 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001414 <LoopForever+0xe>)
  movs r3, #0
 80013de:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80013e0:	e002      	b.n	80013e8 <LoopCopyDataInit>

080013e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013e6:	3304      	adds	r3, #4

080013e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013ec:	d3f9      	bcc.n	80013e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001418 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013f0:	4c0a      	ldr	r4, [pc, #40]	@ (800141c <LoopForever+0x16>)
  movs r3, #0
 80013f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f4:	e001      	b.n	80013fa <LoopFillZerobss>

080013f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f8:	3204      	adds	r2, #4

080013fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013fc:	d3fb      	bcc.n	80013f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013fe:	f003 fe23 	bl	8005048 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001402:	f7fe ffdd 	bl	80003c0 <main>

08001406 <LoopForever>:

LoopForever:
    b LoopForever
 8001406:	e7fe      	b.n	8001406 <LoopForever>
  ldr   r0, =_estack
 8001408:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800140c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001410:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001414:	080050c0 	.word	0x080050c0
  ldr r2, =_sbss
 8001418:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800141c:	200002b8 	.word	0x200002b8

08001420 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001420:	e7fe      	b.n	8001420 <ADC1_2_IRQHandler>

08001422 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b082      	sub	sp, #8
 8001426:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001428:	2300      	movs	r3, #0
 800142a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800142c:	2003      	movs	r0, #3
 800142e:	f001 fa39 	bl	80028a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001432:	2000      	movs	r0, #0
 8001434:	f000 f80e 	bl	8001454 <HAL_InitTick>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d002      	beq.n	8001444 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	71fb      	strb	r3, [r7, #7]
 8001442:	e001      	b.n	8001448 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001444:	f7ff fd5a 	bl	8000efc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001448:	79fb      	ldrb	r3, [r7, #7]

}
 800144a:	4618      	mov	r0, r3
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
	...

08001454 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800145c:	2300      	movs	r3, #0
 800145e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001460:	4b16      	ldr	r3, [pc, #88]	@ (80014bc <HAL_InitTick+0x68>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d022      	beq.n	80014ae <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001468:	4b15      	ldr	r3, [pc, #84]	@ (80014c0 <HAL_InitTick+0x6c>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	4b13      	ldr	r3, [pc, #76]	@ (80014bc <HAL_InitTick+0x68>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001474:	fbb1 f3f3 	udiv	r3, r1, r3
 8001478:	fbb2 f3f3 	udiv	r3, r2, r3
 800147c:	4618      	mov	r0, r3
 800147e:	f001 fa44 	bl	800290a <HAL_SYSTICK_Config>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d10f      	bne.n	80014a8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2b0f      	cmp	r3, #15
 800148c:	d809      	bhi.n	80014a2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800148e:	2200      	movs	r2, #0
 8001490:	6879      	ldr	r1, [r7, #4]
 8001492:	f04f 30ff 	mov.w	r0, #4294967295
 8001496:	f001 fa10 	bl	80028ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800149a:	4a0a      	ldr	r2, [pc, #40]	@ (80014c4 <HAL_InitTick+0x70>)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6013      	str	r3, [r2, #0]
 80014a0:	e007      	b.n	80014b2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	73fb      	strb	r3, [r7, #15]
 80014a6:	e004      	b.n	80014b2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	73fb      	strb	r3, [r7, #15]
 80014ac:	e001      	b.n	80014b2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3710      	adds	r7, #16
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000008 	.word	0x20000008
 80014c0:	20000000 	.word	0x20000000
 80014c4:	20000004 	.word	0x20000004

080014c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014cc:	4b05      	ldr	r3, [pc, #20]	@ (80014e4 <HAL_IncTick+0x1c>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	4b05      	ldr	r3, [pc, #20]	@ (80014e8 <HAL_IncTick+0x20>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4413      	add	r3, r2
 80014d6:	4a03      	ldr	r2, [pc, #12]	@ (80014e4 <HAL_IncTick+0x1c>)
 80014d8:	6013      	str	r3, [r2, #0]
}
 80014da:	bf00      	nop
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	200002b4 	.word	0x200002b4
 80014e8:	20000008 	.word	0x20000008

080014ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  return uwTick;
 80014f0:	4b03      	ldr	r3, [pc, #12]	@ (8001500 <HAL_GetTick+0x14>)
 80014f2:	681b      	ldr	r3, [r3, #0]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	200002b4 	.word	0x200002b4

08001504 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	431a      	orrs	r2, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	609a      	str	r2, [r3, #8]
}
 800151e:	bf00      	nop
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800152a:	b480      	push	{r7}
 800152c:	b083      	sub	sp, #12
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
 8001532:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	431a      	orrs	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	609a      	str	r2, [r3, #8]
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001560:	4618      	mov	r0, r3
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800156c:	b480      	push	{r7}
 800156e:	b087      	sub	sp, #28
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
 8001578:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	3360      	adds	r3, #96	@ 0x60
 800157e:	461a      	mov	r2, r3
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	4413      	add	r3, r2
 8001586:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4b08      	ldr	r3, [pc, #32]	@ (80015b0 <LL_ADC_SetOffset+0x44>)
 800158e:	4013      	ands	r3, r2
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001596:	683a      	ldr	r2, [r7, #0]
 8001598:	430a      	orrs	r2, r1
 800159a:	4313      	orrs	r3, r2
 800159c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80015a4:	bf00      	nop
 80015a6:	371c      	adds	r7, #28
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	03fff000 	.word	0x03fff000

080015b4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	3360      	adds	r3, #96	@ 0x60
 80015c2:	461a      	mov	r2, r3
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	4413      	add	r3, r2
 80015ca:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3714      	adds	r7, #20
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b087      	sub	sp, #28
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	3360      	adds	r3, #96	@ 0x60
 80015f0:	461a      	mov	r2, r3
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	4413      	add	r3, r2
 80015f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	431a      	orrs	r2, r3
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800160a:	bf00      	nop
 800160c:	371c      	adds	r7, #28
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001616:	b480      	push	{r7}
 8001618:	b087      	sub	sp, #28
 800161a:	af00      	add	r7, sp, #0
 800161c:	60f8      	str	r0, [r7, #12]
 800161e:	60b9      	str	r1, [r7, #8]
 8001620:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	3360      	adds	r3, #96	@ 0x60
 8001626:	461a      	mov	r2, r3
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	4413      	add	r3, r2
 800162e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	431a      	orrs	r2, r3
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001640:	bf00      	nop
 8001642:	371c      	adds	r7, #28
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800164c:	b480      	push	{r7}
 800164e:	b087      	sub	sp, #28
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	3360      	adds	r3, #96	@ 0x60
 800165c:	461a      	mov	r2, r3
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	4413      	add	r3, r2
 8001664:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	431a      	orrs	r2, r3
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001676:	bf00      	nop
 8001678:	371c      	adds	r7, #28
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001682:	b480      	push	{r7}
 8001684:	b083      	sub	sp, #12
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
 800168a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	695b      	ldr	r3, [r3, #20]
 8001690:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	431a      	orrs	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	615a      	str	r2, [r3, #20]
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b087      	sub	sp, #28
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	3330      	adds	r3, #48	@ 0x30
 80016b8:	461a      	mov	r2, r3
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	0a1b      	lsrs	r3, r3, #8
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	f003 030c 	and.w	r3, r3, #12
 80016c4:	4413      	add	r3, r2
 80016c6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	f003 031f 	and.w	r3, r3, #31
 80016d2:	211f      	movs	r1, #31
 80016d4:	fa01 f303 	lsl.w	r3, r1, r3
 80016d8:	43db      	mvns	r3, r3
 80016da:	401a      	ands	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	0e9b      	lsrs	r3, r3, #26
 80016e0:	f003 011f 	and.w	r1, r3, #31
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	f003 031f 	and.w	r3, r3, #31
 80016ea:	fa01 f303 	lsl.w	r3, r1, r3
 80016ee:	431a      	orrs	r2, r3
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80016f4:	bf00      	nop
 80016f6:	371c      	adds	r7, #28
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001700:	b480      	push	{r7}
 8001702:	b087      	sub	sp, #28
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	3314      	adds	r3, #20
 8001710:	461a      	mov	r2, r3
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	0e5b      	lsrs	r3, r3, #25
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	f003 0304 	and.w	r3, r3, #4
 800171c:	4413      	add	r3, r2
 800171e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	0d1b      	lsrs	r3, r3, #20
 8001728:	f003 031f 	and.w	r3, r3, #31
 800172c:	2107      	movs	r1, #7
 800172e:	fa01 f303 	lsl.w	r3, r1, r3
 8001732:	43db      	mvns	r3, r3
 8001734:	401a      	ands	r2, r3
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	0d1b      	lsrs	r3, r3, #20
 800173a:	f003 031f 	and.w	r3, r3, #31
 800173e:	6879      	ldr	r1, [r7, #4]
 8001740:	fa01 f303 	lsl.w	r3, r1, r3
 8001744:	431a      	orrs	r2, r3
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800174a:	bf00      	nop
 800174c:	371c      	adds	r7, #28
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
	...

08001758 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001770:	43db      	mvns	r3, r3
 8001772:	401a      	ands	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f003 0318 	and.w	r3, r3, #24
 800177a:	4908      	ldr	r1, [pc, #32]	@ (800179c <LL_ADC_SetChannelSingleDiff+0x44>)
 800177c:	40d9      	lsrs	r1, r3
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	400b      	ands	r3, r1
 8001782:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001786:	431a      	orrs	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800178e:	bf00      	nop
 8001790:	3714      	adds	r7, #20
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	0007ffff 	.word	0x0007ffff

080017a0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80017b0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	6093      	str	r3, [r2, #8]
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80017d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80017d8:	d101      	bne.n	80017de <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80017da:	2301      	movs	r3, #1
 80017dc:	e000      	b.n	80017e0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80017fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001800:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001824:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001828:	d101      	bne.n	800182e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800182a:	2301      	movs	r3, #1
 800182c:	e000      	b.n	8001830 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800182e:	2300      	movs	r3, #0
}
 8001830:	4618      	mov	r0, r3
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	2b01      	cmp	r3, #1
 800184e:	d101      	bne.n	8001854 <LL_ADC_IsEnabled+0x18>
 8001850:	2301      	movs	r3, #1
 8001852:	e000      	b.n	8001856 <LL_ADC_IsEnabled+0x1a>
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001862:	b480      	push	{r7}
 8001864:	b083      	sub	sp, #12
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f003 0304 	and.w	r3, r3, #4
 8001872:	2b04      	cmp	r3, #4
 8001874:	d101      	bne.n	800187a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001876:	2301      	movs	r3, #1
 8001878:	e000      	b.n	800187c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800187a:	2300      	movs	r3, #0
}
 800187c:	4618      	mov	r0, r3
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f003 0308 	and.w	r3, r3, #8
 8001898:	2b08      	cmp	r3, #8
 800189a:	d101      	bne.n	80018a0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800189c:	2301      	movs	r3, #1
 800189e:	e000      	b.n	80018a2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
	...

080018b0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018b0:	b590      	push	{r4, r7, lr}
 80018b2:	b089      	sub	sp, #36	@ 0x24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018b8:	2300      	movs	r3, #0
 80018ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80018bc:	2300      	movs	r3, #0
 80018be:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e1a9      	b.n	8001c1e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d109      	bne.n	80018ec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f7ff fb33 	bl	8000f44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff ff67 	bl	80017c4 <LL_ADC_IsDeepPowerDownEnabled>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d004      	beq.n	8001906 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff ff4d 	bl	80017a0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff ff82 	bl	8001814 <LL_ADC_IsInternalRegulatorEnabled>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d115      	bne.n	8001942 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff ff66 	bl	80017ec <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001920:	4b9c      	ldr	r3, [pc, #624]	@ (8001b94 <HAL_ADC_Init+0x2e4>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	099b      	lsrs	r3, r3, #6
 8001926:	4a9c      	ldr	r2, [pc, #624]	@ (8001b98 <HAL_ADC_Init+0x2e8>)
 8001928:	fba2 2303 	umull	r2, r3, r2, r3
 800192c:	099b      	lsrs	r3, r3, #6
 800192e:	3301      	adds	r3, #1
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001934:	e002      	b.n	800193c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	3b01      	subs	r3, #1
 800193a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1f9      	bne.n	8001936 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff ff64 	bl	8001814 <LL_ADC_IsInternalRegulatorEnabled>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d10d      	bne.n	800196e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001956:	f043 0210 	orr.w	r2, r3, #16
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001962:	f043 0201 	orr.w	r2, r3, #1
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff ff75 	bl	8001862 <LL_ADC_REG_IsConversionOngoing>
 8001978:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800197e:	f003 0310 	and.w	r3, r3, #16
 8001982:	2b00      	cmp	r3, #0
 8001984:	f040 8142 	bne.w	8001c0c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	2b00      	cmp	r3, #0
 800198c:	f040 813e 	bne.w	8001c0c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001994:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001998:	f043 0202 	orr.w	r2, r3, #2
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff ff49 	bl	800183c <LL_ADC_IsEnabled>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d141      	bne.n	8001a34 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80019b8:	d004      	beq.n	80019c4 <HAL_ADC_Init+0x114>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a77      	ldr	r2, [pc, #476]	@ (8001b9c <HAL_ADC_Init+0x2ec>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d10f      	bne.n	80019e4 <HAL_ADC_Init+0x134>
 80019c4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80019c8:	f7ff ff38 	bl	800183c <LL_ADC_IsEnabled>
 80019cc:	4604      	mov	r4, r0
 80019ce:	4873      	ldr	r0, [pc, #460]	@ (8001b9c <HAL_ADC_Init+0x2ec>)
 80019d0:	f7ff ff34 	bl	800183c <LL_ADC_IsEnabled>
 80019d4:	4603      	mov	r3, r0
 80019d6:	4323      	orrs	r3, r4
 80019d8:	2b00      	cmp	r3, #0
 80019da:	bf0c      	ite	eq
 80019dc:	2301      	moveq	r3, #1
 80019de:	2300      	movne	r3, #0
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	e012      	b.n	8001a0a <HAL_ADC_Init+0x15a>
 80019e4:	486e      	ldr	r0, [pc, #440]	@ (8001ba0 <HAL_ADC_Init+0x2f0>)
 80019e6:	f7ff ff29 	bl	800183c <LL_ADC_IsEnabled>
 80019ea:	4604      	mov	r4, r0
 80019ec:	486d      	ldr	r0, [pc, #436]	@ (8001ba4 <HAL_ADC_Init+0x2f4>)
 80019ee:	f7ff ff25 	bl	800183c <LL_ADC_IsEnabled>
 80019f2:	4603      	mov	r3, r0
 80019f4:	431c      	orrs	r4, r3
 80019f6:	486c      	ldr	r0, [pc, #432]	@ (8001ba8 <HAL_ADC_Init+0x2f8>)
 80019f8:	f7ff ff20 	bl	800183c <LL_ADC_IsEnabled>
 80019fc:	4603      	mov	r3, r0
 80019fe:	4323      	orrs	r3, r4
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	bf0c      	ite	eq
 8001a04:	2301      	moveq	r3, #1
 8001a06:	2300      	movne	r3, #0
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d012      	beq.n	8001a34 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a16:	d004      	beq.n	8001a22 <HAL_ADC_Init+0x172>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a5f      	ldr	r2, [pc, #380]	@ (8001b9c <HAL_ADC_Init+0x2ec>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d101      	bne.n	8001a26 <HAL_ADC_Init+0x176>
 8001a22:	4a62      	ldr	r2, [pc, #392]	@ (8001bac <HAL_ADC_Init+0x2fc>)
 8001a24:	e000      	b.n	8001a28 <HAL_ADC_Init+0x178>
 8001a26:	4a62      	ldr	r2, [pc, #392]	@ (8001bb0 <HAL_ADC_Init+0x300>)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4610      	mov	r0, r2
 8001a30:	f7ff fd68 	bl	8001504 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	7f5b      	ldrb	r3, [r3, #29]
 8001a38:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a3e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001a44:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001a4a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a52:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a54:	4313      	orrs	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d106      	bne.n	8001a70 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a66:	3b01      	subs	r3, #1
 8001a68:	045b      	lsls	r3, r3, #17
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d009      	beq.n	8001a8c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a7c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a84:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	68da      	ldr	r2, [r3, #12]
 8001a92:	4b48      	ldr	r3, [pc, #288]	@ (8001bb4 <HAL_ADC_Init+0x304>)
 8001a94:	4013      	ands	r3, r2
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	6812      	ldr	r2, [r2, #0]
 8001a9a:	69b9      	ldr	r1, [r7, #24]
 8001a9c:	430b      	orrs	r3, r1
 8001a9e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	691b      	ldr	r3, [r3, #16]
 8001aa6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff fee4 	bl	8001888 <LL_ADC_INJ_IsConversionOngoing>
 8001ac0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d17f      	bne.n	8001bc8 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d17c      	bne.n	8001bc8 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ad2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001ada:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001adc:	4313      	orrs	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001aea:	f023 0302 	bic.w	r3, r3, #2
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	6812      	ldr	r2, [r2, #0]
 8001af2:	69b9      	ldr	r1, [r7, #24]
 8001af4:	430b      	orrs	r3, r1
 8001af6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	691b      	ldr	r3, [r3, #16]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d017      	beq.n	8001b30 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	691a      	ldr	r2, [r3, #16]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001b0e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001b18:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001b1c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	6911      	ldr	r1, [r2, #16]
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	6812      	ldr	r2, [r2, #0]
 8001b28:	430b      	orrs	r3, r1
 8001b2a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001b2e:	e013      	b.n	8001b58 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	691a      	ldr	r2, [r3, #16]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001b3e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	6812      	ldr	r2, [r2, #0]
 8001b4c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001b50:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b54:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d12a      	bne.n	8001bb8 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001b6c:	f023 0304 	bic.w	r3, r3, #4
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001b78:	4311      	orrs	r1, r2
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001b7e:	4311      	orrs	r1, r2
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001b84:	430a      	orrs	r2, r1
 8001b86:	431a      	orrs	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f042 0201 	orr.w	r2, r2, #1
 8001b90:	611a      	str	r2, [r3, #16]
 8001b92:	e019      	b.n	8001bc8 <HAL_ADC_Init+0x318>
 8001b94:	20000000 	.word	0x20000000
 8001b98:	053e2d63 	.word	0x053e2d63
 8001b9c:	50000100 	.word	0x50000100
 8001ba0:	50000400 	.word	0x50000400
 8001ba4:	50000500 	.word	0x50000500
 8001ba8:	50000600 	.word	0x50000600
 8001bac:	50000300 	.word	0x50000300
 8001bb0:	50000700 	.word	0x50000700
 8001bb4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	691a      	ldr	r2, [r3, #16]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f022 0201 	bic.w	r2, r2, #1
 8001bc6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	695b      	ldr	r3, [r3, #20]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d10c      	bne.n	8001bea <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd6:	f023 010f 	bic.w	r1, r3, #15
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a1b      	ldr	r3, [r3, #32]
 8001bde:	1e5a      	subs	r2, r3, #1
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	430a      	orrs	r2, r1
 8001be6:	631a      	str	r2, [r3, #48]	@ 0x30
 8001be8:	e007      	b.n	8001bfa <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f022 020f 	bic.w	r2, r2, #15
 8001bf8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bfe:	f023 0303 	bic.w	r3, r3, #3
 8001c02:	f043 0201 	orr.w	r2, r3, #1
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001c0a:	e007      	b.n	8001c1c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c10:	f043 0210 	orr.w	r2, r3, #16
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c1c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3724      	adds	r7, #36	@ 0x24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd90      	pop	{r4, r7, pc}
 8001c26:	bf00      	nop

08001c28 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b0b6      	sub	sp, #216	@ 0xd8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c32:	2300      	movs	r3, #0
 8001c34:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d102      	bne.n	8001c4c <HAL_ADC_ConfigChannel+0x24>
 8001c46:	2302      	movs	r3, #2
 8001c48:	f000 bc13 	b.w	8002472 <HAL_ADC_ConfigChannel+0x84a>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff fe02 	bl	8001862 <LL_ADC_REG_IsConversionOngoing>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	f040 83f3 	bne.w	800244c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6818      	ldr	r0, [r3, #0]
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	6859      	ldr	r1, [r3, #4]
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	461a      	mov	r2, r3
 8001c74:	f7ff fd18 	bl	80016a8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff fdf0 	bl	8001862 <LL_ADC_REG_IsConversionOngoing>
 8001c82:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff fdfc 	bl	8001888 <LL_ADC_INJ_IsConversionOngoing>
 8001c90:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c94:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	f040 81d9 	bne.w	8002050 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c9e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	f040 81d4 	bne.w	8002050 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001cb0:	d10f      	bne.n	8001cd2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6818      	ldr	r0, [r3, #0]
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	f7ff fd1f 	bl	8001700 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff fcd9 	bl	8001682 <LL_ADC_SetSamplingTimeCommonConfig>
 8001cd0:	e00e      	b.n	8001cf0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6818      	ldr	r0, [r3, #0]
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	6819      	ldr	r1, [r3, #0]
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	461a      	mov	r2, r3
 8001ce0:	f7ff fd0e 	bl	8001700 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2100      	movs	r1, #0
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff fcc9 	bl	8001682 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	695a      	ldr	r2, [r3, #20]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	08db      	lsrs	r3, r3, #3
 8001cfc:	f003 0303 	and.w	r3, r3, #3
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	2b04      	cmp	r3, #4
 8001d10:	d022      	beq.n	8001d58 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6818      	ldr	r0, [r3, #0]
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	6919      	ldr	r1, [r3, #16]
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001d22:	f7ff fc23 	bl	800156c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6818      	ldr	r0, [r3, #0]
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	6919      	ldr	r1, [r3, #16]
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	461a      	mov	r2, r3
 8001d34:	f7ff fc6f 	bl	8001616 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6818      	ldr	r0, [r3, #0]
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d102      	bne.n	8001d4e <HAL_ADC_ConfigChannel+0x126>
 8001d48:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d4c:	e000      	b.n	8001d50 <HAL_ADC_ConfigChannel+0x128>
 8001d4e:	2300      	movs	r3, #0
 8001d50:	461a      	mov	r2, r3
 8001d52:	f7ff fc7b 	bl	800164c <LL_ADC_SetOffsetSaturation>
 8001d56:	e17b      	b.n	8002050 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff fc28 	bl	80015b4 <LL_ADC_GetOffsetChannel>
 8001d64:	4603      	mov	r3, r0
 8001d66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d10a      	bne.n	8001d84 <HAL_ADC_ConfigChannel+0x15c>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2100      	movs	r1, #0
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff fc1d 	bl	80015b4 <LL_ADC_GetOffsetChannel>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	0e9b      	lsrs	r3, r3, #26
 8001d7e:	f003 021f 	and.w	r2, r3, #31
 8001d82:	e01e      	b.n	8001dc2 <HAL_ADC_ConfigChannel+0x19a>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2100      	movs	r1, #0
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff fc12 	bl	80015b4 <LL_ADC_GetOffsetChannel>
 8001d90:	4603      	mov	r3, r0
 8001d92:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d96:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001d9a:	fa93 f3a3 	rbit	r3, r3
 8001d9e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001da2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001da6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001daa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001db2:	2320      	movs	r3, #32
 8001db4:	e004      	b.n	8001dc0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001db6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001dba:	fab3 f383 	clz	r3, r3
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d105      	bne.n	8001dda <HAL_ADC_ConfigChannel+0x1b2>
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	0e9b      	lsrs	r3, r3, #26
 8001dd4:	f003 031f 	and.w	r3, r3, #31
 8001dd8:	e018      	b.n	8001e0c <HAL_ADC_ConfigChannel+0x1e4>
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001de6:	fa93 f3a3 	rbit	r3, r3
 8001dea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001dee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001df2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001df6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001dfe:	2320      	movs	r3, #32
 8001e00:	e004      	b.n	8001e0c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001e02:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001e06:	fab3 f383 	clz	r3, r3
 8001e0a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d106      	bne.n	8001e1e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2200      	movs	r2, #0
 8001e16:	2100      	movs	r1, #0
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff fbe1 	bl	80015e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2101      	movs	r1, #1
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff fbc5 	bl	80015b4 <LL_ADC_GetOffsetChannel>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d10a      	bne.n	8001e4a <HAL_ADC_ConfigChannel+0x222>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2101      	movs	r1, #1
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff fbba 	bl	80015b4 <LL_ADC_GetOffsetChannel>
 8001e40:	4603      	mov	r3, r0
 8001e42:	0e9b      	lsrs	r3, r3, #26
 8001e44:	f003 021f 	and.w	r2, r3, #31
 8001e48:	e01e      	b.n	8001e88 <HAL_ADC_ConfigChannel+0x260>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2101      	movs	r1, #1
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff fbaf 	bl	80015b4 <LL_ADC_GetOffsetChannel>
 8001e56:	4603      	mov	r3, r0
 8001e58:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001e60:	fa93 f3a3 	rbit	r3, r3
 8001e64:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001e68:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001e6c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001e70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d101      	bne.n	8001e7c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001e78:	2320      	movs	r3, #32
 8001e7a:	e004      	b.n	8001e86 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001e7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001e80:	fab3 f383 	clz	r3, r3
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d105      	bne.n	8001ea0 <HAL_ADC_ConfigChannel+0x278>
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	0e9b      	lsrs	r3, r3, #26
 8001e9a:	f003 031f 	and.w	r3, r3, #31
 8001e9e:	e018      	b.n	8001ed2 <HAL_ADC_ConfigChannel+0x2aa>
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001eac:	fa93 f3a3 	rbit	r3, r3
 8001eb0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001eb4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001eb8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001ebc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d101      	bne.n	8001ec8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001ec4:	2320      	movs	r3, #32
 8001ec6:	e004      	b.n	8001ed2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001ec8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001ecc:	fab3 f383 	clz	r3, r3
 8001ed0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d106      	bne.n	8001ee4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2200      	movs	r2, #0
 8001edc:	2101      	movs	r1, #1
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff fb7e 	bl	80015e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2102      	movs	r1, #2
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff fb62 	bl	80015b4 <LL_ADC_GetOffsetChannel>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d10a      	bne.n	8001f10 <HAL_ADC_ConfigChannel+0x2e8>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2102      	movs	r1, #2
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff fb57 	bl	80015b4 <LL_ADC_GetOffsetChannel>
 8001f06:	4603      	mov	r3, r0
 8001f08:	0e9b      	lsrs	r3, r3, #26
 8001f0a:	f003 021f 	and.w	r2, r3, #31
 8001f0e:	e01e      	b.n	8001f4e <HAL_ADC_ConfigChannel+0x326>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2102      	movs	r1, #2
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff fb4c 	bl	80015b4 <LL_ADC_GetOffsetChannel>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f26:	fa93 f3a3 	rbit	r3, r3
 8001f2a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001f2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001f32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001f36:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001f3e:	2320      	movs	r3, #32
 8001f40:	e004      	b.n	8001f4c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001f42:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001f46:	fab3 f383 	clz	r3, r3
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d105      	bne.n	8001f66 <HAL_ADC_ConfigChannel+0x33e>
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	0e9b      	lsrs	r3, r3, #26
 8001f60:	f003 031f 	and.w	r3, r3, #31
 8001f64:	e016      	b.n	8001f94 <HAL_ADC_ConfigChannel+0x36c>
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001f72:	fa93 f3a3 	rbit	r3, r3
 8001f76:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001f78:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001f7a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001f7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001f86:	2320      	movs	r3, #32
 8001f88:	e004      	b.n	8001f94 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001f8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001f8e:	fab3 f383 	clz	r3, r3
 8001f92:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d106      	bne.n	8001fa6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	2102      	movs	r1, #2
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff fb1d 	bl	80015e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2103      	movs	r1, #3
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff fb01 	bl	80015b4 <LL_ADC_GetOffsetChannel>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d10a      	bne.n	8001fd2 <HAL_ADC_ConfigChannel+0x3aa>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2103      	movs	r1, #3
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff faf6 	bl	80015b4 <LL_ADC_GetOffsetChannel>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	0e9b      	lsrs	r3, r3, #26
 8001fcc:	f003 021f 	and.w	r2, r3, #31
 8001fd0:	e017      	b.n	8002002 <HAL_ADC_ConfigChannel+0x3da>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2103      	movs	r1, #3
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff faeb 	bl	80015b4 <LL_ADC_GetOffsetChannel>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001fe4:	fa93 f3a3 	rbit	r3, r3
 8001fe8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001fea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001fec:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001fee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d101      	bne.n	8001ff8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001ff4:	2320      	movs	r3, #32
 8001ff6:	e003      	b.n	8002000 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001ff8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001ffa:	fab3 f383 	clz	r3, r3
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800200a:	2b00      	cmp	r3, #0
 800200c:	d105      	bne.n	800201a <HAL_ADC_ConfigChannel+0x3f2>
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	0e9b      	lsrs	r3, r3, #26
 8002014:	f003 031f 	and.w	r3, r3, #31
 8002018:	e011      	b.n	800203e <HAL_ADC_ConfigChannel+0x416>
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002020:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002022:	fa93 f3a3 	rbit	r3, r3
 8002026:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002028:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800202a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800202c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002032:	2320      	movs	r3, #32
 8002034:	e003      	b.n	800203e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002036:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002038:	fab3 f383 	clz	r3, r3
 800203c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800203e:	429a      	cmp	r2, r3
 8002040:	d106      	bne.n	8002050 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2200      	movs	r2, #0
 8002048:	2103      	movs	r1, #3
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff fac8 	bl	80015e0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff fbf1 	bl	800183c <LL_ADC_IsEnabled>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	f040 813d 	bne.w	80022dc <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6818      	ldr	r0, [r3, #0]
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	6819      	ldr	r1, [r3, #0]
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	461a      	mov	r2, r3
 8002070:	f7ff fb72 	bl	8001758 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	4aa2      	ldr	r2, [pc, #648]	@ (8002304 <HAL_ADC_ConfigChannel+0x6dc>)
 800207a:	4293      	cmp	r3, r2
 800207c:	f040 812e 	bne.w	80022dc <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800208c:	2b00      	cmp	r3, #0
 800208e:	d10b      	bne.n	80020a8 <HAL_ADC_ConfigChannel+0x480>
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	0e9b      	lsrs	r3, r3, #26
 8002096:	3301      	adds	r3, #1
 8002098:	f003 031f 	and.w	r3, r3, #31
 800209c:	2b09      	cmp	r3, #9
 800209e:	bf94      	ite	ls
 80020a0:	2301      	movls	r3, #1
 80020a2:	2300      	movhi	r3, #0
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	e019      	b.n	80020dc <HAL_ADC_ConfigChannel+0x4b4>
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80020b0:	fa93 f3a3 	rbit	r3, r3
 80020b4:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80020b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80020b8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80020ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d101      	bne.n	80020c4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80020c0:	2320      	movs	r3, #32
 80020c2:	e003      	b.n	80020cc <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80020c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80020c6:	fab3 f383 	clz	r3, r3
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	3301      	adds	r3, #1
 80020ce:	f003 031f 	and.w	r3, r3, #31
 80020d2:	2b09      	cmp	r3, #9
 80020d4:	bf94      	ite	ls
 80020d6:	2301      	movls	r3, #1
 80020d8:	2300      	movhi	r3, #0
 80020da:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d079      	beq.n	80021d4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d107      	bne.n	80020fc <HAL_ADC_ConfigChannel+0x4d4>
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	0e9b      	lsrs	r3, r3, #26
 80020f2:	3301      	adds	r3, #1
 80020f4:	069b      	lsls	r3, r3, #26
 80020f6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020fa:	e015      	b.n	8002128 <HAL_ADC_ConfigChannel+0x500>
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002102:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002104:	fa93 f3a3 	rbit	r3, r3
 8002108:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800210a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800210c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800210e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002110:	2b00      	cmp	r3, #0
 8002112:	d101      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002114:	2320      	movs	r3, #32
 8002116:	e003      	b.n	8002120 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002118:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800211a:	fab3 f383 	clz	r3, r3
 800211e:	b2db      	uxtb	r3, r3
 8002120:	3301      	adds	r3, #1
 8002122:	069b      	lsls	r3, r3, #26
 8002124:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002130:	2b00      	cmp	r3, #0
 8002132:	d109      	bne.n	8002148 <HAL_ADC_ConfigChannel+0x520>
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	0e9b      	lsrs	r3, r3, #26
 800213a:	3301      	adds	r3, #1
 800213c:	f003 031f 	and.w	r3, r3, #31
 8002140:	2101      	movs	r1, #1
 8002142:	fa01 f303 	lsl.w	r3, r1, r3
 8002146:	e017      	b.n	8002178 <HAL_ADC_ConfigChannel+0x550>
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002150:	fa93 f3a3 	rbit	r3, r3
 8002154:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002156:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002158:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800215a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800215c:	2b00      	cmp	r3, #0
 800215e:	d101      	bne.n	8002164 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002160:	2320      	movs	r3, #32
 8002162:	e003      	b.n	800216c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002164:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002166:	fab3 f383 	clz	r3, r3
 800216a:	b2db      	uxtb	r3, r3
 800216c:	3301      	adds	r3, #1
 800216e:	f003 031f 	and.w	r3, r3, #31
 8002172:	2101      	movs	r1, #1
 8002174:	fa01 f303 	lsl.w	r3, r1, r3
 8002178:	ea42 0103 	orr.w	r1, r2, r3
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002184:	2b00      	cmp	r3, #0
 8002186:	d10a      	bne.n	800219e <HAL_ADC_ConfigChannel+0x576>
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	0e9b      	lsrs	r3, r3, #26
 800218e:	3301      	adds	r3, #1
 8002190:	f003 021f 	and.w	r2, r3, #31
 8002194:	4613      	mov	r3, r2
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	4413      	add	r3, r2
 800219a:	051b      	lsls	r3, r3, #20
 800219c:	e018      	b.n	80021d0 <HAL_ADC_ConfigChannel+0x5a8>
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021a6:	fa93 f3a3 	rbit	r3, r3
 80021aa:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80021ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80021b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80021b6:	2320      	movs	r3, #32
 80021b8:	e003      	b.n	80021c2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80021ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021bc:	fab3 f383 	clz	r3, r3
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	3301      	adds	r3, #1
 80021c4:	f003 021f 	and.w	r2, r3, #31
 80021c8:	4613      	mov	r3, r2
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	4413      	add	r3, r2
 80021ce:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021d0:	430b      	orrs	r3, r1
 80021d2:	e07e      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d107      	bne.n	80021f0 <HAL_ADC_ConfigChannel+0x5c8>
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	0e9b      	lsrs	r3, r3, #26
 80021e6:	3301      	adds	r3, #1
 80021e8:	069b      	lsls	r3, r3, #26
 80021ea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80021ee:	e015      	b.n	800221c <HAL_ADC_ConfigChannel+0x5f4>
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021f8:	fa93 f3a3 	rbit	r3, r3
 80021fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80021fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002200:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002204:	2b00      	cmp	r3, #0
 8002206:	d101      	bne.n	800220c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002208:	2320      	movs	r3, #32
 800220a:	e003      	b.n	8002214 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800220c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800220e:	fab3 f383 	clz	r3, r3
 8002212:	b2db      	uxtb	r3, r3
 8002214:	3301      	adds	r3, #1
 8002216:	069b      	lsls	r3, r3, #26
 8002218:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002224:	2b00      	cmp	r3, #0
 8002226:	d109      	bne.n	800223c <HAL_ADC_ConfigChannel+0x614>
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	0e9b      	lsrs	r3, r3, #26
 800222e:	3301      	adds	r3, #1
 8002230:	f003 031f 	and.w	r3, r3, #31
 8002234:	2101      	movs	r1, #1
 8002236:	fa01 f303 	lsl.w	r3, r1, r3
 800223a:	e017      	b.n	800226c <HAL_ADC_ConfigChannel+0x644>
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002242:	6a3b      	ldr	r3, [r7, #32]
 8002244:	fa93 f3a3 	rbit	r3, r3
 8002248:	61fb      	str	r3, [r7, #28]
  return result;
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800224e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002250:	2b00      	cmp	r3, #0
 8002252:	d101      	bne.n	8002258 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002254:	2320      	movs	r3, #32
 8002256:	e003      	b.n	8002260 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800225a:	fab3 f383 	clz	r3, r3
 800225e:	b2db      	uxtb	r3, r3
 8002260:	3301      	adds	r3, #1
 8002262:	f003 031f 	and.w	r3, r3, #31
 8002266:	2101      	movs	r1, #1
 8002268:	fa01 f303 	lsl.w	r3, r1, r3
 800226c:	ea42 0103 	orr.w	r1, r2, r3
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002278:	2b00      	cmp	r3, #0
 800227a:	d10d      	bne.n	8002298 <HAL_ADC_ConfigChannel+0x670>
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	0e9b      	lsrs	r3, r3, #26
 8002282:	3301      	adds	r3, #1
 8002284:	f003 021f 	and.w	r2, r3, #31
 8002288:	4613      	mov	r3, r2
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	4413      	add	r3, r2
 800228e:	3b1e      	subs	r3, #30
 8002290:	051b      	lsls	r3, r3, #20
 8002292:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002296:	e01b      	b.n	80022d0 <HAL_ADC_ConfigChannel+0x6a8>
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	fa93 f3a3 	rbit	r3, r3
 80022a4:	613b      	str	r3, [r7, #16]
  return result;
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d101      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80022b0:	2320      	movs	r3, #32
 80022b2:	e003      	b.n	80022bc <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	fab3 f383 	clz	r3, r3
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	3301      	adds	r3, #1
 80022be:	f003 021f 	and.w	r2, r3, #31
 80022c2:	4613      	mov	r3, r2
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	4413      	add	r3, r2
 80022c8:	3b1e      	subs	r3, #30
 80022ca:	051b      	lsls	r3, r3, #20
 80022cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022d0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022d6:	4619      	mov	r1, r3
 80022d8:	f7ff fa12 	bl	8001700 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	4b09      	ldr	r3, [pc, #36]	@ (8002308 <HAL_ADC_ConfigChannel+0x6e0>)
 80022e2:	4013      	ands	r3, r2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f000 80be 	beq.w	8002466 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022f2:	d004      	beq.n	80022fe <HAL_ADC_ConfigChannel+0x6d6>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a04      	ldr	r2, [pc, #16]	@ (800230c <HAL_ADC_ConfigChannel+0x6e4>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d10a      	bne.n	8002314 <HAL_ADC_ConfigChannel+0x6ec>
 80022fe:	4b04      	ldr	r3, [pc, #16]	@ (8002310 <HAL_ADC_ConfigChannel+0x6e8>)
 8002300:	e009      	b.n	8002316 <HAL_ADC_ConfigChannel+0x6ee>
 8002302:	bf00      	nop
 8002304:	407f0000 	.word	0x407f0000
 8002308:	80080000 	.word	0x80080000
 800230c:	50000100 	.word	0x50000100
 8002310:	50000300 	.word	0x50000300
 8002314:	4b59      	ldr	r3, [pc, #356]	@ (800247c <HAL_ADC_ConfigChannel+0x854>)
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff f91a 	bl	8001550 <LL_ADC_GetCommonPathInternalCh>
 800231c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a56      	ldr	r2, [pc, #344]	@ (8002480 <HAL_ADC_ConfigChannel+0x858>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d004      	beq.n	8002334 <HAL_ADC_ConfigChannel+0x70c>
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a55      	ldr	r2, [pc, #340]	@ (8002484 <HAL_ADC_ConfigChannel+0x85c>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d13a      	bne.n	80023aa <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002334:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002338:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d134      	bne.n	80023aa <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002348:	d005      	beq.n	8002356 <HAL_ADC_ConfigChannel+0x72e>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a4e      	ldr	r2, [pc, #312]	@ (8002488 <HAL_ADC_ConfigChannel+0x860>)
 8002350:	4293      	cmp	r3, r2
 8002352:	f040 8085 	bne.w	8002460 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800235e:	d004      	beq.n	800236a <HAL_ADC_ConfigChannel+0x742>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a49      	ldr	r2, [pc, #292]	@ (800248c <HAL_ADC_ConfigChannel+0x864>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d101      	bne.n	800236e <HAL_ADC_ConfigChannel+0x746>
 800236a:	4a49      	ldr	r2, [pc, #292]	@ (8002490 <HAL_ADC_ConfigChannel+0x868>)
 800236c:	e000      	b.n	8002370 <HAL_ADC_ConfigChannel+0x748>
 800236e:	4a43      	ldr	r2, [pc, #268]	@ (800247c <HAL_ADC_ConfigChannel+0x854>)
 8002370:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002374:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002378:	4619      	mov	r1, r3
 800237a:	4610      	mov	r0, r2
 800237c:	f7ff f8d5 	bl	800152a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002380:	4b44      	ldr	r3, [pc, #272]	@ (8002494 <HAL_ADC_ConfigChannel+0x86c>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	099b      	lsrs	r3, r3, #6
 8002386:	4a44      	ldr	r2, [pc, #272]	@ (8002498 <HAL_ADC_ConfigChannel+0x870>)
 8002388:	fba2 2303 	umull	r2, r3, r2, r3
 800238c:	099b      	lsrs	r3, r3, #6
 800238e:	1c5a      	adds	r2, r3, #1
 8002390:	4613      	mov	r3, r2
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	4413      	add	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800239a:	e002      	b.n	80023a2 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	3b01      	subs	r3, #1
 80023a0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1f9      	bne.n	800239c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023a8:	e05a      	b.n	8002460 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a3b      	ldr	r2, [pc, #236]	@ (800249c <HAL_ADC_ConfigChannel+0x874>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d125      	bne.n	8002400 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80023b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80023b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d11f      	bne.n	8002400 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a31      	ldr	r2, [pc, #196]	@ (800248c <HAL_ADC_ConfigChannel+0x864>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d104      	bne.n	80023d4 <HAL_ADC_ConfigChannel+0x7ac>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a34      	ldr	r2, [pc, #208]	@ (80024a0 <HAL_ADC_ConfigChannel+0x878>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d047      	beq.n	8002464 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023dc:	d004      	beq.n	80023e8 <HAL_ADC_ConfigChannel+0x7c0>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a2a      	ldr	r2, [pc, #168]	@ (800248c <HAL_ADC_ConfigChannel+0x864>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d101      	bne.n	80023ec <HAL_ADC_ConfigChannel+0x7c4>
 80023e8:	4a29      	ldr	r2, [pc, #164]	@ (8002490 <HAL_ADC_ConfigChannel+0x868>)
 80023ea:	e000      	b.n	80023ee <HAL_ADC_ConfigChannel+0x7c6>
 80023ec:	4a23      	ldr	r2, [pc, #140]	@ (800247c <HAL_ADC_ConfigChannel+0x854>)
 80023ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80023f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023f6:	4619      	mov	r1, r3
 80023f8:	4610      	mov	r0, r2
 80023fa:	f7ff f896 	bl	800152a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023fe:	e031      	b.n	8002464 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a27      	ldr	r2, [pc, #156]	@ (80024a4 <HAL_ADC_ConfigChannel+0x87c>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d12d      	bne.n	8002466 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800240a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800240e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d127      	bne.n	8002466 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a1c      	ldr	r2, [pc, #112]	@ (800248c <HAL_ADC_ConfigChannel+0x864>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d022      	beq.n	8002466 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002428:	d004      	beq.n	8002434 <HAL_ADC_ConfigChannel+0x80c>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a17      	ldr	r2, [pc, #92]	@ (800248c <HAL_ADC_ConfigChannel+0x864>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d101      	bne.n	8002438 <HAL_ADC_ConfigChannel+0x810>
 8002434:	4a16      	ldr	r2, [pc, #88]	@ (8002490 <HAL_ADC_ConfigChannel+0x868>)
 8002436:	e000      	b.n	800243a <HAL_ADC_ConfigChannel+0x812>
 8002438:	4a10      	ldr	r2, [pc, #64]	@ (800247c <HAL_ADC_ConfigChannel+0x854>)
 800243a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800243e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002442:	4619      	mov	r1, r3
 8002444:	4610      	mov	r0, r2
 8002446:	f7ff f870 	bl	800152a <LL_ADC_SetCommonPathInternalCh>
 800244a:	e00c      	b.n	8002466 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002450:	f043 0220 	orr.w	r2, r3, #32
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800245e:	e002      	b.n	8002466 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002460:	bf00      	nop
 8002462:	e000      	b.n	8002466 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002464:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800246e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002472:	4618      	mov	r0, r3
 8002474:	37d8      	adds	r7, #216	@ 0xd8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	50000700 	.word	0x50000700
 8002480:	c3210000 	.word	0xc3210000
 8002484:	90c00010 	.word	0x90c00010
 8002488:	50000600 	.word	0x50000600
 800248c:	50000100 	.word	0x50000100
 8002490:	50000300 	.word	0x50000300
 8002494:	20000000 	.word	0x20000000
 8002498:	053e2d63 	.word	0x053e2d63
 800249c:	c7520000 	.word	0xc7520000
 80024a0:	50000500 	.word	0x50000500
 80024a4:	cb840000 	.word	0xcb840000

080024a8 <LL_ADC_IsEnabled>:
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d101      	bne.n	80024c0 <LL_ADC_IsEnabled+0x18>
 80024bc:	2301      	movs	r3, #1
 80024be:	e000      	b.n	80024c2 <LL_ADC_IsEnabled+0x1a>
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <LL_ADC_REG_IsConversionOngoing>:
{
 80024ce:	b480      	push	{r7}
 80024d0:	b083      	sub	sp, #12
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 0304 	and.w	r3, r3, #4
 80024de:	2b04      	cmp	r3, #4
 80024e0:	d101      	bne.n	80024e6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80024e2:	2301      	movs	r3, #1
 80024e4:	e000      	b.n	80024e8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80024f4:	b590      	push	{r4, r7, lr}
 80024f6:	b0a1      	sub	sp, #132	@ 0x84
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024fe:	2300      	movs	r3, #0
 8002500:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800250a:	2b01      	cmp	r3, #1
 800250c:	d101      	bne.n	8002512 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800250e:	2302      	movs	r3, #2
 8002510:	e0e7      	b.n	80026e2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2201      	movs	r2, #1
 8002516:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800251a:	2300      	movs	r3, #0
 800251c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800251e:	2300      	movs	r3, #0
 8002520:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800252a:	d102      	bne.n	8002532 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800252c:	4b6f      	ldr	r3, [pc, #444]	@ (80026ec <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800252e:	60bb      	str	r3, [r7, #8]
 8002530:	e009      	b.n	8002546 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a6e      	ldr	r2, [pc, #440]	@ (80026f0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d102      	bne.n	8002542 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800253c:	4b6d      	ldr	r3, [pc, #436]	@ (80026f4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800253e:	60bb      	str	r3, [r7, #8]
 8002540:	e001      	b.n	8002546 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002542:	2300      	movs	r3, #0
 8002544:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d10b      	bne.n	8002564 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002550:	f043 0220 	orr.w	r2, r3, #32
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e0be      	b.n	80026e2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff ffb1 	bl	80024ce <LL_ADC_REG_IsConversionOngoing>
 800256c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f7ff ffab 	bl	80024ce <LL_ADC_REG_IsConversionOngoing>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	f040 80a0 	bne.w	80026c0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002580:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002582:	2b00      	cmp	r3, #0
 8002584:	f040 809c 	bne.w	80026c0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002590:	d004      	beq.n	800259c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a55      	ldr	r2, [pc, #340]	@ (80026ec <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d101      	bne.n	80025a0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800259c:	4b56      	ldr	r3, [pc, #344]	@ (80026f8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800259e:	e000      	b.n	80025a2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80025a0:	4b56      	ldr	r3, [pc, #344]	@ (80026fc <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80025a2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d04b      	beq.n	8002644 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80025ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	6859      	ldr	r1, [r3, #4]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80025be:	035b      	lsls	r3, r3, #13
 80025c0:	430b      	orrs	r3, r1
 80025c2:	431a      	orrs	r2, r3
 80025c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025c6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025d0:	d004      	beq.n	80025dc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a45      	ldr	r2, [pc, #276]	@ (80026ec <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d10f      	bne.n	80025fc <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80025dc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80025e0:	f7ff ff62 	bl	80024a8 <LL_ADC_IsEnabled>
 80025e4:	4604      	mov	r4, r0
 80025e6:	4841      	ldr	r0, [pc, #260]	@ (80026ec <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80025e8:	f7ff ff5e 	bl	80024a8 <LL_ADC_IsEnabled>
 80025ec:	4603      	mov	r3, r0
 80025ee:	4323      	orrs	r3, r4
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	bf0c      	ite	eq
 80025f4:	2301      	moveq	r3, #1
 80025f6:	2300      	movne	r3, #0
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	e012      	b.n	8002622 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80025fc:	483c      	ldr	r0, [pc, #240]	@ (80026f0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80025fe:	f7ff ff53 	bl	80024a8 <LL_ADC_IsEnabled>
 8002602:	4604      	mov	r4, r0
 8002604:	483b      	ldr	r0, [pc, #236]	@ (80026f4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002606:	f7ff ff4f 	bl	80024a8 <LL_ADC_IsEnabled>
 800260a:	4603      	mov	r3, r0
 800260c:	431c      	orrs	r4, r3
 800260e:	483c      	ldr	r0, [pc, #240]	@ (8002700 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002610:	f7ff ff4a 	bl	80024a8 <LL_ADC_IsEnabled>
 8002614:	4603      	mov	r3, r0
 8002616:	4323      	orrs	r3, r4
 8002618:	2b00      	cmp	r3, #0
 800261a:	bf0c      	ite	eq
 800261c:	2301      	moveq	r3, #1
 800261e:	2300      	movne	r3, #0
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d056      	beq.n	80026d4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002626:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800262e:	f023 030f 	bic.w	r3, r3, #15
 8002632:	683a      	ldr	r2, [r7, #0]
 8002634:	6811      	ldr	r1, [r2, #0]
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	6892      	ldr	r2, [r2, #8]
 800263a:	430a      	orrs	r2, r1
 800263c:	431a      	orrs	r2, r3
 800263e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002640:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002642:	e047      	b.n	80026d4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002644:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800264c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800264e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002658:	d004      	beq.n	8002664 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a23      	ldr	r2, [pc, #140]	@ (80026ec <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d10f      	bne.n	8002684 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002664:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002668:	f7ff ff1e 	bl	80024a8 <LL_ADC_IsEnabled>
 800266c:	4604      	mov	r4, r0
 800266e:	481f      	ldr	r0, [pc, #124]	@ (80026ec <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002670:	f7ff ff1a 	bl	80024a8 <LL_ADC_IsEnabled>
 8002674:	4603      	mov	r3, r0
 8002676:	4323      	orrs	r3, r4
 8002678:	2b00      	cmp	r3, #0
 800267a:	bf0c      	ite	eq
 800267c:	2301      	moveq	r3, #1
 800267e:	2300      	movne	r3, #0
 8002680:	b2db      	uxtb	r3, r3
 8002682:	e012      	b.n	80026aa <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002684:	481a      	ldr	r0, [pc, #104]	@ (80026f0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002686:	f7ff ff0f 	bl	80024a8 <LL_ADC_IsEnabled>
 800268a:	4604      	mov	r4, r0
 800268c:	4819      	ldr	r0, [pc, #100]	@ (80026f4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800268e:	f7ff ff0b 	bl	80024a8 <LL_ADC_IsEnabled>
 8002692:	4603      	mov	r3, r0
 8002694:	431c      	orrs	r4, r3
 8002696:	481a      	ldr	r0, [pc, #104]	@ (8002700 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002698:	f7ff ff06 	bl	80024a8 <LL_ADC_IsEnabled>
 800269c:	4603      	mov	r3, r0
 800269e:	4323      	orrs	r3, r4
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	bf0c      	ite	eq
 80026a4:	2301      	moveq	r3, #1
 80026a6:	2300      	movne	r3, #0
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d012      	beq.n	80026d4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80026ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80026b6:	f023 030f 	bic.w	r3, r3, #15
 80026ba:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80026bc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80026be:	e009      	b.n	80026d4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026c4:	f043 0220 	orr.w	r2, r3, #32
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80026d2:	e000      	b.n	80026d6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80026d4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80026de:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3784      	adds	r7, #132	@ 0x84
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd90      	pop	{r4, r7, pc}
 80026ea:	bf00      	nop
 80026ec:	50000100 	.word	0x50000100
 80026f0:	50000400 	.word	0x50000400
 80026f4:	50000500 	.word	0x50000500
 80026f8:	50000300 	.word	0x50000300
 80026fc:	50000700 	.word	0x50000700
 8002700:	50000600 	.word	0x50000600

08002704 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002704:	b480      	push	{r7}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f003 0307 	and.w	r3, r3, #7
 8002712:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002714:	4b0c      	ldr	r3, [pc, #48]	@ (8002748 <__NVIC_SetPriorityGrouping+0x44>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800271a:	68ba      	ldr	r2, [r7, #8]
 800271c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002720:	4013      	ands	r3, r2
 8002722:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800272c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002730:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002734:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002736:	4a04      	ldr	r2, [pc, #16]	@ (8002748 <__NVIC_SetPriorityGrouping+0x44>)
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	60d3      	str	r3, [r2, #12]
}
 800273c:	bf00      	nop
 800273e:	3714      	adds	r7, #20
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	e000ed00 	.word	0xe000ed00

0800274c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002750:	4b04      	ldr	r3, [pc, #16]	@ (8002764 <__NVIC_GetPriorityGrouping+0x18>)
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	0a1b      	lsrs	r3, r3, #8
 8002756:	f003 0307 	and.w	r3, r3, #7
}
 800275a:	4618      	mov	r0, r3
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	e000ed00 	.word	0xe000ed00

08002768 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	4603      	mov	r3, r0
 8002770:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002776:	2b00      	cmp	r3, #0
 8002778:	db0b      	blt.n	8002792 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800277a:	79fb      	ldrb	r3, [r7, #7]
 800277c:	f003 021f 	and.w	r2, r3, #31
 8002780:	4907      	ldr	r1, [pc, #28]	@ (80027a0 <__NVIC_EnableIRQ+0x38>)
 8002782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002786:	095b      	lsrs	r3, r3, #5
 8002788:	2001      	movs	r0, #1
 800278a:	fa00 f202 	lsl.w	r2, r0, r2
 800278e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002792:	bf00      	nop
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	e000e100 	.word	0xe000e100

080027a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	4603      	mov	r3, r0
 80027ac:	6039      	str	r1, [r7, #0]
 80027ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	db0a      	blt.n	80027ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	b2da      	uxtb	r2, r3
 80027bc:	490c      	ldr	r1, [pc, #48]	@ (80027f0 <__NVIC_SetPriority+0x4c>)
 80027be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c2:	0112      	lsls	r2, r2, #4
 80027c4:	b2d2      	uxtb	r2, r2
 80027c6:	440b      	add	r3, r1
 80027c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027cc:	e00a      	b.n	80027e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	4908      	ldr	r1, [pc, #32]	@ (80027f4 <__NVIC_SetPriority+0x50>)
 80027d4:	79fb      	ldrb	r3, [r7, #7]
 80027d6:	f003 030f 	and.w	r3, r3, #15
 80027da:	3b04      	subs	r3, #4
 80027dc:	0112      	lsls	r2, r2, #4
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	440b      	add	r3, r1
 80027e2:	761a      	strb	r2, [r3, #24]
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr
 80027f0:	e000e100 	.word	0xe000e100
 80027f4:	e000ed00 	.word	0xe000ed00

080027f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b089      	sub	sp, #36	@ 0x24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	f1c3 0307 	rsb	r3, r3, #7
 8002812:	2b04      	cmp	r3, #4
 8002814:	bf28      	it	cs
 8002816:	2304      	movcs	r3, #4
 8002818:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	3304      	adds	r3, #4
 800281e:	2b06      	cmp	r3, #6
 8002820:	d902      	bls.n	8002828 <NVIC_EncodePriority+0x30>
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	3b03      	subs	r3, #3
 8002826:	e000      	b.n	800282a <NVIC_EncodePriority+0x32>
 8002828:	2300      	movs	r3, #0
 800282a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800282c:	f04f 32ff 	mov.w	r2, #4294967295
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	43da      	mvns	r2, r3
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	401a      	ands	r2, r3
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002840:	f04f 31ff 	mov.w	r1, #4294967295
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	fa01 f303 	lsl.w	r3, r1, r3
 800284a:	43d9      	mvns	r1, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002850:	4313      	orrs	r3, r2
         );
}
 8002852:	4618      	mov	r0, r3
 8002854:	3724      	adds	r7, #36	@ 0x24
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
	...

08002860 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3b01      	subs	r3, #1
 800286c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002870:	d301      	bcc.n	8002876 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002872:	2301      	movs	r3, #1
 8002874:	e00f      	b.n	8002896 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002876:	4a0a      	ldr	r2, [pc, #40]	@ (80028a0 <SysTick_Config+0x40>)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	3b01      	subs	r3, #1
 800287c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800287e:	210f      	movs	r1, #15
 8002880:	f04f 30ff 	mov.w	r0, #4294967295
 8002884:	f7ff ff8e 	bl	80027a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002888:	4b05      	ldr	r3, [pc, #20]	@ (80028a0 <SysTick_Config+0x40>)
 800288a:	2200      	movs	r2, #0
 800288c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800288e:	4b04      	ldr	r3, [pc, #16]	@ (80028a0 <SysTick_Config+0x40>)
 8002890:	2207      	movs	r2, #7
 8002892:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	e000e010 	.word	0xe000e010

080028a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f7ff ff29 	bl	8002704 <__NVIC_SetPriorityGrouping>
}
 80028b2:	bf00      	nop
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b086      	sub	sp, #24
 80028be:	af00      	add	r7, sp, #0
 80028c0:	4603      	mov	r3, r0
 80028c2:	60b9      	str	r1, [r7, #8]
 80028c4:	607a      	str	r2, [r7, #4]
 80028c6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80028c8:	f7ff ff40 	bl	800274c <__NVIC_GetPriorityGrouping>
 80028cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	68b9      	ldr	r1, [r7, #8]
 80028d2:	6978      	ldr	r0, [r7, #20]
 80028d4:	f7ff ff90 	bl	80027f8 <NVIC_EncodePriority>
 80028d8:	4602      	mov	r2, r0
 80028da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028de:	4611      	mov	r1, r2
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff ff5f 	bl	80027a4 <__NVIC_SetPriority>
}
 80028e6:	bf00      	nop
 80028e8:	3718      	adds	r7, #24
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b082      	sub	sp, #8
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	4603      	mov	r3, r0
 80028f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff ff33 	bl	8002768 <__NVIC_EnableIRQ>
}
 8002902:	bf00      	nop
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b082      	sub	sp, #8
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f7ff ffa4 	bl	8002860 <SysTick_Config>
 8002918:	4603      	mov	r3, r0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
	...

08002924 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002924:	b480      	push	{r7}
 8002926:	b087      	sub	sp, #28
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800292e:	2300      	movs	r3, #0
 8002930:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002932:	e15a      	b.n	8002bea <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	2101      	movs	r1, #1
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	fa01 f303 	lsl.w	r3, r1, r3
 8002940:	4013      	ands	r3, r2
 8002942:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2b00      	cmp	r3, #0
 8002948:	f000 814c 	beq.w	8002be4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f003 0303 	and.w	r3, r3, #3
 8002954:	2b01      	cmp	r3, #1
 8002956:	d005      	beq.n	8002964 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002960:	2b02      	cmp	r3, #2
 8002962:	d130      	bne.n	80029c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	2203      	movs	r2, #3
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	43db      	mvns	r3, r3
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	4013      	ands	r3, r2
 800297a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	68da      	ldr	r2, [r3, #12]
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	4313      	orrs	r3, r2
 800298c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800299a:	2201      	movs	r2, #1
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	fa02 f303 	lsl.w	r3, r2, r3
 80029a2:	43db      	mvns	r3, r3
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	4013      	ands	r3, r2
 80029a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	091b      	lsrs	r3, r3, #4
 80029b0:	f003 0201 	and.w	r2, r3, #1
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	4313      	orrs	r3, r2
 80029be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f003 0303 	and.w	r3, r3, #3
 80029ce:	2b03      	cmp	r3, #3
 80029d0:	d017      	beq.n	8002a02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	2203      	movs	r2, #3
 80029de:	fa02 f303 	lsl.w	r3, r2, r3
 80029e2:	43db      	mvns	r3, r3
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	4013      	ands	r3, r2
 80029e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	689a      	ldr	r2, [r3, #8]
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	fa02 f303 	lsl.w	r3, r2, r3
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f003 0303 	and.w	r3, r3, #3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d123      	bne.n	8002a56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	08da      	lsrs	r2, r3, #3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	3208      	adds	r2, #8
 8002a16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	220f      	movs	r2, #15
 8002a26:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2a:	43db      	mvns	r3, r3
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	691a      	ldr	r2, [r3, #16]
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	08da      	lsrs	r2, r3, #3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	3208      	adds	r2, #8
 8002a50:	6939      	ldr	r1, [r7, #16]
 8002a52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	2203      	movs	r2, #3
 8002a62:	fa02 f303 	lsl.w	r3, r2, r3
 8002a66:	43db      	mvns	r3, r3
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f003 0203 	and.w	r2, r3, #3
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f000 80a6 	beq.w	8002be4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a98:	4b5b      	ldr	r3, [pc, #364]	@ (8002c08 <HAL_GPIO_Init+0x2e4>)
 8002a9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a9c:	4a5a      	ldr	r2, [pc, #360]	@ (8002c08 <HAL_GPIO_Init+0x2e4>)
 8002a9e:	f043 0301 	orr.w	r3, r3, #1
 8002aa2:	6613      	str	r3, [r2, #96]	@ 0x60
 8002aa4:	4b58      	ldr	r3, [pc, #352]	@ (8002c08 <HAL_GPIO_Init+0x2e4>)
 8002aa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002aa8:	f003 0301 	and.w	r3, r3, #1
 8002aac:	60bb      	str	r3, [r7, #8]
 8002aae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ab0:	4a56      	ldr	r2, [pc, #344]	@ (8002c0c <HAL_GPIO_Init+0x2e8>)
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	089b      	lsrs	r3, r3, #2
 8002ab6:	3302      	adds	r3, #2
 8002ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002abc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	f003 0303 	and.w	r3, r3, #3
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	220f      	movs	r2, #15
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	43db      	mvns	r3, r3
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002ada:	d01f      	beq.n	8002b1c <HAL_GPIO_Init+0x1f8>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a4c      	ldr	r2, [pc, #304]	@ (8002c10 <HAL_GPIO_Init+0x2ec>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d019      	beq.n	8002b18 <HAL_GPIO_Init+0x1f4>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a4b      	ldr	r2, [pc, #300]	@ (8002c14 <HAL_GPIO_Init+0x2f0>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d013      	beq.n	8002b14 <HAL_GPIO_Init+0x1f0>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a4a      	ldr	r2, [pc, #296]	@ (8002c18 <HAL_GPIO_Init+0x2f4>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d00d      	beq.n	8002b10 <HAL_GPIO_Init+0x1ec>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a49      	ldr	r2, [pc, #292]	@ (8002c1c <HAL_GPIO_Init+0x2f8>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d007      	beq.n	8002b0c <HAL_GPIO_Init+0x1e8>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	4a48      	ldr	r2, [pc, #288]	@ (8002c20 <HAL_GPIO_Init+0x2fc>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d101      	bne.n	8002b08 <HAL_GPIO_Init+0x1e4>
 8002b04:	2305      	movs	r3, #5
 8002b06:	e00a      	b.n	8002b1e <HAL_GPIO_Init+0x1fa>
 8002b08:	2306      	movs	r3, #6
 8002b0a:	e008      	b.n	8002b1e <HAL_GPIO_Init+0x1fa>
 8002b0c:	2304      	movs	r3, #4
 8002b0e:	e006      	b.n	8002b1e <HAL_GPIO_Init+0x1fa>
 8002b10:	2303      	movs	r3, #3
 8002b12:	e004      	b.n	8002b1e <HAL_GPIO_Init+0x1fa>
 8002b14:	2302      	movs	r3, #2
 8002b16:	e002      	b.n	8002b1e <HAL_GPIO_Init+0x1fa>
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e000      	b.n	8002b1e <HAL_GPIO_Init+0x1fa>
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	f002 0203 	and.w	r2, r2, #3
 8002b24:	0092      	lsls	r2, r2, #2
 8002b26:	4093      	lsls	r3, r2
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b2e:	4937      	ldr	r1, [pc, #220]	@ (8002c0c <HAL_GPIO_Init+0x2e8>)
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	089b      	lsrs	r3, r3, #2
 8002b34:	3302      	adds	r3, #2
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b3c:	4b39      	ldr	r3, [pc, #228]	@ (8002c24 <HAL_GPIO_Init+0x300>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	43db      	mvns	r3, r3
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d003      	beq.n	8002b60 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b60:	4a30      	ldr	r2, [pc, #192]	@ (8002c24 <HAL_GPIO_Init+0x300>)
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b66:	4b2f      	ldr	r3, [pc, #188]	@ (8002c24 <HAL_GPIO_Init+0x300>)
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	693a      	ldr	r2, [r7, #16]
 8002b72:	4013      	ands	r3, r2
 8002b74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d003      	beq.n	8002b8a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b8a:	4a26      	ldr	r2, [pc, #152]	@ (8002c24 <HAL_GPIO_Init+0x300>)
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002b90:	4b24      	ldr	r3, [pc, #144]	@ (8002c24 <HAL_GPIO_Init+0x300>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	43db      	mvns	r3, r3
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d003      	beq.n	8002bb4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002bac:	693a      	ldr	r2, [r7, #16]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002bb4:	4a1b      	ldr	r2, [pc, #108]	@ (8002c24 <HAL_GPIO_Init+0x300>)
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002bba:	4b1a      	ldr	r3, [pc, #104]	@ (8002c24 <HAL_GPIO_Init+0x300>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002bde:	4a11      	ldr	r2, [pc, #68]	@ (8002c24 <HAL_GPIO_Init+0x300>)
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	3301      	adds	r3, #1
 8002be8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f47f ae9d 	bne.w	8002934 <HAL_GPIO_Init+0x10>
  }
}
 8002bfa:	bf00      	nop
 8002bfc:	bf00      	nop
 8002bfe:	371c      	adds	r7, #28
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr
 8002c08:	40021000 	.word	0x40021000
 8002c0c:	40010000 	.word	0x40010000
 8002c10:	48000400 	.word	0x48000400
 8002c14:	48000800 	.word	0x48000800
 8002c18:	48000c00 	.word	0x48000c00
 8002c1c:	48001000 	.word	0x48001000
 8002c20:	48001400 	.word	0x48001400
 8002c24:	40010400 	.word	0x40010400

08002c28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	460b      	mov	r3, r1
 8002c32:	807b      	strh	r3, [r7, #2]
 8002c34:	4613      	mov	r3, r2
 8002c36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c38:	787b      	ldrb	r3, [r7, #1]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d003      	beq.n	8002c46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c3e:	887a      	ldrh	r2, [r7, #2]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c44:	e002      	b.n	8002c4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c46:	887a      	ldrh	r2, [r7, #2]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	4603      	mov	r3, r0
 8002c60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002c62:	4b08      	ldr	r3, [pc, #32]	@ (8002c84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c64:	695a      	ldr	r2, [r3, #20]
 8002c66:	88fb      	ldrh	r3, [r7, #6]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d006      	beq.n	8002c7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c6e:	4a05      	ldr	r2, [pc, #20]	@ (8002c84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c70:	88fb      	ldrh	r3, [r7, #6]
 8002c72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c74:	88fb      	ldrh	r3, [r7, #6]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7fe f916 	bl	8000ea8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c7c:	bf00      	nop
 8002c7e:	3708      	adds	r7, #8
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40010400 	.word	0x40010400

08002c88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d141      	bne.n	8002d1a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c96:	4b4b      	ldr	r3, [pc, #300]	@ (8002dc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002c9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ca2:	d131      	bne.n	8002d08 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ca4:	4b47      	ldr	r3, [pc, #284]	@ (8002dc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ca6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002caa:	4a46      	ldr	r2, [pc, #280]	@ (8002dc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002cb0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cb4:	4b43      	ldr	r3, [pc, #268]	@ (8002dc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002cbc:	4a41      	ldr	r2, [pc, #260]	@ (8002dc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cbe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002cc2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002cc4:	4b40      	ldr	r3, [pc, #256]	@ (8002dc8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2232      	movs	r2, #50	@ 0x32
 8002cca:	fb02 f303 	mul.w	r3, r2, r3
 8002cce:	4a3f      	ldr	r2, [pc, #252]	@ (8002dcc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd4:	0c9b      	lsrs	r3, r3, #18
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cda:	e002      	b.n	8002ce2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ce2:	4b38      	ldr	r3, [pc, #224]	@ (8002dc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cee:	d102      	bne.n	8002cf6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1f2      	bne.n	8002cdc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002cf6:	4b33      	ldr	r3, [pc, #204]	@ (8002dc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d02:	d158      	bne.n	8002db6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e057      	b.n	8002db8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d08:	4b2e      	ldr	r3, [pc, #184]	@ (8002dc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d0e:	4a2d      	ldr	r2, [pc, #180]	@ (8002dc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d14:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002d18:	e04d      	b.n	8002db6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d20:	d141      	bne.n	8002da6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d22:	4b28      	ldr	r3, [pc, #160]	@ (8002dc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002d2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d2e:	d131      	bne.n	8002d94 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d30:	4b24      	ldr	r3, [pc, #144]	@ (8002dc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d36:	4a23      	ldr	r2, [pc, #140]	@ (8002dc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d3c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d40:	4b20      	ldr	r3, [pc, #128]	@ (8002dc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002d48:	4a1e      	ldr	r2, [pc, #120]	@ (8002dc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d4e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d50:	4b1d      	ldr	r3, [pc, #116]	@ (8002dc8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2232      	movs	r2, #50	@ 0x32
 8002d56:	fb02 f303 	mul.w	r3, r2, r3
 8002d5a:	4a1c      	ldr	r2, [pc, #112]	@ (8002dcc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d60:	0c9b      	lsrs	r3, r3, #18
 8002d62:	3301      	adds	r3, #1
 8002d64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d66:	e002      	b.n	8002d6e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d6e:	4b15      	ldr	r3, [pc, #84]	@ (8002dc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d7a:	d102      	bne.n	8002d82 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1f2      	bne.n	8002d68 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d82:	4b10      	ldr	r3, [pc, #64]	@ (8002dc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d8e:	d112      	bne.n	8002db6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e011      	b.n	8002db8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d94:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d9a:	4a0a      	ldr	r2, [pc, #40]	@ (8002dc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002da0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002da4:	e007      	b.n	8002db6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002da6:	4b07      	ldr	r3, [pc, #28]	@ (8002dc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002dae:	4a05      	ldr	r2, [pc, #20]	@ (8002dc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002db0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002db4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3714      	adds	r7, #20
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr
 8002dc4:	40007000 	.word	0x40007000
 8002dc8:	20000000 	.word	0x20000000
 8002dcc:	431bde83 	.word	0x431bde83

08002dd0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002dd4:	4b05      	ldr	r3, [pc, #20]	@ (8002dec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	4a04      	ldr	r2, [pc, #16]	@ (8002dec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002dda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002dde:	6093      	str	r3, [r2, #8]
}
 8002de0:	bf00      	nop
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	40007000 	.word	0x40007000

08002df0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b088      	sub	sp, #32
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e2fe      	b.n	8003400 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d075      	beq.n	8002efa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e0e:	4b97      	ldr	r3, [pc, #604]	@ (800306c <HAL_RCC_OscConfig+0x27c>)
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f003 030c 	and.w	r3, r3, #12
 8002e16:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e18:	4b94      	ldr	r3, [pc, #592]	@ (800306c <HAL_RCC_OscConfig+0x27c>)
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	f003 0303 	and.w	r3, r3, #3
 8002e20:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	2b0c      	cmp	r3, #12
 8002e26:	d102      	bne.n	8002e2e <HAL_RCC_OscConfig+0x3e>
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	2b03      	cmp	r3, #3
 8002e2c:	d002      	beq.n	8002e34 <HAL_RCC_OscConfig+0x44>
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	2b08      	cmp	r3, #8
 8002e32:	d10b      	bne.n	8002e4c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e34:	4b8d      	ldr	r3, [pc, #564]	@ (800306c <HAL_RCC_OscConfig+0x27c>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d05b      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x108>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d157      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e2d9      	b.n	8003400 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e54:	d106      	bne.n	8002e64 <HAL_RCC_OscConfig+0x74>
 8002e56:	4b85      	ldr	r3, [pc, #532]	@ (800306c <HAL_RCC_OscConfig+0x27c>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a84      	ldr	r2, [pc, #528]	@ (800306c <HAL_RCC_OscConfig+0x27c>)
 8002e5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e60:	6013      	str	r3, [r2, #0]
 8002e62:	e01d      	b.n	8002ea0 <HAL_RCC_OscConfig+0xb0>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e6c:	d10c      	bne.n	8002e88 <HAL_RCC_OscConfig+0x98>
 8002e6e:	4b7f      	ldr	r3, [pc, #508]	@ (800306c <HAL_RCC_OscConfig+0x27c>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a7e      	ldr	r2, [pc, #504]	@ (800306c <HAL_RCC_OscConfig+0x27c>)
 8002e74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e78:	6013      	str	r3, [r2, #0]
 8002e7a:	4b7c      	ldr	r3, [pc, #496]	@ (800306c <HAL_RCC_OscConfig+0x27c>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a7b      	ldr	r2, [pc, #492]	@ (800306c <HAL_RCC_OscConfig+0x27c>)
 8002e80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e84:	6013      	str	r3, [r2, #0]
 8002e86:	e00b      	b.n	8002ea0 <HAL_RCC_OscConfig+0xb0>
 8002e88:	4b78      	ldr	r3, [pc, #480]	@ (800306c <HAL_RCC_OscConfig+0x27c>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a77      	ldr	r2, [pc, #476]	@ (800306c <HAL_RCC_OscConfig+0x27c>)
 8002e8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e92:	6013      	str	r3, [r2, #0]
 8002e94:	4b75      	ldr	r3, [pc, #468]	@ (800306c <HAL_RCC_OscConfig+0x27c>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a74      	ldr	r2, [pc, #464]	@ (800306c <HAL_RCC_OscConfig+0x27c>)
 8002e9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d013      	beq.n	8002ed0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea8:	f7fe fb20 	bl	80014ec <HAL_GetTick>
 8002eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eb0:	f7fe fb1c 	bl	80014ec <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b64      	cmp	r3, #100	@ 0x64
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e29e      	b.n	8003400 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ec2:	4b6a      	ldr	r3, [pc, #424]	@ (800306c <HAL_RCC_OscConfig+0x27c>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d0f0      	beq.n	8002eb0 <HAL_RCC_OscConfig+0xc0>
 8002ece:	e014      	b.n	8002efa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed0:	f7fe fb0c 	bl	80014ec <HAL_GetTick>
 8002ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ed6:	e008      	b.n	8002eea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ed8:	f7fe fb08 	bl	80014ec <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b64      	cmp	r3, #100	@ 0x64
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e28a      	b.n	8003400 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002eea:	4b60      	ldr	r3, [pc, #384]	@ (800306c <HAL_RCC_OscConfig+0x27c>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1f0      	bne.n	8002ed8 <HAL_RCC_OscConfig+0xe8>
 8002ef6:	e000      	b.n	8002efa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ef8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d075      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f06:	4b59      	ldr	r3, [pc, #356]	@ (800306c <HAL_RCC_OscConfig+0x27c>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f003 030c 	and.w	r3, r3, #12
 8002f0e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f10:	4b56      	ldr	r3, [pc, #344]	@ (800306c <HAL_RCC_OscConfig+0x27c>)
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	f003 0303 	and.w	r3, r3, #3
 8002f18:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	2b0c      	cmp	r3, #12
 8002f1e:	d102      	bne.n	8002f26 <HAL_RCC_OscConfig+0x136>
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d002      	beq.n	8002f2c <HAL_RCC_OscConfig+0x13c>
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	2b04      	cmp	r3, #4
 8002f2a:	d11f      	bne.n	8002f6c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f2c:	4b4f      	ldr	r3, [pc, #316]	@ (800306c <HAL_RCC_OscConfig+0x27c>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d005      	beq.n	8002f44 <HAL_RCC_OscConfig+0x154>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d101      	bne.n	8002f44 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e25d      	b.n	8003400 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f44:	4b49      	ldr	r3, [pc, #292]	@ (800306c <HAL_RCC_OscConfig+0x27c>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	061b      	lsls	r3, r3, #24
 8002f52:	4946      	ldr	r1, [pc, #280]	@ (800306c <HAL_RCC_OscConfig+0x27c>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002f58:	4b45      	ldr	r3, [pc, #276]	@ (8003070 <HAL_RCC_OscConfig+0x280>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7fe fa79 	bl	8001454 <HAL_InitTick>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d043      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e249      	b.n	8003400 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d023      	beq.n	8002fbc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f74:	4b3d      	ldr	r3, [pc, #244]	@ (800306c <HAL_RCC_OscConfig+0x27c>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a3c      	ldr	r2, [pc, #240]	@ (800306c <HAL_RCC_OscConfig+0x27c>)
 8002f7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f80:	f7fe fab4 	bl	80014ec <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f88:	f7fe fab0 	bl	80014ec <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e232      	b.n	8003400 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f9a:	4b34      	ldr	r3, [pc, #208]	@ (800306c <HAL_RCC_OscConfig+0x27c>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d0f0      	beq.n	8002f88 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fa6:	4b31      	ldr	r3, [pc, #196]	@ (800306c <HAL_RCC_OscConfig+0x27c>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	061b      	lsls	r3, r3, #24
 8002fb4:	492d      	ldr	r1, [pc, #180]	@ (800306c <HAL_RCC_OscConfig+0x27c>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	604b      	str	r3, [r1, #4]
 8002fba:	e01a      	b.n	8002ff2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fbc:	4b2b      	ldr	r3, [pc, #172]	@ (800306c <HAL_RCC_OscConfig+0x27c>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a2a      	ldr	r2, [pc, #168]	@ (800306c <HAL_RCC_OscConfig+0x27c>)
 8002fc2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002fc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc8:	f7fe fa90 	bl	80014ec <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fd0:	f7fe fa8c 	bl	80014ec <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e20e      	b.n	8003400 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fe2:	4b22      	ldr	r3, [pc, #136]	@ (800306c <HAL_RCC_OscConfig+0x27c>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1f0      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x1e0>
 8002fee:	e000      	b.n	8002ff2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ff0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0308 	and.w	r3, r3, #8
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d041      	beq.n	8003082 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d01c      	beq.n	8003040 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003006:	4b19      	ldr	r3, [pc, #100]	@ (800306c <HAL_RCC_OscConfig+0x27c>)
 8003008:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800300c:	4a17      	ldr	r2, [pc, #92]	@ (800306c <HAL_RCC_OscConfig+0x27c>)
 800300e:	f043 0301 	orr.w	r3, r3, #1
 8003012:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003016:	f7fe fa69 	bl	80014ec <HAL_GetTick>
 800301a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800301c:	e008      	b.n	8003030 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800301e:	f7fe fa65 	bl	80014ec <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	2b02      	cmp	r3, #2
 800302a:	d901      	bls.n	8003030 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e1e7      	b.n	8003400 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003030:	4b0e      	ldr	r3, [pc, #56]	@ (800306c <HAL_RCC_OscConfig+0x27c>)
 8003032:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d0ef      	beq.n	800301e <HAL_RCC_OscConfig+0x22e>
 800303e:	e020      	b.n	8003082 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003040:	4b0a      	ldr	r3, [pc, #40]	@ (800306c <HAL_RCC_OscConfig+0x27c>)
 8003042:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003046:	4a09      	ldr	r2, [pc, #36]	@ (800306c <HAL_RCC_OscConfig+0x27c>)
 8003048:	f023 0301 	bic.w	r3, r3, #1
 800304c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003050:	f7fe fa4c 	bl	80014ec <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003056:	e00d      	b.n	8003074 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003058:	f7fe fa48 	bl	80014ec <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d906      	bls.n	8003074 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e1ca      	b.n	8003400 <HAL_RCC_OscConfig+0x610>
 800306a:	bf00      	nop
 800306c:	40021000 	.word	0x40021000
 8003070:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003074:	4b8c      	ldr	r3, [pc, #560]	@ (80032a8 <HAL_RCC_OscConfig+0x4b8>)
 8003076:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1ea      	bne.n	8003058 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0304 	and.w	r3, r3, #4
 800308a:	2b00      	cmp	r3, #0
 800308c:	f000 80a6 	beq.w	80031dc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003090:	2300      	movs	r3, #0
 8003092:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003094:	4b84      	ldr	r3, [pc, #528]	@ (80032a8 <HAL_RCC_OscConfig+0x4b8>)
 8003096:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003098:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d101      	bne.n	80030a4 <HAL_RCC_OscConfig+0x2b4>
 80030a0:	2301      	movs	r3, #1
 80030a2:	e000      	b.n	80030a6 <HAL_RCC_OscConfig+0x2b6>
 80030a4:	2300      	movs	r3, #0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00d      	beq.n	80030c6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030aa:	4b7f      	ldr	r3, [pc, #508]	@ (80032a8 <HAL_RCC_OscConfig+0x4b8>)
 80030ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ae:	4a7e      	ldr	r2, [pc, #504]	@ (80032a8 <HAL_RCC_OscConfig+0x4b8>)
 80030b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80030b6:	4b7c      	ldr	r3, [pc, #496]	@ (80032a8 <HAL_RCC_OscConfig+0x4b8>)
 80030b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030be:	60fb      	str	r3, [r7, #12]
 80030c0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80030c2:	2301      	movs	r3, #1
 80030c4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030c6:	4b79      	ldr	r3, [pc, #484]	@ (80032ac <HAL_RCC_OscConfig+0x4bc>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d118      	bne.n	8003104 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030d2:	4b76      	ldr	r3, [pc, #472]	@ (80032ac <HAL_RCC_OscConfig+0x4bc>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a75      	ldr	r2, [pc, #468]	@ (80032ac <HAL_RCC_OscConfig+0x4bc>)
 80030d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030de:	f7fe fa05 	bl	80014ec <HAL_GetTick>
 80030e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030e4:	e008      	b.n	80030f8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030e6:	f7fe fa01 	bl	80014ec <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d901      	bls.n	80030f8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e183      	b.n	8003400 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030f8:	4b6c      	ldr	r3, [pc, #432]	@ (80032ac <HAL_RCC_OscConfig+0x4bc>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003100:	2b00      	cmp	r3, #0
 8003102:	d0f0      	beq.n	80030e6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d108      	bne.n	800311e <HAL_RCC_OscConfig+0x32e>
 800310c:	4b66      	ldr	r3, [pc, #408]	@ (80032a8 <HAL_RCC_OscConfig+0x4b8>)
 800310e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003112:	4a65      	ldr	r2, [pc, #404]	@ (80032a8 <HAL_RCC_OscConfig+0x4b8>)
 8003114:	f043 0301 	orr.w	r3, r3, #1
 8003118:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800311c:	e024      	b.n	8003168 <HAL_RCC_OscConfig+0x378>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	2b05      	cmp	r3, #5
 8003124:	d110      	bne.n	8003148 <HAL_RCC_OscConfig+0x358>
 8003126:	4b60      	ldr	r3, [pc, #384]	@ (80032a8 <HAL_RCC_OscConfig+0x4b8>)
 8003128:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800312c:	4a5e      	ldr	r2, [pc, #376]	@ (80032a8 <HAL_RCC_OscConfig+0x4b8>)
 800312e:	f043 0304 	orr.w	r3, r3, #4
 8003132:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003136:	4b5c      	ldr	r3, [pc, #368]	@ (80032a8 <HAL_RCC_OscConfig+0x4b8>)
 8003138:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800313c:	4a5a      	ldr	r2, [pc, #360]	@ (80032a8 <HAL_RCC_OscConfig+0x4b8>)
 800313e:	f043 0301 	orr.w	r3, r3, #1
 8003142:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003146:	e00f      	b.n	8003168 <HAL_RCC_OscConfig+0x378>
 8003148:	4b57      	ldr	r3, [pc, #348]	@ (80032a8 <HAL_RCC_OscConfig+0x4b8>)
 800314a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800314e:	4a56      	ldr	r2, [pc, #344]	@ (80032a8 <HAL_RCC_OscConfig+0x4b8>)
 8003150:	f023 0301 	bic.w	r3, r3, #1
 8003154:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003158:	4b53      	ldr	r3, [pc, #332]	@ (80032a8 <HAL_RCC_OscConfig+0x4b8>)
 800315a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800315e:	4a52      	ldr	r2, [pc, #328]	@ (80032a8 <HAL_RCC_OscConfig+0x4b8>)
 8003160:	f023 0304 	bic.w	r3, r3, #4
 8003164:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d016      	beq.n	800319e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003170:	f7fe f9bc 	bl	80014ec <HAL_GetTick>
 8003174:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003176:	e00a      	b.n	800318e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003178:	f7fe f9b8 	bl	80014ec <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003186:	4293      	cmp	r3, r2
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e138      	b.n	8003400 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800318e:	4b46      	ldr	r3, [pc, #280]	@ (80032a8 <HAL_RCC_OscConfig+0x4b8>)
 8003190:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d0ed      	beq.n	8003178 <HAL_RCC_OscConfig+0x388>
 800319c:	e015      	b.n	80031ca <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800319e:	f7fe f9a5 	bl	80014ec <HAL_GetTick>
 80031a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031a4:	e00a      	b.n	80031bc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031a6:	f7fe f9a1 	bl	80014ec <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d901      	bls.n	80031bc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e121      	b.n	8003400 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031bc:	4b3a      	ldr	r3, [pc, #232]	@ (80032a8 <HAL_RCC_OscConfig+0x4b8>)
 80031be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1ed      	bne.n	80031a6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031ca:	7ffb      	ldrb	r3, [r7, #31]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d105      	bne.n	80031dc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031d0:	4b35      	ldr	r3, [pc, #212]	@ (80032a8 <HAL_RCC_OscConfig+0x4b8>)
 80031d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031d4:	4a34      	ldr	r2, [pc, #208]	@ (80032a8 <HAL_RCC_OscConfig+0x4b8>)
 80031d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031da:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0320 	and.w	r3, r3, #32
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d03c      	beq.n	8003262 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d01c      	beq.n	800322a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80031f0:	4b2d      	ldr	r3, [pc, #180]	@ (80032a8 <HAL_RCC_OscConfig+0x4b8>)
 80031f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80031f6:	4a2c      	ldr	r2, [pc, #176]	@ (80032a8 <HAL_RCC_OscConfig+0x4b8>)
 80031f8:	f043 0301 	orr.w	r3, r3, #1
 80031fc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003200:	f7fe f974 	bl	80014ec <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003208:	f7fe f970 	bl	80014ec <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e0f2      	b.n	8003400 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800321a:	4b23      	ldr	r3, [pc, #140]	@ (80032a8 <HAL_RCC_OscConfig+0x4b8>)
 800321c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	2b00      	cmp	r3, #0
 8003226:	d0ef      	beq.n	8003208 <HAL_RCC_OscConfig+0x418>
 8003228:	e01b      	b.n	8003262 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800322a:	4b1f      	ldr	r3, [pc, #124]	@ (80032a8 <HAL_RCC_OscConfig+0x4b8>)
 800322c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003230:	4a1d      	ldr	r2, [pc, #116]	@ (80032a8 <HAL_RCC_OscConfig+0x4b8>)
 8003232:	f023 0301 	bic.w	r3, r3, #1
 8003236:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800323a:	f7fe f957 	bl	80014ec <HAL_GetTick>
 800323e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003240:	e008      	b.n	8003254 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003242:	f7fe f953 	bl	80014ec <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	2b02      	cmp	r3, #2
 800324e:	d901      	bls.n	8003254 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e0d5      	b.n	8003400 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003254:	4b14      	ldr	r3, [pc, #80]	@ (80032a8 <HAL_RCC_OscConfig+0x4b8>)
 8003256:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1ef      	bne.n	8003242 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	69db      	ldr	r3, [r3, #28]
 8003266:	2b00      	cmp	r3, #0
 8003268:	f000 80c9 	beq.w	80033fe <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800326c:	4b0e      	ldr	r3, [pc, #56]	@ (80032a8 <HAL_RCC_OscConfig+0x4b8>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f003 030c 	and.w	r3, r3, #12
 8003274:	2b0c      	cmp	r3, #12
 8003276:	f000 8083 	beq.w	8003380 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	69db      	ldr	r3, [r3, #28]
 800327e:	2b02      	cmp	r3, #2
 8003280:	d15e      	bne.n	8003340 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003282:	4b09      	ldr	r3, [pc, #36]	@ (80032a8 <HAL_RCC_OscConfig+0x4b8>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a08      	ldr	r2, [pc, #32]	@ (80032a8 <HAL_RCC_OscConfig+0x4b8>)
 8003288:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800328c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800328e:	f7fe f92d 	bl	80014ec <HAL_GetTick>
 8003292:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003294:	e00c      	b.n	80032b0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003296:	f7fe f929 	bl	80014ec <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d905      	bls.n	80032b0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e0ab      	b.n	8003400 <HAL_RCC_OscConfig+0x610>
 80032a8:	40021000 	.word	0x40021000
 80032ac:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032b0:	4b55      	ldr	r3, [pc, #340]	@ (8003408 <HAL_RCC_OscConfig+0x618>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1ec      	bne.n	8003296 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032bc:	4b52      	ldr	r3, [pc, #328]	@ (8003408 <HAL_RCC_OscConfig+0x618>)
 80032be:	68da      	ldr	r2, [r3, #12]
 80032c0:	4b52      	ldr	r3, [pc, #328]	@ (800340c <HAL_RCC_OscConfig+0x61c>)
 80032c2:	4013      	ands	r3, r2
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	6a11      	ldr	r1, [r2, #32]
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80032cc:	3a01      	subs	r2, #1
 80032ce:	0112      	lsls	r2, r2, #4
 80032d0:	4311      	orrs	r1, r2
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80032d6:	0212      	lsls	r2, r2, #8
 80032d8:	4311      	orrs	r1, r2
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80032de:	0852      	lsrs	r2, r2, #1
 80032e0:	3a01      	subs	r2, #1
 80032e2:	0552      	lsls	r2, r2, #21
 80032e4:	4311      	orrs	r1, r2
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80032ea:	0852      	lsrs	r2, r2, #1
 80032ec:	3a01      	subs	r2, #1
 80032ee:	0652      	lsls	r2, r2, #25
 80032f0:	4311      	orrs	r1, r2
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80032f6:	06d2      	lsls	r2, r2, #27
 80032f8:	430a      	orrs	r2, r1
 80032fa:	4943      	ldr	r1, [pc, #268]	@ (8003408 <HAL_RCC_OscConfig+0x618>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003300:	4b41      	ldr	r3, [pc, #260]	@ (8003408 <HAL_RCC_OscConfig+0x618>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a40      	ldr	r2, [pc, #256]	@ (8003408 <HAL_RCC_OscConfig+0x618>)
 8003306:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800330a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800330c:	4b3e      	ldr	r3, [pc, #248]	@ (8003408 <HAL_RCC_OscConfig+0x618>)
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	4a3d      	ldr	r2, [pc, #244]	@ (8003408 <HAL_RCC_OscConfig+0x618>)
 8003312:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003316:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003318:	f7fe f8e8 	bl	80014ec <HAL_GetTick>
 800331c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800331e:	e008      	b.n	8003332 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003320:	f7fe f8e4 	bl	80014ec <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e066      	b.n	8003400 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003332:	4b35      	ldr	r3, [pc, #212]	@ (8003408 <HAL_RCC_OscConfig+0x618>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d0f0      	beq.n	8003320 <HAL_RCC_OscConfig+0x530>
 800333e:	e05e      	b.n	80033fe <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003340:	4b31      	ldr	r3, [pc, #196]	@ (8003408 <HAL_RCC_OscConfig+0x618>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a30      	ldr	r2, [pc, #192]	@ (8003408 <HAL_RCC_OscConfig+0x618>)
 8003346:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800334a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800334c:	f7fe f8ce 	bl	80014ec <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003352:	e008      	b.n	8003366 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003354:	f7fe f8ca 	bl	80014ec <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e04c      	b.n	8003400 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003366:	4b28      	ldr	r3, [pc, #160]	@ (8003408 <HAL_RCC_OscConfig+0x618>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1f0      	bne.n	8003354 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003372:	4b25      	ldr	r3, [pc, #148]	@ (8003408 <HAL_RCC_OscConfig+0x618>)
 8003374:	68da      	ldr	r2, [r3, #12]
 8003376:	4924      	ldr	r1, [pc, #144]	@ (8003408 <HAL_RCC_OscConfig+0x618>)
 8003378:	4b25      	ldr	r3, [pc, #148]	@ (8003410 <HAL_RCC_OscConfig+0x620>)
 800337a:	4013      	ands	r3, r2
 800337c:	60cb      	str	r3, [r1, #12]
 800337e:	e03e      	b.n	80033fe <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	69db      	ldr	r3, [r3, #28]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d101      	bne.n	800338c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e039      	b.n	8003400 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800338c:	4b1e      	ldr	r3, [pc, #120]	@ (8003408 <HAL_RCC_OscConfig+0x618>)
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	f003 0203 	and.w	r2, r3, #3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	429a      	cmp	r2, r3
 800339e:	d12c      	bne.n	80033fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033aa:	3b01      	subs	r3, #1
 80033ac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d123      	bne.n	80033fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033bc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033be:	429a      	cmp	r2, r3
 80033c0:	d11b      	bne.n	80033fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033cc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d113      	bne.n	80033fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033dc:	085b      	lsrs	r3, r3, #1
 80033de:	3b01      	subs	r3, #1
 80033e0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d109      	bne.n	80033fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033f0:	085b      	lsrs	r3, r3, #1
 80033f2:	3b01      	subs	r3, #1
 80033f4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d001      	beq.n	80033fe <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e000      	b.n	8003400 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	3720      	adds	r7, #32
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	40021000 	.word	0x40021000
 800340c:	019f800c 	.word	0x019f800c
 8003410:	feeefffc 	.word	0xfeeefffc

08003414 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800341e:	2300      	movs	r3, #0
 8003420:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d101      	bne.n	800342c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e11e      	b.n	800366a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800342c:	4b91      	ldr	r3, [pc, #580]	@ (8003674 <HAL_RCC_ClockConfig+0x260>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 030f 	and.w	r3, r3, #15
 8003434:	683a      	ldr	r2, [r7, #0]
 8003436:	429a      	cmp	r2, r3
 8003438:	d910      	bls.n	800345c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800343a:	4b8e      	ldr	r3, [pc, #568]	@ (8003674 <HAL_RCC_ClockConfig+0x260>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f023 020f 	bic.w	r2, r3, #15
 8003442:	498c      	ldr	r1, [pc, #560]	@ (8003674 <HAL_RCC_ClockConfig+0x260>)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	4313      	orrs	r3, r2
 8003448:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800344a:	4b8a      	ldr	r3, [pc, #552]	@ (8003674 <HAL_RCC_ClockConfig+0x260>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 030f 	and.w	r3, r3, #15
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	429a      	cmp	r2, r3
 8003456:	d001      	beq.n	800345c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e106      	b.n	800366a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	2b00      	cmp	r3, #0
 8003466:	d073      	beq.n	8003550 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	2b03      	cmp	r3, #3
 800346e:	d129      	bne.n	80034c4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003470:	4b81      	ldr	r3, [pc, #516]	@ (8003678 <HAL_RCC_ClockConfig+0x264>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d101      	bne.n	8003480 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e0f4      	b.n	800366a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003480:	f000 f966 	bl	8003750 <RCC_GetSysClockFreqFromPLLSource>
 8003484:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	4a7c      	ldr	r2, [pc, #496]	@ (800367c <HAL_RCC_ClockConfig+0x268>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d93f      	bls.n	800350e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800348e:	4b7a      	ldr	r3, [pc, #488]	@ (8003678 <HAL_RCC_ClockConfig+0x264>)
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d009      	beq.n	80034ae <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d033      	beq.n	800350e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d12f      	bne.n	800350e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80034ae:	4b72      	ldr	r3, [pc, #456]	@ (8003678 <HAL_RCC_ClockConfig+0x264>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80034b6:	4a70      	ldr	r2, [pc, #448]	@ (8003678 <HAL_RCC_ClockConfig+0x264>)
 80034b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034bc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80034be:	2380      	movs	r3, #128	@ 0x80
 80034c0:	617b      	str	r3, [r7, #20]
 80034c2:	e024      	b.n	800350e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d107      	bne.n	80034dc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034cc:	4b6a      	ldr	r3, [pc, #424]	@ (8003678 <HAL_RCC_ClockConfig+0x264>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d109      	bne.n	80034ec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e0c6      	b.n	800366a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034dc:	4b66      	ldr	r3, [pc, #408]	@ (8003678 <HAL_RCC_ClockConfig+0x264>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d101      	bne.n	80034ec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e0be      	b.n	800366a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80034ec:	f000 f8ce 	bl	800368c <HAL_RCC_GetSysClockFreq>
 80034f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	4a61      	ldr	r2, [pc, #388]	@ (800367c <HAL_RCC_ClockConfig+0x268>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d909      	bls.n	800350e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80034fa:	4b5f      	ldr	r3, [pc, #380]	@ (8003678 <HAL_RCC_ClockConfig+0x264>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003502:	4a5d      	ldr	r2, [pc, #372]	@ (8003678 <HAL_RCC_ClockConfig+0x264>)
 8003504:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003508:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800350a:	2380      	movs	r3, #128	@ 0x80
 800350c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800350e:	4b5a      	ldr	r3, [pc, #360]	@ (8003678 <HAL_RCC_ClockConfig+0x264>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f023 0203 	bic.w	r2, r3, #3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	4957      	ldr	r1, [pc, #348]	@ (8003678 <HAL_RCC_ClockConfig+0x264>)
 800351c:	4313      	orrs	r3, r2
 800351e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003520:	f7fd ffe4 	bl	80014ec <HAL_GetTick>
 8003524:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003526:	e00a      	b.n	800353e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003528:	f7fd ffe0 	bl	80014ec <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003536:	4293      	cmp	r3, r2
 8003538:	d901      	bls.n	800353e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e095      	b.n	800366a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800353e:	4b4e      	ldr	r3, [pc, #312]	@ (8003678 <HAL_RCC_ClockConfig+0x264>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f003 020c 	and.w	r2, r3, #12
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	429a      	cmp	r2, r3
 800354e:	d1eb      	bne.n	8003528 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b00      	cmp	r3, #0
 800355a:	d023      	beq.n	80035a4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0304 	and.w	r3, r3, #4
 8003564:	2b00      	cmp	r3, #0
 8003566:	d005      	beq.n	8003574 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003568:	4b43      	ldr	r3, [pc, #268]	@ (8003678 <HAL_RCC_ClockConfig+0x264>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	4a42      	ldr	r2, [pc, #264]	@ (8003678 <HAL_RCC_ClockConfig+0x264>)
 800356e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003572:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0308 	and.w	r3, r3, #8
 800357c:	2b00      	cmp	r3, #0
 800357e:	d007      	beq.n	8003590 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003580:	4b3d      	ldr	r3, [pc, #244]	@ (8003678 <HAL_RCC_ClockConfig+0x264>)
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003588:	4a3b      	ldr	r2, [pc, #236]	@ (8003678 <HAL_RCC_ClockConfig+0x264>)
 800358a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800358e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003590:	4b39      	ldr	r3, [pc, #228]	@ (8003678 <HAL_RCC_ClockConfig+0x264>)
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	4936      	ldr	r1, [pc, #216]	@ (8003678 <HAL_RCC_ClockConfig+0x264>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	608b      	str	r3, [r1, #8]
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	2b80      	cmp	r3, #128	@ 0x80
 80035a8:	d105      	bne.n	80035b6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80035aa:	4b33      	ldr	r3, [pc, #204]	@ (8003678 <HAL_RCC_ClockConfig+0x264>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	4a32      	ldr	r2, [pc, #200]	@ (8003678 <HAL_RCC_ClockConfig+0x264>)
 80035b0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80035b4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035b6:	4b2f      	ldr	r3, [pc, #188]	@ (8003674 <HAL_RCC_ClockConfig+0x260>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 030f 	and.w	r3, r3, #15
 80035be:	683a      	ldr	r2, [r7, #0]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d21d      	bcs.n	8003600 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035c4:	4b2b      	ldr	r3, [pc, #172]	@ (8003674 <HAL_RCC_ClockConfig+0x260>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f023 020f 	bic.w	r2, r3, #15
 80035cc:	4929      	ldr	r1, [pc, #164]	@ (8003674 <HAL_RCC_ClockConfig+0x260>)
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80035d4:	f7fd ff8a 	bl	80014ec <HAL_GetTick>
 80035d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035da:	e00a      	b.n	80035f2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035dc:	f7fd ff86 	bl	80014ec <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e03b      	b.n	800366a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035f2:	4b20      	ldr	r3, [pc, #128]	@ (8003674 <HAL_RCC_ClockConfig+0x260>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 030f 	and.w	r3, r3, #15
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d1ed      	bne.n	80035dc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	2b00      	cmp	r3, #0
 800360a:	d008      	beq.n	800361e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800360c:	4b1a      	ldr	r3, [pc, #104]	@ (8003678 <HAL_RCC_ClockConfig+0x264>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	4917      	ldr	r1, [pc, #92]	@ (8003678 <HAL_RCC_ClockConfig+0x264>)
 800361a:	4313      	orrs	r3, r2
 800361c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0308 	and.w	r3, r3, #8
 8003626:	2b00      	cmp	r3, #0
 8003628:	d009      	beq.n	800363e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800362a:	4b13      	ldr	r3, [pc, #76]	@ (8003678 <HAL_RCC_ClockConfig+0x264>)
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	490f      	ldr	r1, [pc, #60]	@ (8003678 <HAL_RCC_ClockConfig+0x264>)
 800363a:	4313      	orrs	r3, r2
 800363c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800363e:	f000 f825 	bl	800368c <HAL_RCC_GetSysClockFreq>
 8003642:	4602      	mov	r2, r0
 8003644:	4b0c      	ldr	r3, [pc, #48]	@ (8003678 <HAL_RCC_ClockConfig+0x264>)
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	091b      	lsrs	r3, r3, #4
 800364a:	f003 030f 	and.w	r3, r3, #15
 800364e:	490c      	ldr	r1, [pc, #48]	@ (8003680 <HAL_RCC_ClockConfig+0x26c>)
 8003650:	5ccb      	ldrb	r3, [r1, r3]
 8003652:	f003 031f 	and.w	r3, r3, #31
 8003656:	fa22 f303 	lsr.w	r3, r2, r3
 800365a:	4a0a      	ldr	r2, [pc, #40]	@ (8003684 <HAL_RCC_ClockConfig+0x270>)
 800365c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800365e:	4b0a      	ldr	r3, [pc, #40]	@ (8003688 <HAL_RCC_ClockConfig+0x274>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4618      	mov	r0, r3
 8003664:	f7fd fef6 	bl	8001454 <HAL_InitTick>
 8003668:	4603      	mov	r3, r0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3718      	adds	r7, #24
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	40022000 	.word	0x40022000
 8003678:	40021000 	.word	0x40021000
 800367c:	04c4b400 	.word	0x04c4b400
 8003680:	080050a8 	.word	0x080050a8
 8003684:	20000000 	.word	0x20000000
 8003688:	20000004 	.word	0x20000004

0800368c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800368c:	b480      	push	{r7}
 800368e:	b087      	sub	sp, #28
 8003690:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003692:	4b2c      	ldr	r3, [pc, #176]	@ (8003744 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f003 030c 	and.w	r3, r3, #12
 800369a:	2b04      	cmp	r3, #4
 800369c:	d102      	bne.n	80036a4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800369e:	4b2a      	ldr	r3, [pc, #168]	@ (8003748 <HAL_RCC_GetSysClockFreq+0xbc>)
 80036a0:	613b      	str	r3, [r7, #16]
 80036a2:	e047      	b.n	8003734 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80036a4:	4b27      	ldr	r3, [pc, #156]	@ (8003744 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f003 030c 	and.w	r3, r3, #12
 80036ac:	2b08      	cmp	r3, #8
 80036ae:	d102      	bne.n	80036b6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80036b0:	4b26      	ldr	r3, [pc, #152]	@ (800374c <HAL_RCC_GetSysClockFreq+0xc0>)
 80036b2:	613b      	str	r3, [r7, #16]
 80036b4:	e03e      	b.n	8003734 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80036b6:	4b23      	ldr	r3, [pc, #140]	@ (8003744 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f003 030c 	and.w	r3, r3, #12
 80036be:	2b0c      	cmp	r3, #12
 80036c0:	d136      	bne.n	8003730 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036c2:	4b20      	ldr	r3, [pc, #128]	@ (8003744 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	f003 0303 	and.w	r3, r3, #3
 80036ca:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036cc:	4b1d      	ldr	r3, [pc, #116]	@ (8003744 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	091b      	lsrs	r3, r3, #4
 80036d2:	f003 030f 	and.w	r3, r3, #15
 80036d6:	3301      	adds	r3, #1
 80036d8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2b03      	cmp	r3, #3
 80036de:	d10c      	bne.n	80036fa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036e0:	4a1a      	ldr	r2, [pc, #104]	@ (800374c <HAL_RCC_GetSysClockFreq+0xc0>)
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e8:	4a16      	ldr	r2, [pc, #88]	@ (8003744 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036ea:	68d2      	ldr	r2, [r2, #12]
 80036ec:	0a12      	lsrs	r2, r2, #8
 80036ee:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80036f2:	fb02 f303 	mul.w	r3, r2, r3
 80036f6:	617b      	str	r3, [r7, #20]
      break;
 80036f8:	e00c      	b.n	8003714 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036fa:	4a13      	ldr	r2, [pc, #76]	@ (8003748 <HAL_RCC_GetSysClockFreq+0xbc>)
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003702:	4a10      	ldr	r2, [pc, #64]	@ (8003744 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003704:	68d2      	ldr	r2, [r2, #12]
 8003706:	0a12      	lsrs	r2, r2, #8
 8003708:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800370c:	fb02 f303 	mul.w	r3, r2, r3
 8003710:	617b      	str	r3, [r7, #20]
      break;
 8003712:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003714:	4b0b      	ldr	r3, [pc, #44]	@ (8003744 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	0e5b      	lsrs	r3, r3, #25
 800371a:	f003 0303 	and.w	r3, r3, #3
 800371e:	3301      	adds	r3, #1
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	fbb2 f3f3 	udiv	r3, r2, r3
 800372c:	613b      	str	r3, [r7, #16]
 800372e:	e001      	b.n	8003734 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003730:	2300      	movs	r3, #0
 8003732:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003734:	693b      	ldr	r3, [r7, #16]
}
 8003736:	4618      	mov	r0, r3
 8003738:	371c      	adds	r7, #28
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	40021000 	.word	0x40021000
 8003748:	00f42400 	.word	0x00f42400
 800374c:	016e3600 	.word	0x016e3600

08003750 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003750:	b480      	push	{r7}
 8003752:	b087      	sub	sp, #28
 8003754:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003756:	4b1e      	ldr	r3, [pc, #120]	@ (80037d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	f003 0303 	and.w	r3, r3, #3
 800375e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003760:	4b1b      	ldr	r3, [pc, #108]	@ (80037d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	091b      	lsrs	r3, r3, #4
 8003766:	f003 030f 	and.w	r3, r3, #15
 800376a:	3301      	adds	r3, #1
 800376c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	2b03      	cmp	r3, #3
 8003772:	d10c      	bne.n	800378e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003774:	4a17      	ldr	r2, [pc, #92]	@ (80037d4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	fbb2 f3f3 	udiv	r3, r2, r3
 800377c:	4a14      	ldr	r2, [pc, #80]	@ (80037d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800377e:	68d2      	ldr	r2, [r2, #12]
 8003780:	0a12      	lsrs	r2, r2, #8
 8003782:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003786:	fb02 f303 	mul.w	r3, r2, r3
 800378a:	617b      	str	r3, [r7, #20]
    break;
 800378c:	e00c      	b.n	80037a8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800378e:	4a12      	ldr	r2, [pc, #72]	@ (80037d8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	fbb2 f3f3 	udiv	r3, r2, r3
 8003796:	4a0e      	ldr	r2, [pc, #56]	@ (80037d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003798:	68d2      	ldr	r2, [r2, #12]
 800379a:	0a12      	lsrs	r2, r2, #8
 800379c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80037a0:	fb02 f303 	mul.w	r3, r2, r3
 80037a4:	617b      	str	r3, [r7, #20]
    break;
 80037a6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80037a8:	4b09      	ldr	r3, [pc, #36]	@ (80037d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	0e5b      	lsrs	r3, r3, #25
 80037ae:	f003 0303 	and.w	r3, r3, #3
 80037b2:	3301      	adds	r3, #1
 80037b4:	005b      	lsls	r3, r3, #1
 80037b6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80037c2:	687b      	ldr	r3, [r7, #4]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	371c      	adds	r7, #28
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr
 80037d0:	40021000 	.word	0x40021000
 80037d4:	016e3600 	.word	0x016e3600
 80037d8:	00f42400 	.word	0x00f42400

080037dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b086      	sub	sp, #24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037e4:	2300      	movs	r3, #0
 80037e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037e8:	2300      	movs	r3, #0
 80037ea:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f000 8098 	beq.w	800392a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037fa:	2300      	movs	r3, #0
 80037fc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037fe:	4b43      	ldr	r3, [pc, #268]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003802:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10d      	bne.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800380a:	4b40      	ldr	r3, [pc, #256]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800380c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800380e:	4a3f      	ldr	r2, [pc, #252]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003810:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003814:	6593      	str	r3, [r2, #88]	@ 0x58
 8003816:	4b3d      	ldr	r3, [pc, #244]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800381a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800381e:	60bb      	str	r3, [r7, #8]
 8003820:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003822:	2301      	movs	r3, #1
 8003824:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003826:	4b3a      	ldr	r3, [pc, #232]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a39      	ldr	r2, [pc, #228]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800382c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003830:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003832:	f7fd fe5b 	bl	80014ec <HAL_GetTick>
 8003836:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003838:	e009      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800383a:	f7fd fe57 	bl	80014ec <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	2b02      	cmp	r3, #2
 8003846:	d902      	bls.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	74fb      	strb	r3, [r7, #19]
        break;
 800384c:	e005      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800384e:	4b30      	ldr	r3, [pc, #192]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003856:	2b00      	cmp	r3, #0
 8003858:	d0ef      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800385a:	7cfb      	ldrb	r3, [r7, #19]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d159      	bne.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003860:	4b2a      	ldr	r3, [pc, #168]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003862:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003866:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800386a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d01e      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	429a      	cmp	r2, r3
 800387a:	d019      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800387c:	4b23      	ldr	r3, [pc, #140]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800387e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003882:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003886:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003888:	4b20      	ldr	r3, [pc, #128]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800388a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800388e:	4a1f      	ldr	r2, [pc, #124]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003890:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003894:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003898:	4b1c      	ldr	r3, [pc, #112]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800389a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800389e:	4a1b      	ldr	r2, [pc, #108]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80038a8:	4a18      	ldr	r2, [pc, #96]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d016      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ba:	f7fd fe17 	bl	80014ec <HAL_GetTick>
 80038be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038c0:	e00b      	b.n	80038da <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038c2:	f7fd fe13 	bl	80014ec <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d902      	bls.n	80038da <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	74fb      	strb	r3, [r7, #19]
            break;
 80038d8:	e006      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038da:	4b0c      	ldr	r3, [pc, #48]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d0ec      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80038e8:	7cfb      	ldrb	r3, [r7, #19]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10b      	bne.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038ee:	4b07      	ldr	r3, [pc, #28]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038fc:	4903      	ldr	r1, [pc, #12]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003904:	e008      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003906:	7cfb      	ldrb	r3, [r7, #19]
 8003908:	74bb      	strb	r3, [r7, #18]
 800390a:	e005      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800390c:	40021000 	.word	0x40021000
 8003910:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003914:	7cfb      	ldrb	r3, [r7, #19]
 8003916:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003918:	7c7b      	ldrb	r3, [r7, #17]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d105      	bne.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800391e:	4ba7      	ldr	r3, [pc, #668]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003922:	4aa6      	ldr	r2, [pc, #664]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003924:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003928:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00a      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003936:	4ba1      	ldr	r3, [pc, #644]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003938:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800393c:	f023 0203 	bic.w	r2, r3, #3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	499d      	ldr	r1, [pc, #628]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003946:	4313      	orrs	r3, r2
 8003948:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00a      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003958:	4b98      	ldr	r3, [pc, #608]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800395a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800395e:	f023 020c 	bic.w	r2, r3, #12
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	4995      	ldr	r1, [pc, #596]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003968:	4313      	orrs	r3, r2
 800396a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0304 	and.w	r3, r3, #4
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00a      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800397a:	4b90      	ldr	r3, [pc, #576]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800397c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003980:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	498c      	ldr	r1, [pc, #560]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800398a:	4313      	orrs	r3, r2
 800398c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0308 	and.w	r3, r3, #8
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00a      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800399c:	4b87      	ldr	r3, [pc, #540]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800399e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039a2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	4984      	ldr	r1, [pc, #528]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0310 	and.w	r3, r3, #16
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00a      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80039be:	4b7f      	ldr	r3, [pc, #508]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	695b      	ldr	r3, [r3, #20]
 80039cc:	497b      	ldr	r1, [pc, #492]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0320 	and.w	r3, r3, #32
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d00a      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039e0:	4b76      	ldr	r3, [pc, #472]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039e6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	4973      	ldr	r1, [pc, #460]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00a      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a02:	4b6e      	ldr	r3, [pc, #440]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a08:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	69db      	ldr	r3, [r3, #28]
 8003a10:	496a      	ldr	r1, [pc, #424]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00a      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a24:	4b65      	ldr	r3, [pc, #404]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a2a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	4962      	ldr	r1, [pc, #392]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00a      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a46:	4b5d      	ldr	r3, [pc, #372]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a4c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a54:	4959      	ldr	r1, [pc, #356]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d00a      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003a68:	4b54      	ldr	r3, [pc, #336]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a6e:	f023 0203 	bic.w	r2, r3, #3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a76:	4951      	ldr	r1, [pc, #324]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00a      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a8a:	4b4c      	ldr	r3, [pc, #304]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a90:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a98:	4948      	ldr	r1, [pc, #288]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d015      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003aac:	4b43      	ldr	r3, [pc, #268]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ab2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aba:	4940      	ldr	r1, [pc, #256]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003aca:	d105      	bne.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003acc:	4b3b      	ldr	r3, [pc, #236]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	4a3a      	ldr	r2, [pc, #232]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ad2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ad6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d015      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ae4:	4b35      	ldr	r3, [pc, #212]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aea:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003af2:	4932      	ldr	r1, [pc, #200]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003afe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b02:	d105      	bne.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b04:	4b2d      	ldr	r3, [pc, #180]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	4a2c      	ldr	r2, [pc, #176]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b0e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d015      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003b1c:	4b27      	ldr	r3, [pc, #156]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b22:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b2a:	4924      	ldr	r1, [pc, #144]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b36:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b3a:	d105      	bne.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b3c:	4b1f      	ldr	r3, [pc, #124]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	4a1e      	ldr	r2, [pc, #120]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b46:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d015      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b54:	4b19      	ldr	r3, [pc, #100]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b5a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b62:	4916      	ldr	r1, [pc, #88]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b72:	d105      	bne.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b74:	4b11      	ldr	r3, [pc, #68]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	4a10      	ldr	r2, [pc, #64]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b7e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d019      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b92:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b9a:	4908      	ldr	r1, [pc, #32]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003baa:	d109      	bne.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bac:	4b03      	ldr	r3, [pc, #12]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	4a02      	ldr	r2, [pc, #8]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003bb6:	60d3      	str	r3, [r2, #12]
 8003bb8:	e002      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003bba:	bf00      	nop
 8003bbc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d015      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003bcc:	4b29      	ldr	r3, [pc, #164]	@ (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bd2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bda:	4926      	ldr	r1, [pc, #152]	@ (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003be6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003bea:	d105      	bne.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003bec:	4b21      	ldr	r3, [pc, #132]	@ (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	4a20      	ldr	r2, [pc, #128]	@ (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bf2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bf6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d015      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003c04:	4b1b      	ldr	r3, [pc, #108]	@ (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c0a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c12:	4918      	ldr	r1, [pc, #96]	@ (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c22:	d105      	bne.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003c24:	4b13      	ldr	r3, [pc, #76]	@ (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	4a12      	ldr	r2, [pc, #72]	@ (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c2e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d015      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003c3c:	4b0d      	ldr	r3, [pc, #52]	@ (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003c42:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c4a:	490a      	ldr	r1, [pc, #40]	@ (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c56:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c5a:	d105      	bne.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c5c:	4b05      	ldr	r3, [pc, #20]	@ (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	4a04      	ldr	r2, [pc, #16]	@ (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c66:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003c68:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3718      	adds	r7, #24
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	40021000 	.word	0x40021000

08003c78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d101      	bne.n	8003c8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e049      	b.n	8003d1e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d106      	bne.n	8003ca4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f7fd f9a4 	bl	8000fec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2202      	movs	r2, #2
 8003ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	3304      	adds	r3, #4
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	4610      	mov	r0, r2
 8003cb8:	f000 fbf4 	bl	80044a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b082      	sub	sp, #8
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d101      	bne.n	8003d38 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e049      	b.n	8003dcc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d106      	bne.n	8003d52 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 f841 	bl	8003dd4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2202      	movs	r2, #2
 8003d56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	3304      	adds	r3, #4
 8003d62:	4619      	mov	r1, r3
 8003d64:	4610      	mov	r0, r2
 8003d66:	f000 fb9d 	bl	80044a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2201      	movs	r2, #1
 8003d96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003dca:	2300      	movs	r3, #0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3708      	adds	r7, #8
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b086      	sub	sp, #24
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d101      	bne.n	8003dfc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e097      	b.n	8003f2c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d106      	bne.n	8003e16 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f7fd f945 	bl	80010a0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2202      	movs	r2, #2
 8003e1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	6812      	ldr	r2, [r2, #0]
 8003e28:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8003e2c:	f023 0307 	bic.w	r3, r3, #7
 8003e30:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	3304      	adds	r3, #4
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	4610      	mov	r0, r2
 8003e3e:	f000 fb31 	bl	80044a4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	6a1b      	ldr	r3, [r3, #32]
 8003e58:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	697a      	ldr	r2, [r7, #20]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e6a:	f023 0303 	bic.w	r3, r3, #3
 8003e6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	689a      	ldr	r2, [r3, #8]
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	021b      	lsls	r3, r3, #8
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003e88:	f023 030c 	bic.w	r3, r3, #12
 8003e8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003e94:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	68da      	ldr	r2, [r3, #12]
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	69db      	ldr	r3, [r3, #28]
 8003ea2:	021b      	lsls	r3, r3, #8
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	011a      	lsls	r2, r3, #4
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	6a1b      	ldr	r3, [r3, #32]
 8003eb6:	031b      	lsls	r3, r3, #12
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003ec6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003ece:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685a      	ldr	r2, [r3, #4]
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	695b      	ldr	r3, [r3, #20]
 8003ed8:	011b      	lsls	r3, r3, #4
 8003eda:	4313      	orrs	r3, r2
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2201      	movs	r2, #1
 8003f06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2201      	movs	r2, #1
 8003f16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3718      	adds	r7, #24
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f44:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003f4c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003f54:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003f5c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d110      	bne.n	8003f86 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f64:	7bfb      	ldrb	r3, [r7, #15]
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d102      	bne.n	8003f70 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f6a:	7b7b      	ldrb	r3, [r7, #13]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d001      	beq.n	8003f74 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e069      	b.n	8004048 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2202      	movs	r2, #2
 8003f78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2202      	movs	r2, #2
 8003f80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f84:	e031      	b.n	8003fea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	2b04      	cmp	r3, #4
 8003f8a:	d110      	bne.n	8003fae <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f8c:	7bbb      	ldrb	r3, [r7, #14]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d102      	bne.n	8003f98 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f92:	7b3b      	ldrb	r3, [r7, #12]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d001      	beq.n	8003f9c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e055      	b.n	8004048 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003fac:	e01d      	b.n	8003fea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fae:	7bfb      	ldrb	r3, [r7, #15]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d108      	bne.n	8003fc6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fb4:	7bbb      	ldrb	r3, [r7, #14]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d105      	bne.n	8003fc6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fba:	7b7b      	ldrb	r3, [r7, #13]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d102      	bne.n	8003fc6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003fc0:	7b3b      	ldrb	r3, [r7, #12]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d001      	beq.n	8003fca <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e03e      	b.n	8004048 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2202      	movs	r2, #2
 8003fce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2202      	movs	r2, #2
 8003fd6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2202      	movs	r2, #2
 8003fde:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2202      	movs	r2, #2
 8003fe6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d003      	beq.n	8003ff8 <HAL_TIM_Encoder_Start+0xc4>
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	2b04      	cmp	r3, #4
 8003ff4:	d008      	beq.n	8004008 <HAL_TIM_Encoder_Start+0xd4>
 8003ff6:	e00f      	b.n	8004018 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	2100      	movs	r1, #0
 8004000:	4618      	mov	r0, r3
 8004002:	f000 fec9 	bl	8004d98 <TIM_CCxChannelCmd>
      break;
 8004006:	e016      	b.n	8004036 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2201      	movs	r2, #1
 800400e:	2104      	movs	r1, #4
 8004010:	4618      	mov	r0, r3
 8004012:	f000 fec1 	bl	8004d98 <TIM_CCxChannelCmd>
      break;
 8004016:	e00e      	b.n	8004036 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2201      	movs	r2, #1
 800401e:	2100      	movs	r1, #0
 8004020:	4618      	mov	r0, r3
 8004022:	f000 feb9 	bl	8004d98 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2201      	movs	r2, #1
 800402c:	2104      	movs	r1, #4
 800402e:	4618      	mov	r0, r3
 8004030:	f000 feb2 	bl	8004d98 <TIM_CCxChannelCmd>
      break;
 8004034:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f042 0201 	orr.w	r2, r2, #1
 8004044:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3710      	adds	r7, #16
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800405c:	2300      	movs	r3, #0
 800405e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004066:	2b01      	cmp	r3, #1
 8004068:	d101      	bne.n	800406e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800406a:	2302      	movs	r3, #2
 800406c:	e0ff      	b.n	800426e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2b14      	cmp	r3, #20
 800407a:	f200 80f0 	bhi.w	800425e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800407e:	a201      	add	r2, pc, #4	@ (adr r2, 8004084 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004084:	080040d9 	.word	0x080040d9
 8004088:	0800425f 	.word	0x0800425f
 800408c:	0800425f 	.word	0x0800425f
 8004090:	0800425f 	.word	0x0800425f
 8004094:	08004119 	.word	0x08004119
 8004098:	0800425f 	.word	0x0800425f
 800409c:	0800425f 	.word	0x0800425f
 80040a0:	0800425f 	.word	0x0800425f
 80040a4:	0800415b 	.word	0x0800415b
 80040a8:	0800425f 	.word	0x0800425f
 80040ac:	0800425f 	.word	0x0800425f
 80040b0:	0800425f 	.word	0x0800425f
 80040b4:	0800419b 	.word	0x0800419b
 80040b8:	0800425f 	.word	0x0800425f
 80040bc:	0800425f 	.word	0x0800425f
 80040c0:	0800425f 	.word	0x0800425f
 80040c4:	080041dd 	.word	0x080041dd
 80040c8:	0800425f 	.word	0x0800425f
 80040cc:	0800425f 	.word	0x0800425f
 80040d0:	0800425f 	.word	0x0800425f
 80040d4:	0800421d 	.word	0x0800421d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68b9      	ldr	r1, [r7, #8]
 80040de:	4618      	mov	r0, r3
 80040e0:	f000 fa94 	bl	800460c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	699a      	ldr	r2, [r3, #24]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f042 0208 	orr.w	r2, r2, #8
 80040f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	699a      	ldr	r2, [r3, #24]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f022 0204 	bic.w	r2, r2, #4
 8004102:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6999      	ldr	r1, [r3, #24]
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	691a      	ldr	r2, [r3, #16]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	430a      	orrs	r2, r1
 8004114:	619a      	str	r2, [r3, #24]
      break;
 8004116:	e0a5      	b.n	8004264 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68b9      	ldr	r1, [r7, #8]
 800411e:	4618      	mov	r0, r3
 8004120:	f000 fb0e 	bl	8004740 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	699a      	ldr	r2, [r3, #24]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004132:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	699a      	ldr	r2, [r3, #24]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004142:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6999      	ldr	r1, [r3, #24]
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	021a      	lsls	r2, r3, #8
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	430a      	orrs	r2, r1
 8004156:	619a      	str	r2, [r3, #24]
      break;
 8004158:	e084      	b.n	8004264 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68b9      	ldr	r1, [r7, #8]
 8004160:	4618      	mov	r0, r3
 8004162:	f000 fb81 	bl	8004868 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	69da      	ldr	r2, [r3, #28]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f042 0208 	orr.w	r2, r2, #8
 8004174:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	69da      	ldr	r2, [r3, #28]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f022 0204 	bic.w	r2, r2, #4
 8004184:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	69d9      	ldr	r1, [r3, #28]
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	691a      	ldr	r2, [r3, #16]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	430a      	orrs	r2, r1
 8004196:	61da      	str	r2, [r3, #28]
      break;
 8004198:	e064      	b.n	8004264 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68b9      	ldr	r1, [r7, #8]
 80041a0:	4618      	mov	r0, r3
 80041a2:	f000 fbf3 	bl	800498c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	69da      	ldr	r2, [r3, #28]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	69da      	ldr	r2, [r3, #28]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	69d9      	ldr	r1, [r3, #28]
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	021a      	lsls	r2, r3, #8
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	430a      	orrs	r2, r1
 80041d8:	61da      	str	r2, [r3, #28]
      break;
 80041da:	e043      	b.n	8004264 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68b9      	ldr	r1, [r7, #8]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f000 fc66 	bl	8004ab4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f042 0208 	orr.w	r2, r2, #8
 80041f6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f022 0204 	bic.w	r2, r2, #4
 8004206:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	691a      	ldr	r2, [r3, #16]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	430a      	orrs	r2, r1
 8004218:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800421a:	e023      	b.n	8004264 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68b9      	ldr	r1, [r7, #8]
 8004222:	4618      	mov	r0, r3
 8004224:	f000 fcb0 	bl	8004b88 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004236:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004246:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	021a      	lsls	r2, r3, #8
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	430a      	orrs	r2, r1
 800425a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800425c:	e002      	b.n	8004264 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	75fb      	strb	r3, [r7, #23]
      break;
 8004262:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800426c:	7dfb      	ldrb	r3, [r7, #23]
}
 800426e:	4618      	mov	r0, r3
 8004270:	3718      	adds	r7, #24
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop

08004278 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004282:	2300      	movs	r3, #0
 8004284:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800428c:	2b01      	cmp	r3, #1
 800428e:	d101      	bne.n	8004294 <HAL_TIM_ConfigClockSource+0x1c>
 8004290:	2302      	movs	r3, #2
 8004292:	e0f6      	b.n	8004482 <HAL_TIM_ConfigClockSource+0x20a>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2202      	movs	r2, #2
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80042b2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80042b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80042be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68ba      	ldr	r2, [r7, #8]
 80042c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a6f      	ldr	r2, [pc, #444]	@ (800448c <HAL_TIM_ConfigClockSource+0x214>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	f000 80c1 	beq.w	8004456 <HAL_TIM_ConfigClockSource+0x1de>
 80042d4:	4a6d      	ldr	r2, [pc, #436]	@ (800448c <HAL_TIM_ConfigClockSource+0x214>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	f200 80c6 	bhi.w	8004468 <HAL_TIM_ConfigClockSource+0x1f0>
 80042dc:	4a6c      	ldr	r2, [pc, #432]	@ (8004490 <HAL_TIM_ConfigClockSource+0x218>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	f000 80b9 	beq.w	8004456 <HAL_TIM_ConfigClockSource+0x1de>
 80042e4:	4a6a      	ldr	r2, [pc, #424]	@ (8004490 <HAL_TIM_ConfigClockSource+0x218>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	f200 80be 	bhi.w	8004468 <HAL_TIM_ConfigClockSource+0x1f0>
 80042ec:	4a69      	ldr	r2, [pc, #420]	@ (8004494 <HAL_TIM_ConfigClockSource+0x21c>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	f000 80b1 	beq.w	8004456 <HAL_TIM_ConfigClockSource+0x1de>
 80042f4:	4a67      	ldr	r2, [pc, #412]	@ (8004494 <HAL_TIM_ConfigClockSource+0x21c>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	f200 80b6 	bhi.w	8004468 <HAL_TIM_ConfigClockSource+0x1f0>
 80042fc:	4a66      	ldr	r2, [pc, #408]	@ (8004498 <HAL_TIM_ConfigClockSource+0x220>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	f000 80a9 	beq.w	8004456 <HAL_TIM_ConfigClockSource+0x1de>
 8004304:	4a64      	ldr	r2, [pc, #400]	@ (8004498 <HAL_TIM_ConfigClockSource+0x220>)
 8004306:	4293      	cmp	r3, r2
 8004308:	f200 80ae 	bhi.w	8004468 <HAL_TIM_ConfigClockSource+0x1f0>
 800430c:	4a63      	ldr	r2, [pc, #396]	@ (800449c <HAL_TIM_ConfigClockSource+0x224>)
 800430e:	4293      	cmp	r3, r2
 8004310:	f000 80a1 	beq.w	8004456 <HAL_TIM_ConfigClockSource+0x1de>
 8004314:	4a61      	ldr	r2, [pc, #388]	@ (800449c <HAL_TIM_ConfigClockSource+0x224>)
 8004316:	4293      	cmp	r3, r2
 8004318:	f200 80a6 	bhi.w	8004468 <HAL_TIM_ConfigClockSource+0x1f0>
 800431c:	4a60      	ldr	r2, [pc, #384]	@ (80044a0 <HAL_TIM_ConfigClockSource+0x228>)
 800431e:	4293      	cmp	r3, r2
 8004320:	f000 8099 	beq.w	8004456 <HAL_TIM_ConfigClockSource+0x1de>
 8004324:	4a5e      	ldr	r2, [pc, #376]	@ (80044a0 <HAL_TIM_ConfigClockSource+0x228>)
 8004326:	4293      	cmp	r3, r2
 8004328:	f200 809e 	bhi.w	8004468 <HAL_TIM_ConfigClockSource+0x1f0>
 800432c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004330:	f000 8091 	beq.w	8004456 <HAL_TIM_ConfigClockSource+0x1de>
 8004334:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004338:	f200 8096 	bhi.w	8004468 <HAL_TIM_ConfigClockSource+0x1f0>
 800433c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004340:	f000 8089 	beq.w	8004456 <HAL_TIM_ConfigClockSource+0x1de>
 8004344:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004348:	f200 808e 	bhi.w	8004468 <HAL_TIM_ConfigClockSource+0x1f0>
 800434c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004350:	d03e      	beq.n	80043d0 <HAL_TIM_ConfigClockSource+0x158>
 8004352:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004356:	f200 8087 	bhi.w	8004468 <HAL_TIM_ConfigClockSource+0x1f0>
 800435a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800435e:	f000 8086 	beq.w	800446e <HAL_TIM_ConfigClockSource+0x1f6>
 8004362:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004366:	d87f      	bhi.n	8004468 <HAL_TIM_ConfigClockSource+0x1f0>
 8004368:	2b70      	cmp	r3, #112	@ 0x70
 800436a:	d01a      	beq.n	80043a2 <HAL_TIM_ConfigClockSource+0x12a>
 800436c:	2b70      	cmp	r3, #112	@ 0x70
 800436e:	d87b      	bhi.n	8004468 <HAL_TIM_ConfigClockSource+0x1f0>
 8004370:	2b60      	cmp	r3, #96	@ 0x60
 8004372:	d050      	beq.n	8004416 <HAL_TIM_ConfigClockSource+0x19e>
 8004374:	2b60      	cmp	r3, #96	@ 0x60
 8004376:	d877      	bhi.n	8004468 <HAL_TIM_ConfigClockSource+0x1f0>
 8004378:	2b50      	cmp	r3, #80	@ 0x50
 800437a:	d03c      	beq.n	80043f6 <HAL_TIM_ConfigClockSource+0x17e>
 800437c:	2b50      	cmp	r3, #80	@ 0x50
 800437e:	d873      	bhi.n	8004468 <HAL_TIM_ConfigClockSource+0x1f0>
 8004380:	2b40      	cmp	r3, #64	@ 0x40
 8004382:	d058      	beq.n	8004436 <HAL_TIM_ConfigClockSource+0x1be>
 8004384:	2b40      	cmp	r3, #64	@ 0x40
 8004386:	d86f      	bhi.n	8004468 <HAL_TIM_ConfigClockSource+0x1f0>
 8004388:	2b30      	cmp	r3, #48	@ 0x30
 800438a:	d064      	beq.n	8004456 <HAL_TIM_ConfigClockSource+0x1de>
 800438c:	2b30      	cmp	r3, #48	@ 0x30
 800438e:	d86b      	bhi.n	8004468 <HAL_TIM_ConfigClockSource+0x1f0>
 8004390:	2b20      	cmp	r3, #32
 8004392:	d060      	beq.n	8004456 <HAL_TIM_ConfigClockSource+0x1de>
 8004394:	2b20      	cmp	r3, #32
 8004396:	d867      	bhi.n	8004468 <HAL_TIM_ConfigClockSource+0x1f0>
 8004398:	2b00      	cmp	r3, #0
 800439a:	d05c      	beq.n	8004456 <HAL_TIM_ConfigClockSource+0x1de>
 800439c:	2b10      	cmp	r3, #16
 800439e:	d05a      	beq.n	8004456 <HAL_TIM_ConfigClockSource+0x1de>
 80043a0:	e062      	b.n	8004468 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043b2:	f000 fcd1 	bl	8004d58 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80043c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68ba      	ldr	r2, [r7, #8]
 80043cc:	609a      	str	r2, [r3, #8]
      break;
 80043ce:	e04f      	b.n	8004470 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043e0:	f000 fcba 	bl	8004d58 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	689a      	ldr	r2, [r3, #8]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80043f2:	609a      	str	r2, [r3, #8]
      break;
 80043f4:	e03c      	b.n	8004470 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004402:	461a      	mov	r2, r3
 8004404:	f000 fc2c 	bl	8004c60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2150      	movs	r1, #80	@ 0x50
 800440e:	4618      	mov	r0, r3
 8004410:	f000 fc85 	bl	8004d1e <TIM_ITRx_SetConfig>
      break;
 8004414:	e02c      	b.n	8004470 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004422:	461a      	mov	r2, r3
 8004424:	f000 fc4b 	bl	8004cbe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2160      	movs	r1, #96	@ 0x60
 800442e:	4618      	mov	r0, r3
 8004430:	f000 fc75 	bl	8004d1e <TIM_ITRx_SetConfig>
      break;
 8004434:	e01c      	b.n	8004470 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004442:	461a      	mov	r2, r3
 8004444:	f000 fc0c 	bl	8004c60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2140      	movs	r1, #64	@ 0x40
 800444e:	4618      	mov	r0, r3
 8004450:	f000 fc65 	bl	8004d1e <TIM_ITRx_SetConfig>
      break;
 8004454:	e00c      	b.n	8004470 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4619      	mov	r1, r3
 8004460:	4610      	mov	r0, r2
 8004462:	f000 fc5c 	bl	8004d1e <TIM_ITRx_SetConfig>
      break;
 8004466:	e003      	b.n	8004470 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	73fb      	strb	r3, [r7, #15]
      break;
 800446c:	e000      	b.n	8004470 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800446e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004480:	7bfb      	ldrb	r3, [r7, #15]
}
 8004482:	4618      	mov	r0, r3
 8004484:	3710      	adds	r7, #16
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	00100070 	.word	0x00100070
 8004490:	00100060 	.word	0x00100060
 8004494:	00100050 	.word	0x00100050
 8004498:	00100040 	.word	0x00100040
 800449c:	00100030 	.word	0x00100030
 80044a0:	00100020 	.word	0x00100020

080044a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a4c      	ldr	r2, [pc, #304]	@ (80045e8 <TIM_Base_SetConfig+0x144>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d017      	beq.n	80044ec <TIM_Base_SetConfig+0x48>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044c2:	d013      	beq.n	80044ec <TIM_Base_SetConfig+0x48>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a49      	ldr	r2, [pc, #292]	@ (80045ec <TIM_Base_SetConfig+0x148>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d00f      	beq.n	80044ec <TIM_Base_SetConfig+0x48>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a48      	ldr	r2, [pc, #288]	@ (80045f0 <TIM_Base_SetConfig+0x14c>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d00b      	beq.n	80044ec <TIM_Base_SetConfig+0x48>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a47      	ldr	r2, [pc, #284]	@ (80045f4 <TIM_Base_SetConfig+0x150>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d007      	beq.n	80044ec <TIM_Base_SetConfig+0x48>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a46      	ldr	r2, [pc, #280]	@ (80045f8 <TIM_Base_SetConfig+0x154>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d003      	beq.n	80044ec <TIM_Base_SetConfig+0x48>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a45      	ldr	r2, [pc, #276]	@ (80045fc <TIM_Base_SetConfig+0x158>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d108      	bne.n	80044fe <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a39      	ldr	r2, [pc, #228]	@ (80045e8 <TIM_Base_SetConfig+0x144>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d023      	beq.n	800454e <TIM_Base_SetConfig+0xaa>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800450c:	d01f      	beq.n	800454e <TIM_Base_SetConfig+0xaa>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a36      	ldr	r2, [pc, #216]	@ (80045ec <TIM_Base_SetConfig+0x148>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d01b      	beq.n	800454e <TIM_Base_SetConfig+0xaa>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a35      	ldr	r2, [pc, #212]	@ (80045f0 <TIM_Base_SetConfig+0x14c>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d017      	beq.n	800454e <TIM_Base_SetConfig+0xaa>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a34      	ldr	r2, [pc, #208]	@ (80045f4 <TIM_Base_SetConfig+0x150>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d013      	beq.n	800454e <TIM_Base_SetConfig+0xaa>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a33      	ldr	r2, [pc, #204]	@ (80045f8 <TIM_Base_SetConfig+0x154>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d00f      	beq.n	800454e <TIM_Base_SetConfig+0xaa>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a33      	ldr	r2, [pc, #204]	@ (8004600 <TIM_Base_SetConfig+0x15c>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d00b      	beq.n	800454e <TIM_Base_SetConfig+0xaa>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a32      	ldr	r2, [pc, #200]	@ (8004604 <TIM_Base_SetConfig+0x160>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d007      	beq.n	800454e <TIM_Base_SetConfig+0xaa>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a31      	ldr	r2, [pc, #196]	@ (8004608 <TIM_Base_SetConfig+0x164>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d003      	beq.n	800454e <TIM_Base_SetConfig+0xaa>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a2c      	ldr	r2, [pc, #176]	@ (80045fc <TIM_Base_SetConfig+0x158>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d108      	bne.n	8004560 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004554:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	4313      	orrs	r3, r2
 800455e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	4313      	orrs	r3, r2
 800456c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	689a      	ldr	r2, [r3, #8]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a18      	ldr	r2, [pc, #96]	@ (80045e8 <TIM_Base_SetConfig+0x144>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d013      	beq.n	80045b4 <TIM_Base_SetConfig+0x110>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a1a      	ldr	r2, [pc, #104]	@ (80045f8 <TIM_Base_SetConfig+0x154>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d00f      	beq.n	80045b4 <TIM_Base_SetConfig+0x110>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a1a      	ldr	r2, [pc, #104]	@ (8004600 <TIM_Base_SetConfig+0x15c>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d00b      	beq.n	80045b4 <TIM_Base_SetConfig+0x110>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a19      	ldr	r2, [pc, #100]	@ (8004604 <TIM_Base_SetConfig+0x160>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d007      	beq.n	80045b4 <TIM_Base_SetConfig+0x110>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a18      	ldr	r2, [pc, #96]	@ (8004608 <TIM_Base_SetConfig+0x164>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d003      	beq.n	80045b4 <TIM_Base_SetConfig+0x110>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a13      	ldr	r2, [pc, #76]	@ (80045fc <TIM_Base_SetConfig+0x158>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d103      	bne.n	80045bc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	691a      	ldr	r2, [r3, #16]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d105      	bne.n	80045da <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	f023 0201 	bic.w	r2, r3, #1
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	611a      	str	r2, [r3, #16]
  }
}
 80045da:	bf00      	nop
 80045dc:	3714      	adds	r7, #20
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	40012c00 	.word	0x40012c00
 80045ec:	40000400 	.word	0x40000400
 80045f0:	40000800 	.word	0x40000800
 80045f4:	40000c00 	.word	0x40000c00
 80045f8:	40013400 	.word	0x40013400
 80045fc:	40015000 	.word	0x40015000
 8004600:	40014000 	.word	0x40014000
 8004604:	40014400 	.word	0x40014400
 8004608:	40014800 	.word	0x40014800

0800460c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800460c:	b480      	push	{r7}
 800460e:	b087      	sub	sp, #28
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a1b      	ldr	r3, [r3, #32]
 8004620:	f023 0201 	bic.w	r2, r3, #1
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800463a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800463e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f023 0303 	bic.w	r3, r3, #3
 8004646:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	4313      	orrs	r3, r2
 8004650:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	f023 0302 	bic.w	r3, r3, #2
 8004658:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	4313      	orrs	r3, r2
 8004662:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a30      	ldr	r2, [pc, #192]	@ (8004728 <TIM_OC1_SetConfig+0x11c>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d013      	beq.n	8004694 <TIM_OC1_SetConfig+0x88>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a2f      	ldr	r2, [pc, #188]	@ (800472c <TIM_OC1_SetConfig+0x120>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d00f      	beq.n	8004694 <TIM_OC1_SetConfig+0x88>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a2e      	ldr	r2, [pc, #184]	@ (8004730 <TIM_OC1_SetConfig+0x124>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d00b      	beq.n	8004694 <TIM_OC1_SetConfig+0x88>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a2d      	ldr	r2, [pc, #180]	@ (8004734 <TIM_OC1_SetConfig+0x128>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d007      	beq.n	8004694 <TIM_OC1_SetConfig+0x88>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a2c      	ldr	r2, [pc, #176]	@ (8004738 <TIM_OC1_SetConfig+0x12c>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d003      	beq.n	8004694 <TIM_OC1_SetConfig+0x88>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a2b      	ldr	r2, [pc, #172]	@ (800473c <TIM_OC1_SetConfig+0x130>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d10c      	bne.n	80046ae <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	f023 0308 	bic.w	r3, r3, #8
 800469a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	697a      	ldr	r2, [r7, #20]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	f023 0304 	bic.w	r3, r3, #4
 80046ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a1d      	ldr	r2, [pc, #116]	@ (8004728 <TIM_OC1_SetConfig+0x11c>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d013      	beq.n	80046de <TIM_OC1_SetConfig+0xd2>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a1c      	ldr	r2, [pc, #112]	@ (800472c <TIM_OC1_SetConfig+0x120>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d00f      	beq.n	80046de <TIM_OC1_SetConfig+0xd2>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a1b      	ldr	r2, [pc, #108]	@ (8004730 <TIM_OC1_SetConfig+0x124>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d00b      	beq.n	80046de <TIM_OC1_SetConfig+0xd2>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a1a      	ldr	r2, [pc, #104]	@ (8004734 <TIM_OC1_SetConfig+0x128>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d007      	beq.n	80046de <TIM_OC1_SetConfig+0xd2>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a19      	ldr	r2, [pc, #100]	@ (8004738 <TIM_OC1_SetConfig+0x12c>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d003      	beq.n	80046de <TIM_OC1_SetConfig+0xd2>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a18      	ldr	r2, [pc, #96]	@ (800473c <TIM_OC1_SetConfig+0x130>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d111      	bne.n	8004702 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80046ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	4313      	orrs	r3, r2
 8004700:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	685a      	ldr	r2, [r3, #4]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	621a      	str	r2, [r3, #32]
}
 800471c:	bf00      	nop
 800471e:	371c      	adds	r7, #28
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr
 8004728:	40012c00 	.word	0x40012c00
 800472c:	40013400 	.word	0x40013400
 8004730:	40014000 	.word	0x40014000
 8004734:	40014400 	.word	0x40014400
 8004738:	40014800 	.word	0x40014800
 800473c:	40015000 	.word	0x40015000

08004740 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004740:	b480      	push	{r7}
 8004742:	b087      	sub	sp, #28
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a1b      	ldr	r3, [r3, #32]
 8004754:	f023 0210 	bic.w	r2, r3, #16
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800476e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004772:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800477a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	021b      	lsls	r3, r3, #8
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	4313      	orrs	r3, r2
 8004786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	f023 0320 	bic.w	r3, r3, #32
 800478e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	011b      	lsls	r3, r3, #4
 8004796:	697a      	ldr	r2, [r7, #20]
 8004798:	4313      	orrs	r3, r2
 800479a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a2c      	ldr	r2, [pc, #176]	@ (8004850 <TIM_OC2_SetConfig+0x110>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d007      	beq.n	80047b4 <TIM_OC2_SetConfig+0x74>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a2b      	ldr	r2, [pc, #172]	@ (8004854 <TIM_OC2_SetConfig+0x114>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d003      	beq.n	80047b4 <TIM_OC2_SetConfig+0x74>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a2a      	ldr	r2, [pc, #168]	@ (8004858 <TIM_OC2_SetConfig+0x118>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d10d      	bne.n	80047d0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	011b      	lsls	r3, r3, #4
 80047c2:	697a      	ldr	r2, [r7, #20]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4a1f      	ldr	r2, [pc, #124]	@ (8004850 <TIM_OC2_SetConfig+0x110>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d013      	beq.n	8004800 <TIM_OC2_SetConfig+0xc0>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a1e      	ldr	r2, [pc, #120]	@ (8004854 <TIM_OC2_SetConfig+0x114>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d00f      	beq.n	8004800 <TIM_OC2_SetConfig+0xc0>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a1e      	ldr	r2, [pc, #120]	@ (800485c <TIM_OC2_SetConfig+0x11c>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d00b      	beq.n	8004800 <TIM_OC2_SetConfig+0xc0>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a1d      	ldr	r2, [pc, #116]	@ (8004860 <TIM_OC2_SetConfig+0x120>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d007      	beq.n	8004800 <TIM_OC2_SetConfig+0xc0>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a1c      	ldr	r2, [pc, #112]	@ (8004864 <TIM_OC2_SetConfig+0x124>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d003      	beq.n	8004800 <TIM_OC2_SetConfig+0xc0>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a17      	ldr	r2, [pc, #92]	@ (8004858 <TIM_OC2_SetConfig+0x118>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d113      	bne.n	8004828 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004806:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800480e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	695b      	ldr	r3, [r3, #20]
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	693a      	ldr	r2, [r7, #16]
 8004818:	4313      	orrs	r3, r2
 800481a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	693a      	ldr	r2, [r7, #16]
 8004824:	4313      	orrs	r3, r2
 8004826:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	693a      	ldr	r2, [r7, #16]
 800482c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	685a      	ldr	r2, [r3, #4]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	697a      	ldr	r2, [r7, #20]
 8004840:	621a      	str	r2, [r3, #32]
}
 8004842:	bf00      	nop
 8004844:	371c      	adds	r7, #28
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	40012c00 	.word	0x40012c00
 8004854:	40013400 	.word	0x40013400
 8004858:	40015000 	.word	0x40015000
 800485c:	40014000 	.word	0x40014000
 8004860:	40014400 	.word	0x40014400
 8004864:	40014800 	.word	0x40014800

08004868 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004868:	b480      	push	{r7}
 800486a:	b087      	sub	sp, #28
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a1b      	ldr	r3, [r3, #32]
 800487c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	69db      	ldr	r3, [r3, #28]
 800488e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004896:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800489a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f023 0303 	bic.w	r3, r3, #3
 80048a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68fa      	ldr	r2, [r7, #12]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80048b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	021b      	lsls	r3, r3, #8
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	4313      	orrs	r3, r2
 80048c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a2b      	ldr	r2, [pc, #172]	@ (8004974 <TIM_OC3_SetConfig+0x10c>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d007      	beq.n	80048da <TIM_OC3_SetConfig+0x72>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a2a      	ldr	r2, [pc, #168]	@ (8004978 <TIM_OC3_SetConfig+0x110>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d003      	beq.n	80048da <TIM_OC3_SetConfig+0x72>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a29      	ldr	r2, [pc, #164]	@ (800497c <TIM_OC3_SetConfig+0x114>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d10d      	bne.n	80048f6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80048e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	021b      	lsls	r3, r3, #8
 80048e8:	697a      	ldr	r2, [r7, #20]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80048f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a1e      	ldr	r2, [pc, #120]	@ (8004974 <TIM_OC3_SetConfig+0x10c>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d013      	beq.n	8004926 <TIM_OC3_SetConfig+0xbe>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a1d      	ldr	r2, [pc, #116]	@ (8004978 <TIM_OC3_SetConfig+0x110>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d00f      	beq.n	8004926 <TIM_OC3_SetConfig+0xbe>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a1d      	ldr	r2, [pc, #116]	@ (8004980 <TIM_OC3_SetConfig+0x118>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d00b      	beq.n	8004926 <TIM_OC3_SetConfig+0xbe>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a1c      	ldr	r2, [pc, #112]	@ (8004984 <TIM_OC3_SetConfig+0x11c>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d007      	beq.n	8004926 <TIM_OC3_SetConfig+0xbe>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a1b      	ldr	r2, [pc, #108]	@ (8004988 <TIM_OC3_SetConfig+0x120>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d003      	beq.n	8004926 <TIM_OC3_SetConfig+0xbe>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a16      	ldr	r2, [pc, #88]	@ (800497c <TIM_OC3_SetConfig+0x114>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d113      	bne.n	800494e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800492c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004934:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	011b      	lsls	r3, r3, #4
 800493c:	693a      	ldr	r2, [r7, #16]
 800493e:	4313      	orrs	r3, r2
 8004940:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	011b      	lsls	r3, r3, #4
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	4313      	orrs	r3, r2
 800494c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	685a      	ldr	r2, [r3, #4]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	697a      	ldr	r2, [r7, #20]
 8004966:	621a      	str	r2, [r3, #32]
}
 8004968:	bf00      	nop
 800496a:	371c      	adds	r7, #28
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr
 8004974:	40012c00 	.word	0x40012c00
 8004978:	40013400 	.word	0x40013400
 800497c:	40015000 	.word	0x40015000
 8004980:	40014000 	.word	0x40014000
 8004984:	40014400 	.word	0x40014400
 8004988:	40014800 	.word	0x40014800

0800498c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800498c:	b480      	push	{r7}
 800498e:	b087      	sub	sp, #28
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a1b      	ldr	r3, [r3, #32]
 80049a0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	69db      	ldr	r3, [r3, #28]
 80049b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	021b      	lsls	r3, r3, #8
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80049da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	031b      	lsls	r3, r3, #12
 80049e2:	697a      	ldr	r2, [r7, #20]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a2c      	ldr	r2, [pc, #176]	@ (8004a9c <TIM_OC4_SetConfig+0x110>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d007      	beq.n	8004a00 <TIM_OC4_SetConfig+0x74>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a2b      	ldr	r2, [pc, #172]	@ (8004aa0 <TIM_OC4_SetConfig+0x114>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d003      	beq.n	8004a00 <TIM_OC4_SetConfig+0x74>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a2a      	ldr	r2, [pc, #168]	@ (8004aa4 <TIM_OC4_SetConfig+0x118>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d10d      	bne.n	8004a1c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004a06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	031b      	lsls	r3, r3, #12
 8004a0e:	697a      	ldr	r2, [r7, #20]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a1a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a1f      	ldr	r2, [pc, #124]	@ (8004a9c <TIM_OC4_SetConfig+0x110>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d013      	beq.n	8004a4c <TIM_OC4_SetConfig+0xc0>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a1e      	ldr	r2, [pc, #120]	@ (8004aa0 <TIM_OC4_SetConfig+0x114>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d00f      	beq.n	8004a4c <TIM_OC4_SetConfig+0xc0>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a1e      	ldr	r2, [pc, #120]	@ (8004aa8 <TIM_OC4_SetConfig+0x11c>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d00b      	beq.n	8004a4c <TIM_OC4_SetConfig+0xc0>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a1d      	ldr	r2, [pc, #116]	@ (8004aac <TIM_OC4_SetConfig+0x120>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d007      	beq.n	8004a4c <TIM_OC4_SetConfig+0xc0>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a1c      	ldr	r2, [pc, #112]	@ (8004ab0 <TIM_OC4_SetConfig+0x124>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d003      	beq.n	8004a4c <TIM_OC4_SetConfig+0xc0>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a17      	ldr	r2, [pc, #92]	@ (8004aa4 <TIM_OC4_SetConfig+0x118>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d113      	bne.n	8004a74 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a52:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004a5a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	695b      	ldr	r3, [r3, #20]
 8004a60:	019b      	lsls	r3, r3, #6
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	019b      	lsls	r3, r3, #6
 8004a6e:	693a      	ldr	r2, [r7, #16]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	693a      	ldr	r2, [r7, #16]
 8004a78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	685a      	ldr	r2, [r3, #4]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	697a      	ldr	r2, [r7, #20]
 8004a8c:	621a      	str	r2, [r3, #32]
}
 8004a8e:	bf00      	nop
 8004a90:	371c      	adds	r7, #28
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	40012c00 	.word	0x40012c00
 8004aa0:	40013400 	.word	0x40013400
 8004aa4:	40015000 	.word	0x40015000
 8004aa8:	40014000 	.word	0x40014000
 8004aac:	40014400 	.word	0x40014400
 8004ab0:	40014800 	.word	0x40014800

08004ab4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b087      	sub	sp, #28
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a1b      	ldr	r3, [r3, #32]
 8004ac8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ae2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ae6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004af8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	041b      	lsls	r3, r3, #16
 8004b00:	693a      	ldr	r2, [r7, #16]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a19      	ldr	r2, [pc, #100]	@ (8004b70 <TIM_OC5_SetConfig+0xbc>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d013      	beq.n	8004b36 <TIM_OC5_SetConfig+0x82>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a18      	ldr	r2, [pc, #96]	@ (8004b74 <TIM_OC5_SetConfig+0xc0>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d00f      	beq.n	8004b36 <TIM_OC5_SetConfig+0x82>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a17      	ldr	r2, [pc, #92]	@ (8004b78 <TIM_OC5_SetConfig+0xc4>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d00b      	beq.n	8004b36 <TIM_OC5_SetConfig+0x82>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a16      	ldr	r2, [pc, #88]	@ (8004b7c <TIM_OC5_SetConfig+0xc8>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d007      	beq.n	8004b36 <TIM_OC5_SetConfig+0x82>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a15      	ldr	r2, [pc, #84]	@ (8004b80 <TIM_OC5_SetConfig+0xcc>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d003      	beq.n	8004b36 <TIM_OC5_SetConfig+0x82>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a14      	ldr	r2, [pc, #80]	@ (8004b84 <TIM_OC5_SetConfig+0xd0>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d109      	bne.n	8004b4a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b3c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	021b      	lsls	r3, r3, #8
 8004b44:	697a      	ldr	r2, [r7, #20]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	697a      	ldr	r2, [r7, #20]
 8004b4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	685a      	ldr	r2, [r3, #4]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	693a      	ldr	r2, [r7, #16]
 8004b62:	621a      	str	r2, [r3, #32]
}
 8004b64:	bf00      	nop
 8004b66:	371c      	adds	r7, #28
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr
 8004b70:	40012c00 	.word	0x40012c00
 8004b74:	40013400 	.word	0x40013400
 8004b78:	40014000 	.word	0x40014000
 8004b7c:	40014400 	.word	0x40014400
 8004b80:	40014800 	.word	0x40014800
 8004b84:	40015000 	.word	0x40015000

08004b88 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b087      	sub	sp, #28
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a1b      	ldr	r3, [r3, #32]
 8004b9c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004bb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	021b      	lsls	r3, r3, #8
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004bce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	051b      	lsls	r3, r3, #20
 8004bd6:	693a      	ldr	r2, [r7, #16]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a1a      	ldr	r2, [pc, #104]	@ (8004c48 <TIM_OC6_SetConfig+0xc0>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d013      	beq.n	8004c0c <TIM_OC6_SetConfig+0x84>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a19      	ldr	r2, [pc, #100]	@ (8004c4c <TIM_OC6_SetConfig+0xc4>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d00f      	beq.n	8004c0c <TIM_OC6_SetConfig+0x84>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a18      	ldr	r2, [pc, #96]	@ (8004c50 <TIM_OC6_SetConfig+0xc8>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d00b      	beq.n	8004c0c <TIM_OC6_SetConfig+0x84>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a17      	ldr	r2, [pc, #92]	@ (8004c54 <TIM_OC6_SetConfig+0xcc>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d007      	beq.n	8004c0c <TIM_OC6_SetConfig+0x84>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a16      	ldr	r2, [pc, #88]	@ (8004c58 <TIM_OC6_SetConfig+0xd0>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d003      	beq.n	8004c0c <TIM_OC6_SetConfig+0x84>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a15      	ldr	r2, [pc, #84]	@ (8004c5c <TIM_OC6_SetConfig+0xd4>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d109      	bne.n	8004c20 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c12:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	695b      	ldr	r3, [r3, #20]
 8004c18:	029b      	lsls	r3, r3, #10
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	685a      	ldr	r2, [r3, #4]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	693a      	ldr	r2, [r7, #16]
 8004c38:	621a      	str	r2, [r3, #32]
}
 8004c3a:	bf00      	nop
 8004c3c:	371c      	adds	r7, #28
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	40012c00 	.word	0x40012c00
 8004c4c:	40013400 	.word	0x40013400
 8004c50:	40014000 	.word	0x40014000
 8004c54:	40014400 	.word	0x40014400
 8004c58:	40014800 	.word	0x40014800
 8004c5c:	40015000 	.word	0x40015000

08004c60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b087      	sub	sp, #28
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6a1b      	ldr	r3, [r3, #32]
 8004c70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6a1b      	ldr	r3, [r3, #32]
 8004c76:	f023 0201 	bic.w	r2, r3, #1
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	699b      	ldr	r3, [r3, #24]
 8004c82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	011b      	lsls	r3, r3, #4
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	f023 030a 	bic.w	r3, r3, #10
 8004c9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c9e:	697a      	ldr	r2, [r7, #20]
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	693a      	ldr	r2, [r7, #16]
 8004caa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	621a      	str	r2, [r3, #32]
}
 8004cb2:	bf00      	nop
 8004cb4:	371c      	adds	r7, #28
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr

08004cbe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cbe:	b480      	push	{r7}
 8004cc0:	b087      	sub	sp, #28
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	60f8      	str	r0, [r7, #12]
 8004cc6:	60b9      	str	r1, [r7, #8]
 8004cc8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
 8004cce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6a1b      	ldr	r3, [r3, #32]
 8004cd4:	f023 0210 	bic.w	r2, r3, #16
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	699b      	ldr	r3, [r3, #24]
 8004ce0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004ce8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	031b      	lsls	r3, r3, #12
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004cfa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	011b      	lsls	r3, r3, #4
 8004d00:	697a      	ldr	r2, [r7, #20]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	621a      	str	r2, [r3, #32]
}
 8004d12:	bf00      	nop
 8004d14:	371c      	adds	r7, #28
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr

08004d1e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d1e:	b480      	push	{r7}
 8004d20:	b085      	sub	sp, #20
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
 8004d26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004d34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d3a:	683a      	ldr	r2, [r7, #0]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	f043 0307 	orr.w	r3, r3, #7
 8004d44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	609a      	str	r2, [r3, #8]
}
 8004d4c:	bf00      	nop
 8004d4e:	3714      	adds	r7, #20
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b087      	sub	sp, #28
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
 8004d64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	021a      	lsls	r2, r3, #8
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	431a      	orrs	r2, r3
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	697a      	ldr	r2, [r7, #20]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	697a      	ldr	r2, [r7, #20]
 8004d8a:	609a      	str	r2, [r3, #8]
}
 8004d8c:	bf00      	nop
 8004d8e:	371c      	adds	r7, #28
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b087      	sub	sp, #28
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	f003 031f 	and.w	r3, r3, #31
 8004daa:	2201      	movs	r2, #1
 8004dac:	fa02 f303 	lsl.w	r3, r2, r3
 8004db0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6a1a      	ldr	r2, [r3, #32]
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	43db      	mvns	r3, r3
 8004dba:	401a      	ands	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6a1a      	ldr	r2, [r3, #32]
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	f003 031f 	and.w	r3, r3, #31
 8004dca:	6879      	ldr	r1, [r7, #4]
 8004dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8004dd0:	431a      	orrs	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	621a      	str	r2, [r3, #32]
}
 8004dd6:	bf00      	nop
 8004dd8:	371c      	adds	r7, #28
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
	...

08004de4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b085      	sub	sp, #20
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d101      	bne.n	8004dfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004df8:	2302      	movs	r3, #2
 8004dfa:	e074      	b.n	8004ee6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2202      	movs	r2, #2
 8004e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a34      	ldr	r2, [pc, #208]	@ (8004ef4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d009      	beq.n	8004e3a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a33      	ldr	r2, [pc, #204]	@ (8004ef8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d004      	beq.n	8004e3a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a31      	ldr	r2, [pc, #196]	@ (8004efc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d108      	bne.n	8004e4c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004e40:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004e52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68fa      	ldr	r2, [r7, #12]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a21      	ldr	r2, [pc, #132]	@ (8004ef4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d022      	beq.n	8004eba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e7c:	d01d      	beq.n	8004eba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a1f      	ldr	r2, [pc, #124]	@ (8004f00 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d018      	beq.n	8004eba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a1d      	ldr	r2, [pc, #116]	@ (8004f04 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d013      	beq.n	8004eba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a1c      	ldr	r2, [pc, #112]	@ (8004f08 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d00e      	beq.n	8004eba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a15      	ldr	r2, [pc, #84]	@ (8004ef8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d009      	beq.n	8004eba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a18      	ldr	r2, [pc, #96]	@ (8004f0c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d004      	beq.n	8004eba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a11      	ldr	r2, [pc, #68]	@ (8004efc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d10c      	bne.n	8004ed4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ec0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	68ba      	ldr	r2, [r7, #8]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68ba      	ldr	r2, [r7, #8]
 8004ed2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3714      	adds	r7, #20
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	40012c00 	.word	0x40012c00
 8004ef8:	40013400 	.word	0x40013400
 8004efc:	40015000 	.word	0x40015000
 8004f00:	40000400 	.word	0x40000400
 8004f04:	40000800 	.word	0x40000800
 8004f08:	40000c00 	.word	0x40000c00
 8004f0c:	40014000 	.word	0x40014000

08004f10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b085      	sub	sp, #20
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d101      	bne.n	8004f2c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004f28:	2302      	movs	r3, #2
 8004f2a:	e078      	b.n	800501e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	695b      	ldr	r3, [r3, #20]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f92:	4313      	orrs	r3, r2
 8004f94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	041b      	lsls	r3, r3, #16
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	69db      	ldr	r3, [r3, #28]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a1c      	ldr	r2, [pc, #112]	@ (800502c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d009      	beq.n	8004fd2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a1b      	ldr	r2, [pc, #108]	@ (8005030 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d004      	beq.n	8004fd2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a19      	ldr	r2, [pc, #100]	@ (8005034 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d11c      	bne.n	800500c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fdc:	051b      	lsls	r3, r3, #20
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	6a1b      	ldr	r3, [r3, #32]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005008:	4313      	orrs	r3, r2
 800500a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3714      	adds	r7, #20
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	40012c00 	.word	0x40012c00
 8005030:	40013400 	.word	0x40013400
 8005034:	40015000 	.word	0x40015000

08005038 <memset>:
 8005038:	4402      	add	r2, r0
 800503a:	4603      	mov	r3, r0
 800503c:	4293      	cmp	r3, r2
 800503e:	d100      	bne.n	8005042 <memset+0xa>
 8005040:	4770      	bx	lr
 8005042:	f803 1b01 	strb.w	r1, [r3], #1
 8005046:	e7f9      	b.n	800503c <memset+0x4>

08005048 <__libc_init_array>:
 8005048:	b570      	push	{r4, r5, r6, lr}
 800504a:	4d0d      	ldr	r5, [pc, #52]	@ (8005080 <__libc_init_array+0x38>)
 800504c:	4c0d      	ldr	r4, [pc, #52]	@ (8005084 <__libc_init_array+0x3c>)
 800504e:	1b64      	subs	r4, r4, r5
 8005050:	10a4      	asrs	r4, r4, #2
 8005052:	2600      	movs	r6, #0
 8005054:	42a6      	cmp	r6, r4
 8005056:	d109      	bne.n	800506c <__libc_init_array+0x24>
 8005058:	4d0b      	ldr	r5, [pc, #44]	@ (8005088 <__libc_init_array+0x40>)
 800505a:	4c0c      	ldr	r4, [pc, #48]	@ (800508c <__libc_init_array+0x44>)
 800505c:	f000 f818 	bl	8005090 <_init>
 8005060:	1b64      	subs	r4, r4, r5
 8005062:	10a4      	asrs	r4, r4, #2
 8005064:	2600      	movs	r6, #0
 8005066:	42a6      	cmp	r6, r4
 8005068:	d105      	bne.n	8005076 <__libc_init_array+0x2e>
 800506a:	bd70      	pop	{r4, r5, r6, pc}
 800506c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005070:	4798      	blx	r3
 8005072:	3601      	adds	r6, #1
 8005074:	e7ee      	b.n	8005054 <__libc_init_array+0xc>
 8005076:	f855 3b04 	ldr.w	r3, [r5], #4
 800507a:	4798      	blx	r3
 800507c:	3601      	adds	r6, #1
 800507e:	e7f2      	b.n	8005066 <__libc_init_array+0x1e>
 8005080:	080050b8 	.word	0x080050b8
 8005084:	080050b8 	.word	0x080050b8
 8005088:	080050b8 	.word	0x080050b8
 800508c:	080050bc 	.word	0x080050bc

08005090 <_init>:
 8005090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005092:	bf00      	nop
 8005094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005096:	bc08      	pop	{r3}
 8005098:	469e      	mov	lr, r3
 800509a:	4770      	bx	lr

0800509c <_fini>:
 800509c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800509e:	bf00      	nop
 80050a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050a2:	bc08      	pop	{r3}
 80050a4:	469e      	mov	lr, r3
 80050a6:	4770      	bx	lr
